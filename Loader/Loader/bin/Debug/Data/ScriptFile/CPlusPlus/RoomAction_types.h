/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef RoomAction_TYPES_H
#define RoomAction_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace ThriftStruct {

class RoomAction;

typedef struct _RoomAction__isset {
  _RoomAction__isset() : Id(false), ActionName(false), ActionType(false), ActionSex(false), ActionMessage(false), ActionIconPkg(false), MainAction(false), TargetAction(false), DefaultOpen(false), ActionShow(false), UnlockType(false), TriggerScene(false), Limit(false), MoneyType(false), MoneyCost(false), UnlockMessage(false) {}
  bool Id :1;
  bool ActionName :1;
  bool ActionType :1;
  bool ActionSex :1;
  bool ActionMessage :1;
  bool ActionIconPkg :1;
  bool MainAction :1;
  bool TargetAction :1;
  bool DefaultOpen :1;
  bool ActionShow :1;
  bool UnlockType :1;
  bool TriggerScene :1;
  bool Limit :1;
  bool MoneyType :1;
  bool MoneyCost :1;
  bool UnlockMessage :1;
} _RoomAction__isset;

class RoomAction {
 public:

  RoomAction(const RoomAction&);
  RoomAction& operator=(const RoomAction&);
  RoomAction() : Id(0), ActionName(), ActionType(0), ActionSex(0), ActionMessage(0), ActionIconPkg(), MainAction(0), TargetAction(0), DefaultOpen(0), ActionShow(0), UnlockType(0), TriggerScene(0), Limit(0), MoneyType(0), MoneyCost(0), UnlockMessage() {
  }

  virtual ~RoomAction() throw();
  int32_t Id;
  std::string ActionName;
  int32_t ActionType;
  int32_t ActionSex;
  int32_t ActionMessage;
  std::string ActionIconPkg;
  int32_t MainAction;
  int32_t TargetAction;
  int32_t DefaultOpen;
  int32_t ActionShow;
  int32_t UnlockType;
  int32_t TriggerScene;
  int32_t Limit;
  int32_t MoneyType;
  int32_t MoneyCost;
  std::string UnlockMessage;

  _RoomAction__isset __isset;

  void __set_Id(const int32_t val);

  void __set_ActionName(const std::string& val);

  void __set_ActionType(const int32_t val);

  void __set_ActionSex(const int32_t val);

  void __set_ActionMessage(const int32_t val);

  void __set_ActionIconPkg(const std::string& val);

  void __set_MainAction(const int32_t val);

  void __set_TargetAction(const int32_t val);

  void __set_DefaultOpen(const int32_t val);

  void __set_ActionShow(const int32_t val);

  void __set_UnlockType(const int32_t val);

  void __set_TriggerScene(const int32_t val);

  void __set_Limit(const int32_t val);

  void __set_MoneyType(const int32_t val);

  void __set_MoneyCost(const int32_t val);

  void __set_UnlockMessage(const std::string& val);

  bool operator == (const RoomAction & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(ActionName == rhs.ActionName))
      return false;
    if (!(ActionType == rhs.ActionType))
      return false;
    if (!(ActionSex == rhs.ActionSex))
      return false;
    if (!(ActionMessage == rhs.ActionMessage))
      return false;
    if (!(ActionIconPkg == rhs.ActionIconPkg))
      return false;
    if (!(MainAction == rhs.MainAction))
      return false;
    if (!(TargetAction == rhs.TargetAction))
      return false;
    if (!(DefaultOpen == rhs.DefaultOpen))
      return false;
    if (!(ActionShow == rhs.ActionShow))
      return false;
    if (!(UnlockType == rhs.UnlockType))
      return false;
    if (!(TriggerScene == rhs.TriggerScene))
      return false;
    if (!(Limit == rhs.Limit))
      return false;
    if (!(MoneyType == rhs.MoneyType))
      return false;
    if (!(MoneyCost == rhs.MoneyCost))
      return false;
    if (!(UnlockMessage == rhs.UnlockMessage))
      return false;
    return true;
  }
  bool operator != (const RoomAction &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RoomAction & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RoomAction &a, RoomAction &b);

inline std::ostream& operator<<(std::ostream& out, const RoomAction& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
