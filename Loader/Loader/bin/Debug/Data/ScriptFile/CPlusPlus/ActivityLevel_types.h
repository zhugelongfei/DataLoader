/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ActivityLevel_TYPES_H
#define ActivityLevel_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace ThriftStruct {

class TestStruct;

class ActivityLevel;

typedef struct _TestStruct__isset {
  _TestStruct__isset() : A(false), B(false) {}
  bool A :1;
  bool B :1;
} _TestStruct__isset;

class TestStruct {
 public:

  TestStruct(const TestStruct&);
  TestStruct& operator=(const TestStruct&);
  TestStruct() : A(0), B(0) {
  }

  virtual ~TestStruct() throw();
  int32_t A;
  int16_t B;

  _TestStruct__isset __isset;

  void __set_A(const int32_t val);

  void __set_B(const int16_t val);

  bool operator == (const TestStruct & rhs) const
  {
    if (!(A == rhs.A))
      return false;
    if (!(B == rhs.B))
      return false;
    return true;
  }
  bool operator != (const TestStruct &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TestStruct & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TestStruct &a, TestStruct &b);

inline std::ostream& operator<<(std::ostream& out, const TestStruct& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _ActivityLevel__isset {
  _ActivityLevel__isset() : Level(false), Exp(false), ActivityNormalShopSale(false), ActivityAddDanceReward(false), VipPriceSale(false), VActivityRightDesc(false) {}
  bool Level :1;
  bool Exp :1;
  bool ActivityNormalShopSale :1;
  bool ActivityAddDanceReward :1;
  bool VipPriceSale :1;
  bool VActivityRightDesc :1;
} _ActivityLevel__isset;

class ActivityLevel {
 public:

  ActivityLevel(const ActivityLevel&);
  ActivityLevel& operator=(const ActivityLevel&);
  ActivityLevel() : Level(0), Exp(0), ActivityNormalShopSale(0), ActivityAddDanceReward(0), VipPriceSale(0) {
  }

  virtual ~ActivityLevel() throw();
  int32_t Level;
  int32_t Exp;
  int32_t ActivityNormalShopSale;
  int32_t ActivityAddDanceReward;
  int32_t VipPriceSale;
  std::vector<TestStruct>  VActivityRightDesc;

  _ActivityLevel__isset __isset;

  void __set_Level(const int32_t val);

  void __set_Exp(const int32_t val);

  void __set_ActivityNormalShopSale(const int32_t val);

  void __set_ActivityAddDanceReward(const int32_t val);

  void __set_VipPriceSale(const int32_t val);

  void __set_VActivityRightDesc(const std::vector<TestStruct> & val);

  bool operator == (const ActivityLevel & rhs) const
  {
    if (!(Level == rhs.Level))
      return false;
    if (!(Exp == rhs.Exp))
      return false;
    if (!(ActivityNormalShopSale == rhs.ActivityNormalShopSale))
      return false;
    if (!(ActivityAddDanceReward == rhs.ActivityAddDanceReward))
      return false;
    if (!(VipPriceSale == rhs.VipPriceSale))
      return false;
    if (!(VActivityRightDesc == rhs.VActivityRightDesc))
      return false;
    return true;
  }
  bool operator != (const ActivityLevel &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ActivityLevel & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ActivityLevel &a, ActivityLevel &b);

inline std::ostream& operator<<(std::ostream& out, const ActivityLevel& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
