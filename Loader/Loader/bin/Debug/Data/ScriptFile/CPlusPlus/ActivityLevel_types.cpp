/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "ActivityLevel_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace ThriftStruct {


TestStruct::~TestStruct() throw() {
}


void TestStruct::__set_A(const int32_t val) {
  this->A = val;
}

void TestStruct::__set_B(const int16_t val) {
  this->B = val;
}

uint32_t TestStruct::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->A);
          this->__isset.A = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->B);
          this->__isset.B = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TestStruct::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TestStruct");

  xfer += oprot->writeFieldBegin("A", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->A);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("B", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->B);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TestStruct &a, TestStruct &b) {
  using ::std::swap;
  swap(a.A, b.A);
  swap(a.B, b.B);
  swap(a.__isset, b.__isset);
}

TestStruct::TestStruct(const TestStruct& other0) {
  A = other0.A;
  B = other0.B;
  __isset = other0.__isset;
}
TestStruct& TestStruct::operator=(const TestStruct& other1) {
  A = other1.A;
  B = other1.B;
  __isset = other1.__isset;
  return *this;
}
void TestStruct::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TestStruct(";
  out << "A=" << to_string(A);
  out << ", " << "B=" << to_string(B);
  out << ")";
}


ActivityLevel::~ActivityLevel() throw() {
}


void ActivityLevel::__set_Level(const int32_t val) {
  this->Level = val;
}

void ActivityLevel::__set_Exp(const int32_t val) {
  this->Exp = val;
}

void ActivityLevel::__set_ActivityNormalShopSale(const int32_t val) {
  this->ActivityNormalShopSale = val;
}

void ActivityLevel::__set_ActivityAddDanceReward(const int32_t val) {
  this->ActivityAddDanceReward = val;
}

void ActivityLevel::__set_VipPriceSale(const int32_t val) {
  this->VipPriceSale = val;
}

void ActivityLevel::__set_VActivityRightDesc(const std::vector<TestStruct> & val) {
  this->VActivityRightDesc = val;
}

uint32_t ActivityLevel::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Level);
          this->__isset.Level = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Exp);
          this->__isset.Exp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ActivityNormalShopSale);
          this->__isset.ActivityNormalShopSale = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ActivityAddDanceReward);
          this->__isset.ActivityAddDanceReward = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->VipPriceSale);
          this->__isset.VipPriceSale = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->VActivityRightDesc.clear();
            uint32_t _size2;
            ::apache::thrift::protocol::TType _etype5;
            xfer += iprot->readListBegin(_etype5, _size2);
            this->VActivityRightDesc.resize(_size2);
            uint32_t _i6;
            for (_i6 = 0; _i6 < _size2; ++_i6)
            {
              xfer += this->VActivityRightDesc[_i6].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.VActivityRightDesc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ActivityLevel::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ActivityLevel");

  xfer += oprot->writeFieldBegin("Level", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->Level);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Exp", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->Exp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ActivityNormalShopSale", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->ActivityNormalShopSale);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ActivityAddDanceReward", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->ActivityAddDanceReward);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("VipPriceSale", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->VipPriceSale);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("VActivityRightDesc", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->VActivityRightDesc.size()));
    std::vector<TestStruct> ::const_iterator _iter7;
    for (_iter7 = this->VActivityRightDesc.begin(); _iter7 != this->VActivityRightDesc.end(); ++_iter7)
    {
      xfer += (*_iter7).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ActivityLevel &a, ActivityLevel &b) {
  using ::std::swap;
  swap(a.Level, b.Level);
  swap(a.Exp, b.Exp);
  swap(a.ActivityNormalShopSale, b.ActivityNormalShopSale);
  swap(a.ActivityAddDanceReward, b.ActivityAddDanceReward);
  swap(a.VipPriceSale, b.VipPriceSale);
  swap(a.VActivityRightDesc, b.VActivityRightDesc);
  swap(a.__isset, b.__isset);
}

ActivityLevel::ActivityLevel(const ActivityLevel& other8) {
  Level = other8.Level;
  Exp = other8.Exp;
  ActivityNormalShopSale = other8.ActivityNormalShopSale;
  ActivityAddDanceReward = other8.ActivityAddDanceReward;
  VipPriceSale = other8.VipPriceSale;
  VActivityRightDesc = other8.VActivityRightDesc;
  __isset = other8.__isset;
}
ActivityLevel& ActivityLevel::operator=(const ActivityLevel& other9) {
  Level = other9.Level;
  Exp = other9.Exp;
  ActivityNormalShopSale = other9.ActivityNormalShopSale;
  ActivityAddDanceReward = other9.ActivityAddDanceReward;
  VipPriceSale = other9.VipPriceSale;
  VActivityRightDesc = other9.VActivityRightDesc;
  __isset = other9.__isset;
  return *this;
}
void ActivityLevel::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ActivityLevel(";
  out << "Level=" << to_string(Level);
  out << ", " << "Exp=" << to_string(Exp);
  out << ", " << "ActivityNormalShopSale=" << to_string(ActivityNormalShopSale);
  out << ", " << "ActivityAddDanceReward=" << to_string(ActivityAddDanceReward);
  out << ", " << "VipPriceSale=" << to_string(VipPriceSale);
  out << ", " << "VActivityRightDesc=" << to_string(VActivityRightDesc);
  out << ")";
}

} // namespace
