/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef AchievementCfg_TYPES_H
#define AchievementCfg_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace ThriftStruct {

class AchievementCfg;

typedef struct _AchievementCfg__isset {
  _AchievementCfg__isset() : Type(false), LimitIDMale(false), LimitIDFemale(false), Scene(false) {}
  bool Type :1;
  bool LimitIDMale :1;
  bool LimitIDFemale :1;
  bool Scene :1;
} _AchievementCfg__isset;

class AchievementCfg {
 public:

  AchievementCfg(const AchievementCfg&);
  AchievementCfg& operator=(const AchievementCfg&);
  AchievementCfg() : Type(0), LimitIDMale(0), LimitIDFemale(0), Scene(0) {
  }

  virtual ~AchievementCfg() throw();
  int32_t Type;
  int32_t LimitIDMale;
  int32_t LimitIDFemale;
  int32_t Scene;

  _AchievementCfg__isset __isset;

  void __set_Type(const int32_t val);

  void __set_LimitIDMale(const int32_t val);

  void __set_LimitIDFemale(const int32_t val);

  void __set_Scene(const int32_t val);

  bool operator == (const AchievementCfg & rhs) const
  {
    if (!(Type == rhs.Type))
      return false;
    if (!(LimitIDMale == rhs.LimitIDMale))
      return false;
    if (!(LimitIDFemale == rhs.LimitIDFemale))
      return false;
    if (!(Scene == rhs.Scene))
      return false;
    return true;
  }
  bool operator != (const AchievementCfg &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AchievementCfg & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AchievementCfg &a, AchievementCfg &b);

inline std::ostream& operator<<(std::ostream& out, const AchievementCfg& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
