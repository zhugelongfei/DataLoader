/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Counter_TYPES_H
#define Counter_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace ThriftStruct {

class Counter;

typedef struct _Counter__isset {
  _Counter__isset() : ID(false), GameTimesIntCountID(false), DailyIBGiftIntCountID(false) {}
  bool ID :1;
  bool GameTimesIntCountID :1;
  bool DailyIBGiftIntCountID :1;
} _Counter__isset;

class Counter {
 public:

  Counter(const Counter&);
  Counter& operator=(const Counter&);
  Counter() : ID(0), GameTimesIntCountID(0), DailyIBGiftIntCountID(0) {
  }

  virtual ~Counter() throw();
  int32_t ID;
  int32_t GameTimesIntCountID;
  int32_t DailyIBGiftIntCountID;

  _Counter__isset __isset;

  void __set_ID(const int32_t val);

  void __set_GameTimesIntCountID(const int32_t val);

  void __set_DailyIBGiftIntCountID(const int32_t val);

  bool operator == (const Counter & rhs) const
  {
    if (!(ID == rhs.ID))
      return false;
    if (!(GameTimesIntCountID == rhs.GameTimesIntCountID))
      return false;
    if (!(DailyIBGiftIntCountID == rhs.DailyIBGiftIntCountID))
      return false;
    return true;
  }
  bool operator != (const Counter &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Counter & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Counter &a, Counter &b);

inline std::ostream& operator<<(std::ostream& out, const Counter& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
