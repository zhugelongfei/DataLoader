/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SceneInfo_TYPES_H
#define SceneInfo_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace ThriftStruct {

class SceneInfo;

typedef struct _SceneInfo__isset {
  _SceneInfo__isset() : ID(false), Name(false), ResId(false) {}
  bool ID :1;
  bool Name :1;
  bool ResId :1;
} _SceneInfo__isset;

class SceneInfo {
 public:

  SceneInfo(const SceneInfo&);
  SceneInfo& operator=(const SceneInfo&);
  SceneInfo() : ID(0), Name(), ResId(0) {
  }

  virtual ~SceneInfo() throw();
  int32_t ID;
  std::string Name;
  int32_t ResId;

  _SceneInfo__isset __isset;

  void __set_ID(const int32_t val);

  void __set_Name(const std::string& val);

  void __set_ResId(const int32_t val);

  bool operator == (const SceneInfo & rhs) const
  {
    if (!(ID == rhs.ID))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(ResId == rhs.ResId))
      return false;
    return true;
  }
  bool operator != (const SceneInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SceneInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SceneInfo &a, SceneInfo &b);

inline std::ostream& operator<<(std::ostream& out, const SceneInfo& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
