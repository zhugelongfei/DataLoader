/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Autogenerated by program
 * 
 * <para>Autho ZhuGeLongFei</para>
 * 
 * <para>Do not edit unless you are sure that you know what you are doning</para>
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-06-14")
public class AchievementCfg implements org.apache.thrift.TBase<AchievementCfg, AchievementCfg._Fields>, java.io.Serializable, Cloneable, Comparable<AchievementCfg> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AchievementCfg");

  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("Type", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField LIMIT_IDMALE_FIELD_DESC = new org.apache.thrift.protocol.TField("LimitIDMale", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField LIMIT_IDFEMALE_FIELD_DESC = new org.apache.thrift.protocol.TField("LimitIDFemale", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField SCENE_FIELD_DESC = new org.apache.thrift.protocol.TField("Scene", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AchievementCfgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AchievementCfgTupleSchemeFactory());
  }

  public int Type; // required
  public int LimitIDMale; // required
  public int LimitIDFemale; // required
  public int Scene; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TYPE((short)1, "Type"),
    LIMIT_IDMALE((short)2, "LimitIDMale"),
    LIMIT_IDFEMALE((short)3, "LimitIDFemale"),
    SCENE((short)4, "Scene");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TYPE
          return TYPE;
        case 2: // LIMIT_IDMALE
          return LIMIT_IDMALE;
        case 3: // LIMIT_IDFEMALE
          return LIMIT_IDFEMALE;
        case 4: // SCENE
          return SCENE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TYPE_ISSET_ID = 0;
  private static final int __LIMITIDMALE_ISSET_ID = 1;
  private static final int __LIMITIDFEMALE_ISSET_ID = 2;
  private static final int __SCENE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("Type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LIMIT_IDMALE, new org.apache.thrift.meta_data.FieldMetaData("LimitIDMale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LIMIT_IDFEMALE, new org.apache.thrift.meta_data.FieldMetaData("LimitIDFemale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SCENE, new org.apache.thrift.meta_data.FieldMetaData("Scene", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AchievementCfg.class, metaDataMap);
  }

  public AchievementCfg() {
  }

  public AchievementCfg(
    int Type,
    int LimitIDMale,
    int LimitIDFemale,
    int Scene)
  {
    this();
    this.Type = Type;
    setTypeIsSet(true);
    this.LimitIDMale = LimitIDMale;
    setLimitIDMaleIsSet(true);
    this.LimitIDFemale = LimitIDFemale;
    setLimitIDFemaleIsSet(true);
    this.Scene = Scene;
    setSceneIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AchievementCfg(AchievementCfg other) {
    __isset_bitfield = other.__isset_bitfield;
    this.Type = other.Type;
    this.LimitIDMale = other.LimitIDMale;
    this.LimitIDFemale = other.LimitIDFemale;
    this.Scene = other.Scene;
  }

  public AchievementCfg deepCopy() {
    return new AchievementCfg(this);
  }

  @Override
  public void clear() {
    setTypeIsSet(false);
    this.Type = 0;
    setLimitIDMaleIsSet(false);
    this.LimitIDMale = 0;
    setLimitIDFemaleIsSet(false);
    this.LimitIDFemale = 0;
    setSceneIsSet(false);
    this.Scene = 0;
  }

  public int getType() {
    return this.Type;
  }

  public AchievementCfg setType(int Type) {
    this.Type = Type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  /** Returns true if field Type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
  }

  public int getLimitIDMale() {
    return this.LimitIDMale;
  }

  public AchievementCfg setLimitIDMale(int LimitIDMale) {
    this.LimitIDMale = LimitIDMale;
    setLimitIDMaleIsSet(true);
    return this;
  }

  public void unsetLimitIDMale() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMITIDMALE_ISSET_ID);
  }

  /** Returns true if field LimitIDMale is set (has been assigned a value) and false otherwise */
  public boolean isSetLimitIDMale() {
    return EncodingUtils.testBit(__isset_bitfield, __LIMITIDMALE_ISSET_ID);
  }

  public void setLimitIDMaleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMITIDMALE_ISSET_ID, value);
  }

  public int getLimitIDFemale() {
    return this.LimitIDFemale;
  }

  public AchievementCfg setLimitIDFemale(int LimitIDFemale) {
    this.LimitIDFemale = LimitIDFemale;
    setLimitIDFemaleIsSet(true);
    return this;
  }

  public void unsetLimitIDFemale() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMITIDFEMALE_ISSET_ID);
  }

  /** Returns true if field LimitIDFemale is set (has been assigned a value) and false otherwise */
  public boolean isSetLimitIDFemale() {
    return EncodingUtils.testBit(__isset_bitfield, __LIMITIDFEMALE_ISSET_ID);
  }

  public void setLimitIDFemaleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMITIDFEMALE_ISSET_ID, value);
  }

  public int getScene() {
    return this.Scene;
  }

  public AchievementCfg setScene(int Scene) {
    this.Scene = Scene;
    setSceneIsSet(true);
    return this;
  }

  public void unsetScene() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SCENE_ISSET_ID);
  }

  /** Returns true if field Scene is set (has been assigned a value) and false otherwise */
  public boolean isSetScene() {
    return EncodingUtils.testBit(__isset_bitfield, __SCENE_ISSET_ID);
  }

  public void setSceneIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SCENE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Integer)value);
      }
      break;

    case LIMIT_IDMALE:
      if (value == null) {
        unsetLimitIDMale();
      } else {
        setLimitIDMale((Integer)value);
      }
      break;

    case LIMIT_IDFEMALE:
      if (value == null) {
        unsetLimitIDFemale();
      } else {
        setLimitIDFemale((Integer)value);
      }
      break;

    case SCENE:
      if (value == null) {
        unsetScene();
      } else {
        setScene((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TYPE:
      return getType();

    case LIMIT_IDMALE:
      return getLimitIDMale();

    case LIMIT_IDFEMALE:
      return getLimitIDFemale();

    case SCENE:
      return getScene();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TYPE:
      return isSetType();
    case LIMIT_IDMALE:
      return isSetLimitIDMale();
    case LIMIT_IDFEMALE:
      return isSetLimitIDFemale();
    case SCENE:
      return isSetScene();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AchievementCfg)
      return this.equals((AchievementCfg)that);
    return false;
  }

  public boolean equals(AchievementCfg that) {
    if (that == null)
      return false;

    boolean this_present_Type = true;
    boolean that_present_Type = true;
    if (this_present_Type || that_present_Type) {
      if (!(this_present_Type && that_present_Type))
        return false;
      if (this.Type != that.Type)
        return false;
    }

    boolean this_present_LimitIDMale = true;
    boolean that_present_LimitIDMale = true;
    if (this_present_LimitIDMale || that_present_LimitIDMale) {
      if (!(this_present_LimitIDMale && that_present_LimitIDMale))
        return false;
      if (this.LimitIDMale != that.LimitIDMale)
        return false;
    }

    boolean this_present_LimitIDFemale = true;
    boolean that_present_LimitIDFemale = true;
    if (this_present_LimitIDFemale || that_present_LimitIDFemale) {
      if (!(this_present_LimitIDFemale && that_present_LimitIDFemale))
        return false;
      if (this.LimitIDFemale != that.LimitIDFemale)
        return false;
    }

    boolean this_present_Scene = true;
    boolean that_present_Scene = true;
    if (this_present_Scene || that_present_Scene) {
      if (!(this_present_Scene && that_present_Scene))
        return false;
      if (this.Scene != that.Scene)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_Type = true;
    list.add(present_Type);
    if (present_Type)
      list.add(Type);

    boolean present_LimitIDMale = true;
    list.add(present_LimitIDMale);
    if (present_LimitIDMale)
      list.add(LimitIDMale);

    boolean present_LimitIDFemale = true;
    list.add(present_LimitIDFemale);
    if (present_LimitIDFemale)
      list.add(LimitIDFemale);

    boolean present_Scene = true;
    list.add(present_Scene);
    if (present_Scene)
      list.add(Scene);

    return list.hashCode();
  }

  @Override
  public int compareTo(AchievementCfg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Type, other.Type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLimitIDMale()).compareTo(other.isSetLimitIDMale());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimitIDMale()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.LimitIDMale, other.LimitIDMale);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLimitIDFemale()).compareTo(other.isSetLimitIDFemale());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimitIDFemale()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.LimitIDFemale, other.LimitIDFemale);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScene()).compareTo(other.isSetScene());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScene()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Scene, other.Scene);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AchievementCfg(");
    boolean first = true;

    sb.append("Type:");
    sb.append(this.Type);
    first = false;
    if (!first) sb.append(", ");
    sb.append("LimitIDMale:");
    sb.append(this.LimitIDMale);
    first = false;
    if (!first) sb.append(", ");
    sb.append("LimitIDFemale:");
    sb.append(this.LimitIDFemale);
    first = false;
    if (!first) sb.append(", ");
    sb.append("Scene:");
    sb.append(this.Scene);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AchievementCfgStandardSchemeFactory implements SchemeFactory {
    public AchievementCfgStandardScheme getScheme() {
      return new AchievementCfgStandardScheme();
    }
  }

  private static class AchievementCfgStandardScheme extends StandardScheme<AchievementCfg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AchievementCfg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.Type = iprot.readI32();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LIMIT_IDMALE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.LimitIDMale = iprot.readI32();
              struct.setLimitIDMaleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LIMIT_IDFEMALE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.LimitIDFemale = iprot.readI32();
              struct.setLimitIDFemaleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SCENE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.Scene = iprot.readI32();
              struct.setSceneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AchievementCfg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(struct.Type);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LIMIT_IDMALE_FIELD_DESC);
      oprot.writeI32(struct.LimitIDMale);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LIMIT_IDFEMALE_FIELD_DESC);
      oprot.writeI32(struct.LimitIDFemale);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SCENE_FIELD_DESC);
      oprot.writeI32(struct.Scene);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AchievementCfgTupleSchemeFactory implements SchemeFactory {
    public AchievementCfgTupleScheme getScheme() {
      return new AchievementCfgTupleScheme();
    }
  }

  private static class AchievementCfgTupleScheme extends TupleScheme<AchievementCfg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AchievementCfg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetType()) {
        optionals.set(0);
      }
      if (struct.isSetLimitIDMale()) {
        optionals.set(1);
      }
      if (struct.isSetLimitIDFemale()) {
        optionals.set(2);
      }
      if (struct.isSetScene()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetType()) {
        oprot.writeI32(struct.Type);
      }
      if (struct.isSetLimitIDMale()) {
        oprot.writeI32(struct.LimitIDMale);
      }
      if (struct.isSetLimitIDFemale()) {
        oprot.writeI32(struct.LimitIDFemale);
      }
      if (struct.isSetScene()) {
        oprot.writeI32(struct.Scene);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AchievementCfg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.Type = iprot.readI32();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.LimitIDMale = iprot.readI32();
        struct.setLimitIDMaleIsSet(true);
      }
      if (incoming.get(2)) {
        struct.LimitIDFemale = iprot.readI32();
        struct.setLimitIDFemaleIsSet(true);
      }
      if (incoming.get(3)) {
        struct.Scene = iprot.readI32();
        struct.setSceneIsSet(true);
      }
    }
  }

}

