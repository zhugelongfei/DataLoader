/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-06-14")
public class ActivityLevel implements org.apache.thrift.TBase<ActivityLevel, ActivityLevel._Fields>, java.io.Serializable, Cloneable, Comparable<ActivityLevel> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ActivityLevel");

  private static final org.apache.thrift.protocol.TField LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("Level", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("Exp", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ACTIVITY_NORMAL_SHOP_SALE_FIELD_DESC = new org.apache.thrift.protocol.TField("ActivityNormalShopSale", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField ACTIVITY_ADD_DANCE_REWARD_FIELD_DESC = new org.apache.thrift.protocol.TField("ActivityAddDanceReward", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField VIP_PRICE_SALE_FIELD_DESC = new org.apache.thrift.protocol.TField("VipPriceSale", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField VACTIVITY_RIGHT_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("VActivityRightDesc", org.apache.thrift.protocol.TType.LIST, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ActivityLevelStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ActivityLevelTupleSchemeFactory());
  }

  public int Level; // required
  public int Exp; // required
  public int ActivityNormalShopSale; // required
  public int ActivityAddDanceReward; // required
  public int VipPriceSale; // required
  public List<TestStruct> VActivityRightDesc; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LEVEL((short)1, "Level"),
    EXP((short)2, "Exp"),
    ACTIVITY_NORMAL_SHOP_SALE((short)3, "ActivityNormalShopSale"),
    ACTIVITY_ADD_DANCE_REWARD((short)4, "ActivityAddDanceReward"),
    VIP_PRICE_SALE((short)5, "VipPriceSale"),
    VACTIVITY_RIGHT_DESC((short)6, "VActivityRightDesc");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LEVEL
          return LEVEL;
        case 2: // EXP
          return EXP;
        case 3: // ACTIVITY_NORMAL_SHOP_SALE
          return ACTIVITY_NORMAL_SHOP_SALE;
        case 4: // ACTIVITY_ADD_DANCE_REWARD
          return ACTIVITY_ADD_DANCE_REWARD;
        case 5: // VIP_PRICE_SALE
          return VIP_PRICE_SALE;
        case 6: // VACTIVITY_RIGHT_DESC
          return VACTIVITY_RIGHT_DESC;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LEVEL_ISSET_ID = 0;
  private static final int __EXP_ISSET_ID = 1;
  private static final int __ACTIVITYNORMALSHOPSALE_ISSET_ID = 2;
  private static final int __ACTIVITYADDDANCEREWARD_ISSET_ID = 3;
  private static final int __VIPPRICESALE_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LEVEL, new org.apache.thrift.meta_data.FieldMetaData("Level", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXP, new org.apache.thrift.meta_data.FieldMetaData("Exp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACTIVITY_NORMAL_SHOP_SALE, new org.apache.thrift.meta_data.FieldMetaData("ActivityNormalShopSale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACTIVITY_ADD_DANCE_REWARD, new org.apache.thrift.meta_data.FieldMetaData("ActivityAddDanceReward", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VIP_PRICE_SALE, new org.apache.thrift.meta_data.FieldMetaData("VipPriceSale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VACTIVITY_RIGHT_DESC, new org.apache.thrift.meta_data.FieldMetaData("VActivityRightDesc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TestStruct.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ActivityLevel.class, metaDataMap);
  }

  public ActivityLevel() {
  }

  public ActivityLevel(
    int Level,
    int Exp,
    int ActivityNormalShopSale,
    int ActivityAddDanceReward,
    int VipPriceSale,
    List<TestStruct> VActivityRightDesc)
  {
    this();
    this.Level = Level;
    setLevelIsSet(true);
    this.Exp = Exp;
    setExpIsSet(true);
    this.ActivityNormalShopSale = ActivityNormalShopSale;
    setActivityNormalShopSaleIsSet(true);
    this.ActivityAddDanceReward = ActivityAddDanceReward;
    setActivityAddDanceRewardIsSet(true);
    this.VipPriceSale = VipPriceSale;
    setVipPriceSaleIsSet(true);
    this.VActivityRightDesc = VActivityRightDesc;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ActivityLevel(ActivityLevel other) {
    __isset_bitfield = other.__isset_bitfield;
    this.Level = other.Level;
    this.Exp = other.Exp;
    this.ActivityNormalShopSale = other.ActivityNormalShopSale;
    this.ActivityAddDanceReward = other.ActivityAddDanceReward;
    this.VipPriceSale = other.VipPriceSale;
    if (other.isSetVActivityRightDesc()) {
      List<TestStruct> __this__VActivityRightDesc = new ArrayList<TestStruct>(other.VActivityRightDesc.size());
      for (TestStruct other_element : other.VActivityRightDesc) {
        __this__VActivityRightDesc.add(new TestStruct(other_element));
      }
      this.VActivityRightDesc = __this__VActivityRightDesc;
    }
  }

  public ActivityLevel deepCopy() {
    return new ActivityLevel(this);
  }

  @Override
  public void clear() {
    setLevelIsSet(false);
    this.Level = 0;
    setExpIsSet(false);
    this.Exp = 0;
    setActivityNormalShopSaleIsSet(false);
    this.ActivityNormalShopSale = 0;
    setActivityAddDanceRewardIsSet(false);
    this.ActivityAddDanceReward = 0;
    setVipPriceSaleIsSet(false);
    this.VipPriceSale = 0;
    this.VActivityRightDesc = null;
  }

  public int getLevel() {
    return this.Level;
  }

  public ActivityLevel setLevel(int Level) {
    this.Level = Level;
    setLevelIsSet(true);
    return this;
  }

  public void unsetLevel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEVEL_ISSET_ID);
  }

  /** Returns true if field Level is set (has been assigned a value) and false otherwise */
  public boolean isSetLevel() {
    return EncodingUtils.testBit(__isset_bitfield, __LEVEL_ISSET_ID);
  }

  public void setLevelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEVEL_ISSET_ID, value);
  }

  public int getExp() {
    return this.Exp;
  }

  public ActivityLevel setExp(int Exp) {
    this.Exp = Exp;
    setExpIsSet(true);
    return this;
  }

  public void unsetExp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXP_ISSET_ID);
  }

  /** Returns true if field Exp is set (has been assigned a value) and false otherwise */
  public boolean isSetExp() {
    return EncodingUtils.testBit(__isset_bitfield, __EXP_ISSET_ID);
  }

  public void setExpIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXP_ISSET_ID, value);
  }

  public int getActivityNormalShopSale() {
    return this.ActivityNormalShopSale;
  }

  public ActivityLevel setActivityNormalShopSale(int ActivityNormalShopSale) {
    this.ActivityNormalShopSale = ActivityNormalShopSale;
    setActivityNormalShopSaleIsSet(true);
    return this;
  }

  public void unsetActivityNormalShopSale() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIVITYNORMALSHOPSALE_ISSET_ID);
  }

  /** Returns true if field ActivityNormalShopSale is set (has been assigned a value) and false otherwise */
  public boolean isSetActivityNormalShopSale() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTIVITYNORMALSHOPSALE_ISSET_ID);
  }

  public void setActivityNormalShopSaleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIVITYNORMALSHOPSALE_ISSET_ID, value);
  }

  public int getActivityAddDanceReward() {
    return this.ActivityAddDanceReward;
  }

  public ActivityLevel setActivityAddDanceReward(int ActivityAddDanceReward) {
    this.ActivityAddDanceReward = ActivityAddDanceReward;
    setActivityAddDanceRewardIsSet(true);
    return this;
  }

  public void unsetActivityAddDanceReward() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIVITYADDDANCEREWARD_ISSET_ID);
  }

  /** Returns true if field ActivityAddDanceReward is set (has been assigned a value) and false otherwise */
  public boolean isSetActivityAddDanceReward() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTIVITYADDDANCEREWARD_ISSET_ID);
  }

  public void setActivityAddDanceRewardIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIVITYADDDANCEREWARD_ISSET_ID, value);
  }

  public int getVipPriceSale() {
    return this.VipPriceSale;
  }

  public ActivityLevel setVipPriceSale(int VipPriceSale) {
    this.VipPriceSale = VipPriceSale;
    setVipPriceSaleIsSet(true);
    return this;
  }

  public void unsetVipPriceSale() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIPPRICESALE_ISSET_ID);
  }

  /** Returns true if field VipPriceSale is set (has been assigned a value) and false otherwise */
  public boolean isSetVipPriceSale() {
    return EncodingUtils.testBit(__isset_bitfield, __VIPPRICESALE_ISSET_ID);
  }

  public void setVipPriceSaleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIPPRICESALE_ISSET_ID, value);
  }

  public int getVActivityRightDescSize() {
    return (this.VActivityRightDesc == null) ? 0 : this.VActivityRightDesc.size();
  }

  public java.util.Iterator<TestStruct> getVActivityRightDescIterator() {
    return (this.VActivityRightDesc == null) ? null : this.VActivityRightDesc.iterator();
  }

  public void addToVActivityRightDesc(TestStruct elem) {
    if (this.VActivityRightDesc == null) {
      this.VActivityRightDesc = new ArrayList<TestStruct>();
    }
    this.VActivityRightDesc.add(elem);
  }

  public List<TestStruct> getVActivityRightDesc() {
    return this.VActivityRightDesc;
  }

  public ActivityLevel setVActivityRightDesc(List<TestStruct> VActivityRightDesc) {
    this.VActivityRightDesc = VActivityRightDesc;
    return this;
  }

  public void unsetVActivityRightDesc() {
    this.VActivityRightDesc = null;
  }

  /** Returns true if field VActivityRightDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetVActivityRightDesc() {
    return this.VActivityRightDesc != null;
  }

  public void setVActivityRightDescIsSet(boolean value) {
    if (!value) {
      this.VActivityRightDesc = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LEVEL:
      if (value == null) {
        unsetLevel();
      } else {
        setLevel((Integer)value);
      }
      break;

    case EXP:
      if (value == null) {
        unsetExp();
      } else {
        setExp((Integer)value);
      }
      break;

    case ACTIVITY_NORMAL_SHOP_SALE:
      if (value == null) {
        unsetActivityNormalShopSale();
      } else {
        setActivityNormalShopSale((Integer)value);
      }
      break;

    case ACTIVITY_ADD_DANCE_REWARD:
      if (value == null) {
        unsetActivityAddDanceReward();
      } else {
        setActivityAddDanceReward((Integer)value);
      }
      break;

    case VIP_PRICE_SALE:
      if (value == null) {
        unsetVipPriceSale();
      } else {
        setVipPriceSale((Integer)value);
      }
      break;

    case VACTIVITY_RIGHT_DESC:
      if (value == null) {
        unsetVActivityRightDesc();
      } else {
        setVActivityRightDesc((List<TestStruct>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LEVEL:
      return getLevel();

    case EXP:
      return getExp();

    case ACTIVITY_NORMAL_SHOP_SALE:
      return getActivityNormalShopSale();

    case ACTIVITY_ADD_DANCE_REWARD:
      return getActivityAddDanceReward();

    case VIP_PRICE_SALE:
      return getVipPriceSale();

    case VACTIVITY_RIGHT_DESC:
      return getVActivityRightDesc();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LEVEL:
      return isSetLevel();
    case EXP:
      return isSetExp();
    case ACTIVITY_NORMAL_SHOP_SALE:
      return isSetActivityNormalShopSale();
    case ACTIVITY_ADD_DANCE_REWARD:
      return isSetActivityAddDanceReward();
    case VIP_PRICE_SALE:
      return isSetVipPriceSale();
    case VACTIVITY_RIGHT_DESC:
      return isSetVActivityRightDesc();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ActivityLevel)
      return this.equals((ActivityLevel)that);
    return false;
  }

  public boolean equals(ActivityLevel that) {
    if (that == null)
      return false;

    boolean this_present_Level = true;
    boolean that_present_Level = true;
    if (this_present_Level || that_present_Level) {
      if (!(this_present_Level && that_present_Level))
        return false;
      if (this.Level != that.Level)
        return false;
    }

    boolean this_present_Exp = true;
    boolean that_present_Exp = true;
    if (this_present_Exp || that_present_Exp) {
      if (!(this_present_Exp && that_present_Exp))
        return false;
      if (this.Exp != that.Exp)
        return false;
    }

    boolean this_present_ActivityNormalShopSale = true;
    boolean that_present_ActivityNormalShopSale = true;
    if (this_present_ActivityNormalShopSale || that_present_ActivityNormalShopSale) {
      if (!(this_present_ActivityNormalShopSale && that_present_ActivityNormalShopSale))
        return false;
      if (this.ActivityNormalShopSale != that.ActivityNormalShopSale)
        return false;
    }

    boolean this_present_ActivityAddDanceReward = true;
    boolean that_present_ActivityAddDanceReward = true;
    if (this_present_ActivityAddDanceReward || that_present_ActivityAddDanceReward) {
      if (!(this_present_ActivityAddDanceReward && that_present_ActivityAddDanceReward))
        return false;
      if (this.ActivityAddDanceReward != that.ActivityAddDanceReward)
        return false;
    }

    boolean this_present_VipPriceSale = true;
    boolean that_present_VipPriceSale = true;
    if (this_present_VipPriceSale || that_present_VipPriceSale) {
      if (!(this_present_VipPriceSale && that_present_VipPriceSale))
        return false;
      if (this.VipPriceSale != that.VipPriceSale)
        return false;
    }

    boolean this_present_VActivityRightDesc = true && this.isSetVActivityRightDesc();
    boolean that_present_VActivityRightDesc = true && that.isSetVActivityRightDesc();
    if (this_present_VActivityRightDesc || that_present_VActivityRightDesc) {
      if (!(this_present_VActivityRightDesc && that_present_VActivityRightDesc))
        return false;
      if (!this.VActivityRightDesc.equals(that.VActivityRightDesc))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_Level = true;
    list.add(present_Level);
    if (present_Level)
      list.add(Level);

    boolean present_Exp = true;
    list.add(present_Exp);
    if (present_Exp)
      list.add(Exp);

    boolean present_ActivityNormalShopSale = true;
    list.add(present_ActivityNormalShopSale);
    if (present_ActivityNormalShopSale)
      list.add(ActivityNormalShopSale);

    boolean present_ActivityAddDanceReward = true;
    list.add(present_ActivityAddDanceReward);
    if (present_ActivityAddDanceReward)
      list.add(ActivityAddDanceReward);

    boolean present_VipPriceSale = true;
    list.add(present_VipPriceSale);
    if (present_VipPriceSale)
      list.add(VipPriceSale);

    boolean present_VActivityRightDesc = true && (isSetVActivityRightDesc());
    list.add(present_VActivityRightDesc);
    if (present_VActivityRightDesc)
      list.add(VActivityRightDesc);

    return list.hashCode();
  }

  @Override
  public int compareTo(ActivityLevel other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetLevel()).compareTo(other.isSetLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Level, other.Level);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExp()).compareTo(other.isSetExp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Exp, other.Exp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActivityNormalShopSale()).compareTo(other.isSetActivityNormalShopSale());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActivityNormalShopSale()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ActivityNormalShopSale, other.ActivityNormalShopSale);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActivityAddDanceReward()).compareTo(other.isSetActivityAddDanceReward());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActivityAddDanceReward()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ActivityAddDanceReward, other.ActivityAddDanceReward);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVipPriceSale()).compareTo(other.isSetVipPriceSale());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVipPriceSale()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.VipPriceSale, other.VipPriceSale);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVActivityRightDesc()).compareTo(other.isSetVActivityRightDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVActivityRightDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.VActivityRightDesc, other.VActivityRightDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ActivityLevel(");
    boolean first = true;

    sb.append("Level:");
    sb.append(this.Level);
    first = false;
    if (!first) sb.append(", ");
    sb.append("Exp:");
    sb.append(this.Exp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ActivityNormalShopSale:");
    sb.append(this.ActivityNormalShopSale);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ActivityAddDanceReward:");
    sb.append(this.ActivityAddDanceReward);
    first = false;
    if (!first) sb.append(", ");
    sb.append("VipPriceSale:");
    sb.append(this.VipPriceSale);
    first = false;
    if (!first) sb.append(", ");
    sb.append("VActivityRightDesc:");
    if (this.VActivityRightDesc == null) {
      sb.append("null");
    } else {
      sb.append(this.VActivityRightDesc);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ActivityLevelStandardSchemeFactory implements SchemeFactory {
    public ActivityLevelStandardScheme getScheme() {
      return new ActivityLevelStandardScheme();
    }
  }

  private static class ActivityLevelStandardScheme extends StandardScheme<ActivityLevel> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ActivityLevel struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.Level = iprot.readI32();
              struct.setLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EXP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.Exp = iprot.readI32();
              struct.setExpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ACTIVITY_NORMAL_SHOP_SALE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ActivityNormalShopSale = iprot.readI32();
              struct.setActivityNormalShopSaleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ACTIVITY_ADD_DANCE_REWARD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ActivityAddDanceReward = iprot.readI32();
              struct.setActivityAddDanceRewardIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // VIP_PRICE_SALE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.VipPriceSale = iprot.readI32();
              struct.setVipPriceSaleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // VACTIVITY_RIGHT_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.VActivityRightDesc = new ArrayList<TestStruct>(_list0.size);
                TestStruct _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new TestStruct();
                  _elem1.read(iprot);
                  struct.VActivityRightDesc.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setVActivityRightDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ActivityLevel struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(LEVEL_FIELD_DESC);
      oprot.writeI32(struct.Level);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXP_FIELD_DESC);
      oprot.writeI32(struct.Exp);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACTIVITY_NORMAL_SHOP_SALE_FIELD_DESC);
      oprot.writeI32(struct.ActivityNormalShopSale);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACTIVITY_ADD_DANCE_REWARD_FIELD_DESC);
      oprot.writeI32(struct.ActivityAddDanceReward);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VIP_PRICE_SALE_FIELD_DESC);
      oprot.writeI32(struct.VipPriceSale);
      oprot.writeFieldEnd();
      if (struct.VActivityRightDesc != null) {
        oprot.writeFieldBegin(VACTIVITY_RIGHT_DESC_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.VActivityRightDesc.size()));
          for (TestStruct _iter3 : struct.VActivityRightDesc)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ActivityLevelTupleSchemeFactory implements SchemeFactory {
    public ActivityLevelTupleScheme getScheme() {
      return new ActivityLevelTupleScheme();
    }
  }

  private static class ActivityLevelTupleScheme extends TupleScheme<ActivityLevel> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ActivityLevel struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetLevel()) {
        optionals.set(0);
      }
      if (struct.isSetExp()) {
        optionals.set(1);
      }
      if (struct.isSetActivityNormalShopSale()) {
        optionals.set(2);
      }
      if (struct.isSetActivityAddDanceReward()) {
        optionals.set(3);
      }
      if (struct.isSetVipPriceSale()) {
        optionals.set(4);
      }
      if (struct.isSetVActivityRightDesc()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetLevel()) {
        oprot.writeI32(struct.Level);
      }
      if (struct.isSetExp()) {
        oprot.writeI32(struct.Exp);
      }
      if (struct.isSetActivityNormalShopSale()) {
        oprot.writeI32(struct.ActivityNormalShopSale);
      }
      if (struct.isSetActivityAddDanceReward()) {
        oprot.writeI32(struct.ActivityAddDanceReward);
      }
      if (struct.isSetVipPriceSale()) {
        oprot.writeI32(struct.VipPriceSale);
      }
      if (struct.isSetVActivityRightDesc()) {
        {
          oprot.writeI32(struct.VActivityRightDesc.size());
          for (TestStruct _iter4 : struct.VActivityRightDesc)
          {
            _iter4.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ActivityLevel struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.Level = iprot.readI32();
        struct.setLevelIsSet(true);
      }
      if (incoming.get(1)) {
        struct.Exp = iprot.readI32();
        struct.setExpIsSet(true);
      }
      if (incoming.get(2)) {
        struct.ActivityNormalShopSale = iprot.readI32();
        struct.setActivityNormalShopSaleIsSet(true);
      }
      if (incoming.get(3)) {
        struct.ActivityAddDanceReward = iprot.readI32();
        struct.setActivityAddDanceRewardIsSet(true);
      }
      if (incoming.get(4)) {
        struct.VipPriceSale = iprot.readI32();
        struct.setVipPriceSaleIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.VActivityRightDesc = new ArrayList<TestStruct>(_list5.size);
          TestStruct _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new TestStruct();
            _elem6.read(iprot);
            struct.VActivityRightDesc.add(_elem6);
          }
        }
        struct.setVActivityRightDescIsSet(true);
      }
    }
  }

}

