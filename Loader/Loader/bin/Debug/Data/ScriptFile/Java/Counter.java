/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Autogenerated by program
 * 
 * <para>Autho ZhuGeLongFei</para>
 * 
 * <para>Do not edit unless you are sure that you know what you are doning</para>
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-06-14")
public class Counter implements org.apache.thrift.TBase<Counter, Counter._Fields>, java.io.Serializable, Cloneable, Comparable<Counter> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Counter");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ID", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField GAME_TIMES_INT_COUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("GameTimesIntCountID", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField DAILY_IBGIFT_INT_COUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("DailyIBGiftIntCountID", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CounterStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CounterTupleSchemeFactory());
  }

  public int ID; // required
  public int GameTimesIntCountID; // required
  public int DailyIBGiftIntCountID; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "ID"),
    GAME_TIMES_INT_COUNT_ID((short)2, "GameTimesIntCountID"),
    DAILY_IBGIFT_INT_COUNT_ID((short)3, "DailyIBGiftIntCountID");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // GAME_TIMES_INT_COUNT_ID
          return GAME_TIMES_INT_COUNT_ID;
        case 3: // DAILY_IBGIFT_INT_COUNT_ID
          return DAILY_IBGIFT_INT_COUNT_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __GAMETIMESINTCOUNTID_ISSET_ID = 1;
  private static final int __DAILYIBGIFTINTCOUNTID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("ID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GAME_TIMES_INT_COUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("GameTimesIntCountID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DAILY_IBGIFT_INT_COUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("DailyIBGiftIntCountID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Counter.class, metaDataMap);
  }

  public Counter() {
  }

  public Counter(
    int ID,
    int GameTimesIntCountID,
    int DailyIBGiftIntCountID)
  {
    this();
    this.ID = ID;
    setIDIsSet(true);
    this.GameTimesIntCountID = GameTimesIntCountID;
    setGameTimesIntCountIDIsSet(true);
    this.DailyIBGiftIntCountID = DailyIBGiftIntCountID;
    setDailyIBGiftIntCountIDIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Counter(Counter other) {
    __isset_bitfield = other.__isset_bitfield;
    this.ID = other.ID;
    this.GameTimesIntCountID = other.GameTimesIntCountID;
    this.DailyIBGiftIntCountID = other.DailyIBGiftIntCountID;
  }

  public Counter deepCopy() {
    return new Counter(this);
  }

  @Override
  public void clear() {
    setIDIsSet(false);
    this.ID = 0;
    setGameTimesIntCountIDIsSet(false);
    this.GameTimesIntCountID = 0;
    setDailyIBGiftIntCountIDIsSet(false);
    this.DailyIBGiftIntCountID = 0;
  }

  public int getID() {
    return this.ID;
  }

  public Counter setID(int ID) {
    this.ID = ID;
    setIDIsSet(true);
    return this;
  }

  public void unsetID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field ID is set (has been assigned a value) and false otherwise */
  public boolean isSetID() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getGameTimesIntCountID() {
    return this.GameTimesIntCountID;
  }

  public Counter setGameTimesIntCountID(int GameTimesIntCountID) {
    this.GameTimesIntCountID = GameTimesIntCountID;
    setGameTimesIntCountIDIsSet(true);
    return this;
  }

  public void unsetGameTimesIntCountID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GAMETIMESINTCOUNTID_ISSET_ID);
  }

  /** Returns true if field GameTimesIntCountID is set (has been assigned a value) and false otherwise */
  public boolean isSetGameTimesIntCountID() {
    return EncodingUtils.testBit(__isset_bitfield, __GAMETIMESINTCOUNTID_ISSET_ID);
  }

  public void setGameTimesIntCountIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GAMETIMESINTCOUNTID_ISSET_ID, value);
  }

  public int getDailyIBGiftIntCountID() {
    return this.DailyIBGiftIntCountID;
  }

  public Counter setDailyIBGiftIntCountID(int DailyIBGiftIntCountID) {
    this.DailyIBGiftIntCountID = DailyIBGiftIntCountID;
    setDailyIBGiftIntCountIDIsSet(true);
    return this;
  }

  public void unsetDailyIBGiftIntCountID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DAILYIBGIFTINTCOUNTID_ISSET_ID);
  }

  /** Returns true if field DailyIBGiftIntCountID is set (has been assigned a value) and false otherwise */
  public boolean isSetDailyIBGiftIntCountID() {
    return EncodingUtils.testBit(__isset_bitfield, __DAILYIBGIFTINTCOUNTID_ISSET_ID);
  }

  public void setDailyIBGiftIntCountIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DAILYIBGIFTINTCOUNTID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetID();
      } else {
        setID((Integer)value);
      }
      break;

    case GAME_TIMES_INT_COUNT_ID:
      if (value == null) {
        unsetGameTimesIntCountID();
      } else {
        setGameTimesIntCountID((Integer)value);
      }
      break;

    case DAILY_IBGIFT_INT_COUNT_ID:
      if (value == null) {
        unsetDailyIBGiftIntCountID();
      } else {
        setDailyIBGiftIntCountID((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getID();

    case GAME_TIMES_INT_COUNT_ID:
      return getGameTimesIntCountID();

    case DAILY_IBGIFT_INT_COUNT_ID:
      return getDailyIBGiftIntCountID();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetID();
    case GAME_TIMES_INT_COUNT_ID:
      return isSetGameTimesIntCountID();
    case DAILY_IBGIFT_INT_COUNT_ID:
      return isSetDailyIBGiftIntCountID();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Counter)
      return this.equals((Counter)that);
    return false;
  }

  public boolean equals(Counter that) {
    if (that == null)
      return false;

    boolean this_present_ID = true;
    boolean that_present_ID = true;
    if (this_present_ID || that_present_ID) {
      if (!(this_present_ID && that_present_ID))
        return false;
      if (this.ID != that.ID)
        return false;
    }

    boolean this_present_GameTimesIntCountID = true;
    boolean that_present_GameTimesIntCountID = true;
    if (this_present_GameTimesIntCountID || that_present_GameTimesIntCountID) {
      if (!(this_present_GameTimesIntCountID && that_present_GameTimesIntCountID))
        return false;
      if (this.GameTimesIntCountID != that.GameTimesIntCountID)
        return false;
    }

    boolean this_present_DailyIBGiftIntCountID = true;
    boolean that_present_DailyIBGiftIntCountID = true;
    if (this_present_DailyIBGiftIntCountID || that_present_DailyIBGiftIntCountID) {
      if (!(this_present_DailyIBGiftIntCountID && that_present_DailyIBGiftIntCountID))
        return false;
      if (this.DailyIBGiftIntCountID != that.DailyIBGiftIntCountID)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_ID = true;
    list.add(present_ID);
    if (present_ID)
      list.add(ID);

    boolean present_GameTimesIntCountID = true;
    list.add(present_GameTimesIntCountID);
    if (present_GameTimesIntCountID)
      list.add(GameTimesIntCountID);

    boolean present_DailyIBGiftIntCountID = true;
    list.add(present_DailyIBGiftIntCountID);
    if (present_DailyIBGiftIntCountID)
      list.add(DailyIBGiftIntCountID);

    return list.hashCode();
  }

  @Override
  public int compareTo(Counter other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetID()).compareTo(other.isSetID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ID, other.ID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGameTimesIntCountID()).compareTo(other.isSetGameTimesIntCountID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGameTimesIntCountID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.GameTimesIntCountID, other.GameTimesIntCountID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDailyIBGiftIntCountID()).compareTo(other.isSetDailyIBGiftIntCountID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDailyIBGiftIntCountID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DailyIBGiftIntCountID, other.DailyIBGiftIntCountID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Counter(");
    boolean first = true;

    sb.append("ID:");
    sb.append(this.ID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("GameTimesIntCountID:");
    sb.append(this.GameTimesIntCountID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("DailyIBGiftIntCountID:");
    sb.append(this.DailyIBGiftIntCountID);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CounterStandardSchemeFactory implements SchemeFactory {
    public CounterStandardScheme getScheme() {
      return new CounterStandardScheme();
    }
  }

  private static class CounterStandardScheme extends StandardScheme<Counter> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Counter struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ID = iprot.readI32();
              struct.setIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GAME_TIMES_INT_COUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.GameTimesIntCountID = iprot.readI32();
              struct.setGameTimesIntCountIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DAILY_IBGIFT_INT_COUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.DailyIBGiftIntCountID = iprot.readI32();
              struct.setDailyIBGiftIntCountIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Counter struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.ID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GAME_TIMES_INT_COUNT_ID_FIELD_DESC);
      oprot.writeI32(struct.GameTimesIntCountID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DAILY_IBGIFT_INT_COUNT_ID_FIELD_DESC);
      oprot.writeI32(struct.DailyIBGiftIntCountID);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CounterTupleSchemeFactory implements SchemeFactory {
    public CounterTupleScheme getScheme() {
      return new CounterTupleScheme();
    }
  }

  private static class CounterTupleScheme extends TupleScheme<Counter> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Counter struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetID()) {
        optionals.set(0);
      }
      if (struct.isSetGameTimesIntCountID()) {
        optionals.set(1);
      }
      if (struct.isSetDailyIBGiftIntCountID()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetID()) {
        oprot.writeI32(struct.ID);
      }
      if (struct.isSetGameTimesIntCountID()) {
        oprot.writeI32(struct.GameTimesIntCountID);
      }
      if (struct.isSetDailyIBGiftIntCountID()) {
        oprot.writeI32(struct.DailyIBGiftIntCountID);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Counter struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.ID = iprot.readI32();
        struct.setIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.GameTimesIntCountID = iprot.readI32();
        struct.setGameTimesIntCountIDIsSet(true);
      }
      if (incoming.get(2)) {
        struct.DailyIBGiftIntCountID = iprot.readI32();
        struct.setDailyIBGiftIntCountIDIsSet(true);
      }
    }
  }

}

