/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Autogenerated by program
 * 
 * <para>Autho ZhuGeLongFei</para>
 * 
 * <para>Do not edit unless you are sure that you know what you are doning</para>
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-06-14")
public class RoomAction implements org.apache.thrift.TBase<RoomAction, RoomAction._Fields>, java.io.Serializable, Cloneable, Comparable<RoomAction> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RoomAction");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("Id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ACTION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("ActionName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ACTION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("ActionType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField ACTION_SEX_FIELD_DESC = new org.apache.thrift.protocol.TField("ActionSex", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField ACTION_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("ActionMessage", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField ACTION_ICON_PKG_FIELD_DESC = new org.apache.thrift.protocol.TField("ActionIconPkg", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField MAIN_ACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("MainAction", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField TARGET_ACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("TargetAction", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField DEFAULT_OPEN_FIELD_DESC = new org.apache.thrift.protocol.TField("DefaultOpen", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField ACTION_SHOW_FIELD_DESC = new org.apache.thrift.protocol.TField("ActionShow", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField UNLOCK_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("UnlockType", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField TRIGGER_SCENE_FIELD_DESC = new org.apache.thrift.protocol.TField("TriggerScene", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("Limit", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField MONEY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("MoneyType", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField MONEY_COST_FIELD_DESC = new org.apache.thrift.protocol.TField("MoneyCost", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField UNLOCK_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("UnlockMessage", org.apache.thrift.protocol.TType.STRING, (short)16);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RoomActionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RoomActionTupleSchemeFactory());
  }

  public int Id; // required
  public String ActionName; // required
  public int ActionType; // required
  public int ActionSex; // required
  public int ActionMessage; // required
  public String ActionIconPkg; // required
  public int MainAction; // required
  public int TargetAction; // required
  public int DefaultOpen; // required
  public int ActionShow; // required
  public int UnlockType; // required
  public int TriggerScene; // required
  public int Limit; // required
  public int MoneyType; // required
  public int MoneyCost; // required
  public String UnlockMessage; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "Id"),
    ACTION_NAME((short)2, "ActionName"),
    ACTION_TYPE((short)3, "ActionType"),
    ACTION_SEX((short)4, "ActionSex"),
    ACTION_MESSAGE((short)5, "ActionMessage"),
    ACTION_ICON_PKG((short)6, "ActionIconPkg"),
    MAIN_ACTION((short)7, "MainAction"),
    TARGET_ACTION((short)8, "TargetAction"),
    DEFAULT_OPEN((short)9, "DefaultOpen"),
    ACTION_SHOW((short)10, "ActionShow"),
    UNLOCK_TYPE((short)11, "UnlockType"),
    TRIGGER_SCENE((short)12, "TriggerScene"),
    LIMIT((short)13, "Limit"),
    MONEY_TYPE((short)14, "MoneyType"),
    MONEY_COST((short)15, "MoneyCost"),
    UNLOCK_MESSAGE((short)16, "UnlockMessage");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // ACTION_NAME
          return ACTION_NAME;
        case 3: // ACTION_TYPE
          return ACTION_TYPE;
        case 4: // ACTION_SEX
          return ACTION_SEX;
        case 5: // ACTION_MESSAGE
          return ACTION_MESSAGE;
        case 6: // ACTION_ICON_PKG
          return ACTION_ICON_PKG;
        case 7: // MAIN_ACTION
          return MAIN_ACTION;
        case 8: // TARGET_ACTION
          return TARGET_ACTION;
        case 9: // DEFAULT_OPEN
          return DEFAULT_OPEN;
        case 10: // ACTION_SHOW
          return ACTION_SHOW;
        case 11: // UNLOCK_TYPE
          return UNLOCK_TYPE;
        case 12: // TRIGGER_SCENE
          return TRIGGER_SCENE;
        case 13: // LIMIT
          return LIMIT;
        case 14: // MONEY_TYPE
          return MONEY_TYPE;
        case 15: // MONEY_COST
          return MONEY_COST;
        case 16: // UNLOCK_MESSAGE
          return UNLOCK_MESSAGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __ACTIONTYPE_ISSET_ID = 1;
  private static final int __ACTIONSEX_ISSET_ID = 2;
  private static final int __ACTIONMESSAGE_ISSET_ID = 3;
  private static final int __MAINACTION_ISSET_ID = 4;
  private static final int __TARGETACTION_ISSET_ID = 5;
  private static final int __DEFAULTOPEN_ISSET_ID = 6;
  private static final int __ACTIONSHOW_ISSET_ID = 7;
  private static final int __UNLOCKTYPE_ISSET_ID = 8;
  private static final int __TRIGGERSCENE_ISSET_ID = 9;
  private static final int __LIMIT_ISSET_ID = 10;
  private static final int __MONEYTYPE_ISSET_ID = 11;
  private static final int __MONEYCOST_ISSET_ID = 12;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("Id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACTION_NAME, new org.apache.thrift.meta_data.FieldMetaData("ActionName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("ActionType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACTION_SEX, new org.apache.thrift.meta_data.FieldMetaData("ActionSex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACTION_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("ActionMessage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACTION_ICON_PKG, new org.apache.thrift.meta_data.FieldMetaData("ActionIconPkg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAIN_ACTION, new org.apache.thrift.meta_data.FieldMetaData("MainAction", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TARGET_ACTION, new org.apache.thrift.meta_data.FieldMetaData("TargetAction", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEFAULT_OPEN, new org.apache.thrift.meta_data.FieldMetaData("DefaultOpen", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACTION_SHOW, new org.apache.thrift.meta_data.FieldMetaData("ActionShow", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UNLOCK_TYPE, new org.apache.thrift.meta_data.FieldMetaData("UnlockType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TRIGGER_SCENE, new org.apache.thrift.meta_data.FieldMetaData("TriggerScene", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LIMIT, new org.apache.thrift.meta_data.FieldMetaData("Limit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MONEY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("MoneyType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MONEY_COST, new org.apache.thrift.meta_data.FieldMetaData("MoneyCost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UNLOCK_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("UnlockMessage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RoomAction.class, metaDataMap);
  }

  public RoomAction() {
  }

  public RoomAction(
    int Id,
    String ActionName,
    int ActionType,
    int ActionSex,
    int ActionMessage,
    String ActionIconPkg,
    int MainAction,
    int TargetAction,
    int DefaultOpen,
    int ActionShow,
    int UnlockType,
    int TriggerScene,
    int Limit,
    int MoneyType,
    int MoneyCost,
    String UnlockMessage)
  {
    this();
    this.Id = Id;
    setIdIsSet(true);
    this.ActionName = ActionName;
    this.ActionType = ActionType;
    setActionTypeIsSet(true);
    this.ActionSex = ActionSex;
    setActionSexIsSet(true);
    this.ActionMessage = ActionMessage;
    setActionMessageIsSet(true);
    this.ActionIconPkg = ActionIconPkg;
    this.MainAction = MainAction;
    setMainActionIsSet(true);
    this.TargetAction = TargetAction;
    setTargetActionIsSet(true);
    this.DefaultOpen = DefaultOpen;
    setDefaultOpenIsSet(true);
    this.ActionShow = ActionShow;
    setActionShowIsSet(true);
    this.UnlockType = UnlockType;
    setUnlockTypeIsSet(true);
    this.TriggerScene = TriggerScene;
    setTriggerSceneIsSet(true);
    this.Limit = Limit;
    setLimitIsSet(true);
    this.MoneyType = MoneyType;
    setMoneyTypeIsSet(true);
    this.MoneyCost = MoneyCost;
    setMoneyCostIsSet(true);
    this.UnlockMessage = UnlockMessage;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RoomAction(RoomAction other) {
    __isset_bitfield = other.__isset_bitfield;
    this.Id = other.Id;
    if (other.isSetActionName()) {
      this.ActionName = other.ActionName;
    }
    this.ActionType = other.ActionType;
    this.ActionSex = other.ActionSex;
    this.ActionMessage = other.ActionMessage;
    if (other.isSetActionIconPkg()) {
      this.ActionIconPkg = other.ActionIconPkg;
    }
    this.MainAction = other.MainAction;
    this.TargetAction = other.TargetAction;
    this.DefaultOpen = other.DefaultOpen;
    this.ActionShow = other.ActionShow;
    this.UnlockType = other.UnlockType;
    this.TriggerScene = other.TriggerScene;
    this.Limit = other.Limit;
    this.MoneyType = other.MoneyType;
    this.MoneyCost = other.MoneyCost;
    if (other.isSetUnlockMessage()) {
      this.UnlockMessage = other.UnlockMessage;
    }
  }

  public RoomAction deepCopy() {
    return new RoomAction(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.Id = 0;
    this.ActionName = null;
    setActionTypeIsSet(false);
    this.ActionType = 0;
    setActionSexIsSet(false);
    this.ActionSex = 0;
    setActionMessageIsSet(false);
    this.ActionMessage = 0;
    this.ActionIconPkg = null;
    setMainActionIsSet(false);
    this.MainAction = 0;
    setTargetActionIsSet(false);
    this.TargetAction = 0;
    setDefaultOpenIsSet(false);
    this.DefaultOpen = 0;
    setActionShowIsSet(false);
    this.ActionShow = 0;
    setUnlockTypeIsSet(false);
    this.UnlockType = 0;
    setTriggerSceneIsSet(false);
    this.TriggerScene = 0;
    setLimitIsSet(false);
    this.Limit = 0;
    setMoneyTypeIsSet(false);
    this.MoneyType = 0;
    setMoneyCostIsSet(false);
    this.MoneyCost = 0;
    this.UnlockMessage = null;
  }

  public int getId() {
    return this.Id;
  }

  public RoomAction setId(int Id) {
    this.Id = Id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field Id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getActionName() {
    return this.ActionName;
  }

  public RoomAction setActionName(String ActionName) {
    this.ActionName = ActionName;
    return this;
  }

  public void unsetActionName() {
    this.ActionName = null;
  }

  /** Returns true if field ActionName is set (has been assigned a value) and false otherwise */
  public boolean isSetActionName() {
    return this.ActionName != null;
  }

  public void setActionNameIsSet(boolean value) {
    if (!value) {
      this.ActionName = null;
    }
  }

  public int getActionType() {
    return this.ActionType;
  }

  public RoomAction setActionType(int ActionType) {
    this.ActionType = ActionType;
    setActionTypeIsSet(true);
    return this;
  }

  public void unsetActionType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIONTYPE_ISSET_ID);
  }

  /** Returns true if field ActionType is set (has been assigned a value) and false otherwise */
  public boolean isSetActionType() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTIONTYPE_ISSET_ID);
  }

  public void setActionTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIONTYPE_ISSET_ID, value);
  }

  public int getActionSex() {
    return this.ActionSex;
  }

  public RoomAction setActionSex(int ActionSex) {
    this.ActionSex = ActionSex;
    setActionSexIsSet(true);
    return this;
  }

  public void unsetActionSex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIONSEX_ISSET_ID);
  }

  /** Returns true if field ActionSex is set (has been assigned a value) and false otherwise */
  public boolean isSetActionSex() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTIONSEX_ISSET_ID);
  }

  public void setActionSexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIONSEX_ISSET_ID, value);
  }

  public int getActionMessage() {
    return this.ActionMessage;
  }

  public RoomAction setActionMessage(int ActionMessage) {
    this.ActionMessage = ActionMessage;
    setActionMessageIsSet(true);
    return this;
  }

  public void unsetActionMessage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIONMESSAGE_ISSET_ID);
  }

  /** Returns true if field ActionMessage is set (has been assigned a value) and false otherwise */
  public boolean isSetActionMessage() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTIONMESSAGE_ISSET_ID);
  }

  public void setActionMessageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIONMESSAGE_ISSET_ID, value);
  }

  public String getActionIconPkg() {
    return this.ActionIconPkg;
  }

  public RoomAction setActionIconPkg(String ActionIconPkg) {
    this.ActionIconPkg = ActionIconPkg;
    return this;
  }

  public void unsetActionIconPkg() {
    this.ActionIconPkg = null;
  }

  /** Returns true if field ActionIconPkg is set (has been assigned a value) and false otherwise */
  public boolean isSetActionIconPkg() {
    return this.ActionIconPkg != null;
  }

  public void setActionIconPkgIsSet(boolean value) {
    if (!value) {
      this.ActionIconPkg = null;
    }
  }

  public int getMainAction() {
    return this.MainAction;
  }

  public RoomAction setMainAction(int MainAction) {
    this.MainAction = MainAction;
    setMainActionIsSet(true);
    return this;
  }

  public void unsetMainAction() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAINACTION_ISSET_ID);
  }

  /** Returns true if field MainAction is set (has been assigned a value) and false otherwise */
  public boolean isSetMainAction() {
    return EncodingUtils.testBit(__isset_bitfield, __MAINACTION_ISSET_ID);
  }

  public void setMainActionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAINACTION_ISSET_ID, value);
  }

  public int getTargetAction() {
    return this.TargetAction;
  }

  public RoomAction setTargetAction(int TargetAction) {
    this.TargetAction = TargetAction;
    setTargetActionIsSet(true);
    return this;
  }

  public void unsetTargetAction() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TARGETACTION_ISSET_ID);
  }

  /** Returns true if field TargetAction is set (has been assigned a value) and false otherwise */
  public boolean isSetTargetAction() {
    return EncodingUtils.testBit(__isset_bitfield, __TARGETACTION_ISSET_ID);
  }

  public void setTargetActionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TARGETACTION_ISSET_ID, value);
  }

  public int getDefaultOpen() {
    return this.DefaultOpen;
  }

  public RoomAction setDefaultOpen(int DefaultOpen) {
    this.DefaultOpen = DefaultOpen;
    setDefaultOpenIsSet(true);
    return this;
  }

  public void unsetDefaultOpen() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEFAULTOPEN_ISSET_ID);
  }

  /** Returns true if field DefaultOpen is set (has been assigned a value) and false otherwise */
  public boolean isSetDefaultOpen() {
    return EncodingUtils.testBit(__isset_bitfield, __DEFAULTOPEN_ISSET_ID);
  }

  public void setDefaultOpenIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEFAULTOPEN_ISSET_ID, value);
  }

  public int getActionShow() {
    return this.ActionShow;
  }

  public RoomAction setActionShow(int ActionShow) {
    this.ActionShow = ActionShow;
    setActionShowIsSet(true);
    return this;
  }

  public void unsetActionShow() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIONSHOW_ISSET_ID);
  }

  /** Returns true if field ActionShow is set (has been assigned a value) and false otherwise */
  public boolean isSetActionShow() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTIONSHOW_ISSET_ID);
  }

  public void setActionShowIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIONSHOW_ISSET_ID, value);
  }

  public int getUnlockType() {
    return this.UnlockType;
  }

  public RoomAction setUnlockType(int UnlockType) {
    this.UnlockType = UnlockType;
    setUnlockTypeIsSet(true);
    return this;
  }

  public void unsetUnlockType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UNLOCKTYPE_ISSET_ID);
  }

  /** Returns true if field UnlockType is set (has been assigned a value) and false otherwise */
  public boolean isSetUnlockType() {
    return EncodingUtils.testBit(__isset_bitfield, __UNLOCKTYPE_ISSET_ID);
  }

  public void setUnlockTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UNLOCKTYPE_ISSET_ID, value);
  }

  public int getTriggerScene() {
    return this.TriggerScene;
  }

  public RoomAction setTriggerScene(int TriggerScene) {
    this.TriggerScene = TriggerScene;
    setTriggerSceneIsSet(true);
    return this;
  }

  public void unsetTriggerScene() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRIGGERSCENE_ISSET_ID);
  }

  /** Returns true if field TriggerScene is set (has been assigned a value) and false otherwise */
  public boolean isSetTriggerScene() {
    return EncodingUtils.testBit(__isset_bitfield, __TRIGGERSCENE_ISSET_ID);
  }

  public void setTriggerSceneIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRIGGERSCENE_ISSET_ID, value);
  }

  public int getLimit() {
    return this.Limit;
  }

  public RoomAction setLimit(int Limit) {
    this.Limit = Limit;
    setLimitIsSet(true);
    return this;
  }

  public void unsetLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMIT_ISSET_ID);
  }

  /** Returns true if field Limit is set (has been assigned a value) and false otherwise */
  public boolean isSetLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __LIMIT_ISSET_ID);
  }

  public void setLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMIT_ISSET_ID, value);
  }

  public int getMoneyType() {
    return this.MoneyType;
  }

  public RoomAction setMoneyType(int MoneyType) {
    this.MoneyType = MoneyType;
    setMoneyTypeIsSet(true);
    return this;
  }

  public void unsetMoneyType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONEYTYPE_ISSET_ID);
  }

  /** Returns true if field MoneyType is set (has been assigned a value) and false otherwise */
  public boolean isSetMoneyType() {
    return EncodingUtils.testBit(__isset_bitfield, __MONEYTYPE_ISSET_ID);
  }

  public void setMoneyTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONEYTYPE_ISSET_ID, value);
  }

  public int getMoneyCost() {
    return this.MoneyCost;
  }

  public RoomAction setMoneyCost(int MoneyCost) {
    this.MoneyCost = MoneyCost;
    setMoneyCostIsSet(true);
    return this;
  }

  public void unsetMoneyCost() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONEYCOST_ISSET_ID);
  }

  /** Returns true if field MoneyCost is set (has been assigned a value) and false otherwise */
  public boolean isSetMoneyCost() {
    return EncodingUtils.testBit(__isset_bitfield, __MONEYCOST_ISSET_ID);
  }

  public void setMoneyCostIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONEYCOST_ISSET_ID, value);
  }

  public String getUnlockMessage() {
    return this.UnlockMessage;
  }

  public RoomAction setUnlockMessage(String UnlockMessage) {
    this.UnlockMessage = UnlockMessage;
    return this;
  }

  public void unsetUnlockMessage() {
    this.UnlockMessage = null;
  }

  /** Returns true if field UnlockMessage is set (has been assigned a value) and false otherwise */
  public boolean isSetUnlockMessage() {
    return this.UnlockMessage != null;
  }

  public void setUnlockMessageIsSet(boolean value) {
    if (!value) {
      this.UnlockMessage = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case ACTION_NAME:
      if (value == null) {
        unsetActionName();
      } else {
        setActionName((String)value);
      }
      break;

    case ACTION_TYPE:
      if (value == null) {
        unsetActionType();
      } else {
        setActionType((Integer)value);
      }
      break;

    case ACTION_SEX:
      if (value == null) {
        unsetActionSex();
      } else {
        setActionSex((Integer)value);
      }
      break;

    case ACTION_MESSAGE:
      if (value == null) {
        unsetActionMessage();
      } else {
        setActionMessage((Integer)value);
      }
      break;

    case ACTION_ICON_PKG:
      if (value == null) {
        unsetActionIconPkg();
      } else {
        setActionIconPkg((String)value);
      }
      break;

    case MAIN_ACTION:
      if (value == null) {
        unsetMainAction();
      } else {
        setMainAction((Integer)value);
      }
      break;

    case TARGET_ACTION:
      if (value == null) {
        unsetTargetAction();
      } else {
        setTargetAction((Integer)value);
      }
      break;

    case DEFAULT_OPEN:
      if (value == null) {
        unsetDefaultOpen();
      } else {
        setDefaultOpen((Integer)value);
      }
      break;

    case ACTION_SHOW:
      if (value == null) {
        unsetActionShow();
      } else {
        setActionShow((Integer)value);
      }
      break;

    case UNLOCK_TYPE:
      if (value == null) {
        unsetUnlockType();
      } else {
        setUnlockType((Integer)value);
      }
      break;

    case TRIGGER_SCENE:
      if (value == null) {
        unsetTriggerScene();
      } else {
        setTriggerScene((Integer)value);
      }
      break;

    case LIMIT:
      if (value == null) {
        unsetLimit();
      } else {
        setLimit((Integer)value);
      }
      break;

    case MONEY_TYPE:
      if (value == null) {
        unsetMoneyType();
      } else {
        setMoneyType((Integer)value);
      }
      break;

    case MONEY_COST:
      if (value == null) {
        unsetMoneyCost();
      } else {
        setMoneyCost((Integer)value);
      }
      break;

    case UNLOCK_MESSAGE:
      if (value == null) {
        unsetUnlockMessage();
      } else {
        setUnlockMessage((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case ACTION_NAME:
      return getActionName();

    case ACTION_TYPE:
      return getActionType();

    case ACTION_SEX:
      return getActionSex();

    case ACTION_MESSAGE:
      return getActionMessage();

    case ACTION_ICON_PKG:
      return getActionIconPkg();

    case MAIN_ACTION:
      return getMainAction();

    case TARGET_ACTION:
      return getTargetAction();

    case DEFAULT_OPEN:
      return getDefaultOpen();

    case ACTION_SHOW:
      return getActionShow();

    case UNLOCK_TYPE:
      return getUnlockType();

    case TRIGGER_SCENE:
      return getTriggerScene();

    case LIMIT:
      return getLimit();

    case MONEY_TYPE:
      return getMoneyType();

    case MONEY_COST:
      return getMoneyCost();

    case UNLOCK_MESSAGE:
      return getUnlockMessage();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case ACTION_NAME:
      return isSetActionName();
    case ACTION_TYPE:
      return isSetActionType();
    case ACTION_SEX:
      return isSetActionSex();
    case ACTION_MESSAGE:
      return isSetActionMessage();
    case ACTION_ICON_PKG:
      return isSetActionIconPkg();
    case MAIN_ACTION:
      return isSetMainAction();
    case TARGET_ACTION:
      return isSetTargetAction();
    case DEFAULT_OPEN:
      return isSetDefaultOpen();
    case ACTION_SHOW:
      return isSetActionShow();
    case UNLOCK_TYPE:
      return isSetUnlockType();
    case TRIGGER_SCENE:
      return isSetTriggerScene();
    case LIMIT:
      return isSetLimit();
    case MONEY_TYPE:
      return isSetMoneyType();
    case MONEY_COST:
      return isSetMoneyCost();
    case UNLOCK_MESSAGE:
      return isSetUnlockMessage();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RoomAction)
      return this.equals((RoomAction)that);
    return false;
  }

  public boolean equals(RoomAction that) {
    if (that == null)
      return false;

    boolean this_present_Id = true;
    boolean that_present_Id = true;
    if (this_present_Id || that_present_Id) {
      if (!(this_present_Id && that_present_Id))
        return false;
      if (this.Id != that.Id)
        return false;
    }

    boolean this_present_ActionName = true && this.isSetActionName();
    boolean that_present_ActionName = true && that.isSetActionName();
    if (this_present_ActionName || that_present_ActionName) {
      if (!(this_present_ActionName && that_present_ActionName))
        return false;
      if (!this.ActionName.equals(that.ActionName))
        return false;
    }

    boolean this_present_ActionType = true;
    boolean that_present_ActionType = true;
    if (this_present_ActionType || that_present_ActionType) {
      if (!(this_present_ActionType && that_present_ActionType))
        return false;
      if (this.ActionType != that.ActionType)
        return false;
    }

    boolean this_present_ActionSex = true;
    boolean that_present_ActionSex = true;
    if (this_present_ActionSex || that_present_ActionSex) {
      if (!(this_present_ActionSex && that_present_ActionSex))
        return false;
      if (this.ActionSex != that.ActionSex)
        return false;
    }

    boolean this_present_ActionMessage = true;
    boolean that_present_ActionMessage = true;
    if (this_present_ActionMessage || that_present_ActionMessage) {
      if (!(this_present_ActionMessage && that_present_ActionMessage))
        return false;
      if (this.ActionMessage != that.ActionMessage)
        return false;
    }

    boolean this_present_ActionIconPkg = true && this.isSetActionIconPkg();
    boolean that_present_ActionIconPkg = true && that.isSetActionIconPkg();
    if (this_present_ActionIconPkg || that_present_ActionIconPkg) {
      if (!(this_present_ActionIconPkg && that_present_ActionIconPkg))
        return false;
      if (!this.ActionIconPkg.equals(that.ActionIconPkg))
        return false;
    }

    boolean this_present_MainAction = true;
    boolean that_present_MainAction = true;
    if (this_present_MainAction || that_present_MainAction) {
      if (!(this_present_MainAction && that_present_MainAction))
        return false;
      if (this.MainAction != that.MainAction)
        return false;
    }

    boolean this_present_TargetAction = true;
    boolean that_present_TargetAction = true;
    if (this_present_TargetAction || that_present_TargetAction) {
      if (!(this_present_TargetAction && that_present_TargetAction))
        return false;
      if (this.TargetAction != that.TargetAction)
        return false;
    }

    boolean this_present_DefaultOpen = true;
    boolean that_present_DefaultOpen = true;
    if (this_present_DefaultOpen || that_present_DefaultOpen) {
      if (!(this_present_DefaultOpen && that_present_DefaultOpen))
        return false;
      if (this.DefaultOpen != that.DefaultOpen)
        return false;
    }

    boolean this_present_ActionShow = true;
    boolean that_present_ActionShow = true;
    if (this_present_ActionShow || that_present_ActionShow) {
      if (!(this_present_ActionShow && that_present_ActionShow))
        return false;
      if (this.ActionShow != that.ActionShow)
        return false;
    }

    boolean this_present_UnlockType = true;
    boolean that_present_UnlockType = true;
    if (this_present_UnlockType || that_present_UnlockType) {
      if (!(this_present_UnlockType && that_present_UnlockType))
        return false;
      if (this.UnlockType != that.UnlockType)
        return false;
    }

    boolean this_present_TriggerScene = true;
    boolean that_present_TriggerScene = true;
    if (this_present_TriggerScene || that_present_TriggerScene) {
      if (!(this_present_TriggerScene && that_present_TriggerScene))
        return false;
      if (this.TriggerScene != that.TriggerScene)
        return false;
    }

    boolean this_present_Limit = true;
    boolean that_present_Limit = true;
    if (this_present_Limit || that_present_Limit) {
      if (!(this_present_Limit && that_present_Limit))
        return false;
      if (this.Limit != that.Limit)
        return false;
    }

    boolean this_present_MoneyType = true;
    boolean that_present_MoneyType = true;
    if (this_present_MoneyType || that_present_MoneyType) {
      if (!(this_present_MoneyType && that_present_MoneyType))
        return false;
      if (this.MoneyType != that.MoneyType)
        return false;
    }

    boolean this_present_MoneyCost = true;
    boolean that_present_MoneyCost = true;
    if (this_present_MoneyCost || that_present_MoneyCost) {
      if (!(this_present_MoneyCost && that_present_MoneyCost))
        return false;
      if (this.MoneyCost != that.MoneyCost)
        return false;
    }

    boolean this_present_UnlockMessage = true && this.isSetUnlockMessage();
    boolean that_present_UnlockMessage = true && that.isSetUnlockMessage();
    if (this_present_UnlockMessage || that_present_UnlockMessage) {
      if (!(this_present_UnlockMessage && that_present_UnlockMessage))
        return false;
      if (!this.UnlockMessage.equals(that.UnlockMessage))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_Id = true;
    list.add(present_Id);
    if (present_Id)
      list.add(Id);

    boolean present_ActionName = true && (isSetActionName());
    list.add(present_ActionName);
    if (present_ActionName)
      list.add(ActionName);

    boolean present_ActionType = true;
    list.add(present_ActionType);
    if (present_ActionType)
      list.add(ActionType);

    boolean present_ActionSex = true;
    list.add(present_ActionSex);
    if (present_ActionSex)
      list.add(ActionSex);

    boolean present_ActionMessage = true;
    list.add(present_ActionMessage);
    if (present_ActionMessage)
      list.add(ActionMessage);

    boolean present_ActionIconPkg = true && (isSetActionIconPkg());
    list.add(present_ActionIconPkg);
    if (present_ActionIconPkg)
      list.add(ActionIconPkg);

    boolean present_MainAction = true;
    list.add(present_MainAction);
    if (present_MainAction)
      list.add(MainAction);

    boolean present_TargetAction = true;
    list.add(present_TargetAction);
    if (present_TargetAction)
      list.add(TargetAction);

    boolean present_DefaultOpen = true;
    list.add(present_DefaultOpen);
    if (present_DefaultOpen)
      list.add(DefaultOpen);

    boolean present_ActionShow = true;
    list.add(present_ActionShow);
    if (present_ActionShow)
      list.add(ActionShow);

    boolean present_UnlockType = true;
    list.add(present_UnlockType);
    if (present_UnlockType)
      list.add(UnlockType);

    boolean present_TriggerScene = true;
    list.add(present_TriggerScene);
    if (present_TriggerScene)
      list.add(TriggerScene);

    boolean present_Limit = true;
    list.add(present_Limit);
    if (present_Limit)
      list.add(Limit);

    boolean present_MoneyType = true;
    list.add(present_MoneyType);
    if (present_MoneyType)
      list.add(MoneyType);

    boolean present_MoneyCost = true;
    list.add(present_MoneyCost);
    if (present_MoneyCost)
      list.add(MoneyCost);

    boolean present_UnlockMessage = true && (isSetUnlockMessage());
    list.add(present_UnlockMessage);
    if (present_UnlockMessage)
      list.add(UnlockMessage);

    return list.hashCode();
  }

  @Override
  public int compareTo(RoomAction other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Id, other.Id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActionName()).compareTo(other.isSetActionName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActionName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ActionName, other.ActionName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActionType()).compareTo(other.isSetActionType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActionType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ActionType, other.ActionType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActionSex()).compareTo(other.isSetActionSex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActionSex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ActionSex, other.ActionSex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActionMessage()).compareTo(other.isSetActionMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActionMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ActionMessage, other.ActionMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActionIconPkg()).compareTo(other.isSetActionIconPkg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActionIconPkg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ActionIconPkg, other.ActionIconPkg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMainAction()).compareTo(other.isSetMainAction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMainAction()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.MainAction, other.MainAction);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTargetAction()).compareTo(other.isSetTargetAction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTargetAction()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.TargetAction, other.TargetAction);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDefaultOpen()).compareTo(other.isSetDefaultOpen());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefaultOpen()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DefaultOpen, other.DefaultOpen);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActionShow()).compareTo(other.isSetActionShow());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActionShow()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ActionShow, other.ActionShow);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnlockType()).compareTo(other.isSetUnlockType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnlockType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.UnlockType, other.UnlockType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTriggerScene()).compareTo(other.isSetTriggerScene());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTriggerScene()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.TriggerScene, other.TriggerScene);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLimit()).compareTo(other.isSetLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Limit, other.Limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMoneyType()).compareTo(other.isSetMoneyType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMoneyType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.MoneyType, other.MoneyType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMoneyCost()).compareTo(other.isSetMoneyCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMoneyCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.MoneyCost, other.MoneyCost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnlockMessage()).compareTo(other.isSetUnlockMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnlockMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.UnlockMessage, other.UnlockMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RoomAction(");
    boolean first = true;

    sb.append("Id:");
    sb.append(this.Id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ActionName:");
    if (this.ActionName == null) {
      sb.append("null");
    } else {
      sb.append(this.ActionName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ActionType:");
    sb.append(this.ActionType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ActionSex:");
    sb.append(this.ActionSex);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ActionMessage:");
    sb.append(this.ActionMessage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ActionIconPkg:");
    if (this.ActionIconPkg == null) {
      sb.append("null");
    } else {
      sb.append(this.ActionIconPkg);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("MainAction:");
    sb.append(this.MainAction);
    first = false;
    if (!first) sb.append(", ");
    sb.append("TargetAction:");
    sb.append(this.TargetAction);
    first = false;
    if (!first) sb.append(", ");
    sb.append("DefaultOpen:");
    sb.append(this.DefaultOpen);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ActionShow:");
    sb.append(this.ActionShow);
    first = false;
    if (!first) sb.append(", ");
    sb.append("UnlockType:");
    sb.append(this.UnlockType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("TriggerScene:");
    sb.append(this.TriggerScene);
    first = false;
    if (!first) sb.append(", ");
    sb.append("Limit:");
    sb.append(this.Limit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("MoneyType:");
    sb.append(this.MoneyType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("MoneyCost:");
    sb.append(this.MoneyCost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("UnlockMessage:");
    if (this.UnlockMessage == null) {
      sb.append("null");
    } else {
      sb.append(this.UnlockMessage);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RoomActionStandardSchemeFactory implements SchemeFactory {
    public RoomActionStandardScheme getScheme() {
      return new RoomActionStandardScheme();
    }
  }

  private static class RoomActionStandardScheme extends StandardScheme<RoomAction> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RoomAction struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.Id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ACTION_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ActionName = iprot.readString();
              struct.setActionNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ACTION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ActionType = iprot.readI32();
              struct.setActionTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ACTION_SEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ActionSex = iprot.readI32();
              struct.setActionSexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ACTION_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ActionMessage = iprot.readI32();
              struct.setActionMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ACTION_ICON_PKG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ActionIconPkg = iprot.readString();
              struct.setActionIconPkgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MAIN_ACTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.MainAction = iprot.readI32();
              struct.setMainActionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TARGET_ACTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.TargetAction = iprot.readI32();
              struct.setTargetActionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DEFAULT_OPEN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.DefaultOpen = iprot.readI32();
              struct.setDefaultOpenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ACTION_SHOW
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ActionShow = iprot.readI32();
              struct.setActionShowIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // UNLOCK_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.UnlockType = iprot.readI32();
              struct.setUnlockTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TRIGGER_SCENE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.TriggerScene = iprot.readI32();
              struct.setTriggerSceneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.Limit = iprot.readI32();
              struct.setLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // MONEY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.MoneyType = iprot.readI32();
              struct.setMoneyTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // MONEY_COST
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.MoneyCost = iprot.readI32();
              struct.setMoneyCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // UNLOCK_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.UnlockMessage = iprot.readString();
              struct.setUnlockMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RoomAction struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.Id);
      oprot.writeFieldEnd();
      if (struct.ActionName != null) {
        oprot.writeFieldBegin(ACTION_NAME_FIELD_DESC);
        oprot.writeString(struct.ActionName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ACTION_TYPE_FIELD_DESC);
      oprot.writeI32(struct.ActionType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACTION_SEX_FIELD_DESC);
      oprot.writeI32(struct.ActionSex);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACTION_MESSAGE_FIELD_DESC);
      oprot.writeI32(struct.ActionMessage);
      oprot.writeFieldEnd();
      if (struct.ActionIconPkg != null) {
        oprot.writeFieldBegin(ACTION_ICON_PKG_FIELD_DESC);
        oprot.writeString(struct.ActionIconPkg);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MAIN_ACTION_FIELD_DESC);
      oprot.writeI32(struct.MainAction);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TARGET_ACTION_FIELD_DESC);
      oprot.writeI32(struct.TargetAction);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEFAULT_OPEN_FIELD_DESC);
      oprot.writeI32(struct.DefaultOpen);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACTION_SHOW_FIELD_DESC);
      oprot.writeI32(struct.ActionShow);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UNLOCK_TYPE_FIELD_DESC);
      oprot.writeI32(struct.UnlockType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TRIGGER_SCENE_FIELD_DESC);
      oprot.writeI32(struct.TriggerScene);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LIMIT_FIELD_DESC);
      oprot.writeI32(struct.Limit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MONEY_TYPE_FIELD_DESC);
      oprot.writeI32(struct.MoneyType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MONEY_COST_FIELD_DESC);
      oprot.writeI32(struct.MoneyCost);
      oprot.writeFieldEnd();
      if (struct.UnlockMessage != null) {
        oprot.writeFieldBegin(UNLOCK_MESSAGE_FIELD_DESC);
        oprot.writeString(struct.UnlockMessage);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RoomActionTupleSchemeFactory implements SchemeFactory {
    public RoomActionTupleScheme getScheme() {
      return new RoomActionTupleScheme();
    }
  }

  private static class RoomActionTupleScheme extends TupleScheme<RoomAction> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RoomAction struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetActionName()) {
        optionals.set(1);
      }
      if (struct.isSetActionType()) {
        optionals.set(2);
      }
      if (struct.isSetActionSex()) {
        optionals.set(3);
      }
      if (struct.isSetActionMessage()) {
        optionals.set(4);
      }
      if (struct.isSetActionIconPkg()) {
        optionals.set(5);
      }
      if (struct.isSetMainAction()) {
        optionals.set(6);
      }
      if (struct.isSetTargetAction()) {
        optionals.set(7);
      }
      if (struct.isSetDefaultOpen()) {
        optionals.set(8);
      }
      if (struct.isSetActionShow()) {
        optionals.set(9);
      }
      if (struct.isSetUnlockType()) {
        optionals.set(10);
      }
      if (struct.isSetTriggerScene()) {
        optionals.set(11);
      }
      if (struct.isSetLimit()) {
        optionals.set(12);
      }
      if (struct.isSetMoneyType()) {
        optionals.set(13);
      }
      if (struct.isSetMoneyCost()) {
        optionals.set(14);
      }
      if (struct.isSetUnlockMessage()) {
        optionals.set(15);
      }
      oprot.writeBitSet(optionals, 16);
      if (struct.isSetId()) {
        oprot.writeI32(struct.Id);
      }
      if (struct.isSetActionName()) {
        oprot.writeString(struct.ActionName);
      }
      if (struct.isSetActionType()) {
        oprot.writeI32(struct.ActionType);
      }
      if (struct.isSetActionSex()) {
        oprot.writeI32(struct.ActionSex);
      }
      if (struct.isSetActionMessage()) {
        oprot.writeI32(struct.ActionMessage);
      }
      if (struct.isSetActionIconPkg()) {
        oprot.writeString(struct.ActionIconPkg);
      }
      if (struct.isSetMainAction()) {
        oprot.writeI32(struct.MainAction);
      }
      if (struct.isSetTargetAction()) {
        oprot.writeI32(struct.TargetAction);
      }
      if (struct.isSetDefaultOpen()) {
        oprot.writeI32(struct.DefaultOpen);
      }
      if (struct.isSetActionShow()) {
        oprot.writeI32(struct.ActionShow);
      }
      if (struct.isSetUnlockType()) {
        oprot.writeI32(struct.UnlockType);
      }
      if (struct.isSetTriggerScene()) {
        oprot.writeI32(struct.TriggerScene);
      }
      if (struct.isSetLimit()) {
        oprot.writeI32(struct.Limit);
      }
      if (struct.isSetMoneyType()) {
        oprot.writeI32(struct.MoneyType);
      }
      if (struct.isSetMoneyCost()) {
        oprot.writeI32(struct.MoneyCost);
      }
      if (struct.isSetUnlockMessage()) {
        oprot.writeString(struct.UnlockMessage);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RoomAction struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(16);
      if (incoming.get(0)) {
        struct.Id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.ActionName = iprot.readString();
        struct.setActionNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.ActionType = iprot.readI32();
        struct.setActionTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.ActionSex = iprot.readI32();
        struct.setActionSexIsSet(true);
      }
      if (incoming.get(4)) {
        struct.ActionMessage = iprot.readI32();
        struct.setActionMessageIsSet(true);
      }
      if (incoming.get(5)) {
        struct.ActionIconPkg = iprot.readString();
        struct.setActionIconPkgIsSet(true);
      }
      if (incoming.get(6)) {
        struct.MainAction = iprot.readI32();
        struct.setMainActionIsSet(true);
      }
      if (incoming.get(7)) {
        struct.TargetAction = iprot.readI32();
        struct.setTargetActionIsSet(true);
      }
      if (incoming.get(8)) {
        struct.DefaultOpen = iprot.readI32();
        struct.setDefaultOpenIsSet(true);
      }
      if (incoming.get(9)) {
        struct.ActionShow = iprot.readI32();
        struct.setActionShowIsSet(true);
      }
      if (incoming.get(10)) {
        struct.UnlockType = iprot.readI32();
        struct.setUnlockTypeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.TriggerScene = iprot.readI32();
        struct.setTriggerSceneIsSet(true);
      }
      if (incoming.get(12)) {
        struct.Limit = iprot.readI32();
        struct.setLimitIsSet(true);
      }
      if (incoming.get(13)) {
        struct.MoneyType = iprot.readI32();
        struct.setMoneyTypeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.MoneyCost = iprot.readI32();
        struct.setMoneyCostIsSet(true);
      }
      if (incoming.get(15)) {
        struct.UnlockMessage = iprot.readString();
        struct.setUnlockMessageIsSet(true);
      }
    }
  }

}

