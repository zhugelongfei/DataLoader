/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace ThriftStruct
{

  /// <summary>
  /// Autogenerated by program
  /// 
  /// <para>Autho ZhuGeLongFei</para>
  /// 
  /// <para>Do not edit unless you are sure that you know what you are doning</para>
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class BuildInfo : TBase
  {
    private int _ID;
    private string _Name;
    private int _ResId;
    private int _SizeX;
    private int _SizeY;

    /// <summary>
    /// Id
    /// </summary>
    public int ID
    {
      get
      {
        return _ID;
      }
      set
      {
        __isset.ID = true;
        this._ID = value;
      }
    }

    /// <summary>
    /// 名称
    /// </summary>
    public string Name
    {
      get
      {
        return _Name;
      }
      set
      {
        __isset.Name = true;
        this._Name = value;
      }
    }

    /// <summary>
    /// 资源id
    /// </summary>
    public int ResId
    {
      get
      {
        return _ResId;
      }
      set
      {
        __isset.ResId = true;
        this._ResId = value;
      }
    }

    /// <summary>
    /// 占地大小
    /// </summary>
    public int SizeX
    {
      get
      {
        return _SizeX;
      }
      set
      {
        __isset.SizeX = true;
        this._SizeX = value;
      }
    }

    public int SizeY
    {
      get
      {
        return _SizeY;
      }
      set
      {
        __isset.SizeY = true;
        this._SizeY = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ID;
      public bool Name;
      public bool ResId;
      public bool SizeX;
      public bool SizeY;
    }

    public BuildInfo() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ID = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                ResId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                SizeX = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                SizeY = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("BuildInfo");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ID) {
          field.Name = "ID";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ID);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.Name) {
          field.Name = "Name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (__isset.ResId) {
          field.Name = "ResId";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ResId);
          oprot.WriteFieldEnd();
        }
        if (__isset.SizeX) {
          field.Name = "SizeX";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(SizeX);
          oprot.WriteFieldEnd();
        }
        if (__isset.SizeY) {
          field.Name = "SizeY";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(SizeY);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("BuildInfo(");
      bool __first = true;
      if (__isset.ID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ID: ");
        __sb.Append(ID);
      }
      if (Name != null && __isset.Name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (__isset.ResId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ResId: ");
        __sb.Append(ResId);
      }
      if (__isset.SizeX) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SizeX: ");
        __sb.Append(SizeX);
      }
      if (__isset.SizeY) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SizeY: ");
        __sb.Append(SizeY);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
