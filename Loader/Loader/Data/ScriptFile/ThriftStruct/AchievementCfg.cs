/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace ThriftStruct
{

  /// <summary>
  /// Autogenerated by program
  /// 
  /// Autho ZhuGeLongFei
  /// 
  /// Do not edit unless you are sure that you know what you are doning
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class AchievementCfg : TBase
  {
    private int _Type;
    private int _LimitIDMale;
    private int _LimitIDFemale;
    private int _Scene;

    public int Type
    {
      get
      {
        return _Type;
      }
      set
      {
        __isset.Type = true;
        this._Type = value;
      }
    }

    public int LimitIDMale
    {
      get
      {
        return _LimitIDMale;
      }
      set
      {
        __isset.LimitIDMale = true;
        this._LimitIDMale = value;
      }
    }

    public int LimitIDFemale
    {
      get
      {
        return _LimitIDFemale;
      }
      set
      {
        __isset.LimitIDFemale = true;
        this._LimitIDFemale = value;
      }
    }

    public int Scene
    {
      get
      {
        return _Scene;
      }
      set
      {
        __isset.Scene = true;
        this._Scene = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Type;
      public bool LimitIDMale;
      public bool LimitIDFemale;
      public bool Scene;
    }

    public AchievementCfg() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Type = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                LimitIDMale = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                LimitIDFemale = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Scene = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("AchievementCfg");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.Type) {
          field.Name = "Type";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Type);
          oprot.WriteFieldEnd();
        }
        if (__isset.LimitIDMale) {
          field.Name = "LimitIDMale";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(LimitIDMale);
          oprot.WriteFieldEnd();
        }
        if (__isset.LimitIDFemale) {
          field.Name = "LimitIDFemale";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(LimitIDFemale);
          oprot.WriteFieldEnd();
        }
        if (__isset.Scene) {
          field.Name = "Scene";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Scene);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("AchievementCfg(");
      bool __first = true;
      if (__isset.Type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Type: ");
        __sb.Append(Type);
      }
      if (__isset.LimitIDMale) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LimitIDMale: ");
        __sb.Append(LimitIDMale);
      }
      if (__isset.LimitIDFemale) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LimitIDFemale: ");
        __sb.Append(LimitIDFemale);
      }
      if (__isset.Scene) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Scene: ");
        __sb.Append(Scene);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
