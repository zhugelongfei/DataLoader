/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SCSignInAwardsMsg implements org.apache.thrift.TBase<SCSignInAwardsMsg, SCSignInAwardsMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCSignInAwardsMsg");

  private static final org.apache.thrift.protocol.TField COMMON_AWARDS_FIELD_DESC = new org.apache.thrift.protocol.TField("commonAwards", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField COLLECTIVE_AWARDS_FIELD_DESC = new org.apache.thrift.protocol.TField("collectiveAwards", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCSignInAwardsMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCSignInAwardsMsgTupleSchemeFactory());
  }

  public List<ConmmonSignInAward> commonAwards; // required
  public List<CollectiveSignInAward> collectiveAwards; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COMMON_AWARDS((short)2, "commonAwards"),
    COLLECTIVE_AWARDS((short)3, "collectiveAwards");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 2: // COMMON_AWARDS
          return COMMON_AWARDS;
        case 3: // COLLECTIVE_AWARDS
          return COLLECTIVE_AWARDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COMMON_AWARDS, new org.apache.thrift.meta_data.FieldMetaData("commonAwards", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConmmonSignInAward.class))));
    tmpMap.put(_Fields.COLLECTIVE_AWARDS, new org.apache.thrift.meta_data.FieldMetaData("collectiveAwards", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CollectiveSignInAward.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCSignInAwardsMsg.class, metaDataMap);
  }

  public SCSignInAwardsMsg() {
  }

  public SCSignInAwardsMsg(
    List<ConmmonSignInAward> commonAwards,
    List<CollectiveSignInAward> collectiveAwards)
  {
    this();
    this.commonAwards = commonAwards;
    this.collectiveAwards = collectiveAwards;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCSignInAwardsMsg(SCSignInAwardsMsg other) {
    if (other.isSetCommonAwards()) {
      List<ConmmonSignInAward> __this__commonAwards = new ArrayList<ConmmonSignInAward>();
      for (ConmmonSignInAward other_element : other.commonAwards) {
        __this__commonAwards.add(new ConmmonSignInAward(other_element));
      }
      this.commonAwards = __this__commonAwards;
    }
    if (other.isSetCollectiveAwards()) {
      List<CollectiveSignInAward> __this__collectiveAwards = new ArrayList<CollectiveSignInAward>();
      for (CollectiveSignInAward other_element : other.collectiveAwards) {
        __this__collectiveAwards.add(new CollectiveSignInAward(other_element));
      }
      this.collectiveAwards = __this__collectiveAwards;
    }
  }

  public SCSignInAwardsMsg deepCopy() {
    return new SCSignInAwardsMsg(this);
  }

  @Override
  public void clear() {
    this.commonAwards = null;
    this.collectiveAwards = null;
  }

  public int getCommonAwardsSize() {
    return (this.commonAwards == null) ? 0 : this.commonAwards.size();
  }

  public java.util.Iterator<ConmmonSignInAward> getCommonAwardsIterator() {
    return (this.commonAwards == null) ? null : this.commonAwards.iterator();
  }

  public void addToCommonAwards(ConmmonSignInAward elem) {
    if (this.commonAwards == null) {
      this.commonAwards = new ArrayList<ConmmonSignInAward>();
    }
    this.commonAwards.add(elem);
  }

  public List<ConmmonSignInAward> getCommonAwards() {
    return this.commonAwards;
  }

  public SCSignInAwardsMsg setCommonAwards(List<ConmmonSignInAward> commonAwards) {
    this.commonAwards = commonAwards;
    return this;
  }

  public void unsetCommonAwards() {
    this.commonAwards = null;
  }

  /** Returns true if field commonAwards is set (has been assigned a value) and false otherwise */
  public boolean isSetCommonAwards() {
    return this.commonAwards != null;
  }

  public void setCommonAwardsIsSet(boolean value) {
    if (!value) {
      this.commonAwards = null;
    }
  }

  public int getCollectiveAwardsSize() {
    return (this.collectiveAwards == null) ? 0 : this.collectiveAwards.size();
  }

  public java.util.Iterator<CollectiveSignInAward> getCollectiveAwardsIterator() {
    return (this.collectiveAwards == null) ? null : this.collectiveAwards.iterator();
  }

  public void addToCollectiveAwards(CollectiveSignInAward elem) {
    if (this.collectiveAwards == null) {
      this.collectiveAwards = new ArrayList<CollectiveSignInAward>();
    }
    this.collectiveAwards.add(elem);
  }

  public List<CollectiveSignInAward> getCollectiveAwards() {
    return this.collectiveAwards;
  }

  public SCSignInAwardsMsg setCollectiveAwards(List<CollectiveSignInAward> collectiveAwards) {
    this.collectiveAwards = collectiveAwards;
    return this;
  }

  public void unsetCollectiveAwards() {
    this.collectiveAwards = null;
  }

  /** Returns true if field collectiveAwards is set (has been assigned a value) and false otherwise */
  public boolean isSetCollectiveAwards() {
    return this.collectiveAwards != null;
  }

  public void setCollectiveAwardsIsSet(boolean value) {
    if (!value) {
      this.collectiveAwards = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COMMON_AWARDS:
      if (value == null) {
        unsetCommonAwards();
      } else {
        setCommonAwards((List<ConmmonSignInAward>)value);
      }
      break;

    case COLLECTIVE_AWARDS:
      if (value == null) {
        unsetCollectiveAwards();
      } else {
        setCollectiveAwards((List<CollectiveSignInAward>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COMMON_AWARDS:
      return getCommonAwards();

    case COLLECTIVE_AWARDS:
      return getCollectiveAwards();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COMMON_AWARDS:
      return isSetCommonAwards();
    case COLLECTIVE_AWARDS:
      return isSetCollectiveAwards();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCSignInAwardsMsg)
      return this.equals((SCSignInAwardsMsg)that);
    return false;
  }

  public boolean equals(SCSignInAwardsMsg that) {
    if (that == null)
      return false;

    boolean this_present_commonAwards = true && this.isSetCommonAwards();
    boolean that_present_commonAwards = true && that.isSetCommonAwards();
    if (this_present_commonAwards || that_present_commonAwards) {
      if (!(this_present_commonAwards && that_present_commonAwards))
        return false;
      if (!this.commonAwards.equals(that.commonAwards))
        return false;
    }

    boolean this_present_collectiveAwards = true && this.isSetCollectiveAwards();
    boolean that_present_collectiveAwards = true && that.isSetCollectiveAwards();
    if (this_present_collectiveAwards || that_present_collectiveAwards) {
      if (!(this_present_collectiveAwards && that_present_collectiveAwards))
        return false;
      if (!this.collectiveAwards.equals(that.collectiveAwards))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCSignInAwardsMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCSignInAwardsMsg typedOther = (SCSignInAwardsMsg)other;

    lastComparison = Boolean.valueOf(isSetCommonAwards()).compareTo(typedOther.isSetCommonAwards());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommonAwards()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commonAwards, typedOther.commonAwards);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCollectiveAwards()).compareTo(typedOther.isSetCollectiveAwards());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCollectiveAwards()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collectiveAwards, typedOther.collectiveAwards);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCSignInAwardsMsg(");
    boolean first = true;

    sb.append("commonAwards:");
    if (this.commonAwards == null) {
      sb.append("null");
    } else {
      sb.append(this.commonAwards);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("collectiveAwards:");
    if (this.collectiveAwards == null) {
      sb.append("null");
    } else {
      sb.append(this.collectiveAwards);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCSignInAwardsMsgStandardSchemeFactory implements SchemeFactory {
    public SCSignInAwardsMsgStandardScheme getScheme() {
      return new SCSignInAwardsMsgStandardScheme();
    }
  }

  private static class SCSignInAwardsMsgStandardScheme extends StandardScheme<SCSignInAwardsMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCSignInAwardsMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 2: // COMMON_AWARDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.commonAwards = new ArrayList<ConmmonSignInAward>(_list32.size);
                for (int _i33 = 0; _i33 < _list32.size; ++_i33)
                {
                  ConmmonSignInAward _elem34; // required
                  _elem34 = new ConmmonSignInAward();
                  _elem34.read(iprot);
                  struct.commonAwards.add(_elem34);
                }
                iprot.readListEnd();
              }
              struct.setCommonAwardsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COLLECTIVE_AWARDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list35 = iprot.readListBegin();
                struct.collectiveAwards = new ArrayList<CollectiveSignInAward>(_list35.size);
                for (int _i36 = 0; _i36 < _list35.size; ++_i36)
                {
                  CollectiveSignInAward _elem37; // required
                  _elem37 = new CollectiveSignInAward();
                  _elem37.read(iprot);
                  struct.collectiveAwards.add(_elem37);
                }
                iprot.readListEnd();
              }
              struct.setCollectiveAwardsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCSignInAwardsMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.commonAwards != null) {
        oprot.writeFieldBegin(COMMON_AWARDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.commonAwards.size()));
          for (ConmmonSignInAward _iter38 : struct.commonAwards)
          {
            _iter38.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.collectiveAwards != null) {
        oprot.writeFieldBegin(COLLECTIVE_AWARDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.collectiveAwards.size()));
          for (CollectiveSignInAward _iter39 : struct.collectiveAwards)
          {
            _iter39.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCSignInAwardsMsgTupleSchemeFactory implements SchemeFactory {
    public SCSignInAwardsMsgTupleScheme getScheme() {
      return new SCSignInAwardsMsgTupleScheme();
    }
  }

  private static class SCSignInAwardsMsgTupleScheme extends TupleScheme<SCSignInAwardsMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCSignInAwardsMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCommonAwards()) {
        optionals.set(0);
      }
      if (struct.isSetCollectiveAwards()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetCommonAwards()) {
        {
          oprot.writeI32(struct.commonAwards.size());
          for (ConmmonSignInAward _iter40 : struct.commonAwards)
          {
            _iter40.write(oprot);
          }
        }
      }
      if (struct.isSetCollectiveAwards()) {
        {
          oprot.writeI32(struct.collectiveAwards.size());
          for (CollectiveSignInAward _iter41 : struct.collectiveAwards)
          {
            _iter41.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCSignInAwardsMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list42 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.commonAwards = new ArrayList<ConmmonSignInAward>(_list42.size);
          for (int _i43 = 0; _i43 < _list42.size; ++_i43)
          {
            ConmmonSignInAward _elem44; // required
            _elem44 = new ConmmonSignInAward();
            _elem44.read(iprot);
            struct.commonAwards.add(_elem44);
          }
        }
        struct.setCommonAwardsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.collectiveAwards = new ArrayList<CollectiveSignInAward>(_list45.size);
          for (int _i46 = 0; _i46 < _list45.size; ++_i46)
          {
            CollectiveSignInAward _elem47; // required
            _elem47 = new CollectiveSignInAward();
            _elem47.read(iprot);
            struct.collectiveAwards.add(_elem47);
          }
        }
        struct.setCollectiveAwardsIsSet(true);
      }
    }
  }

}

