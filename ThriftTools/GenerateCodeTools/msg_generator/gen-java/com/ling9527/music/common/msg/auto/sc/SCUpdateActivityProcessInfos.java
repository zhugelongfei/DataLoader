/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 更新活动目标进度信息
 */
public class SCUpdateActivityProcessInfos implements org.apache.thrift.TBase<SCUpdateActivityProcessInfos, SCUpdateActivityProcessInfos._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCUpdateActivityProcessInfos");

  private static final org.apache.thrift.protocol.TField UPDATE_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("updateInfos", org.apache.thrift.protocol.TType.MAP, (short)1);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCUpdateActivityProcessInfosStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCUpdateActivityProcessInfosTupleSchemeFactory());
  }

  /**
   * 活动id对应标进度信息
   */
  public Map<Integer,List<ActivityTargetProcessInfo>> updateInfos; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 活动id对应标进度信息
     */
    UPDATE_INFOS((short)1, "updateInfos");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UPDATE_INFOS
          return UPDATE_INFOS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UPDATE_INFOS, new org.apache.thrift.meta_data.FieldMetaData("updateInfos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ActivityTargetProcessInfo.class)))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCUpdateActivityProcessInfos.class, metaDataMap);
  }

  public SCUpdateActivityProcessInfos() {
  }

  public SCUpdateActivityProcessInfos(
    Map<Integer,List<ActivityTargetProcessInfo>> updateInfos)
  {
    this();
    this.updateInfos = updateInfos;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCUpdateActivityProcessInfos(SCUpdateActivityProcessInfos other) {
    if (other.isSetUpdateInfos()) {
      Map<Integer,List<ActivityTargetProcessInfo>> __this__updateInfos = new HashMap<Integer,List<ActivityTargetProcessInfo>>();
      for (Map.Entry<Integer, List<ActivityTargetProcessInfo>> other_element : other.updateInfos.entrySet()) {

        Integer other_element_key = other_element.getKey();
        List<ActivityTargetProcessInfo> other_element_value = other_element.getValue();

        Integer __this__updateInfos_copy_key = other_element_key;

        List<ActivityTargetProcessInfo> __this__updateInfos_copy_value = new ArrayList<ActivityTargetProcessInfo>();
        for (ActivityTargetProcessInfo other_element_value_element : other_element_value) {
          __this__updateInfos_copy_value.add(new ActivityTargetProcessInfo(other_element_value_element));
        }

        __this__updateInfos.put(__this__updateInfos_copy_key, __this__updateInfos_copy_value);
      }
      this.updateInfos = __this__updateInfos;
    }
  }

  public SCUpdateActivityProcessInfos deepCopy() {
    return new SCUpdateActivityProcessInfos(this);
  }

  @Override
  public void clear() {
    this.updateInfos = null;
  }

  public int getUpdateInfosSize() {
    return (this.updateInfos == null) ? 0 : this.updateInfos.size();
  }

  public void putToUpdateInfos(int key, List<ActivityTargetProcessInfo> val) {
    if (this.updateInfos == null) {
      this.updateInfos = new HashMap<Integer,List<ActivityTargetProcessInfo>>();
    }
    this.updateInfos.put(key, val);
  }

  /**
   * 活动id对应标进度信息
   */
  public Map<Integer,List<ActivityTargetProcessInfo>> getUpdateInfos() {
    return this.updateInfos;
  }

  /**
   * 活动id对应标进度信息
   */
  public SCUpdateActivityProcessInfos setUpdateInfos(Map<Integer,List<ActivityTargetProcessInfo>> updateInfos) {
    this.updateInfos = updateInfos;
    return this;
  }

  public void unsetUpdateInfos() {
    this.updateInfos = null;
  }

  /** Returns true if field updateInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateInfos() {
    return this.updateInfos != null;
  }

  public void setUpdateInfosIsSet(boolean value) {
    if (!value) {
      this.updateInfos = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case UPDATE_INFOS:
      if (value == null) {
        unsetUpdateInfos();
      } else {
        setUpdateInfos((Map<Integer,List<ActivityTargetProcessInfo>>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case UPDATE_INFOS:
      return getUpdateInfos();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case UPDATE_INFOS:
      return isSetUpdateInfos();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCUpdateActivityProcessInfos)
      return this.equals((SCUpdateActivityProcessInfos)that);
    return false;
  }

  public boolean equals(SCUpdateActivityProcessInfos that) {
    if (that == null)
      return false;

    boolean this_present_updateInfos = true && this.isSetUpdateInfos();
    boolean that_present_updateInfos = true && that.isSetUpdateInfos();
    if (this_present_updateInfos || that_present_updateInfos) {
      if (!(this_present_updateInfos && that_present_updateInfos))
        return false;
      if (!this.updateInfos.equals(that.updateInfos))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCUpdateActivityProcessInfos other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCUpdateActivityProcessInfos typedOther = (SCUpdateActivityProcessInfos)other;

    lastComparison = Boolean.valueOf(isSetUpdateInfos()).compareTo(typedOther.isSetUpdateInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateInfos, typedOther.updateInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCUpdateActivityProcessInfos(");
    boolean first = true;

    sb.append("updateInfos:");
    if (this.updateInfos == null) {
      sb.append("null");
    } else {
      sb.append(this.updateInfos);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCUpdateActivityProcessInfosStandardSchemeFactory implements SchemeFactory {
    public SCUpdateActivityProcessInfosStandardScheme getScheme() {
      return new SCUpdateActivityProcessInfosStandardScheme();
    }
  }

  private static class SCUpdateActivityProcessInfosStandardScheme extends StandardScheme<SCUpdateActivityProcessInfos> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCUpdateActivityProcessInfos struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UPDATE_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map16 = iprot.readMapBegin();
                struct.updateInfos = new HashMap<Integer,List<ActivityTargetProcessInfo>>(2*_map16.size);
                for (int _i17 = 0; _i17 < _map16.size; ++_i17)
                {
                  int _key18; // required
                  List<ActivityTargetProcessInfo> _val19; // required
                  _key18 = iprot.readI32();
                  {
                    org.apache.thrift.protocol.TList _list20 = iprot.readListBegin();
                    _val19 = new ArrayList<ActivityTargetProcessInfo>(_list20.size);
                    for (int _i21 = 0; _i21 < _list20.size; ++_i21)
                    {
                      ActivityTargetProcessInfo _elem22; // required
                      _elem22 = new ActivityTargetProcessInfo();
                      _elem22.read(iprot);
                      _val19.add(_elem22);
                    }
                    iprot.readListEnd();
                  }
                  struct.updateInfos.put(_key18, _val19);
                }
                iprot.readMapEnd();
              }
              struct.setUpdateInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCUpdateActivityProcessInfos struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.updateInfos != null) {
        oprot.writeFieldBegin(UPDATE_INFOS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST, struct.updateInfos.size()));
          for (Map.Entry<Integer, List<ActivityTargetProcessInfo>> _iter23 : struct.updateInfos.entrySet())
          {
            oprot.writeI32(_iter23.getKey());
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter23.getValue().size()));
              for (ActivityTargetProcessInfo _iter24 : _iter23.getValue())
              {
                _iter24.write(oprot);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCUpdateActivityProcessInfosTupleSchemeFactory implements SchemeFactory {
    public SCUpdateActivityProcessInfosTupleScheme getScheme() {
      return new SCUpdateActivityProcessInfosTupleScheme();
    }
  }

  private static class SCUpdateActivityProcessInfosTupleScheme extends TupleScheme<SCUpdateActivityProcessInfos> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCUpdateActivityProcessInfos struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUpdateInfos()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetUpdateInfos()) {
        {
          oprot.writeI32(struct.updateInfos.size());
          for (Map.Entry<Integer, List<ActivityTargetProcessInfo>> _iter25 : struct.updateInfos.entrySet())
          {
            oprot.writeI32(_iter25.getKey());
            {
              oprot.writeI32(_iter25.getValue().size());
              for (ActivityTargetProcessInfo _iter26 : _iter25.getValue())
              {
                _iter26.write(oprot);
              }
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCUpdateActivityProcessInfos struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map27 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.updateInfos = new HashMap<Integer,List<ActivityTargetProcessInfo>>(2*_map27.size);
          for (int _i28 = 0; _i28 < _map27.size; ++_i28)
          {
            int _key29; // required
            List<ActivityTargetProcessInfo> _val30; // required
            _key29 = iprot.readI32();
            {
              org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
              _val30 = new ArrayList<ActivityTargetProcessInfo>(_list31.size);
              for (int _i32 = 0; _i32 < _list31.size; ++_i32)
              {
                ActivityTargetProcessInfo _elem33; // required
                _elem33 = new ActivityTargetProcessInfo();
                _elem33.read(iprot);
                _val30.add(_elem33);
              }
            }
            struct.updateInfos.put(_key29, _val30);
          }
        }
        struct.setUpdateInfosIsSet(true);
      }
    }
  }

}

