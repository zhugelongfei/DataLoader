/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class RoomMemberInfo implements org.apache.thrift.TBase<RoomMemberInfo, RoomMemberInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RoomMemberInfo");

  private static final org.apache.thrift.protocol.TField PREPARE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("prepareStatus", org.apache.thrift.protocol.TType.BYTE, (short)1);
  private static final org.apache.thrift.protocol.TField MODEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("modelId", org.apache.thrift.protocol.TType.I16, (short)2);
  private static final org.apache.thrift.protocol.TField BODY_ADJ_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("bodyAdjVal", org.apache.thrift.protocol.TType.BYTE, (short)3);
  private static final org.apache.thrift.protocol.TField AVATAR_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("avatarInfos", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField RELATION_FIELD_DESC = new org.apache.thrift.protocol.TField("relation", org.apache.thrift.protocol.TType.BYTE, (short)5);
  private static final org.apache.thrift.protocol.TField STATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("stature", org.apache.thrift.protocol.TType.BYTE, (short)6);
  private static final org.apache.thrift.protocol.TField SEAT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("seatId", org.apache.thrift.protocol.TType.I16, (short)7);
  private static final org.apache.thrift.protocol.TField PLAYER_BASE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("playerBaseInfo", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField SKIN_COLOR_FIELD_DESC = new org.apache.thrift.protocol.TField("skinColor", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField THE_ONE_CHAR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("theOneCharId", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField PUT_ON_BADGES_FIELD_DESC = new org.apache.thrift.protocol.TField("putOnBadges", org.apache.thrift.protocol.TType.LIST, (short)13);
  private static final org.apache.thrift.protocol.TField POSITION_X_FIELD_DESC = new org.apache.thrift.protocol.TField("positionX", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField POSITION_Y_FIELD_DESC = new org.apache.thrift.protocol.TField("positionY", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField POSITION_Z_FIELD_DESC = new org.apache.thrift.protocol.TField("positionZ", org.apache.thrift.protocol.TType.DOUBLE, (short)16);
  private static final org.apache.thrift.protocol.TField DANCE_FASHION_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("danceFashionIds", org.apache.thrift.protocol.TType.MAP, (short)17);
  private static final org.apache.thrift.protocol.TField TARGET_GROUND_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("targetGroundStatus", org.apache.thrift.protocol.TType.BYTE, (short)18);
  private static final org.apache.thrift.protocol.TField ACTION_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("actionStatus", org.apache.thrift.protocol.TType.BYTE, (short)19);
  private static final org.apache.thrift.protocol.TField OBJ_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("objId", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField OBJ_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("objParam", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField MUSIC_LOAD_PROCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("musicLoadProcess", org.apache.thrift.protocol.TType.BYTE, (short)22);
  private static final org.apache.thrift.protocol.TField IS_READY_FIELD_DESC = new org.apache.thrift.protocol.TField("isReady", org.apache.thrift.protocol.TType.BOOL, (short)23);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RoomMemberInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RoomMemberInfoTupleSchemeFactory());
  }

  public byte prepareStatus; // required
  public short modelId; // required
  public byte bodyAdjVal; // required
  public List<AvatarInfo> avatarInfos; // required
  /**
   * 0-strange 1-friend
   */
  public byte relation; // required
  public byte stature; // required
  /**
   * -1 watch
   */
  public short seatId; // required
  public PlayerBaseInfo playerBaseInfo; // required
  public int skinColor; // required
  public long theOneCharId; // required
  /**
   * 佩戴的徽章
   */
  public List<BadgeInfo> putOnBadges; // required
  public double positionX; // required
  public double positionY; // required
  public double positionZ; // required
  /**
   * 使用中的个人展示时尚id key:style val:id
   */
  public Map<Byte,Integer> danceFashionIds; // required
  /**
   * 广场区域GroundPlayerStatus
   */
  public byte targetGroundStatus; // optional
  /**
   * 行为状态GroundActionStatus
   */
  public byte actionStatus; // optional
  /**
   * 广场部件id
   */
  public int objId; // optional
  /**
   * 广场部件参数
   */
  public int objParam; // optional
  /**
   * 音乐加载进度（0-100）
   */
  public byte musicLoadProcess; // optional
  /**
   * 是否准备好
   */
  public boolean isReady; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PREPARE_STATUS((short)1, "prepareStatus"),
    MODEL_ID((short)2, "modelId"),
    BODY_ADJ_VAL((short)3, "bodyAdjVal"),
    AVATAR_INFOS((short)4, "avatarInfos"),
    /**
     * 0-strange 1-friend
     */
    RELATION((short)5, "relation"),
    STATURE((short)6, "stature"),
    /**
     * -1 watch
     */
    SEAT_ID((short)7, "seatId"),
    PLAYER_BASE_INFO((short)10, "playerBaseInfo"),
    SKIN_COLOR((short)11, "skinColor"),
    THE_ONE_CHAR_ID((short)12, "theOneCharId"),
    /**
     * 佩戴的徽章
     */
    PUT_ON_BADGES((short)13, "putOnBadges"),
    POSITION_X((short)14, "positionX"),
    POSITION_Y((short)15, "positionY"),
    POSITION_Z((short)16, "positionZ"),
    /**
     * 使用中的个人展示时尚id key:style val:id
     */
    DANCE_FASHION_IDS((short)17, "danceFashionIds"),
    /**
     * 广场区域GroundPlayerStatus
     */
    TARGET_GROUND_STATUS((short)18, "targetGroundStatus"),
    /**
     * 行为状态GroundActionStatus
     */
    ACTION_STATUS((short)19, "actionStatus"),
    /**
     * 广场部件id
     */
    OBJ_ID((short)20, "objId"),
    /**
     * 广场部件参数
     */
    OBJ_PARAM((short)21, "objParam"),
    /**
     * 音乐加载进度（0-100）
     */
    MUSIC_LOAD_PROCESS((short)22, "musicLoadProcess"),
    /**
     * 是否准备好
     */
    IS_READY((short)23, "isReady");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PREPARE_STATUS
          return PREPARE_STATUS;
        case 2: // MODEL_ID
          return MODEL_ID;
        case 3: // BODY_ADJ_VAL
          return BODY_ADJ_VAL;
        case 4: // AVATAR_INFOS
          return AVATAR_INFOS;
        case 5: // RELATION
          return RELATION;
        case 6: // STATURE
          return STATURE;
        case 7: // SEAT_ID
          return SEAT_ID;
        case 10: // PLAYER_BASE_INFO
          return PLAYER_BASE_INFO;
        case 11: // SKIN_COLOR
          return SKIN_COLOR;
        case 12: // THE_ONE_CHAR_ID
          return THE_ONE_CHAR_ID;
        case 13: // PUT_ON_BADGES
          return PUT_ON_BADGES;
        case 14: // POSITION_X
          return POSITION_X;
        case 15: // POSITION_Y
          return POSITION_Y;
        case 16: // POSITION_Z
          return POSITION_Z;
        case 17: // DANCE_FASHION_IDS
          return DANCE_FASHION_IDS;
        case 18: // TARGET_GROUND_STATUS
          return TARGET_GROUND_STATUS;
        case 19: // ACTION_STATUS
          return ACTION_STATUS;
        case 20: // OBJ_ID
          return OBJ_ID;
        case 21: // OBJ_PARAM
          return OBJ_PARAM;
        case 22: // MUSIC_LOAD_PROCESS
          return MUSIC_LOAD_PROCESS;
        case 23: // IS_READY
          return IS_READY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PREPARESTATUS_ISSET_ID = 0;
  private static final int __MODELID_ISSET_ID = 1;
  private static final int __BODYADJVAL_ISSET_ID = 2;
  private static final int __RELATION_ISSET_ID = 3;
  private static final int __STATURE_ISSET_ID = 4;
  private static final int __SEATID_ISSET_ID = 5;
  private static final int __SKINCOLOR_ISSET_ID = 6;
  private static final int __THEONECHARID_ISSET_ID = 7;
  private static final int __POSITIONX_ISSET_ID = 8;
  private static final int __POSITIONY_ISSET_ID = 9;
  private static final int __POSITIONZ_ISSET_ID = 10;
  private static final int __TARGETGROUNDSTATUS_ISSET_ID = 11;
  private static final int __ACTIONSTATUS_ISSET_ID = 12;
  private static final int __OBJID_ISSET_ID = 13;
  private static final int __OBJPARAM_ISSET_ID = 14;
  private static final int __MUSICLOADPROCESS_ISSET_ID = 15;
  private static final int __ISREADY_ISSET_ID = 16;
  private int __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.TARGET_GROUND_STATUS,_Fields.ACTION_STATUS,_Fields.OBJ_ID,_Fields.OBJ_PARAM,_Fields.MUSIC_LOAD_PROCESS,_Fields.IS_READY};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PREPARE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("prepareStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.MODEL_ID, new org.apache.thrift.meta_data.FieldMetaData("modelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.BODY_ADJ_VAL, new org.apache.thrift.meta_data.FieldMetaData("bodyAdjVal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.AVATAR_INFOS, new org.apache.thrift.meta_data.FieldMetaData("avatarInfos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AvatarInfo.class))));
    tmpMap.put(_Fields.RELATION, new org.apache.thrift.meta_data.FieldMetaData("relation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.STATURE, new org.apache.thrift.meta_data.FieldMetaData("stature", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.SEAT_ID, new org.apache.thrift.meta_data.FieldMetaData("seatId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.PLAYER_BASE_INFO, new org.apache.thrift.meta_data.FieldMetaData("playerBaseInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PlayerBaseInfo.class)));
    tmpMap.put(_Fields.SKIN_COLOR, new org.apache.thrift.meta_data.FieldMetaData("skinColor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.THE_ONE_CHAR_ID, new org.apache.thrift.meta_data.FieldMetaData("theOneCharId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PUT_ON_BADGES, new org.apache.thrift.meta_data.FieldMetaData("putOnBadges", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BadgeInfo.class))));
    tmpMap.put(_Fields.POSITION_X, new org.apache.thrift.meta_data.FieldMetaData("positionX", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.POSITION_Y, new org.apache.thrift.meta_data.FieldMetaData("positionY", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.POSITION_Z, new org.apache.thrift.meta_data.FieldMetaData("positionZ", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DANCE_FASHION_IDS, new org.apache.thrift.meta_data.FieldMetaData("danceFashionIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.TARGET_GROUND_STATUS, new org.apache.thrift.meta_data.FieldMetaData("targetGroundStatus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.ACTION_STATUS, new org.apache.thrift.meta_data.FieldMetaData("actionStatus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.OBJ_ID, new org.apache.thrift.meta_data.FieldMetaData("objId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OBJ_PARAM, new org.apache.thrift.meta_data.FieldMetaData("objParam", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MUSIC_LOAD_PROCESS, new org.apache.thrift.meta_data.FieldMetaData("musicLoadProcess", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.IS_READY, new org.apache.thrift.meta_data.FieldMetaData("isReady", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RoomMemberInfo.class, metaDataMap);
  }

  public RoomMemberInfo() {
  }

  public RoomMemberInfo(
    byte prepareStatus,
    short modelId,
    byte bodyAdjVal,
    List<AvatarInfo> avatarInfos,
    byte relation,
    byte stature,
    short seatId,
    PlayerBaseInfo playerBaseInfo,
    int skinColor,
    long theOneCharId,
    List<BadgeInfo> putOnBadges,
    double positionX,
    double positionY,
    double positionZ,
    Map<Byte,Integer> danceFashionIds)
  {
    this();
    this.prepareStatus = prepareStatus;
    setPrepareStatusIsSet(true);
    this.modelId = modelId;
    setModelIdIsSet(true);
    this.bodyAdjVal = bodyAdjVal;
    setBodyAdjValIsSet(true);
    this.avatarInfos = avatarInfos;
    this.relation = relation;
    setRelationIsSet(true);
    this.stature = stature;
    setStatureIsSet(true);
    this.seatId = seatId;
    setSeatIdIsSet(true);
    this.playerBaseInfo = playerBaseInfo;
    this.skinColor = skinColor;
    setSkinColorIsSet(true);
    this.theOneCharId = theOneCharId;
    setTheOneCharIdIsSet(true);
    this.putOnBadges = putOnBadges;
    this.positionX = positionX;
    setPositionXIsSet(true);
    this.positionY = positionY;
    setPositionYIsSet(true);
    this.positionZ = positionZ;
    setPositionZIsSet(true);
    this.danceFashionIds = danceFashionIds;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RoomMemberInfo(RoomMemberInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.prepareStatus = other.prepareStatus;
    this.modelId = other.modelId;
    this.bodyAdjVal = other.bodyAdjVal;
    if (other.isSetAvatarInfos()) {
      List<AvatarInfo> __this__avatarInfos = new ArrayList<AvatarInfo>();
      for (AvatarInfo other_element : other.avatarInfos) {
        __this__avatarInfos.add(new AvatarInfo(other_element));
      }
      this.avatarInfos = __this__avatarInfos;
    }
    this.relation = other.relation;
    this.stature = other.stature;
    this.seatId = other.seatId;
    if (other.isSetPlayerBaseInfo()) {
      this.playerBaseInfo = new PlayerBaseInfo(other.playerBaseInfo);
    }
    this.skinColor = other.skinColor;
    this.theOneCharId = other.theOneCharId;
    if (other.isSetPutOnBadges()) {
      List<BadgeInfo> __this__putOnBadges = new ArrayList<BadgeInfo>();
      for (BadgeInfo other_element : other.putOnBadges) {
        __this__putOnBadges.add(new BadgeInfo(other_element));
      }
      this.putOnBadges = __this__putOnBadges;
    }
    this.positionX = other.positionX;
    this.positionY = other.positionY;
    this.positionZ = other.positionZ;
    if (other.isSetDanceFashionIds()) {
      Map<Byte,Integer> __this__danceFashionIds = new HashMap<Byte,Integer>();
      for (Map.Entry<Byte, Integer> other_element : other.danceFashionIds.entrySet()) {

        Byte other_element_key = other_element.getKey();
        Integer other_element_value = other_element.getValue();

        Byte __this__danceFashionIds_copy_key = other_element_key;

        Integer __this__danceFashionIds_copy_value = other_element_value;

        __this__danceFashionIds.put(__this__danceFashionIds_copy_key, __this__danceFashionIds_copy_value);
      }
      this.danceFashionIds = __this__danceFashionIds;
    }
    this.targetGroundStatus = other.targetGroundStatus;
    this.actionStatus = other.actionStatus;
    this.objId = other.objId;
    this.objParam = other.objParam;
    this.musicLoadProcess = other.musicLoadProcess;
    this.isReady = other.isReady;
  }

  public RoomMemberInfo deepCopy() {
    return new RoomMemberInfo(this);
  }

  @Override
  public void clear() {
    setPrepareStatusIsSet(false);
    this.prepareStatus = 0;
    setModelIdIsSet(false);
    this.modelId = 0;
    setBodyAdjValIsSet(false);
    this.bodyAdjVal = 0;
    this.avatarInfos = null;
    setRelationIsSet(false);
    this.relation = 0;
    setStatureIsSet(false);
    this.stature = 0;
    setSeatIdIsSet(false);
    this.seatId = 0;
    this.playerBaseInfo = null;
    setSkinColorIsSet(false);
    this.skinColor = 0;
    setTheOneCharIdIsSet(false);
    this.theOneCharId = 0;
    this.putOnBadges = null;
    setPositionXIsSet(false);
    this.positionX = 0.0;
    setPositionYIsSet(false);
    this.positionY = 0.0;
    setPositionZIsSet(false);
    this.positionZ = 0.0;
    this.danceFashionIds = null;
    setTargetGroundStatusIsSet(false);
    this.targetGroundStatus = 0;
    setActionStatusIsSet(false);
    this.actionStatus = 0;
    setObjIdIsSet(false);
    this.objId = 0;
    setObjParamIsSet(false);
    this.objParam = 0;
    setMusicLoadProcessIsSet(false);
    this.musicLoadProcess = 0;
    setIsReadyIsSet(false);
    this.isReady = false;
  }

  public byte getPrepareStatus() {
    return this.prepareStatus;
  }

  public RoomMemberInfo setPrepareStatus(byte prepareStatus) {
    this.prepareStatus = prepareStatus;
    setPrepareStatusIsSet(true);
    return this;
  }

  public void unsetPrepareStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PREPARESTATUS_ISSET_ID);
  }

  /** Returns true if field prepareStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetPrepareStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __PREPARESTATUS_ISSET_ID);
  }

  public void setPrepareStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PREPARESTATUS_ISSET_ID, value);
  }

  public short getModelId() {
    return this.modelId;
  }

  public RoomMemberInfo setModelId(short modelId) {
    this.modelId = modelId;
    setModelIdIsSet(true);
    return this;
  }

  public void unsetModelId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MODELID_ISSET_ID);
  }

  /** Returns true if field modelId is set (has been assigned a value) and false otherwise */
  public boolean isSetModelId() {
    return EncodingUtils.testBit(__isset_bitfield, __MODELID_ISSET_ID);
  }

  public void setModelIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MODELID_ISSET_ID, value);
  }

  public byte getBodyAdjVal() {
    return this.bodyAdjVal;
  }

  public RoomMemberInfo setBodyAdjVal(byte bodyAdjVal) {
    this.bodyAdjVal = bodyAdjVal;
    setBodyAdjValIsSet(true);
    return this;
  }

  public void unsetBodyAdjVal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BODYADJVAL_ISSET_ID);
  }

  /** Returns true if field bodyAdjVal is set (has been assigned a value) and false otherwise */
  public boolean isSetBodyAdjVal() {
    return EncodingUtils.testBit(__isset_bitfield, __BODYADJVAL_ISSET_ID);
  }

  public void setBodyAdjValIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BODYADJVAL_ISSET_ID, value);
  }

  public int getAvatarInfosSize() {
    return (this.avatarInfos == null) ? 0 : this.avatarInfos.size();
  }

  public java.util.Iterator<AvatarInfo> getAvatarInfosIterator() {
    return (this.avatarInfos == null) ? null : this.avatarInfos.iterator();
  }

  public void addToAvatarInfos(AvatarInfo elem) {
    if (this.avatarInfos == null) {
      this.avatarInfos = new ArrayList<AvatarInfo>();
    }
    this.avatarInfos.add(elem);
  }

  public List<AvatarInfo> getAvatarInfos() {
    return this.avatarInfos;
  }

  public RoomMemberInfo setAvatarInfos(List<AvatarInfo> avatarInfos) {
    this.avatarInfos = avatarInfos;
    return this;
  }

  public void unsetAvatarInfos() {
    this.avatarInfos = null;
  }

  /** Returns true if field avatarInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetAvatarInfos() {
    return this.avatarInfos != null;
  }

  public void setAvatarInfosIsSet(boolean value) {
    if (!value) {
      this.avatarInfos = null;
    }
  }

  /**
   * 0-strange 1-friend
   */
  public byte getRelation() {
    return this.relation;
  }

  /**
   * 0-strange 1-friend
   */
  public RoomMemberInfo setRelation(byte relation) {
    this.relation = relation;
    setRelationIsSet(true);
    return this;
  }

  public void unsetRelation() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RELATION_ISSET_ID);
  }

  /** Returns true if field relation is set (has been assigned a value) and false otherwise */
  public boolean isSetRelation() {
    return EncodingUtils.testBit(__isset_bitfield, __RELATION_ISSET_ID);
  }

  public void setRelationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RELATION_ISSET_ID, value);
  }

  public byte getStature() {
    return this.stature;
  }

  public RoomMemberInfo setStature(byte stature) {
    this.stature = stature;
    setStatureIsSet(true);
    return this;
  }

  public void unsetStature() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATURE_ISSET_ID);
  }

  /** Returns true if field stature is set (has been assigned a value) and false otherwise */
  public boolean isSetStature() {
    return EncodingUtils.testBit(__isset_bitfield, __STATURE_ISSET_ID);
  }

  public void setStatureIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATURE_ISSET_ID, value);
  }

  /**
   * -1 watch
   */
  public short getSeatId() {
    return this.seatId;
  }

  /**
   * -1 watch
   */
  public RoomMemberInfo setSeatId(short seatId) {
    this.seatId = seatId;
    setSeatIdIsSet(true);
    return this;
  }

  public void unsetSeatId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEATID_ISSET_ID);
  }

  /** Returns true if field seatId is set (has been assigned a value) and false otherwise */
  public boolean isSetSeatId() {
    return EncodingUtils.testBit(__isset_bitfield, __SEATID_ISSET_ID);
  }

  public void setSeatIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEATID_ISSET_ID, value);
  }

  public PlayerBaseInfo getPlayerBaseInfo() {
    return this.playerBaseInfo;
  }

  public RoomMemberInfo setPlayerBaseInfo(PlayerBaseInfo playerBaseInfo) {
    this.playerBaseInfo = playerBaseInfo;
    return this;
  }

  public void unsetPlayerBaseInfo() {
    this.playerBaseInfo = null;
  }

  /** Returns true if field playerBaseInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetPlayerBaseInfo() {
    return this.playerBaseInfo != null;
  }

  public void setPlayerBaseInfoIsSet(boolean value) {
    if (!value) {
      this.playerBaseInfo = null;
    }
  }

  public int getSkinColor() {
    return this.skinColor;
  }

  public RoomMemberInfo setSkinColor(int skinColor) {
    this.skinColor = skinColor;
    setSkinColorIsSet(true);
    return this;
  }

  public void unsetSkinColor() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SKINCOLOR_ISSET_ID);
  }

  /** Returns true if field skinColor is set (has been assigned a value) and false otherwise */
  public boolean isSetSkinColor() {
    return EncodingUtils.testBit(__isset_bitfield, __SKINCOLOR_ISSET_ID);
  }

  public void setSkinColorIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SKINCOLOR_ISSET_ID, value);
  }

  public long getTheOneCharId() {
    return this.theOneCharId;
  }

  public RoomMemberInfo setTheOneCharId(long theOneCharId) {
    this.theOneCharId = theOneCharId;
    setTheOneCharIdIsSet(true);
    return this;
  }

  public void unsetTheOneCharId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __THEONECHARID_ISSET_ID);
  }

  /** Returns true if field theOneCharId is set (has been assigned a value) and false otherwise */
  public boolean isSetTheOneCharId() {
    return EncodingUtils.testBit(__isset_bitfield, __THEONECHARID_ISSET_ID);
  }

  public void setTheOneCharIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __THEONECHARID_ISSET_ID, value);
  }

  public int getPutOnBadgesSize() {
    return (this.putOnBadges == null) ? 0 : this.putOnBadges.size();
  }

  public java.util.Iterator<BadgeInfo> getPutOnBadgesIterator() {
    return (this.putOnBadges == null) ? null : this.putOnBadges.iterator();
  }

  public void addToPutOnBadges(BadgeInfo elem) {
    if (this.putOnBadges == null) {
      this.putOnBadges = new ArrayList<BadgeInfo>();
    }
    this.putOnBadges.add(elem);
  }

  /**
   * 佩戴的徽章
   */
  public List<BadgeInfo> getPutOnBadges() {
    return this.putOnBadges;
  }

  /**
   * 佩戴的徽章
   */
  public RoomMemberInfo setPutOnBadges(List<BadgeInfo> putOnBadges) {
    this.putOnBadges = putOnBadges;
    return this;
  }

  public void unsetPutOnBadges() {
    this.putOnBadges = null;
  }

  /** Returns true if field putOnBadges is set (has been assigned a value) and false otherwise */
  public boolean isSetPutOnBadges() {
    return this.putOnBadges != null;
  }

  public void setPutOnBadgesIsSet(boolean value) {
    if (!value) {
      this.putOnBadges = null;
    }
  }

  public double getPositionX() {
    return this.positionX;
  }

  public RoomMemberInfo setPositionX(double positionX) {
    this.positionX = positionX;
    setPositionXIsSet(true);
    return this;
  }

  public void unsetPositionX() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITIONX_ISSET_ID);
  }

  /** Returns true if field positionX is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionX() {
    return EncodingUtils.testBit(__isset_bitfield, __POSITIONX_ISSET_ID);
  }

  public void setPositionXIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITIONX_ISSET_ID, value);
  }

  public double getPositionY() {
    return this.positionY;
  }

  public RoomMemberInfo setPositionY(double positionY) {
    this.positionY = positionY;
    setPositionYIsSet(true);
    return this;
  }

  public void unsetPositionY() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITIONY_ISSET_ID);
  }

  /** Returns true if field positionY is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionY() {
    return EncodingUtils.testBit(__isset_bitfield, __POSITIONY_ISSET_ID);
  }

  public void setPositionYIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITIONY_ISSET_ID, value);
  }

  public double getPositionZ() {
    return this.positionZ;
  }

  public RoomMemberInfo setPositionZ(double positionZ) {
    this.positionZ = positionZ;
    setPositionZIsSet(true);
    return this;
  }

  public void unsetPositionZ() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITIONZ_ISSET_ID);
  }

  /** Returns true if field positionZ is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionZ() {
    return EncodingUtils.testBit(__isset_bitfield, __POSITIONZ_ISSET_ID);
  }

  public void setPositionZIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITIONZ_ISSET_ID, value);
  }

  public int getDanceFashionIdsSize() {
    return (this.danceFashionIds == null) ? 0 : this.danceFashionIds.size();
  }

  public void putToDanceFashionIds(byte key, int val) {
    if (this.danceFashionIds == null) {
      this.danceFashionIds = new HashMap<Byte,Integer>();
    }
    this.danceFashionIds.put(key, val);
  }

  /**
   * 使用中的个人展示时尚id key:style val:id
   */
  public Map<Byte,Integer> getDanceFashionIds() {
    return this.danceFashionIds;
  }

  /**
   * 使用中的个人展示时尚id key:style val:id
   */
  public RoomMemberInfo setDanceFashionIds(Map<Byte,Integer> danceFashionIds) {
    this.danceFashionIds = danceFashionIds;
    return this;
  }

  public void unsetDanceFashionIds() {
    this.danceFashionIds = null;
  }

  /** Returns true if field danceFashionIds is set (has been assigned a value) and false otherwise */
  public boolean isSetDanceFashionIds() {
    return this.danceFashionIds != null;
  }

  public void setDanceFashionIdsIsSet(boolean value) {
    if (!value) {
      this.danceFashionIds = null;
    }
  }

  /**
   * 广场区域GroundPlayerStatus
   */
  public byte getTargetGroundStatus() {
    return this.targetGroundStatus;
  }

  /**
   * 广场区域GroundPlayerStatus
   */
  public RoomMemberInfo setTargetGroundStatus(byte targetGroundStatus) {
    this.targetGroundStatus = targetGroundStatus;
    setTargetGroundStatusIsSet(true);
    return this;
  }

  public void unsetTargetGroundStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TARGETGROUNDSTATUS_ISSET_ID);
  }

  /** Returns true if field targetGroundStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetTargetGroundStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __TARGETGROUNDSTATUS_ISSET_ID);
  }

  public void setTargetGroundStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TARGETGROUNDSTATUS_ISSET_ID, value);
  }

  /**
   * 行为状态GroundActionStatus
   */
  public byte getActionStatus() {
    return this.actionStatus;
  }

  /**
   * 行为状态GroundActionStatus
   */
  public RoomMemberInfo setActionStatus(byte actionStatus) {
    this.actionStatus = actionStatus;
    setActionStatusIsSet(true);
    return this;
  }

  public void unsetActionStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIONSTATUS_ISSET_ID);
  }

  /** Returns true if field actionStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetActionStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTIONSTATUS_ISSET_ID);
  }

  public void setActionStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIONSTATUS_ISSET_ID, value);
  }

  /**
   * 广场部件id
   */
  public int getObjId() {
    return this.objId;
  }

  /**
   * 广场部件id
   */
  public RoomMemberInfo setObjId(int objId) {
    this.objId = objId;
    setObjIdIsSet(true);
    return this;
  }

  public void unsetObjId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OBJID_ISSET_ID);
  }

  /** Returns true if field objId is set (has been assigned a value) and false otherwise */
  public boolean isSetObjId() {
    return EncodingUtils.testBit(__isset_bitfield, __OBJID_ISSET_ID);
  }

  public void setObjIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OBJID_ISSET_ID, value);
  }

  /**
   * 广场部件参数
   */
  public int getObjParam() {
    return this.objParam;
  }

  /**
   * 广场部件参数
   */
  public RoomMemberInfo setObjParam(int objParam) {
    this.objParam = objParam;
    setObjParamIsSet(true);
    return this;
  }

  public void unsetObjParam() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OBJPARAM_ISSET_ID);
  }

  /** Returns true if field objParam is set (has been assigned a value) and false otherwise */
  public boolean isSetObjParam() {
    return EncodingUtils.testBit(__isset_bitfield, __OBJPARAM_ISSET_ID);
  }

  public void setObjParamIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OBJPARAM_ISSET_ID, value);
  }

  /**
   * 音乐加载进度（0-100）
   */
  public byte getMusicLoadProcess() {
    return this.musicLoadProcess;
  }

  /**
   * 音乐加载进度（0-100）
   */
  public RoomMemberInfo setMusicLoadProcess(byte musicLoadProcess) {
    this.musicLoadProcess = musicLoadProcess;
    setMusicLoadProcessIsSet(true);
    return this;
  }

  public void unsetMusicLoadProcess() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MUSICLOADPROCESS_ISSET_ID);
  }

  /** Returns true if field musicLoadProcess is set (has been assigned a value) and false otherwise */
  public boolean isSetMusicLoadProcess() {
    return EncodingUtils.testBit(__isset_bitfield, __MUSICLOADPROCESS_ISSET_ID);
  }

  public void setMusicLoadProcessIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MUSICLOADPROCESS_ISSET_ID, value);
  }

  /**
   * 是否准备好
   */
  public boolean isIsReady() {
    return this.isReady;
  }

  /**
   * 是否准备好
   */
  public RoomMemberInfo setIsReady(boolean isReady) {
    this.isReady = isReady;
    setIsReadyIsSet(true);
    return this;
  }

  public void unsetIsReady() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISREADY_ISSET_ID);
  }

  /** Returns true if field isReady is set (has been assigned a value) and false otherwise */
  public boolean isSetIsReady() {
    return EncodingUtils.testBit(__isset_bitfield, __ISREADY_ISSET_ID);
  }

  public void setIsReadyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISREADY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PREPARE_STATUS:
      if (value == null) {
        unsetPrepareStatus();
      } else {
        setPrepareStatus((Byte)value);
      }
      break;

    case MODEL_ID:
      if (value == null) {
        unsetModelId();
      } else {
        setModelId((Short)value);
      }
      break;

    case BODY_ADJ_VAL:
      if (value == null) {
        unsetBodyAdjVal();
      } else {
        setBodyAdjVal((Byte)value);
      }
      break;

    case AVATAR_INFOS:
      if (value == null) {
        unsetAvatarInfos();
      } else {
        setAvatarInfos((List<AvatarInfo>)value);
      }
      break;

    case RELATION:
      if (value == null) {
        unsetRelation();
      } else {
        setRelation((Byte)value);
      }
      break;

    case STATURE:
      if (value == null) {
        unsetStature();
      } else {
        setStature((Byte)value);
      }
      break;

    case SEAT_ID:
      if (value == null) {
        unsetSeatId();
      } else {
        setSeatId((Short)value);
      }
      break;

    case PLAYER_BASE_INFO:
      if (value == null) {
        unsetPlayerBaseInfo();
      } else {
        setPlayerBaseInfo((PlayerBaseInfo)value);
      }
      break;

    case SKIN_COLOR:
      if (value == null) {
        unsetSkinColor();
      } else {
        setSkinColor((Integer)value);
      }
      break;

    case THE_ONE_CHAR_ID:
      if (value == null) {
        unsetTheOneCharId();
      } else {
        setTheOneCharId((Long)value);
      }
      break;

    case PUT_ON_BADGES:
      if (value == null) {
        unsetPutOnBadges();
      } else {
        setPutOnBadges((List<BadgeInfo>)value);
      }
      break;

    case POSITION_X:
      if (value == null) {
        unsetPositionX();
      } else {
        setPositionX((Double)value);
      }
      break;

    case POSITION_Y:
      if (value == null) {
        unsetPositionY();
      } else {
        setPositionY((Double)value);
      }
      break;

    case POSITION_Z:
      if (value == null) {
        unsetPositionZ();
      } else {
        setPositionZ((Double)value);
      }
      break;

    case DANCE_FASHION_IDS:
      if (value == null) {
        unsetDanceFashionIds();
      } else {
        setDanceFashionIds((Map<Byte,Integer>)value);
      }
      break;

    case TARGET_GROUND_STATUS:
      if (value == null) {
        unsetTargetGroundStatus();
      } else {
        setTargetGroundStatus((Byte)value);
      }
      break;

    case ACTION_STATUS:
      if (value == null) {
        unsetActionStatus();
      } else {
        setActionStatus((Byte)value);
      }
      break;

    case OBJ_ID:
      if (value == null) {
        unsetObjId();
      } else {
        setObjId((Integer)value);
      }
      break;

    case OBJ_PARAM:
      if (value == null) {
        unsetObjParam();
      } else {
        setObjParam((Integer)value);
      }
      break;

    case MUSIC_LOAD_PROCESS:
      if (value == null) {
        unsetMusicLoadProcess();
      } else {
        setMusicLoadProcess((Byte)value);
      }
      break;

    case IS_READY:
      if (value == null) {
        unsetIsReady();
      } else {
        setIsReady((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PREPARE_STATUS:
      return Byte.valueOf(getPrepareStatus());

    case MODEL_ID:
      return Short.valueOf(getModelId());

    case BODY_ADJ_VAL:
      return Byte.valueOf(getBodyAdjVal());

    case AVATAR_INFOS:
      return getAvatarInfos();

    case RELATION:
      return Byte.valueOf(getRelation());

    case STATURE:
      return Byte.valueOf(getStature());

    case SEAT_ID:
      return Short.valueOf(getSeatId());

    case PLAYER_BASE_INFO:
      return getPlayerBaseInfo();

    case SKIN_COLOR:
      return Integer.valueOf(getSkinColor());

    case THE_ONE_CHAR_ID:
      return Long.valueOf(getTheOneCharId());

    case PUT_ON_BADGES:
      return getPutOnBadges();

    case POSITION_X:
      return Double.valueOf(getPositionX());

    case POSITION_Y:
      return Double.valueOf(getPositionY());

    case POSITION_Z:
      return Double.valueOf(getPositionZ());

    case DANCE_FASHION_IDS:
      return getDanceFashionIds();

    case TARGET_GROUND_STATUS:
      return Byte.valueOf(getTargetGroundStatus());

    case ACTION_STATUS:
      return Byte.valueOf(getActionStatus());

    case OBJ_ID:
      return Integer.valueOf(getObjId());

    case OBJ_PARAM:
      return Integer.valueOf(getObjParam());

    case MUSIC_LOAD_PROCESS:
      return Byte.valueOf(getMusicLoadProcess());

    case IS_READY:
      return Boolean.valueOf(isIsReady());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PREPARE_STATUS:
      return isSetPrepareStatus();
    case MODEL_ID:
      return isSetModelId();
    case BODY_ADJ_VAL:
      return isSetBodyAdjVal();
    case AVATAR_INFOS:
      return isSetAvatarInfos();
    case RELATION:
      return isSetRelation();
    case STATURE:
      return isSetStature();
    case SEAT_ID:
      return isSetSeatId();
    case PLAYER_BASE_INFO:
      return isSetPlayerBaseInfo();
    case SKIN_COLOR:
      return isSetSkinColor();
    case THE_ONE_CHAR_ID:
      return isSetTheOneCharId();
    case PUT_ON_BADGES:
      return isSetPutOnBadges();
    case POSITION_X:
      return isSetPositionX();
    case POSITION_Y:
      return isSetPositionY();
    case POSITION_Z:
      return isSetPositionZ();
    case DANCE_FASHION_IDS:
      return isSetDanceFashionIds();
    case TARGET_GROUND_STATUS:
      return isSetTargetGroundStatus();
    case ACTION_STATUS:
      return isSetActionStatus();
    case OBJ_ID:
      return isSetObjId();
    case OBJ_PARAM:
      return isSetObjParam();
    case MUSIC_LOAD_PROCESS:
      return isSetMusicLoadProcess();
    case IS_READY:
      return isSetIsReady();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RoomMemberInfo)
      return this.equals((RoomMemberInfo)that);
    return false;
  }

  public boolean equals(RoomMemberInfo that) {
    if (that == null)
      return false;

    boolean this_present_prepareStatus = true;
    boolean that_present_prepareStatus = true;
    if (this_present_prepareStatus || that_present_prepareStatus) {
      if (!(this_present_prepareStatus && that_present_prepareStatus))
        return false;
      if (this.prepareStatus != that.prepareStatus)
        return false;
    }

    boolean this_present_modelId = true;
    boolean that_present_modelId = true;
    if (this_present_modelId || that_present_modelId) {
      if (!(this_present_modelId && that_present_modelId))
        return false;
      if (this.modelId != that.modelId)
        return false;
    }

    boolean this_present_bodyAdjVal = true;
    boolean that_present_bodyAdjVal = true;
    if (this_present_bodyAdjVal || that_present_bodyAdjVal) {
      if (!(this_present_bodyAdjVal && that_present_bodyAdjVal))
        return false;
      if (this.bodyAdjVal != that.bodyAdjVal)
        return false;
    }

    boolean this_present_avatarInfos = true && this.isSetAvatarInfos();
    boolean that_present_avatarInfos = true && that.isSetAvatarInfos();
    if (this_present_avatarInfos || that_present_avatarInfos) {
      if (!(this_present_avatarInfos && that_present_avatarInfos))
        return false;
      if (!this.avatarInfos.equals(that.avatarInfos))
        return false;
    }

    boolean this_present_relation = true;
    boolean that_present_relation = true;
    if (this_present_relation || that_present_relation) {
      if (!(this_present_relation && that_present_relation))
        return false;
      if (this.relation != that.relation)
        return false;
    }

    boolean this_present_stature = true;
    boolean that_present_stature = true;
    if (this_present_stature || that_present_stature) {
      if (!(this_present_stature && that_present_stature))
        return false;
      if (this.stature != that.stature)
        return false;
    }

    boolean this_present_seatId = true;
    boolean that_present_seatId = true;
    if (this_present_seatId || that_present_seatId) {
      if (!(this_present_seatId && that_present_seatId))
        return false;
      if (this.seatId != that.seatId)
        return false;
    }

    boolean this_present_playerBaseInfo = true && this.isSetPlayerBaseInfo();
    boolean that_present_playerBaseInfo = true && that.isSetPlayerBaseInfo();
    if (this_present_playerBaseInfo || that_present_playerBaseInfo) {
      if (!(this_present_playerBaseInfo && that_present_playerBaseInfo))
        return false;
      if (!this.playerBaseInfo.equals(that.playerBaseInfo))
        return false;
    }

    boolean this_present_skinColor = true;
    boolean that_present_skinColor = true;
    if (this_present_skinColor || that_present_skinColor) {
      if (!(this_present_skinColor && that_present_skinColor))
        return false;
      if (this.skinColor != that.skinColor)
        return false;
    }

    boolean this_present_theOneCharId = true;
    boolean that_present_theOneCharId = true;
    if (this_present_theOneCharId || that_present_theOneCharId) {
      if (!(this_present_theOneCharId && that_present_theOneCharId))
        return false;
      if (this.theOneCharId != that.theOneCharId)
        return false;
    }

    boolean this_present_putOnBadges = true && this.isSetPutOnBadges();
    boolean that_present_putOnBadges = true && that.isSetPutOnBadges();
    if (this_present_putOnBadges || that_present_putOnBadges) {
      if (!(this_present_putOnBadges && that_present_putOnBadges))
        return false;
      if (!this.putOnBadges.equals(that.putOnBadges))
        return false;
    }

    boolean this_present_positionX = true;
    boolean that_present_positionX = true;
    if (this_present_positionX || that_present_positionX) {
      if (!(this_present_positionX && that_present_positionX))
        return false;
      if (this.positionX != that.positionX)
        return false;
    }

    boolean this_present_positionY = true;
    boolean that_present_positionY = true;
    if (this_present_positionY || that_present_positionY) {
      if (!(this_present_positionY && that_present_positionY))
        return false;
      if (this.positionY != that.positionY)
        return false;
    }

    boolean this_present_positionZ = true;
    boolean that_present_positionZ = true;
    if (this_present_positionZ || that_present_positionZ) {
      if (!(this_present_positionZ && that_present_positionZ))
        return false;
      if (this.positionZ != that.positionZ)
        return false;
    }

    boolean this_present_danceFashionIds = true && this.isSetDanceFashionIds();
    boolean that_present_danceFashionIds = true && that.isSetDanceFashionIds();
    if (this_present_danceFashionIds || that_present_danceFashionIds) {
      if (!(this_present_danceFashionIds && that_present_danceFashionIds))
        return false;
      if (!this.danceFashionIds.equals(that.danceFashionIds))
        return false;
    }

    boolean this_present_targetGroundStatus = true && this.isSetTargetGroundStatus();
    boolean that_present_targetGroundStatus = true && that.isSetTargetGroundStatus();
    if (this_present_targetGroundStatus || that_present_targetGroundStatus) {
      if (!(this_present_targetGroundStatus && that_present_targetGroundStatus))
        return false;
      if (this.targetGroundStatus != that.targetGroundStatus)
        return false;
    }

    boolean this_present_actionStatus = true && this.isSetActionStatus();
    boolean that_present_actionStatus = true && that.isSetActionStatus();
    if (this_present_actionStatus || that_present_actionStatus) {
      if (!(this_present_actionStatus && that_present_actionStatus))
        return false;
      if (this.actionStatus != that.actionStatus)
        return false;
    }

    boolean this_present_objId = true && this.isSetObjId();
    boolean that_present_objId = true && that.isSetObjId();
    if (this_present_objId || that_present_objId) {
      if (!(this_present_objId && that_present_objId))
        return false;
      if (this.objId != that.objId)
        return false;
    }

    boolean this_present_objParam = true && this.isSetObjParam();
    boolean that_present_objParam = true && that.isSetObjParam();
    if (this_present_objParam || that_present_objParam) {
      if (!(this_present_objParam && that_present_objParam))
        return false;
      if (this.objParam != that.objParam)
        return false;
    }

    boolean this_present_musicLoadProcess = true && this.isSetMusicLoadProcess();
    boolean that_present_musicLoadProcess = true && that.isSetMusicLoadProcess();
    if (this_present_musicLoadProcess || that_present_musicLoadProcess) {
      if (!(this_present_musicLoadProcess && that_present_musicLoadProcess))
        return false;
      if (this.musicLoadProcess != that.musicLoadProcess)
        return false;
    }

    boolean this_present_isReady = true && this.isSetIsReady();
    boolean that_present_isReady = true && that.isSetIsReady();
    if (this_present_isReady || that_present_isReady) {
      if (!(this_present_isReady && that_present_isReady))
        return false;
      if (this.isReady != that.isReady)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(RoomMemberInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    RoomMemberInfo typedOther = (RoomMemberInfo)other;

    lastComparison = Boolean.valueOf(isSetPrepareStatus()).compareTo(typedOther.isSetPrepareStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrepareStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prepareStatus, typedOther.prepareStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetModelId()).compareTo(typedOther.isSetModelId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModelId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelId, typedOther.modelId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBodyAdjVal()).compareTo(typedOther.isSetBodyAdjVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBodyAdjVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bodyAdjVal, typedOther.bodyAdjVal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAvatarInfos()).compareTo(typedOther.isSetAvatarInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvatarInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.avatarInfos, typedOther.avatarInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRelation()).compareTo(typedOther.isSetRelation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relation, typedOther.relation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStature()).compareTo(typedOther.isSetStature());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStature()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stature, typedOther.stature);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSeatId()).compareTo(typedOther.isSetSeatId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSeatId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seatId, typedOther.seatId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlayerBaseInfo()).compareTo(typedOther.isSetPlayerBaseInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlayerBaseInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.playerBaseInfo, typedOther.playerBaseInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSkinColor()).compareTo(typedOther.isSetSkinColor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSkinColor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.skinColor, typedOther.skinColor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTheOneCharId()).compareTo(typedOther.isSetTheOneCharId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTheOneCharId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.theOneCharId, typedOther.theOneCharId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPutOnBadges()).compareTo(typedOther.isSetPutOnBadges());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPutOnBadges()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.putOnBadges, typedOther.putOnBadges);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPositionX()).compareTo(typedOther.isSetPositionX());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionX()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionX, typedOther.positionX);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPositionY()).compareTo(typedOther.isSetPositionY());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionY()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionY, typedOther.positionY);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPositionZ()).compareTo(typedOther.isSetPositionZ());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionZ()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionZ, typedOther.positionZ);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDanceFashionIds()).compareTo(typedOther.isSetDanceFashionIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDanceFashionIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.danceFashionIds, typedOther.danceFashionIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTargetGroundStatus()).compareTo(typedOther.isSetTargetGroundStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTargetGroundStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targetGroundStatus, typedOther.targetGroundStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActionStatus()).compareTo(typedOther.isSetActionStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActionStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actionStatus, typedOther.actionStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetObjId()).compareTo(typedOther.isSetObjId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetObjId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.objId, typedOther.objId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetObjParam()).compareTo(typedOther.isSetObjParam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetObjParam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.objParam, typedOther.objParam);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMusicLoadProcess()).compareTo(typedOther.isSetMusicLoadProcess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMusicLoadProcess()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.musicLoadProcess, typedOther.musicLoadProcess);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsReady()).compareTo(typedOther.isSetIsReady());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsReady()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isReady, typedOther.isReady);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RoomMemberInfo(");
    boolean first = true;

    sb.append("prepareStatus:");
    sb.append(this.prepareStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("modelId:");
    sb.append(this.modelId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bodyAdjVal:");
    sb.append(this.bodyAdjVal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("avatarInfos:");
    if (this.avatarInfos == null) {
      sb.append("null");
    } else {
      sb.append(this.avatarInfos);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("relation:");
    sb.append(this.relation);
    first = false;
    if (!first) sb.append(", ");
    sb.append("stature:");
    sb.append(this.stature);
    first = false;
    if (!first) sb.append(", ");
    sb.append("seatId:");
    sb.append(this.seatId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("playerBaseInfo:");
    if (this.playerBaseInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.playerBaseInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("skinColor:");
    sb.append(this.skinColor);
    first = false;
    if (!first) sb.append(", ");
    sb.append("theOneCharId:");
    sb.append(this.theOneCharId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("putOnBadges:");
    if (this.putOnBadges == null) {
      sb.append("null");
    } else {
      sb.append(this.putOnBadges);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("positionX:");
    sb.append(this.positionX);
    first = false;
    if (!first) sb.append(", ");
    sb.append("positionY:");
    sb.append(this.positionY);
    first = false;
    if (!first) sb.append(", ");
    sb.append("positionZ:");
    sb.append(this.positionZ);
    first = false;
    if (!first) sb.append(", ");
    sb.append("danceFashionIds:");
    if (this.danceFashionIds == null) {
      sb.append("null");
    } else {
      sb.append(this.danceFashionIds);
    }
    first = false;
    if (isSetTargetGroundStatus()) {
      if (!first) sb.append(", ");
      sb.append("targetGroundStatus:");
      sb.append(this.targetGroundStatus);
      first = false;
    }
    if (isSetActionStatus()) {
      if (!first) sb.append(", ");
      sb.append("actionStatus:");
      sb.append(this.actionStatus);
      first = false;
    }
    if (isSetObjId()) {
      if (!first) sb.append(", ");
      sb.append("objId:");
      sb.append(this.objId);
      first = false;
    }
    if (isSetObjParam()) {
      if (!first) sb.append(", ");
      sb.append("objParam:");
      sb.append(this.objParam);
      first = false;
    }
    if (isSetMusicLoadProcess()) {
      if (!first) sb.append(", ");
      sb.append("musicLoadProcess:");
      sb.append(this.musicLoadProcess);
      first = false;
    }
    if (isSetIsReady()) {
      if (!first) sb.append(", ");
      sb.append("isReady:");
      sb.append(this.isReady);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (playerBaseInfo != null) {
      playerBaseInfo.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RoomMemberInfoStandardSchemeFactory implements SchemeFactory {
    public RoomMemberInfoStandardScheme getScheme() {
      return new RoomMemberInfoStandardScheme();
    }
  }

  private static class RoomMemberInfoStandardScheme extends StandardScheme<RoomMemberInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RoomMemberInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PREPARE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.prepareStatus = iprot.readByte();
              struct.setPrepareStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MODEL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.modelId = iprot.readI16();
              struct.setModelIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BODY_ADJ_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.bodyAdjVal = iprot.readByte();
              struct.setBodyAdjValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // AVATAR_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list256 = iprot.readListBegin();
                struct.avatarInfos = new ArrayList<AvatarInfo>(_list256.size);
                for (int _i257 = 0; _i257 < _list256.size; ++_i257)
                {
                  AvatarInfo _elem258; // required
                  _elem258 = new AvatarInfo();
                  _elem258.read(iprot);
                  struct.avatarInfos.add(_elem258);
                }
                iprot.readListEnd();
              }
              struct.setAvatarInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RELATION
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.relation = iprot.readByte();
              struct.setRelationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STATURE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.stature = iprot.readByte();
              struct.setStatureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SEAT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.seatId = iprot.readI16();
              struct.setSeatIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PLAYER_BASE_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.playerBaseInfo = new PlayerBaseInfo();
              struct.playerBaseInfo.read(iprot);
              struct.setPlayerBaseInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SKIN_COLOR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.skinColor = iprot.readI32();
              struct.setSkinColorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // THE_ONE_CHAR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.theOneCharId = iprot.readI64();
              struct.setTheOneCharIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PUT_ON_BADGES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list259 = iprot.readListBegin();
                struct.putOnBadges = new ArrayList<BadgeInfo>(_list259.size);
                for (int _i260 = 0; _i260 < _list259.size; ++_i260)
                {
                  BadgeInfo _elem261; // required
                  _elem261 = new BadgeInfo();
                  _elem261.read(iprot);
                  struct.putOnBadges.add(_elem261);
                }
                iprot.readListEnd();
              }
              struct.setPutOnBadgesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // POSITION_X
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.positionX = iprot.readDouble();
              struct.setPositionXIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // POSITION_Y
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.positionY = iprot.readDouble();
              struct.setPositionYIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // POSITION_Z
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.positionZ = iprot.readDouble();
              struct.setPositionZIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // DANCE_FASHION_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map262 = iprot.readMapBegin();
                struct.danceFashionIds = new HashMap<Byte,Integer>(2*_map262.size);
                for (int _i263 = 0; _i263 < _map262.size; ++_i263)
                {
                  byte _key264; // required
                  int _val265; // required
                  _key264 = iprot.readByte();
                  _val265 = iprot.readI32();
                  struct.danceFashionIds.put(_key264, _val265);
                }
                iprot.readMapEnd();
              }
              struct.setDanceFashionIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // TARGET_GROUND_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.targetGroundStatus = iprot.readByte();
              struct.setTargetGroundStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // ACTION_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.actionStatus = iprot.readByte();
              struct.setActionStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // OBJ_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.objId = iprot.readI32();
              struct.setObjIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // OBJ_PARAM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.objParam = iprot.readI32();
              struct.setObjParamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // MUSIC_LOAD_PROCESS
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.musicLoadProcess = iprot.readByte();
              struct.setMusicLoadProcessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // IS_READY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isReady = iprot.readBool();
              struct.setIsReadyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RoomMemberInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PREPARE_STATUS_FIELD_DESC);
      oprot.writeByte(struct.prepareStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MODEL_ID_FIELD_DESC);
      oprot.writeI16(struct.modelId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BODY_ADJ_VAL_FIELD_DESC);
      oprot.writeByte(struct.bodyAdjVal);
      oprot.writeFieldEnd();
      if (struct.avatarInfos != null) {
        oprot.writeFieldBegin(AVATAR_INFOS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.avatarInfos.size()));
          for (AvatarInfo _iter266 : struct.avatarInfos)
          {
            _iter266.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RELATION_FIELD_DESC);
      oprot.writeByte(struct.relation);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATURE_FIELD_DESC);
      oprot.writeByte(struct.stature);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SEAT_ID_FIELD_DESC);
      oprot.writeI16(struct.seatId);
      oprot.writeFieldEnd();
      if (struct.playerBaseInfo != null) {
        oprot.writeFieldBegin(PLAYER_BASE_INFO_FIELD_DESC);
        struct.playerBaseInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SKIN_COLOR_FIELD_DESC);
      oprot.writeI32(struct.skinColor);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(THE_ONE_CHAR_ID_FIELD_DESC);
      oprot.writeI64(struct.theOneCharId);
      oprot.writeFieldEnd();
      if (struct.putOnBadges != null) {
        oprot.writeFieldBegin(PUT_ON_BADGES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.putOnBadges.size()));
          for (BadgeInfo _iter267 : struct.putOnBadges)
          {
            _iter267.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(POSITION_X_FIELD_DESC);
      oprot.writeDouble(struct.positionX);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POSITION_Y_FIELD_DESC);
      oprot.writeDouble(struct.positionY);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POSITION_Z_FIELD_DESC);
      oprot.writeDouble(struct.positionZ);
      oprot.writeFieldEnd();
      if (struct.danceFashionIds != null) {
        oprot.writeFieldBegin(DANCE_FASHION_IDS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.BYTE, org.apache.thrift.protocol.TType.I32, struct.danceFashionIds.size()));
          for (Map.Entry<Byte, Integer> _iter268 : struct.danceFashionIds.entrySet())
          {
            oprot.writeByte(_iter268.getKey());
            oprot.writeI32(_iter268.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.isSetTargetGroundStatus()) {
        oprot.writeFieldBegin(TARGET_GROUND_STATUS_FIELD_DESC);
        oprot.writeByte(struct.targetGroundStatus);
        oprot.writeFieldEnd();
      }
      if (struct.isSetActionStatus()) {
        oprot.writeFieldBegin(ACTION_STATUS_FIELD_DESC);
        oprot.writeByte(struct.actionStatus);
        oprot.writeFieldEnd();
      }
      if (struct.isSetObjId()) {
        oprot.writeFieldBegin(OBJ_ID_FIELD_DESC);
        oprot.writeI32(struct.objId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetObjParam()) {
        oprot.writeFieldBegin(OBJ_PARAM_FIELD_DESC);
        oprot.writeI32(struct.objParam);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMusicLoadProcess()) {
        oprot.writeFieldBegin(MUSIC_LOAD_PROCESS_FIELD_DESC);
        oprot.writeByte(struct.musicLoadProcess);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsReady()) {
        oprot.writeFieldBegin(IS_READY_FIELD_DESC);
        oprot.writeBool(struct.isReady);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RoomMemberInfoTupleSchemeFactory implements SchemeFactory {
    public RoomMemberInfoTupleScheme getScheme() {
      return new RoomMemberInfoTupleScheme();
    }
  }

  private static class RoomMemberInfoTupleScheme extends TupleScheme<RoomMemberInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RoomMemberInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPrepareStatus()) {
        optionals.set(0);
      }
      if (struct.isSetModelId()) {
        optionals.set(1);
      }
      if (struct.isSetBodyAdjVal()) {
        optionals.set(2);
      }
      if (struct.isSetAvatarInfos()) {
        optionals.set(3);
      }
      if (struct.isSetRelation()) {
        optionals.set(4);
      }
      if (struct.isSetStature()) {
        optionals.set(5);
      }
      if (struct.isSetSeatId()) {
        optionals.set(6);
      }
      if (struct.isSetPlayerBaseInfo()) {
        optionals.set(7);
      }
      if (struct.isSetSkinColor()) {
        optionals.set(8);
      }
      if (struct.isSetTheOneCharId()) {
        optionals.set(9);
      }
      if (struct.isSetPutOnBadges()) {
        optionals.set(10);
      }
      if (struct.isSetPositionX()) {
        optionals.set(11);
      }
      if (struct.isSetPositionY()) {
        optionals.set(12);
      }
      if (struct.isSetPositionZ()) {
        optionals.set(13);
      }
      if (struct.isSetDanceFashionIds()) {
        optionals.set(14);
      }
      if (struct.isSetTargetGroundStatus()) {
        optionals.set(15);
      }
      if (struct.isSetActionStatus()) {
        optionals.set(16);
      }
      if (struct.isSetObjId()) {
        optionals.set(17);
      }
      if (struct.isSetObjParam()) {
        optionals.set(18);
      }
      if (struct.isSetMusicLoadProcess()) {
        optionals.set(19);
      }
      if (struct.isSetIsReady()) {
        optionals.set(20);
      }
      oprot.writeBitSet(optionals, 21);
      if (struct.isSetPrepareStatus()) {
        oprot.writeByte(struct.prepareStatus);
      }
      if (struct.isSetModelId()) {
        oprot.writeI16(struct.modelId);
      }
      if (struct.isSetBodyAdjVal()) {
        oprot.writeByte(struct.bodyAdjVal);
      }
      if (struct.isSetAvatarInfos()) {
        {
          oprot.writeI32(struct.avatarInfos.size());
          for (AvatarInfo _iter269 : struct.avatarInfos)
          {
            _iter269.write(oprot);
          }
        }
      }
      if (struct.isSetRelation()) {
        oprot.writeByte(struct.relation);
      }
      if (struct.isSetStature()) {
        oprot.writeByte(struct.stature);
      }
      if (struct.isSetSeatId()) {
        oprot.writeI16(struct.seatId);
      }
      if (struct.isSetPlayerBaseInfo()) {
        struct.playerBaseInfo.write(oprot);
      }
      if (struct.isSetSkinColor()) {
        oprot.writeI32(struct.skinColor);
      }
      if (struct.isSetTheOneCharId()) {
        oprot.writeI64(struct.theOneCharId);
      }
      if (struct.isSetPutOnBadges()) {
        {
          oprot.writeI32(struct.putOnBadges.size());
          for (BadgeInfo _iter270 : struct.putOnBadges)
          {
            _iter270.write(oprot);
          }
        }
      }
      if (struct.isSetPositionX()) {
        oprot.writeDouble(struct.positionX);
      }
      if (struct.isSetPositionY()) {
        oprot.writeDouble(struct.positionY);
      }
      if (struct.isSetPositionZ()) {
        oprot.writeDouble(struct.positionZ);
      }
      if (struct.isSetDanceFashionIds()) {
        {
          oprot.writeI32(struct.danceFashionIds.size());
          for (Map.Entry<Byte, Integer> _iter271 : struct.danceFashionIds.entrySet())
          {
            oprot.writeByte(_iter271.getKey());
            oprot.writeI32(_iter271.getValue());
          }
        }
      }
      if (struct.isSetTargetGroundStatus()) {
        oprot.writeByte(struct.targetGroundStatus);
      }
      if (struct.isSetActionStatus()) {
        oprot.writeByte(struct.actionStatus);
      }
      if (struct.isSetObjId()) {
        oprot.writeI32(struct.objId);
      }
      if (struct.isSetObjParam()) {
        oprot.writeI32(struct.objParam);
      }
      if (struct.isSetMusicLoadProcess()) {
        oprot.writeByte(struct.musicLoadProcess);
      }
      if (struct.isSetIsReady()) {
        oprot.writeBool(struct.isReady);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RoomMemberInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(21);
      if (incoming.get(0)) {
        struct.prepareStatus = iprot.readByte();
        struct.setPrepareStatusIsSet(true);
      }
      if (incoming.get(1)) {
        struct.modelId = iprot.readI16();
        struct.setModelIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.bodyAdjVal = iprot.readByte();
        struct.setBodyAdjValIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list272 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.avatarInfos = new ArrayList<AvatarInfo>(_list272.size);
          for (int _i273 = 0; _i273 < _list272.size; ++_i273)
          {
            AvatarInfo _elem274; // required
            _elem274 = new AvatarInfo();
            _elem274.read(iprot);
            struct.avatarInfos.add(_elem274);
          }
        }
        struct.setAvatarInfosIsSet(true);
      }
      if (incoming.get(4)) {
        struct.relation = iprot.readByte();
        struct.setRelationIsSet(true);
      }
      if (incoming.get(5)) {
        struct.stature = iprot.readByte();
        struct.setStatureIsSet(true);
      }
      if (incoming.get(6)) {
        struct.seatId = iprot.readI16();
        struct.setSeatIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.playerBaseInfo = new PlayerBaseInfo();
        struct.playerBaseInfo.read(iprot);
        struct.setPlayerBaseInfoIsSet(true);
      }
      if (incoming.get(8)) {
        struct.skinColor = iprot.readI32();
        struct.setSkinColorIsSet(true);
      }
      if (incoming.get(9)) {
        struct.theOneCharId = iprot.readI64();
        struct.setTheOneCharIdIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list275 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.putOnBadges = new ArrayList<BadgeInfo>(_list275.size);
          for (int _i276 = 0; _i276 < _list275.size; ++_i276)
          {
            BadgeInfo _elem277; // required
            _elem277 = new BadgeInfo();
            _elem277.read(iprot);
            struct.putOnBadges.add(_elem277);
          }
        }
        struct.setPutOnBadgesIsSet(true);
      }
      if (incoming.get(11)) {
        struct.positionX = iprot.readDouble();
        struct.setPositionXIsSet(true);
      }
      if (incoming.get(12)) {
        struct.positionY = iprot.readDouble();
        struct.setPositionYIsSet(true);
      }
      if (incoming.get(13)) {
        struct.positionZ = iprot.readDouble();
        struct.setPositionZIsSet(true);
      }
      if (incoming.get(14)) {
        {
          org.apache.thrift.protocol.TMap _map278 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.BYTE, org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.danceFashionIds = new HashMap<Byte,Integer>(2*_map278.size);
          for (int _i279 = 0; _i279 < _map278.size; ++_i279)
          {
            byte _key280; // required
            int _val281; // required
            _key280 = iprot.readByte();
            _val281 = iprot.readI32();
            struct.danceFashionIds.put(_key280, _val281);
          }
        }
        struct.setDanceFashionIdsIsSet(true);
      }
      if (incoming.get(15)) {
        struct.targetGroundStatus = iprot.readByte();
        struct.setTargetGroundStatusIsSet(true);
      }
      if (incoming.get(16)) {
        struct.actionStatus = iprot.readByte();
        struct.setActionStatusIsSet(true);
      }
      if (incoming.get(17)) {
        struct.objId = iprot.readI32();
        struct.setObjIdIsSet(true);
      }
      if (incoming.get(18)) {
        struct.objParam = iprot.readI32();
        struct.setObjParamIsSet(true);
      }
      if (incoming.get(19)) {
        struct.musicLoadProcess = iprot.readByte();
        struct.setMusicLoadProcessIsSet(true);
      }
      if (incoming.get(20)) {
        struct.isReady = iprot.readBool();
        struct.setIsReadyIsSet(true);
      }
    }
  }

}

