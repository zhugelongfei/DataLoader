/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 巡演关卡详细信息
 */
public class SCTourRaidDetailMsg implements org.apache.thrift.TBase<SCTourRaidDetailMsg, SCTourRaidDetailMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCTourRaidDetailMsg");

  private static final org.apache.thrift.protocol.TField CHAPTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("chapterId", org.apache.thrift.protocol.TType.I16, (short)1);
  private static final org.apache.thrift.protocol.TField RAID_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("raidId", org.apache.thrift.protocol.TType.I16, (short)2);
  private static final org.apache.thrift.protocol.TField MUSIC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("musicId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField ONE_SPASS_CONDS_FIELD_DESC = new org.apache.thrift.protocol.TField("oneSPassConds", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField TWO_SPASS_CONDS_FIELD_DESC = new org.apache.thrift.protocol.TField("twoSPassConds", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField THREE_SPASS_CONDS_FIELD_DESC = new org.apache.thrift.protocol.TField("threeSPassConds", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField EXTRA_PASS_CONDS_FIELD_DESC = new org.apache.thrift.protocol.TField("extraPassConds", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField PRIZE_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("prizeInfos", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField EXTRA_PRIZE_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("extraPrizeInfos", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField CANT_PLAY_TIP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cantPlayTipId", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField CANT_PLAY_TIP_ARGVS_FIELD_DESC = new org.apache.thrift.protocol.TField("cantPlayTipArgvs", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField ALL_PASS_TIP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("allPassTipId", org.apache.thrift.protocol.TType.I32, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCTourRaidDetailMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCTourRaidDetailMsgTupleSchemeFactory());
  }

  /**
   * 章节id
   */
  public short chapterId; // required
  /**
   * 关卡id
   */
  public short raidId; // required
  /**
   * 音乐id
   */
  public int musicId; // required
  /**
   * 1s普通通关条件信息
   */
  public List<com.ling9527.music.common.msg.auto.PassCond> oneSPassConds; // required
  /**
   * 2s普通通关条件信息
   */
  public List<com.ling9527.music.common.msg.auto.PassCond> twoSPassConds; // required
  /**
   * 3s普通通关条件信息
   */
  public List<com.ling9527.music.common.msg.auto.PassCond> threeSPassConds; // required
  /**
   * 额外通关条件信息
   */
  public List<com.ling9527.music.common.msg.auto.PassCond> extraPassConds; // required
  /**
   * 通关奖励
   */
  public com.ling9527.music.common.msg.auto.PrizeInfo prizeInfos; // optional
  /**
   * 额外奖励
   */
  public com.ling9527.music.common.msg.auto.PrizeInfo extraPrizeInfos; // optional
  /**
   * 不能进行的提示id
   */
  public int cantPlayTipId; // optional
  /**
   * 不能进行的提示参数
   */
  public List<String> cantPlayTipArgvs; // optional
  /**
   * 3s通关， 不能进行关卡提示
   */
  public int allPassTipId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 章节id
     */
    CHAPTER_ID((short)1, "chapterId"),
    /**
     * 关卡id
     */
    RAID_ID((short)2, "raidId"),
    /**
     * 音乐id
     */
    MUSIC_ID((short)3, "musicId"),
    /**
     * 1s普通通关条件信息
     */
    ONE_SPASS_CONDS((short)4, "oneSPassConds"),
    /**
     * 2s普通通关条件信息
     */
    TWO_SPASS_CONDS((short)5, "twoSPassConds"),
    /**
     * 3s普通通关条件信息
     */
    THREE_SPASS_CONDS((short)6, "threeSPassConds"),
    /**
     * 额外通关条件信息
     */
    EXTRA_PASS_CONDS((short)7, "extraPassConds"),
    /**
     * 通关奖励
     */
    PRIZE_INFOS((short)8, "prizeInfos"),
    /**
     * 额外奖励
     */
    EXTRA_PRIZE_INFOS((short)9, "extraPrizeInfos"),
    /**
     * 不能进行的提示id
     */
    CANT_PLAY_TIP_ID((short)10, "cantPlayTipId"),
    /**
     * 不能进行的提示参数
     */
    CANT_PLAY_TIP_ARGVS((short)11, "cantPlayTipArgvs"),
    /**
     * 3s通关， 不能进行关卡提示
     */
    ALL_PASS_TIP_ID((short)12, "allPassTipId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CHAPTER_ID
          return CHAPTER_ID;
        case 2: // RAID_ID
          return RAID_ID;
        case 3: // MUSIC_ID
          return MUSIC_ID;
        case 4: // ONE_SPASS_CONDS
          return ONE_SPASS_CONDS;
        case 5: // TWO_SPASS_CONDS
          return TWO_SPASS_CONDS;
        case 6: // THREE_SPASS_CONDS
          return THREE_SPASS_CONDS;
        case 7: // EXTRA_PASS_CONDS
          return EXTRA_PASS_CONDS;
        case 8: // PRIZE_INFOS
          return PRIZE_INFOS;
        case 9: // EXTRA_PRIZE_INFOS
          return EXTRA_PRIZE_INFOS;
        case 10: // CANT_PLAY_TIP_ID
          return CANT_PLAY_TIP_ID;
        case 11: // CANT_PLAY_TIP_ARGVS
          return CANT_PLAY_TIP_ARGVS;
        case 12: // ALL_PASS_TIP_ID
          return ALL_PASS_TIP_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CHAPTERID_ISSET_ID = 0;
  private static final int __RAIDID_ISSET_ID = 1;
  private static final int __MUSICID_ISSET_ID = 2;
  private static final int __CANTPLAYTIPID_ISSET_ID = 3;
  private static final int __ALLPASSTIPID_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.PRIZE_INFOS,_Fields.EXTRA_PRIZE_INFOS,_Fields.CANT_PLAY_TIP_ID,_Fields.CANT_PLAY_TIP_ARGVS,_Fields.ALL_PASS_TIP_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CHAPTER_ID, new org.apache.thrift.meta_data.FieldMetaData("chapterId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.RAID_ID, new org.apache.thrift.meta_data.FieldMetaData("raidId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.MUSIC_ID, new org.apache.thrift.meta_data.FieldMetaData("musicId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ONE_SPASS_CONDS, new org.apache.thrift.meta_data.FieldMetaData("oneSPassConds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.PassCond.class))));
    tmpMap.put(_Fields.TWO_SPASS_CONDS, new org.apache.thrift.meta_data.FieldMetaData("twoSPassConds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.PassCond.class))));
    tmpMap.put(_Fields.THREE_SPASS_CONDS, new org.apache.thrift.meta_data.FieldMetaData("threeSPassConds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.PassCond.class))));
    tmpMap.put(_Fields.EXTRA_PASS_CONDS, new org.apache.thrift.meta_data.FieldMetaData("extraPassConds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.PassCond.class))));
    tmpMap.put(_Fields.PRIZE_INFOS, new org.apache.thrift.meta_data.FieldMetaData("prizeInfos", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.PrizeInfo.class)));
    tmpMap.put(_Fields.EXTRA_PRIZE_INFOS, new org.apache.thrift.meta_data.FieldMetaData("extraPrizeInfos", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.PrizeInfo.class)));
    tmpMap.put(_Fields.CANT_PLAY_TIP_ID, new org.apache.thrift.meta_data.FieldMetaData("cantPlayTipId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CANT_PLAY_TIP_ARGVS, new org.apache.thrift.meta_data.FieldMetaData("cantPlayTipArgvs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.ALL_PASS_TIP_ID, new org.apache.thrift.meta_data.FieldMetaData("allPassTipId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCTourRaidDetailMsg.class, metaDataMap);
  }

  public SCTourRaidDetailMsg() {
  }

  public SCTourRaidDetailMsg(
    short chapterId,
    short raidId,
    int musicId,
    List<com.ling9527.music.common.msg.auto.PassCond> oneSPassConds,
    List<com.ling9527.music.common.msg.auto.PassCond> twoSPassConds,
    List<com.ling9527.music.common.msg.auto.PassCond> threeSPassConds,
    List<com.ling9527.music.common.msg.auto.PassCond> extraPassConds)
  {
    this();
    this.chapterId = chapterId;
    setChapterIdIsSet(true);
    this.raidId = raidId;
    setRaidIdIsSet(true);
    this.musicId = musicId;
    setMusicIdIsSet(true);
    this.oneSPassConds = oneSPassConds;
    this.twoSPassConds = twoSPassConds;
    this.threeSPassConds = threeSPassConds;
    this.extraPassConds = extraPassConds;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCTourRaidDetailMsg(SCTourRaidDetailMsg other) {
    __isset_bitfield = other.__isset_bitfield;
    this.chapterId = other.chapterId;
    this.raidId = other.raidId;
    this.musicId = other.musicId;
    if (other.isSetOneSPassConds()) {
      List<com.ling9527.music.common.msg.auto.PassCond> __this__oneSPassConds = new ArrayList<com.ling9527.music.common.msg.auto.PassCond>();
      for (com.ling9527.music.common.msg.auto.PassCond other_element : other.oneSPassConds) {
        __this__oneSPassConds.add(new com.ling9527.music.common.msg.auto.PassCond(other_element));
      }
      this.oneSPassConds = __this__oneSPassConds;
    }
    if (other.isSetTwoSPassConds()) {
      List<com.ling9527.music.common.msg.auto.PassCond> __this__twoSPassConds = new ArrayList<com.ling9527.music.common.msg.auto.PassCond>();
      for (com.ling9527.music.common.msg.auto.PassCond other_element : other.twoSPassConds) {
        __this__twoSPassConds.add(new com.ling9527.music.common.msg.auto.PassCond(other_element));
      }
      this.twoSPassConds = __this__twoSPassConds;
    }
    if (other.isSetThreeSPassConds()) {
      List<com.ling9527.music.common.msg.auto.PassCond> __this__threeSPassConds = new ArrayList<com.ling9527.music.common.msg.auto.PassCond>();
      for (com.ling9527.music.common.msg.auto.PassCond other_element : other.threeSPassConds) {
        __this__threeSPassConds.add(new com.ling9527.music.common.msg.auto.PassCond(other_element));
      }
      this.threeSPassConds = __this__threeSPassConds;
    }
    if (other.isSetExtraPassConds()) {
      List<com.ling9527.music.common.msg.auto.PassCond> __this__extraPassConds = new ArrayList<com.ling9527.music.common.msg.auto.PassCond>();
      for (com.ling9527.music.common.msg.auto.PassCond other_element : other.extraPassConds) {
        __this__extraPassConds.add(new com.ling9527.music.common.msg.auto.PassCond(other_element));
      }
      this.extraPassConds = __this__extraPassConds;
    }
    if (other.isSetPrizeInfos()) {
      this.prizeInfos = new com.ling9527.music.common.msg.auto.PrizeInfo(other.prizeInfos);
    }
    if (other.isSetExtraPrizeInfos()) {
      this.extraPrizeInfos = new com.ling9527.music.common.msg.auto.PrizeInfo(other.extraPrizeInfos);
    }
    this.cantPlayTipId = other.cantPlayTipId;
    if (other.isSetCantPlayTipArgvs()) {
      List<String> __this__cantPlayTipArgvs = new ArrayList<String>();
      for (String other_element : other.cantPlayTipArgvs) {
        __this__cantPlayTipArgvs.add(other_element);
      }
      this.cantPlayTipArgvs = __this__cantPlayTipArgvs;
    }
    this.allPassTipId = other.allPassTipId;
  }

  public SCTourRaidDetailMsg deepCopy() {
    return new SCTourRaidDetailMsg(this);
  }

  @Override
  public void clear() {
    setChapterIdIsSet(false);
    this.chapterId = 0;
    setRaidIdIsSet(false);
    this.raidId = 0;
    setMusicIdIsSet(false);
    this.musicId = 0;
    this.oneSPassConds = null;
    this.twoSPassConds = null;
    this.threeSPassConds = null;
    this.extraPassConds = null;
    this.prizeInfos = null;
    this.extraPrizeInfos = null;
    setCantPlayTipIdIsSet(false);
    this.cantPlayTipId = 0;
    this.cantPlayTipArgvs = null;
    setAllPassTipIdIsSet(false);
    this.allPassTipId = 0;
  }

  /**
   * 章节id
   */
  public short getChapterId() {
    return this.chapterId;
  }

  /**
   * 章节id
   */
  public SCTourRaidDetailMsg setChapterId(short chapterId) {
    this.chapterId = chapterId;
    setChapterIdIsSet(true);
    return this;
  }

  public void unsetChapterId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHAPTERID_ISSET_ID);
  }

  /** Returns true if field chapterId is set (has been assigned a value) and false otherwise */
  public boolean isSetChapterId() {
    return EncodingUtils.testBit(__isset_bitfield, __CHAPTERID_ISSET_ID);
  }

  public void setChapterIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHAPTERID_ISSET_ID, value);
  }

  /**
   * 关卡id
   */
  public short getRaidId() {
    return this.raidId;
  }

  /**
   * 关卡id
   */
  public SCTourRaidDetailMsg setRaidId(short raidId) {
    this.raidId = raidId;
    setRaidIdIsSet(true);
    return this;
  }

  public void unsetRaidId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RAIDID_ISSET_ID);
  }

  /** Returns true if field raidId is set (has been assigned a value) and false otherwise */
  public boolean isSetRaidId() {
    return EncodingUtils.testBit(__isset_bitfield, __RAIDID_ISSET_ID);
  }

  public void setRaidIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RAIDID_ISSET_ID, value);
  }

  /**
   * 音乐id
   */
  public int getMusicId() {
    return this.musicId;
  }

  /**
   * 音乐id
   */
  public SCTourRaidDetailMsg setMusicId(int musicId) {
    this.musicId = musicId;
    setMusicIdIsSet(true);
    return this;
  }

  public void unsetMusicId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MUSICID_ISSET_ID);
  }

  /** Returns true if field musicId is set (has been assigned a value) and false otherwise */
  public boolean isSetMusicId() {
    return EncodingUtils.testBit(__isset_bitfield, __MUSICID_ISSET_ID);
  }

  public void setMusicIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MUSICID_ISSET_ID, value);
  }

  public int getOneSPassCondsSize() {
    return (this.oneSPassConds == null) ? 0 : this.oneSPassConds.size();
  }

  public java.util.Iterator<com.ling9527.music.common.msg.auto.PassCond> getOneSPassCondsIterator() {
    return (this.oneSPassConds == null) ? null : this.oneSPassConds.iterator();
  }

  public void addToOneSPassConds(com.ling9527.music.common.msg.auto.PassCond elem) {
    if (this.oneSPassConds == null) {
      this.oneSPassConds = new ArrayList<com.ling9527.music.common.msg.auto.PassCond>();
    }
    this.oneSPassConds.add(elem);
  }

  /**
   * 1s普通通关条件信息
   */
  public List<com.ling9527.music.common.msg.auto.PassCond> getOneSPassConds() {
    return this.oneSPassConds;
  }

  /**
   * 1s普通通关条件信息
   */
  public SCTourRaidDetailMsg setOneSPassConds(List<com.ling9527.music.common.msg.auto.PassCond> oneSPassConds) {
    this.oneSPassConds = oneSPassConds;
    return this;
  }

  public void unsetOneSPassConds() {
    this.oneSPassConds = null;
  }

  /** Returns true if field oneSPassConds is set (has been assigned a value) and false otherwise */
  public boolean isSetOneSPassConds() {
    return this.oneSPassConds != null;
  }

  public void setOneSPassCondsIsSet(boolean value) {
    if (!value) {
      this.oneSPassConds = null;
    }
  }

  public int getTwoSPassCondsSize() {
    return (this.twoSPassConds == null) ? 0 : this.twoSPassConds.size();
  }

  public java.util.Iterator<com.ling9527.music.common.msg.auto.PassCond> getTwoSPassCondsIterator() {
    return (this.twoSPassConds == null) ? null : this.twoSPassConds.iterator();
  }

  public void addToTwoSPassConds(com.ling9527.music.common.msg.auto.PassCond elem) {
    if (this.twoSPassConds == null) {
      this.twoSPassConds = new ArrayList<com.ling9527.music.common.msg.auto.PassCond>();
    }
    this.twoSPassConds.add(elem);
  }

  /**
   * 2s普通通关条件信息
   */
  public List<com.ling9527.music.common.msg.auto.PassCond> getTwoSPassConds() {
    return this.twoSPassConds;
  }

  /**
   * 2s普通通关条件信息
   */
  public SCTourRaidDetailMsg setTwoSPassConds(List<com.ling9527.music.common.msg.auto.PassCond> twoSPassConds) {
    this.twoSPassConds = twoSPassConds;
    return this;
  }

  public void unsetTwoSPassConds() {
    this.twoSPassConds = null;
  }

  /** Returns true if field twoSPassConds is set (has been assigned a value) and false otherwise */
  public boolean isSetTwoSPassConds() {
    return this.twoSPassConds != null;
  }

  public void setTwoSPassCondsIsSet(boolean value) {
    if (!value) {
      this.twoSPassConds = null;
    }
  }

  public int getThreeSPassCondsSize() {
    return (this.threeSPassConds == null) ? 0 : this.threeSPassConds.size();
  }

  public java.util.Iterator<com.ling9527.music.common.msg.auto.PassCond> getThreeSPassCondsIterator() {
    return (this.threeSPassConds == null) ? null : this.threeSPassConds.iterator();
  }

  public void addToThreeSPassConds(com.ling9527.music.common.msg.auto.PassCond elem) {
    if (this.threeSPassConds == null) {
      this.threeSPassConds = new ArrayList<com.ling9527.music.common.msg.auto.PassCond>();
    }
    this.threeSPassConds.add(elem);
  }

  /**
   * 3s普通通关条件信息
   */
  public List<com.ling9527.music.common.msg.auto.PassCond> getThreeSPassConds() {
    return this.threeSPassConds;
  }

  /**
   * 3s普通通关条件信息
   */
  public SCTourRaidDetailMsg setThreeSPassConds(List<com.ling9527.music.common.msg.auto.PassCond> threeSPassConds) {
    this.threeSPassConds = threeSPassConds;
    return this;
  }

  public void unsetThreeSPassConds() {
    this.threeSPassConds = null;
  }

  /** Returns true if field threeSPassConds is set (has been assigned a value) and false otherwise */
  public boolean isSetThreeSPassConds() {
    return this.threeSPassConds != null;
  }

  public void setThreeSPassCondsIsSet(boolean value) {
    if (!value) {
      this.threeSPassConds = null;
    }
  }

  public int getExtraPassCondsSize() {
    return (this.extraPassConds == null) ? 0 : this.extraPassConds.size();
  }

  public java.util.Iterator<com.ling9527.music.common.msg.auto.PassCond> getExtraPassCondsIterator() {
    return (this.extraPassConds == null) ? null : this.extraPassConds.iterator();
  }

  public void addToExtraPassConds(com.ling9527.music.common.msg.auto.PassCond elem) {
    if (this.extraPassConds == null) {
      this.extraPassConds = new ArrayList<com.ling9527.music.common.msg.auto.PassCond>();
    }
    this.extraPassConds.add(elem);
  }

  /**
   * 额外通关条件信息
   */
  public List<com.ling9527.music.common.msg.auto.PassCond> getExtraPassConds() {
    return this.extraPassConds;
  }

  /**
   * 额外通关条件信息
   */
  public SCTourRaidDetailMsg setExtraPassConds(List<com.ling9527.music.common.msg.auto.PassCond> extraPassConds) {
    this.extraPassConds = extraPassConds;
    return this;
  }

  public void unsetExtraPassConds() {
    this.extraPassConds = null;
  }

  /** Returns true if field extraPassConds is set (has been assigned a value) and false otherwise */
  public boolean isSetExtraPassConds() {
    return this.extraPassConds != null;
  }

  public void setExtraPassCondsIsSet(boolean value) {
    if (!value) {
      this.extraPassConds = null;
    }
  }

  /**
   * 通关奖励
   */
  public com.ling9527.music.common.msg.auto.PrizeInfo getPrizeInfos() {
    return this.prizeInfos;
  }

  /**
   * 通关奖励
   */
  public SCTourRaidDetailMsg setPrizeInfos(com.ling9527.music.common.msg.auto.PrizeInfo prizeInfos) {
    this.prizeInfos = prizeInfos;
    return this;
  }

  public void unsetPrizeInfos() {
    this.prizeInfos = null;
  }

  /** Returns true if field prizeInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetPrizeInfos() {
    return this.prizeInfos != null;
  }

  public void setPrizeInfosIsSet(boolean value) {
    if (!value) {
      this.prizeInfos = null;
    }
  }

  /**
   * 额外奖励
   */
  public com.ling9527.music.common.msg.auto.PrizeInfo getExtraPrizeInfos() {
    return this.extraPrizeInfos;
  }

  /**
   * 额外奖励
   */
  public SCTourRaidDetailMsg setExtraPrizeInfos(com.ling9527.music.common.msg.auto.PrizeInfo extraPrizeInfos) {
    this.extraPrizeInfos = extraPrizeInfos;
    return this;
  }

  public void unsetExtraPrizeInfos() {
    this.extraPrizeInfos = null;
  }

  /** Returns true if field extraPrizeInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetExtraPrizeInfos() {
    return this.extraPrizeInfos != null;
  }

  public void setExtraPrizeInfosIsSet(boolean value) {
    if (!value) {
      this.extraPrizeInfos = null;
    }
  }

  /**
   * 不能进行的提示id
   */
  public int getCantPlayTipId() {
    return this.cantPlayTipId;
  }

  /**
   * 不能进行的提示id
   */
  public SCTourRaidDetailMsg setCantPlayTipId(int cantPlayTipId) {
    this.cantPlayTipId = cantPlayTipId;
    setCantPlayTipIdIsSet(true);
    return this;
  }

  public void unsetCantPlayTipId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CANTPLAYTIPID_ISSET_ID);
  }

  /** Returns true if field cantPlayTipId is set (has been assigned a value) and false otherwise */
  public boolean isSetCantPlayTipId() {
    return EncodingUtils.testBit(__isset_bitfield, __CANTPLAYTIPID_ISSET_ID);
  }

  public void setCantPlayTipIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CANTPLAYTIPID_ISSET_ID, value);
  }

  public int getCantPlayTipArgvsSize() {
    return (this.cantPlayTipArgvs == null) ? 0 : this.cantPlayTipArgvs.size();
  }

  public java.util.Iterator<String> getCantPlayTipArgvsIterator() {
    return (this.cantPlayTipArgvs == null) ? null : this.cantPlayTipArgvs.iterator();
  }

  public void addToCantPlayTipArgvs(String elem) {
    if (this.cantPlayTipArgvs == null) {
      this.cantPlayTipArgvs = new ArrayList<String>();
    }
    this.cantPlayTipArgvs.add(elem);
  }

  /**
   * 不能进行的提示参数
   */
  public List<String> getCantPlayTipArgvs() {
    return this.cantPlayTipArgvs;
  }

  /**
   * 不能进行的提示参数
   */
  public SCTourRaidDetailMsg setCantPlayTipArgvs(List<String> cantPlayTipArgvs) {
    this.cantPlayTipArgvs = cantPlayTipArgvs;
    return this;
  }

  public void unsetCantPlayTipArgvs() {
    this.cantPlayTipArgvs = null;
  }

  /** Returns true if field cantPlayTipArgvs is set (has been assigned a value) and false otherwise */
  public boolean isSetCantPlayTipArgvs() {
    return this.cantPlayTipArgvs != null;
  }

  public void setCantPlayTipArgvsIsSet(boolean value) {
    if (!value) {
      this.cantPlayTipArgvs = null;
    }
  }

  /**
   * 3s通关， 不能进行关卡提示
   */
  public int getAllPassTipId() {
    return this.allPassTipId;
  }

  /**
   * 3s通关， 不能进行关卡提示
   */
  public SCTourRaidDetailMsg setAllPassTipId(int allPassTipId) {
    this.allPassTipId = allPassTipId;
    setAllPassTipIdIsSet(true);
    return this;
  }

  public void unsetAllPassTipId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALLPASSTIPID_ISSET_ID);
  }

  /** Returns true if field allPassTipId is set (has been assigned a value) and false otherwise */
  public boolean isSetAllPassTipId() {
    return EncodingUtils.testBit(__isset_bitfield, __ALLPASSTIPID_ISSET_ID);
  }

  public void setAllPassTipIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALLPASSTIPID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CHAPTER_ID:
      if (value == null) {
        unsetChapterId();
      } else {
        setChapterId((Short)value);
      }
      break;

    case RAID_ID:
      if (value == null) {
        unsetRaidId();
      } else {
        setRaidId((Short)value);
      }
      break;

    case MUSIC_ID:
      if (value == null) {
        unsetMusicId();
      } else {
        setMusicId((Integer)value);
      }
      break;

    case ONE_SPASS_CONDS:
      if (value == null) {
        unsetOneSPassConds();
      } else {
        setOneSPassConds((List<com.ling9527.music.common.msg.auto.PassCond>)value);
      }
      break;

    case TWO_SPASS_CONDS:
      if (value == null) {
        unsetTwoSPassConds();
      } else {
        setTwoSPassConds((List<com.ling9527.music.common.msg.auto.PassCond>)value);
      }
      break;

    case THREE_SPASS_CONDS:
      if (value == null) {
        unsetThreeSPassConds();
      } else {
        setThreeSPassConds((List<com.ling9527.music.common.msg.auto.PassCond>)value);
      }
      break;

    case EXTRA_PASS_CONDS:
      if (value == null) {
        unsetExtraPassConds();
      } else {
        setExtraPassConds((List<com.ling9527.music.common.msg.auto.PassCond>)value);
      }
      break;

    case PRIZE_INFOS:
      if (value == null) {
        unsetPrizeInfos();
      } else {
        setPrizeInfos((com.ling9527.music.common.msg.auto.PrizeInfo)value);
      }
      break;

    case EXTRA_PRIZE_INFOS:
      if (value == null) {
        unsetExtraPrizeInfos();
      } else {
        setExtraPrizeInfos((com.ling9527.music.common.msg.auto.PrizeInfo)value);
      }
      break;

    case CANT_PLAY_TIP_ID:
      if (value == null) {
        unsetCantPlayTipId();
      } else {
        setCantPlayTipId((Integer)value);
      }
      break;

    case CANT_PLAY_TIP_ARGVS:
      if (value == null) {
        unsetCantPlayTipArgvs();
      } else {
        setCantPlayTipArgvs((List<String>)value);
      }
      break;

    case ALL_PASS_TIP_ID:
      if (value == null) {
        unsetAllPassTipId();
      } else {
        setAllPassTipId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CHAPTER_ID:
      return Short.valueOf(getChapterId());

    case RAID_ID:
      return Short.valueOf(getRaidId());

    case MUSIC_ID:
      return Integer.valueOf(getMusicId());

    case ONE_SPASS_CONDS:
      return getOneSPassConds();

    case TWO_SPASS_CONDS:
      return getTwoSPassConds();

    case THREE_SPASS_CONDS:
      return getThreeSPassConds();

    case EXTRA_PASS_CONDS:
      return getExtraPassConds();

    case PRIZE_INFOS:
      return getPrizeInfos();

    case EXTRA_PRIZE_INFOS:
      return getExtraPrizeInfos();

    case CANT_PLAY_TIP_ID:
      return Integer.valueOf(getCantPlayTipId());

    case CANT_PLAY_TIP_ARGVS:
      return getCantPlayTipArgvs();

    case ALL_PASS_TIP_ID:
      return Integer.valueOf(getAllPassTipId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CHAPTER_ID:
      return isSetChapterId();
    case RAID_ID:
      return isSetRaidId();
    case MUSIC_ID:
      return isSetMusicId();
    case ONE_SPASS_CONDS:
      return isSetOneSPassConds();
    case TWO_SPASS_CONDS:
      return isSetTwoSPassConds();
    case THREE_SPASS_CONDS:
      return isSetThreeSPassConds();
    case EXTRA_PASS_CONDS:
      return isSetExtraPassConds();
    case PRIZE_INFOS:
      return isSetPrizeInfos();
    case EXTRA_PRIZE_INFOS:
      return isSetExtraPrizeInfos();
    case CANT_PLAY_TIP_ID:
      return isSetCantPlayTipId();
    case CANT_PLAY_TIP_ARGVS:
      return isSetCantPlayTipArgvs();
    case ALL_PASS_TIP_ID:
      return isSetAllPassTipId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCTourRaidDetailMsg)
      return this.equals((SCTourRaidDetailMsg)that);
    return false;
  }

  public boolean equals(SCTourRaidDetailMsg that) {
    if (that == null)
      return false;

    boolean this_present_chapterId = true;
    boolean that_present_chapterId = true;
    if (this_present_chapterId || that_present_chapterId) {
      if (!(this_present_chapterId && that_present_chapterId))
        return false;
      if (this.chapterId != that.chapterId)
        return false;
    }

    boolean this_present_raidId = true;
    boolean that_present_raidId = true;
    if (this_present_raidId || that_present_raidId) {
      if (!(this_present_raidId && that_present_raidId))
        return false;
      if (this.raidId != that.raidId)
        return false;
    }

    boolean this_present_musicId = true;
    boolean that_present_musicId = true;
    if (this_present_musicId || that_present_musicId) {
      if (!(this_present_musicId && that_present_musicId))
        return false;
      if (this.musicId != that.musicId)
        return false;
    }

    boolean this_present_oneSPassConds = true && this.isSetOneSPassConds();
    boolean that_present_oneSPassConds = true && that.isSetOneSPassConds();
    if (this_present_oneSPassConds || that_present_oneSPassConds) {
      if (!(this_present_oneSPassConds && that_present_oneSPassConds))
        return false;
      if (!this.oneSPassConds.equals(that.oneSPassConds))
        return false;
    }

    boolean this_present_twoSPassConds = true && this.isSetTwoSPassConds();
    boolean that_present_twoSPassConds = true && that.isSetTwoSPassConds();
    if (this_present_twoSPassConds || that_present_twoSPassConds) {
      if (!(this_present_twoSPassConds && that_present_twoSPassConds))
        return false;
      if (!this.twoSPassConds.equals(that.twoSPassConds))
        return false;
    }

    boolean this_present_threeSPassConds = true && this.isSetThreeSPassConds();
    boolean that_present_threeSPassConds = true && that.isSetThreeSPassConds();
    if (this_present_threeSPassConds || that_present_threeSPassConds) {
      if (!(this_present_threeSPassConds && that_present_threeSPassConds))
        return false;
      if (!this.threeSPassConds.equals(that.threeSPassConds))
        return false;
    }

    boolean this_present_extraPassConds = true && this.isSetExtraPassConds();
    boolean that_present_extraPassConds = true && that.isSetExtraPassConds();
    if (this_present_extraPassConds || that_present_extraPassConds) {
      if (!(this_present_extraPassConds && that_present_extraPassConds))
        return false;
      if (!this.extraPassConds.equals(that.extraPassConds))
        return false;
    }

    boolean this_present_prizeInfos = true && this.isSetPrizeInfos();
    boolean that_present_prizeInfos = true && that.isSetPrizeInfos();
    if (this_present_prizeInfos || that_present_prizeInfos) {
      if (!(this_present_prizeInfos && that_present_prizeInfos))
        return false;
      if (!this.prizeInfos.equals(that.prizeInfos))
        return false;
    }

    boolean this_present_extraPrizeInfos = true && this.isSetExtraPrizeInfos();
    boolean that_present_extraPrizeInfos = true && that.isSetExtraPrizeInfos();
    if (this_present_extraPrizeInfos || that_present_extraPrizeInfos) {
      if (!(this_present_extraPrizeInfos && that_present_extraPrizeInfos))
        return false;
      if (!this.extraPrizeInfos.equals(that.extraPrizeInfos))
        return false;
    }

    boolean this_present_cantPlayTipId = true && this.isSetCantPlayTipId();
    boolean that_present_cantPlayTipId = true && that.isSetCantPlayTipId();
    if (this_present_cantPlayTipId || that_present_cantPlayTipId) {
      if (!(this_present_cantPlayTipId && that_present_cantPlayTipId))
        return false;
      if (this.cantPlayTipId != that.cantPlayTipId)
        return false;
    }

    boolean this_present_cantPlayTipArgvs = true && this.isSetCantPlayTipArgvs();
    boolean that_present_cantPlayTipArgvs = true && that.isSetCantPlayTipArgvs();
    if (this_present_cantPlayTipArgvs || that_present_cantPlayTipArgvs) {
      if (!(this_present_cantPlayTipArgvs && that_present_cantPlayTipArgvs))
        return false;
      if (!this.cantPlayTipArgvs.equals(that.cantPlayTipArgvs))
        return false;
    }

    boolean this_present_allPassTipId = true && this.isSetAllPassTipId();
    boolean that_present_allPassTipId = true && that.isSetAllPassTipId();
    if (this_present_allPassTipId || that_present_allPassTipId) {
      if (!(this_present_allPassTipId && that_present_allPassTipId))
        return false;
      if (this.allPassTipId != that.allPassTipId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCTourRaidDetailMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCTourRaidDetailMsg typedOther = (SCTourRaidDetailMsg)other;

    lastComparison = Boolean.valueOf(isSetChapterId()).compareTo(typedOther.isSetChapterId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChapterId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chapterId, typedOther.chapterId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRaidId()).compareTo(typedOther.isSetRaidId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRaidId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.raidId, typedOther.raidId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMusicId()).compareTo(typedOther.isSetMusicId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMusicId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.musicId, typedOther.musicId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOneSPassConds()).compareTo(typedOther.isSetOneSPassConds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOneSPassConds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oneSPassConds, typedOther.oneSPassConds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTwoSPassConds()).compareTo(typedOther.isSetTwoSPassConds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTwoSPassConds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.twoSPassConds, typedOther.twoSPassConds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThreeSPassConds()).compareTo(typedOther.isSetThreeSPassConds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThreeSPassConds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.threeSPassConds, typedOther.threeSPassConds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtraPassConds()).compareTo(typedOther.isSetExtraPassConds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtraPassConds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extraPassConds, typedOther.extraPassConds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrizeInfos()).compareTo(typedOther.isSetPrizeInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrizeInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prizeInfos, typedOther.prizeInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtraPrizeInfos()).compareTo(typedOther.isSetExtraPrizeInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtraPrizeInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extraPrizeInfos, typedOther.extraPrizeInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCantPlayTipId()).compareTo(typedOther.isSetCantPlayTipId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCantPlayTipId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cantPlayTipId, typedOther.cantPlayTipId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCantPlayTipArgvs()).compareTo(typedOther.isSetCantPlayTipArgvs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCantPlayTipArgvs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cantPlayTipArgvs, typedOther.cantPlayTipArgvs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAllPassTipId()).compareTo(typedOther.isSetAllPassTipId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllPassTipId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allPassTipId, typedOther.allPassTipId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCTourRaidDetailMsg(");
    boolean first = true;

    sb.append("chapterId:");
    sb.append(this.chapterId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("raidId:");
    sb.append(this.raidId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("musicId:");
    sb.append(this.musicId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("oneSPassConds:");
    if (this.oneSPassConds == null) {
      sb.append("null");
    } else {
      sb.append(this.oneSPassConds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("twoSPassConds:");
    if (this.twoSPassConds == null) {
      sb.append("null");
    } else {
      sb.append(this.twoSPassConds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("threeSPassConds:");
    if (this.threeSPassConds == null) {
      sb.append("null");
    } else {
      sb.append(this.threeSPassConds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("extraPassConds:");
    if (this.extraPassConds == null) {
      sb.append("null");
    } else {
      sb.append(this.extraPassConds);
    }
    first = false;
    if (isSetPrizeInfos()) {
      if (!first) sb.append(", ");
      sb.append("prizeInfos:");
      if (this.prizeInfos == null) {
        sb.append("null");
      } else {
        sb.append(this.prizeInfos);
      }
      first = false;
    }
    if (isSetExtraPrizeInfos()) {
      if (!first) sb.append(", ");
      sb.append("extraPrizeInfos:");
      if (this.extraPrizeInfos == null) {
        sb.append("null");
      } else {
        sb.append(this.extraPrizeInfos);
      }
      first = false;
    }
    if (isSetCantPlayTipId()) {
      if (!first) sb.append(", ");
      sb.append("cantPlayTipId:");
      sb.append(this.cantPlayTipId);
      first = false;
    }
    if (isSetCantPlayTipArgvs()) {
      if (!first) sb.append(", ");
      sb.append("cantPlayTipArgvs:");
      if (this.cantPlayTipArgvs == null) {
        sb.append("null");
      } else {
        sb.append(this.cantPlayTipArgvs);
      }
      first = false;
    }
    if (isSetAllPassTipId()) {
      if (!first) sb.append(", ");
      sb.append("allPassTipId:");
      sb.append(this.allPassTipId);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (prizeInfos != null) {
      prizeInfos.validate();
    }
    if (extraPrizeInfos != null) {
      extraPrizeInfos.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCTourRaidDetailMsgStandardSchemeFactory implements SchemeFactory {
    public SCTourRaidDetailMsgStandardScheme getScheme() {
      return new SCTourRaidDetailMsgStandardScheme();
    }
  }

  private static class SCTourRaidDetailMsgStandardScheme extends StandardScheme<SCTourRaidDetailMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCTourRaidDetailMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CHAPTER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.chapterId = iprot.readI16();
              struct.setChapterIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RAID_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.raidId = iprot.readI16();
              struct.setRaidIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MUSIC_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.musicId = iprot.readI32();
              struct.setMusicIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ONE_SPASS_CONDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.oneSPassConds = new ArrayList<com.ling9527.music.common.msg.auto.PassCond>(_list24.size);
                for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                {
                  com.ling9527.music.common.msg.auto.PassCond _elem26; // required
                  _elem26 = new com.ling9527.music.common.msg.auto.PassCond();
                  _elem26.read(iprot);
                  struct.oneSPassConds.add(_elem26);
                }
                iprot.readListEnd();
              }
              struct.setOneSPassCondsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TWO_SPASS_CONDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list27 = iprot.readListBegin();
                struct.twoSPassConds = new ArrayList<com.ling9527.music.common.msg.auto.PassCond>(_list27.size);
                for (int _i28 = 0; _i28 < _list27.size; ++_i28)
                {
                  com.ling9527.music.common.msg.auto.PassCond _elem29; // required
                  _elem29 = new com.ling9527.music.common.msg.auto.PassCond();
                  _elem29.read(iprot);
                  struct.twoSPassConds.add(_elem29);
                }
                iprot.readListEnd();
              }
              struct.setTwoSPassCondsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // THREE_SPASS_CONDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list30 = iprot.readListBegin();
                struct.threeSPassConds = new ArrayList<com.ling9527.music.common.msg.auto.PassCond>(_list30.size);
                for (int _i31 = 0; _i31 < _list30.size; ++_i31)
                {
                  com.ling9527.music.common.msg.auto.PassCond _elem32; // required
                  _elem32 = new com.ling9527.music.common.msg.auto.PassCond();
                  _elem32.read(iprot);
                  struct.threeSPassConds.add(_elem32);
                }
                iprot.readListEnd();
              }
              struct.setThreeSPassCondsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // EXTRA_PASS_CONDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list33 = iprot.readListBegin();
                struct.extraPassConds = new ArrayList<com.ling9527.music.common.msg.auto.PassCond>(_list33.size);
                for (int _i34 = 0; _i34 < _list33.size; ++_i34)
                {
                  com.ling9527.music.common.msg.auto.PassCond _elem35; // required
                  _elem35 = new com.ling9527.music.common.msg.auto.PassCond();
                  _elem35.read(iprot);
                  struct.extraPassConds.add(_elem35);
                }
                iprot.readListEnd();
              }
              struct.setExtraPassCondsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PRIZE_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.prizeInfos = new com.ling9527.music.common.msg.auto.PrizeInfo();
              struct.prizeInfos.read(iprot);
              struct.setPrizeInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // EXTRA_PRIZE_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.extraPrizeInfos = new com.ling9527.music.common.msg.auto.PrizeInfo();
              struct.extraPrizeInfos.read(iprot);
              struct.setExtraPrizeInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CANT_PLAY_TIP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cantPlayTipId = iprot.readI32();
              struct.setCantPlayTipIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CANT_PLAY_TIP_ARGVS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list36 = iprot.readListBegin();
                struct.cantPlayTipArgvs = new ArrayList<String>(_list36.size);
                for (int _i37 = 0; _i37 < _list36.size; ++_i37)
                {
                  String _elem38; // required
                  _elem38 = iprot.readString();
                  struct.cantPlayTipArgvs.add(_elem38);
                }
                iprot.readListEnd();
              }
              struct.setCantPlayTipArgvsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ALL_PASS_TIP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.allPassTipId = iprot.readI32();
              struct.setAllPassTipIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCTourRaidDetailMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CHAPTER_ID_FIELD_DESC);
      oprot.writeI16(struct.chapterId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RAID_ID_FIELD_DESC);
      oprot.writeI16(struct.raidId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MUSIC_ID_FIELD_DESC);
      oprot.writeI32(struct.musicId);
      oprot.writeFieldEnd();
      if (struct.oneSPassConds != null) {
        oprot.writeFieldBegin(ONE_SPASS_CONDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.oneSPassConds.size()));
          for (com.ling9527.music.common.msg.auto.PassCond _iter39 : struct.oneSPassConds)
          {
            _iter39.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.twoSPassConds != null) {
        oprot.writeFieldBegin(TWO_SPASS_CONDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.twoSPassConds.size()));
          for (com.ling9527.music.common.msg.auto.PassCond _iter40 : struct.twoSPassConds)
          {
            _iter40.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.threeSPassConds != null) {
        oprot.writeFieldBegin(THREE_SPASS_CONDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.threeSPassConds.size()));
          for (com.ling9527.music.common.msg.auto.PassCond _iter41 : struct.threeSPassConds)
          {
            _iter41.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.extraPassConds != null) {
        oprot.writeFieldBegin(EXTRA_PASS_CONDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.extraPassConds.size()));
          for (com.ling9527.music.common.msg.auto.PassCond _iter42 : struct.extraPassConds)
          {
            _iter42.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.prizeInfos != null) {
        if (struct.isSetPrizeInfos()) {
          oprot.writeFieldBegin(PRIZE_INFOS_FIELD_DESC);
          struct.prizeInfos.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.extraPrizeInfos != null) {
        if (struct.isSetExtraPrizeInfos()) {
          oprot.writeFieldBegin(EXTRA_PRIZE_INFOS_FIELD_DESC);
          struct.extraPrizeInfos.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCantPlayTipId()) {
        oprot.writeFieldBegin(CANT_PLAY_TIP_ID_FIELD_DESC);
        oprot.writeI32(struct.cantPlayTipId);
        oprot.writeFieldEnd();
      }
      if (struct.cantPlayTipArgvs != null) {
        if (struct.isSetCantPlayTipArgvs()) {
          oprot.writeFieldBegin(CANT_PLAY_TIP_ARGVS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.cantPlayTipArgvs.size()));
            for (String _iter43 : struct.cantPlayTipArgvs)
            {
              oprot.writeString(_iter43);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetAllPassTipId()) {
        oprot.writeFieldBegin(ALL_PASS_TIP_ID_FIELD_DESC);
        oprot.writeI32(struct.allPassTipId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCTourRaidDetailMsgTupleSchemeFactory implements SchemeFactory {
    public SCTourRaidDetailMsgTupleScheme getScheme() {
      return new SCTourRaidDetailMsgTupleScheme();
    }
  }

  private static class SCTourRaidDetailMsgTupleScheme extends TupleScheme<SCTourRaidDetailMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCTourRaidDetailMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetChapterId()) {
        optionals.set(0);
      }
      if (struct.isSetRaidId()) {
        optionals.set(1);
      }
      if (struct.isSetMusicId()) {
        optionals.set(2);
      }
      if (struct.isSetOneSPassConds()) {
        optionals.set(3);
      }
      if (struct.isSetTwoSPassConds()) {
        optionals.set(4);
      }
      if (struct.isSetThreeSPassConds()) {
        optionals.set(5);
      }
      if (struct.isSetExtraPassConds()) {
        optionals.set(6);
      }
      if (struct.isSetPrizeInfos()) {
        optionals.set(7);
      }
      if (struct.isSetExtraPrizeInfos()) {
        optionals.set(8);
      }
      if (struct.isSetCantPlayTipId()) {
        optionals.set(9);
      }
      if (struct.isSetCantPlayTipArgvs()) {
        optionals.set(10);
      }
      if (struct.isSetAllPassTipId()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetChapterId()) {
        oprot.writeI16(struct.chapterId);
      }
      if (struct.isSetRaidId()) {
        oprot.writeI16(struct.raidId);
      }
      if (struct.isSetMusicId()) {
        oprot.writeI32(struct.musicId);
      }
      if (struct.isSetOneSPassConds()) {
        {
          oprot.writeI32(struct.oneSPassConds.size());
          for (com.ling9527.music.common.msg.auto.PassCond _iter44 : struct.oneSPassConds)
          {
            _iter44.write(oprot);
          }
        }
      }
      if (struct.isSetTwoSPassConds()) {
        {
          oprot.writeI32(struct.twoSPassConds.size());
          for (com.ling9527.music.common.msg.auto.PassCond _iter45 : struct.twoSPassConds)
          {
            _iter45.write(oprot);
          }
        }
      }
      if (struct.isSetThreeSPassConds()) {
        {
          oprot.writeI32(struct.threeSPassConds.size());
          for (com.ling9527.music.common.msg.auto.PassCond _iter46 : struct.threeSPassConds)
          {
            _iter46.write(oprot);
          }
        }
      }
      if (struct.isSetExtraPassConds()) {
        {
          oprot.writeI32(struct.extraPassConds.size());
          for (com.ling9527.music.common.msg.auto.PassCond _iter47 : struct.extraPassConds)
          {
            _iter47.write(oprot);
          }
        }
      }
      if (struct.isSetPrizeInfos()) {
        struct.prizeInfos.write(oprot);
      }
      if (struct.isSetExtraPrizeInfos()) {
        struct.extraPrizeInfos.write(oprot);
      }
      if (struct.isSetCantPlayTipId()) {
        oprot.writeI32(struct.cantPlayTipId);
      }
      if (struct.isSetCantPlayTipArgvs()) {
        {
          oprot.writeI32(struct.cantPlayTipArgvs.size());
          for (String _iter48 : struct.cantPlayTipArgvs)
          {
            oprot.writeString(_iter48);
          }
        }
      }
      if (struct.isSetAllPassTipId()) {
        oprot.writeI32(struct.allPassTipId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCTourRaidDetailMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.chapterId = iprot.readI16();
        struct.setChapterIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.raidId = iprot.readI16();
        struct.setRaidIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.musicId = iprot.readI32();
        struct.setMusicIdIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list49 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.oneSPassConds = new ArrayList<com.ling9527.music.common.msg.auto.PassCond>(_list49.size);
          for (int _i50 = 0; _i50 < _list49.size; ++_i50)
          {
            com.ling9527.music.common.msg.auto.PassCond _elem51; // required
            _elem51 = new com.ling9527.music.common.msg.auto.PassCond();
            _elem51.read(iprot);
            struct.oneSPassConds.add(_elem51);
          }
        }
        struct.setOneSPassCondsIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list52 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.twoSPassConds = new ArrayList<com.ling9527.music.common.msg.auto.PassCond>(_list52.size);
          for (int _i53 = 0; _i53 < _list52.size; ++_i53)
          {
            com.ling9527.music.common.msg.auto.PassCond _elem54; // required
            _elem54 = new com.ling9527.music.common.msg.auto.PassCond();
            _elem54.read(iprot);
            struct.twoSPassConds.add(_elem54);
          }
        }
        struct.setTwoSPassCondsIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list55 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.threeSPassConds = new ArrayList<com.ling9527.music.common.msg.auto.PassCond>(_list55.size);
          for (int _i56 = 0; _i56 < _list55.size; ++_i56)
          {
            com.ling9527.music.common.msg.auto.PassCond _elem57; // required
            _elem57 = new com.ling9527.music.common.msg.auto.PassCond();
            _elem57.read(iprot);
            struct.threeSPassConds.add(_elem57);
          }
        }
        struct.setThreeSPassCondsIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list58 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.extraPassConds = new ArrayList<com.ling9527.music.common.msg.auto.PassCond>(_list58.size);
          for (int _i59 = 0; _i59 < _list58.size; ++_i59)
          {
            com.ling9527.music.common.msg.auto.PassCond _elem60; // required
            _elem60 = new com.ling9527.music.common.msg.auto.PassCond();
            _elem60.read(iprot);
            struct.extraPassConds.add(_elem60);
          }
        }
        struct.setExtraPassCondsIsSet(true);
      }
      if (incoming.get(7)) {
        struct.prizeInfos = new com.ling9527.music.common.msg.auto.PrizeInfo();
        struct.prizeInfos.read(iprot);
        struct.setPrizeInfosIsSet(true);
      }
      if (incoming.get(8)) {
        struct.extraPrizeInfos = new com.ling9527.music.common.msg.auto.PrizeInfo();
        struct.extraPrizeInfos.read(iprot);
        struct.setExtraPrizeInfosIsSet(true);
      }
      if (incoming.get(9)) {
        struct.cantPlayTipId = iprot.readI32();
        struct.setCantPlayTipIdIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.cantPlayTipArgvs = new ArrayList<String>(_list61.size);
          for (int _i62 = 0; _i62 < _list61.size; ++_i62)
          {
            String _elem63; // required
            _elem63 = iprot.readString();
            struct.cantPlayTipArgvs.add(_elem63);
          }
        }
        struct.setCantPlayTipArgvsIsSet(true);
      }
      if (incoming.get(11)) {
        struct.allPassTipId = iprot.readI32();
        struct.setAllPassTipIdIsSet(true);
      }
    }
  }

}

