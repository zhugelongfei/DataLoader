/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 活动合成信息
 */
public class SCActivityComposeInfo implements org.apache.thrift.TBase<SCActivityComposeInfo, SCActivityComposeInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCActivityComposeInfo");

  private static final org.apache.thrift.protocol.TField ITEM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("itemType", org.apache.thrift.protocol.TType.BYTE, (short)1);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField COMPOSE_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("composeInfos", org.apache.thrift.protocol.TType.MAP, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCActivityComposeInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCActivityComposeInfoTupleSchemeFactory());
  }

  /**
   * 1-服装 2-饰品 3-道具
   */
  public byte itemType; // required
  public int version; // required
  /**
   * key-messageId val-条件信息
   */
  public Map<Integer,ActivityComposeInfo> composeInfos; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 1-服装 2-饰品 3-道具
     */
    ITEM_TYPE((short)1, "itemType"),
    VERSION((short)2, "version"),
    /**
     * key-messageId val-条件信息
     */
    COMPOSE_INFOS((short)3, "composeInfos");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ITEM_TYPE
          return ITEM_TYPE;
        case 2: // VERSION
          return VERSION;
        case 3: // COMPOSE_INFOS
          return COMPOSE_INFOS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ITEMTYPE_ISSET_ID = 0;
  private static final int __VERSION_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ITEM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("itemType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMPOSE_INFOS, new org.apache.thrift.meta_data.FieldMetaData("composeInfos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ActivityComposeInfo.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCActivityComposeInfo.class, metaDataMap);
  }

  public SCActivityComposeInfo() {
  }

  public SCActivityComposeInfo(
    byte itemType,
    int version,
    Map<Integer,ActivityComposeInfo> composeInfos)
  {
    this();
    this.itemType = itemType;
    setItemTypeIsSet(true);
    this.version = version;
    setVersionIsSet(true);
    this.composeInfos = composeInfos;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCActivityComposeInfo(SCActivityComposeInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.itemType = other.itemType;
    this.version = other.version;
    if (other.isSetComposeInfos()) {
      Map<Integer,ActivityComposeInfo> __this__composeInfos = new HashMap<Integer,ActivityComposeInfo>();
      for (Map.Entry<Integer, ActivityComposeInfo> other_element : other.composeInfos.entrySet()) {

        Integer other_element_key = other_element.getKey();
        ActivityComposeInfo other_element_value = other_element.getValue();

        Integer __this__composeInfos_copy_key = other_element_key;

        ActivityComposeInfo __this__composeInfos_copy_value = new ActivityComposeInfo(other_element_value);

        __this__composeInfos.put(__this__composeInfos_copy_key, __this__composeInfos_copy_value);
      }
      this.composeInfos = __this__composeInfos;
    }
  }

  public SCActivityComposeInfo deepCopy() {
    return new SCActivityComposeInfo(this);
  }

  @Override
  public void clear() {
    setItemTypeIsSet(false);
    this.itemType = 0;
    setVersionIsSet(false);
    this.version = 0;
    this.composeInfos = null;
  }

  /**
   * 1-服装 2-饰品 3-道具
   */
  public byte getItemType() {
    return this.itemType;
  }

  /**
   * 1-服装 2-饰品 3-道具
   */
  public SCActivityComposeInfo setItemType(byte itemType) {
    this.itemType = itemType;
    setItemTypeIsSet(true);
    return this;
  }

  public void unsetItemType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ITEMTYPE_ISSET_ID);
  }

  /** Returns true if field itemType is set (has been assigned a value) and false otherwise */
  public boolean isSetItemType() {
    return EncodingUtils.testBit(__isset_bitfield, __ITEMTYPE_ISSET_ID);
  }

  public void setItemTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ITEMTYPE_ISSET_ID, value);
  }

  public int getVersion() {
    return this.version;
  }

  public SCActivityComposeInfo setVersion(int version) {
    this.version = version;
    setVersionIsSet(true);
    return this;
  }

  public void unsetVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
  }

  public int getComposeInfosSize() {
    return (this.composeInfos == null) ? 0 : this.composeInfos.size();
  }

  public void putToComposeInfos(int key, ActivityComposeInfo val) {
    if (this.composeInfos == null) {
      this.composeInfos = new HashMap<Integer,ActivityComposeInfo>();
    }
    this.composeInfos.put(key, val);
  }

  /**
   * key-messageId val-条件信息
   */
  public Map<Integer,ActivityComposeInfo> getComposeInfos() {
    return this.composeInfos;
  }

  /**
   * key-messageId val-条件信息
   */
  public SCActivityComposeInfo setComposeInfos(Map<Integer,ActivityComposeInfo> composeInfos) {
    this.composeInfos = composeInfos;
    return this;
  }

  public void unsetComposeInfos() {
    this.composeInfos = null;
  }

  /** Returns true if field composeInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetComposeInfos() {
    return this.composeInfos != null;
  }

  public void setComposeInfosIsSet(boolean value) {
    if (!value) {
      this.composeInfos = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ITEM_TYPE:
      if (value == null) {
        unsetItemType();
      } else {
        setItemType((Byte)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((Integer)value);
      }
      break;

    case COMPOSE_INFOS:
      if (value == null) {
        unsetComposeInfos();
      } else {
        setComposeInfos((Map<Integer,ActivityComposeInfo>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ITEM_TYPE:
      return Byte.valueOf(getItemType());

    case VERSION:
      return Integer.valueOf(getVersion());

    case COMPOSE_INFOS:
      return getComposeInfos();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ITEM_TYPE:
      return isSetItemType();
    case VERSION:
      return isSetVersion();
    case COMPOSE_INFOS:
      return isSetComposeInfos();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCActivityComposeInfo)
      return this.equals((SCActivityComposeInfo)that);
    return false;
  }

  public boolean equals(SCActivityComposeInfo that) {
    if (that == null)
      return false;

    boolean this_present_itemType = true;
    boolean that_present_itemType = true;
    if (this_present_itemType || that_present_itemType) {
      if (!(this_present_itemType && that_present_itemType))
        return false;
      if (this.itemType != that.itemType)
        return false;
    }

    boolean this_present_version = true;
    boolean that_present_version = true;
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    boolean this_present_composeInfos = true && this.isSetComposeInfos();
    boolean that_present_composeInfos = true && that.isSetComposeInfos();
    if (this_present_composeInfos || that_present_composeInfos) {
      if (!(this_present_composeInfos && that_present_composeInfos))
        return false;
      if (!this.composeInfos.equals(that.composeInfos))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCActivityComposeInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCActivityComposeInfo typedOther = (SCActivityComposeInfo)other;

    lastComparison = Boolean.valueOf(isSetItemType()).compareTo(typedOther.isSetItemType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemType, typedOther.itemType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(typedOther.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, typedOther.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComposeInfos()).compareTo(typedOther.isSetComposeInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComposeInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.composeInfos, typedOther.composeInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCActivityComposeInfo(");
    boolean first = true;

    sb.append("itemType:");
    sb.append(this.itemType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("version:");
    sb.append(this.version);
    first = false;
    if (!first) sb.append(", ");
    sb.append("composeInfos:");
    if (this.composeInfos == null) {
      sb.append("null");
    } else {
      sb.append(this.composeInfos);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCActivityComposeInfoStandardSchemeFactory implements SchemeFactory {
    public SCActivityComposeInfoStandardScheme getScheme() {
      return new SCActivityComposeInfoStandardScheme();
    }
  }

  private static class SCActivityComposeInfoStandardScheme extends StandardScheme<SCActivityComposeInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCActivityComposeInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ITEM_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.itemType = iprot.readByte();
              struct.setItemTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.version = iprot.readI32();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMPOSE_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map10 = iprot.readMapBegin();
                struct.composeInfos = new HashMap<Integer,ActivityComposeInfo>(2*_map10.size);
                for (int _i11 = 0; _i11 < _map10.size; ++_i11)
                {
                  int _key12; // required
                  ActivityComposeInfo _val13; // required
                  _key12 = iprot.readI32();
                  _val13 = new ActivityComposeInfo();
                  _val13.read(iprot);
                  struct.composeInfos.put(_key12, _val13);
                }
                iprot.readMapEnd();
              }
              struct.setComposeInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCActivityComposeInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ITEM_TYPE_FIELD_DESC);
      oprot.writeByte(struct.itemType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VERSION_FIELD_DESC);
      oprot.writeI32(struct.version);
      oprot.writeFieldEnd();
      if (struct.composeInfos != null) {
        oprot.writeFieldBegin(COMPOSE_INFOS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, struct.composeInfos.size()));
          for (Map.Entry<Integer, ActivityComposeInfo> _iter14 : struct.composeInfos.entrySet())
          {
            oprot.writeI32(_iter14.getKey());
            _iter14.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCActivityComposeInfoTupleSchemeFactory implements SchemeFactory {
    public SCActivityComposeInfoTupleScheme getScheme() {
      return new SCActivityComposeInfoTupleScheme();
    }
  }

  private static class SCActivityComposeInfoTupleScheme extends TupleScheme<SCActivityComposeInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCActivityComposeInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetItemType()) {
        optionals.set(0);
      }
      if (struct.isSetVersion()) {
        optionals.set(1);
      }
      if (struct.isSetComposeInfos()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetItemType()) {
        oprot.writeByte(struct.itemType);
      }
      if (struct.isSetVersion()) {
        oprot.writeI32(struct.version);
      }
      if (struct.isSetComposeInfos()) {
        {
          oprot.writeI32(struct.composeInfos.size());
          for (Map.Entry<Integer, ActivityComposeInfo> _iter15 : struct.composeInfos.entrySet())
          {
            oprot.writeI32(_iter15.getKey());
            _iter15.getValue().write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCActivityComposeInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.itemType = iprot.readByte();
        struct.setItemTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.version = iprot.readI32();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map16 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.composeInfos = new HashMap<Integer,ActivityComposeInfo>(2*_map16.size);
          for (int _i17 = 0; _i17 < _map16.size; ++_i17)
          {
            int _key18; // required
            ActivityComposeInfo _val19; // required
            _key18 = iprot.readI32();
            _val19 = new ActivityComposeInfo();
            _val19.read(iprot);
            struct.composeInfos.put(_key18, _val19);
          }
        }
        struct.setComposeInfosIsSet(true);
      }
    }
  }

}

