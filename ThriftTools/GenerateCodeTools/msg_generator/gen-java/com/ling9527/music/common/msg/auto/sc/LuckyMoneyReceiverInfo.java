/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class LuckyMoneyReceiverInfo implements org.apache.thrift.TBase<LuckyMoneyReceiverInfo, LuckyMoneyReceiverInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LuckyMoneyReceiverInfo");

  private static final org.apache.thrift.protocol.TField INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("info", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField RECEIVE_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("receiveAmount", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField RECEIVE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("receiveTime", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField IS_BEST_LUCK_FIELD_DESC = new org.apache.thrift.protocol.TField("isBestLuck", org.apache.thrift.protocol.TType.BOOL, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LuckyMoneyReceiverInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LuckyMoneyReceiverInfoTupleSchemeFactory());
  }

  /**
   * 基础信息
   */
  public com.ling9527.music.common.msg.auto.PlayerBaseInfo info; // required
  /**
   * 领取金额
   */
  public int receiveAmount; // required
  /**
   * 出手时间(ms)
   */
  public long receiveTime; // required
  /**
   * 是否手气最佳
   */
  public boolean isBestLuck; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 基础信息
     */
    INFO((short)1, "info"),
    /**
     * 领取金额
     */
    RECEIVE_AMOUNT((short)2, "receiveAmount"),
    /**
     * 出手时间(ms)
     */
    RECEIVE_TIME((short)3, "receiveTime"),
    /**
     * 是否手气最佳
     */
    IS_BEST_LUCK((short)4, "isBestLuck");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INFO
          return INFO;
        case 2: // RECEIVE_AMOUNT
          return RECEIVE_AMOUNT;
        case 3: // RECEIVE_TIME
          return RECEIVE_TIME;
        case 4: // IS_BEST_LUCK
          return IS_BEST_LUCK;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RECEIVEAMOUNT_ISSET_ID = 0;
  private static final int __RECEIVETIME_ISSET_ID = 1;
  private static final int __ISBESTLUCK_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.IS_BEST_LUCK};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INFO, new org.apache.thrift.meta_data.FieldMetaData("info", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.PlayerBaseInfo.class)));
    tmpMap.put(_Fields.RECEIVE_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("receiveAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RECEIVE_TIME, new org.apache.thrift.meta_data.FieldMetaData("receiveTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IS_BEST_LUCK, new org.apache.thrift.meta_data.FieldMetaData("isBestLuck", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LuckyMoneyReceiverInfo.class, metaDataMap);
  }

  public LuckyMoneyReceiverInfo() {
  }

  public LuckyMoneyReceiverInfo(
    com.ling9527.music.common.msg.auto.PlayerBaseInfo info,
    int receiveAmount,
    long receiveTime)
  {
    this();
    this.info = info;
    this.receiveAmount = receiveAmount;
    setReceiveAmountIsSet(true);
    this.receiveTime = receiveTime;
    setReceiveTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LuckyMoneyReceiverInfo(LuckyMoneyReceiverInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetInfo()) {
      this.info = new com.ling9527.music.common.msg.auto.PlayerBaseInfo(other.info);
    }
    this.receiveAmount = other.receiveAmount;
    this.receiveTime = other.receiveTime;
    this.isBestLuck = other.isBestLuck;
  }

  public LuckyMoneyReceiverInfo deepCopy() {
    return new LuckyMoneyReceiverInfo(this);
  }

  @Override
  public void clear() {
    this.info = null;
    setReceiveAmountIsSet(false);
    this.receiveAmount = 0;
    setReceiveTimeIsSet(false);
    this.receiveTime = 0;
    setIsBestLuckIsSet(false);
    this.isBestLuck = false;
  }

  /**
   * 基础信息
   */
  public com.ling9527.music.common.msg.auto.PlayerBaseInfo getInfo() {
    return this.info;
  }

  /**
   * 基础信息
   */
  public LuckyMoneyReceiverInfo setInfo(com.ling9527.music.common.msg.auto.PlayerBaseInfo info) {
    this.info = info;
    return this;
  }

  public void unsetInfo() {
    this.info = null;
  }

  /** Returns true if field info is set (has been assigned a value) and false otherwise */
  public boolean isSetInfo() {
    return this.info != null;
  }

  public void setInfoIsSet(boolean value) {
    if (!value) {
      this.info = null;
    }
  }

  /**
   * 领取金额
   */
  public int getReceiveAmount() {
    return this.receiveAmount;
  }

  /**
   * 领取金额
   */
  public LuckyMoneyReceiverInfo setReceiveAmount(int receiveAmount) {
    this.receiveAmount = receiveAmount;
    setReceiveAmountIsSet(true);
    return this;
  }

  public void unsetReceiveAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECEIVEAMOUNT_ISSET_ID);
  }

  /** Returns true if field receiveAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetReceiveAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __RECEIVEAMOUNT_ISSET_ID);
  }

  public void setReceiveAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECEIVEAMOUNT_ISSET_ID, value);
  }

  /**
   * 出手时间(ms)
   */
  public long getReceiveTime() {
    return this.receiveTime;
  }

  /**
   * 出手时间(ms)
   */
  public LuckyMoneyReceiverInfo setReceiveTime(long receiveTime) {
    this.receiveTime = receiveTime;
    setReceiveTimeIsSet(true);
    return this;
  }

  public void unsetReceiveTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECEIVETIME_ISSET_ID);
  }

  /** Returns true if field receiveTime is set (has been assigned a value) and false otherwise */
  public boolean isSetReceiveTime() {
    return EncodingUtils.testBit(__isset_bitfield, __RECEIVETIME_ISSET_ID);
  }

  public void setReceiveTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECEIVETIME_ISSET_ID, value);
  }

  /**
   * 是否手气最佳
   */
  public boolean isIsBestLuck() {
    return this.isBestLuck;
  }

  /**
   * 是否手气最佳
   */
  public LuckyMoneyReceiverInfo setIsBestLuck(boolean isBestLuck) {
    this.isBestLuck = isBestLuck;
    setIsBestLuckIsSet(true);
    return this;
  }

  public void unsetIsBestLuck() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISBESTLUCK_ISSET_ID);
  }

  /** Returns true if field isBestLuck is set (has been assigned a value) and false otherwise */
  public boolean isSetIsBestLuck() {
    return EncodingUtils.testBit(__isset_bitfield, __ISBESTLUCK_ISSET_ID);
  }

  public void setIsBestLuckIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISBESTLUCK_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INFO:
      if (value == null) {
        unsetInfo();
      } else {
        setInfo((com.ling9527.music.common.msg.auto.PlayerBaseInfo)value);
      }
      break;

    case RECEIVE_AMOUNT:
      if (value == null) {
        unsetReceiveAmount();
      } else {
        setReceiveAmount((Integer)value);
      }
      break;

    case RECEIVE_TIME:
      if (value == null) {
        unsetReceiveTime();
      } else {
        setReceiveTime((Long)value);
      }
      break;

    case IS_BEST_LUCK:
      if (value == null) {
        unsetIsBestLuck();
      } else {
        setIsBestLuck((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INFO:
      return getInfo();

    case RECEIVE_AMOUNT:
      return Integer.valueOf(getReceiveAmount());

    case RECEIVE_TIME:
      return Long.valueOf(getReceiveTime());

    case IS_BEST_LUCK:
      return Boolean.valueOf(isIsBestLuck());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INFO:
      return isSetInfo();
    case RECEIVE_AMOUNT:
      return isSetReceiveAmount();
    case RECEIVE_TIME:
      return isSetReceiveTime();
    case IS_BEST_LUCK:
      return isSetIsBestLuck();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LuckyMoneyReceiverInfo)
      return this.equals((LuckyMoneyReceiverInfo)that);
    return false;
  }

  public boolean equals(LuckyMoneyReceiverInfo that) {
    if (that == null)
      return false;

    boolean this_present_info = true && this.isSetInfo();
    boolean that_present_info = true && that.isSetInfo();
    if (this_present_info || that_present_info) {
      if (!(this_present_info && that_present_info))
        return false;
      if (!this.info.equals(that.info))
        return false;
    }

    boolean this_present_receiveAmount = true;
    boolean that_present_receiveAmount = true;
    if (this_present_receiveAmount || that_present_receiveAmount) {
      if (!(this_present_receiveAmount && that_present_receiveAmount))
        return false;
      if (this.receiveAmount != that.receiveAmount)
        return false;
    }

    boolean this_present_receiveTime = true;
    boolean that_present_receiveTime = true;
    if (this_present_receiveTime || that_present_receiveTime) {
      if (!(this_present_receiveTime && that_present_receiveTime))
        return false;
      if (this.receiveTime != that.receiveTime)
        return false;
    }

    boolean this_present_isBestLuck = true && this.isSetIsBestLuck();
    boolean that_present_isBestLuck = true && that.isSetIsBestLuck();
    if (this_present_isBestLuck || that_present_isBestLuck) {
      if (!(this_present_isBestLuck && that_present_isBestLuck))
        return false;
      if (this.isBestLuck != that.isBestLuck)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(LuckyMoneyReceiverInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    LuckyMoneyReceiverInfo typedOther = (LuckyMoneyReceiverInfo)other;

    lastComparison = Boolean.valueOf(isSetInfo()).compareTo(typedOther.isSetInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.info, typedOther.info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReceiveAmount()).compareTo(typedOther.isSetReceiveAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceiveAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receiveAmount, typedOther.receiveAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReceiveTime()).compareTo(typedOther.isSetReceiveTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceiveTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receiveTime, typedOther.receiveTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsBestLuck()).compareTo(typedOther.isSetIsBestLuck());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsBestLuck()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isBestLuck, typedOther.isBestLuck);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LuckyMoneyReceiverInfo(");
    boolean first = true;

    sb.append("info:");
    if (this.info == null) {
      sb.append("null");
    } else {
      sb.append(this.info);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("receiveAmount:");
    sb.append(this.receiveAmount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("receiveTime:");
    sb.append(this.receiveTime);
    first = false;
    if (isSetIsBestLuck()) {
      if (!first) sb.append(", ");
      sb.append("isBestLuck:");
      sb.append(this.isBestLuck);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (info != null) {
      info.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LuckyMoneyReceiverInfoStandardSchemeFactory implements SchemeFactory {
    public LuckyMoneyReceiverInfoStandardScheme getScheme() {
      return new LuckyMoneyReceiverInfoStandardScheme();
    }
  }

  private static class LuckyMoneyReceiverInfoStandardScheme extends StandardScheme<LuckyMoneyReceiverInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LuckyMoneyReceiverInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.info = new com.ling9527.music.common.msg.auto.PlayerBaseInfo();
              struct.info.read(iprot);
              struct.setInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RECEIVE_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.receiveAmount = iprot.readI32();
              struct.setReceiveAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RECEIVE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.receiveTime = iprot.readI64();
              struct.setReceiveTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IS_BEST_LUCK
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isBestLuck = iprot.readBool();
              struct.setIsBestLuckIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LuckyMoneyReceiverInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.info != null) {
        oprot.writeFieldBegin(INFO_FIELD_DESC);
        struct.info.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RECEIVE_AMOUNT_FIELD_DESC);
      oprot.writeI32(struct.receiveAmount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECEIVE_TIME_FIELD_DESC);
      oprot.writeI64(struct.receiveTime);
      oprot.writeFieldEnd();
      if (struct.isSetIsBestLuck()) {
        oprot.writeFieldBegin(IS_BEST_LUCK_FIELD_DESC);
        oprot.writeBool(struct.isBestLuck);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LuckyMoneyReceiverInfoTupleSchemeFactory implements SchemeFactory {
    public LuckyMoneyReceiverInfoTupleScheme getScheme() {
      return new LuckyMoneyReceiverInfoTupleScheme();
    }
  }

  private static class LuckyMoneyReceiverInfoTupleScheme extends TupleScheme<LuckyMoneyReceiverInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LuckyMoneyReceiverInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetInfo()) {
        optionals.set(0);
      }
      if (struct.isSetReceiveAmount()) {
        optionals.set(1);
      }
      if (struct.isSetReceiveTime()) {
        optionals.set(2);
      }
      if (struct.isSetIsBestLuck()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetInfo()) {
        struct.info.write(oprot);
      }
      if (struct.isSetReceiveAmount()) {
        oprot.writeI32(struct.receiveAmount);
      }
      if (struct.isSetReceiveTime()) {
        oprot.writeI64(struct.receiveTime);
      }
      if (struct.isSetIsBestLuck()) {
        oprot.writeBool(struct.isBestLuck);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LuckyMoneyReceiverInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.info = new com.ling9527.music.common.msg.auto.PlayerBaseInfo();
        struct.info.read(iprot);
        struct.setInfoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.receiveAmount = iprot.readI32();
        struct.setReceiveAmountIsSet(true);
      }
      if (incoming.get(2)) {
        struct.receiveTime = iprot.readI64();
        struct.setReceiveTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.isBestLuck = iprot.readBool();
        struct.setIsBestLuckIsSet(true);
      }
    }
  }

}

