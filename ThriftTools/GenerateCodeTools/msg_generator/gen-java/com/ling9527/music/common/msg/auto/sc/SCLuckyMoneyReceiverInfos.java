/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 红包领取信息
 */
public class SCLuckyMoneyReceiverInfos implements org.apache.thrift.TBase<SCLuckyMoneyReceiverInfos, SCLuckyMoneyReceiverInfos._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCLuckyMoneyReceiverInfos");

  private static final org.apache.thrift.protocol.TField RECEIVER_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("receiverCount", org.apache.thrift.protocol.TType.I16, (short)1);
  private static final org.apache.thrift.protocol.TField START_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("startIndex", org.apache.thrift.protocol.TType.I16, (short)2);
  private static final org.apache.thrift.protocol.TField RECEIVERS_FIELD_DESC = new org.apache.thrift.protocol.TField("receivers", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCLuckyMoneyReceiverInfosStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCLuckyMoneyReceiverInfosTupleSchemeFactory());
  }

  /**
   * 领取数量
   */
  public short receiverCount; // required
  /**
   * 当前索引
   */
  public short startIndex; // required
  /**
   * 接受者信息
   */
  public List<LuckyMoneyReceiverInfo> receivers; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 领取数量
     */
    RECEIVER_COUNT((short)1, "receiverCount"),
    /**
     * 当前索引
     */
    START_INDEX((short)2, "startIndex"),
    /**
     * 接受者信息
     */
    RECEIVERS((short)3, "receivers");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RECEIVER_COUNT
          return RECEIVER_COUNT;
        case 2: // START_INDEX
          return START_INDEX;
        case 3: // RECEIVERS
          return RECEIVERS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RECEIVERCOUNT_ISSET_ID = 0;
  private static final int __STARTINDEX_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RECEIVER_COUNT, new org.apache.thrift.meta_data.FieldMetaData("receiverCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.START_INDEX, new org.apache.thrift.meta_data.FieldMetaData("startIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.RECEIVERS, new org.apache.thrift.meta_data.FieldMetaData("receivers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LuckyMoneyReceiverInfo.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCLuckyMoneyReceiverInfos.class, metaDataMap);
  }

  public SCLuckyMoneyReceiverInfos() {
  }

  public SCLuckyMoneyReceiverInfos(
    short receiverCount,
    short startIndex,
    List<LuckyMoneyReceiverInfo> receivers)
  {
    this();
    this.receiverCount = receiverCount;
    setReceiverCountIsSet(true);
    this.startIndex = startIndex;
    setStartIndexIsSet(true);
    this.receivers = receivers;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCLuckyMoneyReceiverInfos(SCLuckyMoneyReceiverInfos other) {
    __isset_bitfield = other.__isset_bitfield;
    this.receiverCount = other.receiverCount;
    this.startIndex = other.startIndex;
    if (other.isSetReceivers()) {
      List<LuckyMoneyReceiverInfo> __this__receivers = new ArrayList<LuckyMoneyReceiverInfo>();
      for (LuckyMoneyReceiverInfo other_element : other.receivers) {
        __this__receivers.add(new LuckyMoneyReceiverInfo(other_element));
      }
      this.receivers = __this__receivers;
    }
  }

  public SCLuckyMoneyReceiverInfos deepCopy() {
    return new SCLuckyMoneyReceiverInfos(this);
  }

  @Override
  public void clear() {
    setReceiverCountIsSet(false);
    this.receiverCount = 0;
    setStartIndexIsSet(false);
    this.startIndex = 0;
    this.receivers = null;
  }

  /**
   * 领取数量
   */
  public short getReceiverCount() {
    return this.receiverCount;
  }

  /**
   * 领取数量
   */
  public SCLuckyMoneyReceiverInfos setReceiverCount(short receiverCount) {
    this.receiverCount = receiverCount;
    setReceiverCountIsSet(true);
    return this;
  }

  public void unsetReceiverCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECEIVERCOUNT_ISSET_ID);
  }

  /** Returns true if field receiverCount is set (has been assigned a value) and false otherwise */
  public boolean isSetReceiverCount() {
    return EncodingUtils.testBit(__isset_bitfield, __RECEIVERCOUNT_ISSET_ID);
  }

  public void setReceiverCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECEIVERCOUNT_ISSET_ID, value);
  }

  /**
   * 当前索引
   */
  public short getStartIndex() {
    return this.startIndex;
  }

  /**
   * 当前索引
   */
  public SCLuckyMoneyReceiverInfos setStartIndex(short startIndex) {
    this.startIndex = startIndex;
    setStartIndexIsSet(true);
    return this;
  }

  public void unsetStartIndex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTINDEX_ISSET_ID);
  }

  /** Returns true if field startIndex is set (has been assigned a value) and false otherwise */
  public boolean isSetStartIndex() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTINDEX_ISSET_ID);
  }

  public void setStartIndexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTINDEX_ISSET_ID, value);
  }

  public int getReceiversSize() {
    return (this.receivers == null) ? 0 : this.receivers.size();
  }

  public java.util.Iterator<LuckyMoneyReceiverInfo> getReceiversIterator() {
    return (this.receivers == null) ? null : this.receivers.iterator();
  }

  public void addToReceivers(LuckyMoneyReceiverInfo elem) {
    if (this.receivers == null) {
      this.receivers = new ArrayList<LuckyMoneyReceiverInfo>();
    }
    this.receivers.add(elem);
  }

  /**
   * 接受者信息
   */
  public List<LuckyMoneyReceiverInfo> getReceivers() {
    return this.receivers;
  }

  /**
   * 接受者信息
   */
  public SCLuckyMoneyReceiverInfos setReceivers(List<LuckyMoneyReceiverInfo> receivers) {
    this.receivers = receivers;
    return this;
  }

  public void unsetReceivers() {
    this.receivers = null;
  }

  /** Returns true if field receivers is set (has been assigned a value) and false otherwise */
  public boolean isSetReceivers() {
    return this.receivers != null;
  }

  public void setReceiversIsSet(boolean value) {
    if (!value) {
      this.receivers = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RECEIVER_COUNT:
      if (value == null) {
        unsetReceiverCount();
      } else {
        setReceiverCount((Short)value);
      }
      break;

    case START_INDEX:
      if (value == null) {
        unsetStartIndex();
      } else {
        setStartIndex((Short)value);
      }
      break;

    case RECEIVERS:
      if (value == null) {
        unsetReceivers();
      } else {
        setReceivers((List<LuckyMoneyReceiverInfo>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RECEIVER_COUNT:
      return Short.valueOf(getReceiverCount());

    case START_INDEX:
      return Short.valueOf(getStartIndex());

    case RECEIVERS:
      return getReceivers();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RECEIVER_COUNT:
      return isSetReceiverCount();
    case START_INDEX:
      return isSetStartIndex();
    case RECEIVERS:
      return isSetReceivers();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCLuckyMoneyReceiverInfos)
      return this.equals((SCLuckyMoneyReceiverInfos)that);
    return false;
  }

  public boolean equals(SCLuckyMoneyReceiverInfos that) {
    if (that == null)
      return false;

    boolean this_present_receiverCount = true;
    boolean that_present_receiverCount = true;
    if (this_present_receiverCount || that_present_receiverCount) {
      if (!(this_present_receiverCount && that_present_receiverCount))
        return false;
      if (this.receiverCount != that.receiverCount)
        return false;
    }

    boolean this_present_startIndex = true;
    boolean that_present_startIndex = true;
    if (this_present_startIndex || that_present_startIndex) {
      if (!(this_present_startIndex && that_present_startIndex))
        return false;
      if (this.startIndex != that.startIndex)
        return false;
    }

    boolean this_present_receivers = true && this.isSetReceivers();
    boolean that_present_receivers = true && that.isSetReceivers();
    if (this_present_receivers || that_present_receivers) {
      if (!(this_present_receivers && that_present_receivers))
        return false;
      if (!this.receivers.equals(that.receivers))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCLuckyMoneyReceiverInfos other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCLuckyMoneyReceiverInfos typedOther = (SCLuckyMoneyReceiverInfos)other;

    lastComparison = Boolean.valueOf(isSetReceiverCount()).compareTo(typedOther.isSetReceiverCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceiverCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receiverCount, typedOther.receiverCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartIndex()).compareTo(typedOther.isSetStartIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startIndex, typedOther.startIndex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReceivers()).compareTo(typedOther.isSetReceivers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceivers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receivers, typedOther.receivers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCLuckyMoneyReceiverInfos(");
    boolean first = true;

    sb.append("receiverCount:");
    sb.append(this.receiverCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("startIndex:");
    sb.append(this.startIndex);
    first = false;
    if (!first) sb.append(", ");
    sb.append("receivers:");
    if (this.receivers == null) {
      sb.append("null");
    } else {
      sb.append(this.receivers);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCLuckyMoneyReceiverInfosStandardSchemeFactory implements SchemeFactory {
    public SCLuckyMoneyReceiverInfosStandardScheme getScheme() {
      return new SCLuckyMoneyReceiverInfosStandardScheme();
    }
  }

  private static class SCLuckyMoneyReceiverInfosStandardScheme extends StandardScheme<SCLuckyMoneyReceiverInfos> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCLuckyMoneyReceiverInfos struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RECEIVER_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.receiverCount = iprot.readI16();
              struct.setReceiverCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // START_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.startIndex = iprot.readI16();
              struct.setStartIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RECEIVERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.receivers = new ArrayList<LuckyMoneyReceiverInfo>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  LuckyMoneyReceiverInfo _elem2; // required
                  _elem2 = new LuckyMoneyReceiverInfo();
                  _elem2.read(iprot);
                  struct.receivers.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setReceiversIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCLuckyMoneyReceiverInfos struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(RECEIVER_COUNT_FIELD_DESC);
      oprot.writeI16(struct.receiverCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(START_INDEX_FIELD_DESC);
      oprot.writeI16(struct.startIndex);
      oprot.writeFieldEnd();
      if (struct.receivers != null) {
        oprot.writeFieldBegin(RECEIVERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.receivers.size()));
          for (LuckyMoneyReceiverInfo _iter3 : struct.receivers)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCLuckyMoneyReceiverInfosTupleSchemeFactory implements SchemeFactory {
    public SCLuckyMoneyReceiverInfosTupleScheme getScheme() {
      return new SCLuckyMoneyReceiverInfosTupleScheme();
    }
  }

  private static class SCLuckyMoneyReceiverInfosTupleScheme extends TupleScheme<SCLuckyMoneyReceiverInfos> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCLuckyMoneyReceiverInfos struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetReceiverCount()) {
        optionals.set(0);
      }
      if (struct.isSetStartIndex()) {
        optionals.set(1);
      }
      if (struct.isSetReceivers()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetReceiverCount()) {
        oprot.writeI16(struct.receiverCount);
      }
      if (struct.isSetStartIndex()) {
        oprot.writeI16(struct.startIndex);
      }
      if (struct.isSetReceivers()) {
        {
          oprot.writeI32(struct.receivers.size());
          for (LuckyMoneyReceiverInfo _iter4 : struct.receivers)
          {
            _iter4.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCLuckyMoneyReceiverInfos struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.receiverCount = iprot.readI16();
        struct.setReceiverCountIsSet(true);
      }
      if (incoming.get(1)) {
        struct.startIndex = iprot.readI16();
        struct.setStartIndexIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.receivers = new ArrayList<LuckyMoneyReceiverInfo>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            LuckyMoneyReceiverInfo _elem7; // required
            _elem7 = new LuckyMoneyReceiverInfo();
            _elem7.read(iprot);
            struct.receivers.add(_elem7);
          }
        }
        struct.setReceiversIsSet(true);
      }
    }
  }

}

