/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 活动详情
 */
public class ActivityDetailInfo implements org.apache.thrift.TBase<ActivityDetailInfo, ActivityDetailInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ActivityDetailInfo");

  private static final org.apache.thrift.protocol.TField ACTIVITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("activityId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ACTIVITY_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("activityTitle", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TIME_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("timeDesc", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField UI_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("uiType", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField UI_PACKAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("uiPackage", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TARGET_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("targetInfos", org.apache.thrift.protocol.TType.LIST, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ActivityDetailInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ActivityDetailInfoTupleSchemeFactory());
  }

  public int activityId; // required
  /**
   * 标题
   */
  public String activityTitle; // required
  /**
   * 时间描述
   */
  public String timeDesc; // required
  /**
   * 内容说明
   */
  public String content; // required
  /**
   * ui类型
   */
  public int uiType; // required
  /**
   * 使用其他UIPackage显示的活动
   */
  public String uiPackage; // optional
  /**
   * 活动目标列表信息
   */
  public List<ActivityTargetInfo> targetInfos; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ACTIVITY_ID((short)1, "activityId"),
    /**
     * 标题
     */
    ACTIVITY_TITLE((short)2, "activityTitle"),
    /**
     * 时间描述
     */
    TIME_DESC((short)3, "timeDesc"),
    /**
     * 内容说明
     */
    CONTENT((short)4, "content"),
    /**
     * ui类型
     */
    UI_TYPE((short)5, "uiType"),
    /**
     * 使用其他UIPackage显示的活动
     */
    UI_PACKAGE((short)6, "uiPackage"),
    /**
     * 活动目标列表信息
     */
    TARGET_INFOS((short)7, "targetInfos");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACTIVITY_ID
          return ACTIVITY_ID;
        case 2: // ACTIVITY_TITLE
          return ACTIVITY_TITLE;
        case 3: // TIME_DESC
          return TIME_DESC;
        case 4: // CONTENT
          return CONTENT;
        case 5: // UI_TYPE
          return UI_TYPE;
        case 6: // UI_PACKAGE
          return UI_PACKAGE;
        case 7: // TARGET_INFOS
          return TARGET_INFOS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ACTIVITYID_ISSET_ID = 0;
  private static final int __UITYPE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.UI_PACKAGE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACTIVITY_ID, new org.apache.thrift.meta_data.FieldMetaData("activityId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACTIVITY_TITLE, new org.apache.thrift.meta_data.FieldMetaData("activityTitle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIME_DESC, new org.apache.thrift.meta_data.FieldMetaData("timeDesc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UI_TYPE, new org.apache.thrift.meta_data.FieldMetaData("uiType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UI_PACKAGE, new org.apache.thrift.meta_data.FieldMetaData("uiPackage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TARGET_INFOS, new org.apache.thrift.meta_data.FieldMetaData("targetInfos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ActivityTargetInfo.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ActivityDetailInfo.class, metaDataMap);
  }

  public ActivityDetailInfo() {
  }

  public ActivityDetailInfo(
    int activityId,
    String activityTitle,
    String timeDesc,
    String content,
    int uiType,
    List<ActivityTargetInfo> targetInfos)
  {
    this();
    this.activityId = activityId;
    setActivityIdIsSet(true);
    this.activityTitle = activityTitle;
    this.timeDesc = timeDesc;
    this.content = content;
    this.uiType = uiType;
    setUiTypeIsSet(true);
    this.targetInfos = targetInfos;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ActivityDetailInfo(ActivityDetailInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.activityId = other.activityId;
    if (other.isSetActivityTitle()) {
      this.activityTitle = other.activityTitle;
    }
    if (other.isSetTimeDesc()) {
      this.timeDesc = other.timeDesc;
    }
    if (other.isSetContent()) {
      this.content = other.content;
    }
    this.uiType = other.uiType;
    if (other.isSetUiPackage()) {
      this.uiPackage = other.uiPackage;
    }
    if (other.isSetTargetInfos()) {
      List<ActivityTargetInfo> __this__targetInfos = new ArrayList<ActivityTargetInfo>();
      for (ActivityTargetInfo other_element : other.targetInfos) {
        __this__targetInfos.add(new ActivityTargetInfo(other_element));
      }
      this.targetInfos = __this__targetInfos;
    }
  }

  public ActivityDetailInfo deepCopy() {
    return new ActivityDetailInfo(this);
  }

  @Override
  public void clear() {
    setActivityIdIsSet(false);
    this.activityId = 0;
    this.activityTitle = null;
    this.timeDesc = null;
    this.content = null;
    setUiTypeIsSet(false);
    this.uiType = 0;
    this.uiPackage = null;
    this.targetInfos = null;
  }

  public int getActivityId() {
    return this.activityId;
  }

  public ActivityDetailInfo setActivityId(int activityId) {
    this.activityId = activityId;
    setActivityIdIsSet(true);
    return this;
  }

  public void unsetActivityId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIVITYID_ISSET_ID);
  }

  /** Returns true if field activityId is set (has been assigned a value) and false otherwise */
  public boolean isSetActivityId() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTIVITYID_ISSET_ID);
  }

  public void setActivityIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIVITYID_ISSET_ID, value);
  }

  /**
   * 标题
   */
  public String getActivityTitle() {
    return this.activityTitle;
  }

  /**
   * 标题
   */
  public ActivityDetailInfo setActivityTitle(String activityTitle) {
    this.activityTitle = activityTitle;
    return this;
  }

  public void unsetActivityTitle() {
    this.activityTitle = null;
  }

  /** Returns true if field activityTitle is set (has been assigned a value) and false otherwise */
  public boolean isSetActivityTitle() {
    return this.activityTitle != null;
  }

  public void setActivityTitleIsSet(boolean value) {
    if (!value) {
      this.activityTitle = null;
    }
  }

  /**
   * 时间描述
   */
  public String getTimeDesc() {
    return this.timeDesc;
  }

  /**
   * 时间描述
   */
  public ActivityDetailInfo setTimeDesc(String timeDesc) {
    this.timeDesc = timeDesc;
    return this;
  }

  public void unsetTimeDesc() {
    this.timeDesc = null;
  }

  /** Returns true if field timeDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeDesc() {
    return this.timeDesc != null;
  }

  public void setTimeDescIsSet(boolean value) {
    if (!value) {
      this.timeDesc = null;
    }
  }

  /**
   * 内容说明
   */
  public String getContent() {
    return this.content;
  }

  /**
   * 内容说明
   */
  public ActivityDetailInfo setContent(String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  /**
   * ui类型
   */
  public int getUiType() {
    return this.uiType;
  }

  /**
   * ui类型
   */
  public ActivityDetailInfo setUiType(int uiType) {
    this.uiType = uiType;
    setUiTypeIsSet(true);
    return this;
  }

  public void unsetUiType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UITYPE_ISSET_ID);
  }

  /** Returns true if field uiType is set (has been assigned a value) and false otherwise */
  public boolean isSetUiType() {
    return EncodingUtils.testBit(__isset_bitfield, __UITYPE_ISSET_ID);
  }

  public void setUiTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UITYPE_ISSET_ID, value);
  }

  /**
   * 使用其他UIPackage显示的活动
   */
  public String getUiPackage() {
    return this.uiPackage;
  }

  /**
   * 使用其他UIPackage显示的活动
   */
  public ActivityDetailInfo setUiPackage(String uiPackage) {
    this.uiPackage = uiPackage;
    return this;
  }

  public void unsetUiPackage() {
    this.uiPackage = null;
  }

  /** Returns true if field uiPackage is set (has been assigned a value) and false otherwise */
  public boolean isSetUiPackage() {
    return this.uiPackage != null;
  }

  public void setUiPackageIsSet(boolean value) {
    if (!value) {
      this.uiPackage = null;
    }
  }

  public int getTargetInfosSize() {
    return (this.targetInfos == null) ? 0 : this.targetInfos.size();
  }

  public java.util.Iterator<ActivityTargetInfo> getTargetInfosIterator() {
    return (this.targetInfos == null) ? null : this.targetInfos.iterator();
  }

  public void addToTargetInfos(ActivityTargetInfo elem) {
    if (this.targetInfos == null) {
      this.targetInfos = new ArrayList<ActivityTargetInfo>();
    }
    this.targetInfos.add(elem);
  }

  /**
   * 活动目标列表信息
   */
  public List<ActivityTargetInfo> getTargetInfos() {
    return this.targetInfos;
  }

  /**
   * 活动目标列表信息
   */
  public ActivityDetailInfo setTargetInfos(List<ActivityTargetInfo> targetInfos) {
    this.targetInfos = targetInfos;
    return this;
  }

  public void unsetTargetInfos() {
    this.targetInfos = null;
  }

  /** Returns true if field targetInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetTargetInfos() {
    return this.targetInfos != null;
  }

  public void setTargetInfosIsSet(boolean value) {
    if (!value) {
      this.targetInfos = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ACTIVITY_ID:
      if (value == null) {
        unsetActivityId();
      } else {
        setActivityId((Integer)value);
      }
      break;

    case ACTIVITY_TITLE:
      if (value == null) {
        unsetActivityTitle();
      } else {
        setActivityTitle((String)value);
      }
      break;

    case TIME_DESC:
      if (value == null) {
        unsetTimeDesc();
      } else {
        setTimeDesc((String)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case UI_TYPE:
      if (value == null) {
        unsetUiType();
      } else {
        setUiType((Integer)value);
      }
      break;

    case UI_PACKAGE:
      if (value == null) {
        unsetUiPackage();
      } else {
        setUiPackage((String)value);
      }
      break;

    case TARGET_INFOS:
      if (value == null) {
        unsetTargetInfos();
      } else {
        setTargetInfos((List<ActivityTargetInfo>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ACTIVITY_ID:
      return Integer.valueOf(getActivityId());

    case ACTIVITY_TITLE:
      return getActivityTitle();

    case TIME_DESC:
      return getTimeDesc();

    case CONTENT:
      return getContent();

    case UI_TYPE:
      return Integer.valueOf(getUiType());

    case UI_PACKAGE:
      return getUiPackage();

    case TARGET_INFOS:
      return getTargetInfos();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ACTIVITY_ID:
      return isSetActivityId();
    case ACTIVITY_TITLE:
      return isSetActivityTitle();
    case TIME_DESC:
      return isSetTimeDesc();
    case CONTENT:
      return isSetContent();
    case UI_TYPE:
      return isSetUiType();
    case UI_PACKAGE:
      return isSetUiPackage();
    case TARGET_INFOS:
      return isSetTargetInfos();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ActivityDetailInfo)
      return this.equals((ActivityDetailInfo)that);
    return false;
  }

  public boolean equals(ActivityDetailInfo that) {
    if (that == null)
      return false;

    boolean this_present_activityId = true;
    boolean that_present_activityId = true;
    if (this_present_activityId || that_present_activityId) {
      if (!(this_present_activityId && that_present_activityId))
        return false;
      if (this.activityId != that.activityId)
        return false;
    }

    boolean this_present_activityTitle = true && this.isSetActivityTitle();
    boolean that_present_activityTitle = true && that.isSetActivityTitle();
    if (this_present_activityTitle || that_present_activityTitle) {
      if (!(this_present_activityTitle && that_present_activityTitle))
        return false;
      if (!this.activityTitle.equals(that.activityTitle))
        return false;
    }

    boolean this_present_timeDesc = true && this.isSetTimeDesc();
    boolean that_present_timeDesc = true && that.isSetTimeDesc();
    if (this_present_timeDesc || that_present_timeDesc) {
      if (!(this_present_timeDesc && that_present_timeDesc))
        return false;
      if (!this.timeDesc.equals(that.timeDesc))
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_uiType = true;
    boolean that_present_uiType = true;
    if (this_present_uiType || that_present_uiType) {
      if (!(this_present_uiType && that_present_uiType))
        return false;
      if (this.uiType != that.uiType)
        return false;
    }

    boolean this_present_uiPackage = true && this.isSetUiPackage();
    boolean that_present_uiPackage = true && that.isSetUiPackage();
    if (this_present_uiPackage || that_present_uiPackage) {
      if (!(this_present_uiPackage && that_present_uiPackage))
        return false;
      if (!this.uiPackage.equals(that.uiPackage))
        return false;
    }

    boolean this_present_targetInfos = true && this.isSetTargetInfos();
    boolean that_present_targetInfos = true && that.isSetTargetInfos();
    if (this_present_targetInfos || that_present_targetInfos) {
      if (!(this_present_targetInfos && that_present_targetInfos))
        return false;
      if (!this.targetInfos.equals(that.targetInfos))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ActivityDetailInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ActivityDetailInfo typedOther = (ActivityDetailInfo)other;

    lastComparison = Boolean.valueOf(isSetActivityId()).compareTo(typedOther.isSetActivityId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActivityId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activityId, typedOther.activityId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActivityTitle()).compareTo(typedOther.isSetActivityTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActivityTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activityTitle, typedOther.activityTitle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeDesc()).compareTo(typedOther.isSetTimeDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeDesc, typedOther.timeDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(typedOther.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, typedOther.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUiType()).compareTo(typedOther.isSetUiType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUiType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uiType, typedOther.uiType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUiPackage()).compareTo(typedOther.isSetUiPackage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUiPackage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uiPackage, typedOther.uiPackage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTargetInfos()).compareTo(typedOther.isSetTargetInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTargetInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targetInfos, typedOther.targetInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ActivityDetailInfo(");
    boolean first = true;

    sb.append("activityId:");
    sb.append(this.activityId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("activityTitle:");
    if (this.activityTitle == null) {
      sb.append("null");
    } else {
      sb.append(this.activityTitle);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timeDesc:");
    if (this.timeDesc == null) {
      sb.append("null");
    } else {
      sb.append(this.timeDesc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      sb.append(this.content);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("uiType:");
    sb.append(this.uiType);
    first = false;
    if (isSetUiPackage()) {
      if (!first) sb.append(", ");
      sb.append("uiPackage:");
      if (this.uiPackage == null) {
        sb.append("null");
      } else {
        sb.append(this.uiPackage);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("targetInfos:");
    if (this.targetInfos == null) {
      sb.append("null");
    } else {
      sb.append(this.targetInfos);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ActivityDetailInfoStandardSchemeFactory implements SchemeFactory {
    public ActivityDetailInfoStandardScheme getScheme() {
      return new ActivityDetailInfoStandardScheme();
    }
  }

  private static class ActivityDetailInfoStandardScheme extends StandardScheme<ActivityDetailInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ActivityDetailInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ACTIVITY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.activityId = iprot.readI32();
              struct.setActivityIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ACTIVITY_TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.activityTitle = iprot.readString();
              struct.setActivityTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TIME_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.timeDesc = iprot.readString();
              struct.setTimeDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // UI_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.uiType = iprot.readI32();
              struct.setUiTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // UI_PACKAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uiPackage = iprot.readString();
              struct.setUiPackageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TARGET_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.targetInfos = new ArrayList<ActivityTargetInfo>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  ActivityTargetInfo _elem2; // required
                  _elem2 = new ActivityTargetInfo();
                  _elem2.read(iprot);
                  struct.targetInfos.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setTargetInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ActivityDetailInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ACTIVITY_ID_FIELD_DESC);
      oprot.writeI32(struct.activityId);
      oprot.writeFieldEnd();
      if (struct.activityTitle != null) {
        oprot.writeFieldBegin(ACTIVITY_TITLE_FIELD_DESC);
        oprot.writeString(struct.activityTitle);
        oprot.writeFieldEnd();
      }
      if (struct.timeDesc != null) {
        oprot.writeFieldBegin(TIME_DESC_FIELD_DESC);
        oprot.writeString(struct.timeDesc);
        oprot.writeFieldEnd();
      }
      if (struct.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeString(struct.content);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(UI_TYPE_FIELD_DESC);
      oprot.writeI32(struct.uiType);
      oprot.writeFieldEnd();
      if (struct.uiPackage != null) {
        if (struct.isSetUiPackage()) {
          oprot.writeFieldBegin(UI_PACKAGE_FIELD_DESC);
          oprot.writeString(struct.uiPackage);
          oprot.writeFieldEnd();
        }
      }
      if (struct.targetInfos != null) {
        oprot.writeFieldBegin(TARGET_INFOS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.targetInfos.size()));
          for (ActivityTargetInfo _iter3 : struct.targetInfos)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ActivityDetailInfoTupleSchemeFactory implements SchemeFactory {
    public ActivityDetailInfoTupleScheme getScheme() {
      return new ActivityDetailInfoTupleScheme();
    }
  }

  private static class ActivityDetailInfoTupleScheme extends TupleScheme<ActivityDetailInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ActivityDetailInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetActivityId()) {
        optionals.set(0);
      }
      if (struct.isSetActivityTitle()) {
        optionals.set(1);
      }
      if (struct.isSetTimeDesc()) {
        optionals.set(2);
      }
      if (struct.isSetContent()) {
        optionals.set(3);
      }
      if (struct.isSetUiType()) {
        optionals.set(4);
      }
      if (struct.isSetUiPackage()) {
        optionals.set(5);
      }
      if (struct.isSetTargetInfos()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetActivityId()) {
        oprot.writeI32(struct.activityId);
      }
      if (struct.isSetActivityTitle()) {
        oprot.writeString(struct.activityTitle);
      }
      if (struct.isSetTimeDesc()) {
        oprot.writeString(struct.timeDesc);
      }
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
      if (struct.isSetUiType()) {
        oprot.writeI32(struct.uiType);
      }
      if (struct.isSetUiPackage()) {
        oprot.writeString(struct.uiPackage);
      }
      if (struct.isSetTargetInfos()) {
        {
          oprot.writeI32(struct.targetInfos.size());
          for (ActivityTargetInfo _iter4 : struct.targetInfos)
          {
            _iter4.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ActivityDetailInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.activityId = iprot.readI32();
        struct.setActivityIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.activityTitle = iprot.readString();
        struct.setActivityTitleIsSet(true);
      }
      if (incoming.get(2)) {
        struct.timeDesc = iprot.readString();
        struct.setTimeDescIsSet(true);
      }
      if (incoming.get(3)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
      if (incoming.get(4)) {
        struct.uiType = iprot.readI32();
        struct.setUiTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.uiPackage = iprot.readString();
        struct.setUiPackageIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.targetInfos = new ArrayList<ActivityTargetInfo>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            ActivityTargetInfo _elem7; // required
            _elem7 = new ActivityTargetInfo();
            _elem7.read(iprot);
            struct.targetInfos.add(_elem7);
          }
        }
        struct.setTargetInfosIsSet(true);
      }
    }
  }

}

