/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.cs;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 领取活动目标奖励
 */
public class CSGetActivityTargetPrizeMsg implements org.apache.thrift.TBase<CSGetActivityTargetPrizeMsg, CSGetActivityTargetPrizeMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CSGetActivityTargetPrizeMsg");

  private static final org.apache.thrift.protocol.TField ACTIVITY_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("activityVersion", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ACTIVITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("activityId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TARGET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("targetId", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CSGetActivityTargetPrizeMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CSGetActivityTargetPrizeMsgTupleSchemeFactory());
  }

  /**
   * 活动版本号
   */
  public int activityVersion; // required
  public int activityId; // required
  /**
   * 目标id
   */
  public int targetId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 活动版本号
     */
    ACTIVITY_VERSION((short)1, "activityVersion"),
    ACTIVITY_ID((short)2, "activityId"),
    /**
     * 目标id
     */
    TARGET_ID((short)3, "targetId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACTIVITY_VERSION
          return ACTIVITY_VERSION;
        case 2: // ACTIVITY_ID
          return ACTIVITY_ID;
        case 3: // TARGET_ID
          return TARGET_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ACTIVITYVERSION_ISSET_ID = 0;
  private static final int __ACTIVITYID_ISSET_ID = 1;
  private static final int __TARGETID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACTIVITY_VERSION, new org.apache.thrift.meta_data.FieldMetaData("activityVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACTIVITY_ID, new org.apache.thrift.meta_data.FieldMetaData("activityId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TARGET_ID, new org.apache.thrift.meta_data.FieldMetaData("targetId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CSGetActivityTargetPrizeMsg.class, metaDataMap);
  }

  public CSGetActivityTargetPrizeMsg() {
  }

  public CSGetActivityTargetPrizeMsg(
    int activityVersion,
    int activityId,
    int targetId)
  {
    this();
    this.activityVersion = activityVersion;
    setActivityVersionIsSet(true);
    this.activityId = activityId;
    setActivityIdIsSet(true);
    this.targetId = targetId;
    setTargetIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CSGetActivityTargetPrizeMsg(CSGetActivityTargetPrizeMsg other) {
    __isset_bitfield = other.__isset_bitfield;
    this.activityVersion = other.activityVersion;
    this.activityId = other.activityId;
    this.targetId = other.targetId;
  }

  public CSGetActivityTargetPrizeMsg deepCopy() {
    return new CSGetActivityTargetPrizeMsg(this);
  }

  @Override
  public void clear() {
    setActivityVersionIsSet(false);
    this.activityVersion = 0;
    setActivityIdIsSet(false);
    this.activityId = 0;
    setTargetIdIsSet(false);
    this.targetId = 0;
  }

  /**
   * 活动版本号
   */
  public int getActivityVersion() {
    return this.activityVersion;
  }

  /**
   * 活动版本号
   */
  public CSGetActivityTargetPrizeMsg setActivityVersion(int activityVersion) {
    this.activityVersion = activityVersion;
    setActivityVersionIsSet(true);
    return this;
  }

  public void unsetActivityVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIVITYVERSION_ISSET_ID);
  }

  /** Returns true if field activityVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetActivityVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTIVITYVERSION_ISSET_ID);
  }

  public void setActivityVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIVITYVERSION_ISSET_ID, value);
  }

  public int getActivityId() {
    return this.activityId;
  }

  public CSGetActivityTargetPrizeMsg setActivityId(int activityId) {
    this.activityId = activityId;
    setActivityIdIsSet(true);
    return this;
  }

  public void unsetActivityId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIVITYID_ISSET_ID);
  }

  /** Returns true if field activityId is set (has been assigned a value) and false otherwise */
  public boolean isSetActivityId() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTIVITYID_ISSET_ID);
  }

  public void setActivityIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIVITYID_ISSET_ID, value);
  }

  /**
   * 目标id
   */
  public int getTargetId() {
    return this.targetId;
  }

  /**
   * 目标id
   */
  public CSGetActivityTargetPrizeMsg setTargetId(int targetId) {
    this.targetId = targetId;
    setTargetIdIsSet(true);
    return this;
  }

  public void unsetTargetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TARGETID_ISSET_ID);
  }

  /** Returns true if field targetId is set (has been assigned a value) and false otherwise */
  public boolean isSetTargetId() {
    return EncodingUtils.testBit(__isset_bitfield, __TARGETID_ISSET_ID);
  }

  public void setTargetIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TARGETID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ACTIVITY_VERSION:
      if (value == null) {
        unsetActivityVersion();
      } else {
        setActivityVersion((Integer)value);
      }
      break;

    case ACTIVITY_ID:
      if (value == null) {
        unsetActivityId();
      } else {
        setActivityId((Integer)value);
      }
      break;

    case TARGET_ID:
      if (value == null) {
        unsetTargetId();
      } else {
        setTargetId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ACTIVITY_VERSION:
      return Integer.valueOf(getActivityVersion());

    case ACTIVITY_ID:
      return Integer.valueOf(getActivityId());

    case TARGET_ID:
      return Integer.valueOf(getTargetId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ACTIVITY_VERSION:
      return isSetActivityVersion();
    case ACTIVITY_ID:
      return isSetActivityId();
    case TARGET_ID:
      return isSetTargetId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CSGetActivityTargetPrizeMsg)
      return this.equals((CSGetActivityTargetPrizeMsg)that);
    return false;
  }

  public boolean equals(CSGetActivityTargetPrizeMsg that) {
    if (that == null)
      return false;

    boolean this_present_activityVersion = true;
    boolean that_present_activityVersion = true;
    if (this_present_activityVersion || that_present_activityVersion) {
      if (!(this_present_activityVersion && that_present_activityVersion))
        return false;
      if (this.activityVersion != that.activityVersion)
        return false;
    }

    boolean this_present_activityId = true;
    boolean that_present_activityId = true;
    if (this_present_activityId || that_present_activityId) {
      if (!(this_present_activityId && that_present_activityId))
        return false;
      if (this.activityId != that.activityId)
        return false;
    }

    boolean this_present_targetId = true;
    boolean that_present_targetId = true;
    if (this_present_targetId || that_present_targetId) {
      if (!(this_present_targetId && that_present_targetId))
        return false;
      if (this.targetId != that.targetId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(CSGetActivityTargetPrizeMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CSGetActivityTargetPrizeMsg typedOther = (CSGetActivityTargetPrizeMsg)other;

    lastComparison = Boolean.valueOf(isSetActivityVersion()).compareTo(typedOther.isSetActivityVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActivityVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activityVersion, typedOther.activityVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActivityId()).compareTo(typedOther.isSetActivityId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActivityId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activityId, typedOther.activityId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTargetId()).compareTo(typedOther.isSetTargetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTargetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targetId, typedOther.targetId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CSGetActivityTargetPrizeMsg(");
    boolean first = true;

    sb.append("activityVersion:");
    sb.append(this.activityVersion);
    first = false;
    if (!first) sb.append(", ");
    sb.append("activityId:");
    sb.append(this.activityId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("targetId:");
    sb.append(this.targetId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CSGetActivityTargetPrizeMsgStandardSchemeFactory implements SchemeFactory {
    public CSGetActivityTargetPrizeMsgStandardScheme getScheme() {
      return new CSGetActivityTargetPrizeMsgStandardScheme();
    }
  }

  private static class CSGetActivityTargetPrizeMsgStandardScheme extends StandardScheme<CSGetActivityTargetPrizeMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CSGetActivityTargetPrizeMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ACTIVITY_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.activityVersion = iprot.readI32();
              struct.setActivityVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ACTIVITY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.activityId = iprot.readI32();
              struct.setActivityIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TARGET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.targetId = iprot.readI32();
              struct.setTargetIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CSGetActivityTargetPrizeMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ACTIVITY_VERSION_FIELD_DESC);
      oprot.writeI32(struct.activityVersion);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACTIVITY_ID_FIELD_DESC);
      oprot.writeI32(struct.activityId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TARGET_ID_FIELD_DESC);
      oprot.writeI32(struct.targetId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CSGetActivityTargetPrizeMsgTupleSchemeFactory implements SchemeFactory {
    public CSGetActivityTargetPrizeMsgTupleScheme getScheme() {
      return new CSGetActivityTargetPrizeMsgTupleScheme();
    }
  }

  private static class CSGetActivityTargetPrizeMsgTupleScheme extends TupleScheme<CSGetActivityTargetPrizeMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CSGetActivityTargetPrizeMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetActivityVersion()) {
        optionals.set(0);
      }
      if (struct.isSetActivityId()) {
        optionals.set(1);
      }
      if (struct.isSetTargetId()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetActivityVersion()) {
        oprot.writeI32(struct.activityVersion);
      }
      if (struct.isSetActivityId()) {
        oprot.writeI32(struct.activityId);
      }
      if (struct.isSetTargetId()) {
        oprot.writeI32(struct.targetId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CSGetActivityTargetPrizeMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.activityVersion = iprot.readI32();
        struct.setActivityVersionIsSet(true);
      }
      if (incoming.get(1)) {
        struct.activityId = iprot.readI32();
        struct.setActivityIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.targetId = iprot.readI32();
        struct.setTargetIdIsSet(true);
      }
    }
  }

}

