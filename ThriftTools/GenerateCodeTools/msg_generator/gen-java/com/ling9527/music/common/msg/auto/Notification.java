/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Notification implements org.apache.thrift.TBase<Notification, Notification._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Notification");

  private static final org.apache.thrift.protocol.TField NOTIFICATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("notificationId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField LANG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("langId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField LANG_ARGV_FIELD_DESC = new org.apache.thrift.protocol.TField("langArgv", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField NOTIFICATION_ARGV_FIELD_DESC = new org.apache.thrift.protocol.TField("notificationArgv", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField SEND_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("sendTime", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField SENDER_HEAD_ICON_FIELD_DESC = new org.apache.thrift.protocol.TField("senderHeadIcon", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField HEADER_FASHION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("headerFashionId", org.apache.thrift.protocol.TType.I16, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new NotificationStandardSchemeFactory());
    schemes.put(TupleScheme.class, new NotificationTupleSchemeFactory());
  }

  public long notificationId; // required
  /**
   * 多语言提示ID
   */
  public int langId; // required
  /**
   * 多语言提示参数
   */
  public List<String> langArgv; // required
  /**
   * 通知类型
   * 
   * @see NotificationType
   */
  public NotificationType type; // required
  /**
   * 通知类型相关参数，如添加好友通知，会有对方的charId
   */
  public List<String> notificationArgv; // required
  public int sendTime; // required
  public String senderHeadIcon; // required
  /**
   * 头像框时尚id
   */
  public short headerFashionId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NOTIFICATION_ID((short)1, "notificationId"),
    /**
     * 多语言提示ID
     */
    LANG_ID((short)2, "langId"),
    /**
     * 多语言提示参数
     */
    LANG_ARGV((short)3, "langArgv"),
    /**
     * 通知类型
     * 
     * @see NotificationType
     */
    TYPE((short)4, "type"),
    /**
     * 通知类型相关参数，如添加好友通知，会有对方的charId
     */
    NOTIFICATION_ARGV((short)5, "notificationArgv"),
    SEND_TIME((short)6, "sendTime"),
    SENDER_HEAD_ICON((short)7, "senderHeadIcon"),
    /**
     * 头像框时尚id
     */
    HEADER_FASHION_ID((short)8, "headerFashionId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NOTIFICATION_ID
          return NOTIFICATION_ID;
        case 2: // LANG_ID
          return LANG_ID;
        case 3: // LANG_ARGV
          return LANG_ARGV;
        case 4: // TYPE
          return TYPE;
        case 5: // NOTIFICATION_ARGV
          return NOTIFICATION_ARGV;
        case 6: // SEND_TIME
          return SEND_TIME;
        case 7: // SENDER_HEAD_ICON
          return SENDER_HEAD_ICON;
        case 8: // HEADER_FASHION_ID
          return HEADER_FASHION_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NOTIFICATIONID_ISSET_ID = 0;
  private static final int __LANGID_ISSET_ID = 1;
  private static final int __SENDTIME_ISSET_ID = 2;
  private static final int __HEADERFASHIONID_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NOTIFICATION_ID, new org.apache.thrift.meta_data.FieldMetaData("notificationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LANG_ID, new org.apache.thrift.meta_data.FieldMetaData("langId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LANG_ARGV, new org.apache.thrift.meta_data.FieldMetaData("langArgv", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, NotificationType.class)));
    tmpMap.put(_Fields.NOTIFICATION_ARGV, new org.apache.thrift.meta_data.FieldMetaData("notificationArgv", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SEND_TIME, new org.apache.thrift.meta_data.FieldMetaData("sendTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SENDER_HEAD_ICON, new org.apache.thrift.meta_data.FieldMetaData("senderHeadIcon", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HEADER_FASHION_ID, new org.apache.thrift.meta_data.FieldMetaData("headerFashionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Notification.class, metaDataMap);
  }

  public Notification() {
  }

  public Notification(
    long notificationId,
    int langId,
    List<String> langArgv,
    NotificationType type,
    List<String> notificationArgv,
    int sendTime,
    String senderHeadIcon,
    short headerFashionId)
  {
    this();
    this.notificationId = notificationId;
    setNotificationIdIsSet(true);
    this.langId = langId;
    setLangIdIsSet(true);
    this.langArgv = langArgv;
    this.type = type;
    this.notificationArgv = notificationArgv;
    this.sendTime = sendTime;
    setSendTimeIsSet(true);
    this.senderHeadIcon = senderHeadIcon;
    this.headerFashionId = headerFashionId;
    setHeaderFashionIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Notification(Notification other) {
    __isset_bitfield = other.__isset_bitfield;
    this.notificationId = other.notificationId;
    this.langId = other.langId;
    if (other.isSetLangArgv()) {
      List<String> __this__langArgv = new ArrayList<String>();
      for (String other_element : other.langArgv) {
        __this__langArgv.add(other_element);
      }
      this.langArgv = __this__langArgv;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetNotificationArgv()) {
      List<String> __this__notificationArgv = new ArrayList<String>();
      for (String other_element : other.notificationArgv) {
        __this__notificationArgv.add(other_element);
      }
      this.notificationArgv = __this__notificationArgv;
    }
    this.sendTime = other.sendTime;
    if (other.isSetSenderHeadIcon()) {
      this.senderHeadIcon = other.senderHeadIcon;
    }
    this.headerFashionId = other.headerFashionId;
  }

  public Notification deepCopy() {
    return new Notification(this);
  }

  @Override
  public void clear() {
    setNotificationIdIsSet(false);
    this.notificationId = 0;
    setLangIdIsSet(false);
    this.langId = 0;
    this.langArgv = null;
    this.type = null;
    this.notificationArgv = null;
    setSendTimeIsSet(false);
    this.sendTime = 0;
    this.senderHeadIcon = null;
    setHeaderFashionIdIsSet(false);
    this.headerFashionId = 0;
  }

  public long getNotificationId() {
    return this.notificationId;
  }

  public Notification setNotificationId(long notificationId) {
    this.notificationId = notificationId;
    setNotificationIdIsSet(true);
    return this;
  }

  public void unsetNotificationId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOTIFICATIONID_ISSET_ID);
  }

  /** Returns true if field notificationId is set (has been assigned a value) and false otherwise */
  public boolean isSetNotificationId() {
    return EncodingUtils.testBit(__isset_bitfield, __NOTIFICATIONID_ISSET_ID);
  }

  public void setNotificationIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOTIFICATIONID_ISSET_ID, value);
  }

  /**
   * 多语言提示ID
   */
  public int getLangId() {
    return this.langId;
  }

  /**
   * 多语言提示ID
   */
  public Notification setLangId(int langId) {
    this.langId = langId;
    setLangIdIsSet(true);
    return this;
  }

  public void unsetLangId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LANGID_ISSET_ID);
  }

  /** Returns true if field langId is set (has been assigned a value) and false otherwise */
  public boolean isSetLangId() {
    return EncodingUtils.testBit(__isset_bitfield, __LANGID_ISSET_ID);
  }

  public void setLangIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LANGID_ISSET_ID, value);
  }

  public int getLangArgvSize() {
    return (this.langArgv == null) ? 0 : this.langArgv.size();
  }

  public java.util.Iterator<String> getLangArgvIterator() {
    return (this.langArgv == null) ? null : this.langArgv.iterator();
  }

  public void addToLangArgv(String elem) {
    if (this.langArgv == null) {
      this.langArgv = new ArrayList<String>();
    }
    this.langArgv.add(elem);
  }

  /**
   * 多语言提示参数
   */
  public List<String> getLangArgv() {
    return this.langArgv;
  }

  /**
   * 多语言提示参数
   */
  public Notification setLangArgv(List<String> langArgv) {
    this.langArgv = langArgv;
    return this;
  }

  public void unsetLangArgv() {
    this.langArgv = null;
  }

  /** Returns true if field langArgv is set (has been assigned a value) and false otherwise */
  public boolean isSetLangArgv() {
    return this.langArgv != null;
  }

  public void setLangArgvIsSet(boolean value) {
    if (!value) {
      this.langArgv = null;
    }
  }

  /**
   * 通知类型
   * 
   * @see NotificationType
   */
  public NotificationType getType() {
    return this.type;
  }

  /**
   * 通知类型
   * 
   * @see NotificationType
   */
  public Notification setType(NotificationType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public int getNotificationArgvSize() {
    return (this.notificationArgv == null) ? 0 : this.notificationArgv.size();
  }

  public java.util.Iterator<String> getNotificationArgvIterator() {
    return (this.notificationArgv == null) ? null : this.notificationArgv.iterator();
  }

  public void addToNotificationArgv(String elem) {
    if (this.notificationArgv == null) {
      this.notificationArgv = new ArrayList<String>();
    }
    this.notificationArgv.add(elem);
  }

  /**
   * 通知类型相关参数，如添加好友通知，会有对方的charId
   */
  public List<String> getNotificationArgv() {
    return this.notificationArgv;
  }

  /**
   * 通知类型相关参数，如添加好友通知，会有对方的charId
   */
  public Notification setNotificationArgv(List<String> notificationArgv) {
    this.notificationArgv = notificationArgv;
    return this;
  }

  public void unsetNotificationArgv() {
    this.notificationArgv = null;
  }

  /** Returns true if field notificationArgv is set (has been assigned a value) and false otherwise */
  public boolean isSetNotificationArgv() {
    return this.notificationArgv != null;
  }

  public void setNotificationArgvIsSet(boolean value) {
    if (!value) {
      this.notificationArgv = null;
    }
  }

  public int getSendTime() {
    return this.sendTime;
  }

  public Notification setSendTime(int sendTime) {
    this.sendTime = sendTime;
    setSendTimeIsSet(true);
    return this;
  }

  public void unsetSendTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SENDTIME_ISSET_ID);
  }

  /** Returns true if field sendTime is set (has been assigned a value) and false otherwise */
  public boolean isSetSendTime() {
    return EncodingUtils.testBit(__isset_bitfield, __SENDTIME_ISSET_ID);
  }

  public void setSendTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SENDTIME_ISSET_ID, value);
  }

  public String getSenderHeadIcon() {
    return this.senderHeadIcon;
  }

  public Notification setSenderHeadIcon(String senderHeadIcon) {
    this.senderHeadIcon = senderHeadIcon;
    return this;
  }

  public void unsetSenderHeadIcon() {
    this.senderHeadIcon = null;
  }

  /** Returns true if field senderHeadIcon is set (has been assigned a value) and false otherwise */
  public boolean isSetSenderHeadIcon() {
    return this.senderHeadIcon != null;
  }

  public void setSenderHeadIconIsSet(boolean value) {
    if (!value) {
      this.senderHeadIcon = null;
    }
  }

  /**
   * 头像框时尚id
   */
  public short getHeaderFashionId() {
    return this.headerFashionId;
  }

  /**
   * 头像框时尚id
   */
  public Notification setHeaderFashionId(short headerFashionId) {
    this.headerFashionId = headerFashionId;
    setHeaderFashionIdIsSet(true);
    return this;
  }

  public void unsetHeaderFashionId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HEADERFASHIONID_ISSET_ID);
  }

  /** Returns true if field headerFashionId is set (has been assigned a value) and false otherwise */
  public boolean isSetHeaderFashionId() {
    return EncodingUtils.testBit(__isset_bitfield, __HEADERFASHIONID_ISSET_ID);
  }

  public void setHeaderFashionIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HEADERFASHIONID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NOTIFICATION_ID:
      if (value == null) {
        unsetNotificationId();
      } else {
        setNotificationId((Long)value);
      }
      break;

    case LANG_ID:
      if (value == null) {
        unsetLangId();
      } else {
        setLangId((Integer)value);
      }
      break;

    case LANG_ARGV:
      if (value == null) {
        unsetLangArgv();
      } else {
        setLangArgv((List<String>)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((NotificationType)value);
      }
      break;

    case NOTIFICATION_ARGV:
      if (value == null) {
        unsetNotificationArgv();
      } else {
        setNotificationArgv((List<String>)value);
      }
      break;

    case SEND_TIME:
      if (value == null) {
        unsetSendTime();
      } else {
        setSendTime((Integer)value);
      }
      break;

    case SENDER_HEAD_ICON:
      if (value == null) {
        unsetSenderHeadIcon();
      } else {
        setSenderHeadIcon((String)value);
      }
      break;

    case HEADER_FASHION_ID:
      if (value == null) {
        unsetHeaderFashionId();
      } else {
        setHeaderFashionId((Short)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NOTIFICATION_ID:
      return Long.valueOf(getNotificationId());

    case LANG_ID:
      return Integer.valueOf(getLangId());

    case LANG_ARGV:
      return getLangArgv();

    case TYPE:
      return getType();

    case NOTIFICATION_ARGV:
      return getNotificationArgv();

    case SEND_TIME:
      return Integer.valueOf(getSendTime());

    case SENDER_HEAD_ICON:
      return getSenderHeadIcon();

    case HEADER_FASHION_ID:
      return Short.valueOf(getHeaderFashionId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NOTIFICATION_ID:
      return isSetNotificationId();
    case LANG_ID:
      return isSetLangId();
    case LANG_ARGV:
      return isSetLangArgv();
    case TYPE:
      return isSetType();
    case NOTIFICATION_ARGV:
      return isSetNotificationArgv();
    case SEND_TIME:
      return isSetSendTime();
    case SENDER_HEAD_ICON:
      return isSetSenderHeadIcon();
    case HEADER_FASHION_ID:
      return isSetHeaderFashionId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Notification)
      return this.equals((Notification)that);
    return false;
  }

  public boolean equals(Notification that) {
    if (that == null)
      return false;

    boolean this_present_notificationId = true;
    boolean that_present_notificationId = true;
    if (this_present_notificationId || that_present_notificationId) {
      if (!(this_present_notificationId && that_present_notificationId))
        return false;
      if (this.notificationId != that.notificationId)
        return false;
    }

    boolean this_present_langId = true;
    boolean that_present_langId = true;
    if (this_present_langId || that_present_langId) {
      if (!(this_present_langId && that_present_langId))
        return false;
      if (this.langId != that.langId)
        return false;
    }

    boolean this_present_langArgv = true && this.isSetLangArgv();
    boolean that_present_langArgv = true && that.isSetLangArgv();
    if (this_present_langArgv || that_present_langArgv) {
      if (!(this_present_langArgv && that_present_langArgv))
        return false;
      if (!this.langArgv.equals(that.langArgv))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_notificationArgv = true && this.isSetNotificationArgv();
    boolean that_present_notificationArgv = true && that.isSetNotificationArgv();
    if (this_present_notificationArgv || that_present_notificationArgv) {
      if (!(this_present_notificationArgv && that_present_notificationArgv))
        return false;
      if (!this.notificationArgv.equals(that.notificationArgv))
        return false;
    }

    boolean this_present_sendTime = true;
    boolean that_present_sendTime = true;
    if (this_present_sendTime || that_present_sendTime) {
      if (!(this_present_sendTime && that_present_sendTime))
        return false;
      if (this.sendTime != that.sendTime)
        return false;
    }

    boolean this_present_senderHeadIcon = true && this.isSetSenderHeadIcon();
    boolean that_present_senderHeadIcon = true && that.isSetSenderHeadIcon();
    if (this_present_senderHeadIcon || that_present_senderHeadIcon) {
      if (!(this_present_senderHeadIcon && that_present_senderHeadIcon))
        return false;
      if (!this.senderHeadIcon.equals(that.senderHeadIcon))
        return false;
    }

    boolean this_present_headerFashionId = true;
    boolean that_present_headerFashionId = true;
    if (this_present_headerFashionId || that_present_headerFashionId) {
      if (!(this_present_headerFashionId && that_present_headerFashionId))
        return false;
      if (this.headerFashionId != that.headerFashionId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Notification other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Notification typedOther = (Notification)other;

    lastComparison = Boolean.valueOf(isSetNotificationId()).compareTo(typedOther.isSetNotificationId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotificationId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notificationId, typedOther.notificationId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLangId()).compareTo(typedOther.isSetLangId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLangId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.langId, typedOther.langId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLangArgv()).compareTo(typedOther.isSetLangArgv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLangArgv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.langArgv, typedOther.langArgv);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, typedOther.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotificationArgv()).compareTo(typedOther.isSetNotificationArgv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotificationArgv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notificationArgv, typedOther.notificationArgv);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSendTime()).compareTo(typedOther.isSetSendTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSendTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sendTime, typedOther.sendTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSenderHeadIcon()).compareTo(typedOther.isSetSenderHeadIcon());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSenderHeadIcon()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.senderHeadIcon, typedOther.senderHeadIcon);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeaderFashionId()).compareTo(typedOther.isSetHeaderFashionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeaderFashionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.headerFashionId, typedOther.headerFashionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Notification(");
    boolean first = true;

    sb.append("notificationId:");
    sb.append(this.notificationId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("langId:");
    sb.append(this.langId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("langArgv:");
    if (this.langArgv == null) {
      sb.append("null");
    } else {
      sb.append(this.langArgv);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("notificationArgv:");
    if (this.notificationArgv == null) {
      sb.append("null");
    } else {
      sb.append(this.notificationArgv);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sendTime:");
    sb.append(this.sendTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("senderHeadIcon:");
    if (this.senderHeadIcon == null) {
      sb.append("null");
    } else {
      sb.append(this.senderHeadIcon);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("headerFashionId:");
    sb.append(this.headerFashionId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NotificationStandardSchemeFactory implements SchemeFactory {
    public NotificationStandardScheme getScheme() {
      return new NotificationStandardScheme();
    }
  }

  private static class NotificationStandardScheme extends StandardScheme<Notification> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Notification struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NOTIFICATION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.notificationId = iprot.readI64();
              struct.setNotificationIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LANG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.langId = iprot.readI32();
              struct.setLangIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LANG_ARGV
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list340 = iprot.readListBegin();
                struct.langArgv = new ArrayList<String>(_list340.size);
                for (int _i341 = 0; _i341 < _list340.size; ++_i341)
                {
                  String _elem342; // required
                  _elem342 = iprot.readString();
                  struct.langArgv.add(_elem342);
                }
                iprot.readListEnd();
              }
              struct.setLangArgvIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = NotificationType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NOTIFICATION_ARGV
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list343 = iprot.readListBegin();
                struct.notificationArgv = new ArrayList<String>(_list343.size);
                for (int _i344 = 0; _i344 < _list343.size; ++_i344)
                {
                  String _elem345; // required
                  _elem345 = iprot.readString();
                  struct.notificationArgv.add(_elem345);
                }
                iprot.readListEnd();
              }
              struct.setNotificationArgvIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SEND_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sendTime = iprot.readI32();
              struct.setSendTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SENDER_HEAD_ICON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.senderHeadIcon = iprot.readString();
              struct.setSenderHeadIconIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // HEADER_FASHION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.headerFashionId = iprot.readI16();
              struct.setHeaderFashionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Notification struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NOTIFICATION_ID_FIELD_DESC);
      oprot.writeI64(struct.notificationId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LANG_ID_FIELD_DESC);
      oprot.writeI32(struct.langId);
      oprot.writeFieldEnd();
      if (struct.langArgv != null) {
        oprot.writeFieldBegin(LANG_ARGV_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.langArgv.size()));
          for (String _iter346 : struct.langArgv)
          {
            oprot.writeString(_iter346);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.notificationArgv != null) {
        oprot.writeFieldBegin(NOTIFICATION_ARGV_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.notificationArgv.size()));
          for (String _iter347 : struct.notificationArgv)
          {
            oprot.writeString(_iter347);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SEND_TIME_FIELD_DESC);
      oprot.writeI32(struct.sendTime);
      oprot.writeFieldEnd();
      if (struct.senderHeadIcon != null) {
        oprot.writeFieldBegin(SENDER_HEAD_ICON_FIELD_DESC);
        oprot.writeString(struct.senderHeadIcon);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(HEADER_FASHION_ID_FIELD_DESC);
      oprot.writeI16(struct.headerFashionId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NotificationTupleSchemeFactory implements SchemeFactory {
    public NotificationTupleScheme getScheme() {
      return new NotificationTupleScheme();
    }
  }

  private static class NotificationTupleScheme extends TupleScheme<Notification> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Notification struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetNotificationId()) {
        optionals.set(0);
      }
      if (struct.isSetLangId()) {
        optionals.set(1);
      }
      if (struct.isSetLangArgv()) {
        optionals.set(2);
      }
      if (struct.isSetType()) {
        optionals.set(3);
      }
      if (struct.isSetNotificationArgv()) {
        optionals.set(4);
      }
      if (struct.isSetSendTime()) {
        optionals.set(5);
      }
      if (struct.isSetSenderHeadIcon()) {
        optionals.set(6);
      }
      if (struct.isSetHeaderFashionId()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetNotificationId()) {
        oprot.writeI64(struct.notificationId);
      }
      if (struct.isSetLangId()) {
        oprot.writeI32(struct.langId);
      }
      if (struct.isSetLangArgv()) {
        {
          oprot.writeI32(struct.langArgv.size());
          for (String _iter348 : struct.langArgv)
          {
            oprot.writeString(_iter348);
          }
        }
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetNotificationArgv()) {
        {
          oprot.writeI32(struct.notificationArgv.size());
          for (String _iter349 : struct.notificationArgv)
          {
            oprot.writeString(_iter349);
          }
        }
      }
      if (struct.isSetSendTime()) {
        oprot.writeI32(struct.sendTime);
      }
      if (struct.isSetSenderHeadIcon()) {
        oprot.writeString(struct.senderHeadIcon);
      }
      if (struct.isSetHeaderFashionId()) {
        oprot.writeI16(struct.headerFashionId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Notification struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.notificationId = iprot.readI64();
        struct.setNotificationIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.langId = iprot.readI32();
        struct.setLangIdIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list350 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.langArgv = new ArrayList<String>(_list350.size);
          for (int _i351 = 0; _i351 < _list350.size; ++_i351)
          {
            String _elem352; // required
            _elem352 = iprot.readString();
            struct.langArgv.add(_elem352);
          }
        }
        struct.setLangArgvIsSet(true);
      }
      if (incoming.get(3)) {
        struct.type = NotificationType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list353 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.notificationArgv = new ArrayList<String>(_list353.size);
          for (int _i354 = 0; _i354 < _list353.size; ++_i354)
          {
            String _elem355; // required
            _elem355 = iprot.readString();
            struct.notificationArgv.add(_elem355);
          }
        }
        struct.setNotificationArgvIsSet(true);
      }
      if (incoming.get(5)) {
        struct.sendTime = iprot.readI32();
        struct.setSendTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.senderHeadIcon = iprot.readString();
        struct.setSenderHeadIconIsSet(true);
      }
      if (incoming.get(7)) {
        struct.headerFashionId = iprot.readI16();
        struct.setHeaderFashionIdIsSet(true);
      }
    }
  }

}

