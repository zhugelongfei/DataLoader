/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class AvatarDiyAreaItem implements org.apache.thrift.TBase<AvatarDiyAreaItem, AvatarDiyAreaItem._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AvatarDiyAreaItem");

  private static final org.apache.thrift.protocol.TField COLOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("colorId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField APLHA_FIELD_DESC = new org.apache.thrift.protocol.TField("aplha", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField BRIGHTNESS_FIELD_DESC = new org.apache.thrift.protocol.TField("brightness", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField AREA_FIELD_DESC = new org.apache.thrift.protocol.TField("area", org.apache.thrift.protocol.TType.BYTE, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AvatarDiyAreaItemStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AvatarDiyAreaItemTupleSchemeFactory());
  }

  public int colorId; // required
  public double aplha; // required
  public double brightness; // required
  public byte area; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COLOR_ID((short)1, "colorId"),
    APLHA((short)2, "aplha"),
    BRIGHTNESS((short)3, "brightness"),
    AREA((short)4, "area");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COLOR_ID
          return COLOR_ID;
        case 2: // APLHA
          return APLHA;
        case 3: // BRIGHTNESS
          return BRIGHTNESS;
        case 4: // AREA
          return AREA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COLORID_ISSET_ID = 0;
  private static final int __APLHA_ISSET_ID = 1;
  private static final int __BRIGHTNESS_ISSET_ID = 2;
  private static final int __AREA_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COLOR_ID, new org.apache.thrift.meta_data.FieldMetaData("colorId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.APLHA, new org.apache.thrift.meta_data.FieldMetaData("aplha", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BRIGHTNESS, new org.apache.thrift.meta_data.FieldMetaData("brightness", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.AREA, new org.apache.thrift.meta_data.FieldMetaData("area", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AvatarDiyAreaItem.class, metaDataMap);
  }

  public AvatarDiyAreaItem() {
  }

  public AvatarDiyAreaItem(
    int colorId,
    double aplha,
    double brightness,
    byte area)
  {
    this();
    this.colorId = colorId;
    setColorIdIsSet(true);
    this.aplha = aplha;
    setAplhaIsSet(true);
    this.brightness = brightness;
    setBrightnessIsSet(true);
    this.area = area;
    setAreaIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AvatarDiyAreaItem(AvatarDiyAreaItem other) {
    __isset_bitfield = other.__isset_bitfield;
    this.colorId = other.colorId;
    this.aplha = other.aplha;
    this.brightness = other.brightness;
    this.area = other.area;
  }

  public AvatarDiyAreaItem deepCopy() {
    return new AvatarDiyAreaItem(this);
  }

  @Override
  public void clear() {
    setColorIdIsSet(false);
    this.colorId = 0;
    setAplhaIsSet(false);
    this.aplha = 0.0;
    setBrightnessIsSet(false);
    this.brightness = 0.0;
    setAreaIsSet(false);
    this.area = 0;
  }

  public int getColorId() {
    return this.colorId;
  }

  public AvatarDiyAreaItem setColorId(int colorId) {
    this.colorId = colorId;
    setColorIdIsSet(true);
    return this;
  }

  public void unsetColorId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COLORID_ISSET_ID);
  }

  /** Returns true if field colorId is set (has been assigned a value) and false otherwise */
  public boolean isSetColorId() {
    return EncodingUtils.testBit(__isset_bitfield, __COLORID_ISSET_ID);
  }

  public void setColorIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COLORID_ISSET_ID, value);
  }

  public double getAplha() {
    return this.aplha;
  }

  public AvatarDiyAreaItem setAplha(double aplha) {
    this.aplha = aplha;
    setAplhaIsSet(true);
    return this;
  }

  public void unsetAplha() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APLHA_ISSET_ID);
  }

  /** Returns true if field aplha is set (has been assigned a value) and false otherwise */
  public boolean isSetAplha() {
    return EncodingUtils.testBit(__isset_bitfield, __APLHA_ISSET_ID);
  }

  public void setAplhaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APLHA_ISSET_ID, value);
  }

  public double getBrightness() {
    return this.brightness;
  }

  public AvatarDiyAreaItem setBrightness(double brightness) {
    this.brightness = brightness;
    setBrightnessIsSet(true);
    return this;
  }

  public void unsetBrightness() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BRIGHTNESS_ISSET_ID);
  }

  /** Returns true if field brightness is set (has been assigned a value) and false otherwise */
  public boolean isSetBrightness() {
    return EncodingUtils.testBit(__isset_bitfield, __BRIGHTNESS_ISSET_ID);
  }

  public void setBrightnessIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BRIGHTNESS_ISSET_ID, value);
  }

  public byte getArea() {
    return this.area;
  }

  public AvatarDiyAreaItem setArea(byte area) {
    this.area = area;
    setAreaIsSet(true);
    return this;
  }

  public void unsetArea() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AREA_ISSET_ID);
  }

  /** Returns true if field area is set (has been assigned a value) and false otherwise */
  public boolean isSetArea() {
    return EncodingUtils.testBit(__isset_bitfield, __AREA_ISSET_ID);
  }

  public void setAreaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AREA_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COLOR_ID:
      if (value == null) {
        unsetColorId();
      } else {
        setColorId((Integer)value);
      }
      break;

    case APLHA:
      if (value == null) {
        unsetAplha();
      } else {
        setAplha((Double)value);
      }
      break;

    case BRIGHTNESS:
      if (value == null) {
        unsetBrightness();
      } else {
        setBrightness((Double)value);
      }
      break;

    case AREA:
      if (value == null) {
        unsetArea();
      } else {
        setArea((Byte)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COLOR_ID:
      return Integer.valueOf(getColorId());

    case APLHA:
      return Double.valueOf(getAplha());

    case BRIGHTNESS:
      return Double.valueOf(getBrightness());

    case AREA:
      return Byte.valueOf(getArea());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COLOR_ID:
      return isSetColorId();
    case APLHA:
      return isSetAplha();
    case BRIGHTNESS:
      return isSetBrightness();
    case AREA:
      return isSetArea();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AvatarDiyAreaItem)
      return this.equals((AvatarDiyAreaItem)that);
    return false;
  }

  public boolean equals(AvatarDiyAreaItem that) {
    if (that == null)
      return false;

    boolean this_present_colorId = true;
    boolean that_present_colorId = true;
    if (this_present_colorId || that_present_colorId) {
      if (!(this_present_colorId && that_present_colorId))
        return false;
      if (this.colorId != that.colorId)
        return false;
    }

    boolean this_present_aplha = true;
    boolean that_present_aplha = true;
    if (this_present_aplha || that_present_aplha) {
      if (!(this_present_aplha && that_present_aplha))
        return false;
      if (this.aplha != that.aplha)
        return false;
    }

    boolean this_present_brightness = true;
    boolean that_present_brightness = true;
    if (this_present_brightness || that_present_brightness) {
      if (!(this_present_brightness && that_present_brightness))
        return false;
      if (this.brightness != that.brightness)
        return false;
    }

    boolean this_present_area = true;
    boolean that_present_area = true;
    if (this_present_area || that_present_area) {
      if (!(this_present_area && that_present_area))
        return false;
      if (this.area != that.area)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(AvatarDiyAreaItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    AvatarDiyAreaItem typedOther = (AvatarDiyAreaItem)other;

    lastComparison = Boolean.valueOf(isSetColorId()).compareTo(typedOther.isSetColorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.colorId, typedOther.colorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAplha()).compareTo(typedOther.isSetAplha());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAplha()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aplha, typedOther.aplha);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrightness()).compareTo(typedOther.isSetBrightness());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrightness()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brightness, typedOther.brightness);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArea()).compareTo(typedOther.isSetArea());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArea()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.area, typedOther.area);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AvatarDiyAreaItem(");
    boolean first = true;

    sb.append("colorId:");
    sb.append(this.colorId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("aplha:");
    sb.append(this.aplha);
    first = false;
    if (!first) sb.append(", ");
    sb.append("brightness:");
    sb.append(this.brightness);
    first = false;
    if (!first) sb.append(", ");
    sb.append("area:");
    sb.append(this.area);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AvatarDiyAreaItemStandardSchemeFactory implements SchemeFactory {
    public AvatarDiyAreaItemStandardScheme getScheme() {
      return new AvatarDiyAreaItemStandardScheme();
    }
  }

  private static class AvatarDiyAreaItemStandardScheme extends StandardScheme<AvatarDiyAreaItem> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AvatarDiyAreaItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COLOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.colorId = iprot.readI32();
              struct.setColorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // APLHA
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.aplha = iprot.readDouble();
              struct.setAplhaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BRIGHTNESS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.brightness = iprot.readDouble();
              struct.setBrightnessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // AREA
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.area = iprot.readByte();
              struct.setAreaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AvatarDiyAreaItem struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(COLOR_ID_FIELD_DESC);
      oprot.writeI32(struct.colorId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(APLHA_FIELD_DESC);
      oprot.writeDouble(struct.aplha);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BRIGHTNESS_FIELD_DESC);
      oprot.writeDouble(struct.brightness);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AREA_FIELD_DESC);
      oprot.writeByte(struct.area);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AvatarDiyAreaItemTupleSchemeFactory implements SchemeFactory {
    public AvatarDiyAreaItemTupleScheme getScheme() {
      return new AvatarDiyAreaItemTupleScheme();
    }
  }

  private static class AvatarDiyAreaItemTupleScheme extends TupleScheme<AvatarDiyAreaItem> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AvatarDiyAreaItem struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetColorId()) {
        optionals.set(0);
      }
      if (struct.isSetAplha()) {
        optionals.set(1);
      }
      if (struct.isSetBrightness()) {
        optionals.set(2);
      }
      if (struct.isSetArea()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetColorId()) {
        oprot.writeI32(struct.colorId);
      }
      if (struct.isSetAplha()) {
        oprot.writeDouble(struct.aplha);
      }
      if (struct.isSetBrightness()) {
        oprot.writeDouble(struct.brightness);
      }
      if (struct.isSetArea()) {
        oprot.writeByte(struct.area);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AvatarDiyAreaItem struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.colorId = iprot.readI32();
        struct.setColorIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.aplha = iprot.readDouble();
        struct.setAplhaIsSet(true);
      }
      if (incoming.get(2)) {
        struct.brightness = iprot.readDouble();
        struct.setBrightnessIsSet(true);
      }
      if (incoming.get(3)) {
        struct.area = iprot.readByte();
        struct.setAreaIsSet(true);
      }
    }
  }

}

