/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class UserPrizeInfo implements org.apache.thrift.TBase<UserPrizeInfo, UserPrizeInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserPrizeInfo");

  private static final org.apache.thrift.protocol.TField REASON_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("reasonInfo", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PRIZE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("prizeName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PRIZE_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("prizeInfos", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserPrizeInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserPrizeInfoTupleSchemeFactory());
  }

  public String reasonInfo; // required
  public String prizeName; // required
  /**
   * 奖励
   */
  public PrizeInfo prizeInfos; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    REASON_INFO((short)1, "reasonInfo"),
    PRIZE_NAME((short)2, "prizeName"),
    /**
     * 奖励
     */
    PRIZE_INFOS((short)3, "prizeInfos");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REASON_INFO
          return REASON_INFO;
        case 2: // PRIZE_NAME
          return PRIZE_NAME;
        case 3: // PRIZE_INFOS
          return PRIZE_INFOS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.PRIZE_INFOS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REASON_INFO, new org.apache.thrift.meta_data.FieldMetaData("reasonInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRIZE_NAME, new org.apache.thrift.meta_data.FieldMetaData("prizeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRIZE_INFOS, new org.apache.thrift.meta_data.FieldMetaData("prizeInfos", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrizeInfo.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserPrizeInfo.class, metaDataMap);
  }

  public UserPrizeInfo() {
  }

  public UserPrizeInfo(
    String reasonInfo,
    String prizeName)
  {
    this();
    this.reasonInfo = reasonInfo;
    this.prizeName = prizeName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserPrizeInfo(UserPrizeInfo other) {
    if (other.isSetReasonInfo()) {
      this.reasonInfo = other.reasonInfo;
    }
    if (other.isSetPrizeName()) {
      this.prizeName = other.prizeName;
    }
    if (other.isSetPrizeInfos()) {
      this.prizeInfos = new PrizeInfo(other.prizeInfos);
    }
  }

  public UserPrizeInfo deepCopy() {
    return new UserPrizeInfo(this);
  }

  @Override
  public void clear() {
    this.reasonInfo = null;
    this.prizeName = null;
    this.prizeInfos = null;
  }

  public String getReasonInfo() {
    return this.reasonInfo;
  }

  public UserPrizeInfo setReasonInfo(String reasonInfo) {
    this.reasonInfo = reasonInfo;
    return this;
  }

  public void unsetReasonInfo() {
    this.reasonInfo = null;
  }

  /** Returns true if field reasonInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetReasonInfo() {
    return this.reasonInfo != null;
  }

  public void setReasonInfoIsSet(boolean value) {
    if (!value) {
      this.reasonInfo = null;
    }
  }

  public String getPrizeName() {
    return this.prizeName;
  }

  public UserPrizeInfo setPrizeName(String prizeName) {
    this.prizeName = prizeName;
    return this;
  }

  public void unsetPrizeName() {
    this.prizeName = null;
  }

  /** Returns true if field prizeName is set (has been assigned a value) and false otherwise */
  public boolean isSetPrizeName() {
    return this.prizeName != null;
  }

  public void setPrizeNameIsSet(boolean value) {
    if (!value) {
      this.prizeName = null;
    }
  }

  /**
   * 奖励
   */
  public PrizeInfo getPrizeInfos() {
    return this.prizeInfos;
  }

  /**
   * 奖励
   */
  public UserPrizeInfo setPrizeInfos(PrizeInfo prizeInfos) {
    this.prizeInfos = prizeInfos;
    return this;
  }

  public void unsetPrizeInfos() {
    this.prizeInfos = null;
  }

  /** Returns true if field prizeInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetPrizeInfos() {
    return this.prizeInfos != null;
  }

  public void setPrizeInfosIsSet(boolean value) {
    if (!value) {
      this.prizeInfos = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case REASON_INFO:
      if (value == null) {
        unsetReasonInfo();
      } else {
        setReasonInfo((String)value);
      }
      break;

    case PRIZE_NAME:
      if (value == null) {
        unsetPrizeName();
      } else {
        setPrizeName((String)value);
      }
      break;

    case PRIZE_INFOS:
      if (value == null) {
        unsetPrizeInfos();
      } else {
        setPrizeInfos((PrizeInfo)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case REASON_INFO:
      return getReasonInfo();

    case PRIZE_NAME:
      return getPrizeName();

    case PRIZE_INFOS:
      return getPrizeInfos();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case REASON_INFO:
      return isSetReasonInfo();
    case PRIZE_NAME:
      return isSetPrizeName();
    case PRIZE_INFOS:
      return isSetPrizeInfos();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserPrizeInfo)
      return this.equals((UserPrizeInfo)that);
    return false;
  }

  public boolean equals(UserPrizeInfo that) {
    if (that == null)
      return false;

    boolean this_present_reasonInfo = true && this.isSetReasonInfo();
    boolean that_present_reasonInfo = true && that.isSetReasonInfo();
    if (this_present_reasonInfo || that_present_reasonInfo) {
      if (!(this_present_reasonInfo && that_present_reasonInfo))
        return false;
      if (!this.reasonInfo.equals(that.reasonInfo))
        return false;
    }

    boolean this_present_prizeName = true && this.isSetPrizeName();
    boolean that_present_prizeName = true && that.isSetPrizeName();
    if (this_present_prizeName || that_present_prizeName) {
      if (!(this_present_prizeName && that_present_prizeName))
        return false;
      if (!this.prizeName.equals(that.prizeName))
        return false;
    }

    boolean this_present_prizeInfos = true && this.isSetPrizeInfos();
    boolean that_present_prizeInfos = true && that.isSetPrizeInfos();
    if (this_present_prizeInfos || that_present_prizeInfos) {
      if (!(this_present_prizeInfos && that_present_prizeInfos))
        return false;
      if (!this.prizeInfos.equals(that.prizeInfos))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(UserPrizeInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    UserPrizeInfo typedOther = (UserPrizeInfo)other;

    lastComparison = Boolean.valueOf(isSetReasonInfo()).compareTo(typedOther.isSetReasonInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReasonInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reasonInfo, typedOther.reasonInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrizeName()).compareTo(typedOther.isSetPrizeName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrizeName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prizeName, typedOther.prizeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrizeInfos()).compareTo(typedOther.isSetPrizeInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrizeInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prizeInfos, typedOther.prizeInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserPrizeInfo(");
    boolean first = true;

    sb.append("reasonInfo:");
    if (this.reasonInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.reasonInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("prizeName:");
    if (this.prizeName == null) {
      sb.append("null");
    } else {
      sb.append(this.prizeName);
    }
    first = false;
    if (isSetPrizeInfos()) {
      if (!first) sb.append(", ");
      sb.append("prizeInfos:");
      if (this.prizeInfos == null) {
        sb.append("null");
      } else {
        sb.append(this.prizeInfos);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (prizeInfos != null) {
      prizeInfos.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserPrizeInfoStandardSchemeFactory implements SchemeFactory {
    public UserPrizeInfoStandardScheme getScheme() {
      return new UserPrizeInfoStandardScheme();
    }
  }

  private static class UserPrizeInfoStandardScheme extends StandardScheme<UserPrizeInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserPrizeInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REASON_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reasonInfo = iprot.readString();
              struct.setReasonInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PRIZE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.prizeName = iprot.readString();
              struct.setPrizeNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PRIZE_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.prizeInfos = new PrizeInfo();
              struct.prizeInfos.read(iprot);
              struct.setPrizeInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserPrizeInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.reasonInfo != null) {
        oprot.writeFieldBegin(REASON_INFO_FIELD_DESC);
        oprot.writeString(struct.reasonInfo);
        oprot.writeFieldEnd();
      }
      if (struct.prizeName != null) {
        oprot.writeFieldBegin(PRIZE_NAME_FIELD_DESC);
        oprot.writeString(struct.prizeName);
        oprot.writeFieldEnd();
      }
      if (struct.prizeInfos != null) {
        if (struct.isSetPrizeInfos()) {
          oprot.writeFieldBegin(PRIZE_INFOS_FIELD_DESC);
          struct.prizeInfos.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserPrizeInfoTupleSchemeFactory implements SchemeFactory {
    public UserPrizeInfoTupleScheme getScheme() {
      return new UserPrizeInfoTupleScheme();
    }
  }

  private static class UserPrizeInfoTupleScheme extends TupleScheme<UserPrizeInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserPrizeInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetReasonInfo()) {
        optionals.set(0);
      }
      if (struct.isSetPrizeName()) {
        optionals.set(1);
      }
      if (struct.isSetPrizeInfos()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetReasonInfo()) {
        oprot.writeString(struct.reasonInfo);
      }
      if (struct.isSetPrizeName()) {
        oprot.writeString(struct.prizeName);
      }
      if (struct.isSetPrizeInfos()) {
        struct.prizeInfos.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserPrizeInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.reasonInfo = iprot.readString();
        struct.setReasonInfoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.prizeName = iprot.readString();
        struct.setPrizeNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.prizeInfos = new PrizeInfo();
        struct.prizeInfos.read(iprot);
        struct.setPrizeInfosIsSet(true);
      }
    }
  }

}

