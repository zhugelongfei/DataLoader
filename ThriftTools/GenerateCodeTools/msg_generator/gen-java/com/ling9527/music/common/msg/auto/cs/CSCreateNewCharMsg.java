/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.cs;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CSCreateNewCharMsg implements org.apache.thrift.TBase<CSCreateNewCharMsg, CSCreateNewCharMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CSCreateNewCharMsg");

  private static final org.apache.thrift.protocol.TField SEX_FIELD_DESC = new org.apache.thrift.protocol.TField("sex", org.apache.thrift.protocol.TType.BYTE, (short)1);
  private static final org.apache.thrift.protocol.TField MODEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("modelId", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField HEAD_ICON_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("headIconId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField BODY_ADJ_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("bodyAdjVal", org.apache.thrift.protocol.TType.BYTE, (short)5);
  private static final org.apache.thrift.protocol.TField CONSTELLATION_FIELD_DESC = new org.apache.thrift.protocol.TField("constellation", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField LUCK_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("luckDay", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField BIRTHDAY_FIELD_DESC = new org.apache.thrift.protocol.TField("birthday", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField DIY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("diyId", org.apache.thrift.protocol.TType.I16, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CSCreateNewCharMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CSCreateNewCharMsgTupleSchemeFactory());
  }

  /**
   * 0-male 1-female
   */
  public byte sex; // required
  /**
   * char model, different from sex
   */
  public byte modelId; // required
  /**
   * new char name
   */
  public String name; // required
  /**
   * head icon id
   */
  public String headIconId; // required
  /**
   * body total adjust value
   */
  public byte bodyAdjVal; // required
  /**
   * 
   * @see com.ling9527.music.common.msg.auto.Constellation
   */
  public com.ling9527.music.common.msg.auto.Constellation constellation; // required
  /**
   * 
   * @see com.ling9527.music.common.msg.auto.LuckDay
   */
  public com.ling9527.music.common.msg.auto.LuckDay luckDay; // required
  /**
   * yyyy-MM-dd
   */
  public String birthday; // required
  public short diyId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 0-male 1-female
     */
    SEX((short)1, "sex"),
    /**
     * char model, different from sex
     */
    MODEL_ID((short)2, "modelId"),
    /**
     * new char name
     */
    NAME((short)3, "name"),
    /**
     * head icon id
     */
    HEAD_ICON_ID((short)4, "headIconId"),
    /**
     * body total adjust value
     */
    BODY_ADJ_VAL((short)5, "bodyAdjVal"),
    /**
     * 
     * @see com.ling9527.music.common.msg.auto.Constellation
     */
    CONSTELLATION((short)6, "constellation"),
    /**
     * 
     * @see com.ling9527.music.common.msg.auto.LuckDay
     */
    LUCK_DAY((short)7, "luckDay"),
    /**
     * yyyy-MM-dd
     */
    BIRTHDAY((short)8, "birthday"),
    DIY_ID((short)9, "diyId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SEX
          return SEX;
        case 2: // MODEL_ID
          return MODEL_ID;
        case 3: // NAME
          return NAME;
        case 4: // HEAD_ICON_ID
          return HEAD_ICON_ID;
        case 5: // BODY_ADJ_VAL
          return BODY_ADJ_VAL;
        case 6: // CONSTELLATION
          return CONSTELLATION;
        case 7: // LUCK_DAY
          return LUCK_DAY;
        case 8: // BIRTHDAY
          return BIRTHDAY;
        case 9: // DIY_ID
          return DIY_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SEX_ISSET_ID = 0;
  private static final int __MODELID_ISSET_ID = 1;
  private static final int __BODYADJVAL_ISSET_ID = 2;
  private static final int __DIYID_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SEX, new org.apache.thrift.meta_data.FieldMetaData("sex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.MODEL_ID, new org.apache.thrift.meta_data.FieldMetaData("modelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HEAD_ICON_ID, new org.apache.thrift.meta_data.FieldMetaData("headIconId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BODY_ADJ_VAL, new org.apache.thrift.meta_data.FieldMetaData("bodyAdjVal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.CONSTELLATION, new org.apache.thrift.meta_data.FieldMetaData("constellation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.ling9527.music.common.msg.auto.Constellation.class)));
    tmpMap.put(_Fields.LUCK_DAY, new org.apache.thrift.meta_data.FieldMetaData("luckDay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.ling9527.music.common.msg.auto.LuckDay.class)));
    tmpMap.put(_Fields.BIRTHDAY, new org.apache.thrift.meta_data.FieldMetaData("birthday", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DIY_ID, new org.apache.thrift.meta_data.FieldMetaData("diyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CSCreateNewCharMsg.class, metaDataMap);
  }

  public CSCreateNewCharMsg() {
  }

  public CSCreateNewCharMsg(
    byte sex,
    byte modelId,
    String name,
    String headIconId,
    byte bodyAdjVal,
    com.ling9527.music.common.msg.auto.Constellation constellation,
    com.ling9527.music.common.msg.auto.LuckDay luckDay,
    String birthday,
    short diyId)
  {
    this();
    this.sex = sex;
    setSexIsSet(true);
    this.modelId = modelId;
    setModelIdIsSet(true);
    this.name = name;
    this.headIconId = headIconId;
    this.bodyAdjVal = bodyAdjVal;
    setBodyAdjValIsSet(true);
    this.constellation = constellation;
    this.luckDay = luckDay;
    this.birthday = birthday;
    this.diyId = diyId;
    setDiyIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CSCreateNewCharMsg(CSCreateNewCharMsg other) {
    __isset_bitfield = other.__isset_bitfield;
    this.sex = other.sex;
    this.modelId = other.modelId;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetHeadIconId()) {
      this.headIconId = other.headIconId;
    }
    this.bodyAdjVal = other.bodyAdjVal;
    if (other.isSetConstellation()) {
      this.constellation = other.constellation;
    }
    if (other.isSetLuckDay()) {
      this.luckDay = other.luckDay;
    }
    if (other.isSetBirthday()) {
      this.birthday = other.birthday;
    }
    this.diyId = other.diyId;
  }

  public CSCreateNewCharMsg deepCopy() {
    return new CSCreateNewCharMsg(this);
  }

  @Override
  public void clear() {
    setSexIsSet(false);
    this.sex = 0;
    setModelIdIsSet(false);
    this.modelId = 0;
    this.name = null;
    this.headIconId = null;
    setBodyAdjValIsSet(false);
    this.bodyAdjVal = 0;
    this.constellation = null;
    this.luckDay = null;
    this.birthday = null;
    setDiyIdIsSet(false);
    this.diyId = 0;
  }

  /**
   * 0-male 1-female
   */
  public byte getSex() {
    return this.sex;
  }

  /**
   * 0-male 1-female
   */
  public CSCreateNewCharMsg setSex(byte sex) {
    this.sex = sex;
    setSexIsSet(true);
    return this;
  }

  public void unsetSex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEX_ISSET_ID);
  }

  /** Returns true if field sex is set (has been assigned a value) and false otherwise */
  public boolean isSetSex() {
    return EncodingUtils.testBit(__isset_bitfield, __SEX_ISSET_ID);
  }

  public void setSexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEX_ISSET_ID, value);
  }

  /**
   * char model, different from sex
   */
  public byte getModelId() {
    return this.modelId;
  }

  /**
   * char model, different from sex
   */
  public CSCreateNewCharMsg setModelId(byte modelId) {
    this.modelId = modelId;
    setModelIdIsSet(true);
    return this;
  }

  public void unsetModelId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MODELID_ISSET_ID);
  }

  /** Returns true if field modelId is set (has been assigned a value) and false otherwise */
  public boolean isSetModelId() {
    return EncodingUtils.testBit(__isset_bitfield, __MODELID_ISSET_ID);
  }

  public void setModelIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MODELID_ISSET_ID, value);
  }

  /**
   * new char name
   */
  public String getName() {
    return this.name;
  }

  /**
   * new char name
   */
  public CSCreateNewCharMsg setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  /**
   * head icon id
   */
  public String getHeadIconId() {
    return this.headIconId;
  }

  /**
   * head icon id
   */
  public CSCreateNewCharMsg setHeadIconId(String headIconId) {
    this.headIconId = headIconId;
    return this;
  }

  public void unsetHeadIconId() {
    this.headIconId = null;
  }

  /** Returns true if field headIconId is set (has been assigned a value) and false otherwise */
  public boolean isSetHeadIconId() {
    return this.headIconId != null;
  }

  public void setHeadIconIdIsSet(boolean value) {
    if (!value) {
      this.headIconId = null;
    }
  }

  /**
   * body total adjust value
   */
  public byte getBodyAdjVal() {
    return this.bodyAdjVal;
  }

  /**
   * body total adjust value
   */
  public CSCreateNewCharMsg setBodyAdjVal(byte bodyAdjVal) {
    this.bodyAdjVal = bodyAdjVal;
    setBodyAdjValIsSet(true);
    return this;
  }

  public void unsetBodyAdjVal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BODYADJVAL_ISSET_ID);
  }

  /** Returns true if field bodyAdjVal is set (has been assigned a value) and false otherwise */
  public boolean isSetBodyAdjVal() {
    return EncodingUtils.testBit(__isset_bitfield, __BODYADJVAL_ISSET_ID);
  }

  public void setBodyAdjValIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BODYADJVAL_ISSET_ID, value);
  }

  /**
   * 
   * @see com.ling9527.music.common.msg.auto.Constellation
   */
  public com.ling9527.music.common.msg.auto.Constellation getConstellation() {
    return this.constellation;
  }

  /**
   * 
   * @see com.ling9527.music.common.msg.auto.Constellation
   */
  public CSCreateNewCharMsg setConstellation(com.ling9527.music.common.msg.auto.Constellation constellation) {
    this.constellation = constellation;
    return this;
  }

  public void unsetConstellation() {
    this.constellation = null;
  }

  /** Returns true if field constellation is set (has been assigned a value) and false otherwise */
  public boolean isSetConstellation() {
    return this.constellation != null;
  }

  public void setConstellationIsSet(boolean value) {
    if (!value) {
      this.constellation = null;
    }
  }

  /**
   * 
   * @see com.ling9527.music.common.msg.auto.LuckDay
   */
  public com.ling9527.music.common.msg.auto.LuckDay getLuckDay() {
    return this.luckDay;
  }

  /**
   * 
   * @see com.ling9527.music.common.msg.auto.LuckDay
   */
  public CSCreateNewCharMsg setLuckDay(com.ling9527.music.common.msg.auto.LuckDay luckDay) {
    this.luckDay = luckDay;
    return this;
  }

  public void unsetLuckDay() {
    this.luckDay = null;
  }

  /** Returns true if field luckDay is set (has been assigned a value) and false otherwise */
  public boolean isSetLuckDay() {
    return this.luckDay != null;
  }

  public void setLuckDayIsSet(boolean value) {
    if (!value) {
      this.luckDay = null;
    }
  }

  /**
   * yyyy-MM-dd
   */
  public String getBirthday() {
    return this.birthday;
  }

  /**
   * yyyy-MM-dd
   */
  public CSCreateNewCharMsg setBirthday(String birthday) {
    this.birthday = birthday;
    return this;
  }

  public void unsetBirthday() {
    this.birthday = null;
  }

  /** Returns true if field birthday is set (has been assigned a value) and false otherwise */
  public boolean isSetBirthday() {
    return this.birthday != null;
  }

  public void setBirthdayIsSet(boolean value) {
    if (!value) {
      this.birthday = null;
    }
  }

  public short getDiyId() {
    return this.diyId;
  }

  public CSCreateNewCharMsg setDiyId(short diyId) {
    this.diyId = diyId;
    setDiyIdIsSet(true);
    return this;
  }

  public void unsetDiyId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DIYID_ISSET_ID);
  }

  /** Returns true if field diyId is set (has been assigned a value) and false otherwise */
  public boolean isSetDiyId() {
    return EncodingUtils.testBit(__isset_bitfield, __DIYID_ISSET_ID);
  }

  public void setDiyIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DIYID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SEX:
      if (value == null) {
        unsetSex();
      } else {
        setSex((Byte)value);
      }
      break;

    case MODEL_ID:
      if (value == null) {
        unsetModelId();
      } else {
        setModelId((Byte)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case HEAD_ICON_ID:
      if (value == null) {
        unsetHeadIconId();
      } else {
        setHeadIconId((String)value);
      }
      break;

    case BODY_ADJ_VAL:
      if (value == null) {
        unsetBodyAdjVal();
      } else {
        setBodyAdjVal((Byte)value);
      }
      break;

    case CONSTELLATION:
      if (value == null) {
        unsetConstellation();
      } else {
        setConstellation((com.ling9527.music.common.msg.auto.Constellation)value);
      }
      break;

    case LUCK_DAY:
      if (value == null) {
        unsetLuckDay();
      } else {
        setLuckDay((com.ling9527.music.common.msg.auto.LuckDay)value);
      }
      break;

    case BIRTHDAY:
      if (value == null) {
        unsetBirthday();
      } else {
        setBirthday((String)value);
      }
      break;

    case DIY_ID:
      if (value == null) {
        unsetDiyId();
      } else {
        setDiyId((Short)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SEX:
      return Byte.valueOf(getSex());

    case MODEL_ID:
      return Byte.valueOf(getModelId());

    case NAME:
      return getName();

    case HEAD_ICON_ID:
      return getHeadIconId();

    case BODY_ADJ_VAL:
      return Byte.valueOf(getBodyAdjVal());

    case CONSTELLATION:
      return getConstellation();

    case LUCK_DAY:
      return getLuckDay();

    case BIRTHDAY:
      return getBirthday();

    case DIY_ID:
      return Short.valueOf(getDiyId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SEX:
      return isSetSex();
    case MODEL_ID:
      return isSetModelId();
    case NAME:
      return isSetName();
    case HEAD_ICON_ID:
      return isSetHeadIconId();
    case BODY_ADJ_VAL:
      return isSetBodyAdjVal();
    case CONSTELLATION:
      return isSetConstellation();
    case LUCK_DAY:
      return isSetLuckDay();
    case BIRTHDAY:
      return isSetBirthday();
    case DIY_ID:
      return isSetDiyId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CSCreateNewCharMsg)
      return this.equals((CSCreateNewCharMsg)that);
    return false;
  }

  public boolean equals(CSCreateNewCharMsg that) {
    if (that == null)
      return false;

    boolean this_present_sex = true;
    boolean that_present_sex = true;
    if (this_present_sex || that_present_sex) {
      if (!(this_present_sex && that_present_sex))
        return false;
      if (this.sex != that.sex)
        return false;
    }

    boolean this_present_modelId = true;
    boolean that_present_modelId = true;
    if (this_present_modelId || that_present_modelId) {
      if (!(this_present_modelId && that_present_modelId))
        return false;
      if (this.modelId != that.modelId)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_headIconId = true && this.isSetHeadIconId();
    boolean that_present_headIconId = true && that.isSetHeadIconId();
    if (this_present_headIconId || that_present_headIconId) {
      if (!(this_present_headIconId && that_present_headIconId))
        return false;
      if (!this.headIconId.equals(that.headIconId))
        return false;
    }

    boolean this_present_bodyAdjVal = true;
    boolean that_present_bodyAdjVal = true;
    if (this_present_bodyAdjVal || that_present_bodyAdjVal) {
      if (!(this_present_bodyAdjVal && that_present_bodyAdjVal))
        return false;
      if (this.bodyAdjVal != that.bodyAdjVal)
        return false;
    }

    boolean this_present_constellation = true && this.isSetConstellation();
    boolean that_present_constellation = true && that.isSetConstellation();
    if (this_present_constellation || that_present_constellation) {
      if (!(this_present_constellation && that_present_constellation))
        return false;
      if (!this.constellation.equals(that.constellation))
        return false;
    }

    boolean this_present_luckDay = true && this.isSetLuckDay();
    boolean that_present_luckDay = true && that.isSetLuckDay();
    if (this_present_luckDay || that_present_luckDay) {
      if (!(this_present_luckDay && that_present_luckDay))
        return false;
      if (!this.luckDay.equals(that.luckDay))
        return false;
    }

    boolean this_present_birthday = true && this.isSetBirthday();
    boolean that_present_birthday = true && that.isSetBirthday();
    if (this_present_birthday || that_present_birthday) {
      if (!(this_present_birthday && that_present_birthday))
        return false;
      if (!this.birthday.equals(that.birthday))
        return false;
    }

    boolean this_present_diyId = true;
    boolean that_present_diyId = true;
    if (this_present_diyId || that_present_diyId) {
      if (!(this_present_diyId && that_present_diyId))
        return false;
      if (this.diyId != that.diyId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(CSCreateNewCharMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CSCreateNewCharMsg typedOther = (CSCreateNewCharMsg)other;

    lastComparison = Boolean.valueOf(isSetSex()).compareTo(typedOther.isSetSex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sex, typedOther.sex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetModelId()).compareTo(typedOther.isSetModelId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModelId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelId, typedOther.modelId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeadIconId()).compareTo(typedOther.isSetHeadIconId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeadIconId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.headIconId, typedOther.headIconId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBodyAdjVal()).compareTo(typedOther.isSetBodyAdjVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBodyAdjVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bodyAdjVal, typedOther.bodyAdjVal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConstellation()).compareTo(typedOther.isSetConstellation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConstellation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.constellation, typedOther.constellation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLuckDay()).compareTo(typedOther.isSetLuckDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLuckDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.luckDay, typedOther.luckDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBirthday()).compareTo(typedOther.isSetBirthday());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBirthday()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.birthday, typedOther.birthday);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDiyId()).compareTo(typedOther.isSetDiyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDiyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.diyId, typedOther.diyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CSCreateNewCharMsg(");
    boolean first = true;

    sb.append("sex:");
    sb.append(this.sex);
    first = false;
    if (!first) sb.append(", ");
    sb.append("modelId:");
    sb.append(this.modelId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("headIconId:");
    if (this.headIconId == null) {
      sb.append("null");
    } else {
      sb.append(this.headIconId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bodyAdjVal:");
    sb.append(this.bodyAdjVal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("constellation:");
    if (this.constellation == null) {
      sb.append("null");
    } else {
      sb.append(this.constellation);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("luckDay:");
    if (this.luckDay == null) {
      sb.append("null");
    } else {
      sb.append(this.luckDay);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("birthday:");
    if (this.birthday == null) {
      sb.append("null");
    } else {
      sb.append(this.birthday);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("diyId:");
    sb.append(this.diyId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CSCreateNewCharMsgStandardSchemeFactory implements SchemeFactory {
    public CSCreateNewCharMsgStandardScheme getScheme() {
      return new CSCreateNewCharMsgStandardScheme();
    }
  }

  private static class CSCreateNewCharMsgStandardScheme extends StandardScheme<CSCreateNewCharMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CSCreateNewCharMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SEX
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.sex = iprot.readByte();
              struct.setSexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MODEL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.modelId = iprot.readByte();
              struct.setModelIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // HEAD_ICON_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.headIconId = iprot.readString();
              struct.setHeadIconIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BODY_ADJ_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.bodyAdjVal = iprot.readByte();
              struct.setBodyAdjValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CONSTELLATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.constellation = com.ling9527.music.common.msg.auto.Constellation.findByValue(iprot.readI32());
              struct.setConstellationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LUCK_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.luckDay = com.ling9527.music.common.msg.auto.LuckDay.findByValue(iprot.readI32());
              struct.setLuckDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BIRTHDAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.birthday = iprot.readString();
              struct.setBirthdayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DIY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.diyId = iprot.readI16();
              struct.setDiyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CSCreateNewCharMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SEX_FIELD_DESC);
      oprot.writeByte(struct.sex);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MODEL_ID_FIELD_DESC);
      oprot.writeByte(struct.modelId);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.headIconId != null) {
        oprot.writeFieldBegin(HEAD_ICON_ID_FIELD_DESC);
        oprot.writeString(struct.headIconId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BODY_ADJ_VAL_FIELD_DESC);
      oprot.writeByte(struct.bodyAdjVal);
      oprot.writeFieldEnd();
      if (struct.constellation != null) {
        oprot.writeFieldBegin(CONSTELLATION_FIELD_DESC);
        oprot.writeI32(struct.constellation.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.luckDay != null) {
        oprot.writeFieldBegin(LUCK_DAY_FIELD_DESC);
        oprot.writeI32(struct.luckDay.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.birthday != null) {
        oprot.writeFieldBegin(BIRTHDAY_FIELD_DESC);
        oprot.writeString(struct.birthday);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DIY_ID_FIELD_DESC);
      oprot.writeI16(struct.diyId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CSCreateNewCharMsgTupleSchemeFactory implements SchemeFactory {
    public CSCreateNewCharMsgTupleScheme getScheme() {
      return new CSCreateNewCharMsgTupleScheme();
    }
  }

  private static class CSCreateNewCharMsgTupleScheme extends TupleScheme<CSCreateNewCharMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CSCreateNewCharMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSex()) {
        optionals.set(0);
      }
      if (struct.isSetModelId()) {
        optionals.set(1);
      }
      if (struct.isSetName()) {
        optionals.set(2);
      }
      if (struct.isSetHeadIconId()) {
        optionals.set(3);
      }
      if (struct.isSetBodyAdjVal()) {
        optionals.set(4);
      }
      if (struct.isSetConstellation()) {
        optionals.set(5);
      }
      if (struct.isSetLuckDay()) {
        optionals.set(6);
      }
      if (struct.isSetBirthday()) {
        optionals.set(7);
      }
      if (struct.isSetDiyId()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetSex()) {
        oprot.writeByte(struct.sex);
      }
      if (struct.isSetModelId()) {
        oprot.writeByte(struct.modelId);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetHeadIconId()) {
        oprot.writeString(struct.headIconId);
      }
      if (struct.isSetBodyAdjVal()) {
        oprot.writeByte(struct.bodyAdjVal);
      }
      if (struct.isSetConstellation()) {
        oprot.writeI32(struct.constellation.getValue());
      }
      if (struct.isSetLuckDay()) {
        oprot.writeI32(struct.luckDay.getValue());
      }
      if (struct.isSetBirthday()) {
        oprot.writeString(struct.birthday);
      }
      if (struct.isSetDiyId()) {
        oprot.writeI16(struct.diyId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CSCreateNewCharMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.sex = iprot.readByte();
        struct.setSexIsSet(true);
      }
      if (incoming.get(1)) {
        struct.modelId = iprot.readByte();
        struct.setModelIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.headIconId = iprot.readString();
        struct.setHeadIconIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.bodyAdjVal = iprot.readByte();
        struct.setBodyAdjValIsSet(true);
      }
      if (incoming.get(5)) {
        struct.constellation = com.ling9527.music.common.msg.auto.Constellation.findByValue(iprot.readI32());
        struct.setConstellationIsSet(true);
      }
      if (incoming.get(6)) {
        struct.luckDay = com.ling9527.music.common.msg.auto.LuckDay.findByValue(iprot.readI32());
        struct.setLuckDayIsSet(true);
      }
      if (incoming.get(7)) {
        struct.birthday = iprot.readString();
        struct.setBirthdayIsSet(true);
      }
      if (incoming.get(8)) {
        struct.diyId = iprot.readI16();
        struct.setDiyIdIsSet(true);
      }
    }
  }

}

