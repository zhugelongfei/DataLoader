/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SCMallVersionMsg implements org.apache.thrift.TBase<SCMallVersionMsg, SCMallVersionMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCMallVersionMsg");

  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I16, (short)1);
  private static final org.apache.thrift.protocol.TField IS_LIMIT_MALL_FIELD_DESC = new org.apache.thrift.protocol.TField("isLimitMall", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField LIMIT_MALLTIME_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("limitMalltimeDesc", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField LIMIT_MALL_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("limitMallContent", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCMallVersionMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCMallVersionMsgTupleSchemeFactory());
  }

  public short version; // required
  /**
   * 是否限时商城
   */
  public boolean isLimitMall; // optional
  /**
   * 限时商城时间描述
   */
  public String limitMalltimeDesc; // optional
  /**
   * 限时商城内容说明
   */
  public String limitMallContent; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    VERSION((short)1, "version"),
    /**
     * 是否限时商城
     */
    IS_LIMIT_MALL((short)2, "isLimitMall"),
    /**
     * 限时商城时间描述
     */
    LIMIT_MALLTIME_DESC((short)3, "limitMalltimeDesc"),
    /**
     * 限时商城内容说明
     */
    LIMIT_MALL_CONTENT((short)4, "limitMallContent");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VERSION
          return VERSION;
        case 2: // IS_LIMIT_MALL
          return IS_LIMIT_MALL;
        case 3: // LIMIT_MALLTIME_DESC
          return LIMIT_MALLTIME_DESC;
        case 4: // LIMIT_MALL_CONTENT
          return LIMIT_MALL_CONTENT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VERSION_ISSET_ID = 0;
  private static final int __ISLIMITMALL_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.IS_LIMIT_MALL,_Fields.LIMIT_MALLTIME_DESC,_Fields.LIMIT_MALL_CONTENT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.IS_LIMIT_MALL, new org.apache.thrift.meta_data.FieldMetaData("isLimitMall", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.LIMIT_MALLTIME_DESC, new org.apache.thrift.meta_data.FieldMetaData("limitMalltimeDesc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LIMIT_MALL_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("limitMallContent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCMallVersionMsg.class, metaDataMap);
  }

  public SCMallVersionMsg() {
  }

  public SCMallVersionMsg(
    short version)
  {
    this();
    this.version = version;
    setVersionIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCMallVersionMsg(SCMallVersionMsg other) {
    __isset_bitfield = other.__isset_bitfield;
    this.version = other.version;
    this.isLimitMall = other.isLimitMall;
    if (other.isSetLimitMalltimeDesc()) {
      this.limitMalltimeDesc = other.limitMalltimeDesc;
    }
    if (other.isSetLimitMallContent()) {
      this.limitMallContent = other.limitMallContent;
    }
  }

  public SCMallVersionMsg deepCopy() {
    return new SCMallVersionMsg(this);
  }

  @Override
  public void clear() {
    setVersionIsSet(false);
    this.version = 0;
    setIsLimitMallIsSet(false);
    this.isLimitMall = false;
    this.limitMalltimeDesc = null;
    this.limitMallContent = null;
  }

  public short getVersion() {
    return this.version;
  }

  public SCMallVersionMsg setVersion(short version) {
    this.version = version;
    setVersionIsSet(true);
    return this;
  }

  public void unsetVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
  }

  /**
   * 是否限时商城
   */
  public boolean isIsLimitMall() {
    return this.isLimitMall;
  }

  /**
   * 是否限时商城
   */
  public SCMallVersionMsg setIsLimitMall(boolean isLimitMall) {
    this.isLimitMall = isLimitMall;
    setIsLimitMallIsSet(true);
    return this;
  }

  public void unsetIsLimitMall() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISLIMITMALL_ISSET_ID);
  }

  /** Returns true if field isLimitMall is set (has been assigned a value) and false otherwise */
  public boolean isSetIsLimitMall() {
    return EncodingUtils.testBit(__isset_bitfield, __ISLIMITMALL_ISSET_ID);
  }

  public void setIsLimitMallIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISLIMITMALL_ISSET_ID, value);
  }

  /**
   * 限时商城时间描述
   */
  public String getLimitMalltimeDesc() {
    return this.limitMalltimeDesc;
  }

  /**
   * 限时商城时间描述
   */
  public SCMallVersionMsg setLimitMalltimeDesc(String limitMalltimeDesc) {
    this.limitMalltimeDesc = limitMalltimeDesc;
    return this;
  }

  public void unsetLimitMalltimeDesc() {
    this.limitMalltimeDesc = null;
  }

  /** Returns true if field limitMalltimeDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetLimitMalltimeDesc() {
    return this.limitMalltimeDesc != null;
  }

  public void setLimitMalltimeDescIsSet(boolean value) {
    if (!value) {
      this.limitMalltimeDesc = null;
    }
  }

  /**
   * 限时商城内容说明
   */
  public String getLimitMallContent() {
    return this.limitMallContent;
  }

  /**
   * 限时商城内容说明
   */
  public SCMallVersionMsg setLimitMallContent(String limitMallContent) {
    this.limitMallContent = limitMallContent;
    return this;
  }

  public void unsetLimitMallContent() {
    this.limitMallContent = null;
  }

  /** Returns true if field limitMallContent is set (has been assigned a value) and false otherwise */
  public boolean isSetLimitMallContent() {
    return this.limitMallContent != null;
  }

  public void setLimitMallContentIsSet(boolean value) {
    if (!value) {
      this.limitMallContent = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((Short)value);
      }
      break;

    case IS_LIMIT_MALL:
      if (value == null) {
        unsetIsLimitMall();
      } else {
        setIsLimitMall((Boolean)value);
      }
      break;

    case LIMIT_MALLTIME_DESC:
      if (value == null) {
        unsetLimitMalltimeDesc();
      } else {
        setLimitMalltimeDesc((String)value);
      }
      break;

    case LIMIT_MALL_CONTENT:
      if (value == null) {
        unsetLimitMallContent();
      } else {
        setLimitMallContent((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case VERSION:
      return Short.valueOf(getVersion());

    case IS_LIMIT_MALL:
      return Boolean.valueOf(isIsLimitMall());

    case LIMIT_MALLTIME_DESC:
      return getLimitMalltimeDesc();

    case LIMIT_MALL_CONTENT:
      return getLimitMallContent();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case VERSION:
      return isSetVersion();
    case IS_LIMIT_MALL:
      return isSetIsLimitMall();
    case LIMIT_MALLTIME_DESC:
      return isSetLimitMalltimeDesc();
    case LIMIT_MALL_CONTENT:
      return isSetLimitMallContent();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCMallVersionMsg)
      return this.equals((SCMallVersionMsg)that);
    return false;
  }

  public boolean equals(SCMallVersionMsg that) {
    if (that == null)
      return false;

    boolean this_present_version = true;
    boolean that_present_version = true;
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    boolean this_present_isLimitMall = true && this.isSetIsLimitMall();
    boolean that_present_isLimitMall = true && that.isSetIsLimitMall();
    if (this_present_isLimitMall || that_present_isLimitMall) {
      if (!(this_present_isLimitMall && that_present_isLimitMall))
        return false;
      if (this.isLimitMall != that.isLimitMall)
        return false;
    }

    boolean this_present_limitMalltimeDesc = true && this.isSetLimitMalltimeDesc();
    boolean that_present_limitMalltimeDesc = true && that.isSetLimitMalltimeDesc();
    if (this_present_limitMalltimeDesc || that_present_limitMalltimeDesc) {
      if (!(this_present_limitMalltimeDesc && that_present_limitMalltimeDesc))
        return false;
      if (!this.limitMalltimeDesc.equals(that.limitMalltimeDesc))
        return false;
    }

    boolean this_present_limitMallContent = true && this.isSetLimitMallContent();
    boolean that_present_limitMallContent = true && that.isSetLimitMallContent();
    if (this_present_limitMallContent || that_present_limitMallContent) {
      if (!(this_present_limitMallContent && that_present_limitMallContent))
        return false;
      if (!this.limitMallContent.equals(that.limitMallContent))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCMallVersionMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCMallVersionMsg typedOther = (SCMallVersionMsg)other;

    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(typedOther.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, typedOther.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsLimitMall()).compareTo(typedOther.isSetIsLimitMall());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsLimitMall()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isLimitMall, typedOther.isLimitMall);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLimitMalltimeDesc()).compareTo(typedOther.isSetLimitMalltimeDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimitMalltimeDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limitMalltimeDesc, typedOther.limitMalltimeDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLimitMallContent()).compareTo(typedOther.isSetLimitMallContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimitMallContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limitMallContent, typedOther.limitMallContent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCMallVersionMsg(");
    boolean first = true;

    sb.append("version:");
    sb.append(this.version);
    first = false;
    if (isSetIsLimitMall()) {
      if (!first) sb.append(", ");
      sb.append("isLimitMall:");
      sb.append(this.isLimitMall);
      first = false;
    }
    if (isSetLimitMalltimeDesc()) {
      if (!first) sb.append(", ");
      sb.append("limitMalltimeDesc:");
      if (this.limitMalltimeDesc == null) {
        sb.append("null");
      } else {
        sb.append(this.limitMalltimeDesc);
      }
      first = false;
    }
    if (isSetLimitMallContent()) {
      if (!first) sb.append(", ");
      sb.append("limitMallContent:");
      if (this.limitMallContent == null) {
        sb.append("null");
      } else {
        sb.append(this.limitMallContent);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCMallVersionMsgStandardSchemeFactory implements SchemeFactory {
    public SCMallVersionMsgStandardScheme getScheme() {
      return new SCMallVersionMsgStandardScheme();
    }
  }

  private static class SCMallVersionMsgStandardScheme extends StandardScheme<SCMallVersionMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCMallVersionMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.version = iprot.readI16();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IS_LIMIT_MALL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isLimitMall = iprot.readBool();
              struct.setIsLimitMallIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LIMIT_MALLTIME_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.limitMalltimeDesc = iprot.readString();
              struct.setLimitMalltimeDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LIMIT_MALL_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.limitMallContent = iprot.readString();
              struct.setLimitMallContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCMallVersionMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(VERSION_FIELD_DESC);
      oprot.writeI16(struct.version);
      oprot.writeFieldEnd();
      if (struct.isSetIsLimitMall()) {
        oprot.writeFieldBegin(IS_LIMIT_MALL_FIELD_DESC);
        oprot.writeBool(struct.isLimitMall);
        oprot.writeFieldEnd();
      }
      if (struct.limitMalltimeDesc != null) {
        if (struct.isSetLimitMalltimeDesc()) {
          oprot.writeFieldBegin(LIMIT_MALLTIME_DESC_FIELD_DESC);
          oprot.writeString(struct.limitMalltimeDesc);
          oprot.writeFieldEnd();
        }
      }
      if (struct.limitMallContent != null) {
        if (struct.isSetLimitMallContent()) {
          oprot.writeFieldBegin(LIMIT_MALL_CONTENT_FIELD_DESC);
          oprot.writeString(struct.limitMallContent);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCMallVersionMsgTupleSchemeFactory implements SchemeFactory {
    public SCMallVersionMsgTupleScheme getScheme() {
      return new SCMallVersionMsgTupleScheme();
    }
  }

  private static class SCMallVersionMsgTupleScheme extends TupleScheme<SCMallVersionMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCMallVersionMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetVersion()) {
        optionals.set(0);
      }
      if (struct.isSetIsLimitMall()) {
        optionals.set(1);
      }
      if (struct.isSetLimitMalltimeDesc()) {
        optionals.set(2);
      }
      if (struct.isSetLimitMallContent()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetVersion()) {
        oprot.writeI16(struct.version);
      }
      if (struct.isSetIsLimitMall()) {
        oprot.writeBool(struct.isLimitMall);
      }
      if (struct.isSetLimitMalltimeDesc()) {
        oprot.writeString(struct.limitMalltimeDesc);
      }
      if (struct.isSetLimitMallContent()) {
        oprot.writeString(struct.limitMallContent);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCMallVersionMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.version = iprot.readI16();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(1)) {
        struct.isLimitMall = iprot.readBool();
        struct.setIsLimitMallIsSet(true);
      }
      if (incoming.get(2)) {
        struct.limitMalltimeDesc = iprot.readString();
        struct.setLimitMalltimeDescIsSet(true);
      }
      if (incoming.get(3)) {
        struct.limitMallContent = iprot.readString();
        struct.setLimitMallContentIsSet(true);
      }
    }
  }

}

