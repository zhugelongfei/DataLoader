/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.cs;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CSInviteJoinRoomRespMsg implements org.apache.thrift.TBase<CSInviteJoinRoomRespMsg, CSInviteJoinRoomRespMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CSInviteJoinRoomRespMsg");

  private static final org.apache.thrift.protocol.TField RESP_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("respResult", org.apache.thrift.protocol.TType.BYTE, (short)1);
  private static final org.apache.thrift.protocol.TField ROOM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("roomId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField INVTER_CHAR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("invterCharId", org.apache.thrift.protocol.TType.I64, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CSInviteJoinRoomRespMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CSInviteJoinRoomRespMsgTupleSchemeFactory());
  }

  /**
   * 0- reject 1-agree
   */
  public byte respResult; // required
  /**
   * the inviter char id
   */
  public int roomId; // required
  public long invterCharId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 0- reject 1-agree
     */
    RESP_RESULT((short)1, "respResult"),
    /**
     * the inviter char id
     */
    ROOM_ID((short)2, "roomId"),
    INVTER_CHAR_ID((short)3, "invterCharId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RESP_RESULT
          return RESP_RESULT;
        case 2: // ROOM_ID
          return ROOM_ID;
        case 3: // INVTER_CHAR_ID
          return INVTER_CHAR_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RESPRESULT_ISSET_ID = 0;
  private static final int __ROOMID_ISSET_ID = 1;
  private static final int __INVTERCHARID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RESP_RESULT, new org.apache.thrift.meta_data.FieldMetaData("respResult", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.ROOM_ID, new org.apache.thrift.meta_data.FieldMetaData("roomId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INVTER_CHAR_ID, new org.apache.thrift.meta_data.FieldMetaData("invterCharId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CSInviteJoinRoomRespMsg.class, metaDataMap);
  }

  public CSInviteJoinRoomRespMsg() {
  }

  public CSInviteJoinRoomRespMsg(
    byte respResult,
    int roomId,
    long invterCharId)
  {
    this();
    this.respResult = respResult;
    setRespResultIsSet(true);
    this.roomId = roomId;
    setRoomIdIsSet(true);
    this.invterCharId = invterCharId;
    setInvterCharIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CSInviteJoinRoomRespMsg(CSInviteJoinRoomRespMsg other) {
    __isset_bitfield = other.__isset_bitfield;
    this.respResult = other.respResult;
    this.roomId = other.roomId;
    this.invterCharId = other.invterCharId;
  }

  public CSInviteJoinRoomRespMsg deepCopy() {
    return new CSInviteJoinRoomRespMsg(this);
  }

  @Override
  public void clear() {
    setRespResultIsSet(false);
    this.respResult = 0;
    setRoomIdIsSet(false);
    this.roomId = 0;
    setInvterCharIdIsSet(false);
    this.invterCharId = 0;
  }

  /**
   * 0- reject 1-agree
   */
  public byte getRespResult() {
    return this.respResult;
  }

  /**
   * 0- reject 1-agree
   */
  public CSInviteJoinRoomRespMsg setRespResult(byte respResult) {
    this.respResult = respResult;
    setRespResultIsSet(true);
    return this;
  }

  public void unsetRespResult() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RESPRESULT_ISSET_ID);
  }

  /** Returns true if field respResult is set (has been assigned a value) and false otherwise */
  public boolean isSetRespResult() {
    return EncodingUtils.testBit(__isset_bitfield, __RESPRESULT_ISSET_ID);
  }

  public void setRespResultIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RESPRESULT_ISSET_ID, value);
  }

  /**
   * the inviter char id
   */
  public int getRoomId() {
    return this.roomId;
  }

  /**
   * the inviter char id
   */
  public CSInviteJoinRoomRespMsg setRoomId(int roomId) {
    this.roomId = roomId;
    setRoomIdIsSet(true);
    return this;
  }

  public void unsetRoomId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROOMID_ISSET_ID);
  }

  /** Returns true if field roomId is set (has been assigned a value) and false otherwise */
  public boolean isSetRoomId() {
    return EncodingUtils.testBit(__isset_bitfield, __ROOMID_ISSET_ID);
  }

  public void setRoomIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROOMID_ISSET_ID, value);
  }

  public long getInvterCharId() {
    return this.invterCharId;
  }

  public CSInviteJoinRoomRespMsg setInvterCharId(long invterCharId) {
    this.invterCharId = invterCharId;
    setInvterCharIdIsSet(true);
    return this;
  }

  public void unsetInvterCharId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INVTERCHARID_ISSET_ID);
  }

  /** Returns true if field invterCharId is set (has been assigned a value) and false otherwise */
  public boolean isSetInvterCharId() {
    return EncodingUtils.testBit(__isset_bitfield, __INVTERCHARID_ISSET_ID);
  }

  public void setInvterCharIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INVTERCHARID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RESP_RESULT:
      if (value == null) {
        unsetRespResult();
      } else {
        setRespResult((Byte)value);
      }
      break;

    case ROOM_ID:
      if (value == null) {
        unsetRoomId();
      } else {
        setRoomId((Integer)value);
      }
      break;

    case INVTER_CHAR_ID:
      if (value == null) {
        unsetInvterCharId();
      } else {
        setInvterCharId((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RESP_RESULT:
      return Byte.valueOf(getRespResult());

    case ROOM_ID:
      return Integer.valueOf(getRoomId());

    case INVTER_CHAR_ID:
      return Long.valueOf(getInvterCharId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RESP_RESULT:
      return isSetRespResult();
    case ROOM_ID:
      return isSetRoomId();
    case INVTER_CHAR_ID:
      return isSetInvterCharId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CSInviteJoinRoomRespMsg)
      return this.equals((CSInviteJoinRoomRespMsg)that);
    return false;
  }

  public boolean equals(CSInviteJoinRoomRespMsg that) {
    if (that == null)
      return false;

    boolean this_present_respResult = true;
    boolean that_present_respResult = true;
    if (this_present_respResult || that_present_respResult) {
      if (!(this_present_respResult && that_present_respResult))
        return false;
      if (this.respResult != that.respResult)
        return false;
    }

    boolean this_present_roomId = true;
    boolean that_present_roomId = true;
    if (this_present_roomId || that_present_roomId) {
      if (!(this_present_roomId && that_present_roomId))
        return false;
      if (this.roomId != that.roomId)
        return false;
    }

    boolean this_present_invterCharId = true;
    boolean that_present_invterCharId = true;
    if (this_present_invterCharId || that_present_invterCharId) {
      if (!(this_present_invterCharId && that_present_invterCharId))
        return false;
      if (this.invterCharId != that.invterCharId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(CSInviteJoinRoomRespMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CSInviteJoinRoomRespMsg typedOther = (CSInviteJoinRoomRespMsg)other;

    lastComparison = Boolean.valueOf(isSetRespResult()).compareTo(typedOther.isSetRespResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRespResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.respResult, typedOther.respResult);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRoomId()).compareTo(typedOther.isSetRoomId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoomId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roomId, typedOther.roomId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInvterCharId()).compareTo(typedOther.isSetInvterCharId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvterCharId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invterCharId, typedOther.invterCharId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CSInviteJoinRoomRespMsg(");
    boolean first = true;

    sb.append("respResult:");
    sb.append(this.respResult);
    first = false;
    if (!first) sb.append(", ");
    sb.append("roomId:");
    sb.append(this.roomId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("invterCharId:");
    sb.append(this.invterCharId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CSInviteJoinRoomRespMsgStandardSchemeFactory implements SchemeFactory {
    public CSInviteJoinRoomRespMsgStandardScheme getScheme() {
      return new CSInviteJoinRoomRespMsgStandardScheme();
    }
  }

  private static class CSInviteJoinRoomRespMsgStandardScheme extends StandardScheme<CSInviteJoinRoomRespMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CSInviteJoinRoomRespMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RESP_RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.respResult = iprot.readByte();
              struct.setRespResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ROOM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.roomId = iprot.readI32();
              struct.setRoomIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INVTER_CHAR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.invterCharId = iprot.readI64();
              struct.setInvterCharIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CSInviteJoinRoomRespMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(RESP_RESULT_FIELD_DESC);
      oprot.writeByte(struct.respResult);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROOM_ID_FIELD_DESC);
      oprot.writeI32(struct.roomId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INVTER_CHAR_ID_FIELD_DESC);
      oprot.writeI64(struct.invterCharId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CSInviteJoinRoomRespMsgTupleSchemeFactory implements SchemeFactory {
    public CSInviteJoinRoomRespMsgTupleScheme getScheme() {
      return new CSInviteJoinRoomRespMsgTupleScheme();
    }
  }

  private static class CSInviteJoinRoomRespMsgTupleScheme extends TupleScheme<CSInviteJoinRoomRespMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CSInviteJoinRoomRespMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRespResult()) {
        optionals.set(0);
      }
      if (struct.isSetRoomId()) {
        optionals.set(1);
      }
      if (struct.isSetInvterCharId()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetRespResult()) {
        oprot.writeByte(struct.respResult);
      }
      if (struct.isSetRoomId()) {
        oprot.writeI32(struct.roomId);
      }
      if (struct.isSetInvterCharId()) {
        oprot.writeI64(struct.invterCharId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CSInviteJoinRoomRespMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.respResult = iprot.readByte();
        struct.setRespResultIsSet(true);
      }
      if (incoming.get(1)) {
        struct.roomId = iprot.readI32();
        struct.setRoomIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.invterCharId = iprot.readI64();
        struct.setInvterCharIdIsSet(true);
      }
    }
  }

}

