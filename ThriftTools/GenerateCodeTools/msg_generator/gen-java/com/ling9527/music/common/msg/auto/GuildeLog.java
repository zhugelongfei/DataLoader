/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 新手引导日志
 */
public class GuildeLog implements org.apache.thrift.TBase<GuildeLog, GuildeLog._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GuildeLog");

  private static final org.apache.thrift.protocol.TField TUTORIAL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tutorialId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TUTORIAL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tutorialName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DETAILS_FIELD_DESC = new org.apache.thrift.protocol.TField("details", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField BEGIN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("beginTime", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField BEGIN_ROLE_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("beginRoleLevel", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField END_ROLE_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("endRoleLevel", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField USE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("useTime", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField STEP_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("stepType", org.apache.thrift.protocol.TType.I32, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GuildeLogStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GuildeLogTupleSchemeFactory());
  }

  /**
   * 新手引导的ID
   */
  public String tutorialId; // required
  /**
   * 新手引导的名称
   */
  public String tutorialName; // required
  /**
   * 新手引导其它信息
   */
  public String details; // required
  /**
   * 新手引导开始时间
   */
  public long beginTime; // required
  /**
   * 角色的开始等级
   */
  public int beginRoleLevel; // required
  /**
   * 角色的结束等级
   */
  public int endRoleLevel; // required
  /**
   * 使用时间，单位s
   */
  public long useTime; // required
  /**
   * 引导情况（未完成：-1，完成：1，开始 ：0）
   */
  public int stepType; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 新手引导的ID
     */
    TUTORIAL_ID((short)1, "tutorialId"),
    /**
     * 新手引导的名称
     */
    TUTORIAL_NAME((short)2, "tutorialName"),
    /**
     * 新手引导其它信息
     */
    DETAILS((short)3, "details"),
    /**
     * 新手引导开始时间
     */
    BEGIN_TIME((short)4, "beginTime"),
    /**
     * 角色的开始等级
     */
    BEGIN_ROLE_LEVEL((short)5, "beginRoleLevel"),
    /**
     * 角色的结束等级
     */
    END_ROLE_LEVEL((short)6, "endRoleLevel"),
    /**
     * 使用时间，单位s
     */
    USE_TIME((short)7, "useTime"),
    /**
     * 引导情况（未完成：-1，完成：1，开始 ：0）
     */
    STEP_TYPE((short)8, "stepType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TUTORIAL_ID
          return TUTORIAL_ID;
        case 2: // TUTORIAL_NAME
          return TUTORIAL_NAME;
        case 3: // DETAILS
          return DETAILS;
        case 4: // BEGIN_TIME
          return BEGIN_TIME;
        case 5: // BEGIN_ROLE_LEVEL
          return BEGIN_ROLE_LEVEL;
        case 6: // END_ROLE_LEVEL
          return END_ROLE_LEVEL;
        case 7: // USE_TIME
          return USE_TIME;
        case 8: // STEP_TYPE
          return STEP_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BEGINTIME_ISSET_ID = 0;
  private static final int __BEGINROLELEVEL_ISSET_ID = 1;
  private static final int __ENDROLELEVEL_ISSET_ID = 2;
  private static final int __USETIME_ISSET_ID = 3;
  private static final int __STEPTYPE_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TUTORIAL_ID, new org.apache.thrift.meta_data.FieldMetaData("tutorialId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TUTORIAL_NAME, new org.apache.thrift.meta_data.FieldMetaData("tutorialName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DETAILS, new org.apache.thrift.meta_data.FieldMetaData("details", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BEGIN_TIME, new org.apache.thrift.meta_data.FieldMetaData("beginTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BEGIN_ROLE_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("beginRoleLevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.END_ROLE_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("endRoleLevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USE_TIME, new org.apache.thrift.meta_data.FieldMetaData("useTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STEP_TYPE, new org.apache.thrift.meta_data.FieldMetaData("stepType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GuildeLog.class, metaDataMap);
  }

  public GuildeLog() {
  }

  public GuildeLog(
    String tutorialId,
    String tutorialName,
    String details,
    long beginTime,
    int beginRoleLevel,
    int endRoleLevel,
    long useTime,
    int stepType)
  {
    this();
    this.tutorialId = tutorialId;
    this.tutorialName = tutorialName;
    this.details = details;
    this.beginTime = beginTime;
    setBeginTimeIsSet(true);
    this.beginRoleLevel = beginRoleLevel;
    setBeginRoleLevelIsSet(true);
    this.endRoleLevel = endRoleLevel;
    setEndRoleLevelIsSet(true);
    this.useTime = useTime;
    setUseTimeIsSet(true);
    this.stepType = stepType;
    setStepTypeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GuildeLog(GuildeLog other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTutorialId()) {
      this.tutorialId = other.tutorialId;
    }
    if (other.isSetTutorialName()) {
      this.tutorialName = other.tutorialName;
    }
    if (other.isSetDetails()) {
      this.details = other.details;
    }
    this.beginTime = other.beginTime;
    this.beginRoleLevel = other.beginRoleLevel;
    this.endRoleLevel = other.endRoleLevel;
    this.useTime = other.useTime;
    this.stepType = other.stepType;
  }

  public GuildeLog deepCopy() {
    return new GuildeLog(this);
  }

  @Override
  public void clear() {
    this.tutorialId = null;
    this.tutorialName = null;
    this.details = null;
    setBeginTimeIsSet(false);
    this.beginTime = 0;
    setBeginRoleLevelIsSet(false);
    this.beginRoleLevel = 0;
    setEndRoleLevelIsSet(false);
    this.endRoleLevel = 0;
    setUseTimeIsSet(false);
    this.useTime = 0;
    setStepTypeIsSet(false);
    this.stepType = 0;
  }

  /**
   * 新手引导的ID
   */
  public String getTutorialId() {
    return this.tutorialId;
  }

  /**
   * 新手引导的ID
   */
  public GuildeLog setTutorialId(String tutorialId) {
    this.tutorialId = tutorialId;
    return this;
  }

  public void unsetTutorialId() {
    this.tutorialId = null;
  }

  /** Returns true if field tutorialId is set (has been assigned a value) and false otherwise */
  public boolean isSetTutorialId() {
    return this.tutorialId != null;
  }

  public void setTutorialIdIsSet(boolean value) {
    if (!value) {
      this.tutorialId = null;
    }
  }

  /**
   * 新手引导的名称
   */
  public String getTutorialName() {
    return this.tutorialName;
  }

  /**
   * 新手引导的名称
   */
  public GuildeLog setTutorialName(String tutorialName) {
    this.tutorialName = tutorialName;
    return this;
  }

  public void unsetTutorialName() {
    this.tutorialName = null;
  }

  /** Returns true if field tutorialName is set (has been assigned a value) and false otherwise */
  public boolean isSetTutorialName() {
    return this.tutorialName != null;
  }

  public void setTutorialNameIsSet(boolean value) {
    if (!value) {
      this.tutorialName = null;
    }
  }

  /**
   * 新手引导其它信息
   */
  public String getDetails() {
    return this.details;
  }

  /**
   * 新手引导其它信息
   */
  public GuildeLog setDetails(String details) {
    this.details = details;
    return this;
  }

  public void unsetDetails() {
    this.details = null;
  }

  /** Returns true if field details is set (has been assigned a value) and false otherwise */
  public boolean isSetDetails() {
    return this.details != null;
  }

  public void setDetailsIsSet(boolean value) {
    if (!value) {
      this.details = null;
    }
  }

  /**
   * 新手引导开始时间
   */
  public long getBeginTime() {
    return this.beginTime;
  }

  /**
   * 新手引导开始时间
   */
  public GuildeLog setBeginTime(long beginTime) {
    this.beginTime = beginTime;
    setBeginTimeIsSet(true);
    return this;
  }

  public void unsetBeginTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BEGINTIME_ISSET_ID);
  }

  /** Returns true if field beginTime is set (has been assigned a value) and false otherwise */
  public boolean isSetBeginTime() {
    return EncodingUtils.testBit(__isset_bitfield, __BEGINTIME_ISSET_ID);
  }

  public void setBeginTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BEGINTIME_ISSET_ID, value);
  }

  /**
   * 角色的开始等级
   */
  public int getBeginRoleLevel() {
    return this.beginRoleLevel;
  }

  /**
   * 角色的开始等级
   */
  public GuildeLog setBeginRoleLevel(int beginRoleLevel) {
    this.beginRoleLevel = beginRoleLevel;
    setBeginRoleLevelIsSet(true);
    return this;
  }

  public void unsetBeginRoleLevel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BEGINROLELEVEL_ISSET_ID);
  }

  /** Returns true if field beginRoleLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetBeginRoleLevel() {
    return EncodingUtils.testBit(__isset_bitfield, __BEGINROLELEVEL_ISSET_ID);
  }

  public void setBeginRoleLevelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BEGINROLELEVEL_ISSET_ID, value);
  }

  /**
   * 角色的结束等级
   */
  public int getEndRoleLevel() {
    return this.endRoleLevel;
  }

  /**
   * 角色的结束等级
   */
  public GuildeLog setEndRoleLevel(int endRoleLevel) {
    this.endRoleLevel = endRoleLevel;
    setEndRoleLevelIsSet(true);
    return this;
  }

  public void unsetEndRoleLevel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDROLELEVEL_ISSET_ID);
  }

  /** Returns true if field endRoleLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetEndRoleLevel() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDROLELEVEL_ISSET_ID);
  }

  public void setEndRoleLevelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDROLELEVEL_ISSET_ID, value);
  }

  /**
   * 使用时间，单位s
   */
  public long getUseTime() {
    return this.useTime;
  }

  /**
   * 使用时间，单位s
   */
  public GuildeLog setUseTime(long useTime) {
    this.useTime = useTime;
    setUseTimeIsSet(true);
    return this;
  }

  public void unsetUseTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USETIME_ISSET_ID);
  }

  /** Returns true if field useTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUseTime() {
    return EncodingUtils.testBit(__isset_bitfield, __USETIME_ISSET_ID);
  }

  public void setUseTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USETIME_ISSET_ID, value);
  }

  /**
   * 引导情况（未完成：-1，完成：1，开始 ：0）
   */
  public int getStepType() {
    return this.stepType;
  }

  /**
   * 引导情况（未完成：-1，完成：1，开始 ：0）
   */
  public GuildeLog setStepType(int stepType) {
    this.stepType = stepType;
    setStepTypeIsSet(true);
    return this;
  }

  public void unsetStepType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STEPTYPE_ISSET_ID);
  }

  /** Returns true if field stepType is set (has been assigned a value) and false otherwise */
  public boolean isSetStepType() {
    return EncodingUtils.testBit(__isset_bitfield, __STEPTYPE_ISSET_ID);
  }

  public void setStepTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STEPTYPE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TUTORIAL_ID:
      if (value == null) {
        unsetTutorialId();
      } else {
        setTutorialId((String)value);
      }
      break;

    case TUTORIAL_NAME:
      if (value == null) {
        unsetTutorialName();
      } else {
        setTutorialName((String)value);
      }
      break;

    case DETAILS:
      if (value == null) {
        unsetDetails();
      } else {
        setDetails((String)value);
      }
      break;

    case BEGIN_TIME:
      if (value == null) {
        unsetBeginTime();
      } else {
        setBeginTime((Long)value);
      }
      break;

    case BEGIN_ROLE_LEVEL:
      if (value == null) {
        unsetBeginRoleLevel();
      } else {
        setBeginRoleLevel((Integer)value);
      }
      break;

    case END_ROLE_LEVEL:
      if (value == null) {
        unsetEndRoleLevel();
      } else {
        setEndRoleLevel((Integer)value);
      }
      break;

    case USE_TIME:
      if (value == null) {
        unsetUseTime();
      } else {
        setUseTime((Long)value);
      }
      break;

    case STEP_TYPE:
      if (value == null) {
        unsetStepType();
      } else {
        setStepType((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TUTORIAL_ID:
      return getTutorialId();

    case TUTORIAL_NAME:
      return getTutorialName();

    case DETAILS:
      return getDetails();

    case BEGIN_TIME:
      return Long.valueOf(getBeginTime());

    case BEGIN_ROLE_LEVEL:
      return Integer.valueOf(getBeginRoleLevel());

    case END_ROLE_LEVEL:
      return Integer.valueOf(getEndRoleLevel());

    case USE_TIME:
      return Long.valueOf(getUseTime());

    case STEP_TYPE:
      return Integer.valueOf(getStepType());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TUTORIAL_ID:
      return isSetTutorialId();
    case TUTORIAL_NAME:
      return isSetTutorialName();
    case DETAILS:
      return isSetDetails();
    case BEGIN_TIME:
      return isSetBeginTime();
    case BEGIN_ROLE_LEVEL:
      return isSetBeginRoleLevel();
    case END_ROLE_LEVEL:
      return isSetEndRoleLevel();
    case USE_TIME:
      return isSetUseTime();
    case STEP_TYPE:
      return isSetStepType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GuildeLog)
      return this.equals((GuildeLog)that);
    return false;
  }

  public boolean equals(GuildeLog that) {
    if (that == null)
      return false;

    boolean this_present_tutorialId = true && this.isSetTutorialId();
    boolean that_present_tutorialId = true && that.isSetTutorialId();
    if (this_present_tutorialId || that_present_tutorialId) {
      if (!(this_present_tutorialId && that_present_tutorialId))
        return false;
      if (!this.tutorialId.equals(that.tutorialId))
        return false;
    }

    boolean this_present_tutorialName = true && this.isSetTutorialName();
    boolean that_present_tutorialName = true && that.isSetTutorialName();
    if (this_present_tutorialName || that_present_tutorialName) {
      if (!(this_present_tutorialName && that_present_tutorialName))
        return false;
      if (!this.tutorialName.equals(that.tutorialName))
        return false;
    }

    boolean this_present_details = true && this.isSetDetails();
    boolean that_present_details = true && that.isSetDetails();
    if (this_present_details || that_present_details) {
      if (!(this_present_details && that_present_details))
        return false;
      if (!this.details.equals(that.details))
        return false;
    }

    boolean this_present_beginTime = true;
    boolean that_present_beginTime = true;
    if (this_present_beginTime || that_present_beginTime) {
      if (!(this_present_beginTime && that_present_beginTime))
        return false;
      if (this.beginTime != that.beginTime)
        return false;
    }

    boolean this_present_beginRoleLevel = true;
    boolean that_present_beginRoleLevel = true;
    if (this_present_beginRoleLevel || that_present_beginRoleLevel) {
      if (!(this_present_beginRoleLevel && that_present_beginRoleLevel))
        return false;
      if (this.beginRoleLevel != that.beginRoleLevel)
        return false;
    }

    boolean this_present_endRoleLevel = true;
    boolean that_present_endRoleLevel = true;
    if (this_present_endRoleLevel || that_present_endRoleLevel) {
      if (!(this_present_endRoleLevel && that_present_endRoleLevel))
        return false;
      if (this.endRoleLevel != that.endRoleLevel)
        return false;
    }

    boolean this_present_useTime = true;
    boolean that_present_useTime = true;
    if (this_present_useTime || that_present_useTime) {
      if (!(this_present_useTime && that_present_useTime))
        return false;
      if (this.useTime != that.useTime)
        return false;
    }

    boolean this_present_stepType = true;
    boolean that_present_stepType = true;
    if (this_present_stepType || that_present_stepType) {
      if (!(this_present_stepType && that_present_stepType))
        return false;
      if (this.stepType != that.stepType)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(GuildeLog other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    GuildeLog typedOther = (GuildeLog)other;

    lastComparison = Boolean.valueOf(isSetTutorialId()).compareTo(typedOther.isSetTutorialId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTutorialId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tutorialId, typedOther.tutorialId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTutorialName()).compareTo(typedOther.isSetTutorialName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTutorialName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tutorialName, typedOther.tutorialName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDetails()).compareTo(typedOther.isSetDetails());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDetails()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.details, typedOther.details);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBeginTime()).compareTo(typedOther.isSetBeginTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBeginTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.beginTime, typedOther.beginTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBeginRoleLevel()).compareTo(typedOther.isSetBeginRoleLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBeginRoleLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.beginRoleLevel, typedOther.beginRoleLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndRoleLevel()).compareTo(typedOther.isSetEndRoleLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndRoleLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endRoleLevel, typedOther.endRoleLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUseTime()).compareTo(typedOther.isSetUseTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUseTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.useTime, typedOther.useTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStepType()).compareTo(typedOther.isSetStepType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStepType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stepType, typedOther.stepType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GuildeLog(");
    boolean first = true;

    sb.append("tutorialId:");
    if (this.tutorialId == null) {
      sb.append("null");
    } else {
      sb.append(this.tutorialId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tutorialName:");
    if (this.tutorialName == null) {
      sb.append("null");
    } else {
      sb.append(this.tutorialName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("details:");
    if (this.details == null) {
      sb.append("null");
    } else {
      sb.append(this.details);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("beginTime:");
    sb.append(this.beginTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("beginRoleLevel:");
    sb.append(this.beginRoleLevel);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endRoleLevel:");
    sb.append(this.endRoleLevel);
    first = false;
    if (!first) sb.append(", ");
    sb.append("useTime:");
    sb.append(this.useTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("stepType:");
    sb.append(this.stepType);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GuildeLogStandardSchemeFactory implements SchemeFactory {
    public GuildeLogStandardScheme getScheme() {
      return new GuildeLogStandardScheme();
    }
  }

  private static class GuildeLogStandardScheme extends StandardScheme<GuildeLog> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GuildeLog struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TUTORIAL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tutorialId = iprot.readString();
              struct.setTutorialIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TUTORIAL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tutorialName = iprot.readString();
              struct.setTutorialNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DETAILS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.details = iprot.readString();
              struct.setDetailsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BEGIN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.beginTime = iprot.readI64();
              struct.setBeginTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BEGIN_ROLE_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.beginRoleLevel = iprot.readI32();
              struct.setBeginRoleLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // END_ROLE_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.endRoleLevel = iprot.readI32();
              struct.setEndRoleLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // USE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.useTime = iprot.readI64();
              struct.setUseTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // STEP_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.stepType = iprot.readI32();
              struct.setStepTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GuildeLog struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.tutorialId != null) {
        oprot.writeFieldBegin(TUTORIAL_ID_FIELD_DESC);
        oprot.writeString(struct.tutorialId);
        oprot.writeFieldEnd();
      }
      if (struct.tutorialName != null) {
        oprot.writeFieldBegin(TUTORIAL_NAME_FIELD_DESC);
        oprot.writeString(struct.tutorialName);
        oprot.writeFieldEnd();
      }
      if (struct.details != null) {
        oprot.writeFieldBegin(DETAILS_FIELD_DESC);
        oprot.writeString(struct.details);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BEGIN_TIME_FIELD_DESC);
      oprot.writeI64(struct.beginTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BEGIN_ROLE_LEVEL_FIELD_DESC);
      oprot.writeI32(struct.beginRoleLevel);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(END_ROLE_LEVEL_FIELD_DESC);
      oprot.writeI32(struct.endRoleLevel);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USE_TIME_FIELD_DESC);
      oprot.writeI64(struct.useTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STEP_TYPE_FIELD_DESC);
      oprot.writeI32(struct.stepType);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GuildeLogTupleSchemeFactory implements SchemeFactory {
    public GuildeLogTupleScheme getScheme() {
      return new GuildeLogTupleScheme();
    }
  }

  private static class GuildeLogTupleScheme extends TupleScheme<GuildeLog> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GuildeLog struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTutorialId()) {
        optionals.set(0);
      }
      if (struct.isSetTutorialName()) {
        optionals.set(1);
      }
      if (struct.isSetDetails()) {
        optionals.set(2);
      }
      if (struct.isSetBeginTime()) {
        optionals.set(3);
      }
      if (struct.isSetBeginRoleLevel()) {
        optionals.set(4);
      }
      if (struct.isSetEndRoleLevel()) {
        optionals.set(5);
      }
      if (struct.isSetUseTime()) {
        optionals.set(6);
      }
      if (struct.isSetStepType()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetTutorialId()) {
        oprot.writeString(struct.tutorialId);
      }
      if (struct.isSetTutorialName()) {
        oprot.writeString(struct.tutorialName);
      }
      if (struct.isSetDetails()) {
        oprot.writeString(struct.details);
      }
      if (struct.isSetBeginTime()) {
        oprot.writeI64(struct.beginTime);
      }
      if (struct.isSetBeginRoleLevel()) {
        oprot.writeI32(struct.beginRoleLevel);
      }
      if (struct.isSetEndRoleLevel()) {
        oprot.writeI32(struct.endRoleLevel);
      }
      if (struct.isSetUseTime()) {
        oprot.writeI64(struct.useTime);
      }
      if (struct.isSetStepType()) {
        oprot.writeI32(struct.stepType);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GuildeLog struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.tutorialId = iprot.readString();
        struct.setTutorialIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.tutorialName = iprot.readString();
        struct.setTutorialNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.details = iprot.readString();
        struct.setDetailsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.beginTime = iprot.readI64();
        struct.setBeginTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.beginRoleLevel = iprot.readI32();
        struct.setBeginRoleLevelIsSet(true);
      }
      if (incoming.get(5)) {
        struct.endRoleLevel = iprot.readI32();
        struct.setEndRoleLevelIsSet(true);
      }
      if (incoming.get(6)) {
        struct.useTime = iprot.readI64();
        struct.setUseTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.stepType = iprot.readI32();
        struct.setStepTypeIsSet(true);
      }
    }
  }

}

