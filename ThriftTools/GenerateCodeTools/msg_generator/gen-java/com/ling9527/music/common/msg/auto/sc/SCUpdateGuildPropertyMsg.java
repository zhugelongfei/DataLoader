/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SCUpdateGuildPropertyMsg implements org.apache.thrift.TBase<SCUpdateGuildPropertyMsg, SCUpdateGuildPropertyMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCUpdateGuildPropertyMsg");

  private static final org.apache.thrift.protocol.TField DONATE_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("donateValue", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField DEGREE_FIELD_DESC = new org.apache.thrift.protocol.TField("degree", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField GUILD_GOLD_FIELD_DESC = new org.apache.thrift.protocol.TField("guildGold", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField LAST_SIGN_IN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastSignInTime", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField MEM_HONOR_FIELD_DESC = new org.apache.thrift.protocol.TField("memHonor", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField SIGN_DAYS_FIELD_DESC = new org.apache.thrift.protocol.TField("signDays", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField HAS_SIGNED_FIELD_DESC = new org.apache.thrift.protocol.TField("hasSigned", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField WEEK_CONTRIBUTION_FIELD_DESC = new org.apache.thrift.protocol.TField("weekContribution", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField DONATE_TIMES_FIELD_DESC = new org.apache.thrift.protocol.TField("donateTimes", org.apache.thrift.protocol.TType.I32, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCUpdateGuildPropertyMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCUpdateGuildPropertyMsgTupleSchemeFactory());
  }

  public int donateValue; // optional
  /**
   * 
   * @see com.ling9527.music.common.msg.auto.GuildDegree
   */
  public com.ling9527.music.common.msg.auto.GuildDegree degree; // optional
  public int guildGold; // optional
  public int lastSignInTime; // optional
  public int memHonor; // optional
  public int signDays; // optional
  public boolean hasSigned; // optional
  public int weekContribution; // optional
  public int donateTimes; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DONATE_VALUE((short)1, "donateValue"),
    /**
     * 
     * @see com.ling9527.music.common.msg.auto.GuildDegree
     */
    DEGREE((short)2, "degree"),
    GUILD_GOLD((short)3, "guildGold"),
    LAST_SIGN_IN_TIME((short)4, "lastSignInTime"),
    MEM_HONOR((short)5, "memHonor"),
    SIGN_DAYS((short)6, "signDays"),
    HAS_SIGNED((short)7, "hasSigned"),
    WEEK_CONTRIBUTION((short)8, "weekContribution"),
    DONATE_TIMES((short)9, "donateTimes");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DONATE_VALUE
          return DONATE_VALUE;
        case 2: // DEGREE
          return DEGREE;
        case 3: // GUILD_GOLD
          return GUILD_GOLD;
        case 4: // LAST_SIGN_IN_TIME
          return LAST_SIGN_IN_TIME;
        case 5: // MEM_HONOR
          return MEM_HONOR;
        case 6: // SIGN_DAYS
          return SIGN_DAYS;
        case 7: // HAS_SIGNED
          return HAS_SIGNED;
        case 8: // WEEK_CONTRIBUTION
          return WEEK_CONTRIBUTION;
        case 9: // DONATE_TIMES
          return DONATE_TIMES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DONATEVALUE_ISSET_ID = 0;
  private static final int __GUILDGOLD_ISSET_ID = 1;
  private static final int __LASTSIGNINTIME_ISSET_ID = 2;
  private static final int __MEMHONOR_ISSET_ID = 3;
  private static final int __SIGNDAYS_ISSET_ID = 4;
  private static final int __HASSIGNED_ISSET_ID = 5;
  private static final int __WEEKCONTRIBUTION_ISSET_ID = 6;
  private static final int __DONATETIMES_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.DONATE_VALUE,_Fields.DEGREE,_Fields.GUILD_GOLD,_Fields.LAST_SIGN_IN_TIME,_Fields.MEM_HONOR,_Fields.SIGN_DAYS,_Fields.HAS_SIGNED,_Fields.WEEK_CONTRIBUTION,_Fields.DONATE_TIMES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DONATE_VALUE, new org.apache.thrift.meta_data.FieldMetaData("donateValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEGREE, new org.apache.thrift.meta_data.FieldMetaData("degree", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.ling9527.music.common.msg.auto.GuildDegree.class)));
    tmpMap.put(_Fields.GUILD_GOLD, new org.apache.thrift.meta_data.FieldMetaData("guildGold", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LAST_SIGN_IN_TIME, new org.apache.thrift.meta_data.FieldMetaData("lastSignInTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MEM_HONOR, new org.apache.thrift.meta_data.FieldMetaData("memHonor", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SIGN_DAYS, new org.apache.thrift.meta_data.FieldMetaData("signDays", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HAS_SIGNED, new org.apache.thrift.meta_data.FieldMetaData("hasSigned", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.WEEK_CONTRIBUTION, new org.apache.thrift.meta_data.FieldMetaData("weekContribution", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DONATE_TIMES, new org.apache.thrift.meta_data.FieldMetaData("donateTimes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCUpdateGuildPropertyMsg.class, metaDataMap);
  }

  public SCUpdateGuildPropertyMsg() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCUpdateGuildPropertyMsg(SCUpdateGuildPropertyMsg other) {
    __isset_bitfield = other.__isset_bitfield;
    this.donateValue = other.donateValue;
    if (other.isSetDegree()) {
      this.degree = other.degree;
    }
    this.guildGold = other.guildGold;
    this.lastSignInTime = other.lastSignInTime;
    this.memHonor = other.memHonor;
    this.signDays = other.signDays;
    this.hasSigned = other.hasSigned;
    this.weekContribution = other.weekContribution;
    this.donateTimes = other.donateTimes;
  }

  public SCUpdateGuildPropertyMsg deepCopy() {
    return new SCUpdateGuildPropertyMsg(this);
  }

  @Override
  public void clear() {
    setDonateValueIsSet(false);
    this.donateValue = 0;
    this.degree = null;
    setGuildGoldIsSet(false);
    this.guildGold = 0;
    setLastSignInTimeIsSet(false);
    this.lastSignInTime = 0;
    setMemHonorIsSet(false);
    this.memHonor = 0;
    setSignDaysIsSet(false);
    this.signDays = 0;
    setHasSignedIsSet(false);
    this.hasSigned = false;
    setWeekContributionIsSet(false);
    this.weekContribution = 0;
    setDonateTimesIsSet(false);
    this.donateTimes = 0;
  }

  public int getDonateValue() {
    return this.donateValue;
  }

  public SCUpdateGuildPropertyMsg setDonateValue(int donateValue) {
    this.donateValue = donateValue;
    setDonateValueIsSet(true);
    return this;
  }

  public void unsetDonateValue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DONATEVALUE_ISSET_ID);
  }

  /** Returns true if field donateValue is set (has been assigned a value) and false otherwise */
  public boolean isSetDonateValue() {
    return EncodingUtils.testBit(__isset_bitfield, __DONATEVALUE_ISSET_ID);
  }

  public void setDonateValueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DONATEVALUE_ISSET_ID, value);
  }

  /**
   * 
   * @see com.ling9527.music.common.msg.auto.GuildDegree
   */
  public com.ling9527.music.common.msg.auto.GuildDegree getDegree() {
    return this.degree;
  }

  /**
   * 
   * @see com.ling9527.music.common.msg.auto.GuildDegree
   */
  public SCUpdateGuildPropertyMsg setDegree(com.ling9527.music.common.msg.auto.GuildDegree degree) {
    this.degree = degree;
    return this;
  }

  public void unsetDegree() {
    this.degree = null;
  }

  /** Returns true if field degree is set (has been assigned a value) and false otherwise */
  public boolean isSetDegree() {
    return this.degree != null;
  }

  public void setDegreeIsSet(boolean value) {
    if (!value) {
      this.degree = null;
    }
  }

  public int getGuildGold() {
    return this.guildGold;
  }

  public SCUpdateGuildPropertyMsg setGuildGold(int guildGold) {
    this.guildGold = guildGold;
    setGuildGoldIsSet(true);
    return this;
  }

  public void unsetGuildGold() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GUILDGOLD_ISSET_ID);
  }

  /** Returns true if field guildGold is set (has been assigned a value) and false otherwise */
  public boolean isSetGuildGold() {
    return EncodingUtils.testBit(__isset_bitfield, __GUILDGOLD_ISSET_ID);
  }

  public void setGuildGoldIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GUILDGOLD_ISSET_ID, value);
  }

  public int getLastSignInTime() {
    return this.lastSignInTime;
  }

  public SCUpdateGuildPropertyMsg setLastSignInTime(int lastSignInTime) {
    this.lastSignInTime = lastSignInTime;
    setLastSignInTimeIsSet(true);
    return this;
  }

  public void unsetLastSignInTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTSIGNINTIME_ISSET_ID);
  }

  /** Returns true if field lastSignInTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLastSignInTime() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTSIGNINTIME_ISSET_ID);
  }

  public void setLastSignInTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTSIGNINTIME_ISSET_ID, value);
  }

  public int getMemHonor() {
    return this.memHonor;
  }

  public SCUpdateGuildPropertyMsg setMemHonor(int memHonor) {
    this.memHonor = memHonor;
    setMemHonorIsSet(true);
    return this;
  }

  public void unsetMemHonor() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMHONOR_ISSET_ID);
  }

  /** Returns true if field memHonor is set (has been assigned a value) and false otherwise */
  public boolean isSetMemHonor() {
    return EncodingUtils.testBit(__isset_bitfield, __MEMHONOR_ISSET_ID);
  }

  public void setMemHonorIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMHONOR_ISSET_ID, value);
  }

  public int getSignDays() {
    return this.signDays;
  }

  public SCUpdateGuildPropertyMsg setSignDays(int signDays) {
    this.signDays = signDays;
    setSignDaysIsSet(true);
    return this;
  }

  public void unsetSignDays() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SIGNDAYS_ISSET_ID);
  }

  /** Returns true if field signDays is set (has been assigned a value) and false otherwise */
  public boolean isSetSignDays() {
    return EncodingUtils.testBit(__isset_bitfield, __SIGNDAYS_ISSET_ID);
  }

  public void setSignDaysIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SIGNDAYS_ISSET_ID, value);
  }

  public boolean isHasSigned() {
    return this.hasSigned;
  }

  public SCUpdateGuildPropertyMsg setHasSigned(boolean hasSigned) {
    this.hasSigned = hasSigned;
    setHasSignedIsSet(true);
    return this;
  }

  public void unsetHasSigned() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HASSIGNED_ISSET_ID);
  }

  /** Returns true if field hasSigned is set (has been assigned a value) and false otherwise */
  public boolean isSetHasSigned() {
    return EncodingUtils.testBit(__isset_bitfield, __HASSIGNED_ISSET_ID);
  }

  public void setHasSignedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HASSIGNED_ISSET_ID, value);
  }

  public int getWeekContribution() {
    return this.weekContribution;
  }

  public SCUpdateGuildPropertyMsg setWeekContribution(int weekContribution) {
    this.weekContribution = weekContribution;
    setWeekContributionIsSet(true);
    return this;
  }

  public void unsetWeekContribution() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WEEKCONTRIBUTION_ISSET_ID);
  }

  /** Returns true if field weekContribution is set (has been assigned a value) and false otherwise */
  public boolean isSetWeekContribution() {
    return EncodingUtils.testBit(__isset_bitfield, __WEEKCONTRIBUTION_ISSET_ID);
  }

  public void setWeekContributionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WEEKCONTRIBUTION_ISSET_ID, value);
  }

  public int getDonateTimes() {
    return this.donateTimes;
  }

  public SCUpdateGuildPropertyMsg setDonateTimes(int donateTimes) {
    this.donateTimes = donateTimes;
    setDonateTimesIsSet(true);
    return this;
  }

  public void unsetDonateTimes() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DONATETIMES_ISSET_ID);
  }

  /** Returns true if field donateTimes is set (has been assigned a value) and false otherwise */
  public boolean isSetDonateTimes() {
    return EncodingUtils.testBit(__isset_bitfield, __DONATETIMES_ISSET_ID);
  }

  public void setDonateTimesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DONATETIMES_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DONATE_VALUE:
      if (value == null) {
        unsetDonateValue();
      } else {
        setDonateValue((Integer)value);
      }
      break;

    case DEGREE:
      if (value == null) {
        unsetDegree();
      } else {
        setDegree((com.ling9527.music.common.msg.auto.GuildDegree)value);
      }
      break;

    case GUILD_GOLD:
      if (value == null) {
        unsetGuildGold();
      } else {
        setGuildGold((Integer)value);
      }
      break;

    case LAST_SIGN_IN_TIME:
      if (value == null) {
        unsetLastSignInTime();
      } else {
        setLastSignInTime((Integer)value);
      }
      break;

    case MEM_HONOR:
      if (value == null) {
        unsetMemHonor();
      } else {
        setMemHonor((Integer)value);
      }
      break;

    case SIGN_DAYS:
      if (value == null) {
        unsetSignDays();
      } else {
        setSignDays((Integer)value);
      }
      break;

    case HAS_SIGNED:
      if (value == null) {
        unsetHasSigned();
      } else {
        setHasSigned((Boolean)value);
      }
      break;

    case WEEK_CONTRIBUTION:
      if (value == null) {
        unsetWeekContribution();
      } else {
        setWeekContribution((Integer)value);
      }
      break;

    case DONATE_TIMES:
      if (value == null) {
        unsetDonateTimes();
      } else {
        setDonateTimes((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DONATE_VALUE:
      return Integer.valueOf(getDonateValue());

    case DEGREE:
      return getDegree();

    case GUILD_GOLD:
      return Integer.valueOf(getGuildGold());

    case LAST_SIGN_IN_TIME:
      return Integer.valueOf(getLastSignInTime());

    case MEM_HONOR:
      return Integer.valueOf(getMemHonor());

    case SIGN_DAYS:
      return Integer.valueOf(getSignDays());

    case HAS_SIGNED:
      return Boolean.valueOf(isHasSigned());

    case WEEK_CONTRIBUTION:
      return Integer.valueOf(getWeekContribution());

    case DONATE_TIMES:
      return Integer.valueOf(getDonateTimes());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DONATE_VALUE:
      return isSetDonateValue();
    case DEGREE:
      return isSetDegree();
    case GUILD_GOLD:
      return isSetGuildGold();
    case LAST_SIGN_IN_TIME:
      return isSetLastSignInTime();
    case MEM_HONOR:
      return isSetMemHonor();
    case SIGN_DAYS:
      return isSetSignDays();
    case HAS_SIGNED:
      return isSetHasSigned();
    case WEEK_CONTRIBUTION:
      return isSetWeekContribution();
    case DONATE_TIMES:
      return isSetDonateTimes();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCUpdateGuildPropertyMsg)
      return this.equals((SCUpdateGuildPropertyMsg)that);
    return false;
  }

  public boolean equals(SCUpdateGuildPropertyMsg that) {
    if (that == null)
      return false;

    boolean this_present_donateValue = true && this.isSetDonateValue();
    boolean that_present_donateValue = true && that.isSetDonateValue();
    if (this_present_donateValue || that_present_donateValue) {
      if (!(this_present_donateValue && that_present_donateValue))
        return false;
      if (this.donateValue != that.donateValue)
        return false;
    }

    boolean this_present_degree = true && this.isSetDegree();
    boolean that_present_degree = true && that.isSetDegree();
    if (this_present_degree || that_present_degree) {
      if (!(this_present_degree && that_present_degree))
        return false;
      if (!this.degree.equals(that.degree))
        return false;
    }

    boolean this_present_guildGold = true && this.isSetGuildGold();
    boolean that_present_guildGold = true && that.isSetGuildGold();
    if (this_present_guildGold || that_present_guildGold) {
      if (!(this_present_guildGold && that_present_guildGold))
        return false;
      if (this.guildGold != that.guildGold)
        return false;
    }

    boolean this_present_lastSignInTime = true && this.isSetLastSignInTime();
    boolean that_present_lastSignInTime = true && that.isSetLastSignInTime();
    if (this_present_lastSignInTime || that_present_lastSignInTime) {
      if (!(this_present_lastSignInTime && that_present_lastSignInTime))
        return false;
      if (this.lastSignInTime != that.lastSignInTime)
        return false;
    }

    boolean this_present_memHonor = true && this.isSetMemHonor();
    boolean that_present_memHonor = true && that.isSetMemHonor();
    if (this_present_memHonor || that_present_memHonor) {
      if (!(this_present_memHonor && that_present_memHonor))
        return false;
      if (this.memHonor != that.memHonor)
        return false;
    }

    boolean this_present_signDays = true && this.isSetSignDays();
    boolean that_present_signDays = true && that.isSetSignDays();
    if (this_present_signDays || that_present_signDays) {
      if (!(this_present_signDays && that_present_signDays))
        return false;
      if (this.signDays != that.signDays)
        return false;
    }

    boolean this_present_hasSigned = true && this.isSetHasSigned();
    boolean that_present_hasSigned = true && that.isSetHasSigned();
    if (this_present_hasSigned || that_present_hasSigned) {
      if (!(this_present_hasSigned && that_present_hasSigned))
        return false;
      if (this.hasSigned != that.hasSigned)
        return false;
    }

    boolean this_present_weekContribution = true && this.isSetWeekContribution();
    boolean that_present_weekContribution = true && that.isSetWeekContribution();
    if (this_present_weekContribution || that_present_weekContribution) {
      if (!(this_present_weekContribution && that_present_weekContribution))
        return false;
      if (this.weekContribution != that.weekContribution)
        return false;
    }

    boolean this_present_donateTimes = true && this.isSetDonateTimes();
    boolean that_present_donateTimes = true && that.isSetDonateTimes();
    if (this_present_donateTimes || that_present_donateTimes) {
      if (!(this_present_donateTimes && that_present_donateTimes))
        return false;
      if (this.donateTimes != that.donateTimes)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCUpdateGuildPropertyMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCUpdateGuildPropertyMsg typedOther = (SCUpdateGuildPropertyMsg)other;

    lastComparison = Boolean.valueOf(isSetDonateValue()).compareTo(typedOther.isSetDonateValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDonateValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.donateValue, typedOther.donateValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDegree()).compareTo(typedOther.isSetDegree());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDegree()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.degree, typedOther.degree);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGuildGold()).compareTo(typedOther.isSetGuildGold());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGuildGold()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.guildGold, typedOther.guildGold);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastSignInTime()).compareTo(typedOther.isSetLastSignInTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastSignInTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastSignInTime, typedOther.lastSignInTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemHonor()).compareTo(typedOther.isSetMemHonor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemHonor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memHonor, typedOther.memHonor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSignDays()).compareTo(typedOther.isSetSignDays());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSignDays()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.signDays, typedOther.signDays);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHasSigned()).compareTo(typedOther.isSetHasSigned());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHasSigned()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasSigned, typedOther.hasSigned);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWeekContribution()).compareTo(typedOther.isSetWeekContribution());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWeekContribution()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.weekContribution, typedOther.weekContribution);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDonateTimes()).compareTo(typedOther.isSetDonateTimes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDonateTimes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.donateTimes, typedOther.donateTimes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCUpdateGuildPropertyMsg(");
    boolean first = true;

    if (isSetDonateValue()) {
      sb.append("donateValue:");
      sb.append(this.donateValue);
      first = false;
    }
    if (isSetDegree()) {
      if (!first) sb.append(", ");
      sb.append("degree:");
      if (this.degree == null) {
        sb.append("null");
      } else {
        sb.append(this.degree);
      }
      first = false;
    }
    if (isSetGuildGold()) {
      if (!first) sb.append(", ");
      sb.append("guildGold:");
      sb.append(this.guildGold);
      first = false;
    }
    if (isSetLastSignInTime()) {
      if (!first) sb.append(", ");
      sb.append("lastSignInTime:");
      sb.append(this.lastSignInTime);
      first = false;
    }
    if (isSetMemHonor()) {
      if (!first) sb.append(", ");
      sb.append("memHonor:");
      sb.append(this.memHonor);
      first = false;
    }
    if (isSetSignDays()) {
      if (!first) sb.append(", ");
      sb.append("signDays:");
      sb.append(this.signDays);
      first = false;
    }
    if (isSetHasSigned()) {
      if (!first) sb.append(", ");
      sb.append("hasSigned:");
      sb.append(this.hasSigned);
      first = false;
    }
    if (isSetWeekContribution()) {
      if (!first) sb.append(", ");
      sb.append("weekContribution:");
      sb.append(this.weekContribution);
      first = false;
    }
    if (isSetDonateTimes()) {
      if (!first) sb.append(", ");
      sb.append("donateTimes:");
      sb.append(this.donateTimes);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCUpdateGuildPropertyMsgStandardSchemeFactory implements SchemeFactory {
    public SCUpdateGuildPropertyMsgStandardScheme getScheme() {
      return new SCUpdateGuildPropertyMsgStandardScheme();
    }
  }

  private static class SCUpdateGuildPropertyMsgStandardScheme extends StandardScheme<SCUpdateGuildPropertyMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCUpdateGuildPropertyMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DONATE_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.donateValue = iprot.readI32();
              struct.setDonateValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DEGREE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.degree = com.ling9527.music.common.msg.auto.GuildDegree.findByValue(iprot.readI32());
              struct.setDegreeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // GUILD_GOLD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.guildGold = iprot.readI32();
              struct.setGuildGoldIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LAST_SIGN_IN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lastSignInTime = iprot.readI32();
              struct.setLastSignInTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MEM_HONOR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.memHonor = iprot.readI32();
              struct.setMemHonorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SIGN_DAYS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.signDays = iprot.readI32();
              struct.setSignDaysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // HAS_SIGNED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.hasSigned = iprot.readBool();
              struct.setHasSignedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // WEEK_CONTRIBUTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.weekContribution = iprot.readI32();
              struct.setWeekContributionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DONATE_TIMES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.donateTimes = iprot.readI32();
              struct.setDonateTimesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCUpdateGuildPropertyMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetDonateValue()) {
        oprot.writeFieldBegin(DONATE_VALUE_FIELD_DESC);
        oprot.writeI32(struct.donateValue);
        oprot.writeFieldEnd();
      }
      if (struct.degree != null) {
        if (struct.isSetDegree()) {
          oprot.writeFieldBegin(DEGREE_FIELD_DESC);
          oprot.writeI32(struct.degree.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetGuildGold()) {
        oprot.writeFieldBegin(GUILD_GOLD_FIELD_DESC);
        oprot.writeI32(struct.guildGold);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastSignInTime()) {
        oprot.writeFieldBegin(LAST_SIGN_IN_TIME_FIELD_DESC);
        oprot.writeI32(struct.lastSignInTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMemHonor()) {
        oprot.writeFieldBegin(MEM_HONOR_FIELD_DESC);
        oprot.writeI32(struct.memHonor);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSignDays()) {
        oprot.writeFieldBegin(SIGN_DAYS_FIELD_DESC);
        oprot.writeI32(struct.signDays);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHasSigned()) {
        oprot.writeFieldBegin(HAS_SIGNED_FIELD_DESC);
        oprot.writeBool(struct.hasSigned);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWeekContribution()) {
        oprot.writeFieldBegin(WEEK_CONTRIBUTION_FIELD_DESC);
        oprot.writeI32(struct.weekContribution);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDonateTimes()) {
        oprot.writeFieldBegin(DONATE_TIMES_FIELD_DESC);
        oprot.writeI32(struct.donateTimes);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCUpdateGuildPropertyMsgTupleSchemeFactory implements SchemeFactory {
    public SCUpdateGuildPropertyMsgTupleScheme getScheme() {
      return new SCUpdateGuildPropertyMsgTupleScheme();
    }
  }

  private static class SCUpdateGuildPropertyMsgTupleScheme extends TupleScheme<SCUpdateGuildPropertyMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCUpdateGuildPropertyMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDonateValue()) {
        optionals.set(0);
      }
      if (struct.isSetDegree()) {
        optionals.set(1);
      }
      if (struct.isSetGuildGold()) {
        optionals.set(2);
      }
      if (struct.isSetLastSignInTime()) {
        optionals.set(3);
      }
      if (struct.isSetMemHonor()) {
        optionals.set(4);
      }
      if (struct.isSetSignDays()) {
        optionals.set(5);
      }
      if (struct.isSetHasSigned()) {
        optionals.set(6);
      }
      if (struct.isSetWeekContribution()) {
        optionals.set(7);
      }
      if (struct.isSetDonateTimes()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetDonateValue()) {
        oprot.writeI32(struct.donateValue);
      }
      if (struct.isSetDegree()) {
        oprot.writeI32(struct.degree.getValue());
      }
      if (struct.isSetGuildGold()) {
        oprot.writeI32(struct.guildGold);
      }
      if (struct.isSetLastSignInTime()) {
        oprot.writeI32(struct.lastSignInTime);
      }
      if (struct.isSetMemHonor()) {
        oprot.writeI32(struct.memHonor);
      }
      if (struct.isSetSignDays()) {
        oprot.writeI32(struct.signDays);
      }
      if (struct.isSetHasSigned()) {
        oprot.writeBool(struct.hasSigned);
      }
      if (struct.isSetWeekContribution()) {
        oprot.writeI32(struct.weekContribution);
      }
      if (struct.isSetDonateTimes()) {
        oprot.writeI32(struct.donateTimes);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCUpdateGuildPropertyMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.donateValue = iprot.readI32();
        struct.setDonateValueIsSet(true);
      }
      if (incoming.get(1)) {
        struct.degree = com.ling9527.music.common.msg.auto.GuildDegree.findByValue(iprot.readI32());
        struct.setDegreeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.guildGold = iprot.readI32();
        struct.setGuildGoldIsSet(true);
      }
      if (incoming.get(3)) {
        struct.lastSignInTime = iprot.readI32();
        struct.setLastSignInTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.memHonor = iprot.readI32();
        struct.setMemHonorIsSet(true);
      }
      if (incoming.get(5)) {
        struct.signDays = iprot.readI32();
        struct.setSignDaysIsSet(true);
      }
      if (incoming.get(6)) {
        struct.hasSigned = iprot.readBool();
        struct.setHasSignedIsSet(true);
      }
      if (incoming.get(7)) {
        struct.weekContribution = iprot.readI32();
        struct.setWeekContributionIsSet(true);
      }
      if (incoming.get(8)) {
        struct.donateTimes = iprot.readI32();
        struct.setDonateTimesIsSet(true);
      }
    }
  }

}

