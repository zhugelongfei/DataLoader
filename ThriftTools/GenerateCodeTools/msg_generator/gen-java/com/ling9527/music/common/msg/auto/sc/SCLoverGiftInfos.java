/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 情侣关系奖励信息
 */
public class SCLoverGiftInfos implements org.apache.thrift.TBase<SCLoverGiftInfos, SCLoverGiftInfos._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCLoverGiftInfos");

  private static final org.apache.thrift.protocol.TField LOVER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loverId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField LVL_PRIZES_FIELD_DESC = new org.apache.thrift.protocol.TField("LvlPrizes", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCLoverGiftInfosStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCLoverGiftInfosTupleSchemeFactory());
  }

  public long loverId; // required
  /**
   * 按等级顺序奖励信息
   */
  public List<FriendShipLvlPrize> LvlPrizes; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LOVER_ID((short)1, "loverId"),
    /**
     * 按等级顺序奖励信息
     */
    LVL_PRIZES((short)2, "LvlPrizes");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LOVER_ID
          return LOVER_ID;
        case 2: // LVL_PRIZES
          return LVL_PRIZES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LOVERID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LOVER_ID, new org.apache.thrift.meta_data.FieldMetaData("loverId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LVL_PRIZES, new org.apache.thrift.meta_data.FieldMetaData("LvlPrizes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FriendShipLvlPrize.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCLoverGiftInfos.class, metaDataMap);
  }

  public SCLoverGiftInfos() {
  }

  public SCLoverGiftInfos(
    long loverId,
    List<FriendShipLvlPrize> LvlPrizes)
  {
    this();
    this.loverId = loverId;
    setLoverIdIsSet(true);
    this.LvlPrizes = LvlPrizes;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCLoverGiftInfos(SCLoverGiftInfos other) {
    __isset_bitfield = other.__isset_bitfield;
    this.loverId = other.loverId;
    if (other.isSetLvlPrizes()) {
      List<FriendShipLvlPrize> __this__LvlPrizes = new ArrayList<FriendShipLvlPrize>();
      for (FriendShipLvlPrize other_element : other.LvlPrizes) {
        __this__LvlPrizes.add(new FriendShipLvlPrize(other_element));
      }
      this.LvlPrizes = __this__LvlPrizes;
    }
  }

  public SCLoverGiftInfos deepCopy() {
    return new SCLoverGiftInfos(this);
  }

  @Override
  public void clear() {
    setLoverIdIsSet(false);
    this.loverId = 0;
    this.LvlPrizes = null;
  }

  public long getLoverId() {
    return this.loverId;
  }

  public SCLoverGiftInfos setLoverId(long loverId) {
    this.loverId = loverId;
    setLoverIdIsSet(true);
    return this;
  }

  public void unsetLoverId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOVERID_ISSET_ID);
  }

  /** Returns true if field loverId is set (has been assigned a value) and false otherwise */
  public boolean isSetLoverId() {
    return EncodingUtils.testBit(__isset_bitfield, __LOVERID_ISSET_ID);
  }

  public void setLoverIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOVERID_ISSET_ID, value);
  }

  public int getLvlPrizesSize() {
    return (this.LvlPrizes == null) ? 0 : this.LvlPrizes.size();
  }

  public java.util.Iterator<FriendShipLvlPrize> getLvlPrizesIterator() {
    return (this.LvlPrizes == null) ? null : this.LvlPrizes.iterator();
  }

  public void addToLvlPrizes(FriendShipLvlPrize elem) {
    if (this.LvlPrizes == null) {
      this.LvlPrizes = new ArrayList<FriendShipLvlPrize>();
    }
    this.LvlPrizes.add(elem);
  }

  /**
   * 按等级顺序奖励信息
   */
  public List<FriendShipLvlPrize> getLvlPrizes() {
    return this.LvlPrizes;
  }

  /**
   * 按等级顺序奖励信息
   */
  public SCLoverGiftInfos setLvlPrizes(List<FriendShipLvlPrize> LvlPrizes) {
    this.LvlPrizes = LvlPrizes;
    return this;
  }

  public void unsetLvlPrizes() {
    this.LvlPrizes = null;
  }

  /** Returns true if field LvlPrizes is set (has been assigned a value) and false otherwise */
  public boolean isSetLvlPrizes() {
    return this.LvlPrizes != null;
  }

  public void setLvlPrizesIsSet(boolean value) {
    if (!value) {
      this.LvlPrizes = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LOVER_ID:
      if (value == null) {
        unsetLoverId();
      } else {
        setLoverId((Long)value);
      }
      break;

    case LVL_PRIZES:
      if (value == null) {
        unsetLvlPrizes();
      } else {
        setLvlPrizes((List<FriendShipLvlPrize>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LOVER_ID:
      return Long.valueOf(getLoverId());

    case LVL_PRIZES:
      return getLvlPrizes();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LOVER_ID:
      return isSetLoverId();
    case LVL_PRIZES:
      return isSetLvlPrizes();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCLoverGiftInfos)
      return this.equals((SCLoverGiftInfos)that);
    return false;
  }

  public boolean equals(SCLoverGiftInfos that) {
    if (that == null)
      return false;

    boolean this_present_loverId = true;
    boolean that_present_loverId = true;
    if (this_present_loverId || that_present_loverId) {
      if (!(this_present_loverId && that_present_loverId))
        return false;
      if (this.loverId != that.loverId)
        return false;
    }

    boolean this_present_LvlPrizes = true && this.isSetLvlPrizes();
    boolean that_present_LvlPrizes = true && that.isSetLvlPrizes();
    if (this_present_LvlPrizes || that_present_LvlPrizes) {
      if (!(this_present_LvlPrizes && that_present_LvlPrizes))
        return false;
      if (!this.LvlPrizes.equals(that.LvlPrizes))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCLoverGiftInfos other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCLoverGiftInfos typedOther = (SCLoverGiftInfos)other;

    lastComparison = Boolean.valueOf(isSetLoverId()).compareTo(typedOther.isSetLoverId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoverId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loverId, typedOther.loverId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLvlPrizes()).compareTo(typedOther.isSetLvlPrizes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLvlPrizes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.LvlPrizes, typedOther.LvlPrizes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCLoverGiftInfos(");
    boolean first = true;

    sb.append("loverId:");
    sb.append(this.loverId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("LvlPrizes:");
    if (this.LvlPrizes == null) {
      sb.append("null");
    } else {
      sb.append(this.LvlPrizes);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCLoverGiftInfosStandardSchemeFactory implements SchemeFactory {
    public SCLoverGiftInfosStandardScheme getScheme() {
      return new SCLoverGiftInfosStandardScheme();
    }
  }

  private static class SCLoverGiftInfosStandardScheme extends StandardScheme<SCLoverGiftInfos> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCLoverGiftInfos struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LOVER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.loverId = iprot.readI64();
              struct.setLoverIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LVL_PRIZES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list112 = iprot.readListBegin();
                struct.LvlPrizes = new ArrayList<FriendShipLvlPrize>(_list112.size);
                for (int _i113 = 0; _i113 < _list112.size; ++_i113)
                {
                  FriendShipLvlPrize _elem114; // required
                  _elem114 = new FriendShipLvlPrize();
                  _elem114.read(iprot);
                  struct.LvlPrizes.add(_elem114);
                }
                iprot.readListEnd();
              }
              struct.setLvlPrizesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCLoverGiftInfos struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(LOVER_ID_FIELD_DESC);
      oprot.writeI64(struct.loverId);
      oprot.writeFieldEnd();
      if (struct.LvlPrizes != null) {
        oprot.writeFieldBegin(LVL_PRIZES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.LvlPrizes.size()));
          for (FriendShipLvlPrize _iter115 : struct.LvlPrizes)
          {
            _iter115.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCLoverGiftInfosTupleSchemeFactory implements SchemeFactory {
    public SCLoverGiftInfosTupleScheme getScheme() {
      return new SCLoverGiftInfosTupleScheme();
    }
  }

  private static class SCLoverGiftInfosTupleScheme extends TupleScheme<SCLoverGiftInfos> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCLoverGiftInfos struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetLoverId()) {
        optionals.set(0);
      }
      if (struct.isSetLvlPrizes()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetLoverId()) {
        oprot.writeI64(struct.loverId);
      }
      if (struct.isSetLvlPrizes()) {
        {
          oprot.writeI32(struct.LvlPrizes.size());
          for (FriendShipLvlPrize _iter116 : struct.LvlPrizes)
          {
            _iter116.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCLoverGiftInfos struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.loverId = iprot.readI64();
        struct.setLoverIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list117 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.LvlPrizes = new ArrayList<FriendShipLvlPrize>(_list117.size);
          for (int _i118 = 0; _i118 < _list117.size; ++_i118)
          {
            FriendShipLvlPrize _elem119; // required
            _elem119 = new FriendShipLvlPrize();
            _elem119.read(iprot);
            struct.LvlPrizes.add(_elem119);
          }
        }
        struct.setLvlPrizesIsSet(true);
      }
    }
  }

}

