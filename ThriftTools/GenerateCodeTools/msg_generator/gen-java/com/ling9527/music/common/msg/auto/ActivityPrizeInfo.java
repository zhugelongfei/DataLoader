/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ActivityPrizeInfo implements org.apache.thrift.TBase<ActivityPrizeInfo, ActivityPrizeInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ActivityPrizeInfo");

  private static final org.apache.thrift.protocol.TField INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("index", org.apache.thrift.protocol.TType.BYTE, (short)1);
  private static final org.apache.thrift.protocol.TField CAN_GET_PRIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("canGetPrize", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField COMPLETED_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("completedParam", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("param", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PRIZE_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("prizeInfos", org.apache.thrift.protocol.TType.STRUCT, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ActivityPrizeInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ActivityPrizeInfoTupleSchemeFactory());
  }

  public byte index; // required
  public boolean canGetPrize; // required
  public List<String> completedParam; // required
  public List<String> param; // required
  public String content; // required
  public PrizeInfo prizeInfos; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INDEX((short)1, "index"),
    CAN_GET_PRIZE((short)2, "canGetPrize"),
    COMPLETED_PARAM((short)3, "completedParam"),
    PARAM((short)4, "param"),
    CONTENT((short)5, "content"),
    PRIZE_INFOS((short)6, "prizeInfos");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INDEX
          return INDEX;
        case 2: // CAN_GET_PRIZE
          return CAN_GET_PRIZE;
        case 3: // COMPLETED_PARAM
          return COMPLETED_PARAM;
        case 4: // PARAM
          return PARAM;
        case 5: // CONTENT
          return CONTENT;
        case 6: // PRIZE_INFOS
          return PRIZE_INFOS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INDEX_ISSET_ID = 0;
  private static final int __CANGETPRIZE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INDEX, new org.apache.thrift.meta_data.FieldMetaData("index", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.CAN_GET_PRIZE, new org.apache.thrift.meta_data.FieldMetaData("canGetPrize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.COMPLETED_PARAM, new org.apache.thrift.meta_data.FieldMetaData("completedParam", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.PARAM, new org.apache.thrift.meta_data.FieldMetaData("param", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRIZE_INFOS, new org.apache.thrift.meta_data.FieldMetaData("prizeInfos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrizeInfo.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ActivityPrizeInfo.class, metaDataMap);
  }

  public ActivityPrizeInfo() {
  }

  public ActivityPrizeInfo(
    byte index,
    boolean canGetPrize,
    List<String> completedParam,
    List<String> param,
    String content,
    PrizeInfo prizeInfos)
  {
    this();
    this.index = index;
    setIndexIsSet(true);
    this.canGetPrize = canGetPrize;
    setCanGetPrizeIsSet(true);
    this.completedParam = completedParam;
    this.param = param;
    this.content = content;
    this.prizeInfos = prizeInfos;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ActivityPrizeInfo(ActivityPrizeInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.index = other.index;
    this.canGetPrize = other.canGetPrize;
    if (other.isSetCompletedParam()) {
      List<String> __this__completedParam = new ArrayList<String>();
      for (String other_element : other.completedParam) {
        __this__completedParam.add(other_element);
      }
      this.completedParam = __this__completedParam;
    }
    if (other.isSetParam()) {
      List<String> __this__param = new ArrayList<String>();
      for (String other_element : other.param) {
        __this__param.add(other_element);
      }
      this.param = __this__param;
    }
    if (other.isSetContent()) {
      this.content = other.content;
    }
    if (other.isSetPrizeInfos()) {
      this.prizeInfos = new PrizeInfo(other.prizeInfos);
    }
  }

  public ActivityPrizeInfo deepCopy() {
    return new ActivityPrizeInfo(this);
  }

  @Override
  public void clear() {
    setIndexIsSet(false);
    this.index = 0;
    setCanGetPrizeIsSet(false);
    this.canGetPrize = false;
    this.completedParam = null;
    this.param = null;
    this.content = null;
    this.prizeInfos = null;
  }

  public byte getIndex() {
    return this.index;
  }

  public ActivityPrizeInfo setIndex(byte index) {
    this.index = index;
    setIndexIsSet(true);
    return this;
  }

  public void unsetIndex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INDEX_ISSET_ID);
  }

  /** Returns true if field index is set (has been assigned a value) and false otherwise */
  public boolean isSetIndex() {
    return EncodingUtils.testBit(__isset_bitfield, __INDEX_ISSET_ID);
  }

  public void setIndexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INDEX_ISSET_ID, value);
  }

  public boolean isCanGetPrize() {
    return this.canGetPrize;
  }

  public ActivityPrizeInfo setCanGetPrize(boolean canGetPrize) {
    this.canGetPrize = canGetPrize;
    setCanGetPrizeIsSet(true);
    return this;
  }

  public void unsetCanGetPrize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CANGETPRIZE_ISSET_ID);
  }

  /** Returns true if field canGetPrize is set (has been assigned a value) and false otherwise */
  public boolean isSetCanGetPrize() {
    return EncodingUtils.testBit(__isset_bitfield, __CANGETPRIZE_ISSET_ID);
  }

  public void setCanGetPrizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CANGETPRIZE_ISSET_ID, value);
  }

  public int getCompletedParamSize() {
    return (this.completedParam == null) ? 0 : this.completedParam.size();
  }

  public java.util.Iterator<String> getCompletedParamIterator() {
    return (this.completedParam == null) ? null : this.completedParam.iterator();
  }

  public void addToCompletedParam(String elem) {
    if (this.completedParam == null) {
      this.completedParam = new ArrayList<String>();
    }
    this.completedParam.add(elem);
  }

  public List<String> getCompletedParam() {
    return this.completedParam;
  }

  public ActivityPrizeInfo setCompletedParam(List<String> completedParam) {
    this.completedParam = completedParam;
    return this;
  }

  public void unsetCompletedParam() {
    this.completedParam = null;
  }

  /** Returns true if field completedParam is set (has been assigned a value) and false otherwise */
  public boolean isSetCompletedParam() {
    return this.completedParam != null;
  }

  public void setCompletedParamIsSet(boolean value) {
    if (!value) {
      this.completedParam = null;
    }
  }

  public int getParamSize() {
    return (this.param == null) ? 0 : this.param.size();
  }

  public java.util.Iterator<String> getParamIterator() {
    return (this.param == null) ? null : this.param.iterator();
  }

  public void addToParam(String elem) {
    if (this.param == null) {
      this.param = new ArrayList<String>();
    }
    this.param.add(elem);
  }

  public List<String> getParam() {
    return this.param;
  }

  public ActivityPrizeInfo setParam(List<String> param) {
    this.param = param;
    return this;
  }

  public void unsetParam() {
    this.param = null;
  }

  /** Returns true if field param is set (has been assigned a value) and false otherwise */
  public boolean isSetParam() {
    return this.param != null;
  }

  public void setParamIsSet(boolean value) {
    if (!value) {
      this.param = null;
    }
  }

  public String getContent() {
    return this.content;
  }

  public ActivityPrizeInfo setContent(String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public PrizeInfo getPrizeInfos() {
    return this.prizeInfos;
  }

  public ActivityPrizeInfo setPrizeInfos(PrizeInfo prizeInfos) {
    this.prizeInfos = prizeInfos;
    return this;
  }

  public void unsetPrizeInfos() {
    this.prizeInfos = null;
  }

  /** Returns true if field prizeInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetPrizeInfos() {
    return this.prizeInfos != null;
  }

  public void setPrizeInfosIsSet(boolean value) {
    if (!value) {
      this.prizeInfos = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INDEX:
      if (value == null) {
        unsetIndex();
      } else {
        setIndex((Byte)value);
      }
      break;

    case CAN_GET_PRIZE:
      if (value == null) {
        unsetCanGetPrize();
      } else {
        setCanGetPrize((Boolean)value);
      }
      break;

    case COMPLETED_PARAM:
      if (value == null) {
        unsetCompletedParam();
      } else {
        setCompletedParam((List<String>)value);
      }
      break;

    case PARAM:
      if (value == null) {
        unsetParam();
      } else {
        setParam((List<String>)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case PRIZE_INFOS:
      if (value == null) {
        unsetPrizeInfos();
      } else {
        setPrizeInfos((PrizeInfo)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INDEX:
      return Byte.valueOf(getIndex());

    case CAN_GET_PRIZE:
      return Boolean.valueOf(isCanGetPrize());

    case COMPLETED_PARAM:
      return getCompletedParam();

    case PARAM:
      return getParam();

    case CONTENT:
      return getContent();

    case PRIZE_INFOS:
      return getPrizeInfos();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INDEX:
      return isSetIndex();
    case CAN_GET_PRIZE:
      return isSetCanGetPrize();
    case COMPLETED_PARAM:
      return isSetCompletedParam();
    case PARAM:
      return isSetParam();
    case CONTENT:
      return isSetContent();
    case PRIZE_INFOS:
      return isSetPrizeInfos();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ActivityPrizeInfo)
      return this.equals((ActivityPrizeInfo)that);
    return false;
  }

  public boolean equals(ActivityPrizeInfo that) {
    if (that == null)
      return false;

    boolean this_present_index = true;
    boolean that_present_index = true;
    if (this_present_index || that_present_index) {
      if (!(this_present_index && that_present_index))
        return false;
      if (this.index != that.index)
        return false;
    }

    boolean this_present_canGetPrize = true;
    boolean that_present_canGetPrize = true;
    if (this_present_canGetPrize || that_present_canGetPrize) {
      if (!(this_present_canGetPrize && that_present_canGetPrize))
        return false;
      if (this.canGetPrize != that.canGetPrize)
        return false;
    }

    boolean this_present_completedParam = true && this.isSetCompletedParam();
    boolean that_present_completedParam = true && that.isSetCompletedParam();
    if (this_present_completedParam || that_present_completedParam) {
      if (!(this_present_completedParam && that_present_completedParam))
        return false;
      if (!this.completedParam.equals(that.completedParam))
        return false;
    }

    boolean this_present_param = true && this.isSetParam();
    boolean that_present_param = true && that.isSetParam();
    if (this_present_param || that_present_param) {
      if (!(this_present_param && that_present_param))
        return false;
      if (!this.param.equals(that.param))
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_prizeInfos = true && this.isSetPrizeInfos();
    boolean that_present_prizeInfos = true && that.isSetPrizeInfos();
    if (this_present_prizeInfos || that_present_prizeInfos) {
      if (!(this_present_prizeInfos && that_present_prizeInfos))
        return false;
      if (!this.prizeInfos.equals(that.prizeInfos))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ActivityPrizeInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ActivityPrizeInfo typedOther = (ActivityPrizeInfo)other;

    lastComparison = Boolean.valueOf(isSetIndex()).compareTo(typedOther.isSetIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.index, typedOther.index);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCanGetPrize()).compareTo(typedOther.isSetCanGetPrize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCanGetPrize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.canGetPrize, typedOther.canGetPrize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompletedParam()).compareTo(typedOther.isSetCompletedParam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompletedParam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.completedParam, typedOther.completedParam);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParam()).compareTo(typedOther.isSetParam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param, typedOther.param);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(typedOther.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, typedOther.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrizeInfos()).compareTo(typedOther.isSetPrizeInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrizeInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prizeInfos, typedOther.prizeInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ActivityPrizeInfo(");
    boolean first = true;

    sb.append("index:");
    sb.append(this.index);
    first = false;
    if (!first) sb.append(", ");
    sb.append("canGetPrize:");
    sb.append(this.canGetPrize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("completedParam:");
    if (this.completedParam == null) {
      sb.append("null");
    } else {
      sb.append(this.completedParam);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("param:");
    if (this.param == null) {
      sb.append("null");
    } else {
      sb.append(this.param);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      sb.append(this.content);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("prizeInfos:");
    if (this.prizeInfos == null) {
      sb.append("null");
    } else {
      sb.append(this.prizeInfos);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (prizeInfos != null) {
      prizeInfos.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ActivityPrizeInfoStandardSchemeFactory implements SchemeFactory {
    public ActivityPrizeInfoStandardScheme getScheme() {
      return new ActivityPrizeInfoStandardScheme();
    }
  }

  private static class ActivityPrizeInfoStandardScheme extends StandardScheme<ActivityPrizeInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ActivityPrizeInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.index = iprot.readByte();
              struct.setIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CAN_GET_PRIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.canGetPrize = iprot.readBool();
              struct.setCanGetPrizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMPLETED_PARAM
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list316 = iprot.readListBegin();
                struct.completedParam = new ArrayList<String>(_list316.size);
                for (int _i317 = 0; _i317 < _list316.size; ++_i317)
                {
                  String _elem318; // required
                  _elem318 = iprot.readString();
                  struct.completedParam.add(_elem318);
                }
                iprot.readListEnd();
              }
              struct.setCompletedParamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PARAM
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list319 = iprot.readListBegin();
                struct.param = new ArrayList<String>(_list319.size);
                for (int _i320 = 0; _i320 < _list319.size; ++_i320)
                {
                  String _elem321; // required
                  _elem321 = iprot.readString();
                  struct.param.add(_elem321);
                }
                iprot.readListEnd();
              }
              struct.setParamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PRIZE_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.prizeInfos = new PrizeInfo();
              struct.prizeInfos.read(iprot);
              struct.setPrizeInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ActivityPrizeInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(INDEX_FIELD_DESC);
      oprot.writeByte(struct.index);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CAN_GET_PRIZE_FIELD_DESC);
      oprot.writeBool(struct.canGetPrize);
      oprot.writeFieldEnd();
      if (struct.completedParam != null) {
        oprot.writeFieldBegin(COMPLETED_PARAM_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.completedParam.size()));
          for (String _iter322 : struct.completedParam)
          {
            oprot.writeString(_iter322);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.param != null) {
        oprot.writeFieldBegin(PARAM_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.param.size()));
          for (String _iter323 : struct.param)
          {
            oprot.writeString(_iter323);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeString(struct.content);
        oprot.writeFieldEnd();
      }
      if (struct.prizeInfos != null) {
        oprot.writeFieldBegin(PRIZE_INFOS_FIELD_DESC);
        struct.prizeInfos.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ActivityPrizeInfoTupleSchemeFactory implements SchemeFactory {
    public ActivityPrizeInfoTupleScheme getScheme() {
      return new ActivityPrizeInfoTupleScheme();
    }
  }

  private static class ActivityPrizeInfoTupleScheme extends TupleScheme<ActivityPrizeInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ActivityPrizeInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetIndex()) {
        optionals.set(0);
      }
      if (struct.isSetCanGetPrize()) {
        optionals.set(1);
      }
      if (struct.isSetCompletedParam()) {
        optionals.set(2);
      }
      if (struct.isSetParam()) {
        optionals.set(3);
      }
      if (struct.isSetContent()) {
        optionals.set(4);
      }
      if (struct.isSetPrizeInfos()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetIndex()) {
        oprot.writeByte(struct.index);
      }
      if (struct.isSetCanGetPrize()) {
        oprot.writeBool(struct.canGetPrize);
      }
      if (struct.isSetCompletedParam()) {
        {
          oprot.writeI32(struct.completedParam.size());
          for (String _iter324 : struct.completedParam)
          {
            oprot.writeString(_iter324);
          }
        }
      }
      if (struct.isSetParam()) {
        {
          oprot.writeI32(struct.param.size());
          for (String _iter325 : struct.param)
          {
            oprot.writeString(_iter325);
          }
        }
      }
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
      if (struct.isSetPrizeInfos()) {
        struct.prizeInfos.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ActivityPrizeInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.index = iprot.readByte();
        struct.setIndexIsSet(true);
      }
      if (incoming.get(1)) {
        struct.canGetPrize = iprot.readBool();
        struct.setCanGetPrizeIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list326 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.completedParam = new ArrayList<String>(_list326.size);
          for (int _i327 = 0; _i327 < _list326.size; ++_i327)
          {
            String _elem328; // required
            _elem328 = iprot.readString();
            struct.completedParam.add(_elem328);
          }
        }
        struct.setCompletedParamIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list329 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.param = new ArrayList<String>(_list329.size);
          for (int _i330 = 0; _i330 < _list329.size; ++_i330)
          {
            String _elem331; // required
            _elem331 = iprot.readString();
            struct.param.add(_elem331);
          }
        }
        struct.setParamIsSet(true);
      }
      if (incoming.get(4)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
      if (incoming.get(5)) {
        struct.prizeInfos = new PrizeInfo();
        struct.prizeInfos.read(iprot);
        struct.setPrizeInfosIsSet(true);
      }
    }
  }

}

