/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class LoversAQGameResp implements org.apache.thrift.TBase<LoversAQGameResp, LoversAQGameResp._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LoversAQGameResp");

  private static final org.apache.thrift.protocol.TField INDEX_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("indexMap", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("result", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField MARK_FIELD_DESC = new org.apache.thrift.protocol.TField("mark", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LoversAQGameRespStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LoversAQGameRespTupleSchemeFactory());
  }

  public Map<Long,Byte> indexMap; // optional
  public byte result; // required
  public int mark; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INDEX_MAP((short)1, "indexMap"),
    RESULT((short)2, "result"),
    MARK((short)3, "mark");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INDEX_MAP
          return INDEX_MAP;
        case 2: // RESULT
          return RESULT;
        case 3: // MARK
          return MARK;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RESULT_ISSET_ID = 0;
  private static final int __MARK_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.INDEX_MAP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INDEX_MAP, new org.apache.thrift.meta_data.FieldMetaData("indexMap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE))));
    tmpMap.put(_Fields.RESULT, new org.apache.thrift.meta_data.FieldMetaData("result", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.MARK, new org.apache.thrift.meta_data.FieldMetaData("mark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LoversAQGameResp.class, metaDataMap);
  }

  public LoversAQGameResp() {
  }

  public LoversAQGameResp(
    byte result,
    int mark)
  {
    this();
    this.result = result;
    setResultIsSet(true);
    this.mark = mark;
    setMarkIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LoversAQGameResp(LoversAQGameResp other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetIndexMap()) {
      Map<Long,Byte> __this__indexMap = new HashMap<Long,Byte>();
      for (Map.Entry<Long, Byte> other_element : other.indexMap.entrySet()) {

        Long other_element_key = other_element.getKey();
        Byte other_element_value = other_element.getValue();

        Long __this__indexMap_copy_key = other_element_key;

        Byte __this__indexMap_copy_value = other_element_value;

        __this__indexMap.put(__this__indexMap_copy_key, __this__indexMap_copy_value);
      }
      this.indexMap = __this__indexMap;
    }
    this.result = other.result;
    this.mark = other.mark;
  }

  public LoversAQGameResp deepCopy() {
    return new LoversAQGameResp(this);
  }

  @Override
  public void clear() {
    this.indexMap = null;
    setResultIsSet(false);
    this.result = 0;
    setMarkIsSet(false);
    this.mark = 0;
  }

  public int getIndexMapSize() {
    return (this.indexMap == null) ? 0 : this.indexMap.size();
  }

  public void putToIndexMap(long key, byte val) {
    if (this.indexMap == null) {
      this.indexMap = new HashMap<Long,Byte>();
    }
    this.indexMap.put(key, val);
  }

  public Map<Long,Byte> getIndexMap() {
    return this.indexMap;
  }

  public LoversAQGameResp setIndexMap(Map<Long,Byte> indexMap) {
    this.indexMap = indexMap;
    return this;
  }

  public void unsetIndexMap() {
    this.indexMap = null;
  }

  /** Returns true if field indexMap is set (has been assigned a value) and false otherwise */
  public boolean isSetIndexMap() {
    return this.indexMap != null;
  }

  public void setIndexMapIsSet(boolean value) {
    if (!value) {
      this.indexMap = null;
    }
  }

  public byte getResult() {
    return this.result;
  }

  public LoversAQGameResp setResult(byte result) {
    this.result = result;
    setResultIsSet(true);
    return this;
  }

  public void unsetResult() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RESULT_ISSET_ID);
  }

  /** Returns true if field result is set (has been assigned a value) and false otherwise */
  public boolean isSetResult() {
    return EncodingUtils.testBit(__isset_bitfield, __RESULT_ISSET_ID);
  }

  public void setResultIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RESULT_ISSET_ID, value);
  }

  public int getMark() {
    return this.mark;
  }

  public LoversAQGameResp setMark(int mark) {
    this.mark = mark;
    setMarkIsSet(true);
    return this;
  }

  public void unsetMark() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MARK_ISSET_ID);
  }

  /** Returns true if field mark is set (has been assigned a value) and false otherwise */
  public boolean isSetMark() {
    return EncodingUtils.testBit(__isset_bitfield, __MARK_ISSET_ID);
  }

  public void setMarkIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MARK_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INDEX_MAP:
      if (value == null) {
        unsetIndexMap();
      } else {
        setIndexMap((Map<Long,Byte>)value);
      }
      break;

    case RESULT:
      if (value == null) {
        unsetResult();
      } else {
        setResult((Byte)value);
      }
      break;

    case MARK:
      if (value == null) {
        unsetMark();
      } else {
        setMark((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INDEX_MAP:
      return getIndexMap();

    case RESULT:
      return Byte.valueOf(getResult());

    case MARK:
      return Integer.valueOf(getMark());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INDEX_MAP:
      return isSetIndexMap();
    case RESULT:
      return isSetResult();
    case MARK:
      return isSetMark();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LoversAQGameResp)
      return this.equals((LoversAQGameResp)that);
    return false;
  }

  public boolean equals(LoversAQGameResp that) {
    if (that == null)
      return false;

    boolean this_present_indexMap = true && this.isSetIndexMap();
    boolean that_present_indexMap = true && that.isSetIndexMap();
    if (this_present_indexMap || that_present_indexMap) {
      if (!(this_present_indexMap && that_present_indexMap))
        return false;
      if (!this.indexMap.equals(that.indexMap))
        return false;
    }

    boolean this_present_result = true;
    boolean that_present_result = true;
    if (this_present_result || that_present_result) {
      if (!(this_present_result && that_present_result))
        return false;
      if (this.result != that.result)
        return false;
    }

    boolean this_present_mark = true;
    boolean that_present_mark = true;
    if (this_present_mark || that_present_mark) {
      if (!(this_present_mark && that_present_mark))
        return false;
      if (this.mark != that.mark)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(LoversAQGameResp other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    LoversAQGameResp typedOther = (LoversAQGameResp)other;

    lastComparison = Boolean.valueOf(isSetIndexMap()).compareTo(typedOther.isSetIndexMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndexMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.indexMap, typedOther.indexMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResult()).compareTo(typedOther.isSetResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.result, typedOther.result);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMark()).compareTo(typedOther.isSetMark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mark, typedOther.mark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LoversAQGameResp(");
    boolean first = true;

    if (isSetIndexMap()) {
      sb.append("indexMap:");
      if (this.indexMap == null) {
        sb.append("null");
      } else {
        sb.append(this.indexMap);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("result:");
    sb.append(this.result);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mark:");
    sb.append(this.mark);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LoversAQGameRespStandardSchemeFactory implements SchemeFactory {
    public LoversAQGameRespStandardScheme getScheme() {
      return new LoversAQGameRespStandardScheme();
    }
  }

  private static class LoversAQGameRespStandardScheme extends StandardScheme<LoversAQGameResp> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LoversAQGameResp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INDEX_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map504 = iprot.readMapBegin();
                struct.indexMap = new HashMap<Long,Byte>(2*_map504.size);
                for (int _i505 = 0; _i505 < _map504.size; ++_i505)
                {
                  long _key506; // required
                  byte _val507; // required
                  _key506 = iprot.readI64();
                  _val507 = iprot.readByte();
                  struct.indexMap.put(_key506, _val507);
                }
                iprot.readMapEnd();
              }
              struct.setIndexMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.result = iprot.readByte();
              struct.setResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MARK
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mark = iprot.readI32();
              struct.setMarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LoversAQGameResp struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.indexMap != null) {
        if (struct.isSetIndexMap()) {
          oprot.writeFieldBegin(INDEX_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.BYTE, struct.indexMap.size()));
            for (Map.Entry<Long, Byte> _iter508 : struct.indexMap.entrySet())
            {
              oprot.writeI64(_iter508.getKey());
              oprot.writeByte(_iter508.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(RESULT_FIELD_DESC);
      oprot.writeByte(struct.result);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MARK_FIELD_DESC);
      oprot.writeI32(struct.mark);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LoversAQGameRespTupleSchemeFactory implements SchemeFactory {
    public LoversAQGameRespTupleScheme getScheme() {
      return new LoversAQGameRespTupleScheme();
    }
  }

  private static class LoversAQGameRespTupleScheme extends TupleScheme<LoversAQGameResp> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LoversAQGameResp struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetIndexMap()) {
        optionals.set(0);
      }
      if (struct.isSetResult()) {
        optionals.set(1);
      }
      if (struct.isSetMark()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetIndexMap()) {
        {
          oprot.writeI32(struct.indexMap.size());
          for (Map.Entry<Long, Byte> _iter509 : struct.indexMap.entrySet())
          {
            oprot.writeI64(_iter509.getKey());
            oprot.writeByte(_iter509.getValue());
          }
        }
      }
      if (struct.isSetResult()) {
        oprot.writeByte(struct.result);
      }
      if (struct.isSetMark()) {
        oprot.writeI32(struct.mark);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LoversAQGameResp struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map510 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.BYTE, iprot.readI32());
          struct.indexMap = new HashMap<Long,Byte>(2*_map510.size);
          for (int _i511 = 0; _i511 < _map510.size; ++_i511)
          {
            long _key512; // required
            byte _val513; // required
            _key512 = iprot.readI64();
            _val513 = iprot.readByte();
            struct.indexMap.put(_key512, _val513);
          }
        }
        struct.setIndexMapIsSet(true);
      }
      if (incoming.get(1)) {
        struct.result = iprot.readByte();
        struct.setResultIsSet(true);
      }
      if (incoming.get(2)) {
        struct.mark = iprot.readI32();
        struct.setMarkIsSet(true);
      }
    }
  }

}

