/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 更新成就详细信息
 */
public class SCUpdateAchieveDetailInfos implements org.apache.thrift.TBase<SCUpdateAchieveDetailInfos, SCUpdateAchieveDetailInfos._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCUpdateAchieveDetailInfos");

  private static final org.apache.thrift.protocol.TField UPDATE_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("updateInfos", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField ACHIEVE_PROCESS_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("achieveProcessInfo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCUpdateAchieveDetailInfosStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCUpdateAchieveDetailInfosTupleSchemeFactory());
  }

  /**
   * 成就id对应更新信息
   */
  public Map<Integer,AchieveDetailInfo> updateInfos; // required
  public SCAchieveProcessInfo achieveProcessInfo; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 成就id对应更新信息
     */
    UPDATE_INFOS((short)1, "updateInfos"),
    ACHIEVE_PROCESS_INFO((short)2, "achieveProcessInfo");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UPDATE_INFOS
          return UPDATE_INFOS;
        case 2: // ACHIEVE_PROCESS_INFO
          return ACHIEVE_PROCESS_INFO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UPDATE_INFOS, new org.apache.thrift.meta_data.FieldMetaData("updateInfos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AchieveDetailInfo.class))));
    tmpMap.put(_Fields.ACHIEVE_PROCESS_INFO, new org.apache.thrift.meta_data.FieldMetaData("achieveProcessInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SCAchieveProcessInfo.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCUpdateAchieveDetailInfos.class, metaDataMap);
  }

  public SCUpdateAchieveDetailInfos() {
  }

  public SCUpdateAchieveDetailInfos(
    Map<Integer,AchieveDetailInfo> updateInfos,
    SCAchieveProcessInfo achieveProcessInfo)
  {
    this();
    this.updateInfos = updateInfos;
    this.achieveProcessInfo = achieveProcessInfo;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCUpdateAchieveDetailInfos(SCUpdateAchieveDetailInfos other) {
    if (other.isSetUpdateInfos()) {
      Map<Integer,AchieveDetailInfo> __this__updateInfos = new HashMap<Integer,AchieveDetailInfo>();
      for (Map.Entry<Integer, AchieveDetailInfo> other_element : other.updateInfos.entrySet()) {

        Integer other_element_key = other_element.getKey();
        AchieveDetailInfo other_element_value = other_element.getValue();

        Integer __this__updateInfos_copy_key = other_element_key;

        AchieveDetailInfo __this__updateInfos_copy_value = new AchieveDetailInfo(other_element_value);

        __this__updateInfos.put(__this__updateInfos_copy_key, __this__updateInfos_copy_value);
      }
      this.updateInfos = __this__updateInfos;
    }
    if (other.isSetAchieveProcessInfo()) {
      this.achieveProcessInfo = new SCAchieveProcessInfo(other.achieveProcessInfo);
    }
  }

  public SCUpdateAchieveDetailInfos deepCopy() {
    return new SCUpdateAchieveDetailInfos(this);
  }

  @Override
  public void clear() {
    this.updateInfos = null;
    this.achieveProcessInfo = null;
  }

  public int getUpdateInfosSize() {
    return (this.updateInfos == null) ? 0 : this.updateInfos.size();
  }

  public void putToUpdateInfos(int key, AchieveDetailInfo val) {
    if (this.updateInfos == null) {
      this.updateInfos = new HashMap<Integer,AchieveDetailInfo>();
    }
    this.updateInfos.put(key, val);
  }

  /**
   * 成就id对应更新信息
   */
  public Map<Integer,AchieveDetailInfo> getUpdateInfos() {
    return this.updateInfos;
  }

  /**
   * 成就id对应更新信息
   */
  public SCUpdateAchieveDetailInfos setUpdateInfos(Map<Integer,AchieveDetailInfo> updateInfos) {
    this.updateInfos = updateInfos;
    return this;
  }

  public void unsetUpdateInfos() {
    this.updateInfos = null;
  }

  /** Returns true if field updateInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateInfos() {
    return this.updateInfos != null;
  }

  public void setUpdateInfosIsSet(boolean value) {
    if (!value) {
      this.updateInfos = null;
    }
  }

  public SCAchieveProcessInfo getAchieveProcessInfo() {
    return this.achieveProcessInfo;
  }

  public SCUpdateAchieveDetailInfos setAchieveProcessInfo(SCAchieveProcessInfo achieveProcessInfo) {
    this.achieveProcessInfo = achieveProcessInfo;
    return this;
  }

  public void unsetAchieveProcessInfo() {
    this.achieveProcessInfo = null;
  }

  /** Returns true if field achieveProcessInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetAchieveProcessInfo() {
    return this.achieveProcessInfo != null;
  }

  public void setAchieveProcessInfoIsSet(boolean value) {
    if (!value) {
      this.achieveProcessInfo = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case UPDATE_INFOS:
      if (value == null) {
        unsetUpdateInfos();
      } else {
        setUpdateInfos((Map<Integer,AchieveDetailInfo>)value);
      }
      break;

    case ACHIEVE_PROCESS_INFO:
      if (value == null) {
        unsetAchieveProcessInfo();
      } else {
        setAchieveProcessInfo((SCAchieveProcessInfo)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case UPDATE_INFOS:
      return getUpdateInfos();

    case ACHIEVE_PROCESS_INFO:
      return getAchieveProcessInfo();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case UPDATE_INFOS:
      return isSetUpdateInfos();
    case ACHIEVE_PROCESS_INFO:
      return isSetAchieveProcessInfo();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCUpdateAchieveDetailInfos)
      return this.equals((SCUpdateAchieveDetailInfos)that);
    return false;
  }

  public boolean equals(SCUpdateAchieveDetailInfos that) {
    if (that == null)
      return false;

    boolean this_present_updateInfos = true && this.isSetUpdateInfos();
    boolean that_present_updateInfos = true && that.isSetUpdateInfos();
    if (this_present_updateInfos || that_present_updateInfos) {
      if (!(this_present_updateInfos && that_present_updateInfos))
        return false;
      if (!this.updateInfos.equals(that.updateInfos))
        return false;
    }

    boolean this_present_achieveProcessInfo = true && this.isSetAchieveProcessInfo();
    boolean that_present_achieveProcessInfo = true && that.isSetAchieveProcessInfo();
    if (this_present_achieveProcessInfo || that_present_achieveProcessInfo) {
      if (!(this_present_achieveProcessInfo && that_present_achieveProcessInfo))
        return false;
      if (!this.achieveProcessInfo.equals(that.achieveProcessInfo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCUpdateAchieveDetailInfos other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCUpdateAchieveDetailInfos typedOther = (SCUpdateAchieveDetailInfos)other;

    lastComparison = Boolean.valueOf(isSetUpdateInfos()).compareTo(typedOther.isSetUpdateInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateInfos, typedOther.updateInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAchieveProcessInfo()).compareTo(typedOther.isSetAchieveProcessInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAchieveProcessInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.achieveProcessInfo, typedOther.achieveProcessInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCUpdateAchieveDetailInfos(");
    boolean first = true;

    sb.append("updateInfos:");
    if (this.updateInfos == null) {
      sb.append("null");
    } else {
      sb.append(this.updateInfos);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("achieveProcessInfo:");
    if (this.achieveProcessInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.achieveProcessInfo);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (achieveProcessInfo != null) {
      achieveProcessInfo.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCUpdateAchieveDetailInfosStandardSchemeFactory implements SchemeFactory {
    public SCUpdateAchieveDetailInfosStandardScheme getScheme() {
      return new SCUpdateAchieveDetailInfosStandardScheme();
    }
  }

  private static class SCUpdateAchieveDetailInfosStandardScheme extends StandardScheme<SCUpdateAchieveDetailInfos> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCUpdateAchieveDetailInfos struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UPDATE_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map16 = iprot.readMapBegin();
                struct.updateInfos = new HashMap<Integer,AchieveDetailInfo>(2*_map16.size);
                for (int _i17 = 0; _i17 < _map16.size; ++_i17)
                {
                  int _key18; // required
                  AchieveDetailInfo _val19; // required
                  _key18 = iprot.readI32();
                  _val19 = new AchieveDetailInfo();
                  _val19.read(iprot);
                  struct.updateInfos.put(_key18, _val19);
                }
                iprot.readMapEnd();
              }
              struct.setUpdateInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ACHIEVE_PROCESS_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.achieveProcessInfo = new SCAchieveProcessInfo();
              struct.achieveProcessInfo.read(iprot);
              struct.setAchieveProcessInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCUpdateAchieveDetailInfos struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.updateInfos != null) {
        oprot.writeFieldBegin(UPDATE_INFOS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, struct.updateInfos.size()));
          for (Map.Entry<Integer, AchieveDetailInfo> _iter20 : struct.updateInfos.entrySet())
          {
            oprot.writeI32(_iter20.getKey());
            _iter20.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.achieveProcessInfo != null) {
        oprot.writeFieldBegin(ACHIEVE_PROCESS_INFO_FIELD_DESC);
        struct.achieveProcessInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCUpdateAchieveDetailInfosTupleSchemeFactory implements SchemeFactory {
    public SCUpdateAchieveDetailInfosTupleScheme getScheme() {
      return new SCUpdateAchieveDetailInfosTupleScheme();
    }
  }

  private static class SCUpdateAchieveDetailInfosTupleScheme extends TupleScheme<SCUpdateAchieveDetailInfos> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCUpdateAchieveDetailInfos struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUpdateInfos()) {
        optionals.set(0);
      }
      if (struct.isSetAchieveProcessInfo()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetUpdateInfos()) {
        {
          oprot.writeI32(struct.updateInfos.size());
          for (Map.Entry<Integer, AchieveDetailInfo> _iter21 : struct.updateInfos.entrySet())
          {
            oprot.writeI32(_iter21.getKey());
            _iter21.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetAchieveProcessInfo()) {
        struct.achieveProcessInfo.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCUpdateAchieveDetailInfos struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map22 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.updateInfos = new HashMap<Integer,AchieveDetailInfo>(2*_map22.size);
          for (int _i23 = 0; _i23 < _map22.size; ++_i23)
          {
            int _key24; // required
            AchieveDetailInfo _val25; // required
            _key24 = iprot.readI32();
            _val25 = new AchieveDetailInfo();
            _val25.read(iprot);
            struct.updateInfos.put(_key24, _val25);
          }
        }
        struct.setUpdateInfosIsSet(true);
      }
      if (incoming.get(1)) {
        struct.achieveProcessInfo = new SCAchieveProcessInfo();
        struct.achieveProcessInfo.read(iprot);
        struct.setAchieveProcessInfoIsSet(true);
      }
    }
  }

}

