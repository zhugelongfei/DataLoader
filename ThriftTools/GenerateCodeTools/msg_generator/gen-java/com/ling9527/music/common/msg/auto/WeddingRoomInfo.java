/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 婚礼房间信息
 */
public class WeddingRoomInfo implements org.apache.thrift.TBase<WeddingRoomInfo, WeddingRoomInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WeddingRoomInfo");

  private static final org.apache.thrift.protocol.TField ROOM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("roomId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField BRIDEGROOM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bridegroomId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField BRIDEGROOM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bridegroomName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField BRIDEGROOM_NAME_FASHION_FIELD_DESC = new org.apache.thrift.protocol.TField("bridegroomNameFashion", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField BRIDEGROOM_VIP_LVL_FIELD_DESC = new org.apache.thrift.protocol.TField("bridegroomVipLvl", org.apache.thrift.protocol.TType.BYTE, (short)5);
  private static final org.apache.thrift.protocol.TField COUPLE_POS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("couplePosId", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField BRIDE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("brideId", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField BRIDE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("brideName", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField BRIDE_NAME_FASHION_FIELD_DESC = new org.apache.thrift.protocol.TField("brideNameFashion", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField BRIDE_VIP_LVL_FIELD_DESC = new org.apache.thrift.protocol.TField("brideVipLvl", org.apache.thrift.protocol.TType.BYTE, (short)10);
  private static final org.apache.thrift.protocol.TField ROOM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("roomName", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField MEMBER_SEX_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("memberSexInfo", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField BRIDEGROOM_TAG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bridegroomTagId", org.apache.thrift.protocol.TType.I16, (short)13);
  private static final org.apache.thrift.protocol.TField BRIDE_TAG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("brideTagId", org.apache.thrift.protocol.TType.I16, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new WeddingRoomInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new WeddingRoomInfoTupleSchemeFactory());
  }

  /**
   * 房间id
   */
  public int roomId; // required
  /**
   * 新郎角色id
   */
  public long bridegroomId; // required
  /**
   * 新郎角色名
   */
  public String bridegroomName; // required
  /**
   * 新郎名字时尚id
   */
  public int bridegroomNameFashion; // required
  /**
   * 新郎vip等级
   */
  public byte bridegroomVipLvl; // required
  /**
   * 新人动作id
   */
  public int couplePosId; // required
  /**
   * 新娘角色id
   */
  public long brideId; // required
  /**
   * 新娘角色名
   */
  public String brideName; // required
  /**
   * 新娘名字时尚id
   */
  public int brideNameFashion; // required
  /**
   * 新娘vip等级
   */
  public byte brideVipLvl; // required
  /**
   * 房间名
   */
  public String roomName; // required
  /**
   * 成员性别，按位表示位置和性别
   */
  public int memberSexInfo; // required
  /**
   * 新郎标签id
   */
  public short bridegroomTagId; // required
  /**
   * 新娘标签id
   */
  public short brideTagId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 房间id
     */
    ROOM_ID((short)1, "roomId"),
    /**
     * 新郎角色id
     */
    BRIDEGROOM_ID((short)2, "bridegroomId"),
    /**
     * 新郎角色名
     */
    BRIDEGROOM_NAME((short)3, "bridegroomName"),
    /**
     * 新郎名字时尚id
     */
    BRIDEGROOM_NAME_FASHION((short)4, "bridegroomNameFashion"),
    /**
     * 新郎vip等级
     */
    BRIDEGROOM_VIP_LVL((short)5, "bridegroomVipLvl"),
    /**
     * 新人动作id
     */
    COUPLE_POS_ID((short)6, "couplePosId"),
    /**
     * 新娘角色id
     */
    BRIDE_ID((short)7, "brideId"),
    /**
     * 新娘角色名
     */
    BRIDE_NAME((short)8, "brideName"),
    /**
     * 新娘名字时尚id
     */
    BRIDE_NAME_FASHION((short)9, "brideNameFashion"),
    /**
     * 新娘vip等级
     */
    BRIDE_VIP_LVL((short)10, "brideVipLvl"),
    /**
     * 房间名
     */
    ROOM_NAME((short)11, "roomName"),
    /**
     * 成员性别，按位表示位置和性别
     */
    MEMBER_SEX_INFO((short)12, "memberSexInfo"),
    /**
     * 新郎标签id
     */
    BRIDEGROOM_TAG_ID((short)13, "bridegroomTagId"),
    /**
     * 新娘标签id
     */
    BRIDE_TAG_ID((short)14, "brideTagId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ROOM_ID
          return ROOM_ID;
        case 2: // BRIDEGROOM_ID
          return BRIDEGROOM_ID;
        case 3: // BRIDEGROOM_NAME
          return BRIDEGROOM_NAME;
        case 4: // BRIDEGROOM_NAME_FASHION
          return BRIDEGROOM_NAME_FASHION;
        case 5: // BRIDEGROOM_VIP_LVL
          return BRIDEGROOM_VIP_LVL;
        case 6: // COUPLE_POS_ID
          return COUPLE_POS_ID;
        case 7: // BRIDE_ID
          return BRIDE_ID;
        case 8: // BRIDE_NAME
          return BRIDE_NAME;
        case 9: // BRIDE_NAME_FASHION
          return BRIDE_NAME_FASHION;
        case 10: // BRIDE_VIP_LVL
          return BRIDE_VIP_LVL;
        case 11: // ROOM_NAME
          return ROOM_NAME;
        case 12: // MEMBER_SEX_INFO
          return MEMBER_SEX_INFO;
        case 13: // BRIDEGROOM_TAG_ID
          return BRIDEGROOM_TAG_ID;
        case 14: // BRIDE_TAG_ID
          return BRIDE_TAG_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ROOMID_ISSET_ID = 0;
  private static final int __BRIDEGROOMID_ISSET_ID = 1;
  private static final int __BRIDEGROOMNAMEFASHION_ISSET_ID = 2;
  private static final int __BRIDEGROOMVIPLVL_ISSET_ID = 3;
  private static final int __COUPLEPOSID_ISSET_ID = 4;
  private static final int __BRIDEID_ISSET_ID = 5;
  private static final int __BRIDENAMEFASHION_ISSET_ID = 6;
  private static final int __BRIDEVIPLVL_ISSET_ID = 7;
  private static final int __MEMBERSEXINFO_ISSET_ID = 8;
  private static final int __BRIDEGROOMTAGID_ISSET_ID = 9;
  private static final int __BRIDETAGID_ISSET_ID = 10;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ROOM_ID, new org.apache.thrift.meta_data.FieldMetaData("roomId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BRIDEGROOM_ID, new org.apache.thrift.meta_data.FieldMetaData("bridegroomId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BRIDEGROOM_NAME, new org.apache.thrift.meta_data.FieldMetaData("bridegroomName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BRIDEGROOM_NAME_FASHION, new org.apache.thrift.meta_data.FieldMetaData("bridegroomNameFashion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BRIDEGROOM_VIP_LVL, new org.apache.thrift.meta_data.FieldMetaData("bridegroomVipLvl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.COUPLE_POS_ID, new org.apache.thrift.meta_data.FieldMetaData("couplePosId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BRIDE_ID, new org.apache.thrift.meta_data.FieldMetaData("brideId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BRIDE_NAME, new org.apache.thrift.meta_data.FieldMetaData("brideName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BRIDE_NAME_FASHION, new org.apache.thrift.meta_data.FieldMetaData("brideNameFashion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BRIDE_VIP_LVL, new org.apache.thrift.meta_data.FieldMetaData("brideVipLvl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.ROOM_NAME, new org.apache.thrift.meta_data.FieldMetaData("roomName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEMBER_SEX_INFO, new org.apache.thrift.meta_data.FieldMetaData("memberSexInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BRIDEGROOM_TAG_ID, new org.apache.thrift.meta_data.FieldMetaData("bridegroomTagId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.BRIDE_TAG_ID, new org.apache.thrift.meta_data.FieldMetaData("brideTagId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WeddingRoomInfo.class, metaDataMap);
  }

  public WeddingRoomInfo() {
  }

  public WeddingRoomInfo(
    int roomId,
    long bridegroomId,
    String bridegroomName,
    int bridegroomNameFashion,
    byte bridegroomVipLvl,
    int couplePosId,
    long brideId,
    String brideName,
    int brideNameFashion,
    byte brideVipLvl,
    String roomName,
    int memberSexInfo,
    short bridegroomTagId,
    short brideTagId)
  {
    this();
    this.roomId = roomId;
    setRoomIdIsSet(true);
    this.bridegroomId = bridegroomId;
    setBridegroomIdIsSet(true);
    this.bridegroomName = bridegroomName;
    this.bridegroomNameFashion = bridegroomNameFashion;
    setBridegroomNameFashionIsSet(true);
    this.bridegroomVipLvl = bridegroomVipLvl;
    setBridegroomVipLvlIsSet(true);
    this.couplePosId = couplePosId;
    setCouplePosIdIsSet(true);
    this.brideId = brideId;
    setBrideIdIsSet(true);
    this.brideName = brideName;
    this.brideNameFashion = brideNameFashion;
    setBrideNameFashionIsSet(true);
    this.brideVipLvl = brideVipLvl;
    setBrideVipLvlIsSet(true);
    this.roomName = roomName;
    this.memberSexInfo = memberSexInfo;
    setMemberSexInfoIsSet(true);
    this.bridegroomTagId = bridegroomTagId;
    setBridegroomTagIdIsSet(true);
    this.brideTagId = brideTagId;
    setBrideTagIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WeddingRoomInfo(WeddingRoomInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.roomId = other.roomId;
    this.bridegroomId = other.bridegroomId;
    if (other.isSetBridegroomName()) {
      this.bridegroomName = other.bridegroomName;
    }
    this.bridegroomNameFashion = other.bridegroomNameFashion;
    this.bridegroomVipLvl = other.bridegroomVipLvl;
    this.couplePosId = other.couplePosId;
    this.brideId = other.brideId;
    if (other.isSetBrideName()) {
      this.brideName = other.brideName;
    }
    this.brideNameFashion = other.brideNameFashion;
    this.brideVipLvl = other.brideVipLvl;
    if (other.isSetRoomName()) {
      this.roomName = other.roomName;
    }
    this.memberSexInfo = other.memberSexInfo;
    this.bridegroomTagId = other.bridegroomTagId;
    this.brideTagId = other.brideTagId;
  }

  public WeddingRoomInfo deepCopy() {
    return new WeddingRoomInfo(this);
  }

  @Override
  public void clear() {
    setRoomIdIsSet(false);
    this.roomId = 0;
    setBridegroomIdIsSet(false);
    this.bridegroomId = 0;
    this.bridegroomName = null;
    setBridegroomNameFashionIsSet(false);
    this.bridegroomNameFashion = 0;
    setBridegroomVipLvlIsSet(false);
    this.bridegroomVipLvl = 0;
    setCouplePosIdIsSet(false);
    this.couplePosId = 0;
    setBrideIdIsSet(false);
    this.brideId = 0;
    this.brideName = null;
    setBrideNameFashionIsSet(false);
    this.brideNameFashion = 0;
    setBrideVipLvlIsSet(false);
    this.brideVipLvl = 0;
    this.roomName = null;
    setMemberSexInfoIsSet(false);
    this.memberSexInfo = 0;
    setBridegroomTagIdIsSet(false);
    this.bridegroomTagId = 0;
    setBrideTagIdIsSet(false);
    this.brideTagId = 0;
  }

  /**
   * 房间id
   */
  public int getRoomId() {
    return this.roomId;
  }

  /**
   * 房间id
   */
  public WeddingRoomInfo setRoomId(int roomId) {
    this.roomId = roomId;
    setRoomIdIsSet(true);
    return this;
  }

  public void unsetRoomId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROOMID_ISSET_ID);
  }

  /** Returns true if field roomId is set (has been assigned a value) and false otherwise */
  public boolean isSetRoomId() {
    return EncodingUtils.testBit(__isset_bitfield, __ROOMID_ISSET_ID);
  }

  public void setRoomIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROOMID_ISSET_ID, value);
  }

  /**
   * 新郎角色id
   */
  public long getBridegroomId() {
    return this.bridegroomId;
  }

  /**
   * 新郎角色id
   */
  public WeddingRoomInfo setBridegroomId(long bridegroomId) {
    this.bridegroomId = bridegroomId;
    setBridegroomIdIsSet(true);
    return this;
  }

  public void unsetBridegroomId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BRIDEGROOMID_ISSET_ID);
  }

  /** Returns true if field bridegroomId is set (has been assigned a value) and false otherwise */
  public boolean isSetBridegroomId() {
    return EncodingUtils.testBit(__isset_bitfield, __BRIDEGROOMID_ISSET_ID);
  }

  public void setBridegroomIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BRIDEGROOMID_ISSET_ID, value);
  }

  /**
   * 新郎角色名
   */
  public String getBridegroomName() {
    return this.bridegroomName;
  }

  /**
   * 新郎角色名
   */
  public WeddingRoomInfo setBridegroomName(String bridegroomName) {
    this.bridegroomName = bridegroomName;
    return this;
  }

  public void unsetBridegroomName() {
    this.bridegroomName = null;
  }

  /** Returns true if field bridegroomName is set (has been assigned a value) and false otherwise */
  public boolean isSetBridegroomName() {
    return this.bridegroomName != null;
  }

  public void setBridegroomNameIsSet(boolean value) {
    if (!value) {
      this.bridegroomName = null;
    }
  }

  /**
   * 新郎名字时尚id
   */
  public int getBridegroomNameFashion() {
    return this.bridegroomNameFashion;
  }

  /**
   * 新郎名字时尚id
   */
  public WeddingRoomInfo setBridegroomNameFashion(int bridegroomNameFashion) {
    this.bridegroomNameFashion = bridegroomNameFashion;
    setBridegroomNameFashionIsSet(true);
    return this;
  }

  public void unsetBridegroomNameFashion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BRIDEGROOMNAMEFASHION_ISSET_ID);
  }

  /** Returns true if field bridegroomNameFashion is set (has been assigned a value) and false otherwise */
  public boolean isSetBridegroomNameFashion() {
    return EncodingUtils.testBit(__isset_bitfield, __BRIDEGROOMNAMEFASHION_ISSET_ID);
  }

  public void setBridegroomNameFashionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BRIDEGROOMNAMEFASHION_ISSET_ID, value);
  }

  /**
   * 新郎vip等级
   */
  public byte getBridegroomVipLvl() {
    return this.bridegroomVipLvl;
  }

  /**
   * 新郎vip等级
   */
  public WeddingRoomInfo setBridegroomVipLvl(byte bridegroomVipLvl) {
    this.bridegroomVipLvl = bridegroomVipLvl;
    setBridegroomVipLvlIsSet(true);
    return this;
  }

  public void unsetBridegroomVipLvl() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BRIDEGROOMVIPLVL_ISSET_ID);
  }

  /** Returns true if field bridegroomVipLvl is set (has been assigned a value) and false otherwise */
  public boolean isSetBridegroomVipLvl() {
    return EncodingUtils.testBit(__isset_bitfield, __BRIDEGROOMVIPLVL_ISSET_ID);
  }

  public void setBridegroomVipLvlIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BRIDEGROOMVIPLVL_ISSET_ID, value);
  }

  /**
   * 新人动作id
   */
  public int getCouplePosId() {
    return this.couplePosId;
  }

  /**
   * 新人动作id
   */
  public WeddingRoomInfo setCouplePosId(int couplePosId) {
    this.couplePosId = couplePosId;
    setCouplePosIdIsSet(true);
    return this;
  }

  public void unsetCouplePosId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUPLEPOSID_ISSET_ID);
  }

  /** Returns true if field couplePosId is set (has been assigned a value) and false otherwise */
  public boolean isSetCouplePosId() {
    return EncodingUtils.testBit(__isset_bitfield, __COUPLEPOSID_ISSET_ID);
  }

  public void setCouplePosIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUPLEPOSID_ISSET_ID, value);
  }

  /**
   * 新娘角色id
   */
  public long getBrideId() {
    return this.brideId;
  }

  /**
   * 新娘角色id
   */
  public WeddingRoomInfo setBrideId(long brideId) {
    this.brideId = brideId;
    setBrideIdIsSet(true);
    return this;
  }

  public void unsetBrideId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BRIDEID_ISSET_ID);
  }

  /** Returns true if field brideId is set (has been assigned a value) and false otherwise */
  public boolean isSetBrideId() {
    return EncodingUtils.testBit(__isset_bitfield, __BRIDEID_ISSET_ID);
  }

  public void setBrideIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BRIDEID_ISSET_ID, value);
  }

  /**
   * 新娘角色名
   */
  public String getBrideName() {
    return this.brideName;
  }

  /**
   * 新娘角色名
   */
  public WeddingRoomInfo setBrideName(String brideName) {
    this.brideName = brideName;
    return this;
  }

  public void unsetBrideName() {
    this.brideName = null;
  }

  /** Returns true if field brideName is set (has been assigned a value) and false otherwise */
  public boolean isSetBrideName() {
    return this.brideName != null;
  }

  public void setBrideNameIsSet(boolean value) {
    if (!value) {
      this.brideName = null;
    }
  }

  /**
   * 新娘名字时尚id
   */
  public int getBrideNameFashion() {
    return this.brideNameFashion;
  }

  /**
   * 新娘名字时尚id
   */
  public WeddingRoomInfo setBrideNameFashion(int brideNameFashion) {
    this.brideNameFashion = brideNameFashion;
    setBrideNameFashionIsSet(true);
    return this;
  }

  public void unsetBrideNameFashion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BRIDENAMEFASHION_ISSET_ID);
  }

  /** Returns true if field brideNameFashion is set (has been assigned a value) and false otherwise */
  public boolean isSetBrideNameFashion() {
    return EncodingUtils.testBit(__isset_bitfield, __BRIDENAMEFASHION_ISSET_ID);
  }

  public void setBrideNameFashionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BRIDENAMEFASHION_ISSET_ID, value);
  }

  /**
   * 新娘vip等级
   */
  public byte getBrideVipLvl() {
    return this.brideVipLvl;
  }

  /**
   * 新娘vip等级
   */
  public WeddingRoomInfo setBrideVipLvl(byte brideVipLvl) {
    this.brideVipLvl = brideVipLvl;
    setBrideVipLvlIsSet(true);
    return this;
  }

  public void unsetBrideVipLvl() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BRIDEVIPLVL_ISSET_ID);
  }

  /** Returns true if field brideVipLvl is set (has been assigned a value) and false otherwise */
  public boolean isSetBrideVipLvl() {
    return EncodingUtils.testBit(__isset_bitfield, __BRIDEVIPLVL_ISSET_ID);
  }

  public void setBrideVipLvlIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BRIDEVIPLVL_ISSET_ID, value);
  }

  /**
   * 房间名
   */
  public String getRoomName() {
    return this.roomName;
  }

  /**
   * 房间名
   */
  public WeddingRoomInfo setRoomName(String roomName) {
    this.roomName = roomName;
    return this;
  }

  public void unsetRoomName() {
    this.roomName = null;
  }

  /** Returns true if field roomName is set (has been assigned a value) and false otherwise */
  public boolean isSetRoomName() {
    return this.roomName != null;
  }

  public void setRoomNameIsSet(boolean value) {
    if (!value) {
      this.roomName = null;
    }
  }

  /**
   * 成员性别，按位表示位置和性别
   */
  public int getMemberSexInfo() {
    return this.memberSexInfo;
  }

  /**
   * 成员性别，按位表示位置和性别
   */
  public WeddingRoomInfo setMemberSexInfo(int memberSexInfo) {
    this.memberSexInfo = memberSexInfo;
    setMemberSexInfoIsSet(true);
    return this;
  }

  public void unsetMemberSexInfo() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMBERSEXINFO_ISSET_ID);
  }

  /** Returns true if field memberSexInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetMemberSexInfo() {
    return EncodingUtils.testBit(__isset_bitfield, __MEMBERSEXINFO_ISSET_ID);
  }

  public void setMemberSexInfoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMBERSEXINFO_ISSET_ID, value);
  }

  /**
   * 新郎标签id
   */
  public short getBridegroomTagId() {
    return this.bridegroomTagId;
  }

  /**
   * 新郎标签id
   */
  public WeddingRoomInfo setBridegroomTagId(short bridegroomTagId) {
    this.bridegroomTagId = bridegroomTagId;
    setBridegroomTagIdIsSet(true);
    return this;
  }

  public void unsetBridegroomTagId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BRIDEGROOMTAGID_ISSET_ID);
  }

  /** Returns true if field bridegroomTagId is set (has been assigned a value) and false otherwise */
  public boolean isSetBridegroomTagId() {
    return EncodingUtils.testBit(__isset_bitfield, __BRIDEGROOMTAGID_ISSET_ID);
  }

  public void setBridegroomTagIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BRIDEGROOMTAGID_ISSET_ID, value);
  }

  /**
   * 新娘标签id
   */
  public short getBrideTagId() {
    return this.brideTagId;
  }

  /**
   * 新娘标签id
   */
  public WeddingRoomInfo setBrideTagId(short brideTagId) {
    this.brideTagId = brideTagId;
    setBrideTagIdIsSet(true);
    return this;
  }

  public void unsetBrideTagId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BRIDETAGID_ISSET_ID);
  }

  /** Returns true if field brideTagId is set (has been assigned a value) and false otherwise */
  public boolean isSetBrideTagId() {
    return EncodingUtils.testBit(__isset_bitfield, __BRIDETAGID_ISSET_ID);
  }

  public void setBrideTagIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BRIDETAGID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ROOM_ID:
      if (value == null) {
        unsetRoomId();
      } else {
        setRoomId((Integer)value);
      }
      break;

    case BRIDEGROOM_ID:
      if (value == null) {
        unsetBridegroomId();
      } else {
        setBridegroomId((Long)value);
      }
      break;

    case BRIDEGROOM_NAME:
      if (value == null) {
        unsetBridegroomName();
      } else {
        setBridegroomName((String)value);
      }
      break;

    case BRIDEGROOM_NAME_FASHION:
      if (value == null) {
        unsetBridegroomNameFashion();
      } else {
        setBridegroomNameFashion((Integer)value);
      }
      break;

    case BRIDEGROOM_VIP_LVL:
      if (value == null) {
        unsetBridegroomVipLvl();
      } else {
        setBridegroomVipLvl((Byte)value);
      }
      break;

    case COUPLE_POS_ID:
      if (value == null) {
        unsetCouplePosId();
      } else {
        setCouplePosId((Integer)value);
      }
      break;

    case BRIDE_ID:
      if (value == null) {
        unsetBrideId();
      } else {
        setBrideId((Long)value);
      }
      break;

    case BRIDE_NAME:
      if (value == null) {
        unsetBrideName();
      } else {
        setBrideName((String)value);
      }
      break;

    case BRIDE_NAME_FASHION:
      if (value == null) {
        unsetBrideNameFashion();
      } else {
        setBrideNameFashion((Integer)value);
      }
      break;

    case BRIDE_VIP_LVL:
      if (value == null) {
        unsetBrideVipLvl();
      } else {
        setBrideVipLvl((Byte)value);
      }
      break;

    case ROOM_NAME:
      if (value == null) {
        unsetRoomName();
      } else {
        setRoomName((String)value);
      }
      break;

    case MEMBER_SEX_INFO:
      if (value == null) {
        unsetMemberSexInfo();
      } else {
        setMemberSexInfo((Integer)value);
      }
      break;

    case BRIDEGROOM_TAG_ID:
      if (value == null) {
        unsetBridegroomTagId();
      } else {
        setBridegroomTagId((Short)value);
      }
      break;

    case BRIDE_TAG_ID:
      if (value == null) {
        unsetBrideTagId();
      } else {
        setBrideTagId((Short)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ROOM_ID:
      return Integer.valueOf(getRoomId());

    case BRIDEGROOM_ID:
      return Long.valueOf(getBridegroomId());

    case BRIDEGROOM_NAME:
      return getBridegroomName();

    case BRIDEGROOM_NAME_FASHION:
      return Integer.valueOf(getBridegroomNameFashion());

    case BRIDEGROOM_VIP_LVL:
      return Byte.valueOf(getBridegroomVipLvl());

    case COUPLE_POS_ID:
      return Integer.valueOf(getCouplePosId());

    case BRIDE_ID:
      return Long.valueOf(getBrideId());

    case BRIDE_NAME:
      return getBrideName();

    case BRIDE_NAME_FASHION:
      return Integer.valueOf(getBrideNameFashion());

    case BRIDE_VIP_LVL:
      return Byte.valueOf(getBrideVipLvl());

    case ROOM_NAME:
      return getRoomName();

    case MEMBER_SEX_INFO:
      return Integer.valueOf(getMemberSexInfo());

    case BRIDEGROOM_TAG_ID:
      return Short.valueOf(getBridegroomTagId());

    case BRIDE_TAG_ID:
      return Short.valueOf(getBrideTagId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ROOM_ID:
      return isSetRoomId();
    case BRIDEGROOM_ID:
      return isSetBridegroomId();
    case BRIDEGROOM_NAME:
      return isSetBridegroomName();
    case BRIDEGROOM_NAME_FASHION:
      return isSetBridegroomNameFashion();
    case BRIDEGROOM_VIP_LVL:
      return isSetBridegroomVipLvl();
    case COUPLE_POS_ID:
      return isSetCouplePosId();
    case BRIDE_ID:
      return isSetBrideId();
    case BRIDE_NAME:
      return isSetBrideName();
    case BRIDE_NAME_FASHION:
      return isSetBrideNameFashion();
    case BRIDE_VIP_LVL:
      return isSetBrideVipLvl();
    case ROOM_NAME:
      return isSetRoomName();
    case MEMBER_SEX_INFO:
      return isSetMemberSexInfo();
    case BRIDEGROOM_TAG_ID:
      return isSetBridegroomTagId();
    case BRIDE_TAG_ID:
      return isSetBrideTagId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof WeddingRoomInfo)
      return this.equals((WeddingRoomInfo)that);
    return false;
  }

  public boolean equals(WeddingRoomInfo that) {
    if (that == null)
      return false;

    boolean this_present_roomId = true;
    boolean that_present_roomId = true;
    if (this_present_roomId || that_present_roomId) {
      if (!(this_present_roomId && that_present_roomId))
        return false;
      if (this.roomId != that.roomId)
        return false;
    }

    boolean this_present_bridegroomId = true;
    boolean that_present_bridegroomId = true;
    if (this_present_bridegroomId || that_present_bridegroomId) {
      if (!(this_present_bridegroomId && that_present_bridegroomId))
        return false;
      if (this.bridegroomId != that.bridegroomId)
        return false;
    }

    boolean this_present_bridegroomName = true && this.isSetBridegroomName();
    boolean that_present_bridegroomName = true && that.isSetBridegroomName();
    if (this_present_bridegroomName || that_present_bridegroomName) {
      if (!(this_present_bridegroomName && that_present_bridegroomName))
        return false;
      if (!this.bridegroomName.equals(that.bridegroomName))
        return false;
    }

    boolean this_present_bridegroomNameFashion = true;
    boolean that_present_bridegroomNameFashion = true;
    if (this_present_bridegroomNameFashion || that_present_bridegroomNameFashion) {
      if (!(this_present_bridegroomNameFashion && that_present_bridegroomNameFashion))
        return false;
      if (this.bridegroomNameFashion != that.bridegroomNameFashion)
        return false;
    }

    boolean this_present_bridegroomVipLvl = true;
    boolean that_present_bridegroomVipLvl = true;
    if (this_present_bridegroomVipLvl || that_present_bridegroomVipLvl) {
      if (!(this_present_bridegroomVipLvl && that_present_bridegroomVipLvl))
        return false;
      if (this.bridegroomVipLvl != that.bridegroomVipLvl)
        return false;
    }

    boolean this_present_couplePosId = true;
    boolean that_present_couplePosId = true;
    if (this_present_couplePosId || that_present_couplePosId) {
      if (!(this_present_couplePosId && that_present_couplePosId))
        return false;
      if (this.couplePosId != that.couplePosId)
        return false;
    }

    boolean this_present_brideId = true;
    boolean that_present_brideId = true;
    if (this_present_brideId || that_present_brideId) {
      if (!(this_present_brideId && that_present_brideId))
        return false;
      if (this.brideId != that.brideId)
        return false;
    }

    boolean this_present_brideName = true && this.isSetBrideName();
    boolean that_present_brideName = true && that.isSetBrideName();
    if (this_present_brideName || that_present_brideName) {
      if (!(this_present_brideName && that_present_brideName))
        return false;
      if (!this.brideName.equals(that.brideName))
        return false;
    }

    boolean this_present_brideNameFashion = true;
    boolean that_present_brideNameFashion = true;
    if (this_present_brideNameFashion || that_present_brideNameFashion) {
      if (!(this_present_brideNameFashion && that_present_brideNameFashion))
        return false;
      if (this.brideNameFashion != that.brideNameFashion)
        return false;
    }

    boolean this_present_brideVipLvl = true;
    boolean that_present_brideVipLvl = true;
    if (this_present_brideVipLvl || that_present_brideVipLvl) {
      if (!(this_present_brideVipLvl && that_present_brideVipLvl))
        return false;
      if (this.brideVipLvl != that.brideVipLvl)
        return false;
    }

    boolean this_present_roomName = true && this.isSetRoomName();
    boolean that_present_roomName = true && that.isSetRoomName();
    if (this_present_roomName || that_present_roomName) {
      if (!(this_present_roomName && that_present_roomName))
        return false;
      if (!this.roomName.equals(that.roomName))
        return false;
    }

    boolean this_present_memberSexInfo = true;
    boolean that_present_memberSexInfo = true;
    if (this_present_memberSexInfo || that_present_memberSexInfo) {
      if (!(this_present_memberSexInfo && that_present_memberSexInfo))
        return false;
      if (this.memberSexInfo != that.memberSexInfo)
        return false;
    }

    boolean this_present_bridegroomTagId = true;
    boolean that_present_bridegroomTagId = true;
    if (this_present_bridegroomTagId || that_present_bridegroomTagId) {
      if (!(this_present_bridegroomTagId && that_present_bridegroomTagId))
        return false;
      if (this.bridegroomTagId != that.bridegroomTagId)
        return false;
    }

    boolean this_present_brideTagId = true;
    boolean that_present_brideTagId = true;
    if (this_present_brideTagId || that_present_brideTagId) {
      if (!(this_present_brideTagId && that_present_brideTagId))
        return false;
      if (this.brideTagId != that.brideTagId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(WeddingRoomInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    WeddingRoomInfo typedOther = (WeddingRoomInfo)other;

    lastComparison = Boolean.valueOf(isSetRoomId()).compareTo(typedOther.isSetRoomId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoomId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roomId, typedOther.roomId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBridegroomId()).compareTo(typedOther.isSetBridegroomId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBridegroomId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bridegroomId, typedOther.bridegroomId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBridegroomName()).compareTo(typedOther.isSetBridegroomName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBridegroomName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bridegroomName, typedOther.bridegroomName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBridegroomNameFashion()).compareTo(typedOther.isSetBridegroomNameFashion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBridegroomNameFashion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bridegroomNameFashion, typedOther.bridegroomNameFashion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBridegroomVipLvl()).compareTo(typedOther.isSetBridegroomVipLvl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBridegroomVipLvl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bridegroomVipLvl, typedOther.bridegroomVipLvl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCouplePosId()).compareTo(typedOther.isSetCouplePosId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCouplePosId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.couplePosId, typedOther.couplePosId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrideId()).compareTo(typedOther.isSetBrideId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrideId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brideId, typedOther.brideId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrideName()).compareTo(typedOther.isSetBrideName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrideName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brideName, typedOther.brideName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrideNameFashion()).compareTo(typedOther.isSetBrideNameFashion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrideNameFashion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brideNameFashion, typedOther.brideNameFashion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrideVipLvl()).compareTo(typedOther.isSetBrideVipLvl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrideVipLvl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brideVipLvl, typedOther.brideVipLvl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRoomName()).compareTo(typedOther.isSetRoomName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoomName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roomName, typedOther.roomName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemberSexInfo()).compareTo(typedOther.isSetMemberSexInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemberSexInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberSexInfo, typedOther.memberSexInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBridegroomTagId()).compareTo(typedOther.isSetBridegroomTagId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBridegroomTagId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bridegroomTagId, typedOther.bridegroomTagId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrideTagId()).compareTo(typedOther.isSetBrideTagId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrideTagId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brideTagId, typedOther.brideTagId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("WeddingRoomInfo(");
    boolean first = true;

    sb.append("roomId:");
    sb.append(this.roomId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bridegroomId:");
    sb.append(this.bridegroomId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bridegroomName:");
    if (this.bridegroomName == null) {
      sb.append("null");
    } else {
      sb.append(this.bridegroomName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bridegroomNameFashion:");
    sb.append(this.bridegroomNameFashion);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bridegroomVipLvl:");
    sb.append(this.bridegroomVipLvl);
    first = false;
    if (!first) sb.append(", ");
    sb.append("couplePosId:");
    sb.append(this.couplePosId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("brideId:");
    sb.append(this.brideId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("brideName:");
    if (this.brideName == null) {
      sb.append("null");
    } else {
      sb.append(this.brideName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("brideNameFashion:");
    sb.append(this.brideNameFashion);
    first = false;
    if (!first) sb.append(", ");
    sb.append("brideVipLvl:");
    sb.append(this.brideVipLvl);
    first = false;
    if (!first) sb.append(", ");
    sb.append("roomName:");
    if (this.roomName == null) {
      sb.append("null");
    } else {
      sb.append(this.roomName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("memberSexInfo:");
    sb.append(this.memberSexInfo);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bridegroomTagId:");
    sb.append(this.bridegroomTagId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("brideTagId:");
    sb.append(this.brideTagId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WeddingRoomInfoStandardSchemeFactory implements SchemeFactory {
    public WeddingRoomInfoStandardScheme getScheme() {
      return new WeddingRoomInfoStandardScheme();
    }
  }

  private static class WeddingRoomInfoStandardScheme extends StandardScheme<WeddingRoomInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, WeddingRoomInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ROOM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.roomId = iprot.readI32();
              struct.setRoomIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BRIDEGROOM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.bridegroomId = iprot.readI64();
              struct.setBridegroomIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BRIDEGROOM_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bridegroomName = iprot.readString();
              struct.setBridegroomNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BRIDEGROOM_NAME_FASHION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bridegroomNameFashion = iprot.readI32();
              struct.setBridegroomNameFashionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BRIDEGROOM_VIP_LVL
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.bridegroomVipLvl = iprot.readByte();
              struct.setBridegroomVipLvlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COUPLE_POS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.couplePosId = iprot.readI32();
              struct.setCouplePosIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BRIDE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.brideId = iprot.readI64();
              struct.setBrideIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BRIDE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brideName = iprot.readString();
              struct.setBrideNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // BRIDE_NAME_FASHION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.brideNameFashion = iprot.readI32();
              struct.setBrideNameFashionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // BRIDE_VIP_LVL
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.brideVipLvl = iprot.readByte();
              struct.setBrideVipLvlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ROOM_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.roomName = iprot.readString();
              struct.setRoomNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // MEMBER_SEX_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.memberSexInfo = iprot.readI32();
              struct.setMemberSexInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // BRIDEGROOM_TAG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.bridegroomTagId = iprot.readI16();
              struct.setBridegroomTagIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // BRIDE_TAG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.brideTagId = iprot.readI16();
              struct.setBrideTagIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, WeddingRoomInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ROOM_ID_FIELD_DESC);
      oprot.writeI32(struct.roomId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BRIDEGROOM_ID_FIELD_DESC);
      oprot.writeI64(struct.bridegroomId);
      oprot.writeFieldEnd();
      if (struct.bridegroomName != null) {
        oprot.writeFieldBegin(BRIDEGROOM_NAME_FIELD_DESC);
        oprot.writeString(struct.bridegroomName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BRIDEGROOM_NAME_FASHION_FIELD_DESC);
      oprot.writeI32(struct.bridegroomNameFashion);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BRIDEGROOM_VIP_LVL_FIELD_DESC);
      oprot.writeByte(struct.bridegroomVipLvl);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COUPLE_POS_ID_FIELD_DESC);
      oprot.writeI32(struct.couplePosId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BRIDE_ID_FIELD_DESC);
      oprot.writeI64(struct.brideId);
      oprot.writeFieldEnd();
      if (struct.brideName != null) {
        oprot.writeFieldBegin(BRIDE_NAME_FIELD_DESC);
        oprot.writeString(struct.brideName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BRIDE_NAME_FASHION_FIELD_DESC);
      oprot.writeI32(struct.brideNameFashion);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BRIDE_VIP_LVL_FIELD_DESC);
      oprot.writeByte(struct.brideVipLvl);
      oprot.writeFieldEnd();
      if (struct.roomName != null) {
        oprot.writeFieldBegin(ROOM_NAME_FIELD_DESC);
        oprot.writeString(struct.roomName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MEMBER_SEX_INFO_FIELD_DESC);
      oprot.writeI32(struct.memberSexInfo);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BRIDEGROOM_TAG_ID_FIELD_DESC);
      oprot.writeI16(struct.bridegroomTagId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BRIDE_TAG_ID_FIELD_DESC);
      oprot.writeI16(struct.brideTagId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WeddingRoomInfoTupleSchemeFactory implements SchemeFactory {
    public WeddingRoomInfoTupleScheme getScheme() {
      return new WeddingRoomInfoTupleScheme();
    }
  }

  private static class WeddingRoomInfoTupleScheme extends TupleScheme<WeddingRoomInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, WeddingRoomInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRoomId()) {
        optionals.set(0);
      }
      if (struct.isSetBridegroomId()) {
        optionals.set(1);
      }
      if (struct.isSetBridegroomName()) {
        optionals.set(2);
      }
      if (struct.isSetBridegroomNameFashion()) {
        optionals.set(3);
      }
      if (struct.isSetBridegroomVipLvl()) {
        optionals.set(4);
      }
      if (struct.isSetCouplePosId()) {
        optionals.set(5);
      }
      if (struct.isSetBrideId()) {
        optionals.set(6);
      }
      if (struct.isSetBrideName()) {
        optionals.set(7);
      }
      if (struct.isSetBrideNameFashion()) {
        optionals.set(8);
      }
      if (struct.isSetBrideVipLvl()) {
        optionals.set(9);
      }
      if (struct.isSetRoomName()) {
        optionals.set(10);
      }
      if (struct.isSetMemberSexInfo()) {
        optionals.set(11);
      }
      if (struct.isSetBridegroomTagId()) {
        optionals.set(12);
      }
      if (struct.isSetBrideTagId()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetRoomId()) {
        oprot.writeI32(struct.roomId);
      }
      if (struct.isSetBridegroomId()) {
        oprot.writeI64(struct.bridegroomId);
      }
      if (struct.isSetBridegroomName()) {
        oprot.writeString(struct.bridegroomName);
      }
      if (struct.isSetBridegroomNameFashion()) {
        oprot.writeI32(struct.bridegroomNameFashion);
      }
      if (struct.isSetBridegroomVipLvl()) {
        oprot.writeByte(struct.bridegroomVipLvl);
      }
      if (struct.isSetCouplePosId()) {
        oprot.writeI32(struct.couplePosId);
      }
      if (struct.isSetBrideId()) {
        oprot.writeI64(struct.brideId);
      }
      if (struct.isSetBrideName()) {
        oprot.writeString(struct.brideName);
      }
      if (struct.isSetBrideNameFashion()) {
        oprot.writeI32(struct.brideNameFashion);
      }
      if (struct.isSetBrideVipLvl()) {
        oprot.writeByte(struct.brideVipLvl);
      }
      if (struct.isSetRoomName()) {
        oprot.writeString(struct.roomName);
      }
      if (struct.isSetMemberSexInfo()) {
        oprot.writeI32(struct.memberSexInfo);
      }
      if (struct.isSetBridegroomTagId()) {
        oprot.writeI16(struct.bridegroomTagId);
      }
      if (struct.isSetBrideTagId()) {
        oprot.writeI16(struct.brideTagId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, WeddingRoomInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.roomId = iprot.readI32();
        struct.setRoomIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.bridegroomId = iprot.readI64();
        struct.setBridegroomIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.bridegroomName = iprot.readString();
        struct.setBridegroomNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.bridegroomNameFashion = iprot.readI32();
        struct.setBridegroomNameFashionIsSet(true);
      }
      if (incoming.get(4)) {
        struct.bridegroomVipLvl = iprot.readByte();
        struct.setBridegroomVipLvlIsSet(true);
      }
      if (incoming.get(5)) {
        struct.couplePosId = iprot.readI32();
        struct.setCouplePosIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.brideId = iprot.readI64();
        struct.setBrideIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.brideName = iprot.readString();
        struct.setBrideNameIsSet(true);
      }
      if (incoming.get(8)) {
        struct.brideNameFashion = iprot.readI32();
        struct.setBrideNameFashionIsSet(true);
      }
      if (incoming.get(9)) {
        struct.brideVipLvl = iprot.readByte();
        struct.setBrideVipLvlIsSet(true);
      }
      if (incoming.get(10)) {
        struct.roomName = iprot.readString();
        struct.setRoomNameIsSet(true);
      }
      if (incoming.get(11)) {
        struct.memberSexInfo = iprot.readI32();
        struct.setMemberSexInfoIsSet(true);
      }
      if (incoming.get(12)) {
        struct.bridegroomTagId = iprot.readI16();
        struct.setBridegroomTagIdIsSet(true);
      }
      if (incoming.get(13)) {
        struct.brideTagId = iprot.readI16();
        struct.setBrideTagIdIsSet(true);
      }
    }
  }

}

