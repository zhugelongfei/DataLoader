/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 网易登录参数
 */
public class ChannelNeteaseLoginParam implements org.apache.thrift.TBase<ChannelNeteaseLoginParam, ChannelNeteaseLoginParam._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ChannelNeteaseLoginParam");

  private static final org.apache.thrift.protocol.TField SDK_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("sdkUId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField GAME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("gameId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField APP_CHANNEL_FIELD_DESC = new org.apache.thrift.protocol.TField("appChannel", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CHANNEL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("channelName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PLATFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("platform", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField UDID_FIELD_DESC = new org.apache.thrift.protocol.TField("udid", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField SDK_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("sdkVersion", org.apache.thrift.protocol.TType.STRING, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ChannelNeteaseLoginParamStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ChannelNeteaseLoginParamTupleSchemeFactory());
  }

  /**
   * sdk返回的用户id，可能为整型和字符串
   */
  public String sdkUId; // required
  /**
   * 渠道分配的游戏id
   */
  public String gameId; // required
  /**
   * 发行(分发）渠道
   */
  public String appChannel; // required
  /**
   * 渠道名
   */
  public String channelName; // required
  /**
   * 平台名
   */
  public String platform; // required
  /**
   * 玩家登录的移动设备号，通过UniSDK提供的接口获取
   */
  public String udid; // required
  /**
   * 玩家登录的手机硬件id，通过UniSDK提供的接口获取
   */
  public String deviceId; // required
  public String sessionId; // required
  /**
   * sdk的版本
   */
  public String sdkVersion; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * sdk返回的用户id，可能为整型和字符串
     */
    SDK_UID((short)1, "sdkUId"),
    /**
     * 渠道分配的游戏id
     */
    GAME_ID((short)2, "gameId"),
    /**
     * 发行(分发）渠道
     */
    APP_CHANNEL((short)3, "appChannel"),
    /**
     * 渠道名
     */
    CHANNEL_NAME((short)4, "channelName"),
    /**
     * 平台名
     */
    PLATFORM((short)5, "platform"),
    /**
     * 玩家登录的移动设备号，通过UniSDK提供的接口获取
     */
    UDID((short)6, "udid"),
    /**
     * 玩家登录的手机硬件id，通过UniSDK提供的接口获取
     */
    DEVICE_ID((short)7, "deviceId"),
    SESSION_ID((short)8, "sessionId"),
    /**
     * sdk的版本
     */
    SDK_VERSION((short)9, "sdkVersion");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SDK_UID
          return SDK_UID;
        case 2: // GAME_ID
          return GAME_ID;
        case 3: // APP_CHANNEL
          return APP_CHANNEL;
        case 4: // CHANNEL_NAME
          return CHANNEL_NAME;
        case 5: // PLATFORM
          return PLATFORM;
        case 6: // UDID
          return UDID;
        case 7: // DEVICE_ID
          return DEVICE_ID;
        case 8: // SESSION_ID
          return SESSION_ID;
        case 9: // SDK_VERSION
          return SDK_VERSION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SDK_UID, new org.apache.thrift.meta_data.FieldMetaData("sdkUId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GAME_ID, new org.apache.thrift.meta_data.FieldMetaData("gameId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APP_CHANNEL, new org.apache.thrift.meta_data.FieldMetaData("appChannel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHANNEL_NAME, new org.apache.thrift.meta_data.FieldMetaData("channelName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLATFORM, new org.apache.thrift.meta_data.FieldMetaData("platform", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UDID, new org.apache.thrift.meta_data.FieldMetaData("udid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SDK_VERSION, new org.apache.thrift.meta_data.FieldMetaData("sdkVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ChannelNeteaseLoginParam.class, metaDataMap);
  }

  public ChannelNeteaseLoginParam() {
  }

  public ChannelNeteaseLoginParam(
    String sdkUId,
    String gameId,
    String appChannel,
    String channelName,
    String platform,
    String udid,
    String deviceId,
    String sessionId,
    String sdkVersion)
  {
    this();
    this.sdkUId = sdkUId;
    this.gameId = gameId;
    this.appChannel = appChannel;
    this.channelName = channelName;
    this.platform = platform;
    this.udid = udid;
    this.deviceId = deviceId;
    this.sessionId = sessionId;
    this.sdkVersion = sdkVersion;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ChannelNeteaseLoginParam(ChannelNeteaseLoginParam other) {
    if (other.isSetSdkUId()) {
      this.sdkUId = other.sdkUId;
    }
    if (other.isSetGameId()) {
      this.gameId = other.gameId;
    }
    if (other.isSetAppChannel()) {
      this.appChannel = other.appChannel;
    }
    if (other.isSetChannelName()) {
      this.channelName = other.channelName;
    }
    if (other.isSetPlatform()) {
      this.platform = other.platform;
    }
    if (other.isSetUdid()) {
      this.udid = other.udid;
    }
    if (other.isSetDeviceId()) {
      this.deviceId = other.deviceId;
    }
    if (other.isSetSessionId()) {
      this.sessionId = other.sessionId;
    }
    if (other.isSetSdkVersion()) {
      this.sdkVersion = other.sdkVersion;
    }
  }

  public ChannelNeteaseLoginParam deepCopy() {
    return new ChannelNeteaseLoginParam(this);
  }

  @Override
  public void clear() {
    this.sdkUId = null;
    this.gameId = null;
    this.appChannel = null;
    this.channelName = null;
    this.platform = null;
    this.udid = null;
    this.deviceId = null;
    this.sessionId = null;
    this.sdkVersion = null;
  }

  /**
   * sdk返回的用户id，可能为整型和字符串
   */
  public String getSdkUId() {
    return this.sdkUId;
  }

  /**
   * sdk返回的用户id，可能为整型和字符串
   */
  public ChannelNeteaseLoginParam setSdkUId(String sdkUId) {
    this.sdkUId = sdkUId;
    return this;
  }

  public void unsetSdkUId() {
    this.sdkUId = null;
  }

  /** Returns true if field sdkUId is set (has been assigned a value) and false otherwise */
  public boolean isSetSdkUId() {
    return this.sdkUId != null;
  }

  public void setSdkUIdIsSet(boolean value) {
    if (!value) {
      this.sdkUId = null;
    }
  }

  /**
   * 渠道分配的游戏id
   */
  public String getGameId() {
    return this.gameId;
  }

  /**
   * 渠道分配的游戏id
   */
  public ChannelNeteaseLoginParam setGameId(String gameId) {
    this.gameId = gameId;
    return this;
  }

  public void unsetGameId() {
    this.gameId = null;
  }

  /** Returns true if field gameId is set (has been assigned a value) and false otherwise */
  public boolean isSetGameId() {
    return this.gameId != null;
  }

  public void setGameIdIsSet(boolean value) {
    if (!value) {
      this.gameId = null;
    }
  }

  /**
   * 发行(分发）渠道
   */
  public String getAppChannel() {
    return this.appChannel;
  }

  /**
   * 发行(分发）渠道
   */
  public ChannelNeteaseLoginParam setAppChannel(String appChannel) {
    this.appChannel = appChannel;
    return this;
  }

  public void unsetAppChannel() {
    this.appChannel = null;
  }

  /** Returns true if field appChannel is set (has been assigned a value) and false otherwise */
  public boolean isSetAppChannel() {
    return this.appChannel != null;
  }

  public void setAppChannelIsSet(boolean value) {
    if (!value) {
      this.appChannel = null;
    }
  }

  /**
   * 渠道名
   */
  public String getChannelName() {
    return this.channelName;
  }

  /**
   * 渠道名
   */
  public ChannelNeteaseLoginParam setChannelName(String channelName) {
    this.channelName = channelName;
    return this;
  }

  public void unsetChannelName() {
    this.channelName = null;
  }

  /** Returns true if field channelName is set (has been assigned a value) and false otherwise */
  public boolean isSetChannelName() {
    return this.channelName != null;
  }

  public void setChannelNameIsSet(boolean value) {
    if (!value) {
      this.channelName = null;
    }
  }

  /**
   * 平台名
   */
  public String getPlatform() {
    return this.platform;
  }

  /**
   * 平台名
   */
  public ChannelNeteaseLoginParam setPlatform(String platform) {
    this.platform = platform;
    return this;
  }

  public void unsetPlatform() {
    this.platform = null;
  }

  /** Returns true if field platform is set (has been assigned a value) and false otherwise */
  public boolean isSetPlatform() {
    return this.platform != null;
  }

  public void setPlatformIsSet(boolean value) {
    if (!value) {
      this.platform = null;
    }
  }

  /**
   * 玩家登录的移动设备号，通过UniSDK提供的接口获取
   */
  public String getUdid() {
    return this.udid;
  }

  /**
   * 玩家登录的移动设备号，通过UniSDK提供的接口获取
   */
  public ChannelNeteaseLoginParam setUdid(String udid) {
    this.udid = udid;
    return this;
  }

  public void unsetUdid() {
    this.udid = null;
  }

  /** Returns true if field udid is set (has been assigned a value) and false otherwise */
  public boolean isSetUdid() {
    return this.udid != null;
  }

  public void setUdidIsSet(boolean value) {
    if (!value) {
      this.udid = null;
    }
  }

  /**
   * 玩家登录的手机硬件id，通过UniSDK提供的接口获取
   */
  public String getDeviceId() {
    return this.deviceId;
  }

  /**
   * 玩家登录的手机硬件id，通过UniSDK提供的接口获取
   */
  public ChannelNeteaseLoginParam setDeviceId(String deviceId) {
    this.deviceId = deviceId;
    return this;
  }

  public void unsetDeviceId() {
    this.deviceId = null;
  }

  /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceId() {
    return this.deviceId != null;
  }

  public void setDeviceIdIsSet(boolean value) {
    if (!value) {
      this.deviceId = null;
    }
  }

  public String getSessionId() {
    return this.sessionId;
  }

  public ChannelNeteaseLoginParam setSessionId(String sessionId) {
    this.sessionId = sessionId;
    return this;
  }

  public void unsetSessionId() {
    this.sessionId = null;
  }

  /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
  public boolean isSetSessionId() {
    return this.sessionId != null;
  }

  public void setSessionIdIsSet(boolean value) {
    if (!value) {
      this.sessionId = null;
    }
  }

  /**
   * sdk的版本
   */
  public String getSdkVersion() {
    return this.sdkVersion;
  }

  /**
   * sdk的版本
   */
  public ChannelNeteaseLoginParam setSdkVersion(String sdkVersion) {
    this.sdkVersion = sdkVersion;
    return this;
  }

  public void unsetSdkVersion() {
    this.sdkVersion = null;
  }

  /** Returns true if field sdkVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetSdkVersion() {
    return this.sdkVersion != null;
  }

  public void setSdkVersionIsSet(boolean value) {
    if (!value) {
      this.sdkVersion = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SDK_UID:
      if (value == null) {
        unsetSdkUId();
      } else {
        setSdkUId((String)value);
      }
      break;

    case GAME_ID:
      if (value == null) {
        unsetGameId();
      } else {
        setGameId((String)value);
      }
      break;

    case APP_CHANNEL:
      if (value == null) {
        unsetAppChannel();
      } else {
        setAppChannel((String)value);
      }
      break;

    case CHANNEL_NAME:
      if (value == null) {
        unsetChannelName();
      } else {
        setChannelName((String)value);
      }
      break;

    case PLATFORM:
      if (value == null) {
        unsetPlatform();
      } else {
        setPlatform((String)value);
      }
      break;

    case UDID:
      if (value == null) {
        unsetUdid();
      } else {
        setUdid((String)value);
      }
      break;

    case DEVICE_ID:
      if (value == null) {
        unsetDeviceId();
      } else {
        setDeviceId((String)value);
      }
      break;

    case SESSION_ID:
      if (value == null) {
        unsetSessionId();
      } else {
        setSessionId((String)value);
      }
      break;

    case SDK_VERSION:
      if (value == null) {
        unsetSdkVersion();
      } else {
        setSdkVersion((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SDK_UID:
      return getSdkUId();

    case GAME_ID:
      return getGameId();

    case APP_CHANNEL:
      return getAppChannel();

    case CHANNEL_NAME:
      return getChannelName();

    case PLATFORM:
      return getPlatform();

    case UDID:
      return getUdid();

    case DEVICE_ID:
      return getDeviceId();

    case SESSION_ID:
      return getSessionId();

    case SDK_VERSION:
      return getSdkVersion();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SDK_UID:
      return isSetSdkUId();
    case GAME_ID:
      return isSetGameId();
    case APP_CHANNEL:
      return isSetAppChannel();
    case CHANNEL_NAME:
      return isSetChannelName();
    case PLATFORM:
      return isSetPlatform();
    case UDID:
      return isSetUdid();
    case DEVICE_ID:
      return isSetDeviceId();
    case SESSION_ID:
      return isSetSessionId();
    case SDK_VERSION:
      return isSetSdkVersion();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ChannelNeteaseLoginParam)
      return this.equals((ChannelNeteaseLoginParam)that);
    return false;
  }

  public boolean equals(ChannelNeteaseLoginParam that) {
    if (that == null)
      return false;

    boolean this_present_sdkUId = true && this.isSetSdkUId();
    boolean that_present_sdkUId = true && that.isSetSdkUId();
    if (this_present_sdkUId || that_present_sdkUId) {
      if (!(this_present_sdkUId && that_present_sdkUId))
        return false;
      if (!this.sdkUId.equals(that.sdkUId))
        return false;
    }

    boolean this_present_gameId = true && this.isSetGameId();
    boolean that_present_gameId = true && that.isSetGameId();
    if (this_present_gameId || that_present_gameId) {
      if (!(this_present_gameId && that_present_gameId))
        return false;
      if (!this.gameId.equals(that.gameId))
        return false;
    }

    boolean this_present_appChannel = true && this.isSetAppChannel();
    boolean that_present_appChannel = true && that.isSetAppChannel();
    if (this_present_appChannel || that_present_appChannel) {
      if (!(this_present_appChannel && that_present_appChannel))
        return false;
      if (!this.appChannel.equals(that.appChannel))
        return false;
    }

    boolean this_present_channelName = true && this.isSetChannelName();
    boolean that_present_channelName = true && that.isSetChannelName();
    if (this_present_channelName || that_present_channelName) {
      if (!(this_present_channelName && that_present_channelName))
        return false;
      if (!this.channelName.equals(that.channelName))
        return false;
    }

    boolean this_present_platform = true && this.isSetPlatform();
    boolean that_present_platform = true && that.isSetPlatform();
    if (this_present_platform || that_present_platform) {
      if (!(this_present_platform && that_present_platform))
        return false;
      if (!this.platform.equals(that.platform))
        return false;
    }

    boolean this_present_udid = true && this.isSetUdid();
    boolean that_present_udid = true && that.isSetUdid();
    if (this_present_udid || that_present_udid) {
      if (!(this_present_udid && that_present_udid))
        return false;
      if (!this.udid.equals(that.udid))
        return false;
    }

    boolean this_present_deviceId = true && this.isSetDeviceId();
    boolean that_present_deviceId = true && that.isSetDeviceId();
    if (this_present_deviceId || that_present_deviceId) {
      if (!(this_present_deviceId && that_present_deviceId))
        return false;
      if (!this.deviceId.equals(that.deviceId))
        return false;
    }

    boolean this_present_sessionId = true && this.isSetSessionId();
    boolean that_present_sessionId = true && that.isSetSessionId();
    if (this_present_sessionId || that_present_sessionId) {
      if (!(this_present_sessionId && that_present_sessionId))
        return false;
      if (!this.sessionId.equals(that.sessionId))
        return false;
    }

    boolean this_present_sdkVersion = true && this.isSetSdkVersion();
    boolean that_present_sdkVersion = true && that.isSetSdkVersion();
    if (this_present_sdkVersion || that_present_sdkVersion) {
      if (!(this_present_sdkVersion && that_present_sdkVersion))
        return false;
      if (!this.sdkVersion.equals(that.sdkVersion))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ChannelNeteaseLoginParam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ChannelNeteaseLoginParam typedOther = (ChannelNeteaseLoginParam)other;

    lastComparison = Boolean.valueOf(isSetSdkUId()).compareTo(typedOther.isSetSdkUId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSdkUId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sdkUId, typedOther.sdkUId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGameId()).compareTo(typedOther.isSetGameId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGameId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameId, typedOther.gameId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppChannel()).compareTo(typedOther.isSetAppChannel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppChannel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appChannel, typedOther.appChannel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChannelName()).compareTo(typedOther.isSetChannelName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannelName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelName, typedOther.channelName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlatform()).compareTo(typedOther.isSetPlatform());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlatform()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platform, typedOther.platform);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUdid()).compareTo(typedOther.isSetUdid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUdid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.udid, typedOther.udid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeviceId()).compareTo(typedOther.isSetDeviceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, typedOther.deviceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSessionId()).compareTo(typedOther.isSetSessionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, typedOther.sessionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSdkVersion()).compareTo(typedOther.isSetSdkVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSdkVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sdkVersion, typedOther.sdkVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ChannelNeteaseLoginParam(");
    boolean first = true;

    sb.append("sdkUId:");
    if (this.sdkUId == null) {
      sb.append("null");
    } else {
      sb.append(this.sdkUId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("gameId:");
    if (this.gameId == null) {
      sb.append("null");
    } else {
      sb.append(this.gameId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("appChannel:");
    if (this.appChannel == null) {
      sb.append("null");
    } else {
      sb.append(this.appChannel);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("channelName:");
    if (this.channelName == null) {
      sb.append("null");
    } else {
      sb.append(this.channelName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("platform:");
    if (this.platform == null) {
      sb.append("null");
    } else {
      sb.append(this.platform);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("udid:");
    if (this.udid == null) {
      sb.append("null");
    } else {
      sb.append(this.udid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deviceId:");
    if (this.deviceId == null) {
      sb.append("null");
    } else {
      sb.append(this.deviceId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sessionId:");
    if (this.sessionId == null) {
      sb.append("null");
    } else {
      sb.append(this.sessionId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sdkVersion:");
    if (this.sdkVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.sdkVersion);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ChannelNeteaseLoginParamStandardSchemeFactory implements SchemeFactory {
    public ChannelNeteaseLoginParamStandardScheme getScheme() {
      return new ChannelNeteaseLoginParamStandardScheme();
    }
  }

  private static class ChannelNeteaseLoginParamStandardScheme extends StandardScheme<ChannelNeteaseLoginParam> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ChannelNeteaseLoginParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SDK_UID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sdkUId = iprot.readString();
              struct.setSdkUIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GAME_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.gameId = iprot.readString();
              struct.setGameIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // APP_CHANNEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appChannel = iprot.readString();
              struct.setAppChannelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CHANNEL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.channelName = iprot.readString();
              struct.setChannelNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PLATFORM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.platform = iprot.readString();
              struct.setPlatformIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // UDID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.udid = iprot.readString();
              struct.setUdidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DEVICE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deviceId = iprot.readString();
              struct.setDeviceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SESSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sessionId = iprot.readString();
              struct.setSessionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SDK_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sdkVersion = iprot.readString();
              struct.setSdkVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ChannelNeteaseLoginParam struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.sdkUId != null) {
        oprot.writeFieldBegin(SDK_UID_FIELD_DESC);
        oprot.writeString(struct.sdkUId);
        oprot.writeFieldEnd();
      }
      if (struct.gameId != null) {
        oprot.writeFieldBegin(GAME_ID_FIELD_DESC);
        oprot.writeString(struct.gameId);
        oprot.writeFieldEnd();
      }
      if (struct.appChannel != null) {
        oprot.writeFieldBegin(APP_CHANNEL_FIELD_DESC);
        oprot.writeString(struct.appChannel);
        oprot.writeFieldEnd();
      }
      if (struct.channelName != null) {
        oprot.writeFieldBegin(CHANNEL_NAME_FIELD_DESC);
        oprot.writeString(struct.channelName);
        oprot.writeFieldEnd();
      }
      if (struct.platform != null) {
        oprot.writeFieldBegin(PLATFORM_FIELD_DESC);
        oprot.writeString(struct.platform);
        oprot.writeFieldEnd();
      }
      if (struct.udid != null) {
        oprot.writeFieldBegin(UDID_FIELD_DESC);
        oprot.writeString(struct.udid);
        oprot.writeFieldEnd();
      }
      if (struct.deviceId != null) {
        oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
        oprot.writeString(struct.deviceId);
        oprot.writeFieldEnd();
      }
      if (struct.sessionId != null) {
        oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
        oprot.writeString(struct.sessionId);
        oprot.writeFieldEnd();
      }
      if (struct.sdkVersion != null) {
        oprot.writeFieldBegin(SDK_VERSION_FIELD_DESC);
        oprot.writeString(struct.sdkVersion);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ChannelNeteaseLoginParamTupleSchemeFactory implements SchemeFactory {
    public ChannelNeteaseLoginParamTupleScheme getScheme() {
      return new ChannelNeteaseLoginParamTupleScheme();
    }
  }

  private static class ChannelNeteaseLoginParamTupleScheme extends TupleScheme<ChannelNeteaseLoginParam> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ChannelNeteaseLoginParam struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSdkUId()) {
        optionals.set(0);
      }
      if (struct.isSetGameId()) {
        optionals.set(1);
      }
      if (struct.isSetAppChannel()) {
        optionals.set(2);
      }
      if (struct.isSetChannelName()) {
        optionals.set(3);
      }
      if (struct.isSetPlatform()) {
        optionals.set(4);
      }
      if (struct.isSetUdid()) {
        optionals.set(5);
      }
      if (struct.isSetDeviceId()) {
        optionals.set(6);
      }
      if (struct.isSetSessionId()) {
        optionals.set(7);
      }
      if (struct.isSetSdkVersion()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetSdkUId()) {
        oprot.writeString(struct.sdkUId);
      }
      if (struct.isSetGameId()) {
        oprot.writeString(struct.gameId);
      }
      if (struct.isSetAppChannel()) {
        oprot.writeString(struct.appChannel);
      }
      if (struct.isSetChannelName()) {
        oprot.writeString(struct.channelName);
      }
      if (struct.isSetPlatform()) {
        oprot.writeString(struct.platform);
      }
      if (struct.isSetUdid()) {
        oprot.writeString(struct.udid);
      }
      if (struct.isSetDeviceId()) {
        oprot.writeString(struct.deviceId);
      }
      if (struct.isSetSessionId()) {
        oprot.writeString(struct.sessionId);
      }
      if (struct.isSetSdkVersion()) {
        oprot.writeString(struct.sdkVersion);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ChannelNeteaseLoginParam struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.sdkUId = iprot.readString();
        struct.setSdkUIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.gameId = iprot.readString();
        struct.setGameIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.appChannel = iprot.readString();
        struct.setAppChannelIsSet(true);
      }
      if (incoming.get(3)) {
        struct.channelName = iprot.readString();
        struct.setChannelNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.platform = iprot.readString();
        struct.setPlatformIsSet(true);
      }
      if (incoming.get(5)) {
        struct.udid = iprot.readString();
        struct.setUdidIsSet(true);
      }
      if (incoming.get(6)) {
        struct.deviceId = iprot.readString();
        struct.setDeviceIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.sessionId = iprot.readString();
        struct.setSessionIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.sdkVersion = iprot.readString();
        struct.setSdkVersionIsSet(true);
      }
    }
  }

}

