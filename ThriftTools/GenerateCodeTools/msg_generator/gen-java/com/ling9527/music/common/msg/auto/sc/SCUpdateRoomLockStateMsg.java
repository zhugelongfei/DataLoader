/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SCUpdateRoomLockStateMsg implements org.apache.thrift.TBase<SCUpdateRoomLockStateMsg, SCUpdateRoomLockStateMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCUpdateRoomLockStateMsg");

  private static final org.apache.thrift.protocol.TField LOCK_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("lockState", org.apache.thrift.protocol.TType.BYTE, (short)1);
  private static final org.apache.thrift.protocol.TField WATCH_FIELD_DESC = new org.apache.thrift.protocol.TField("watch", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField PSWD_FIELD_DESC = new org.apache.thrift.protocol.TField("pswd", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField STAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("stageId", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCUpdateRoomLockStateMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCUpdateRoomLockStateMsgTupleSchemeFactory());
  }

  public byte lockState; // required
  public boolean watch; // required
  public String pswd; // required
  public int stageId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LOCK_STATE((short)1, "lockState"),
    WATCH((short)2, "watch"),
    PSWD((short)3, "pswd"),
    STAGE_ID((short)4, "stageId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LOCK_STATE
          return LOCK_STATE;
        case 2: // WATCH
          return WATCH;
        case 3: // PSWD
          return PSWD;
        case 4: // STAGE_ID
          return STAGE_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LOCKSTATE_ISSET_ID = 0;
  private static final int __WATCH_ISSET_ID = 1;
  private static final int __STAGEID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LOCK_STATE, new org.apache.thrift.meta_data.FieldMetaData("lockState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.WATCH, new org.apache.thrift.meta_data.FieldMetaData("watch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PSWD, new org.apache.thrift.meta_data.FieldMetaData("pswd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("stageId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCUpdateRoomLockStateMsg.class, metaDataMap);
  }

  public SCUpdateRoomLockStateMsg() {
  }

  public SCUpdateRoomLockStateMsg(
    byte lockState,
    boolean watch,
    String pswd,
    int stageId)
  {
    this();
    this.lockState = lockState;
    setLockStateIsSet(true);
    this.watch = watch;
    setWatchIsSet(true);
    this.pswd = pswd;
    this.stageId = stageId;
    setStageIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCUpdateRoomLockStateMsg(SCUpdateRoomLockStateMsg other) {
    __isset_bitfield = other.__isset_bitfield;
    this.lockState = other.lockState;
    this.watch = other.watch;
    if (other.isSetPswd()) {
      this.pswd = other.pswd;
    }
    this.stageId = other.stageId;
  }

  public SCUpdateRoomLockStateMsg deepCopy() {
    return new SCUpdateRoomLockStateMsg(this);
  }

  @Override
  public void clear() {
    setLockStateIsSet(false);
    this.lockState = 0;
    setWatchIsSet(false);
    this.watch = false;
    this.pswd = null;
    setStageIdIsSet(false);
    this.stageId = 0;
  }

  public byte getLockState() {
    return this.lockState;
  }

  public SCUpdateRoomLockStateMsg setLockState(byte lockState) {
    this.lockState = lockState;
    setLockStateIsSet(true);
    return this;
  }

  public void unsetLockState() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOCKSTATE_ISSET_ID);
  }

  /** Returns true if field lockState is set (has been assigned a value) and false otherwise */
  public boolean isSetLockState() {
    return EncodingUtils.testBit(__isset_bitfield, __LOCKSTATE_ISSET_ID);
  }

  public void setLockStateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOCKSTATE_ISSET_ID, value);
  }

  public boolean isWatch() {
    return this.watch;
  }

  public SCUpdateRoomLockStateMsg setWatch(boolean watch) {
    this.watch = watch;
    setWatchIsSet(true);
    return this;
  }

  public void unsetWatch() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WATCH_ISSET_ID);
  }

  /** Returns true if field watch is set (has been assigned a value) and false otherwise */
  public boolean isSetWatch() {
    return EncodingUtils.testBit(__isset_bitfield, __WATCH_ISSET_ID);
  }

  public void setWatchIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WATCH_ISSET_ID, value);
  }

  public String getPswd() {
    return this.pswd;
  }

  public SCUpdateRoomLockStateMsg setPswd(String pswd) {
    this.pswd = pswd;
    return this;
  }

  public void unsetPswd() {
    this.pswd = null;
  }

  /** Returns true if field pswd is set (has been assigned a value) and false otherwise */
  public boolean isSetPswd() {
    return this.pswd != null;
  }

  public void setPswdIsSet(boolean value) {
    if (!value) {
      this.pswd = null;
    }
  }

  public int getStageId() {
    return this.stageId;
  }

  public SCUpdateRoomLockStateMsg setStageId(int stageId) {
    this.stageId = stageId;
    setStageIdIsSet(true);
    return this;
  }

  public void unsetStageId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STAGEID_ISSET_ID);
  }

  /** Returns true if field stageId is set (has been assigned a value) and false otherwise */
  public boolean isSetStageId() {
    return EncodingUtils.testBit(__isset_bitfield, __STAGEID_ISSET_ID);
  }

  public void setStageIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STAGEID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LOCK_STATE:
      if (value == null) {
        unsetLockState();
      } else {
        setLockState((Byte)value);
      }
      break;

    case WATCH:
      if (value == null) {
        unsetWatch();
      } else {
        setWatch((Boolean)value);
      }
      break;

    case PSWD:
      if (value == null) {
        unsetPswd();
      } else {
        setPswd((String)value);
      }
      break;

    case STAGE_ID:
      if (value == null) {
        unsetStageId();
      } else {
        setStageId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LOCK_STATE:
      return Byte.valueOf(getLockState());

    case WATCH:
      return Boolean.valueOf(isWatch());

    case PSWD:
      return getPswd();

    case STAGE_ID:
      return Integer.valueOf(getStageId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LOCK_STATE:
      return isSetLockState();
    case WATCH:
      return isSetWatch();
    case PSWD:
      return isSetPswd();
    case STAGE_ID:
      return isSetStageId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCUpdateRoomLockStateMsg)
      return this.equals((SCUpdateRoomLockStateMsg)that);
    return false;
  }

  public boolean equals(SCUpdateRoomLockStateMsg that) {
    if (that == null)
      return false;

    boolean this_present_lockState = true;
    boolean that_present_lockState = true;
    if (this_present_lockState || that_present_lockState) {
      if (!(this_present_lockState && that_present_lockState))
        return false;
      if (this.lockState != that.lockState)
        return false;
    }

    boolean this_present_watch = true;
    boolean that_present_watch = true;
    if (this_present_watch || that_present_watch) {
      if (!(this_present_watch && that_present_watch))
        return false;
      if (this.watch != that.watch)
        return false;
    }

    boolean this_present_pswd = true && this.isSetPswd();
    boolean that_present_pswd = true && that.isSetPswd();
    if (this_present_pswd || that_present_pswd) {
      if (!(this_present_pswd && that_present_pswd))
        return false;
      if (!this.pswd.equals(that.pswd))
        return false;
    }

    boolean this_present_stageId = true;
    boolean that_present_stageId = true;
    if (this_present_stageId || that_present_stageId) {
      if (!(this_present_stageId && that_present_stageId))
        return false;
      if (this.stageId != that.stageId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCUpdateRoomLockStateMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCUpdateRoomLockStateMsg typedOther = (SCUpdateRoomLockStateMsg)other;

    lastComparison = Boolean.valueOf(isSetLockState()).compareTo(typedOther.isSetLockState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLockState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lockState, typedOther.lockState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWatch()).compareTo(typedOther.isSetWatch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWatch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.watch, typedOther.watch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPswd()).compareTo(typedOther.isSetPswd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPswd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pswd, typedOther.pswd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStageId()).compareTo(typedOther.isSetStageId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStageId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stageId, typedOther.stageId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCUpdateRoomLockStateMsg(");
    boolean first = true;

    sb.append("lockState:");
    sb.append(this.lockState);
    first = false;
    if (!first) sb.append(", ");
    sb.append("watch:");
    sb.append(this.watch);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pswd:");
    if (this.pswd == null) {
      sb.append("null");
    } else {
      sb.append(this.pswd);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stageId:");
    sb.append(this.stageId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCUpdateRoomLockStateMsgStandardSchemeFactory implements SchemeFactory {
    public SCUpdateRoomLockStateMsgStandardScheme getScheme() {
      return new SCUpdateRoomLockStateMsgStandardScheme();
    }
  }

  private static class SCUpdateRoomLockStateMsgStandardScheme extends StandardScheme<SCUpdateRoomLockStateMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCUpdateRoomLockStateMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LOCK_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.lockState = iprot.readByte();
              struct.setLockStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // WATCH
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.watch = iprot.readBool();
              struct.setWatchIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PSWD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pswd = iprot.readString();
              struct.setPswdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STAGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.stageId = iprot.readI32();
              struct.setStageIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCUpdateRoomLockStateMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(LOCK_STATE_FIELD_DESC);
      oprot.writeByte(struct.lockState);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WATCH_FIELD_DESC);
      oprot.writeBool(struct.watch);
      oprot.writeFieldEnd();
      if (struct.pswd != null) {
        oprot.writeFieldBegin(PSWD_FIELD_DESC);
        oprot.writeString(struct.pswd);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STAGE_ID_FIELD_DESC);
      oprot.writeI32(struct.stageId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCUpdateRoomLockStateMsgTupleSchemeFactory implements SchemeFactory {
    public SCUpdateRoomLockStateMsgTupleScheme getScheme() {
      return new SCUpdateRoomLockStateMsgTupleScheme();
    }
  }

  private static class SCUpdateRoomLockStateMsgTupleScheme extends TupleScheme<SCUpdateRoomLockStateMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCUpdateRoomLockStateMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetLockState()) {
        optionals.set(0);
      }
      if (struct.isSetWatch()) {
        optionals.set(1);
      }
      if (struct.isSetPswd()) {
        optionals.set(2);
      }
      if (struct.isSetStageId()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetLockState()) {
        oprot.writeByte(struct.lockState);
      }
      if (struct.isSetWatch()) {
        oprot.writeBool(struct.watch);
      }
      if (struct.isSetPswd()) {
        oprot.writeString(struct.pswd);
      }
      if (struct.isSetStageId()) {
        oprot.writeI32(struct.stageId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCUpdateRoomLockStateMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.lockState = iprot.readByte();
        struct.setLockStateIsSet(true);
      }
      if (incoming.get(1)) {
        struct.watch = iprot.readBool();
        struct.setWatchIsSet(true);
      }
      if (incoming.get(2)) {
        struct.pswd = iprot.readString();
        struct.setPswdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.stageId = iprot.readI32();
        struct.setStageIdIsSet(true);
      }
    }
  }

}

