/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.cs;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 显示玩家外观信息
 */
public class CSShowPlayerAppearanceInfo implements org.apache.thrift.TBase<CSShowPlayerAppearanceInfo, CSShowPlayerAppearanceInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CSShowPlayerAppearanceInfo");

  private static final org.apache.thrift.protocol.TField FIRST_CHAR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("firstCharId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField TID_FIELD_DESC = new org.apache.thrift.protocol.TField("tid", org.apache.thrift.protocol.TType.I16, (short)2);
  private static final org.apache.thrift.protocol.TField SEC_CHAR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("secCharId", org.apache.thrift.protocol.TType.I64, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CSShowPlayerAppearanceInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CSShowPlayerAppearanceInfoTupleSchemeFactory());
  }

  public long firstCharId; // required
  public short tid; // required
  public long secCharId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FIRST_CHAR_ID((short)1, "firstCharId"),
    TID((short)2, "tid"),
    SEC_CHAR_ID((short)3, "secCharId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FIRST_CHAR_ID
          return FIRST_CHAR_ID;
        case 2: // TID
          return TID;
        case 3: // SEC_CHAR_ID
          return SEC_CHAR_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FIRSTCHARID_ISSET_ID = 0;
  private static final int __TID_ISSET_ID = 1;
  private static final int __SECCHARID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.SEC_CHAR_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FIRST_CHAR_ID, new org.apache.thrift.meta_data.FieldMetaData("firstCharId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TID, new org.apache.thrift.meta_data.FieldMetaData("tid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.SEC_CHAR_ID, new org.apache.thrift.meta_data.FieldMetaData("secCharId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CSShowPlayerAppearanceInfo.class, metaDataMap);
  }

  public CSShowPlayerAppearanceInfo() {
  }

  public CSShowPlayerAppearanceInfo(
    long firstCharId,
    short tid)
  {
    this();
    this.firstCharId = firstCharId;
    setFirstCharIdIsSet(true);
    this.tid = tid;
    setTidIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CSShowPlayerAppearanceInfo(CSShowPlayerAppearanceInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.firstCharId = other.firstCharId;
    this.tid = other.tid;
    this.secCharId = other.secCharId;
  }

  public CSShowPlayerAppearanceInfo deepCopy() {
    return new CSShowPlayerAppearanceInfo(this);
  }

  @Override
  public void clear() {
    setFirstCharIdIsSet(false);
    this.firstCharId = 0;
    setTidIsSet(false);
    this.tid = 0;
    setSecCharIdIsSet(false);
    this.secCharId = 0;
  }

  public long getFirstCharId() {
    return this.firstCharId;
  }

  public CSShowPlayerAppearanceInfo setFirstCharId(long firstCharId) {
    this.firstCharId = firstCharId;
    setFirstCharIdIsSet(true);
    return this;
  }

  public void unsetFirstCharId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIRSTCHARID_ISSET_ID);
  }

  /** Returns true if field firstCharId is set (has been assigned a value) and false otherwise */
  public boolean isSetFirstCharId() {
    return EncodingUtils.testBit(__isset_bitfield, __FIRSTCHARID_ISSET_ID);
  }

  public void setFirstCharIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIRSTCHARID_ISSET_ID, value);
  }

  public short getTid() {
    return this.tid;
  }

  public CSShowPlayerAppearanceInfo setTid(short tid) {
    this.tid = tid;
    setTidIsSet(true);
    return this;
  }

  public void unsetTid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TID_ISSET_ID);
  }

  /** Returns true if field tid is set (has been assigned a value) and false otherwise */
  public boolean isSetTid() {
    return EncodingUtils.testBit(__isset_bitfield, __TID_ISSET_ID);
  }

  public void setTidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TID_ISSET_ID, value);
  }

  public long getSecCharId() {
    return this.secCharId;
  }

  public CSShowPlayerAppearanceInfo setSecCharId(long secCharId) {
    this.secCharId = secCharId;
    setSecCharIdIsSet(true);
    return this;
  }

  public void unsetSecCharId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SECCHARID_ISSET_ID);
  }

  /** Returns true if field secCharId is set (has been assigned a value) and false otherwise */
  public boolean isSetSecCharId() {
    return EncodingUtils.testBit(__isset_bitfield, __SECCHARID_ISSET_ID);
  }

  public void setSecCharIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SECCHARID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FIRST_CHAR_ID:
      if (value == null) {
        unsetFirstCharId();
      } else {
        setFirstCharId((Long)value);
      }
      break;

    case TID:
      if (value == null) {
        unsetTid();
      } else {
        setTid((Short)value);
      }
      break;

    case SEC_CHAR_ID:
      if (value == null) {
        unsetSecCharId();
      } else {
        setSecCharId((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FIRST_CHAR_ID:
      return Long.valueOf(getFirstCharId());

    case TID:
      return Short.valueOf(getTid());

    case SEC_CHAR_ID:
      return Long.valueOf(getSecCharId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FIRST_CHAR_ID:
      return isSetFirstCharId();
    case TID:
      return isSetTid();
    case SEC_CHAR_ID:
      return isSetSecCharId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CSShowPlayerAppearanceInfo)
      return this.equals((CSShowPlayerAppearanceInfo)that);
    return false;
  }

  public boolean equals(CSShowPlayerAppearanceInfo that) {
    if (that == null)
      return false;

    boolean this_present_firstCharId = true;
    boolean that_present_firstCharId = true;
    if (this_present_firstCharId || that_present_firstCharId) {
      if (!(this_present_firstCharId && that_present_firstCharId))
        return false;
      if (this.firstCharId != that.firstCharId)
        return false;
    }

    boolean this_present_tid = true;
    boolean that_present_tid = true;
    if (this_present_tid || that_present_tid) {
      if (!(this_present_tid && that_present_tid))
        return false;
      if (this.tid != that.tid)
        return false;
    }

    boolean this_present_secCharId = true && this.isSetSecCharId();
    boolean that_present_secCharId = true && that.isSetSecCharId();
    if (this_present_secCharId || that_present_secCharId) {
      if (!(this_present_secCharId && that_present_secCharId))
        return false;
      if (this.secCharId != that.secCharId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(CSShowPlayerAppearanceInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CSShowPlayerAppearanceInfo typedOther = (CSShowPlayerAppearanceInfo)other;

    lastComparison = Boolean.valueOf(isSetFirstCharId()).compareTo(typedOther.isSetFirstCharId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFirstCharId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firstCharId, typedOther.firstCharId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTid()).compareTo(typedOther.isSetTid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tid, typedOther.tid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSecCharId()).compareTo(typedOther.isSetSecCharId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSecCharId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secCharId, typedOther.secCharId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CSShowPlayerAppearanceInfo(");
    boolean first = true;

    sb.append("firstCharId:");
    sb.append(this.firstCharId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tid:");
    sb.append(this.tid);
    first = false;
    if (isSetSecCharId()) {
      if (!first) sb.append(", ");
      sb.append("secCharId:");
      sb.append(this.secCharId);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CSShowPlayerAppearanceInfoStandardSchemeFactory implements SchemeFactory {
    public CSShowPlayerAppearanceInfoStandardScheme getScheme() {
      return new CSShowPlayerAppearanceInfoStandardScheme();
    }
  }

  private static class CSShowPlayerAppearanceInfoStandardScheme extends StandardScheme<CSShowPlayerAppearanceInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CSShowPlayerAppearanceInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FIRST_CHAR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.firstCharId = iprot.readI64();
              struct.setFirstCharIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TID
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.tid = iprot.readI16();
              struct.setTidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SEC_CHAR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.secCharId = iprot.readI64();
              struct.setSecCharIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CSShowPlayerAppearanceInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(FIRST_CHAR_ID_FIELD_DESC);
      oprot.writeI64(struct.firstCharId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TID_FIELD_DESC);
      oprot.writeI16(struct.tid);
      oprot.writeFieldEnd();
      if (struct.isSetSecCharId()) {
        oprot.writeFieldBegin(SEC_CHAR_ID_FIELD_DESC);
        oprot.writeI64(struct.secCharId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CSShowPlayerAppearanceInfoTupleSchemeFactory implements SchemeFactory {
    public CSShowPlayerAppearanceInfoTupleScheme getScheme() {
      return new CSShowPlayerAppearanceInfoTupleScheme();
    }
  }

  private static class CSShowPlayerAppearanceInfoTupleScheme extends TupleScheme<CSShowPlayerAppearanceInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CSShowPlayerAppearanceInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetFirstCharId()) {
        optionals.set(0);
      }
      if (struct.isSetTid()) {
        optionals.set(1);
      }
      if (struct.isSetSecCharId()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetFirstCharId()) {
        oprot.writeI64(struct.firstCharId);
      }
      if (struct.isSetTid()) {
        oprot.writeI16(struct.tid);
      }
      if (struct.isSetSecCharId()) {
        oprot.writeI64(struct.secCharId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CSShowPlayerAppearanceInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.firstCharId = iprot.readI64();
        struct.setFirstCharIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.tid = iprot.readI16();
        struct.setTidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.secCharId = iprot.readI64();
        struct.setSecCharIdIsSet(true);
      }
    }
  }

}

