/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SCCheckClientVersionMsg implements org.apache.thrift.TBase<SCCheckClientVersionMsg, SCCheckClientVersionMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCCheckClientVersionMsg");

  private static final org.apache.thrift.protocol.TField VERSION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("versionType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TIP_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("tipInfo", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCCheckClientVersionMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCCheckClientVersionMsgTupleSchemeFactory());
  }

  /**
   * 
   * @see com.ling9527.music.common.msg.auto.VersionUpdateType
   */
  public com.ling9527.music.common.msg.auto.VersionUpdateType versionType; // required
  public String tipInfo; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see com.ling9527.music.common.msg.auto.VersionUpdateType
     */
    VERSION_TYPE((short)1, "versionType"),
    TIP_INFO((short)2, "tipInfo");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VERSION_TYPE
          return VERSION_TYPE;
        case 2: // TIP_INFO
          return TIP_INFO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VERSION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("versionType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.ling9527.music.common.msg.auto.VersionUpdateType.class)));
    tmpMap.put(_Fields.TIP_INFO, new org.apache.thrift.meta_data.FieldMetaData("tipInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCCheckClientVersionMsg.class, metaDataMap);
  }

  public SCCheckClientVersionMsg() {
  }

  public SCCheckClientVersionMsg(
    com.ling9527.music.common.msg.auto.VersionUpdateType versionType,
    String tipInfo)
  {
    this();
    this.versionType = versionType;
    this.tipInfo = tipInfo;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCCheckClientVersionMsg(SCCheckClientVersionMsg other) {
    if (other.isSetVersionType()) {
      this.versionType = other.versionType;
    }
    if (other.isSetTipInfo()) {
      this.tipInfo = other.tipInfo;
    }
  }

  public SCCheckClientVersionMsg deepCopy() {
    return new SCCheckClientVersionMsg(this);
  }

  @Override
  public void clear() {
    this.versionType = null;
    this.tipInfo = null;
  }

  /**
   * 
   * @see com.ling9527.music.common.msg.auto.VersionUpdateType
   */
  public com.ling9527.music.common.msg.auto.VersionUpdateType getVersionType() {
    return this.versionType;
  }

  /**
   * 
   * @see com.ling9527.music.common.msg.auto.VersionUpdateType
   */
  public SCCheckClientVersionMsg setVersionType(com.ling9527.music.common.msg.auto.VersionUpdateType versionType) {
    this.versionType = versionType;
    return this;
  }

  public void unsetVersionType() {
    this.versionType = null;
  }

  /** Returns true if field versionType is set (has been assigned a value) and false otherwise */
  public boolean isSetVersionType() {
    return this.versionType != null;
  }

  public void setVersionTypeIsSet(boolean value) {
    if (!value) {
      this.versionType = null;
    }
  }

  public String getTipInfo() {
    return this.tipInfo;
  }

  public SCCheckClientVersionMsg setTipInfo(String tipInfo) {
    this.tipInfo = tipInfo;
    return this;
  }

  public void unsetTipInfo() {
    this.tipInfo = null;
  }

  /** Returns true if field tipInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetTipInfo() {
    return this.tipInfo != null;
  }

  public void setTipInfoIsSet(boolean value) {
    if (!value) {
      this.tipInfo = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case VERSION_TYPE:
      if (value == null) {
        unsetVersionType();
      } else {
        setVersionType((com.ling9527.music.common.msg.auto.VersionUpdateType)value);
      }
      break;

    case TIP_INFO:
      if (value == null) {
        unsetTipInfo();
      } else {
        setTipInfo((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case VERSION_TYPE:
      return getVersionType();

    case TIP_INFO:
      return getTipInfo();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case VERSION_TYPE:
      return isSetVersionType();
    case TIP_INFO:
      return isSetTipInfo();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCCheckClientVersionMsg)
      return this.equals((SCCheckClientVersionMsg)that);
    return false;
  }

  public boolean equals(SCCheckClientVersionMsg that) {
    if (that == null)
      return false;

    boolean this_present_versionType = true && this.isSetVersionType();
    boolean that_present_versionType = true && that.isSetVersionType();
    if (this_present_versionType || that_present_versionType) {
      if (!(this_present_versionType && that_present_versionType))
        return false;
      if (!this.versionType.equals(that.versionType))
        return false;
    }

    boolean this_present_tipInfo = true && this.isSetTipInfo();
    boolean that_present_tipInfo = true && that.isSetTipInfo();
    if (this_present_tipInfo || that_present_tipInfo) {
      if (!(this_present_tipInfo && that_present_tipInfo))
        return false;
      if (!this.tipInfo.equals(that.tipInfo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCCheckClientVersionMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCCheckClientVersionMsg typedOther = (SCCheckClientVersionMsg)other;

    lastComparison = Boolean.valueOf(isSetVersionType()).compareTo(typedOther.isSetVersionType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersionType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.versionType, typedOther.versionType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTipInfo()).compareTo(typedOther.isSetTipInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTipInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tipInfo, typedOther.tipInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCCheckClientVersionMsg(");
    boolean first = true;

    sb.append("versionType:");
    if (this.versionType == null) {
      sb.append("null");
    } else {
      sb.append(this.versionType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tipInfo:");
    if (this.tipInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.tipInfo);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCCheckClientVersionMsgStandardSchemeFactory implements SchemeFactory {
    public SCCheckClientVersionMsgStandardScheme getScheme() {
      return new SCCheckClientVersionMsgStandardScheme();
    }
  }

  private static class SCCheckClientVersionMsgStandardScheme extends StandardScheme<SCCheckClientVersionMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCCheckClientVersionMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VERSION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.versionType = com.ling9527.music.common.msg.auto.VersionUpdateType.findByValue(iprot.readI32());
              struct.setVersionTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TIP_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tipInfo = iprot.readString();
              struct.setTipInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCCheckClientVersionMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.versionType != null) {
        oprot.writeFieldBegin(VERSION_TYPE_FIELD_DESC);
        oprot.writeI32(struct.versionType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.tipInfo != null) {
        oprot.writeFieldBegin(TIP_INFO_FIELD_DESC);
        oprot.writeString(struct.tipInfo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCCheckClientVersionMsgTupleSchemeFactory implements SchemeFactory {
    public SCCheckClientVersionMsgTupleScheme getScheme() {
      return new SCCheckClientVersionMsgTupleScheme();
    }
  }

  private static class SCCheckClientVersionMsgTupleScheme extends TupleScheme<SCCheckClientVersionMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCCheckClientVersionMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetVersionType()) {
        optionals.set(0);
      }
      if (struct.isSetTipInfo()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetVersionType()) {
        oprot.writeI32(struct.versionType.getValue());
      }
      if (struct.isSetTipInfo()) {
        oprot.writeString(struct.tipInfo);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCCheckClientVersionMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.versionType = com.ling9527.music.common.msg.auto.VersionUpdateType.findByValue(iprot.readI32());
        struct.setVersionTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.tipInfo = iprot.readString();
        struct.setTipInfoIsSet(true);
      }
    }
  }

}

