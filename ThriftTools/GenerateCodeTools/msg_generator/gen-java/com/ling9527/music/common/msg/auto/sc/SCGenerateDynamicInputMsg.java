/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 动感模式输入数据， 由一系列的输入片段组成，适用于T台，写真等特殊玩法
 */
public class SCGenerateDynamicInputMsg implements org.apache.thrift.TBase<SCGenerateDynamicInputMsg, SCGenerateDynamicInputMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCGenerateDynamicInputMsg");

  private static final org.apache.thrift.protocol.TField INPUT_MUSIC_GROUPS_FIELD_DESC = new org.apache.thrift.protocol.TField("inputMusicGroups", org.apache.thrift.protocol.TType.LIST, (short)1);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCGenerateDynamicInputMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCGenerateDynamicInputMsgTupleSchemeFactory());
  }

  /**
   * 输入音乐id序列
   */
  public List<com.ling9527.music.common.msg.auto.DynamicSegmentInputs> inputMusicGroups; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 输入音乐id序列
     */
    INPUT_MUSIC_GROUPS((short)1, "inputMusicGroups");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INPUT_MUSIC_GROUPS
          return INPUT_MUSIC_GROUPS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INPUT_MUSIC_GROUPS, new org.apache.thrift.meta_data.FieldMetaData("inputMusicGroups", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.DynamicSegmentInputs.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCGenerateDynamicInputMsg.class, metaDataMap);
  }

  public SCGenerateDynamicInputMsg() {
  }

  public SCGenerateDynamicInputMsg(
    List<com.ling9527.music.common.msg.auto.DynamicSegmentInputs> inputMusicGroups)
  {
    this();
    this.inputMusicGroups = inputMusicGroups;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCGenerateDynamicInputMsg(SCGenerateDynamicInputMsg other) {
    if (other.isSetInputMusicGroups()) {
      List<com.ling9527.music.common.msg.auto.DynamicSegmentInputs> __this__inputMusicGroups = new ArrayList<com.ling9527.music.common.msg.auto.DynamicSegmentInputs>();
      for (com.ling9527.music.common.msg.auto.DynamicSegmentInputs other_element : other.inputMusicGroups) {
        __this__inputMusicGroups.add(new com.ling9527.music.common.msg.auto.DynamicSegmentInputs(other_element));
      }
      this.inputMusicGroups = __this__inputMusicGroups;
    }
  }

  public SCGenerateDynamicInputMsg deepCopy() {
    return new SCGenerateDynamicInputMsg(this);
  }

  @Override
  public void clear() {
    this.inputMusicGroups = null;
  }

  public int getInputMusicGroupsSize() {
    return (this.inputMusicGroups == null) ? 0 : this.inputMusicGroups.size();
  }

  public java.util.Iterator<com.ling9527.music.common.msg.auto.DynamicSegmentInputs> getInputMusicGroupsIterator() {
    return (this.inputMusicGroups == null) ? null : this.inputMusicGroups.iterator();
  }

  public void addToInputMusicGroups(com.ling9527.music.common.msg.auto.DynamicSegmentInputs elem) {
    if (this.inputMusicGroups == null) {
      this.inputMusicGroups = new ArrayList<com.ling9527.music.common.msg.auto.DynamicSegmentInputs>();
    }
    this.inputMusicGroups.add(elem);
  }

  /**
   * 输入音乐id序列
   */
  public List<com.ling9527.music.common.msg.auto.DynamicSegmentInputs> getInputMusicGroups() {
    return this.inputMusicGroups;
  }

  /**
   * 输入音乐id序列
   */
  public SCGenerateDynamicInputMsg setInputMusicGroups(List<com.ling9527.music.common.msg.auto.DynamicSegmentInputs> inputMusicGroups) {
    this.inputMusicGroups = inputMusicGroups;
    return this;
  }

  public void unsetInputMusicGroups() {
    this.inputMusicGroups = null;
  }

  /** Returns true if field inputMusicGroups is set (has been assigned a value) and false otherwise */
  public boolean isSetInputMusicGroups() {
    return this.inputMusicGroups != null;
  }

  public void setInputMusicGroupsIsSet(boolean value) {
    if (!value) {
      this.inputMusicGroups = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INPUT_MUSIC_GROUPS:
      if (value == null) {
        unsetInputMusicGroups();
      } else {
        setInputMusicGroups((List<com.ling9527.music.common.msg.auto.DynamicSegmentInputs>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INPUT_MUSIC_GROUPS:
      return getInputMusicGroups();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INPUT_MUSIC_GROUPS:
      return isSetInputMusicGroups();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCGenerateDynamicInputMsg)
      return this.equals((SCGenerateDynamicInputMsg)that);
    return false;
  }

  public boolean equals(SCGenerateDynamicInputMsg that) {
    if (that == null)
      return false;

    boolean this_present_inputMusicGroups = true && this.isSetInputMusicGroups();
    boolean that_present_inputMusicGroups = true && that.isSetInputMusicGroups();
    if (this_present_inputMusicGroups || that_present_inputMusicGroups) {
      if (!(this_present_inputMusicGroups && that_present_inputMusicGroups))
        return false;
      if (!this.inputMusicGroups.equals(that.inputMusicGroups))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCGenerateDynamicInputMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCGenerateDynamicInputMsg typedOther = (SCGenerateDynamicInputMsg)other;

    lastComparison = Boolean.valueOf(isSetInputMusicGroups()).compareTo(typedOther.isSetInputMusicGroups());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInputMusicGroups()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inputMusicGroups, typedOther.inputMusicGroups);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCGenerateDynamicInputMsg(");
    boolean first = true;

    sb.append("inputMusicGroups:");
    if (this.inputMusicGroups == null) {
      sb.append("null");
    } else {
      sb.append(this.inputMusicGroups);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCGenerateDynamicInputMsgStandardSchemeFactory implements SchemeFactory {
    public SCGenerateDynamicInputMsgStandardScheme getScheme() {
      return new SCGenerateDynamicInputMsgStandardScheme();
    }
  }

  private static class SCGenerateDynamicInputMsgStandardScheme extends StandardScheme<SCGenerateDynamicInputMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCGenerateDynamicInputMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INPUT_MUSIC_GROUPS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list88 = iprot.readListBegin();
                struct.inputMusicGroups = new ArrayList<com.ling9527.music.common.msg.auto.DynamicSegmentInputs>(_list88.size);
                for (int _i89 = 0; _i89 < _list88.size; ++_i89)
                {
                  com.ling9527.music.common.msg.auto.DynamicSegmentInputs _elem90; // required
                  _elem90 = new com.ling9527.music.common.msg.auto.DynamicSegmentInputs();
                  _elem90.read(iprot);
                  struct.inputMusicGroups.add(_elem90);
                }
                iprot.readListEnd();
              }
              struct.setInputMusicGroupsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCGenerateDynamicInputMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.inputMusicGroups != null) {
        oprot.writeFieldBegin(INPUT_MUSIC_GROUPS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.inputMusicGroups.size()));
          for (com.ling9527.music.common.msg.auto.DynamicSegmentInputs _iter91 : struct.inputMusicGroups)
          {
            _iter91.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCGenerateDynamicInputMsgTupleSchemeFactory implements SchemeFactory {
    public SCGenerateDynamicInputMsgTupleScheme getScheme() {
      return new SCGenerateDynamicInputMsgTupleScheme();
    }
  }

  private static class SCGenerateDynamicInputMsgTupleScheme extends TupleScheme<SCGenerateDynamicInputMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCGenerateDynamicInputMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetInputMusicGroups()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetInputMusicGroups()) {
        {
          oprot.writeI32(struct.inputMusicGroups.size());
          for (com.ling9527.music.common.msg.auto.DynamicSegmentInputs _iter92 : struct.inputMusicGroups)
          {
            _iter92.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCGenerateDynamicInputMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list93 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.inputMusicGroups = new ArrayList<com.ling9527.music.common.msg.auto.DynamicSegmentInputs>(_list93.size);
          for (int _i94 = 0; _i94 < _list93.size; ++_i94)
          {
            com.ling9527.music.common.msg.auto.DynamicSegmentInputs _elem95; // required
            _elem95 = new com.ling9527.music.common.msg.auto.DynamicSegmentInputs();
            _elem95.read(iprot);
            struct.inputMusicGroups.add(_elem95);
          }
        }
        struct.setInputMusicGroupsIsSet(true);
      }
    }
  }

}

