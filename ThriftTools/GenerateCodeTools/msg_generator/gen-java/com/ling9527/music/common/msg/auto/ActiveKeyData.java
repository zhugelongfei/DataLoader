/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ActiveKeyData implements org.apache.thrift.TBase<ActiveKeyData, ActiveKeyData._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ActiveKeyData");

  private static final org.apache.thrift.protocol.TField ACTIVIY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("activiyId", org.apache.thrift.protocol.TType.I16, (short)1);
  private static final org.apache.thrift.protocol.TField ACTIVITY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("activityName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField MONEY_COST_FIELD_DESC = new org.apache.thrift.protocol.TField("moneyCost", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField ITEM_PRIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("itemPrize", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField NUMBER_REMAIN_FIELD_DESC = new org.apache.thrift.protocol.TField("numberRemain", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField NUMBER_MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("numberMax", org.apache.thrift.protocol.TType.I32, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ActiveKeyDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ActiveKeyDataTupleSchemeFactory());
  }

  public short activiyId; // required
  public String activityName; // required
  public String content; // required
  public MoneyPrize moneyCost; // required
  public ItemPrize itemPrize; // required
  public int numberRemain; // required
  public int numberMax; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ACTIVIY_ID((short)1, "activiyId"),
    ACTIVITY_NAME((short)2, "activityName"),
    CONTENT((short)3, "content"),
    MONEY_COST((short)4, "moneyCost"),
    ITEM_PRIZE((short)5, "itemPrize"),
    NUMBER_REMAIN((short)6, "numberRemain"),
    NUMBER_MAX((short)7, "numberMax");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACTIVIY_ID
          return ACTIVIY_ID;
        case 2: // ACTIVITY_NAME
          return ACTIVITY_NAME;
        case 3: // CONTENT
          return CONTENT;
        case 4: // MONEY_COST
          return MONEY_COST;
        case 5: // ITEM_PRIZE
          return ITEM_PRIZE;
        case 6: // NUMBER_REMAIN
          return NUMBER_REMAIN;
        case 7: // NUMBER_MAX
          return NUMBER_MAX;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ACTIVIYID_ISSET_ID = 0;
  private static final int __NUMBERREMAIN_ISSET_ID = 1;
  private static final int __NUMBERMAX_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACTIVIY_ID, new org.apache.thrift.meta_data.FieldMetaData("activiyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.ACTIVITY_NAME, new org.apache.thrift.meta_data.FieldMetaData("activityName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MONEY_COST, new org.apache.thrift.meta_data.FieldMetaData("moneyCost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MoneyPrize.class)));
    tmpMap.put(_Fields.ITEM_PRIZE, new org.apache.thrift.meta_data.FieldMetaData("itemPrize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ItemPrize.class)));
    tmpMap.put(_Fields.NUMBER_REMAIN, new org.apache.thrift.meta_data.FieldMetaData("numberRemain", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUMBER_MAX, new org.apache.thrift.meta_data.FieldMetaData("numberMax", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ActiveKeyData.class, metaDataMap);
  }

  public ActiveKeyData() {
  }

  public ActiveKeyData(
    short activiyId,
    String activityName,
    String content,
    MoneyPrize moneyCost,
    ItemPrize itemPrize,
    int numberRemain,
    int numberMax)
  {
    this();
    this.activiyId = activiyId;
    setActiviyIdIsSet(true);
    this.activityName = activityName;
    this.content = content;
    this.moneyCost = moneyCost;
    this.itemPrize = itemPrize;
    this.numberRemain = numberRemain;
    setNumberRemainIsSet(true);
    this.numberMax = numberMax;
    setNumberMaxIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ActiveKeyData(ActiveKeyData other) {
    __isset_bitfield = other.__isset_bitfield;
    this.activiyId = other.activiyId;
    if (other.isSetActivityName()) {
      this.activityName = other.activityName;
    }
    if (other.isSetContent()) {
      this.content = other.content;
    }
    if (other.isSetMoneyCost()) {
      this.moneyCost = new MoneyPrize(other.moneyCost);
    }
    if (other.isSetItemPrize()) {
      this.itemPrize = new ItemPrize(other.itemPrize);
    }
    this.numberRemain = other.numberRemain;
    this.numberMax = other.numberMax;
  }

  public ActiveKeyData deepCopy() {
    return new ActiveKeyData(this);
  }

  @Override
  public void clear() {
    setActiviyIdIsSet(false);
    this.activiyId = 0;
    this.activityName = null;
    this.content = null;
    this.moneyCost = null;
    this.itemPrize = null;
    setNumberRemainIsSet(false);
    this.numberRemain = 0;
    setNumberMaxIsSet(false);
    this.numberMax = 0;
  }

  public short getActiviyId() {
    return this.activiyId;
  }

  public ActiveKeyData setActiviyId(short activiyId) {
    this.activiyId = activiyId;
    setActiviyIdIsSet(true);
    return this;
  }

  public void unsetActiviyId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIVIYID_ISSET_ID);
  }

  /** Returns true if field activiyId is set (has been assigned a value) and false otherwise */
  public boolean isSetActiviyId() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTIVIYID_ISSET_ID);
  }

  public void setActiviyIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIVIYID_ISSET_ID, value);
  }

  public String getActivityName() {
    return this.activityName;
  }

  public ActiveKeyData setActivityName(String activityName) {
    this.activityName = activityName;
    return this;
  }

  public void unsetActivityName() {
    this.activityName = null;
  }

  /** Returns true if field activityName is set (has been assigned a value) and false otherwise */
  public boolean isSetActivityName() {
    return this.activityName != null;
  }

  public void setActivityNameIsSet(boolean value) {
    if (!value) {
      this.activityName = null;
    }
  }

  public String getContent() {
    return this.content;
  }

  public ActiveKeyData setContent(String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public MoneyPrize getMoneyCost() {
    return this.moneyCost;
  }

  public ActiveKeyData setMoneyCost(MoneyPrize moneyCost) {
    this.moneyCost = moneyCost;
    return this;
  }

  public void unsetMoneyCost() {
    this.moneyCost = null;
  }

  /** Returns true if field moneyCost is set (has been assigned a value) and false otherwise */
  public boolean isSetMoneyCost() {
    return this.moneyCost != null;
  }

  public void setMoneyCostIsSet(boolean value) {
    if (!value) {
      this.moneyCost = null;
    }
  }

  public ItemPrize getItemPrize() {
    return this.itemPrize;
  }

  public ActiveKeyData setItemPrize(ItemPrize itemPrize) {
    this.itemPrize = itemPrize;
    return this;
  }

  public void unsetItemPrize() {
    this.itemPrize = null;
  }

  /** Returns true if field itemPrize is set (has been assigned a value) and false otherwise */
  public boolean isSetItemPrize() {
    return this.itemPrize != null;
  }

  public void setItemPrizeIsSet(boolean value) {
    if (!value) {
      this.itemPrize = null;
    }
  }

  public int getNumberRemain() {
    return this.numberRemain;
  }

  public ActiveKeyData setNumberRemain(int numberRemain) {
    this.numberRemain = numberRemain;
    setNumberRemainIsSet(true);
    return this;
  }

  public void unsetNumberRemain() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMBERREMAIN_ISSET_ID);
  }

  /** Returns true if field numberRemain is set (has been assigned a value) and false otherwise */
  public boolean isSetNumberRemain() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMBERREMAIN_ISSET_ID);
  }

  public void setNumberRemainIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMBERREMAIN_ISSET_ID, value);
  }

  public int getNumberMax() {
    return this.numberMax;
  }

  public ActiveKeyData setNumberMax(int numberMax) {
    this.numberMax = numberMax;
    setNumberMaxIsSet(true);
    return this;
  }

  public void unsetNumberMax() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMBERMAX_ISSET_ID);
  }

  /** Returns true if field numberMax is set (has been assigned a value) and false otherwise */
  public boolean isSetNumberMax() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMBERMAX_ISSET_ID);
  }

  public void setNumberMaxIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMBERMAX_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ACTIVIY_ID:
      if (value == null) {
        unsetActiviyId();
      } else {
        setActiviyId((Short)value);
      }
      break;

    case ACTIVITY_NAME:
      if (value == null) {
        unsetActivityName();
      } else {
        setActivityName((String)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case MONEY_COST:
      if (value == null) {
        unsetMoneyCost();
      } else {
        setMoneyCost((MoneyPrize)value);
      }
      break;

    case ITEM_PRIZE:
      if (value == null) {
        unsetItemPrize();
      } else {
        setItemPrize((ItemPrize)value);
      }
      break;

    case NUMBER_REMAIN:
      if (value == null) {
        unsetNumberRemain();
      } else {
        setNumberRemain((Integer)value);
      }
      break;

    case NUMBER_MAX:
      if (value == null) {
        unsetNumberMax();
      } else {
        setNumberMax((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ACTIVIY_ID:
      return Short.valueOf(getActiviyId());

    case ACTIVITY_NAME:
      return getActivityName();

    case CONTENT:
      return getContent();

    case MONEY_COST:
      return getMoneyCost();

    case ITEM_PRIZE:
      return getItemPrize();

    case NUMBER_REMAIN:
      return Integer.valueOf(getNumberRemain());

    case NUMBER_MAX:
      return Integer.valueOf(getNumberMax());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ACTIVIY_ID:
      return isSetActiviyId();
    case ACTIVITY_NAME:
      return isSetActivityName();
    case CONTENT:
      return isSetContent();
    case MONEY_COST:
      return isSetMoneyCost();
    case ITEM_PRIZE:
      return isSetItemPrize();
    case NUMBER_REMAIN:
      return isSetNumberRemain();
    case NUMBER_MAX:
      return isSetNumberMax();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ActiveKeyData)
      return this.equals((ActiveKeyData)that);
    return false;
  }

  public boolean equals(ActiveKeyData that) {
    if (that == null)
      return false;

    boolean this_present_activiyId = true;
    boolean that_present_activiyId = true;
    if (this_present_activiyId || that_present_activiyId) {
      if (!(this_present_activiyId && that_present_activiyId))
        return false;
      if (this.activiyId != that.activiyId)
        return false;
    }

    boolean this_present_activityName = true && this.isSetActivityName();
    boolean that_present_activityName = true && that.isSetActivityName();
    if (this_present_activityName || that_present_activityName) {
      if (!(this_present_activityName && that_present_activityName))
        return false;
      if (!this.activityName.equals(that.activityName))
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_moneyCost = true && this.isSetMoneyCost();
    boolean that_present_moneyCost = true && that.isSetMoneyCost();
    if (this_present_moneyCost || that_present_moneyCost) {
      if (!(this_present_moneyCost && that_present_moneyCost))
        return false;
      if (!this.moneyCost.equals(that.moneyCost))
        return false;
    }

    boolean this_present_itemPrize = true && this.isSetItemPrize();
    boolean that_present_itemPrize = true && that.isSetItemPrize();
    if (this_present_itemPrize || that_present_itemPrize) {
      if (!(this_present_itemPrize && that_present_itemPrize))
        return false;
      if (!this.itemPrize.equals(that.itemPrize))
        return false;
    }

    boolean this_present_numberRemain = true;
    boolean that_present_numberRemain = true;
    if (this_present_numberRemain || that_present_numberRemain) {
      if (!(this_present_numberRemain && that_present_numberRemain))
        return false;
      if (this.numberRemain != that.numberRemain)
        return false;
    }

    boolean this_present_numberMax = true;
    boolean that_present_numberMax = true;
    if (this_present_numberMax || that_present_numberMax) {
      if (!(this_present_numberMax && that_present_numberMax))
        return false;
      if (this.numberMax != that.numberMax)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ActiveKeyData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ActiveKeyData typedOther = (ActiveKeyData)other;

    lastComparison = Boolean.valueOf(isSetActiviyId()).compareTo(typedOther.isSetActiviyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiviyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activiyId, typedOther.activiyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActivityName()).compareTo(typedOther.isSetActivityName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActivityName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activityName, typedOther.activityName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(typedOther.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, typedOther.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMoneyCost()).compareTo(typedOther.isSetMoneyCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMoneyCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.moneyCost, typedOther.moneyCost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItemPrize()).compareTo(typedOther.isSetItemPrize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemPrize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemPrize, typedOther.itemPrize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumberRemain()).compareTo(typedOther.isSetNumberRemain());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumberRemain()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numberRemain, typedOther.numberRemain);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumberMax()).compareTo(typedOther.isSetNumberMax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumberMax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numberMax, typedOther.numberMax);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ActiveKeyData(");
    boolean first = true;

    sb.append("activiyId:");
    sb.append(this.activiyId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("activityName:");
    if (this.activityName == null) {
      sb.append("null");
    } else {
      sb.append(this.activityName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      sb.append(this.content);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("moneyCost:");
    if (this.moneyCost == null) {
      sb.append("null");
    } else {
      sb.append(this.moneyCost);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("itemPrize:");
    if (this.itemPrize == null) {
      sb.append("null");
    } else {
      sb.append(this.itemPrize);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("numberRemain:");
    sb.append(this.numberRemain);
    first = false;
    if (!first) sb.append(", ");
    sb.append("numberMax:");
    sb.append(this.numberMax);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (moneyCost != null) {
      moneyCost.validate();
    }
    if (itemPrize != null) {
      itemPrize.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ActiveKeyDataStandardSchemeFactory implements SchemeFactory {
    public ActiveKeyDataStandardScheme getScheme() {
      return new ActiveKeyDataStandardScheme();
    }
  }

  private static class ActiveKeyDataStandardScheme extends StandardScheme<ActiveKeyData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ActiveKeyData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ACTIVIY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.activiyId = iprot.readI16();
              struct.setActiviyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ACTIVITY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.activityName = iprot.readString();
              struct.setActivityNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MONEY_COST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.moneyCost = new MoneyPrize();
              struct.moneyCost.read(iprot);
              struct.setMoneyCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ITEM_PRIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.itemPrize = new ItemPrize();
              struct.itemPrize.read(iprot);
              struct.setItemPrizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NUMBER_REMAIN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numberRemain = iprot.readI32();
              struct.setNumberRemainIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // NUMBER_MAX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numberMax = iprot.readI32();
              struct.setNumberMaxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ActiveKeyData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ACTIVIY_ID_FIELD_DESC);
      oprot.writeI16(struct.activiyId);
      oprot.writeFieldEnd();
      if (struct.activityName != null) {
        oprot.writeFieldBegin(ACTIVITY_NAME_FIELD_DESC);
        oprot.writeString(struct.activityName);
        oprot.writeFieldEnd();
      }
      if (struct.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeString(struct.content);
        oprot.writeFieldEnd();
      }
      if (struct.moneyCost != null) {
        oprot.writeFieldBegin(MONEY_COST_FIELD_DESC);
        struct.moneyCost.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.itemPrize != null) {
        oprot.writeFieldBegin(ITEM_PRIZE_FIELD_DESC);
        struct.itemPrize.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NUMBER_REMAIN_FIELD_DESC);
      oprot.writeI32(struct.numberRemain);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUMBER_MAX_FIELD_DESC);
      oprot.writeI32(struct.numberMax);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ActiveKeyDataTupleSchemeFactory implements SchemeFactory {
    public ActiveKeyDataTupleScheme getScheme() {
      return new ActiveKeyDataTupleScheme();
    }
  }

  private static class ActiveKeyDataTupleScheme extends TupleScheme<ActiveKeyData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ActiveKeyData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetActiviyId()) {
        optionals.set(0);
      }
      if (struct.isSetActivityName()) {
        optionals.set(1);
      }
      if (struct.isSetContent()) {
        optionals.set(2);
      }
      if (struct.isSetMoneyCost()) {
        optionals.set(3);
      }
      if (struct.isSetItemPrize()) {
        optionals.set(4);
      }
      if (struct.isSetNumberRemain()) {
        optionals.set(5);
      }
      if (struct.isSetNumberMax()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetActiviyId()) {
        oprot.writeI16(struct.activiyId);
      }
      if (struct.isSetActivityName()) {
        oprot.writeString(struct.activityName);
      }
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
      if (struct.isSetMoneyCost()) {
        struct.moneyCost.write(oprot);
      }
      if (struct.isSetItemPrize()) {
        struct.itemPrize.write(oprot);
      }
      if (struct.isSetNumberRemain()) {
        oprot.writeI32(struct.numberRemain);
      }
      if (struct.isSetNumberMax()) {
        oprot.writeI32(struct.numberMax);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ActiveKeyData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.activiyId = iprot.readI16();
        struct.setActiviyIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.activityName = iprot.readString();
        struct.setActivityNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
      if (incoming.get(3)) {
        struct.moneyCost = new MoneyPrize();
        struct.moneyCost.read(iprot);
        struct.setMoneyCostIsSet(true);
      }
      if (incoming.get(4)) {
        struct.itemPrize = new ItemPrize();
        struct.itemPrize.read(iprot);
        struct.setItemPrizeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.numberRemain = iprot.readI32();
        struct.setNumberRemainIsSet(true);
      }
      if (incoming.get(6)) {
        struct.numberMax = iprot.readI32();
        struct.setNumberMaxIsSet(true);
      }
    }
  }

}

