/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class LimitSaleActivity implements org.apache.thrift.TBase<LimitSaleActivity, LimitSaleActivity._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LimitSaleActivity");

  private static final org.apache.thrift.protocol.TField SORT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sortId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ACTIVITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("activityId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField LIMIT_VIP_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("limitVipLevel", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField LIMIT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("limitTime", org.apache.thrift.protocol.TType.LIST, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LimitSaleActivityStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LimitSaleActivityTupleSchemeFactory());
  }

  public int sortId; // required
  public int activityId; // required
  public String name; // required
  public String description; // required
  public int limitVipLevel; // required
  public List<LimitSaleTime> limitTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SORT_ID((short)1, "sortId"),
    ACTIVITY_ID((short)2, "activityId"),
    NAME((short)3, "name"),
    DESCRIPTION((short)4, "description"),
    LIMIT_VIP_LEVEL((short)5, "limitVipLevel"),
    LIMIT_TIME((short)6, "limitTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SORT_ID
          return SORT_ID;
        case 2: // ACTIVITY_ID
          return ACTIVITY_ID;
        case 3: // NAME
          return NAME;
        case 4: // DESCRIPTION
          return DESCRIPTION;
        case 5: // LIMIT_VIP_LEVEL
          return LIMIT_VIP_LEVEL;
        case 6: // LIMIT_TIME
          return LIMIT_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SORTID_ISSET_ID = 0;
  private static final int __ACTIVITYID_ISSET_ID = 1;
  private static final int __LIMITVIPLEVEL_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SORT_ID, new org.apache.thrift.meta_data.FieldMetaData("sortId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACTIVITY_ID, new org.apache.thrift.meta_data.FieldMetaData("activityId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LIMIT_VIP_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("limitVipLevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LIMIT_TIME, new org.apache.thrift.meta_data.FieldMetaData("limitTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LimitSaleTime.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LimitSaleActivity.class, metaDataMap);
  }

  public LimitSaleActivity() {
  }

  public LimitSaleActivity(
    int sortId,
    int activityId,
    String name,
    String description,
    int limitVipLevel,
    List<LimitSaleTime> limitTime)
  {
    this();
    this.sortId = sortId;
    setSortIdIsSet(true);
    this.activityId = activityId;
    setActivityIdIsSet(true);
    this.name = name;
    this.description = description;
    this.limitVipLevel = limitVipLevel;
    setLimitVipLevelIsSet(true);
    this.limitTime = limitTime;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LimitSaleActivity(LimitSaleActivity other) {
    __isset_bitfield = other.__isset_bitfield;
    this.sortId = other.sortId;
    this.activityId = other.activityId;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    this.limitVipLevel = other.limitVipLevel;
    if (other.isSetLimitTime()) {
      List<LimitSaleTime> __this__limitTime = new ArrayList<LimitSaleTime>();
      for (LimitSaleTime other_element : other.limitTime) {
        __this__limitTime.add(new LimitSaleTime(other_element));
      }
      this.limitTime = __this__limitTime;
    }
  }

  public LimitSaleActivity deepCopy() {
    return new LimitSaleActivity(this);
  }

  @Override
  public void clear() {
    setSortIdIsSet(false);
    this.sortId = 0;
    setActivityIdIsSet(false);
    this.activityId = 0;
    this.name = null;
    this.description = null;
    setLimitVipLevelIsSet(false);
    this.limitVipLevel = 0;
    this.limitTime = null;
  }

  public int getSortId() {
    return this.sortId;
  }

  public LimitSaleActivity setSortId(int sortId) {
    this.sortId = sortId;
    setSortIdIsSet(true);
    return this;
  }

  public void unsetSortId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SORTID_ISSET_ID);
  }

  /** Returns true if field sortId is set (has been assigned a value) and false otherwise */
  public boolean isSetSortId() {
    return EncodingUtils.testBit(__isset_bitfield, __SORTID_ISSET_ID);
  }

  public void setSortIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SORTID_ISSET_ID, value);
  }

  public int getActivityId() {
    return this.activityId;
  }

  public LimitSaleActivity setActivityId(int activityId) {
    this.activityId = activityId;
    setActivityIdIsSet(true);
    return this;
  }

  public void unsetActivityId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIVITYID_ISSET_ID);
  }

  /** Returns true if field activityId is set (has been assigned a value) and false otherwise */
  public boolean isSetActivityId() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTIVITYID_ISSET_ID);
  }

  public void setActivityIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIVITYID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public LimitSaleActivity setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getDescription() {
    return this.description;
  }

  public LimitSaleActivity setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public int getLimitVipLevel() {
    return this.limitVipLevel;
  }

  public LimitSaleActivity setLimitVipLevel(int limitVipLevel) {
    this.limitVipLevel = limitVipLevel;
    setLimitVipLevelIsSet(true);
    return this;
  }

  public void unsetLimitVipLevel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMITVIPLEVEL_ISSET_ID);
  }

  /** Returns true if field limitVipLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetLimitVipLevel() {
    return EncodingUtils.testBit(__isset_bitfield, __LIMITVIPLEVEL_ISSET_ID);
  }

  public void setLimitVipLevelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMITVIPLEVEL_ISSET_ID, value);
  }

  public int getLimitTimeSize() {
    return (this.limitTime == null) ? 0 : this.limitTime.size();
  }

  public java.util.Iterator<LimitSaleTime> getLimitTimeIterator() {
    return (this.limitTime == null) ? null : this.limitTime.iterator();
  }

  public void addToLimitTime(LimitSaleTime elem) {
    if (this.limitTime == null) {
      this.limitTime = new ArrayList<LimitSaleTime>();
    }
    this.limitTime.add(elem);
  }

  public List<LimitSaleTime> getLimitTime() {
    return this.limitTime;
  }

  public LimitSaleActivity setLimitTime(List<LimitSaleTime> limitTime) {
    this.limitTime = limitTime;
    return this;
  }

  public void unsetLimitTime() {
    this.limitTime = null;
  }

  /** Returns true if field limitTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLimitTime() {
    return this.limitTime != null;
  }

  public void setLimitTimeIsSet(boolean value) {
    if (!value) {
      this.limitTime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SORT_ID:
      if (value == null) {
        unsetSortId();
      } else {
        setSortId((Integer)value);
      }
      break;

    case ACTIVITY_ID:
      if (value == null) {
        unsetActivityId();
      } else {
        setActivityId((Integer)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case LIMIT_VIP_LEVEL:
      if (value == null) {
        unsetLimitVipLevel();
      } else {
        setLimitVipLevel((Integer)value);
      }
      break;

    case LIMIT_TIME:
      if (value == null) {
        unsetLimitTime();
      } else {
        setLimitTime((List<LimitSaleTime>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SORT_ID:
      return Integer.valueOf(getSortId());

    case ACTIVITY_ID:
      return Integer.valueOf(getActivityId());

    case NAME:
      return getName();

    case DESCRIPTION:
      return getDescription();

    case LIMIT_VIP_LEVEL:
      return Integer.valueOf(getLimitVipLevel());

    case LIMIT_TIME:
      return getLimitTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SORT_ID:
      return isSetSortId();
    case ACTIVITY_ID:
      return isSetActivityId();
    case NAME:
      return isSetName();
    case DESCRIPTION:
      return isSetDescription();
    case LIMIT_VIP_LEVEL:
      return isSetLimitVipLevel();
    case LIMIT_TIME:
      return isSetLimitTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LimitSaleActivity)
      return this.equals((LimitSaleActivity)that);
    return false;
  }

  public boolean equals(LimitSaleActivity that) {
    if (that == null)
      return false;

    boolean this_present_sortId = true;
    boolean that_present_sortId = true;
    if (this_present_sortId || that_present_sortId) {
      if (!(this_present_sortId && that_present_sortId))
        return false;
      if (this.sortId != that.sortId)
        return false;
    }

    boolean this_present_activityId = true;
    boolean that_present_activityId = true;
    if (this_present_activityId || that_present_activityId) {
      if (!(this_present_activityId && that_present_activityId))
        return false;
      if (this.activityId != that.activityId)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_limitVipLevel = true;
    boolean that_present_limitVipLevel = true;
    if (this_present_limitVipLevel || that_present_limitVipLevel) {
      if (!(this_present_limitVipLevel && that_present_limitVipLevel))
        return false;
      if (this.limitVipLevel != that.limitVipLevel)
        return false;
    }

    boolean this_present_limitTime = true && this.isSetLimitTime();
    boolean that_present_limitTime = true && that.isSetLimitTime();
    if (this_present_limitTime || that_present_limitTime) {
      if (!(this_present_limitTime && that_present_limitTime))
        return false;
      if (!this.limitTime.equals(that.limitTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(LimitSaleActivity other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    LimitSaleActivity typedOther = (LimitSaleActivity)other;

    lastComparison = Boolean.valueOf(isSetSortId()).compareTo(typedOther.isSetSortId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSortId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortId, typedOther.sortId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActivityId()).compareTo(typedOther.isSetActivityId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActivityId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activityId, typedOther.activityId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(typedOther.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, typedOther.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLimitVipLevel()).compareTo(typedOther.isSetLimitVipLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimitVipLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limitVipLevel, typedOther.limitVipLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLimitTime()).compareTo(typedOther.isSetLimitTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimitTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limitTime, typedOther.limitTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LimitSaleActivity(");
    boolean first = true;

    sb.append("sortId:");
    sb.append(this.sortId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("activityId:");
    sb.append(this.activityId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("description:");
    if (this.description == null) {
      sb.append("null");
    } else {
      sb.append(this.description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("limitVipLevel:");
    sb.append(this.limitVipLevel);
    first = false;
    if (!first) sb.append(", ");
    sb.append("limitTime:");
    if (this.limitTime == null) {
      sb.append("null");
    } else {
      sb.append(this.limitTime);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LimitSaleActivityStandardSchemeFactory implements SchemeFactory {
    public LimitSaleActivityStandardScheme getScheme() {
      return new LimitSaleActivityStandardScheme();
    }
  }

  private static class LimitSaleActivityStandardScheme extends StandardScheme<LimitSaleActivity> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LimitSaleActivity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SORT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sortId = iprot.readI32();
              struct.setSortIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ACTIVITY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.activityId = iprot.readI32();
              struct.setActivityIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LIMIT_VIP_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.limitVipLevel = iprot.readI32();
              struct.setLimitVipLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LIMIT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list588 = iprot.readListBegin();
                struct.limitTime = new ArrayList<LimitSaleTime>(_list588.size);
                for (int _i589 = 0; _i589 < _list588.size; ++_i589)
                {
                  LimitSaleTime _elem590; // required
                  _elem590 = new LimitSaleTime();
                  _elem590.read(iprot);
                  struct.limitTime.add(_elem590);
                }
                iprot.readListEnd();
              }
              struct.setLimitTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LimitSaleActivity struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SORT_ID_FIELD_DESC);
      oprot.writeI32(struct.sortId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACTIVITY_ID_FIELD_DESC);
      oprot.writeI32(struct.activityId);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.description);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LIMIT_VIP_LEVEL_FIELD_DESC);
      oprot.writeI32(struct.limitVipLevel);
      oprot.writeFieldEnd();
      if (struct.limitTime != null) {
        oprot.writeFieldBegin(LIMIT_TIME_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.limitTime.size()));
          for (LimitSaleTime _iter591 : struct.limitTime)
          {
            _iter591.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LimitSaleActivityTupleSchemeFactory implements SchemeFactory {
    public LimitSaleActivityTupleScheme getScheme() {
      return new LimitSaleActivityTupleScheme();
    }
  }

  private static class LimitSaleActivityTupleScheme extends TupleScheme<LimitSaleActivity> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LimitSaleActivity struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSortId()) {
        optionals.set(0);
      }
      if (struct.isSetActivityId()) {
        optionals.set(1);
      }
      if (struct.isSetName()) {
        optionals.set(2);
      }
      if (struct.isSetDescription()) {
        optionals.set(3);
      }
      if (struct.isSetLimitVipLevel()) {
        optionals.set(4);
      }
      if (struct.isSetLimitTime()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetSortId()) {
        oprot.writeI32(struct.sortId);
      }
      if (struct.isSetActivityId()) {
        oprot.writeI32(struct.activityId);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetLimitVipLevel()) {
        oprot.writeI32(struct.limitVipLevel);
      }
      if (struct.isSetLimitTime()) {
        {
          oprot.writeI32(struct.limitTime.size());
          for (LimitSaleTime _iter592 : struct.limitTime)
          {
            _iter592.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LimitSaleActivity struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.sortId = iprot.readI32();
        struct.setSortIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.activityId = iprot.readI32();
        struct.setActivityIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(4)) {
        struct.limitVipLevel = iprot.readI32();
        struct.setLimitVipLevelIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list593 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.limitTime = new ArrayList<LimitSaleTime>(_list593.size);
          for (int _i594 = 0; _i594 < _list593.size; ++_i594)
          {
            LimitSaleTime _elem595; // required
            _elem595 = new LimitSaleTime();
            _elem595.read(iprot);
            struct.limitTime.add(_elem595);
          }
        }
        struct.setLimitTimeIsSet(true);
      }
    }
  }

}

