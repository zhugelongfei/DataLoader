/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.cs;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CSCheckRechargeResultMsg implements org.apache.thrift.TBase<CSCheckRechargeResultMsg, CSCheckRechargeResultMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CSCheckRechargeResultMsg");

  private static final org.apache.thrift.protocol.TField SN_FIELD_DESC = new org.apache.thrift.protocol.TField("sn", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField GOODS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("goodsId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PAY_CHANNEL_FIELD_DESC = new org.apache.thrift.protocol.TField("payChannel", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField EXTRA_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("extraParam", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CSCheckRechargeResultMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CSCheckRechargeResultMsgTupleSchemeFactory());
  }

  /**
   * cp订单号，也即游戏订单号
   */
  public String sn; // required
  /**
   * 玩家购买游戏商品id
   */
  public int goodsId; // required
  /**
   * 支付渠道
   */
  public String payChannel; // required
  /**
   * 额外参数
   */
  public String extraParam; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * cp订单号，也即游戏订单号
     */
    SN((short)1, "sn"),
    /**
     * 玩家购买游戏商品id
     */
    GOODS_ID((short)2, "goodsId"),
    /**
     * 支付渠道
     */
    PAY_CHANNEL((short)3, "payChannel"),
    /**
     * 额外参数
     */
    EXTRA_PARAM((short)4, "extraParam");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SN
          return SN;
        case 2: // GOODS_ID
          return GOODS_ID;
        case 3: // PAY_CHANNEL
          return PAY_CHANNEL;
        case 4: // EXTRA_PARAM
          return EXTRA_PARAM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __GOODSID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SN, new org.apache.thrift.meta_data.FieldMetaData("sn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GOODS_ID, new org.apache.thrift.meta_data.FieldMetaData("goodsId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAY_CHANNEL, new org.apache.thrift.meta_data.FieldMetaData("payChannel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXTRA_PARAM, new org.apache.thrift.meta_data.FieldMetaData("extraParam", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CSCheckRechargeResultMsg.class, metaDataMap);
  }

  public CSCheckRechargeResultMsg() {
  }

  public CSCheckRechargeResultMsg(
    String sn,
    int goodsId,
    String payChannel,
    String extraParam)
  {
    this();
    this.sn = sn;
    this.goodsId = goodsId;
    setGoodsIdIsSet(true);
    this.payChannel = payChannel;
    this.extraParam = extraParam;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CSCheckRechargeResultMsg(CSCheckRechargeResultMsg other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSn()) {
      this.sn = other.sn;
    }
    this.goodsId = other.goodsId;
    if (other.isSetPayChannel()) {
      this.payChannel = other.payChannel;
    }
    if (other.isSetExtraParam()) {
      this.extraParam = other.extraParam;
    }
  }

  public CSCheckRechargeResultMsg deepCopy() {
    return new CSCheckRechargeResultMsg(this);
  }

  @Override
  public void clear() {
    this.sn = null;
    setGoodsIdIsSet(false);
    this.goodsId = 0;
    this.payChannel = null;
    this.extraParam = null;
  }

  /**
   * cp订单号，也即游戏订单号
   */
  public String getSn() {
    return this.sn;
  }

  /**
   * cp订单号，也即游戏订单号
   */
  public CSCheckRechargeResultMsg setSn(String sn) {
    this.sn = sn;
    return this;
  }

  public void unsetSn() {
    this.sn = null;
  }

  /** Returns true if field sn is set (has been assigned a value) and false otherwise */
  public boolean isSetSn() {
    return this.sn != null;
  }

  public void setSnIsSet(boolean value) {
    if (!value) {
      this.sn = null;
    }
  }

  /**
   * 玩家购买游戏商品id
   */
  public int getGoodsId() {
    return this.goodsId;
  }

  /**
   * 玩家购买游戏商品id
   */
  public CSCheckRechargeResultMsg setGoodsId(int goodsId) {
    this.goodsId = goodsId;
    setGoodsIdIsSet(true);
    return this;
  }

  public void unsetGoodsId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GOODSID_ISSET_ID);
  }

  /** Returns true if field goodsId is set (has been assigned a value) and false otherwise */
  public boolean isSetGoodsId() {
    return EncodingUtils.testBit(__isset_bitfield, __GOODSID_ISSET_ID);
  }

  public void setGoodsIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GOODSID_ISSET_ID, value);
  }

  /**
   * 支付渠道
   */
  public String getPayChannel() {
    return this.payChannel;
  }

  /**
   * 支付渠道
   */
  public CSCheckRechargeResultMsg setPayChannel(String payChannel) {
    this.payChannel = payChannel;
    return this;
  }

  public void unsetPayChannel() {
    this.payChannel = null;
  }

  /** Returns true if field payChannel is set (has been assigned a value) and false otherwise */
  public boolean isSetPayChannel() {
    return this.payChannel != null;
  }

  public void setPayChannelIsSet(boolean value) {
    if (!value) {
      this.payChannel = null;
    }
  }

  /**
   * 额外参数
   */
  public String getExtraParam() {
    return this.extraParam;
  }

  /**
   * 额外参数
   */
  public CSCheckRechargeResultMsg setExtraParam(String extraParam) {
    this.extraParam = extraParam;
    return this;
  }

  public void unsetExtraParam() {
    this.extraParam = null;
  }

  /** Returns true if field extraParam is set (has been assigned a value) and false otherwise */
  public boolean isSetExtraParam() {
    return this.extraParam != null;
  }

  public void setExtraParamIsSet(boolean value) {
    if (!value) {
      this.extraParam = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SN:
      if (value == null) {
        unsetSn();
      } else {
        setSn((String)value);
      }
      break;

    case GOODS_ID:
      if (value == null) {
        unsetGoodsId();
      } else {
        setGoodsId((Integer)value);
      }
      break;

    case PAY_CHANNEL:
      if (value == null) {
        unsetPayChannel();
      } else {
        setPayChannel((String)value);
      }
      break;

    case EXTRA_PARAM:
      if (value == null) {
        unsetExtraParam();
      } else {
        setExtraParam((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SN:
      return getSn();

    case GOODS_ID:
      return Integer.valueOf(getGoodsId());

    case PAY_CHANNEL:
      return getPayChannel();

    case EXTRA_PARAM:
      return getExtraParam();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SN:
      return isSetSn();
    case GOODS_ID:
      return isSetGoodsId();
    case PAY_CHANNEL:
      return isSetPayChannel();
    case EXTRA_PARAM:
      return isSetExtraParam();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CSCheckRechargeResultMsg)
      return this.equals((CSCheckRechargeResultMsg)that);
    return false;
  }

  public boolean equals(CSCheckRechargeResultMsg that) {
    if (that == null)
      return false;

    boolean this_present_sn = true && this.isSetSn();
    boolean that_present_sn = true && that.isSetSn();
    if (this_present_sn || that_present_sn) {
      if (!(this_present_sn && that_present_sn))
        return false;
      if (!this.sn.equals(that.sn))
        return false;
    }

    boolean this_present_goodsId = true;
    boolean that_present_goodsId = true;
    if (this_present_goodsId || that_present_goodsId) {
      if (!(this_present_goodsId && that_present_goodsId))
        return false;
      if (this.goodsId != that.goodsId)
        return false;
    }

    boolean this_present_payChannel = true && this.isSetPayChannel();
    boolean that_present_payChannel = true && that.isSetPayChannel();
    if (this_present_payChannel || that_present_payChannel) {
      if (!(this_present_payChannel && that_present_payChannel))
        return false;
      if (!this.payChannel.equals(that.payChannel))
        return false;
    }

    boolean this_present_extraParam = true && this.isSetExtraParam();
    boolean that_present_extraParam = true && that.isSetExtraParam();
    if (this_present_extraParam || that_present_extraParam) {
      if (!(this_present_extraParam && that_present_extraParam))
        return false;
      if (!this.extraParam.equals(that.extraParam))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(CSCheckRechargeResultMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CSCheckRechargeResultMsg typedOther = (CSCheckRechargeResultMsg)other;

    lastComparison = Boolean.valueOf(isSetSn()).compareTo(typedOther.isSetSn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sn, typedOther.sn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGoodsId()).compareTo(typedOther.isSetGoodsId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGoodsId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.goodsId, typedOther.goodsId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayChannel()).compareTo(typedOther.isSetPayChannel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayChannel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payChannel, typedOther.payChannel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtraParam()).compareTo(typedOther.isSetExtraParam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtraParam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extraParam, typedOther.extraParam);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CSCheckRechargeResultMsg(");
    boolean first = true;

    sb.append("sn:");
    if (this.sn == null) {
      sb.append("null");
    } else {
      sb.append(this.sn);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("goodsId:");
    sb.append(this.goodsId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("payChannel:");
    if (this.payChannel == null) {
      sb.append("null");
    } else {
      sb.append(this.payChannel);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("extraParam:");
    if (this.extraParam == null) {
      sb.append("null");
    } else {
      sb.append(this.extraParam);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CSCheckRechargeResultMsgStandardSchemeFactory implements SchemeFactory {
    public CSCheckRechargeResultMsgStandardScheme getScheme() {
      return new CSCheckRechargeResultMsgStandardScheme();
    }
  }

  private static class CSCheckRechargeResultMsgStandardScheme extends StandardScheme<CSCheckRechargeResultMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CSCheckRechargeResultMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sn = iprot.readString();
              struct.setSnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GOODS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.goodsId = iprot.readI32();
              struct.setGoodsIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PAY_CHANNEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.payChannel = iprot.readString();
              struct.setPayChannelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EXTRA_PARAM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.extraParam = iprot.readString();
              struct.setExtraParamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CSCheckRechargeResultMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.sn != null) {
        oprot.writeFieldBegin(SN_FIELD_DESC);
        oprot.writeString(struct.sn);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(GOODS_ID_FIELD_DESC);
      oprot.writeI32(struct.goodsId);
      oprot.writeFieldEnd();
      if (struct.payChannel != null) {
        oprot.writeFieldBegin(PAY_CHANNEL_FIELD_DESC);
        oprot.writeString(struct.payChannel);
        oprot.writeFieldEnd();
      }
      if (struct.extraParam != null) {
        oprot.writeFieldBegin(EXTRA_PARAM_FIELD_DESC);
        oprot.writeString(struct.extraParam);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CSCheckRechargeResultMsgTupleSchemeFactory implements SchemeFactory {
    public CSCheckRechargeResultMsgTupleScheme getScheme() {
      return new CSCheckRechargeResultMsgTupleScheme();
    }
  }

  private static class CSCheckRechargeResultMsgTupleScheme extends TupleScheme<CSCheckRechargeResultMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CSCheckRechargeResultMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSn()) {
        optionals.set(0);
      }
      if (struct.isSetGoodsId()) {
        optionals.set(1);
      }
      if (struct.isSetPayChannel()) {
        optionals.set(2);
      }
      if (struct.isSetExtraParam()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetSn()) {
        oprot.writeString(struct.sn);
      }
      if (struct.isSetGoodsId()) {
        oprot.writeI32(struct.goodsId);
      }
      if (struct.isSetPayChannel()) {
        oprot.writeString(struct.payChannel);
      }
      if (struct.isSetExtraParam()) {
        oprot.writeString(struct.extraParam);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CSCheckRechargeResultMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.sn = iprot.readString();
        struct.setSnIsSet(true);
      }
      if (incoming.get(1)) {
        struct.goodsId = iprot.readI32();
        struct.setGoodsIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.payChannel = iprot.readString();
        struct.setPayChannelIsSet(true);
      }
      if (incoming.get(3)) {
        struct.extraParam = iprot.readString();
        struct.setExtraParamIsSet(true);
      }
    }
  }

}

