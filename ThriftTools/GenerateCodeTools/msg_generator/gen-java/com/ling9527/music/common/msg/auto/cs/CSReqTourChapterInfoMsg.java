/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.cs;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 请求巡演章节信息
 */
public class CSReqTourChapterInfoMsg implements org.apache.thrift.TBase<CSReqTourChapterInfoMsg, CSReqTourChapterInfoMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CSReqTourChapterInfoMsg");

  private static final org.apache.thrift.protocol.TField CHAPTER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("chapterIds", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField CUR_CHAPTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("curChapterId", org.apache.thrift.protocol.TType.I16, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CSReqTourChapterInfoMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CSReqTourChapterInfoMsgTupleSchemeFactory());
  }

  /**
   * 章节id
   */
  public List<Short> chapterIds; // required
  /**
   * 当前章节id
   */
  public short curChapterId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 章节id
     */
    CHAPTER_IDS((short)1, "chapterIds"),
    /**
     * 当前章节id
     */
    CUR_CHAPTER_ID((short)2, "curChapterId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CHAPTER_IDS
          return CHAPTER_IDS;
        case 2: // CUR_CHAPTER_ID
          return CUR_CHAPTER_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CURCHAPTERID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CHAPTER_IDS, new org.apache.thrift.meta_data.FieldMetaData("chapterIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16))));
    tmpMap.put(_Fields.CUR_CHAPTER_ID, new org.apache.thrift.meta_data.FieldMetaData("curChapterId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CSReqTourChapterInfoMsg.class, metaDataMap);
  }

  public CSReqTourChapterInfoMsg() {
  }

  public CSReqTourChapterInfoMsg(
    List<Short> chapterIds,
    short curChapterId)
  {
    this();
    this.chapterIds = chapterIds;
    this.curChapterId = curChapterId;
    setCurChapterIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CSReqTourChapterInfoMsg(CSReqTourChapterInfoMsg other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetChapterIds()) {
      List<Short> __this__chapterIds = new ArrayList<Short>();
      for (Short other_element : other.chapterIds) {
        __this__chapterIds.add(other_element);
      }
      this.chapterIds = __this__chapterIds;
    }
    this.curChapterId = other.curChapterId;
  }

  public CSReqTourChapterInfoMsg deepCopy() {
    return new CSReqTourChapterInfoMsg(this);
  }

  @Override
  public void clear() {
    this.chapterIds = null;
    setCurChapterIdIsSet(false);
    this.curChapterId = 0;
  }

  public int getChapterIdsSize() {
    return (this.chapterIds == null) ? 0 : this.chapterIds.size();
  }

  public java.util.Iterator<Short> getChapterIdsIterator() {
    return (this.chapterIds == null) ? null : this.chapterIds.iterator();
  }

  public void addToChapterIds(short elem) {
    if (this.chapterIds == null) {
      this.chapterIds = new ArrayList<Short>();
    }
    this.chapterIds.add(elem);
  }

  /**
   * 章节id
   */
  public List<Short> getChapterIds() {
    return this.chapterIds;
  }

  /**
   * 章节id
   */
  public CSReqTourChapterInfoMsg setChapterIds(List<Short> chapterIds) {
    this.chapterIds = chapterIds;
    return this;
  }

  public void unsetChapterIds() {
    this.chapterIds = null;
  }

  /** Returns true if field chapterIds is set (has been assigned a value) and false otherwise */
  public boolean isSetChapterIds() {
    return this.chapterIds != null;
  }

  public void setChapterIdsIsSet(boolean value) {
    if (!value) {
      this.chapterIds = null;
    }
  }

  /**
   * 当前章节id
   */
  public short getCurChapterId() {
    return this.curChapterId;
  }

  /**
   * 当前章节id
   */
  public CSReqTourChapterInfoMsg setCurChapterId(short curChapterId) {
    this.curChapterId = curChapterId;
    setCurChapterIdIsSet(true);
    return this;
  }

  public void unsetCurChapterId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURCHAPTERID_ISSET_ID);
  }

  /** Returns true if field curChapterId is set (has been assigned a value) and false otherwise */
  public boolean isSetCurChapterId() {
    return EncodingUtils.testBit(__isset_bitfield, __CURCHAPTERID_ISSET_ID);
  }

  public void setCurChapterIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURCHAPTERID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CHAPTER_IDS:
      if (value == null) {
        unsetChapterIds();
      } else {
        setChapterIds((List<Short>)value);
      }
      break;

    case CUR_CHAPTER_ID:
      if (value == null) {
        unsetCurChapterId();
      } else {
        setCurChapterId((Short)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CHAPTER_IDS:
      return getChapterIds();

    case CUR_CHAPTER_ID:
      return Short.valueOf(getCurChapterId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CHAPTER_IDS:
      return isSetChapterIds();
    case CUR_CHAPTER_ID:
      return isSetCurChapterId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CSReqTourChapterInfoMsg)
      return this.equals((CSReqTourChapterInfoMsg)that);
    return false;
  }

  public boolean equals(CSReqTourChapterInfoMsg that) {
    if (that == null)
      return false;

    boolean this_present_chapterIds = true && this.isSetChapterIds();
    boolean that_present_chapterIds = true && that.isSetChapterIds();
    if (this_present_chapterIds || that_present_chapterIds) {
      if (!(this_present_chapterIds && that_present_chapterIds))
        return false;
      if (!this.chapterIds.equals(that.chapterIds))
        return false;
    }

    boolean this_present_curChapterId = true;
    boolean that_present_curChapterId = true;
    if (this_present_curChapterId || that_present_curChapterId) {
      if (!(this_present_curChapterId && that_present_curChapterId))
        return false;
      if (this.curChapterId != that.curChapterId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(CSReqTourChapterInfoMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CSReqTourChapterInfoMsg typedOther = (CSReqTourChapterInfoMsg)other;

    lastComparison = Boolean.valueOf(isSetChapterIds()).compareTo(typedOther.isSetChapterIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChapterIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chapterIds, typedOther.chapterIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurChapterId()).compareTo(typedOther.isSetCurChapterId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurChapterId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.curChapterId, typedOther.curChapterId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CSReqTourChapterInfoMsg(");
    boolean first = true;

    sb.append("chapterIds:");
    if (this.chapterIds == null) {
      sb.append("null");
    } else {
      sb.append(this.chapterIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("curChapterId:");
    sb.append(this.curChapterId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CSReqTourChapterInfoMsgStandardSchemeFactory implements SchemeFactory {
    public CSReqTourChapterInfoMsgStandardScheme getScheme() {
      return new CSReqTourChapterInfoMsgStandardScheme();
    }
  }

  private static class CSReqTourChapterInfoMsgStandardScheme extends StandardScheme<CSReqTourChapterInfoMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CSReqTourChapterInfoMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CHAPTER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.chapterIds = new ArrayList<Short>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  short _elem2; // required
                  _elem2 = iprot.readI16();
                  struct.chapterIds.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setChapterIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CUR_CHAPTER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.curChapterId = iprot.readI16();
              struct.setCurChapterIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CSReqTourChapterInfoMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.chapterIds != null) {
        oprot.writeFieldBegin(CHAPTER_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, struct.chapterIds.size()));
          for (short _iter3 : struct.chapterIds)
          {
            oprot.writeI16(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CUR_CHAPTER_ID_FIELD_DESC);
      oprot.writeI16(struct.curChapterId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CSReqTourChapterInfoMsgTupleSchemeFactory implements SchemeFactory {
    public CSReqTourChapterInfoMsgTupleScheme getScheme() {
      return new CSReqTourChapterInfoMsgTupleScheme();
    }
  }

  private static class CSReqTourChapterInfoMsgTupleScheme extends TupleScheme<CSReqTourChapterInfoMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CSReqTourChapterInfoMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetChapterIds()) {
        optionals.set(0);
      }
      if (struct.isSetCurChapterId()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetChapterIds()) {
        {
          oprot.writeI32(struct.chapterIds.size());
          for (short _iter4 : struct.chapterIds)
          {
            oprot.writeI16(_iter4);
          }
        }
      }
      if (struct.isSetCurChapterId()) {
        oprot.writeI16(struct.curChapterId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CSReqTourChapterInfoMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, iprot.readI32());
          struct.chapterIds = new ArrayList<Short>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            short _elem7; // required
            _elem7 = iprot.readI16();
            struct.chapterIds.add(_elem7);
          }
        }
        struct.setChapterIdsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.curChapterId = iprot.readI16();
        struct.setCurChapterIdIsSet(true);
      }
    }
  }

}

