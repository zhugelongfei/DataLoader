/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TeamInfo implements org.apache.thrift.TBase<TeamInfo, TeamInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TeamInfo");

  private static final org.apache.thrift.protocol.TField TEAM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("teamId", org.apache.thrift.protocol.TType.BYTE, (short)1);
  private static final org.apache.thrift.protocol.TField CHAR_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("charIds", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TeamInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TeamInfoTupleSchemeFactory());
  }

  public byte teamId; // required
  public List<Long> charIds; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TEAM_ID((short)1, "teamId"),
    CHAR_IDS((short)2, "charIds");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TEAM_ID
          return TEAM_ID;
        case 2: // CHAR_IDS
          return CHAR_IDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TEAMID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TEAM_ID, new org.apache.thrift.meta_data.FieldMetaData("teamId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.CHAR_IDS, new org.apache.thrift.meta_data.FieldMetaData("charIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TeamInfo.class, metaDataMap);
  }

  public TeamInfo() {
  }

  public TeamInfo(
    byte teamId,
    List<Long> charIds)
  {
    this();
    this.teamId = teamId;
    setTeamIdIsSet(true);
    this.charIds = charIds;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TeamInfo(TeamInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.teamId = other.teamId;
    if (other.isSetCharIds()) {
      List<Long> __this__charIds = new ArrayList<Long>();
      for (Long other_element : other.charIds) {
        __this__charIds.add(other_element);
      }
      this.charIds = __this__charIds;
    }
  }

  public TeamInfo deepCopy() {
    return new TeamInfo(this);
  }

  @Override
  public void clear() {
    setTeamIdIsSet(false);
    this.teamId = 0;
    this.charIds = null;
  }

  public byte getTeamId() {
    return this.teamId;
  }

  public TeamInfo setTeamId(byte teamId) {
    this.teamId = teamId;
    setTeamIdIsSet(true);
    return this;
  }

  public void unsetTeamId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TEAMID_ISSET_ID);
  }

  /** Returns true if field teamId is set (has been assigned a value) and false otherwise */
  public boolean isSetTeamId() {
    return EncodingUtils.testBit(__isset_bitfield, __TEAMID_ISSET_ID);
  }

  public void setTeamIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TEAMID_ISSET_ID, value);
  }

  public int getCharIdsSize() {
    return (this.charIds == null) ? 0 : this.charIds.size();
  }

  public java.util.Iterator<Long> getCharIdsIterator() {
    return (this.charIds == null) ? null : this.charIds.iterator();
  }

  public void addToCharIds(long elem) {
    if (this.charIds == null) {
      this.charIds = new ArrayList<Long>();
    }
    this.charIds.add(elem);
  }

  public List<Long> getCharIds() {
    return this.charIds;
  }

  public TeamInfo setCharIds(List<Long> charIds) {
    this.charIds = charIds;
    return this;
  }

  public void unsetCharIds() {
    this.charIds = null;
  }

  /** Returns true if field charIds is set (has been assigned a value) and false otherwise */
  public boolean isSetCharIds() {
    return this.charIds != null;
  }

  public void setCharIdsIsSet(boolean value) {
    if (!value) {
      this.charIds = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TEAM_ID:
      if (value == null) {
        unsetTeamId();
      } else {
        setTeamId((Byte)value);
      }
      break;

    case CHAR_IDS:
      if (value == null) {
        unsetCharIds();
      } else {
        setCharIds((List<Long>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TEAM_ID:
      return Byte.valueOf(getTeamId());

    case CHAR_IDS:
      return getCharIds();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TEAM_ID:
      return isSetTeamId();
    case CHAR_IDS:
      return isSetCharIds();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TeamInfo)
      return this.equals((TeamInfo)that);
    return false;
  }

  public boolean equals(TeamInfo that) {
    if (that == null)
      return false;

    boolean this_present_teamId = true;
    boolean that_present_teamId = true;
    if (this_present_teamId || that_present_teamId) {
      if (!(this_present_teamId && that_present_teamId))
        return false;
      if (this.teamId != that.teamId)
        return false;
    }

    boolean this_present_charIds = true && this.isSetCharIds();
    boolean that_present_charIds = true && that.isSetCharIds();
    if (this_present_charIds || that_present_charIds) {
      if (!(this_present_charIds && that_present_charIds))
        return false;
      if (!this.charIds.equals(that.charIds))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TeamInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TeamInfo typedOther = (TeamInfo)other;

    lastComparison = Boolean.valueOf(isSetTeamId()).compareTo(typedOther.isSetTeamId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeamId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teamId, typedOther.teamId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCharIds()).compareTo(typedOther.isSetCharIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCharIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.charIds, typedOther.charIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TeamInfo(");
    boolean first = true;

    sb.append("teamId:");
    sb.append(this.teamId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("charIds:");
    if (this.charIds == null) {
      sb.append("null");
    } else {
      sb.append(this.charIds);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TeamInfoStandardSchemeFactory implements SchemeFactory {
    public TeamInfoStandardScheme getScheme() {
      return new TeamInfoStandardScheme();
    }
  }

  private static class TeamInfoStandardScheme extends StandardScheme<TeamInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TeamInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TEAM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.teamId = iprot.readByte();
              struct.setTeamIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CHAR_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list514 = iprot.readListBegin();
                struct.charIds = new ArrayList<Long>(_list514.size);
                for (int _i515 = 0; _i515 < _list514.size; ++_i515)
                {
                  long _elem516; // required
                  _elem516 = iprot.readI64();
                  struct.charIds.add(_elem516);
                }
                iprot.readListEnd();
              }
              struct.setCharIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TeamInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TEAM_ID_FIELD_DESC);
      oprot.writeByte(struct.teamId);
      oprot.writeFieldEnd();
      if (struct.charIds != null) {
        oprot.writeFieldBegin(CHAR_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.charIds.size()));
          for (long _iter517 : struct.charIds)
          {
            oprot.writeI64(_iter517);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TeamInfoTupleSchemeFactory implements SchemeFactory {
    public TeamInfoTupleScheme getScheme() {
      return new TeamInfoTupleScheme();
    }
  }

  private static class TeamInfoTupleScheme extends TupleScheme<TeamInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TeamInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTeamId()) {
        optionals.set(0);
      }
      if (struct.isSetCharIds()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetTeamId()) {
        oprot.writeByte(struct.teamId);
      }
      if (struct.isSetCharIds()) {
        {
          oprot.writeI32(struct.charIds.size());
          for (long _iter518 : struct.charIds)
          {
            oprot.writeI64(_iter518);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TeamInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.teamId = iprot.readByte();
        struct.setTeamIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list519 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.charIds = new ArrayList<Long>(_list519.size);
          for (int _i520 = 0; _i520 < _list519.size; ++_i520)
          {
            long _elem521; // required
            _elem521 = iprot.readI64();
            struct.charIds.add(_elem521);
          }
        }
        struct.setCharIdsIsSet(true);
      }
    }
  }

}

