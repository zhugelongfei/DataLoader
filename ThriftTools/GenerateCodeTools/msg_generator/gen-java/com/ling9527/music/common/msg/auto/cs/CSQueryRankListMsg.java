/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.cs;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 查询排行榜信息
 */
public class CSQueryRankListMsg implements org.apache.thrift.TBase<CSQueryRankListMsg, CSQueryRankListMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CSQueryRankListMsg");

  private static final org.apache.thrift.protocol.TField RANK_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("rankType", org.apache.thrift.protocol.TType.I16, (short)1);
  private static final org.apache.thrift.protocol.TField START_RANK_FIELD_DESC = new org.apache.thrift.protocol.TField("startRank", org.apache.thrift.protocol.TType.I16, (short)2);
  private static final org.apache.thrift.protocol.TField END_RANK_FIELD_DESC = new org.apache.thrift.protocol.TField("endRank", org.apache.thrift.protocol.TType.I16, (short)3);
  private static final org.apache.thrift.protocol.TField MUISC_QUERY_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("muiscQueryParam", org.apache.thrift.protocol.TType.STRUCT, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CSQueryRankListMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CSQueryRankListMsgTupleSchemeFactory());
  }

  public short rankType; // required
  public short startRank; // required
  /**
   * limit 50
   */
  public short endRank; // required
  public com.ling9527.music.common.msg.auto.RankMusicQueryParam muiscQueryParam; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RANK_TYPE((short)1, "rankType"),
    START_RANK((short)2, "startRank"),
    /**
     * limit 50
     */
    END_RANK((short)3, "endRank"),
    MUISC_QUERY_PARAM((short)4, "muiscQueryParam");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RANK_TYPE
          return RANK_TYPE;
        case 2: // START_RANK
          return START_RANK;
        case 3: // END_RANK
          return END_RANK;
        case 4: // MUISC_QUERY_PARAM
          return MUISC_QUERY_PARAM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RANKTYPE_ISSET_ID = 0;
  private static final int __STARTRANK_ISSET_ID = 1;
  private static final int __ENDRANK_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.MUISC_QUERY_PARAM};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RANK_TYPE, new org.apache.thrift.meta_data.FieldMetaData("rankType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.START_RANK, new org.apache.thrift.meta_data.FieldMetaData("startRank", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.END_RANK, new org.apache.thrift.meta_data.FieldMetaData("endRank", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.MUISC_QUERY_PARAM, new org.apache.thrift.meta_data.FieldMetaData("muiscQueryParam", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.RankMusicQueryParam.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CSQueryRankListMsg.class, metaDataMap);
  }

  public CSQueryRankListMsg() {
  }

  public CSQueryRankListMsg(
    short rankType,
    short startRank,
    short endRank)
  {
    this();
    this.rankType = rankType;
    setRankTypeIsSet(true);
    this.startRank = startRank;
    setStartRankIsSet(true);
    this.endRank = endRank;
    setEndRankIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CSQueryRankListMsg(CSQueryRankListMsg other) {
    __isset_bitfield = other.__isset_bitfield;
    this.rankType = other.rankType;
    this.startRank = other.startRank;
    this.endRank = other.endRank;
    if (other.isSetMuiscQueryParam()) {
      this.muiscQueryParam = new com.ling9527.music.common.msg.auto.RankMusicQueryParam(other.muiscQueryParam);
    }
  }

  public CSQueryRankListMsg deepCopy() {
    return new CSQueryRankListMsg(this);
  }

  @Override
  public void clear() {
    setRankTypeIsSet(false);
    this.rankType = 0;
    setStartRankIsSet(false);
    this.startRank = 0;
    setEndRankIsSet(false);
    this.endRank = 0;
    this.muiscQueryParam = null;
  }

  public short getRankType() {
    return this.rankType;
  }

  public CSQueryRankListMsg setRankType(short rankType) {
    this.rankType = rankType;
    setRankTypeIsSet(true);
    return this;
  }

  public void unsetRankType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RANKTYPE_ISSET_ID);
  }

  /** Returns true if field rankType is set (has been assigned a value) and false otherwise */
  public boolean isSetRankType() {
    return EncodingUtils.testBit(__isset_bitfield, __RANKTYPE_ISSET_ID);
  }

  public void setRankTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RANKTYPE_ISSET_ID, value);
  }

  public short getStartRank() {
    return this.startRank;
  }

  public CSQueryRankListMsg setStartRank(short startRank) {
    this.startRank = startRank;
    setStartRankIsSet(true);
    return this;
  }

  public void unsetStartRank() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTRANK_ISSET_ID);
  }

  /** Returns true if field startRank is set (has been assigned a value) and false otherwise */
  public boolean isSetStartRank() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTRANK_ISSET_ID);
  }

  public void setStartRankIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTRANK_ISSET_ID, value);
  }

  /**
   * limit 50
   */
  public short getEndRank() {
    return this.endRank;
  }

  /**
   * limit 50
   */
  public CSQueryRankListMsg setEndRank(short endRank) {
    this.endRank = endRank;
    setEndRankIsSet(true);
    return this;
  }

  public void unsetEndRank() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDRANK_ISSET_ID);
  }

  /** Returns true if field endRank is set (has been assigned a value) and false otherwise */
  public boolean isSetEndRank() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDRANK_ISSET_ID);
  }

  public void setEndRankIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDRANK_ISSET_ID, value);
  }

  public com.ling9527.music.common.msg.auto.RankMusicQueryParam getMuiscQueryParam() {
    return this.muiscQueryParam;
  }

  public CSQueryRankListMsg setMuiscQueryParam(com.ling9527.music.common.msg.auto.RankMusicQueryParam muiscQueryParam) {
    this.muiscQueryParam = muiscQueryParam;
    return this;
  }

  public void unsetMuiscQueryParam() {
    this.muiscQueryParam = null;
  }

  /** Returns true if field muiscQueryParam is set (has been assigned a value) and false otherwise */
  public boolean isSetMuiscQueryParam() {
    return this.muiscQueryParam != null;
  }

  public void setMuiscQueryParamIsSet(boolean value) {
    if (!value) {
      this.muiscQueryParam = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RANK_TYPE:
      if (value == null) {
        unsetRankType();
      } else {
        setRankType((Short)value);
      }
      break;

    case START_RANK:
      if (value == null) {
        unsetStartRank();
      } else {
        setStartRank((Short)value);
      }
      break;

    case END_RANK:
      if (value == null) {
        unsetEndRank();
      } else {
        setEndRank((Short)value);
      }
      break;

    case MUISC_QUERY_PARAM:
      if (value == null) {
        unsetMuiscQueryParam();
      } else {
        setMuiscQueryParam((com.ling9527.music.common.msg.auto.RankMusicQueryParam)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RANK_TYPE:
      return Short.valueOf(getRankType());

    case START_RANK:
      return Short.valueOf(getStartRank());

    case END_RANK:
      return Short.valueOf(getEndRank());

    case MUISC_QUERY_PARAM:
      return getMuiscQueryParam();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RANK_TYPE:
      return isSetRankType();
    case START_RANK:
      return isSetStartRank();
    case END_RANK:
      return isSetEndRank();
    case MUISC_QUERY_PARAM:
      return isSetMuiscQueryParam();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CSQueryRankListMsg)
      return this.equals((CSQueryRankListMsg)that);
    return false;
  }

  public boolean equals(CSQueryRankListMsg that) {
    if (that == null)
      return false;

    boolean this_present_rankType = true;
    boolean that_present_rankType = true;
    if (this_present_rankType || that_present_rankType) {
      if (!(this_present_rankType && that_present_rankType))
        return false;
      if (this.rankType != that.rankType)
        return false;
    }

    boolean this_present_startRank = true;
    boolean that_present_startRank = true;
    if (this_present_startRank || that_present_startRank) {
      if (!(this_present_startRank && that_present_startRank))
        return false;
      if (this.startRank != that.startRank)
        return false;
    }

    boolean this_present_endRank = true;
    boolean that_present_endRank = true;
    if (this_present_endRank || that_present_endRank) {
      if (!(this_present_endRank && that_present_endRank))
        return false;
      if (this.endRank != that.endRank)
        return false;
    }

    boolean this_present_muiscQueryParam = true && this.isSetMuiscQueryParam();
    boolean that_present_muiscQueryParam = true && that.isSetMuiscQueryParam();
    if (this_present_muiscQueryParam || that_present_muiscQueryParam) {
      if (!(this_present_muiscQueryParam && that_present_muiscQueryParam))
        return false;
      if (!this.muiscQueryParam.equals(that.muiscQueryParam))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(CSQueryRankListMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CSQueryRankListMsg typedOther = (CSQueryRankListMsg)other;

    lastComparison = Boolean.valueOf(isSetRankType()).compareTo(typedOther.isSetRankType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRankType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rankType, typedOther.rankType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartRank()).compareTo(typedOther.isSetStartRank());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartRank()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startRank, typedOther.startRank);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndRank()).compareTo(typedOther.isSetEndRank());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndRank()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endRank, typedOther.endRank);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMuiscQueryParam()).compareTo(typedOther.isSetMuiscQueryParam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMuiscQueryParam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.muiscQueryParam, typedOther.muiscQueryParam);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CSQueryRankListMsg(");
    boolean first = true;

    sb.append("rankType:");
    sb.append(this.rankType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("startRank:");
    sb.append(this.startRank);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endRank:");
    sb.append(this.endRank);
    first = false;
    if (isSetMuiscQueryParam()) {
      if (!first) sb.append(", ");
      sb.append("muiscQueryParam:");
      if (this.muiscQueryParam == null) {
        sb.append("null");
      } else {
        sb.append(this.muiscQueryParam);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (muiscQueryParam != null) {
      muiscQueryParam.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CSQueryRankListMsgStandardSchemeFactory implements SchemeFactory {
    public CSQueryRankListMsgStandardScheme getScheme() {
      return new CSQueryRankListMsgStandardScheme();
    }
  }

  private static class CSQueryRankListMsgStandardScheme extends StandardScheme<CSQueryRankListMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CSQueryRankListMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RANK_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.rankType = iprot.readI16();
              struct.setRankTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // START_RANK
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.startRank = iprot.readI16();
              struct.setStartRankIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // END_RANK
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.endRank = iprot.readI16();
              struct.setEndRankIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MUISC_QUERY_PARAM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.muiscQueryParam = new com.ling9527.music.common.msg.auto.RankMusicQueryParam();
              struct.muiscQueryParam.read(iprot);
              struct.setMuiscQueryParamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CSQueryRankListMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(RANK_TYPE_FIELD_DESC);
      oprot.writeI16(struct.rankType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(START_RANK_FIELD_DESC);
      oprot.writeI16(struct.startRank);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(END_RANK_FIELD_DESC);
      oprot.writeI16(struct.endRank);
      oprot.writeFieldEnd();
      if (struct.muiscQueryParam != null) {
        if (struct.isSetMuiscQueryParam()) {
          oprot.writeFieldBegin(MUISC_QUERY_PARAM_FIELD_DESC);
          struct.muiscQueryParam.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CSQueryRankListMsgTupleSchemeFactory implements SchemeFactory {
    public CSQueryRankListMsgTupleScheme getScheme() {
      return new CSQueryRankListMsgTupleScheme();
    }
  }

  private static class CSQueryRankListMsgTupleScheme extends TupleScheme<CSQueryRankListMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CSQueryRankListMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRankType()) {
        optionals.set(0);
      }
      if (struct.isSetStartRank()) {
        optionals.set(1);
      }
      if (struct.isSetEndRank()) {
        optionals.set(2);
      }
      if (struct.isSetMuiscQueryParam()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetRankType()) {
        oprot.writeI16(struct.rankType);
      }
      if (struct.isSetStartRank()) {
        oprot.writeI16(struct.startRank);
      }
      if (struct.isSetEndRank()) {
        oprot.writeI16(struct.endRank);
      }
      if (struct.isSetMuiscQueryParam()) {
        struct.muiscQueryParam.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CSQueryRankListMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.rankType = iprot.readI16();
        struct.setRankTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.startRank = iprot.readI16();
        struct.setStartRankIsSet(true);
      }
      if (incoming.get(2)) {
        struct.endRank = iprot.readI16();
        struct.setEndRankIsSet(true);
      }
      if (incoming.get(3)) {
        struct.muiscQueryParam = new com.ling9527.music.common.msg.auto.RankMusicQueryParam();
        struct.muiscQueryParam.read(iprot);
        struct.setMuiscQueryParamIsSet(true);
      }
    }
  }

}

