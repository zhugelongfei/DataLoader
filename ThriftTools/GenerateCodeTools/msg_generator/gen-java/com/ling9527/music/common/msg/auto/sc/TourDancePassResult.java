/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 巡演舞蹈通关结果
 */
public class TourDancePassResult implements org.apache.thrift.TBase<TourDancePassResult, TourDancePassResult._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TourDancePassResult");

  private static final org.apache.thrift.protocol.TField CAN_PASS_TOUR_FIELD_DESC = new org.apache.thrift.protocol.TField("canPassTour", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField CAN_ACCEPT_PRIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("canAcceptPrize", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField CHAPTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("chapterId", org.apache.thrift.protocol.TType.I16, (short)3);
  private static final org.apache.thrift.protocol.TField RAID_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("raidId", org.apache.thrift.protocol.TType.I16, (short)5);
  private static final org.apache.thrift.protocol.TField PASS_RANK_FIELD_DESC = new org.apache.thrift.protocol.TField("passRank", org.apache.thrift.protocol.TType.BYTE, (short)6);
  private static final org.apache.thrift.protocol.TField BASIC_PASS_COND_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("basicPassCondResult", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField EXTRA_PASS_COND_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("extraPassCondResult", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField PRIZE_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("prizeInfos", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField CHEER_VAL_RESULTS_FIELD_DESC = new org.apache.thrift.protocol.TField("cheerValResults", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField EXTRA_PRIZE_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("extraPrizeInfos", org.apache.thrift.protocol.TType.STRUCT, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TourDancePassResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TourDancePassResultTupleSchemeFactory());
  }

  /**
   * 是否巡演通关， 为false立即失败
   */
  public boolean canPassTour; // required
  /**
   * 是否显示领取奖励按钮
   */
  public boolean canAcceptPrize; // required
  /**
   * 章节id
   */
  public short chapterId; // required
  /**
   * 关卡id
   */
  public short raidId; // required
  /**
   * 通关等级 0-未通关 1-3 s, ss, sss
   */
  public byte passRank; // required
  /**
   * 1s通关条件信息
   */
  public com.ling9527.music.common.msg.auto.PassCheerCondResult basicPassCondResult; // required
  /**
   * 额外通关条件信息
   */
  public com.ling9527.music.common.msg.auto.PassCheerCondResult extraPassCondResult; // optional
  /**
   * 通关奖励
   */
  public com.ling9527.music.common.msg.auto.PrizeInfo prizeInfos; // optional
  public List<com.ling9527.music.common.msg.auto.DanceCheerValResult> cheerValResults; // optional
  /**
   * 额外奖励
   */
  public com.ling9527.music.common.msg.auto.PrizeInfo extraPrizeInfos; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 是否巡演通关， 为false立即失败
     */
    CAN_PASS_TOUR((short)1, "canPassTour"),
    /**
     * 是否显示领取奖励按钮
     */
    CAN_ACCEPT_PRIZE((short)2, "canAcceptPrize"),
    /**
     * 章节id
     */
    CHAPTER_ID((short)3, "chapterId"),
    /**
     * 关卡id
     */
    RAID_ID((short)5, "raidId"),
    /**
     * 通关等级 0-未通关 1-3 s, ss, sss
     */
    PASS_RANK((short)6, "passRank"),
    /**
     * 1s通关条件信息
     */
    BASIC_PASS_COND_RESULT((short)7, "basicPassCondResult"),
    /**
     * 额外通关条件信息
     */
    EXTRA_PASS_COND_RESULT((short)8, "extraPassCondResult"),
    /**
     * 通关奖励
     */
    PRIZE_INFOS((short)9, "prizeInfos"),
    CHEER_VAL_RESULTS((short)10, "cheerValResults"),
    /**
     * 额外奖励
     */
    EXTRA_PRIZE_INFOS((short)11, "extraPrizeInfos");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CAN_PASS_TOUR
          return CAN_PASS_TOUR;
        case 2: // CAN_ACCEPT_PRIZE
          return CAN_ACCEPT_PRIZE;
        case 3: // CHAPTER_ID
          return CHAPTER_ID;
        case 5: // RAID_ID
          return RAID_ID;
        case 6: // PASS_RANK
          return PASS_RANK;
        case 7: // BASIC_PASS_COND_RESULT
          return BASIC_PASS_COND_RESULT;
        case 8: // EXTRA_PASS_COND_RESULT
          return EXTRA_PASS_COND_RESULT;
        case 9: // PRIZE_INFOS
          return PRIZE_INFOS;
        case 10: // CHEER_VAL_RESULTS
          return CHEER_VAL_RESULTS;
        case 11: // EXTRA_PRIZE_INFOS
          return EXTRA_PRIZE_INFOS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CANPASSTOUR_ISSET_ID = 0;
  private static final int __CANACCEPTPRIZE_ISSET_ID = 1;
  private static final int __CHAPTERID_ISSET_ID = 2;
  private static final int __RAIDID_ISSET_ID = 3;
  private static final int __PASSRANK_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.EXTRA_PASS_COND_RESULT,_Fields.PRIZE_INFOS,_Fields.CHEER_VAL_RESULTS,_Fields.EXTRA_PRIZE_INFOS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CAN_PASS_TOUR, new org.apache.thrift.meta_data.FieldMetaData("canPassTour", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CAN_ACCEPT_PRIZE, new org.apache.thrift.meta_data.FieldMetaData("canAcceptPrize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CHAPTER_ID, new org.apache.thrift.meta_data.FieldMetaData("chapterId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.RAID_ID, new org.apache.thrift.meta_data.FieldMetaData("raidId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.PASS_RANK, new org.apache.thrift.meta_data.FieldMetaData("passRank", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.BASIC_PASS_COND_RESULT, new org.apache.thrift.meta_data.FieldMetaData("basicPassCondResult", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.PassCheerCondResult.class)));
    tmpMap.put(_Fields.EXTRA_PASS_COND_RESULT, new org.apache.thrift.meta_data.FieldMetaData("extraPassCondResult", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.PassCheerCondResult.class)));
    tmpMap.put(_Fields.PRIZE_INFOS, new org.apache.thrift.meta_data.FieldMetaData("prizeInfos", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.PrizeInfo.class)));
    tmpMap.put(_Fields.CHEER_VAL_RESULTS, new org.apache.thrift.meta_data.FieldMetaData("cheerValResults", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.DanceCheerValResult.class))));
    tmpMap.put(_Fields.EXTRA_PRIZE_INFOS, new org.apache.thrift.meta_data.FieldMetaData("extraPrizeInfos", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.PrizeInfo.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TourDancePassResult.class, metaDataMap);
  }

  public TourDancePassResult() {
  }

  public TourDancePassResult(
    boolean canPassTour,
    boolean canAcceptPrize,
    short chapterId,
    short raidId,
    byte passRank,
    com.ling9527.music.common.msg.auto.PassCheerCondResult basicPassCondResult)
  {
    this();
    this.canPassTour = canPassTour;
    setCanPassTourIsSet(true);
    this.canAcceptPrize = canAcceptPrize;
    setCanAcceptPrizeIsSet(true);
    this.chapterId = chapterId;
    setChapterIdIsSet(true);
    this.raidId = raidId;
    setRaidIdIsSet(true);
    this.passRank = passRank;
    setPassRankIsSet(true);
    this.basicPassCondResult = basicPassCondResult;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TourDancePassResult(TourDancePassResult other) {
    __isset_bitfield = other.__isset_bitfield;
    this.canPassTour = other.canPassTour;
    this.canAcceptPrize = other.canAcceptPrize;
    this.chapterId = other.chapterId;
    this.raidId = other.raidId;
    this.passRank = other.passRank;
    if (other.isSetBasicPassCondResult()) {
      this.basicPassCondResult = new com.ling9527.music.common.msg.auto.PassCheerCondResult(other.basicPassCondResult);
    }
    if (other.isSetExtraPassCondResult()) {
      this.extraPassCondResult = new com.ling9527.music.common.msg.auto.PassCheerCondResult(other.extraPassCondResult);
    }
    if (other.isSetPrizeInfos()) {
      this.prizeInfos = new com.ling9527.music.common.msg.auto.PrizeInfo(other.prizeInfos);
    }
    if (other.isSetCheerValResults()) {
      List<com.ling9527.music.common.msg.auto.DanceCheerValResult> __this__cheerValResults = new ArrayList<com.ling9527.music.common.msg.auto.DanceCheerValResult>();
      for (com.ling9527.music.common.msg.auto.DanceCheerValResult other_element : other.cheerValResults) {
        __this__cheerValResults.add(new com.ling9527.music.common.msg.auto.DanceCheerValResult(other_element));
      }
      this.cheerValResults = __this__cheerValResults;
    }
    if (other.isSetExtraPrizeInfos()) {
      this.extraPrizeInfos = new com.ling9527.music.common.msg.auto.PrizeInfo(other.extraPrizeInfos);
    }
  }

  public TourDancePassResult deepCopy() {
    return new TourDancePassResult(this);
  }

  @Override
  public void clear() {
    setCanPassTourIsSet(false);
    this.canPassTour = false;
    setCanAcceptPrizeIsSet(false);
    this.canAcceptPrize = false;
    setChapterIdIsSet(false);
    this.chapterId = 0;
    setRaidIdIsSet(false);
    this.raidId = 0;
    setPassRankIsSet(false);
    this.passRank = 0;
    this.basicPassCondResult = null;
    this.extraPassCondResult = null;
    this.prizeInfos = null;
    this.cheerValResults = null;
    this.extraPrizeInfos = null;
  }

  /**
   * 是否巡演通关， 为false立即失败
   */
  public boolean isCanPassTour() {
    return this.canPassTour;
  }

  /**
   * 是否巡演通关， 为false立即失败
   */
  public TourDancePassResult setCanPassTour(boolean canPassTour) {
    this.canPassTour = canPassTour;
    setCanPassTourIsSet(true);
    return this;
  }

  public void unsetCanPassTour() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CANPASSTOUR_ISSET_ID);
  }

  /** Returns true if field canPassTour is set (has been assigned a value) and false otherwise */
  public boolean isSetCanPassTour() {
    return EncodingUtils.testBit(__isset_bitfield, __CANPASSTOUR_ISSET_ID);
  }

  public void setCanPassTourIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CANPASSTOUR_ISSET_ID, value);
  }

  /**
   * 是否显示领取奖励按钮
   */
  public boolean isCanAcceptPrize() {
    return this.canAcceptPrize;
  }

  /**
   * 是否显示领取奖励按钮
   */
  public TourDancePassResult setCanAcceptPrize(boolean canAcceptPrize) {
    this.canAcceptPrize = canAcceptPrize;
    setCanAcceptPrizeIsSet(true);
    return this;
  }

  public void unsetCanAcceptPrize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CANACCEPTPRIZE_ISSET_ID);
  }

  /** Returns true if field canAcceptPrize is set (has been assigned a value) and false otherwise */
  public boolean isSetCanAcceptPrize() {
    return EncodingUtils.testBit(__isset_bitfield, __CANACCEPTPRIZE_ISSET_ID);
  }

  public void setCanAcceptPrizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CANACCEPTPRIZE_ISSET_ID, value);
  }

  /**
   * 章节id
   */
  public short getChapterId() {
    return this.chapterId;
  }

  /**
   * 章节id
   */
  public TourDancePassResult setChapterId(short chapterId) {
    this.chapterId = chapterId;
    setChapterIdIsSet(true);
    return this;
  }

  public void unsetChapterId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHAPTERID_ISSET_ID);
  }

  /** Returns true if field chapterId is set (has been assigned a value) and false otherwise */
  public boolean isSetChapterId() {
    return EncodingUtils.testBit(__isset_bitfield, __CHAPTERID_ISSET_ID);
  }

  public void setChapterIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHAPTERID_ISSET_ID, value);
  }

  /**
   * 关卡id
   */
  public short getRaidId() {
    return this.raidId;
  }

  /**
   * 关卡id
   */
  public TourDancePassResult setRaidId(short raidId) {
    this.raidId = raidId;
    setRaidIdIsSet(true);
    return this;
  }

  public void unsetRaidId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RAIDID_ISSET_ID);
  }

  /** Returns true if field raidId is set (has been assigned a value) and false otherwise */
  public boolean isSetRaidId() {
    return EncodingUtils.testBit(__isset_bitfield, __RAIDID_ISSET_ID);
  }

  public void setRaidIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RAIDID_ISSET_ID, value);
  }

  /**
   * 通关等级 0-未通关 1-3 s, ss, sss
   */
  public byte getPassRank() {
    return this.passRank;
  }

  /**
   * 通关等级 0-未通关 1-3 s, ss, sss
   */
  public TourDancePassResult setPassRank(byte passRank) {
    this.passRank = passRank;
    setPassRankIsSet(true);
    return this;
  }

  public void unsetPassRank() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PASSRANK_ISSET_ID);
  }

  /** Returns true if field passRank is set (has been assigned a value) and false otherwise */
  public boolean isSetPassRank() {
    return EncodingUtils.testBit(__isset_bitfield, __PASSRANK_ISSET_ID);
  }

  public void setPassRankIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PASSRANK_ISSET_ID, value);
  }

  /**
   * 1s通关条件信息
   */
  public com.ling9527.music.common.msg.auto.PassCheerCondResult getBasicPassCondResult() {
    return this.basicPassCondResult;
  }

  /**
   * 1s通关条件信息
   */
  public TourDancePassResult setBasicPassCondResult(com.ling9527.music.common.msg.auto.PassCheerCondResult basicPassCondResult) {
    this.basicPassCondResult = basicPassCondResult;
    return this;
  }

  public void unsetBasicPassCondResult() {
    this.basicPassCondResult = null;
  }

  /** Returns true if field basicPassCondResult is set (has been assigned a value) and false otherwise */
  public boolean isSetBasicPassCondResult() {
    return this.basicPassCondResult != null;
  }

  public void setBasicPassCondResultIsSet(boolean value) {
    if (!value) {
      this.basicPassCondResult = null;
    }
  }

  /**
   * 额外通关条件信息
   */
  public com.ling9527.music.common.msg.auto.PassCheerCondResult getExtraPassCondResult() {
    return this.extraPassCondResult;
  }

  /**
   * 额外通关条件信息
   */
  public TourDancePassResult setExtraPassCondResult(com.ling9527.music.common.msg.auto.PassCheerCondResult extraPassCondResult) {
    this.extraPassCondResult = extraPassCondResult;
    return this;
  }

  public void unsetExtraPassCondResult() {
    this.extraPassCondResult = null;
  }

  /** Returns true if field extraPassCondResult is set (has been assigned a value) and false otherwise */
  public boolean isSetExtraPassCondResult() {
    return this.extraPassCondResult != null;
  }

  public void setExtraPassCondResultIsSet(boolean value) {
    if (!value) {
      this.extraPassCondResult = null;
    }
  }

  /**
   * 通关奖励
   */
  public com.ling9527.music.common.msg.auto.PrizeInfo getPrizeInfos() {
    return this.prizeInfos;
  }

  /**
   * 通关奖励
   */
  public TourDancePassResult setPrizeInfos(com.ling9527.music.common.msg.auto.PrizeInfo prizeInfos) {
    this.prizeInfos = prizeInfos;
    return this;
  }

  public void unsetPrizeInfos() {
    this.prizeInfos = null;
  }

  /** Returns true if field prizeInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetPrizeInfos() {
    return this.prizeInfos != null;
  }

  public void setPrizeInfosIsSet(boolean value) {
    if (!value) {
      this.prizeInfos = null;
    }
  }

  public int getCheerValResultsSize() {
    return (this.cheerValResults == null) ? 0 : this.cheerValResults.size();
  }

  public java.util.Iterator<com.ling9527.music.common.msg.auto.DanceCheerValResult> getCheerValResultsIterator() {
    return (this.cheerValResults == null) ? null : this.cheerValResults.iterator();
  }

  public void addToCheerValResults(com.ling9527.music.common.msg.auto.DanceCheerValResult elem) {
    if (this.cheerValResults == null) {
      this.cheerValResults = new ArrayList<com.ling9527.music.common.msg.auto.DanceCheerValResult>();
    }
    this.cheerValResults.add(elem);
  }

  public List<com.ling9527.music.common.msg.auto.DanceCheerValResult> getCheerValResults() {
    return this.cheerValResults;
  }

  public TourDancePassResult setCheerValResults(List<com.ling9527.music.common.msg.auto.DanceCheerValResult> cheerValResults) {
    this.cheerValResults = cheerValResults;
    return this;
  }

  public void unsetCheerValResults() {
    this.cheerValResults = null;
  }

  /** Returns true if field cheerValResults is set (has been assigned a value) and false otherwise */
  public boolean isSetCheerValResults() {
    return this.cheerValResults != null;
  }

  public void setCheerValResultsIsSet(boolean value) {
    if (!value) {
      this.cheerValResults = null;
    }
  }

  /**
   * 额外奖励
   */
  public com.ling9527.music.common.msg.auto.PrizeInfo getExtraPrizeInfos() {
    return this.extraPrizeInfos;
  }

  /**
   * 额外奖励
   */
  public TourDancePassResult setExtraPrizeInfos(com.ling9527.music.common.msg.auto.PrizeInfo extraPrizeInfos) {
    this.extraPrizeInfos = extraPrizeInfos;
    return this;
  }

  public void unsetExtraPrizeInfos() {
    this.extraPrizeInfos = null;
  }

  /** Returns true if field extraPrizeInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetExtraPrizeInfos() {
    return this.extraPrizeInfos != null;
  }

  public void setExtraPrizeInfosIsSet(boolean value) {
    if (!value) {
      this.extraPrizeInfos = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CAN_PASS_TOUR:
      if (value == null) {
        unsetCanPassTour();
      } else {
        setCanPassTour((Boolean)value);
      }
      break;

    case CAN_ACCEPT_PRIZE:
      if (value == null) {
        unsetCanAcceptPrize();
      } else {
        setCanAcceptPrize((Boolean)value);
      }
      break;

    case CHAPTER_ID:
      if (value == null) {
        unsetChapterId();
      } else {
        setChapterId((Short)value);
      }
      break;

    case RAID_ID:
      if (value == null) {
        unsetRaidId();
      } else {
        setRaidId((Short)value);
      }
      break;

    case PASS_RANK:
      if (value == null) {
        unsetPassRank();
      } else {
        setPassRank((Byte)value);
      }
      break;

    case BASIC_PASS_COND_RESULT:
      if (value == null) {
        unsetBasicPassCondResult();
      } else {
        setBasicPassCondResult((com.ling9527.music.common.msg.auto.PassCheerCondResult)value);
      }
      break;

    case EXTRA_PASS_COND_RESULT:
      if (value == null) {
        unsetExtraPassCondResult();
      } else {
        setExtraPassCondResult((com.ling9527.music.common.msg.auto.PassCheerCondResult)value);
      }
      break;

    case PRIZE_INFOS:
      if (value == null) {
        unsetPrizeInfos();
      } else {
        setPrizeInfos((com.ling9527.music.common.msg.auto.PrizeInfo)value);
      }
      break;

    case CHEER_VAL_RESULTS:
      if (value == null) {
        unsetCheerValResults();
      } else {
        setCheerValResults((List<com.ling9527.music.common.msg.auto.DanceCheerValResult>)value);
      }
      break;

    case EXTRA_PRIZE_INFOS:
      if (value == null) {
        unsetExtraPrizeInfos();
      } else {
        setExtraPrizeInfos((com.ling9527.music.common.msg.auto.PrizeInfo)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CAN_PASS_TOUR:
      return Boolean.valueOf(isCanPassTour());

    case CAN_ACCEPT_PRIZE:
      return Boolean.valueOf(isCanAcceptPrize());

    case CHAPTER_ID:
      return Short.valueOf(getChapterId());

    case RAID_ID:
      return Short.valueOf(getRaidId());

    case PASS_RANK:
      return Byte.valueOf(getPassRank());

    case BASIC_PASS_COND_RESULT:
      return getBasicPassCondResult();

    case EXTRA_PASS_COND_RESULT:
      return getExtraPassCondResult();

    case PRIZE_INFOS:
      return getPrizeInfos();

    case CHEER_VAL_RESULTS:
      return getCheerValResults();

    case EXTRA_PRIZE_INFOS:
      return getExtraPrizeInfos();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CAN_PASS_TOUR:
      return isSetCanPassTour();
    case CAN_ACCEPT_PRIZE:
      return isSetCanAcceptPrize();
    case CHAPTER_ID:
      return isSetChapterId();
    case RAID_ID:
      return isSetRaidId();
    case PASS_RANK:
      return isSetPassRank();
    case BASIC_PASS_COND_RESULT:
      return isSetBasicPassCondResult();
    case EXTRA_PASS_COND_RESULT:
      return isSetExtraPassCondResult();
    case PRIZE_INFOS:
      return isSetPrizeInfos();
    case CHEER_VAL_RESULTS:
      return isSetCheerValResults();
    case EXTRA_PRIZE_INFOS:
      return isSetExtraPrizeInfos();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TourDancePassResult)
      return this.equals((TourDancePassResult)that);
    return false;
  }

  public boolean equals(TourDancePassResult that) {
    if (that == null)
      return false;

    boolean this_present_canPassTour = true;
    boolean that_present_canPassTour = true;
    if (this_present_canPassTour || that_present_canPassTour) {
      if (!(this_present_canPassTour && that_present_canPassTour))
        return false;
      if (this.canPassTour != that.canPassTour)
        return false;
    }

    boolean this_present_canAcceptPrize = true;
    boolean that_present_canAcceptPrize = true;
    if (this_present_canAcceptPrize || that_present_canAcceptPrize) {
      if (!(this_present_canAcceptPrize && that_present_canAcceptPrize))
        return false;
      if (this.canAcceptPrize != that.canAcceptPrize)
        return false;
    }

    boolean this_present_chapterId = true;
    boolean that_present_chapterId = true;
    if (this_present_chapterId || that_present_chapterId) {
      if (!(this_present_chapterId && that_present_chapterId))
        return false;
      if (this.chapterId != that.chapterId)
        return false;
    }

    boolean this_present_raidId = true;
    boolean that_present_raidId = true;
    if (this_present_raidId || that_present_raidId) {
      if (!(this_present_raidId && that_present_raidId))
        return false;
      if (this.raidId != that.raidId)
        return false;
    }

    boolean this_present_passRank = true;
    boolean that_present_passRank = true;
    if (this_present_passRank || that_present_passRank) {
      if (!(this_present_passRank && that_present_passRank))
        return false;
      if (this.passRank != that.passRank)
        return false;
    }

    boolean this_present_basicPassCondResult = true && this.isSetBasicPassCondResult();
    boolean that_present_basicPassCondResult = true && that.isSetBasicPassCondResult();
    if (this_present_basicPassCondResult || that_present_basicPassCondResult) {
      if (!(this_present_basicPassCondResult && that_present_basicPassCondResult))
        return false;
      if (!this.basicPassCondResult.equals(that.basicPassCondResult))
        return false;
    }

    boolean this_present_extraPassCondResult = true && this.isSetExtraPassCondResult();
    boolean that_present_extraPassCondResult = true && that.isSetExtraPassCondResult();
    if (this_present_extraPassCondResult || that_present_extraPassCondResult) {
      if (!(this_present_extraPassCondResult && that_present_extraPassCondResult))
        return false;
      if (!this.extraPassCondResult.equals(that.extraPassCondResult))
        return false;
    }

    boolean this_present_prizeInfos = true && this.isSetPrizeInfos();
    boolean that_present_prizeInfos = true && that.isSetPrizeInfos();
    if (this_present_prizeInfos || that_present_prizeInfos) {
      if (!(this_present_prizeInfos && that_present_prizeInfos))
        return false;
      if (!this.prizeInfos.equals(that.prizeInfos))
        return false;
    }

    boolean this_present_cheerValResults = true && this.isSetCheerValResults();
    boolean that_present_cheerValResults = true && that.isSetCheerValResults();
    if (this_present_cheerValResults || that_present_cheerValResults) {
      if (!(this_present_cheerValResults && that_present_cheerValResults))
        return false;
      if (!this.cheerValResults.equals(that.cheerValResults))
        return false;
    }

    boolean this_present_extraPrizeInfos = true && this.isSetExtraPrizeInfos();
    boolean that_present_extraPrizeInfos = true && that.isSetExtraPrizeInfos();
    if (this_present_extraPrizeInfos || that_present_extraPrizeInfos) {
      if (!(this_present_extraPrizeInfos && that_present_extraPrizeInfos))
        return false;
      if (!this.extraPrizeInfos.equals(that.extraPrizeInfos))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TourDancePassResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TourDancePassResult typedOther = (TourDancePassResult)other;

    lastComparison = Boolean.valueOf(isSetCanPassTour()).compareTo(typedOther.isSetCanPassTour());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCanPassTour()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.canPassTour, typedOther.canPassTour);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCanAcceptPrize()).compareTo(typedOther.isSetCanAcceptPrize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCanAcceptPrize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.canAcceptPrize, typedOther.canAcceptPrize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChapterId()).compareTo(typedOther.isSetChapterId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChapterId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chapterId, typedOther.chapterId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRaidId()).compareTo(typedOther.isSetRaidId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRaidId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.raidId, typedOther.raidId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPassRank()).compareTo(typedOther.isSetPassRank());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassRank()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.passRank, typedOther.passRank);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBasicPassCondResult()).compareTo(typedOther.isSetBasicPassCondResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBasicPassCondResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.basicPassCondResult, typedOther.basicPassCondResult);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtraPassCondResult()).compareTo(typedOther.isSetExtraPassCondResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtraPassCondResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extraPassCondResult, typedOther.extraPassCondResult);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrizeInfos()).compareTo(typedOther.isSetPrizeInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrizeInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prizeInfos, typedOther.prizeInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheerValResults()).compareTo(typedOther.isSetCheerValResults());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheerValResults()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cheerValResults, typedOther.cheerValResults);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtraPrizeInfos()).compareTo(typedOther.isSetExtraPrizeInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtraPrizeInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extraPrizeInfos, typedOther.extraPrizeInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TourDancePassResult(");
    boolean first = true;

    sb.append("canPassTour:");
    sb.append(this.canPassTour);
    first = false;
    if (!first) sb.append(", ");
    sb.append("canAcceptPrize:");
    sb.append(this.canAcceptPrize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("chapterId:");
    sb.append(this.chapterId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("raidId:");
    sb.append(this.raidId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("passRank:");
    sb.append(this.passRank);
    first = false;
    if (!first) sb.append(", ");
    sb.append("basicPassCondResult:");
    if (this.basicPassCondResult == null) {
      sb.append("null");
    } else {
      sb.append(this.basicPassCondResult);
    }
    first = false;
    if (isSetExtraPassCondResult()) {
      if (!first) sb.append(", ");
      sb.append("extraPassCondResult:");
      if (this.extraPassCondResult == null) {
        sb.append("null");
      } else {
        sb.append(this.extraPassCondResult);
      }
      first = false;
    }
    if (isSetPrizeInfos()) {
      if (!first) sb.append(", ");
      sb.append("prizeInfos:");
      if (this.prizeInfos == null) {
        sb.append("null");
      } else {
        sb.append(this.prizeInfos);
      }
      first = false;
    }
    if (isSetCheerValResults()) {
      if (!first) sb.append(", ");
      sb.append("cheerValResults:");
      if (this.cheerValResults == null) {
        sb.append("null");
      } else {
        sb.append(this.cheerValResults);
      }
      first = false;
    }
    if (isSetExtraPrizeInfos()) {
      if (!first) sb.append(", ");
      sb.append("extraPrizeInfos:");
      if (this.extraPrizeInfos == null) {
        sb.append("null");
      } else {
        sb.append(this.extraPrizeInfos);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (basicPassCondResult != null) {
      basicPassCondResult.validate();
    }
    if (extraPassCondResult != null) {
      extraPassCondResult.validate();
    }
    if (prizeInfos != null) {
      prizeInfos.validate();
    }
    if (extraPrizeInfos != null) {
      extraPrizeInfos.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TourDancePassResultStandardSchemeFactory implements SchemeFactory {
    public TourDancePassResultStandardScheme getScheme() {
      return new TourDancePassResultStandardScheme();
    }
  }

  private static class TourDancePassResultStandardScheme extends StandardScheme<TourDancePassResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TourDancePassResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CAN_PASS_TOUR
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.canPassTour = iprot.readBool();
              struct.setCanPassTourIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CAN_ACCEPT_PRIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.canAcceptPrize = iprot.readBool();
              struct.setCanAcceptPrizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CHAPTER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.chapterId = iprot.readI16();
              struct.setChapterIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RAID_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.raidId = iprot.readI16();
              struct.setRaidIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PASS_RANK
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.passRank = iprot.readByte();
              struct.setPassRankIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BASIC_PASS_COND_RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.basicPassCondResult = new com.ling9527.music.common.msg.auto.PassCheerCondResult();
              struct.basicPassCondResult.read(iprot);
              struct.setBasicPassCondResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // EXTRA_PASS_COND_RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.extraPassCondResult = new com.ling9527.music.common.msg.auto.PassCheerCondResult();
              struct.extraPassCondResult.read(iprot);
              struct.setExtraPassCondResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PRIZE_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.prizeInfos = new com.ling9527.music.common.msg.auto.PrizeInfo();
              struct.prizeInfos.read(iprot);
              struct.setPrizeInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CHEER_VAL_RESULTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                struct.cheerValResults = new ArrayList<com.ling9527.music.common.msg.auto.DanceCheerValResult>(_list64.size);
                for (int _i65 = 0; _i65 < _list64.size; ++_i65)
                {
                  com.ling9527.music.common.msg.auto.DanceCheerValResult _elem66; // required
                  _elem66 = new com.ling9527.music.common.msg.auto.DanceCheerValResult();
                  _elem66.read(iprot);
                  struct.cheerValResults.add(_elem66);
                }
                iprot.readListEnd();
              }
              struct.setCheerValResultsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // EXTRA_PRIZE_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.extraPrizeInfos = new com.ling9527.music.common.msg.auto.PrizeInfo();
              struct.extraPrizeInfos.read(iprot);
              struct.setExtraPrizeInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TourDancePassResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CAN_PASS_TOUR_FIELD_DESC);
      oprot.writeBool(struct.canPassTour);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CAN_ACCEPT_PRIZE_FIELD_DESC);
      oprot.writeBool(struct.canAcceptPrize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CHAPTER_ID_FIELD_DESC);
      oprot.writeI16(struct.chapterId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RAID_ID_FIELD_DESC);
      oprot.writeI16(struct.raidId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PASS_RANK_FIELD_DESC);
      oprot.writeByte(struct.passRank);
      oprot.writeFieldEnd();
      if (struct.basicPassCondResult != null) {
        oprot.writeFieldBegin(BASIC_PASS_COND_RESULT_FIELD_DESC);
        struct.basicPassCondResult.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.extraPassCondResult != null) {
        if (struct.isSetExtraPassCondResult()) {
          oprot.writeFieldBegin(EXTRA_PASS_COND_RESULT_FIELD_DESC);
          struct.extraPassCondResult.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.prizeInfos != null) {
        if (struct.isSetPrizeInfos()) {
          oprot.writeFieldBegin(PRIZE_INFOS_FIELD_DESC);
          struct.prizeInfos.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cheerValResults != null) {
        if (struct.isSetCheerValResults()) {
          oprot.writeFieldBegin(CHEER_VAL_RESULTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.cheerValResults.size()));
            for (com.ling9527.music.common.msg.auto.DanceCheerValResult _iter67 : struct.cheerValResults)
            {
              _iter67.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.extraPrizeInfos != null) {
        if (struct.isSetExtraPrizeInfos()) {
          oprot.writeFieldBegin(EXTRA_PRIZE_INFOS_FIELD_DESC);
          struct.extraPrizeInfos.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TourDancePassResultTupleSchemeFactory implements SchemeFactory {
    public TourDancePassResultTupleScheme getScheme() {
      return new TourDancePassResultTupleScheme();
    }
  }

  private static class TourDancePassResultTupleScheme extends TupleScheme<TourDancePassResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TourDancePassResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCanPassTour()) {
        optionals.set(0);
      }
      if (struct.isSetCanAcceptPrize()) {
        optionals.set(1);
      }
      if (struct.isSetChapterId()) {
        optionals.set(2);
      }
      if (struct.isSetRaidId()) {
        optionals.set(3);
      }
      if (struct.isSetPassRank()) {
        optionals.set(4);
      }
      if (struct.isSetBasicPassCondResult()) {
        optionals.set(5);
      }
      if (struct.isSetExtraPassCondResult()) {
        optionals.set(6);
      }
      if (struct.isSetPrizeInfos()) {
        optionals.set(7);
      }
      if (struct.isSetCheerValResults()) {
        optionals.set(8);
      }
      if (struct.isSetExtraPrizeInfos()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetCanPassTour()) {
        oprot.writeBool(struct.canPassTour);
      }
      if (struct.isSetCanAcceptPrize()) {
        oprot.writeBool(struct.canAcceptPrize);
      }
      if (struct.isSetChapterId()) {
        oprot.writeI16(struct.chapterId);
      }
      if (struct.isSetRaidId()) {
        oprot.writeI16(struct.raidId);
      }
      if (struct.isSetPassRank()) {
        oprot.writeByte(struct.passRank);
      }
      if (struct.isSetBasicPassCondResult()) {
        struct.basicPassCondResult.write(oprot);
      }
      if (struct.isSetExtraPassCondResult()) {
        struct.extraPassCondResult.write(oprot);
      }
      if (struct.isSetPrizeInfos()) {
        struct.prizeInfos.write(oprot);
      }
      if (struct.isSetCheerValResults()) {
        {
          oprot.writeI32(struct.cheerValResults.size());
          for (com.ling9527.music.common.msg.auto.DanceCheerValResult _iter68 : struct.cheerValResults)
          {
            _iter68.write(oprot);
          }
        }
      }
      if (struct.isSetExtraPrizeInfos()) {
        struct.extraPrizeInfos.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TourDancePassResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.canPassTour = iprot.readBool();
        struct.setCanPassTourIsSet(true);
      }
      if (incoming.get(1)) {
        struct.canAcceptPrize = iprot.readBool();
        struct.setCanAcceptPrizeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.chapterId = iprot.readI16();
        struct.setChapterIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.raidId = iprot.readI16();
        struct.setRaidIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.passRank = iprot.readByte();
        struct.setPassRankIsSet(true);
      }
      if (incoming.get(5)) {
        struct.basicPassCondResult = new com.ling9527.music.common.msg.auto.PassCheerCondResult();
        struct.basicPassCondResult.read(iprot);
        struct.setBasicPassCondResultIsSet(true);
      }
      if (incoming.get(6)) {
        struct.extraPassCondResult = new com.ling9527.music.common.msg.auto.PassCheerCondResult();
        struct.extraPassCondResult.read(iprot);
        struct.setExtraPassCondResultIsSet(true);
      }
      if (incoming.get(7)) {
        struct.prizeInfos = new com.ling9527.music.common.msg.auto.PrizeInfo();
        struct.prizeInfos.read(iprot);
        struct.setPrizeInfosIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.cheerValResults = new ArrayList<com.ling9527.music.common.msg.auto.DanceCheerValResult>(_list69.size);
          for (int _i70 = 0; _i70 < _list69.size; ++_i70)
          {
            com.ling9527.music.common.msg.auto.DanceCheerValResult _elem71; // required
            _elem71 = new com.ling9527.music.common.msg.auto.DanceCheerValResult();
            _elem71.read(iprot);
            struct.cheerValResults.add(_elem71);
          }
        }
        struct.setCheerValResultsIsSet(true);
      }
      if (incoming.get(9)) {
        struct.extraPrizeInfos = new com.ling9527.music.common.msg.auto.PrizeInfo();
        struct.extraPrizeInfos.read(iprot);
        struct.setExtraPrizeInfosIsSet(true);
      }
    }
  }

}

