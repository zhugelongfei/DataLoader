/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 游戏奖励信息
 */
public class PrizeInfo implements org.apache.thrift.TBase<PrizeInfo, PrizeInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PrizeInfo");

  private static final org.apache.thrift.protocol.TField NUMBER_PRIZES_FIELD_DESC = new org.apache.thrift.protocol.TField("numberPrizes", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField MONEY_PRIZES_FIELD_DESC = new org.apache.thrift.protocol.TField("MoneyPrizes", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField BADGE_PRIZES_FIELD_DESC = new org.apache.thrift.protocol.TField("badgePrizes", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField FASHION_PRIZES_FIELD_DESC = new org.apache.thrift.protocol.TField("fashionPrizes", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField ITEM_PRIZES_FIELD_DESC = new org.apache.thrift.protocol.TField("itemPrizes", org.apache.thrift.protocol.TType.LIST, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PrizeInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PrizeInfoTupleSchemeFactory());
  }

  /**
   * numberPrizes和moneyPrizes互斥， 同时只会存在一种， 为了兼容之前消息
   */
  public List<NumberPrize> numberPrizes; // optional
  public List<MoneyPrize> MoneyPrizes; // optional
  public List<BadgePrize> badgePrizes; // optional
  public List<FashionPrize> fashionPrizes; // optional
  public List<ItemPrize> itemPrizes; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * numberPrizes和moneyPrizes互斥， 同时只会存在一种， 为了兼容之前消息
     */
    NUMBER_PRIZES((short)1, "numberPrizes"),
    MONEY_PRIZES((short)2, "MoneyPrizes"),
    BADGE_PRIZES((short)3, "badgePrizes"),
    FASHION_PRIZES((short)4, "fashionPrizes"),
    ITEM_PRIZES((short)5, "itemPrizes");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NUMBER_PRIZES
          return NUMBER_PRIZES;
        case 2: // MONEY_PRIZES
          return MONEY_PRIZES;
        case 3: // BADGE_PRIZES
          return BADGE_PRIZES;
        case 4: // FASHION_PRIZES
          return FASHION_PRIZES;
        case 5: // ITEM_PRIZES
          return ITEM_PRIZES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.NUMBER_PRIZES,_Fields.MONEY_PRIZES,_Fields.BADGE_PRIZES,_Fields.FASHION_PRIZES,_Fields.ITEM_PRIZES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NUMBER_PRIZES, new org.apache.thrift.meta_data.FieldMetaData("numberPrizes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NumberPrize.class))));
    tmpMap.put(_Fields.MONEY_PRIZES, new org.apache.thrift.meta_data.FieldMetaData("MoneyPrizes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MoneyPrize.class))));
    tmpMap.put(_Fields.BADGE_PRIZES, new org.apache.thrift.meta_data.FieldMetaData("badgePrizes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BadgePrize.class))));
    tmpMap.put(_Fields.FASHION_PRIZES, new org.apache.thrift.meta_data.FieldMetaData("fashionPrizes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FashionPrize.class))));
    tmpMap.put(_Fields.ITEM_PRIZES, new org.apache.thrift.meta_data.FieldMetaData("itemPrizes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ItemPrize.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PrizeInfo.class, metaDataMap);
  }

  public PrizeInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PrizeInfo(PrizeInfo other) {
    if (other.isSetNumberPrizes()) {
      List<NumberPrize> __this__numberPrizes = new ArrayList<NumberPrize>();
      for (NumberPrize other_element : other.numberPrizes) {
        __this__numberPrizes.add(new NumberPrize(other_element));
      }
      this.numberPrizes = __this__numberPrizes;
    }
    if (other.isSetMoneyPrizes()) {
      List<MoneyPrize> __this__MoneyPrizes = new ArrayList<MoneyPrize>();
      for (MoneyPrize other_element : other.MoneyPrizes) {
        __this__MoneyPrizes.add(new MoneyPrize(other_element));
      }
      this.MoneyPrizes = __this__MoneyPrizes;
    }
    if (other.isSetBadgePrizes()) {
      List<BadgePrize> __this__badgePrizes = new ArrayList<BadgePrize>();
      for (BadgePrize other_element : other.badgePrizes) {
        __this__badgePrizes.add(new BadgePrize(other_element));
      }
      this.badgePrizes = __this__badgePrizes;
    }
    if (other.isSetFashionPrizes()) {
      List<FashionPrize> __this__fashionPrizes = new ArrayList<FashionPrize>();
      for (FashionPrize other_element : other.fashionPrizes) {
        __this__fashionPrizes.add(new FashionPrize(other_element));
      }
      this.fashionPrizes = __this__fashionPrizes;
    }
    if (other.isSetItemPrizes()) {
      List<ItemPrize> __this__itemPrizes = new ArrayList<ItemPrize>();
      for (ItemPrize other_element : other.itemPrizes) {
        __this__itemPrizes.add(new ItemPrize(other_element));
      }
      this.itemPrizes = __this__itemPrizes;
    }
  }

  public PrizeInfo deepCopy() {
    return new PrizeInfo(this);
  }

  @Override
  public void clear() {
    this.numberPrizes = null;
    this.MoneyPrizes = null;
    this.badgePrizes = null;
    this.fashionPrizes = null;
    this.itemPrizes = null;
  }

  public int getNumberPrizesSize() {
    return (this.numberPrizes == null) ? 0 : this.numberPrizes.size();
  }

  public java.util.Iterator<NumberPrize> getNumberPrizesIterator() {
    return (this.numberPrizes == null) ? null : this.numberPrizes.iterator();
  }

  public void addToNumberPrizes(NumberPrize elem) {
    if (this.numberPrizes == null) {
      this.numberPrizes = new ArrayList<NumberPrize>();
    }
    this.numberPrizes.add(elem);
  }

  /**
   * numberPrizes和moneyPrizes互斥， 同时只会存在一种， 为了兼容之前消息
   */
  public List<NumberPrize> getNumberPrizes() {
    return this.numberPrizes;
  }

  /**
   * numberPrizes和moneyPrizes互斥， 同时只会存在一种， 为了兼容之前消息
   */
  public PrizeInfo setNumberPrizes(List<NumberPrize> numberPrizes) {
    this.numberPrizes = numberPrizes;
    return this;
  }

  public void unsetNumberPrizes() {
    this.numberPrizes = null;
  }

  /** Returns true if field numberPrizes is set (has been assigned a value) and false otherwise */
  public boolean isSetNumberPrizes() {
    return this.numberPrizes != null;
  }

  public void setNumberPrizesIsSet(boolean value) {
    if (!value) {
      this.numberPrizes = null;
    }
  }

  public int getMoneyPrizesSize() {
    return (this.MoneyPrizes == null) ? 0 : this.MoneyPrizes.size();
  }

  public java.util.Iterator<MoneyPrize> getMoneyPrizesIterator() {
    return (this.MoneyPrizes == null) ? null : this.MoneyPrizes.iterator();
  }

  public void addToMoneyPrizes(MoneyPrize elem) {
    if (this.MoneyPrizes == null) {
      this.MoneyPrizes = new ArrayList<MoneyPrize>();
    }
    this.MoneyPrizes.add(elem);
  }

  public List<MoneyPrize> getMoneyPrizes() {
    return this.MoneyPrizes;
  }

  public PrizeInfo setMoneyPrizes(List<MoneyPrize> MoneyPrizes) {
    this.MoneyPrizes = MoneyPrizes;
    return this;
  }

  public void unsetMoneyPrizes() {
    this.MoneyPrizes = null;
  }

  /** Returns true if field MoneyPrizes is set (has been assigned a value) and false otherwise */
  public boolean isSetMoneyPrizes() {
    return this.MoneyPrizes != null;
  }

  public void setMoneyPrizesIsSet(boolean value) {
    if (!value) {
      this.MoneyPrizes = null;
    }
  }

  public int getBadgePrizesSize() {
    return (this.badgePrizes == null) ? 0 : this.badgePrizes.size();
  }

  public java.util.Iterator<BadgePrize> getBadgePrizesIterator() {
    return (this.badgePrizes == null) ? null : this.badgePrizes.iterator();
  }

  public void addToBadgePrizes(BadgePrize elem) {
    if (this.badgePrizes == null) {
      this.badgePrizes = new ArrayList<BadgePrize>();
    }
    this.badgePrizes.add(elem);
  }

  public List<BadgePrize> getBadgePrizes() {
    return this.badgePrizes;
  }

  public PrizeInfo setBadgePrizes(List<BadgePrize> badgePrizes) {
    this.badgePrizes = badgePrizes;
    return this;
  }

  public void unsetBadgePrizes() {
    this.badgePrizes = null;
  }

  /** Returns true if field badgePrizes is set (has been assigned a value) and false otherwise */
  public boolean isSetBadgePrizes() {
    return this.badgePrizes != null;
  }

  public void setBadgePrizesIsSet(boolean value) {
    if (!value) {
      this.badgePrizes = null;
    }
  }

  public int getFashionPrizesSize() {
    return (this.fashionPrizes == null) ? 0 : this.fashionPrizes.size();
  }

  public java.util.Iterator<FashionPrize> getFashionPrizesIterator() {
    return (this.fashionPrizes == null) ? null : this.fashionPrizes.iterator();
  }

  public void addToFashionPrizes(FashionPrize elem) {
    if (this.fashionPrizes == null) {
      this.fashionPrizes = new ArrayList<FashionPrize>();
    }
    this.fashionPrizes.add(elem);
  }

  public List<FashionPrize> getFashionPrizes() {
    return this.fashionPrizes;
  }

  public PrizeInfo setFashionPrizes(List<FashionPrize> fashionPrizes) {
    this.fashionPrizes = fashionPrizes;
    return this;
  }

  public void unsetFashionPrizes() {
    this.fashionPrizes = null;
  }

  /** Returns true if field fashionPrizes is set (has been assigned a value) and false otherwise */
  public boolean isSetFashionPrizes() {
    return this.fashionPrizes != null;
  }

  public void setFashionPrizesIsSet(boolean value) {
    if (!value) {
      this.fashionPrizes = null;
    }
  }

  public int getItemPrizesSize() {
    return (this.itemPrizes == null) ? 0 : this.itemPrizes.size();
  }

  public java.util.Iterator<ItemPrize> getItemPrizesIterator() {
    return (this.itemPrizes == null) ? null : this.itemPrizes.iterator();
  }

  public void addToItemPrizes(ItemPrize elem) {
    if (this.itemPrizes == null) {
      this.itemPrizes = new ArrayList<ItemPrize>();
    }
    this.itemPrizes.add(elem);
  }

  public List<ItemPrize> getItemPrizes() {
    return this.itemPrizes;
  }

  public PrizeInfo setItemPrizes(List<ItemPrize> itemPrizes) {
    this.itemPrizes = itemPrizes;
    return this;
  }

  public void unsetItemPrizes() {
    this.itemPrizes = null;
  }

  /** Returns true if field itemPrizes is set (has been assigned a value) and false otherwise */
  public boolean isSetItemPrizes() {
    return this.itemPrizes != null;
  }

  public void setItemPrizesIsSet(boolean value) {
    if (!value) {
      this.itemPrizes = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NUMBER_PRIZES:
      if (value == null) {
        unsetNumberPrizes();
      } else {
        setNumberPrizes((List<NumberPrize>)value);
      }
      break;

    case MONEY_PRIZES:
      if (value == null) {
        unsetMoneyPrizes();
      } else {
        setMoneyPrizes((List<MoneyPrize>)value);
      }
      break;

    case BADGE_PRIZES:
      if (value == null) {
        unsetBadgePrizes();
      } else {
        setBadgePrizes((List<BadgePrize>)value);
      }
      break;

    case FASHION_PRIZES:
      if (value == null) {
        unsetFashionPrizes();
      } else {
        setFashionPrizes((List<FashionPrize>)value);
      }
      break;

    case ITEM_PRIZES:
      if (value == null) {
        unsetItemPrizes();
      } else {
        setItemPrizes((List<ItemPrize>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NUMBER_PRIZES:
      return getNumberPrizes();

    case MONEY_PRIZES:
      return getMoneyPrizes();

    case BADGE_PRIZES:
      return getBadgePrizes();

    case FASHION_PRIZES:
      return getFashionPrizes();

    case ITEM_PRIZES:
      return getItemPrizes();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NUMBER_PRIZES:
      return isSetNumberPrizes();
    case MONEY_PRIZES:
      return isSetMoneyPrizes();
    case BADGE_PRIZES:
      return isSetBadgePrizes();
    case FASHION_PRIZES:
      return isSetFashionPrizes();
    case ITEM_PRIZES:
      return isSetItemPrizes();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PrizeInfo)
      return this.equals((PrizeInfo)that);
    return false;
  }

  public boolean equals(PrizeInfo that) {
    if (that == null)
      return false;

    boolean this_present_numberPrizes = true && this.isSetNumberPrizes();
    boolean that_present_numberPrizes = true && that.isSetNumberPrizes();
    if (this_present_numberPrizes || that_present_numberPrizes) {
      if (!(this_present_numberPrizes && that_present_numberPrizes))
        return false;
      if (!this.numberPrizes.equals(that.numberPrizes))
        return false;
    }

    boolean this_present_MoneyPrizes = true && this.isSetMoneyPrizes();
    boolean that_present_MoneyPrizes = true && that.isSetMoneyPrizes();
    if (this_present_MoneyPrizes || that_present_MoneyPrizes) {
      if (!(this_present_MoneyPrizes && that_present_MoneyPrizes))
        return false;
      if (!this.MoneyPrizes.equals(that.MoneyPrizes))
        return false;
    }

    boolean this_present_badgePrizes = true && this.isSetBadgePrizes();
    boolean that_present_badgePrizes = true && that.isSetBadgePrizes();
    if (this_present_badgePrizes || that_present_badgePrizes) {
      if (!(this_present_badgePrizes && that_present_badgePrizes))
        return false;
      if (!this.badgePrizes.equals(that.badgePrizes))
        return false;
    }

    boolean this_present_fashionPrizes = true && this.isSetFashionPrizes();
    boolean that_present_fashionPrizes = true && that.isSetFashionPrizes();
    if (this_present_fashionPrizes || that_present_fashionPrizes) {
      if (!(this_present_fashionPrizes && that_present_fashionPrizes))
        return false;
      if (!this.fashionPrizes.equals(that.fashionPrizes))
        return false;
    }

    boolean this_present_itemPrizes = true && this.isSetItemPrizes();
    boolean that_present_itemPrizes = true && that.isSetItemPrizes();
    if (this_present_itemPrizes || that_present_itemPrizes) {
      if (!(this_present_itemPrizes && that_present_itemPrizes))
        return false;
      if (!this.itemPrizes.equals(that.itemPrizes))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(PrizeInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    PrizeInfo typedOther = (PrizeInfo)other;

    lastComparison = Boolean.valueOf(isSetNumberPrizes()).compareTo(typedOther.isSetNumberPrizes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumberPrizes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numberPrizes, typedOther.numberPrizes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMoneyPrizes()).compareTo(typedOther.isSetMoneyPrizes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMoneyPrizes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.MoneyPrizes, typedOther.MoneyPrizes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBadgePrizes()).compareTo(typedOther.isSetBadgePrizes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBadgePrizes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.badgePrizes, typedOther.badgePrizes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFashionPrizes()).compareTo(typedOther.isSetFashionPrizes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFashionPrizes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fashionPrizes, typedOther.fashionPrizes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItemPrizes()).compareTo(typedOther.isSetItemPrizes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemPrizes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemPrizes, typedOther.itemPrizes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PrizeInfo(");
    boolean first = true;

    if (isSetNumberPrizes()) {
      sb.append("numberPrizes:");
      if (this.numberPrizes == null) {
        sb.append("null");
      } else {
        sb.append(this.numberPrizes);
      }
      first = false;
    }
    if (isSetMoneyPrizes()) {
      if (!first) sb.append(", ");
      sb.append("MoneyPrizes:");
      if (this.MoneyPrizes == null) {
        sb.append("null");
      } else {
        sb.append(this.MoneyPrizes);
      }
      first = false;
    }
    if (isSetBadgePrizes()) {
      if (!first) sb.append(", ");
      sb.append("badgePrizes:");
      if (this.badgePrizes == null) {
        sb.append("null");
      } else {
        sb.append(this.badgePrizes);
      }
      first = false;
    }
    if (isSetFashionPrizes()) {
      if (!first) sb.append(", ");
      sb.append("fashionPrizes:");
      if (this.fashionPrizes == null) {
        sb.append("null");
      } else {
        sb.append(this.fashionPrizes);
      }
      first = false;
    }
    if (isSetItemPrizes()) {
      if (!first) sb.append(", ");
      sb.append("itemPrizes:");
      if (this.itemPrizes == null) {
        sb.append("null");
      } else {
        sb.append(this.itemPrizes);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PrizeInfoStandardSchemeFactory implements SchemeFactory {
    public PrizeInfoStandardScheme getScheme() {
      return new PrizeInfoStandardScheme();
    }
  }

  private static class PrizeInfoStandardScheme extends StandardScheme<PrizeInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PrizeInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NUMBER_PRIZES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.numberPrizes = new ArrayList<NumberPrize>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  NumberPrize _elem2; // required
                  _elem2 = new NumberPrize();
                  _elem2.read(iprot);
                  struct.numberPrizes.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setNumberPrizesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MONEY_PRIZES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.MoneyPrizes = new ArrayList<MoneyPrize>(_list3.size);
                for (int _i4 = 0; _i4 < _list3.size; ++_i4)
                {
                  MoneyPrize _elem5; // required
                  _elem5 = new MoneyPrize();
                  _elem5.read(iprot);
                  struct.MoneyPrizes.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setMoneyPrizesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BADGE_PRIZES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.badgePrizes = new ArrayList<BadgePrize>(_list6.size);
                for (int _i7 = 0; _i7 < _list6.size; ++_i7)
                {
                  BadgePrize _elem8; // required
                  _elem8 = new BadgePrize();
                  _elem8.read(iprot);
                  struct.badgePrizes.add(_elem8);
                }
                iprot.readListEnd();
              }
              struct.setBadgePrizesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FASHION_PRIZES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list9 = iprot.readListBegin();
                struct.fashionPrizes = new ArrayList<FashionPrize>(_list9.size);
                for (int _i10 = 0; _i10 < _list9.size; ++_i10)
                {
                  FashionPrize _elem11; // required
                  _elem11 = new FashionPrize();
                  _elem11.read(iprot);
                  struct.fashionPrizes.add(_elem11);
                }
                iprot.readListEnd();
              }
              struct.setFashionPrizesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ITEM_PRIZES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
                struct.itemPrizes = new ArrayList<ItemPrize>(_list12.size);
                for (int _i13 = 0; _i13 < _list12.size; ++_i13)
                {
                  ItemPrize _elem14; // required
                  _elem14 = new ItemPrize();
                  _elem14.read(iprot);
                  struct.itemPrizes.add(_elem14);
                }
                iprot.readListEnd();
              }
              struct.setItemPrizesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PrizeInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.numberPrizes != null) {
        if (struct.isSetNumberPrizes()) {
          oprot.writeFieldBegin(NUMBER_PRIZES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.numberPrizes.size()));
            for (NumberPrize _iter15 : struct.numberPrizes)
            {
              _iter15.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.MoneyPrizes != null) {
        if (struct.isSetMoneyPrizes()) {
          oprot.writeFieldBegin(MONEY_PRIZES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.MoneyPrizes.size()));
            for (MoneyPrize _iter16 : struct.MoneyPrizes)
            {
              _iter16.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.badgePrizes != null) {
        if (struct.isSetBadgePrizes()) {
          oprot.writeFieldBegin(BADGE_PRIZES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.badgePrizes.size()));
            for (BadgePrize _iter17 : struct.badgePrizes)
            {
              _iter17.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.fashionPrizes != null) {
        if (struct.isSetFashionPrizes()) {
          oprot.writeFieldBegin(FASHION_PRIZES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.fashionPrizes.size()));
            for (FashionPrize _iter18 : struct.fashionPrizes)
            {
              _iter18.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.itemPrizes != null) {
        if (struct.isSetItemPrizes()) {
          oprot.writeFieldBegin(ITEM_PRIZES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.itemPrizes.size()));
            for (ItemPrize _iter19 : struct.itemPrizes)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PrizeInfoTupleSchemeFactory implements SchemeFactory {
    public PrizeInfoTupleScheme getScheme() {
      return new PrizeInfoTupleScheme();
    }
  }

  private static class PrizeInfoTupleScheme extends TupleScheme<PrizeInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PrizeInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetNumberPrizes()) {
        optionals.set(0);
      }
      if (struct.isSetMoneyPrizes()) {
        optionals.set(1);
      }
      if (struct.isSetBadgePrizes()) {
        optionals.set(2);
      }
      if (struct.isSetFashionPrizes()) {
        optionals.set(3);
      }
      if (struct.isSetItemPrizes()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetNumberPrizes()) {
        {
          oprot.writeI32(struct.numberPrizes.size());
          for (NumberPrize _iter20 : struct.numberPrizes)
          {
            _iter20.write(oprot);
          }
        }
      }
      if (struct.isSetMoneyPrizes()) {
        {
          oprot.writeI32(struct.MoneyPrizes.size());
          for (MoneyPrize _iter21 : struct.MoneyPrizes)
          {
            _iter21.write(oprot);
          }
        }
      }
      if (struct.isSetBadgePrizes()) {
        {
          oprot.writeI32(struct.badgePrizes.size());
          for (BadgePrize _iter22 : struct.badgePrizes)
          {
            _iter22.write(oprot);
          }
        }
      }
      if (struct.isSetFashionPrizes()) {
        {
          oprot.writeI32(struct.fashionPrizes.size());
          for (FashionPrize _iter23 : struct.fashionPrizes)
          {
            _iter23.write(oprot);
          }
        }
      }
      if (struct.isSetItemPrizes()) {
        {
          oprot.writeI32(struct.itemPrizes.size());
          for (ItemPrize _iter24 : struct.itemPrizes)
          {
            _iter24.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PrizeInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list25 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.numberPrizes = new ArrayList<NumberPrize>(_list25.size);
          for (int _i26 = 0; _i26 < _list25.size; ++_i26)
          {
            NumberPrize _elem27; // required
            _elem27 = new NumberPrize();
            _elem27.read(iprot);
            struct.numberPrizes.add(_elem27);
          }
        }
        struct.setNumberPrizesIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list28 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.MoneyPrizes = new ArrayList<MoneyPrize>(_list28.size);
          for (int _i29 = 0; _i29 < _list28.size; ++_i29)
          {
            MoneyPrize _elem30; // required
            _elem30 = new MoneyPrize();
            _elem30.read(iprot);
            struct.MoneyPrizes.add(_elem30);
          }
        }
        struct.setMoneyPrizesIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.badgePrizes = new ArrayList<BadgePrize>(_list31.size);
          for (int _i32 = 0; _i32 < _list31.size; ++_i32)
          {
            BadgePrize _elem33; // required
            _elem33 = new BadgePrize();
            _elem33.read(iprot);
            struct.badgePrizes.add(_elem33);
          }
        }
        struct.setBadgePrizesIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list34 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.fashionPrizes = new ArrayList<FashionPrize>(_list34.size);
          for (int _i35 = 0; _i35 < _list34.size; ++_i35)
          {
            FashionPrize _elem36; // required
            _elem36 = new FashionPrize();
            _elem36.read(iprot);
            struct.fashionPrizes.add(_elem36);
          }
        }
        struct.setFashionPrizesIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.itemPrizes = new ArrayList<ItemPrize>(_list37.size);
          for (int _i38 = 0; _i38 < _list37.size; ++_i38)
          {
            ItemPrize _elem39; // required
            _elem39 = new ItemPrize();
            _elem39.read(iprot);
            struct.itemPrizes.add(_elem39);
          }
        }
        struct.setItemPrizesIsSet(true);
      }
    }
  }

}

