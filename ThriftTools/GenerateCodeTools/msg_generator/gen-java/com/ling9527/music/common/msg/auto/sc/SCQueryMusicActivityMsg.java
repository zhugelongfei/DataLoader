/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SCQueryMusicActivityMsg implements org.apache.thrift.TBase<SCQueryMusicActivityMsg, SCQueryMusicActivityMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCQueryMusicActivityMsg");

  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField MUSIC_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("musicIdList", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField PRIZES_FIELD_DESC = new org.apache.thrift.protocol.TField("prizes", org.apache.thrift.protocol.TType.LIST, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCQueryMusicActivityMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCQueryMusicActivityMsgTupleSchemeFactory());
  }

  public String title; // required
  public long startTime; // required
  public long endTime; // required
  public List<Short> musicIdList; // required
  public List<List<com.ling9527.music.common.msg.auto.MusicRankPrize>> prizes; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TITLE((short)1, "title"),
    START_TIME((short)2, "startTime"),
    END_TIME((short)3, "endTime"),
    MUSIC_ID_LIST((short)4, "musicIdList"),
    PRIZES((short)5, "prizes");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TITLE
          return TITLE;
        case 2: // START_TIME
          return START_TIME;
        case 3: // END_TIME
          return END_TIME;
        case 4: // MUSIC_ID_LIST
          return MUSIC_ID_LIST;
        case 5: // PRIZES
          return PRIZES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STARTTIME_ISSET_ID = 0;
  private static final int __ENDTIME_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MUSIC_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("musicIdList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16))));
    tmpMap.put(_Fields.PRIZES, new org.apache.thrift.meta_data.FieldMetaData("prizes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.MusicRankPrize.class)))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCQueryMusicActivityMsg.class, metaDataMap);
  }

  public SCQueryMusicActivityMsg() {
  }

  public SCQueryMusicActivityMsg(
    String title,
    long startTime,
    long endTime,
    List<Short> musicIdList,
    List<List<com.ling9527.music.common.msg.auto.MusicRankPrize>> prizes)
  {
    this();
    this.title = title;
    this.startTime = startTime;
    setStartTimeIsSet(true);
    this.endTime = endTime;
    setEndTimeIsSet(true);
    this.musicIdList = musicIdList;
    this.prizes = prizes;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCQueryMusicActivityMsg(SCQueryMusicActivityMsg other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    this.startTime = other.startTime;
    this.endTime = other.endTime;
    if (other.isSetMusicIdList()) {
      List<Short> __this__musicIdList = new ArrayList<Short>();
      for (Short other_element : other.musicIdList) {
        __this__musicIdList.add(other_element);
      }
      this.musicIdList = __this__musicIdList;
    }
    if (other.isSetPrizes()) {
      List<List<com.ling9527.music.common.msg.auto.MusicRankPrize>> __this__prizes = new ArrayList<List<com.ling9527.music.common.msg.auto.MusicRankPrize>>();
      for (List<com.ling9527.music.common.msg.auto.MusicRankPrize> other_element : other.prizes) {
        List<com.ling9527.music.common.msg.auto.MusicRankPrize> __this__prizes_copy = new ArrayList<com.ling9527.music.common.msg.auto.MusicRankPrize>();
        for (com.ling9527.music.common.msg.auto.MusicRankPrize other_element_element : other_element) {
          __this__prizes_copy.add(new com.ling9527.music.common.msg.auto.MusicRankPrize(other_element_element));
        }
        __this__prizes.add(__this__prizes_copy);
      }
      this.prizes = __this__prizes;
    }
  }

  public SCQueryMusicActivityMsg deepCopy() {
    return new SCQueryMusicActivityMsg(this);
  }

  @Override
  public void clear() {
    this.title = null;
    setStartTimeIsSet(false);
    this.startTime = 0;
    setEndTimeIsSet(false);
    this.endTime = 0;
    this.musicIdList = null;
    this.prizes = null;
  }

  public String getTitle() {
    return this.title;
  }

  public SCQueryMusicActivityMsg setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public long getStartTime() {
    return this.startTime;
  }

  public SCQueryMusicActivityMsg setStartTime(long startTime) {
    this.startTime = startTime;
    setStartTimeIsSet(true);
    return this;
  }

  public void unsetStartTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  public void setStartTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
  }

  public long getEndTime() {
    return this.endTime;
  }

  public SCQueryMusicActivityMsg setEndTime(long endTime) {
    this.endTime = endTime;
    setEndTimeIsSet(true);
    return this;
  }

  public void unsetEndTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  public void setEndTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
  }

  public int getMusicIdListSize() {
    return (this.musicIdList == null) ? 0 : this.musicIdList.size();
  }

  public java.util.Iterator<Short> getMusicIdListIterator() {
    return (this.musicIdList == null) ? null : this.musicIdList.iterator();
  }

  public void addToMusicIdList(short elem) {
    if (this.musicIdList == null) {
      this.musicIdList = new ArrayList<Short>();
    }
    this.musicIdList.add(elem);
  }

  public List<Short> getMusicIdList() {
    return this.musicIdList;
  }

  public SCQueryMusicActivityMsg setMusicIdList(List<Short> musicIdList) {
    this.musicIdList = musicIdList;
    return this;
  }

  public void unsetMusicIdList() {
    this.musicIdList = null;
  }

  /** Returns true if field musicIdList is set (has been assigned a value) and false otherwise */
  public boolean isSetMusicIdList() {
    return this.musicIdList != null;
  }

  public void setMusicIdListIsSet(boolean value) {
    if (!value) {
      this.musicIdList = null;
    }
  }

  public int getPrizesSize() {
    return (this.prizes == null) ? 0 : this.prizes.size();
  }

  public java.util.Iterator<List<com.ling9527.music.common.msg.auto.MusicRankPrize>> getPrizesIterator() {
    return (this.prizes == null) ? null : this.prizes.iterator();
  }

  public void addToPrizes(List<com.ling9527.music.common.msg.auto.MusicRankPrize> elem) {
    if (this.prizes == null) {
      this.prizes = new ArrayList<List<com.ling9527.music.common.msg.auto.MusicRankPrize>>();
    }
    this.prizes.add(elem);
  }

  public List<List<com.ling9527.music.common.msg.auto.MusicRankPrize>> getPrizes() {
    return this.prizes;
  }

  public SCQueryMusicActivityMsg setPrizes(List<List<com.ling9527.music.common.msg.auto.MusicRankPrize>> prizes) {
    this.prizes = prizes;
    return this;
  }

  public void unsetPrizes() {
    this.prizes = null;
  }

  /** Returns true if field prizes is set (has been assigned a value) and false otherwise */
  public boolean isSetPrizes() {
    return this.prizes != null;
  }

  public void setPrizesIsSet(boolean value) {
    if (!value) {
      this.prizes = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((Long)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((Long)value);
      }
      break;

    case MUSIC_ID_LIST:
      if (value == null) {
        unsetMusicIdList();
      } else {
        setMusicIdList((List<Short>)value);
      }
      break;

    case PRIZES:
      if (value == null) {
        unsetPrizes();
      } else {
        setPrizes((List<List<com.ling9527.music.common.msg.auto.MusicRankPrize>>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TITLE:
      return getTitle();

    case START_TIME:
      return Long.valueOf(getStartTime());

    case END_TIME:
      return Long.valueOf(getEndTime());

    case MUSIC_ID_LIST:
      return getMusicIdList();

    case PRIZES:
      return getPrizes();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TITLE:
      return isSetTitle();
    case START_TIME:
      return isSetStartTime();
    case END_TIME:
      return isSetEndTime();
    case MUSIC_ID_LIST:
      return isSetMusicIdList();
    case PRIZES:
      return isSetPrizes();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCQueryMusicActivityMsg)
      return this.equals((SCQueryMusicActivityMsg)that);
    return false;
  }

  public boolean equals(SCQueryMusicActivityMsg that) {
    if (that == null)
      return false;

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_startTime = true;
    boolean that_present_startTime = true;
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (this.startTime != that.startTime)
        return false;
    }

    boolean this_present_endTime = true;
    boolean that_present_endTime = true;
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (this.endTime != that.endTime)
        return false;
    }

    boolean this_present_musicIdList = true && this.isSetMusicIdList();
    boolean that_present_musicIdList = true && that.isSetMusicIdList();
    if (this_present_musicIdList || that_present_musicIdList) {
      if (!(this_present_musicIdList && that_present_musicIdList))
        return false;
      if (!this.musicIdList.equals(that.musicIdList))
        return false;
    }

    boolean this_present_prizes = true && this.isSetPrizes();
    boolean that_present_prizes = true && that.isSetPrizes();
    if (this_present_prizes || that_present_prizes) {
      if (!(this_present_prizes && that_present_prizes))
        return false;
      if (!this.prizes.equals(that.prizes))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCQueryMusicActivityMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCQueryMusicActivityMsg typedOther = (SCQueryMusicActivityMsg)other;

    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(typedOther.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, typedOther.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(typedOther.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, typedOther.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(typedOther.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, typedOther.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMusicIdList()).compareTo(typedOther.isSetMusicIdList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMusicIdList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.musicIdList, typedOther.musicIdList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrizes()).compareTo(typedOther.isSetPrizes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrizes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prizes, typedOther.prizes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCQueryMusicActivityMsg(");
    boolean first = true;

    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("startTime:");
    sb.append(this.startTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endTime:");
    sb.append(this.endTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("musicIdList:");
    if (this.musicIdList == null) {
      sb.append("null");
    } else {
      sb.append(this.musicIdList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("prizes:");
    if (this.prizes == null) {
      sb.append("null");
    } else {
      sb.append(this.prizes);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCQueryMusicActivityMsgStandardSchemeFactory implements SchemeFactory {
    public SCQueryMusicActivityMsgStandardScheme getScheme() {
      return new SCQueryMusicActivityMsgStandardScheme();
    }
  }

  private static class SCQueryMusicActivityMsgStandardScheme extends StandardScheme<SCQueryMusicActivityMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCQueryMusicActivityMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.startTime = iprot.readI64();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.endTime = iprot.readI64();
              struct.setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MUSIC_ID_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list20 = iprot.readListBegin();
                struct.musicIdList = new ArrayList<Short>(_list20.size);
                for (int _i21 = 0; _i21 < _list20.size; ++_i21)
                {
                  short _elem22; // required
                  _elem22 = iprot.readI16();
                  struct.musicIdList.add(_elem22);
                }
                iprot.readListEnd();
              }
              struct.setMusicIdListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PRIZES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list23 = iprot.readListBegin();
                struct.prizes = new ArrayList<List<com.ling9527.music.common.msg.auto.MusicRankPrize>>(_list23.size);
                for (int _i24 = 0; _i24 < _list23.size; ++_i24)
                {
                  List<com.ling9527.music.common.msg.auto.MusicRankPrize> _elem25; // required
                  {
                    org.apache.thrift.protocol.TList _list26 = iprot.readListBegin();
                    _elem25 = new ArrayList<com.ling9527.music.common.msg.auto.MusicRankPrize>(_list26.size);
                    for (int _i27 = 0; _i27 < _list26.size; ++_i27)
                    {
                      com.ling9527.music.common.msg.auto.MusicRankPrize _elem28; // required
                      _elem28 = new com.ling9527.music.common.msg.auto.MusicRankPrize();
                      _elem28.read(iprot);
                      _elem25.add(_elem28);
                    }
                    iprot.readListEnd();
                  }
                  struct.prizes.add(_elem25);
                }
                iprot.readListEnd();
              }
              struct.setPrizesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCQueryMusicActivityMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(struct.title);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(START_TIME_FIELD_DESC);
      oprot.writeI64(struct.startTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(END_TIME_FIELD_DESC);
      oprot.writeI64(struct.endTime);
      oprot.writeFieldEnd();
      if (struct.musicIdList != null) {
        oprot.writeFieldBegin(MUSIC_ID_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, struct.musicIdList.size()));
          for (short _iter29 : struct.musicIdList)
          {
            oprot.writeI16(_iter29);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.prizes != null) {
        oprot.writeFieldBegin(PRIZES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.prizes.size()));
          for (List<com.ling9527.music.common.msg.auto.MusicRankPrize> _iter30 : struct.prizes)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter30.size()));
              for (com.ling9527.music.common.msg.auto.MusicRankPrize _iter31 : _iter30)
              {
                _iter31.write(oprot);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCQueryMusicActivityMsgTupleSchemeFactory implements SchemeFactory {
    public SCQueryMusicActivityMsgTupleScheme getScheme() {
      return new SCQueryMusicActivityMsgTupleScheme();
    }
  }

  private static class SCQueryMusicActivityMsgTupleScheme extends TupleScheme<SCQueryMusicActivityMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCQueryMusicActivityMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTitle()) {
        optionals.set(0);
      }
      if (struct.isSetStartTime()) {
        optionals.set(1);
      }
      if (struct.isSetEndTime()) {
        optionals.set(2);
      }
      if (struct.isSetMusicIdList()) {
        optionals.set(3);
      }
      if (struct.isSetPrizes()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetStartTime()) {
        oprot.writeI64(struct.startTime);
      }
      if (struct.isSetEndTime()) {
        oprot.writeI64(struct.endTime);
      }
      if (struct.isSetMusicIdList()) {
        {
          oprot.writeI32(struct.musicIdList.size());
          for (short _iter32 : struct.musicIdList)
          {
            oprot.writeI16(_iter32);
          }
        }
      }
      if (struct.isSetPrizes()) {
        {
          oprot.writeI32(struct.prizes.size());
          for (List<com.ling9527.music.common.msg.auto.MusicRankPrize> _iter33 : struct.prizes)
          {
            {
              oprot.writeI32(_iter33.size());
              for (com.ling9527.music.common.msg.auto.MusicRankPrize _iter34 : _iter33)
              {
                _iter34.write(oprot);
              }
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCQueryMusicActivityMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(1)) {
        struct.startTime = iprot.readI64();
        struct.setStartTimeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.endTime = iprot.readI64();
        struct.setEndTimeIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list35 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, iprot.readI32());
          struct.musicIdList = new ArrayList<Short>(_list35.size);
          for (int _i36 = 0; _i36 < _list35.size; ++_i36)
          {
            short _elem37; // required
            _elem37 = iprot.readI16();
            struct.musicIdList.add(_elem37);
          }
        }
        struct.setMusicIdListIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list38 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.prizes = new ArrayList<List<com.ling9527.music.common.msg.auto.MusicRankPrize>>(_list38.size);
          for (int _i39 = 0; _i39 < _list38.size; ++_i39)
          {
            List<com.ling9527.music.common.msg.auto.MusicRankPrize> _elem40; // required
            {
              org.apache.thrift.protocol.TList _list41 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
              _elem40 = new ArrayList<com.ling9527.music.common.msg.auto.MusicRankPrize>(_list41.size);
              for (int _i42 = 0; _i42 < _list41.size; ++_i42)
              {
                com.ling9527.music.common.msg.auto.MusicRankPrize _elem43; // required
                _elem43 = new com.ling9527.music.common.msg.auto.MusicRankPrize();
                _elem43.read(iprot);
                _elem40.add(_elem43);
              }
            }
            struct.prizes.add(_elem40);
          }
        }
        struct.setPrizesIsSet(true);
      }
    }
  }

}

