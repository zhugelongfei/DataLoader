/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SCInvitedJoinDanceRoomMsg implements org.apache.thrift.TBase<SCInvitedJoinDanceRoomMsg, SCInvitedJoinDanceRoomMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCInvitedJoinDanceRoomMsg");

  private static final org.apache.thrift.protocol.TField ROOM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("roomType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ROOM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("roomId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField INVITER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("inviterName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField INVITER_CHAR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("inviterCharId", org.apache.thrift.protocol.TType.I64, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCInvitedJoinDanceRoomMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCInvitedJoinDanceRoomMsgTupleSchemeFactory());
  }

  /**
   * 
   * @see com.ling9527.music.common.msg.auto.CreateRoomType
   */
  public com.ling9527.music.common.msg.auto.CreateRoomType roomType; // required
  public int roomId; // required
  public String inviterName; // required
  public long inviterCharId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see com.ling9527.music.common.msg.auto.CreateRoomType
     */
    ROOM_TYPE((short)1, "roomType"),
    ROOM_ID((short)2, "roomId"),
    INVITER_NAME((short)3, "inviterName"),
    INVITER_CHAR_ID((short)4, "inviterCharId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ROOM_TYPE
          return ROOM_TYPE;
        case 2: // ROOM_ID
          return ROOM_ID;
        case 3: // INVITER_NAME
          return INVITER_NAME;
        case 4: // INVITER_CHAR_ID
          return INVITER_CHAR_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ROOMID_ISSET_ID = 0;
  private static final int __INVITERCHARID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ROOM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("roomType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.ling9527.music.common.msg.auto.CreateRoomType.class)));
    tmpMap.put(_Fields.ROOM_ID, new org.apache.thrift.meta_data.FieldMetaData("roomId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INVITER_NAME, new org.apache.thrift.meta_data.FieldMetaData("inviterName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INVITER_CHAR_ID, new org.apache.thrift.meta_data.FieldMetaData("inviterCharId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCInvitedJoinDanceRoomMsg.class, metaDataMap);
  }

  public SCInvitedJoinDanceRoomMsg() {
  }

  public SCInvitedJoinDanceRoomMsg(
    com.ling9527.music.common.msg.auto.CreateRoomType roomType,
    int roomId,
    String inviterName,
    long inviterCharId)
  {
    this();
    this.roomType = roomType;
    this.roomId = roomId;
    setRoomIdIsSet(true);
    this.inviterName = inviterName;
    this.inviterCharId = inviterCharId;
    setInviterCharIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCInvitedJoinDanceRoomMsg(SCInvitedJoinDanceRoomMsg other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetRoomType()) {
      this.roomType = other.roomType;
    }
    this.roomId = other.roomId;
    if (other.isSetInviterName()) {
      this.inviterName = other.inviterName;
    }
    this.inviterCharId = other.inviterCharId;
  }

  public SCInvitedJoinDanceRoomMsg deepCopy() {
    return new SCInvitedJoinDanceRoomMsg(this);
  }

  @Override
  public void clear() {
    this.roomType = null;
    setRoomIdIsSet(false);
    this.roomId = 0;
    this.inviterName = null;
    setInviterCharIdIsSet(false);
    this.inviterCharId = 0;
  }

  /**
   * 
   * @see com.ling9527.music.common.msg.auto.CreateRoomType
   */
  public com.ling9527.music.common.msg.auto.CreateRoomType getRoomType() {
    return this.roomType;
  }

  /**
   * 
   * @see com.ling9527.music.common.msg.auto.CreateRoomType
   */
  public SCInvitedJoinDanceRoomMsg setRoomType(com.ling9527.music.common.msg.auto.CreateRoomType roomType) {
    this.roomType = roomType;
    return this;
  }

  public void unsetRoomType() {
    this.roomType = null;
  }

  /** Returns true if field roomType is set (has been assigned a value) and false otherwise */
  public boolean isSetRoomType() {
    return this.roomType != null;
  }

  public void setRoomTypeIsSet(boolean value) {
    if (!value) {
      this.roomType = null;
    }
  }

  public int getRoomId() {
    return this.roomId;
  }

  public SCInvitedJoinDanceRoomMsg setRoomId(int roomId) {
    this.roomId = roomId;
    setRoomIdIsSet(true);
    return this;
  }

  public void unsetRoomId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROOMID_ISSET_ID);
  }

  /** Returns true if field roomId is set (has been assigned a value) and false otherwise */
  public boolean isSetRoomId() {
    return EncodingUtils.testBit(__isset_bitfield, __ROOMID_ISSET_ID);
  }

  public void setRoomIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROOMID_ISSET_ID, value);
  }

  public String getInviterName() {
    return this.inviterName;
  }

  public SCInvitedJoinDanceRoomMsg setInviterName(String inviterName) {
    this.inviterName = inviterName;
    return this;
  }

  public void unsetInviterName() {
    this.inviterName = null;
  }

  /** Returns true if field inviterName is set (has been assigned a value) and false otherwise */
  public boolean isSetInviterName() {
    return this.inviterName != null;
  }

  public void setInviterNameIsSet(boolean value) {
    if (!value) {
      this.inviterName = null;
    }
  }

  public long getInviterCharId() {
    return this.inviterCharId;
  }

  public SCInvitedJoinDanceRoomMsg setInviterCharId(long inviterCharId) {
    this.inviterCharId = inviterCharId;
    setInviterCharIdIsSet(true);
    return this;
  }

  public void unsetInviterCharId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INVITERCHARID_ISSET_ID);
  }

  /** Returns true if field inviterCharId is set (has been assigned a value) and false otherwise */
  public boolean isSetInviterCharId() {
    return EncodingUtils.testBit(__isset_bitfield, __INVITERCHARID_ISSET_ID);
  }

  public void setInviterCharIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INVITERCHARID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ROOM_TYPE:
      if (value == null) {
        unsetRoomType();
      } else {
        setRoomType((com.ling9527.music.common.msg.auto.CreateRoomType)value);
      }
      break;

    case ROOM_ID:
      if (value == null) {
        unsetRoomId();
      } else {
        setRoomId((Integer)value);
      }
      break;

    case INVITER_NAME:
      if (value == null) {
        unsetInviterName();
      } else {
        setInviterName((String)value);
      }
      break;

    case INVITER_CHAR_ID:
      if (value == null) {
        unsetInviterCharId();
      } else {
        setInviterCharId((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ROOM_TYPE:
      return getRoomType();

    case ROOM_ID:
      return Integer.valueOf(getRoomId());

    case INVITER_NAME:
      return getInviterName();

    case INVITER_CHAR_ID:
      return Long.valueOf(getInviterCharId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ROOM_TYPE:
      return isSetRoomType();
    case ROOM_ID:
      return isSetRoomId();
    case INVITER_NAME:
      return isSetInviterName();
    case INVITER_CHAR_ID:
      return isSetInviterCharId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCInvitedJoinDanceRoomMsg)
      return this.equals((SCInvitedJoinDanceRoomMsg)that);
    return false;
  }

  public boolean equals(SCInvitedJoinDanceRoomMsg that) {
    if (that == null)
      return false;

    boolean this_present_roomType = true && this.isSetRoomType();
    boolean that_present_roomType = true && that.isSetRoomType();
    if (this_present_roomType || that_present_roomType) {
      if (!(this_present_roomType && that_present_roomType))
        return false;
      if (!this.roomType.equals(that.roomType))
        return false;
    }

    boolean this_present_roomId = true;
    boolean that_present_roomId = true;
    if (this_present_roomId || that_present_roomId) {
      if (!(this_present_roomId && that_present_roomId))
        return false;
      if (this.roomId != that.roomId)
        return false;
    }

    boolean this_present_inviterName = true && this.isSetInviterName();
    boolean that_present_inviterName = true && that.isSetInviterName();
    if (this_present_inviterName || that_present_inviterName) {
      if (!(this_present_inviterName && that_present_inviterName))
        return false;
      if (!this.inviterName.equals(that.inviterName))
        return false;
    }

    boolean this_present_inviterCharId = true;
    boolean that_present_inviterCharId = true;
    if (this_present_inviterCharId || that_present_inviterCharId) {
      if (!(this_present_inviterCharId && that_present_inviterCharId))
        return false;
      if (this.inviterCharId != that.inviterCharId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCInvitedJoinDanceRoomMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCInvitedJoinDanceRoomMsg typedOther = (SCInvitedJoinDanceRoomMsg)other;

    lastComparison = Boolean.valueOf(isSetRoomType()).compareTo(typedOther.isSetRoomType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoomType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roomType, typedOther.roomType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRoomId()).compareTo(typedOther.isSetRoomId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoomId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roomId, typedOther.roomId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInviterName()).compareTo(typedOther.isSetInviterName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInviterName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inviterName, typedOther.inviterName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInviterCharId()).compareTo(typedOther.isSetInviterCharId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInviterCharId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inviterCharId, typedOther.inviterCharId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCInvitedJoinDanceRoomMsg(");
    boolean first = true;

    sb.append("roomType:");
    if (this.roomType == null) {
      sb.append("null");
    } else {
      sb.append(this.roomType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("roomId:");
    sb.append(this.roomId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("inviterName:");
    if (this.inviterName == null) {
      sb.append("null");
    } else {
      sb.append(this.inviterName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("inviterCharId:");
    sb.append(this.inviterCharId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCInvitedJoinDanceRoomMsgStandardSchemeFactory implements SchemeFactory {
    public SCInvitedJoinDanceRoomMsgStandardScheme getScheme() {
      return new SCInvitedJoinDanceRoomMsgStandardScheme();
    }
  }

  private static class SCInvitedJoinDanceRoomMsgStandardScheme extends StandardScheme<SCInvitedJoinDanceRoomMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCInvitedJoinDanceRoomMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ROOM_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.roomType = com.ling9527.music.common.msg.auto.CreateRoomType.findByValue(iprot.readI32());
              struct.setRoomTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ROOM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.roomId = iprot.readI32();
              struct.setRoomIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INVITER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.inviterName = iprot.readString();
              struct.setInviterNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INVITER_CHAR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.inviterCharId = iprot.readI64();
              struct.setInviterCharIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCInvitedJoinDanceRoomMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.roomType != null) {
        oprot.writeFieldBegin(ROOM_TYPE_FIELD_DESC);
        oprot.writeI32(struct.roomType.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ROOM_ID_FIELD_DESC);
      oprot.writeI32(struct.roomId);
      oprot.writeFieldEnd();
      if (struct.inviterName != null) {
        oprot.writeFieldBegin(INVITER_NAME_FIELD_DESC);
        oprot.writeString(struct.inviterName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INVITER_CHAR_ID_FIELD_DESC);
      oprot.writeI64(struct.inviterCharId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCInvitedJoinDanceRoomMsgTupleSchemeFactory implements SchemeFactory {
    public SCInvitedJoinDanceRoomMsgTupleScheme getScheme() {
      return new SCInvitedJoinDanceRoomMsgTupleScheme();
    }
  }

  private static class SCInvitedJoinDanceRoomMsgTupleScheme extends TupleScheme<SCInvitedJoinDanceRoomMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCInvitedJoinDanceRoomMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRoomType()) {
        optionals.set(0);
      }
      if (struct.isSetRoomId()) {
        optionals.set(1);
      }
      if (struct.isSetInviterName()) {
        optionals.set(2);
      }
      if (struct.isSetInviterCharId()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetRoomType()) {
        oprot.writeI32(struct.roomType.getValue());
      }
      if (struct.isSetRoomId()) {
        oprot.writeI32(struct.roomId);
      }
      if (struct.isSetInviterName()) {
        oprot.writeString(struct.inviterName);
      }
      if (struct.isSetInviterCharId()) {
        oprot.writeI64(struct.inviterCharId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCInvitedJoinDanceRoomMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.roomType = com.ling9527.music.common.msg.auto.CreateRoomType.findByValue(iprot.readI32());
        struct.setRoomTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.roomId = iprot.readI32();
        struct.setRoomIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.inviterName = iprot.readString();
        struct.setInviterNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.inviterCharId = iprot.readI64();
        struct.setInviterCharIdIsSet(true);
      }
    }
  }

}

