/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 巡演星数奖励状态信息
 */
public class SCTourStarPrizeStatus implements org.apache.thrift.TBase<SCTourStarPrizeStatus, SCTourStarPrizeStatus._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCTourStarPrizeStatus");

  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PRIZED_STATUSS_FIELD_DESC = new org.apache.thrift.protocol.TField("prizedStatuss", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField CHAPTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("chapterId", org.apache.thrift.protocol.TType.I16, (short)3);
  private static final org.apache.thrift.protocol.TField CUR_STARS_FIELD_DESC = new org.apache.thrift.protocol.TField("curStars", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCTourStarPrizeStatusStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCTourStarPrizeStatusTupleSchemeFactory());
  }

  /**
   * 星数奖励信息版本号，有奖励翻倍时更新
   */
  public int version; // required
  /**
   * 星数奖励状态信息
   */
  public List<TourStarPrizeStatus> prizedStatuss; // required
  /**
   * 章节id
   */
  public short chapterId; // required
  /**
   * 获得的星数
   */
  public int curStars; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 星数奖励信息版本号，有奖励翻倍时更新
     */
    VERSION((short)1, "version"),
    /**
     * 星数奖励状态信息
     */
    PRIZED_STATUSS((short)2, "prizedStatuss"),
    /**
     * 章节id
     */
    CHAPTER_ID((short)3, "chapterId"),
    /**
     * 获得的星数
     */
    CUR_STARS((short)4, "curStars");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VERSION
          return VERSION;
        case 2: // PRIZED_STATUSS
          return PRIZED_STATUSS;
        case 3: // CHAPTER_ID
          return CHAPTER_ID;
        case 4: // CUR_STARS
          return CUR_STARS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VERSION_ISSET_ID = 0;
  private static final int __CHAPTERID_ISSET_ID = 1;
  private static final int __CURSTARS_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRIZED_STATUSS, new org.apache.thrift.meta_data.FieldMetaData("prizedStatuss", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TourStarPrizeStatus.class))));
    tmpMap.put(_Fields.CHAPTER_ID, new org.apache.thrift.meta_data.FieldMetaData("chapterId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.CUR_STARS, new org.apache.thrift.meta_data.FieldMetaData("curStars", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCTourStarPrizeStatus.class, metaDataMap);
  }

  public SCTourStarPrizeStatus() {
  }

  public SCTourStarPrizeStatus(
    int version,
    List<TourStarPrizeStatus> prizedStatuss,
    short chapterId,
    int curStars)
  {
    this();
    this.version = version;
    setVersionIsSet(true);
    this.prizedStatuss = prizedStatuss;
    this.chapterId = chapterId;
    setChapterIdIsSet(true);
    this.curStars = curStars;
    setCurStarsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCTourStarPrizeStatus(SCTourStarPrizeStatus other) {
    __isset_bitfield = other.__isset_bitfield;
    this.version = other.version;
    if (other.isSetPrizedStatuss()) {
      List<TourStarPrizeStatus> __this__prizedStatuss = new ArrayList<TourStarPrizeStatus>();
      for (TourStarPrizeStatus other_element : other.prizedStatuss) {
        __this__prizedStatuss.add(new TourStarPrizeStatus(other_element));
      }
      this.prizedStatuss = __this__prizedStatuss;
    }
    this.chapterId = other.chapterId;
    this.curStars = other.curStars;
  }

  public SCTourStarPrizeStatus deepCopy() {
    return new SCTourStarPrizeStatus(this);
  }

  @Override
  public void clear() {
    setVersionIsSet(false);
    this.version = 0;
    this.prizedStatuss = null;
    setChapterIdIsSet(false);
    this.chapterId = 0;
    setCurStarsIsSet(false);
    this.curStars = 0;
  }

  /**
   * 星数奖励信息版本号，有奖励翻倍时更新
   */
  public int getVersion() {
    return this.version;
  }

  /**
   * 星数奖励信息版本号，有奖励翻倍时更新
   */
  public SCTourStarPrizeStatus setVersion(int version) {
    this.version = version;
    setVersionIsSet(true);
    return this;
  }

  public void unsetVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
  }

  public int getPrizedStatussSize() {
    return (this.prizedStatuss == null) ? 0 : this.prizedStatuss.size();
  }

  public java.util.Iterator<TourStarPrizeStatus> getPrizedStatussIterator() {
    return (this.prizedStatuss == null) ? null : this.prizedStatuss.iterator();
  }

  public void addToPrizedStatuss(TourStarPrizeStatus elem) {
    if (this.prizedStatuss == null) {
      this.prizedStatuss = new ArrayList<TourStarPrizeStatus>();
    }
    this.prizedStatuss.add(elem);
  }

  /**
   * 星数奖励状态信息
   */
  public List<TourStarPrizeStatus> getPrizedStatuss() {
    return this.prizedStatuss;
  }

  /**
   * 星数奖励状态信息
   */
  public SCTourStarPrizeStatus setPrizedStatuss(List<TourStarPrizeStatus> prizedStatuss) {
    this.prizedStatuss = prizedStatuss;
    return this;
  }

  public void unsetPrizedStatuss() {
    this.prizedStatuss = null;
  }

  /** Returns true if field prizedStatuss is set (has been assigned a value) and false otherwise */
  public boolean isSetPrizedStatuss() {
    return this.prizedStatuss != null;
  }

  public void setPrizedStatussIsSet(boolean value) {
    if (!value) {
      this.prizedStatuss = null;
    }
  }

  /**
   * 章节id
   */
  public short getChapterId() {
    return this.chapterId;
  }

  /**
   * 章节id
   */
  public SCTourStarPrizeStatus setChapterId(short chapterId) {
    this.chapterId = chapterId;
    setChapterIdIsSet(true);
    return this;
  }

  public void unsetChapterId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHAPTERID_ISSET_ID);
  }

  /** Returns true if field chapterId is set (has been assigned a value) and false otherwise */
  public boolean isSetChapterId() {
    return EncodingUtils.testBit(__isset_bitfield, __CHAPTERID_ISSET_ID);
  }

  public void setChapterIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHAPTERID_ISSET_ID, value);
  }

  /**
   * 获得的星数
   */
  public int getCurStars() {
    return this.curStars;
  }

  /**
   * 获得的星数
   */
  public SCTourStarPrizeStatus setCurStars(int curStars) {
    this.curStars = curStars;
    setCurStarsIsSet(true);
    return this;
  }

  public void unsetCurStars() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURSTARS_ISSET_ID);
  }

  /** Returns true if field curStars is set (has been assigned a value) and false otherwise */
  public boolean isSetCurStars() {
    return EncodingUtils.testBit(__isset_bitfield, __CURSTARS_ISSET_ID);
  }

  public void setCurStarsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURSTARS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((Integer)value);
      }
      break;

    case PRIZED_STATUSS:
      if (value == null) {
        unsetPrizedStatuss();
      } else {
        setPrizedStatuss((List<TourStarPrizeStatus>)value);
      }
      break;

    case CHAPTER_ID:
      if (value == null) {
        unsetChapterId();
      } else {
        setChapterId((Short)value);
      }
      break;

    case CUR_STARS:
      if (value == null) {
        unsetCurStars();
      } else {
        setCurStars((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case VERSION:
      return Integer.valueOf(getVersion());

    case PRIZED_STATUSS:
      return getPrizedStatuss();

    case CHAPTER_ID:
      return Short.valueOf(getChapterId());

    case CUR_STARS:
      return Integer.valueOf(getCurStars());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case VERSION:
      return isSetVersion();
    case PRIZED_STATUSS:
      return isSetPrizedStatuss();
    case CHAPTER_ID:
      return isSetChapterId();
    case CUR_STARS:
      return isSetCurStars();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCTourStarPrizeStatus)
      return this.equals((SCTourStarPrizeStatus)that);
    return false;
  }

  public boolean equals(SCTourStarPrizeStatus that) {
    if (that == null)
      return false;

    boolean this_present_version = true;
    boolean that_present_version = true;
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    boolean this_present_prizedStatuss = true && this.isSetPrizedStatuss();
    boolean that_present_prizedStatuss = true && that.isSetPrizedStatuss();
    if (this_present_prizedStatuss || that_present_prizedStatuss) {
      if (!(this_present_prizedStatuss && that_present_prizedStatuss))
        return false;
      if (!this.prizedStatuss.equals(that.prizedStatuss))
        return false;
    }

    boolean this_present_chapterId = true;
    boolean that_present_chapterId = true;
    if (this_present_chapterId || that_present_chapterId) {
      if (!(this_present_chapterId && that_present_chapterId))
        return false;
      if (this.chapterId != that.chapterId)
        return false;
    }

    boolean this_present_curStars = true;
    boolean that_present_curStars = true;
    if (this_present_curStars || that_present_curStars) {
      if (!(this_present_curStars && that_present_curStars))
        return false;
      if (this.curStars != that.curStars)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCTourStarPrizeStatus other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCTourStarPrizeStatus typedOther = (SCTourStarPrizeStatus)other;

    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(typedOther.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, typedOther.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrizedStatuss()).compareTo(typedOther.isSetPrizedStatuss());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrizedStatuss()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prizedStatuss, typedOther.prizedStatuss);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChapterId()).compareTo(typedOther.isSetChapterId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChapterId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chapterId, typedOther.chapterId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurStars()).compareTo(typedOther.isSetCurStars());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurStars()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.curStars, typedOther.curStars);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCTourStarPrizeStatus(");
    boolean first = true;

    sb.append("version:");
    sb.append(this.version);
    first = false;
    if (!first) sb.append(", ");
    sb.append("prizedStatuss:");
    if (this.prizedStatuss == null) {
      sb.append("null");
    } else {
      sb.append(this.prizedStatuss);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("chapterId:");
    sb.append(this.chapterId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("curStars:");
    sb.append(this.curStars);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCTourStarPrizeStatusStandardSchemeFactory implements SchemeFactory {
    public SCTourStarPrizeStatusStandardScheme getScheme() {
      return new SCTourStarPrizeStatusStandardScheme();
    }
  }

  private static class SCTourStarPrizeStatusStandardScheme extends StandardScheme<SCTourStarPrizeStatus> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCTourStarPrizeStatus struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.version = iprot.readI32();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PRIZED_STATUSS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list72 = iprot.readListBegin();
                struct.prizedStatuss = new ArrayList<TourStarPrizeStatus>(_list72.size);
                for (int _i73 = 0; _i73 < _list72.size; ++_i73)
                {
                  TourStarPrizeStatus _elem74; // required
                  _elem74 = new TourStarPrizeStatus();
                  _elem74.read(iprot);
                  struct.prizedStatuss.add(_elem74);
                }
                iprot.readListEnd();
              }
              struct.setPrizedStatussIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CHAPTER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.chapterId = iprot.readI16();
              struct.setChapterIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CUR_STARS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.curStars = iprot.readI32();
              struct.setCurStarsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCTourStarPrizeStatus struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(VERSION_FIELD_DESC);
      oprot.writeI32(struct.version);
      oprot.writeFieldEnd();
      if (struct.prizedStatuss != null) {
        oprot.writeFieldBegin(PRIZED_STATUSS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.prizedStatuss.size()));
          for (TourStarPrizeStatus _iter75 : struct.prizedStatuss)
          {
            _iter75.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CHAPTER_ID_FIELD_DESC);
      oprot.writeI16(struct.chapterId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CUR_STARS_FIELD_DESC);
      oprot.writeI32(struct.curStars);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCTourStarPrizeStatusTupleSchemeFactory implements SchemeFactory {
    public SCTourStarPrizeStatusTupleScheme getScheme() {
      return new SCTourStarPrizeStatusTupleScheme();
    }
  }

  private static class SCTourStarPrizeStatusTupleScheme extends TupleScheme<SCTourStarPrizeStatus> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCTourStarPrizeStatus struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetVersion()) {
        optionals.set(0);
      }
      if (struct.isSetPrizedStatuss()) {
        optionals.set(1);
      }
      if (struct.isSetChapterId()) {
        optionals.set(2);
      }
      if (struct.isSetCurStars()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetVersion()) {
        oprot.writeI32(struct.version);
      }
      if (struct.isSetPrizedStatuss()) {
        {
          oprot.writeI32(struct.prizedStatuss.size());
          for (TourStarPrizeStatus _iter76 : struct.prizedStatuss)
          {
            _iter76.write(oprot);
          }
        }
      }
      if (struct.isSetChapterId()) {
        oprot.writeI16(struct.chapterId);
      }
      if (struct.isSetCurStars()) {
        oprot.writeI32(struct.curStars);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCTourStarPrizeStatus struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.version = iprot.readI32();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list77 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.prizedStatuss = new ArrayList<TourStarPrizeStatus>(_list77.size);
          for (int _i78 = 0; _i78 < _list77.size; ++_i78)
          {
            TourStarPrizeStatus _elem79; // required
            _elem79 = new TourStarPrizeStatus();
            _elem79.read(iprot);
            struct.prizedStatuss.add(_elem79);
          }
        }
        struct.setPrizedStatussIsSet(true);
      }
      if (incoming.get(2)) {
        struct.chapterId = iprot.readI16();
        struct.setChapterIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.curStars = iprot.readI32();
        struct.setCurStarsIsSet(true);
      }
    }
  }

}

