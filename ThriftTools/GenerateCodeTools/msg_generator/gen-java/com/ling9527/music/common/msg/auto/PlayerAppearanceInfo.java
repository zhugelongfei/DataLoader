/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 玩家外观信息
 */
public class PlayerAppearanceInfo implements org.apache.thrift.TBase<PlayerAppearanceInfo, PlayerAppearanceInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PlayerAppearanceInfo");

  private static final org.apache.thrift.protocol.TField PLAYER_BASE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("playerBaseInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField MODEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("modelId", org.apache.thrift.protocol.TType.I16, (short)2);
  private static final org.apache.thrift.protocol.TField AVATAR_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("avatarInfos", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField PUT_ON_BADGES_FIELD_DESC = new org.apache.thrift.protocol.TField("putOnBadges", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("exp", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PlayerAppearanceInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PlayerAppearanceInfoTupleSchemeFactory());
  }

  public PlayerBaseInfo playerBaseInfo; // required
  public short modelId; // required
  public List<AvatarInfo> avatarInfos; // required
  /**
   * 佩戴的徽章
   */
  public List<BadgeInfo> putOnBadges; // required
  /**
   * 当前经验值， 显示经验条使用
   */
  public int exp; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PLAYER_BASE_INFO((short)1, "playerBaseInfo"),
    MODEL_ID((short)2, "modelId"),
    AVATAR_INFOS((short)3, "avatarInfos"),
    /**
     * 佩戴的徽章
     */
    PUT_ON_BADGES((short)4, "putOnBadges"),
    /**
     * 当前经验值， 显示经验条使用
     */
    EXP((short)5, "exp");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PLAYER_BASE_INFO
          return PLAYER_BASE_INFO;
        case 2: // MODEL_ID
          return MODEL_ID;
        case 3: // AVATAR_INFOS
          return AVATAR_INFOS;
        case 4: // PUT_ON_BADGES
          return PUT_ON_BADGES;
        case 5: // EXP
          return EXP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MODELID_ISSET_ID = 0;
  private static final int __EXP_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PLAYER_BASE_INFO, new org.apache.thrift.meta_data.FieldMetaData("playerBaseInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PlayerBaseInfo.class)));
    tmpMap.put(_Fields.MODEL_ID, new org.apache.thrift.meta_data.FieldMetaData("modelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.AVATAR_INFOS, new org.apache.thrift.meta_data.FieldMetaData("avatarInfos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AvatarInfo.class))));
    tmpMap.put(_Fields.PUT_ON_BADGES, new org.apache.thrift.meta_data.FieldMetaData("putOnBadges", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BadgeInfo.class))));
    tmpMap.put(_Fields.EXP, new org.apache.thrift.meta_data.FieldMetaData("exp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PlayerAppearanceInfo.class, metaDataMap);
  }

  public PlayerAppearanceInfo() {
  }

  public PlayerAppearanceInfo(
    PlayerBaseInfo playerBaseInfo,
    short modelId,
    List<AvatarInfo> avatarInfos,
    List<BadgeInfo> putOnBadges,
    int exp)
  {
    this();
    this.playerBaseInfo = playerBaseInfo;
    this.modelId = modelId;
    setModelIdIsSet(true);
    this.avatarInfos = avatarInfos;
    this.putOnBadges = putOnBadges;
    this.exp = exp;
    setExpIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PlayerAppearanceInfo(PlayerAppearanceInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPlayerBaseInfo()) {
      this.playerBaseInfo = new PlayerBaseInfo(other.playerBaseInfo);
    }
    this.modelId = other.modelId;
    if (other.isSetAvatarInfos()) {
      List<AvatarInfo> __this__avatarInfos = new ArrayList<AvatarInfo>();
      for (AvatarInfo other_element : other.avatarInfos) {
        __this__avatarInfos.add(new AvatarInfo(other_element));
      }
      this.avatarInfos = __this__avatarInfos;
    }
    if (other.isSetPutOnBadges()) {
      List<BadgeInfo> __this__putOnBadges = new ArrayList<BadgeInfo>();
      for (BadgeInfo other_element : other.putOnBadges) {
        __this__putOnBadges.add(new BadgeInfo(other_element));
      }
      this.putOnBadges = __this__putOnBadges;
    }
    this.exp = other.exp;
  }

  public PlayerAppearanceInfo deepCopy() {
    return new PlayerAppearanceInfo(this);
  }

  @Override
  public void clear() {
    this.playerBaseInfo = null;
    setModelIdIsSet(false);
    this.modelId = 0;
    this.avatarInfos = null;
    this.putOnBadges = null;
    setExpIsSet(false);
    this.exp = 0;
  }

  public PlayerBaseInfo getPlayerBaseInfo() {
    return this.playerBaseInfo;
  }

  public PlayerAppearanceInfo setPlayerBaseInfo(PlayerBaseInfo playerBaseInfo) {
    this.playerBaseInfo = playerBaseInfo;
    return this;
  }

  public void unsetPlayerBaseInfo() {
    this.playerBaseInfo = null;
  }

  /** Returns true if field playerBaseInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetPlayerBaseInfo() {
    return this.playerBaseInfo != null;
  }

  public void setPlayerBaseInfoIsSet(boolean value) {
    if (!value) {
      this.playerBaseInfo = null;
    }
  }

  public short getModelId() {
    return this.modelId;
  }

  public PlayerAppearanceInfo setModelId(short modelId) {
    this.modelId = modelId;
    setModelIdIsSet(true);
    return this;
  }

  public void unsetModelId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MODELID_ISSET_ID);
  }

  /** Returns true if field modelId is set (has been assigned a value) and false otherwise */
  public boolean isSetModelId() {
    return EncodingUtils.testBit(__isset_bitfield, __MODELID_ISSET_ID);
  }

  public void setModelIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MODELID_ISSET_ID, value);
  }

  public int getAvatarInfosSize() {
    return (this.avatarInfos == null) ? 0 : this.avatarInfos.size();
  }

  public java.util.Iterator<AvatarInfo> getAvatarInfosIterator() {
    return (this.avatarInfos == null) ? null : this.avatarInfos.iterator();
  }

  public void addToAvatarInfos(AvatarInfo elem) {
    if (this.avatarInfos == null) {
      this.avatarInfos = new ArrayList<AvatarInfo>();
    }
    this.avatarInfos.add(elem);
  }

  public List<AvatarInfo> getAvatarInfos() {
    return this.avatarInfos;
  }

  public PlayerAppearanceInfo setAvatarInfos(List<AvatarInfo> avatarInfos) {
    this.avatarInfos = avatarInfos;
    return this;
  }

  public void unsetAvatarInfos() {
    this.avatarInfos = null;
  }

  /** Returns true if field avatarInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetAvatarInfos() {
    return this.avatarInfos != null;
  }

  public void setAvatarInfosIsSet(boolean value) {
    if (!value) {
      this.avatarInfos = null;
    }
  }

  public int getPutOnBadgesSize() {
    return (this.putOnBadges == null) ? 0 : this.putOnBadges.size();
  }

  public java.util.Iterator<BadgeInfo> getPutOnBadgesIterator() {
    return (this.putOnBadges == null) ? null : this.putOnBadges.iterator();
  }

  public void addToPutOnBadges(BadgeInfo elem) {
    if (this.putOnBadges == null) {
      this.putOnBadges = new ArrayList<BadgeInfo>();
    }
    this.putOnBadges.add(elem);
  }

  /**
   * 佩戴的徽章
   */
  public List<BadgeInfo> getPutOnBadges() {
    return this.putOnBadges;
  }

  /**
   * 佩戴的徽章
   */
  public PlayerAppearanceInfo setPutOnBadges(List<BadgeInfo> putOnBadges) {
    this.putOnBadges = putOnBadges;
    return this;
  }

  public void unsetPutOnBadges() {
    this.putOnBadges = null;
  }

  /** Returns true if field putOnBadges is set (has been assigned a value) and false otherwise */
  public boolean isSetPutOnBadges() {
    return this.putOnBadges != null;
  }

  public void setPutOnBadgesIsSet(boolean value) {
    if (!value) {
      this.putOnBadges = null;
    }
  }

  /**
   * 当前经验值， 显示经验条使用
   */
  public int getExp() {
    return this.exp;
  }

  /**
   * 当前经验值， 显示经验条使用
   */
  public PlayerAppearanceInfo setExp(int exp) {
    this.exp = exp;
    setExpIsSet(true);
    return this;
  }

  public void unsetExp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXP_ISSET_ID);
  }

  /** Returns true if field exp is set (has been assigned a value) and false otherwise */
  public boolean isSetExp() {
    return EncodingUtils.testBit(__isset_bitfield, __EXP_ISSET_ID);
  }

  public void setExpIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXP_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PLAYER_BASE_INFO:
      if (value == null) {
        unsetPlayerBaseInfo();
      } else {
        setPlayerBaseInfo((PlayerBaseInfo)value);
      }
      break;

    case MODEL_ID:
      if (value == null) {
        unsetModelId();
      } else {
        setModelId((Short)value);
      }
      break;

    case AVATAR_INFOS:
      if (value == null) {
        unsetAvatarInfos();
      } else {
        setAvatarInfos((List<AvatarInfo>)value);
      }
      break;

    case PUT_ON_BADGES:
      if (value == null) {
        unsetPutOnBadges();
      } else {
        setPutOnBadges((List<BadgeInfo>)value);
      }
      break;

    case EXP:
      if (value == null) {
        unsetExp();
      } else {
        setExp((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PLAYER_BASE_INFO:
      return getPlayerBaseInfo();

    case MODEL_ID:
      return Short.valueOf(getModelId());

    case AVATAR_INFOS:
      return getAvatarInfos();

    case PUT_ON_BADGES:
      return getPutOnBadges();

    case EXP:
      return Integer.valueOf(getExp());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PLAYER_BASE_INFO:
      return isSetPlayerBaseInfo();
    case MODEL_ID:
      return isSetModelId();
    case AVATAR_INFOS:
      return isSetAvatarInfos();
    case PUT_ON_BADGES:
      return isSetPutOnBadges();
    case EXP:
      return isSetExp();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PlayerAppearanceInfo)
      return this.equals((PlayerAppearanceInfo)that);
    return false;
  }

  public boolean equals(PlayerAppearanceInfo that) {
    if (that == null)
      return false;

    boolean this_present_playerBaseInfo = true && this.isSetPlayerBaseInfo();
    boolean that_present_playerBaseInfo = true && that.isSetPlayerBaseInfo();
    if (this_present_playerBaseInfo || that_present_playerBaseInfo) {
      if (!(this_present_playerBaseInfo && that_present_playerBaseInfo))
        return false;
      if (!this.playerBaseInfo.equals(that.playerBaseInfo))
        return false;
    }

    boolean this_present_modelId = true;
    boolean that_present_modelId = true;
    if (this_present_modelId || that_present_modelId) {
      if (!(this_present_modelId && that_present_modelId))
        return false;
      if (this.modelId != that.modelId)
        return false;
    }

    boolean this_present_avatarInfos = true && this.isSetAvatarInfos();
    boolean that_present_avatarInfos = true && that.isSetAvatarInfos();
    if (this_present_avatarInfos || that_present_avatarInfos) {
      if (!(this_present_avatarInfos && that_present_avatarInfos))
        return false;
      if (!this.avatarInfos.equals(that.avatarInfos))
        return false;
    }

    boolean this_present_putOnBadges = true && this.isSetPutOnBadges();
    boolean that_present_putOnBadges = true && that.isSetPutOnBadges();
    if (this_present_putOnBadges || that_present_putOnBadges) {
      if (!(this_present_putOnBadges && that_present_putOnBadges))
        return false;
      if (!this.putOnBadges.equals(that.putOnBadges))
        return false;
    }

    boolean this_present_exp = true;
    boolean that_present_exp = true;
    if (this_present_exp || that_present_exp) {
      if (!(this_present_exp && that_present_exp))
        return false;
      if (this.exp != that.exp)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(PlayerAppearanceInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    PlayerAppearanceInfo typedOther = (PlayerAppearanceInfo)other;

    lastComparison = Boolean.valueOf(isSetPlayerBaseInfo()).compareTo(typedOther.isSetPlayerBaseInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlayerBaseInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.playerBaseInfo, typedOther.playerBaseInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetModelId()).compareTo(typedOther.isSetModelId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModelId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelId, typedOther.modelId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAvatarInfos()).compareTo(typedOther.isSetAvatarInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvatarInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.avatarInfos, typedOther.avatarInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPutOnBadges()).compareTo(typedOther.isSetPutOnBadges());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPutOnBadges()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.putOnBadges, typedOther.putOnBadges);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExp()).compareTo(typedOther.isSetExp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exp, typedOther.exp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PlayerAppearanceInfo(");
    boolean first = true;

    sb.append("playerBaseInfo:");
    if (this.playerBaseInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.playerBaseInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("modelId:");
    sb.append(this.modelId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("avatarInfos:");
    if (this.avatarInfos == null) {
      sb.append("null");
    } else {
      sb.append(this.avatarInfos);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("putOnBadges:");
    if (this.putOnBadges == null) {
      sb.append("null");
    } else {
      sb.append(this.putOnBadges);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("exp:");
    sb.append(this.exp);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (playerBaseInfo != null) {
      playerBaseInfo.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PlayerAppearanceInfoStandardSchemeFactory implements SchemeFactory {
    public PlayerAppearanceInfoStandardScheme getScheme() {
      return new PlayerAppearanceInfoStandardScheme();
    }
  }

  private static class PlayerAppearanceInfoStandardScheme extends StandardScheme<PlayerAppearanceInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PlayerAppearanceInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PLAYER_BASE_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.playerBaseInfo = new PlayerBaseInfo();
              struct.playerBaseInfo.read(iprot);
              struct.setPlayerBaseInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MODEL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.modelId = iprot.readI16();
              struct.setModelIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // AVATAR_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list140 = iprot.readListBegin();
                struct.avatarInfos = new ArrayList<AvatarInfo>(_list140.size);
                for (int _i141 = 0; _i141 < _list140.size; ++_i141)
                {
                  AvatarInfo _elem142; // required
                  _elem142 = new AvatarInfo();
                  _elem142.read(iprot);
                  struct.avatarInfos.add(_elem142);
                }
                iprot.readListEnd();
              }
              struct.setAvatarInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PUT_ON_BADGES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list143 = iprot.readListBegin();
                struct.putOnBadges = new ArrayList<BadgeInfo>(_list143.size);
                for (int _i144 = 0; _i144 < _list143.size; ++_i144)
                {
                  BadgeInfo _elem145; // required
                  _elem145 = new BadgeInfo();
                  _elem145.read(iprot);
                  struct.putOnBadges.add(_elem145);
                }
                iprot.readListEnd();
              }
              struct.setPutOnBadgesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EXP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.exp = iprot.readI32();
              struct.setExpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PlayerAppearanceInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.playerBaseInfo != null) {
        oprot.writeFieldBegin(PLAYER_BASE_INFO_FIELD_DESC);
        struct.playerBaseInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MODEL_ID_FIELD_DESC);
      oprot.writeI16(struct.modelId);
      oprot.writeFieldEnd();
      if (struct.avatarInfos != null) {
        oprot.writeFieldBegin(AVATAR_INFOS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.avatarInfos.size()));
          for (AvatarInfo _iter146 : struct.avatarInfos)
          {
            _iter146.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.putOnBadges != null) {
        oprot.writeFieldBegin(PUT_ON_BADGES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.putOnBadges.size()));
          for (BadgeInfo _iter147 : struct.putOnBadges)
          {
            _iter147.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(EXP_FIELD_DESC);
      oprot.writeI32(struct.exp);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PlayerAppearanceInfoTupleSchemeFactory implements SchemeFactory {
    public PlayerAppearanceInfoTupleScheme getScheme() {
      return new PlayerAppearanceInfoTupleScheme();
    }
  }

  private static class PlayerAppearanceInfoTupleScheme extends TupleScheme<PlayerAppearanceInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PlayerAppearanceInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPlayerBaseInfo()) {
        optionals.set(0);
      }
      if (struct.isSetModelId()) {
        optionals.set(1);
      }
      if (struct.isSetAvatarInfos()) {
        optionals.set(2);
      }
      if (struct.isSetPutOnBadges()) {
        optionals.set(3);
      }
      if (struct.isSetExp()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetPlayerBaseInfo()) {
        struct.playerBaseInfo.write(oprot);
      }
      if (struct.isSetModelId()) {
        oprot.writeI16(struct.modelId);
      }
      if (struct.isSetAvatarInfos()) {
        {
          oprot.writeI32(struct.avatarInfos.size());
          for (AvatarInfo _iter148 : struct.avatarInfos)
          {
            _iter148.write(oprot);
          }
        }
      }
      if (struct.isSetPutOnBadges()) {
        {
          oprot.writeI32(struct.putOnBadges.size());
          for (BadgeInfo _iter149 : struct.putOnBadges)
          {
            _iter149.write(oprot);
          }
        }
      }
      if (struct.isSetExp()) {
        oprot.writeI32(struct.exp);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PlayerAppearanceInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.playerBaseInfo = new PlayerBaseInfo();
        struct.playerBaseInfo.read(iprot);
        struct.setPlayerBaseInfoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.modelId = iprot.readI16();
        struct.setModelIdIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list150 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.avatarInfos = new ArrayList<AvatarInfo>(_list150.size);
          for (int _i151 = 0; _i151 < _list150.size; ++_i151)
          {
            AvatarInfo _elem152; // required
            _elem152 = new AvatarInfo();
            _elem152.read(iprot);
            struct.avatarInfos.add(_elem152);
          }
        }
        struct.setAvatarInfosIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list153 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.putOnBadges = new ArrayList<BadgeInfo>(_list153.size);
          for (int _i154 = 0; _i154 < _list153.size; ++_i154)
          {
            BadgeInfo _elem155; // required
            _elem155 = new BadgeInfo();
            _elem155.read(iprot);
            struct.putOnBadges.add(_elem155);
          }
        }
        struct.setPutOnBadgesIsSet(true);
      }
      if (incoming.get(4)) {
        struct.exp = iprot.readI32();
        struct.setExpIsSet(true);
      }
    }
  }

}

