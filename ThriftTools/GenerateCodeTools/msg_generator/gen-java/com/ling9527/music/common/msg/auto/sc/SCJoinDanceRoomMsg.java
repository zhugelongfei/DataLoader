/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SCJoinDanceRoomMsg implements org.apache.thrift.TBase<SCJoinDanceRoomMsg, SCJoinDanceRoomMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCJoinDanceRoomMsg");

  private static final org.apache.thrift.protocol.TField PASSWD_FIELD_DESC = new org.apache.thrift.protocol.TField("passwd", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("mode", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField SONG_LVL_FIELD_DESC = new org.apache.thrift.protocol.TField("songLvl", org.apache.thrift.protocol.TType.BYTE, (short)3);
  private static final org.apache.thrift.protocol.TField SONG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("songId", org.apache.thrift.protocol.TType.I16, (short)4);
  private static final org.apache.thrift.protocol.TField MEMBERS_FIELD_DESC = new org.apache.thrift.protocol.TField("members", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField QUICK_START_FIELD_DESC = new org.apache.thrift.protocol.TField("quickStart", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField ROOM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("roomId", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField LEADER_CHAR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("leaderCharId", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField VIP_FIELD_DESC = new org.apache.thrift.protocol.TField("vip", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField WATCH_FIELD_DESC = new org.apache.thrift.protocol.TField("watch", org.apache.thrift.protocol.TType.BOOL, (short)10);
  private static final org.apache.thrift.protocol.TField CHANNEL_FIELD_DESC = new org.apache.thrift.protocol.TField("channel", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField MAX_MEMBER_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("maxMemberSize", org.apache.thrift.protocol.TType.I16, (short)12);
  private static final org.apache.thrift.protocol.TField WAITING_SCENE_FIELD_DESC = new org.apache.thrift.protocol.TField("waitingScene", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField ROOM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("roomType", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField STARTING_SCENE_FIELD_DESC = new org.apache.thrift.protocol.TField("startingScene", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField CHAPTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("chapterId", org.apache.thrift.protocol.TType.I16, (short)16);
  private static final org.apache.thrift.protocol.TField RAID_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("raidId", org.apache.thrift.protocol.TType.I16, (short)18);
  private static final org.apache.thrift.protocol.TField ROOM_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("roomTitle", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField SHOW_SPRING_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("showSpringInfo", org.apache.thrift.protocol.TType.STRUCT, (short)20);
  private static final org.apache.thrift.protocol.TField WED_BLESS_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("wedBlessVal", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField WEDDINGVALID_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("weddingvalidTime", org.apache.thrift.protocol.TType.I32, (short)22);
  private static final org.apache.thrift.protocol.TField WEDDING_FINISH_FIELD_DESC = new org.apache.thrift.protocol.TField("weddingFinish", org.apache.thrift.protocol.TType.BOOL, (short)23);
  private static final org.apache.thrift.protocol.TField UPDATE_ANNOUNCE_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("updateAnnounceInfos", org.apache.thrift.protocol.TType.STRUCT, (short)24);
  private static final org.apache.thrift.protocol.TField WEDDING_STEP_FIELD_DESC = new org.apache.thrift.protocol.TField("weddingStep", org.apache.thrift.protocol.TType.BYTE, (short)25);
  private static final org.apache.thrift.protocol.TField BRIDE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("brideID", org.apache.thrift.protocol.TType.I64, (short)26);
  private static final org.apache.thrift.protocol.TField BRIDEGROOM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bridegroomID", org.apache.thrift.protocol.TType.I64, (short)27);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCJoinDanceRoomMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCJoinDanceRoomMsgTupleSchemeFactory());
  }

  public String passwd; // required
  public byte mode; // required
  public byte songLvl; // required
  public short songId; // required
  public List<com.ling9527.music.common.msg.auto.RoomMemberInfo> members; // required
  public boolean quickStart; // required
  public int roomId; // required
  public long leaderCharId; // required
  public boolean vip; // required
  public boolean watch; // required
  /**
   * 
   * @see com.ling9527.music.common.msg.auto.RoomChannel
   */
  public com.ling9527.music.common.msg.auto.RoomChannel channel; // required
  public short maxMemberSize; // required
  /**
   * 等待场景
   */
  public int waitingScene; // required
  /**
   * 
   * @see com.ling9527.music.common.msg.auto.CreateRoomType
   */
  public com.ling9527.music.common.msg.auto.CreateRoomType roomType; // required
  /**
   * 开始场景
   */
  public int startingScene; // required
  public short chapterId; // optional
  public short raidId; // optional
  /**
   * 房间名
   */
  public String roomTitle; // required
  /**
   * 刷新出的泉眼
   */
  public com.ling9527.music.common.msg.auto.sc.SCRefreshSpring showSpringInfo; // optional
  /**
   * 当前婚礼祝福值
   */
  public int wedBlessVal; // optional
  /**
   * 当前婚礼截止时间(/1000)
   */
  public int weddingvalidTime; // optional
  /**
   * 婚礼是否完成
   */
  public boolean weddingFinish; // optional
  /**
   * 通告信息更新
   */
  public com.ling9527.music.common.msg.auto.sc.SCUpdateAnnounceInfos updateAnnounceInfos; // optional
  /**
   * 当前婚礼步骤
   */
  public byte weddingStep; // optional
  /**
   * 婚礼新娘ID
   */
  public long brideID; // optional
  /**
   * 婚礼新郎ID
   */
  public long bridegroomID; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PASSWD((short)1, "passwd"),
    MODE((short)2, "mode"),
    SONG_LVL((short)3, "songLvl"),
    SONG_ID((short)4, "songId"),
    MEMBERS((short)5, "members"),
    QUICK_START((short)6, "quickStart"),
    ROOM_ID((short)7, "roomId"),
    LEADER_CHAR_ID((short)8, "leaderCharId"),
    VIP((short)9, "vip"),
    WATCH((short)10, "watch"),
    /**
     * 
     * @see com.ling9527.music.common.msg.auto.RoomChannel
     */
    CHANNEL((short)11, "channel"),
    MAX_MEMBER_SIZE((short)12, "maxMemberSize"),
    /**
     * 等待场景
     */
    WAITING_SCENE((short)13, "waitingScene"),
    /**
     * 
     * @see com.ling9527.music.common.msg.auto.CreateRoomType
     */
    ROOM_TYPE((short)14, "roomType"),
    /**
     * 开始场景
     */
    STARTING_SCENE((short)15, "startingScene"),
    CHAPTER_ID((short)16, "chapterId"),
    RAID_ID((short)18, "raidId"),
    /**
     * 房间名
     */
    ROOM_TITLE((short)19, "roomTitle"),
    /**
     * 刷新出的泉眼
     */
    SHOW_SPRING_INFO((short)20, "showSpringInfo"),
    /**
     * 当前婚礼祝福值
     */
    WED_BLESS_VAL((short)21, "wedBlessVal"),
    /**
     * 当前婚礼截止时间(/1000)
     */
    WEDDINGVALID_TIME((short)22, "weddingvalidTime"),
    /**
     * 婚礼是否完成
     */
    WEDDING_FINISH((short)23, "weddingFinish"),
    /**
     * 通告信息更新
     */
    UPDATE_ANNOUNCE_INFOS((short)24, "updateAnnounceInfos"),
    /**
     * 当前婚礼步骤
     */
    WEDDING_STEP((short)25, "weddingStep"),
    /**
     * 婚礼新娘ID
     */
    BRIDE_ID((short)26, "brideID"),
    /**
     * 婚礼新郎ID
     */
    BRIDEGROOM_ID((short)27, "bridegroomID");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PASSWD
          return PASSWD;
        case 2: // MODE
          return MODE;
        case 3: // SONG_LVL
          return SONG_LVL;
        case 4: // SONG_ID
          return SONG_ID;
        case 5: // MEMBERS
          return MEMBERS;
        case 6: // QUICK_START
          return QUICK_START;
        case 7: // ROOM_ID
          return ROOM_ID;
        case 8: // LEADER_CHAR_ID
          return LEADER_CHAR_ID;
        case 9: // VIP
          return VIP;
        case 10: // WATCH
          return WATCH;
        case 11: // CHANNEL
          return CHANNEL;
        case 12: // MAX_MEMBER_SIZE
          return MAX_MEMBER_SIZE;
        case 13: // WAITING_SCENE
          return WAITING_SCENE;
        case 14: // ROOM_TYPE
          return ROOM_TYPE;
        case 15: // STARTING_SCENE
          return STARTING_SCENE;
        case 16: // CHAPTER_ID
          return CHAPTER_ID;
        case 18: // RAID_ID
          return RAID_ID;
        case 19: // ROOM_TITLE
          return ROOM_TITLE;
        case 20: // SHOW_SPRING_INFO
          return SHOW_SPRING_INFO;
        case 21: // WED_BLESS_VAL
          return WED_BLESS_VAL;
        case 22: // WEDDINGVALID_TIME
          return WEDDINGVALID_TIME;
        case 23: // WEDDING_FINISH
          return WEDDING_FINISH;
        case 24: // UPDATE_ANNOUNCE_INFOS
          return UPDATE_ANNOUNCE_INFOS;
        case 25: // WEDDING_STEP
          return WEDDING_STEP;
        case 26: // BRIDE_ID
          return BRIDE_ID;
        case 27: // BRIDEGROOM_ID
          return BRIDEGROOM_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MODE_ISSET_ID = 0;
  private static final int __SONGLVL_ISSET_ID = 1;
  private static final int __SONGID_ISSET_ID = 2;
  private static final int __QUICKSTART_ISSET_ID = 3;
  private static final int __ROOMID_ISSET_ID = 4;
  private static final int __LEADERCHARID_ISSET_ID = 5;
  private static final int __VIP_ISSET_ID = 6;
  private static final int __WATCH_ISSET_ID = 7;
  private static final int __MAXMEMBERSIZE_ISSET_ID = 8;
  private static final int __WAITINGSCENE_ISSET_ID = 9;
  private static final int __STARTINGSCENE_ISSET_ID = 10;
  private static final int __CHAPTERID_ISSET_ID = 11;
  private static final int __RAIDID_ISSET_ID = 12;
  private static final int __WEDBLESSVAL_ISSET_ID = 13;
  private static final int __WEDDINGVALIDTIME_ISSET_ID = 14;
  private static final int __WEDDINGFINISH_ISSET_ID = 15;
  private static final int __WEDDINGSTEP_ISSET_ID = 16;
  private static final int __BRIDEID_ISSET_ID = 17;
  private static final int __BRIDEGROOMID_ISSET_ID = 18;
  private int __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.CHAPTER_ID,_Fields.RAID_ID,_Fields.SHOW_SPRING_INFO,_Fields.WED_BLESS_VAL,_Fields.WEDDINGVALID_TIME,_Fields.WEDDING_FINISH,_Fields.UPDATE_ANNOUNCE_INFOS,_Fields.WEDDING_STEP,_Fields.BRIDE_ID,_Fields.BRIDEGROOM_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PASSWD, new org.apache.thrift.meta_data.FieldMetaData("passwd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MODE, new org.apache.thrift.meta_data.FieldMetaData("mode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.SONG_LVL, new org.apache.thrift.meta_data.FieldMetaData("songLvl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.SONG_ID, new org.apache.thrift.meta_data.FieldMetaData("songId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.MEMBERS, new org.apache.thrift.meta_data.FieldMetaData("members", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.RoomMemberInfo.class))));
    tmpMap.put(_Fields.QUICK_START, new org.apache.thrift.meta_data.FieldMetaData("quickStart", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ROOM_ID, new org.apache.thrift.meta_data.FieldMetaData("roomId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LEADER_CHAR_ID, new org.apache.thrift.meta_data.FieldMetaData("leaderCharId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VIP, new org.apache.thrift.meta_data.FieldMetaData("vip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.WATCH, new org.apache.thrift.meta_data.FieldMetaData("watch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CHANNEL, new org.apache.thrift.meta_data.FieldMetaData("channel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.ling9527.music.common.msg.auto.RoomChannel.class)));
    tmpMap.put(_Fields.MAX_MEMBER_SIZE, new org.apache.thrift.meta_data.FieldMetaData("maxMemberSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.WAITING_SCENE, new org.apache.thrift.meta_data.FieldMetaData("waitingScene", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROOM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("roomType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.ling9527.music.common.msg.auto.CreateRoomType.class)));
    tmpMap.put(_Fields.STARTING_SCENE, new org.apache.thrift.meta_data.FieldMetaData("startingScene", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CHAPTER_ID, new org.apache.thrift.meta_data.FieldMetaData("chapterId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.RAID_ID, new org.apache.thrift.meta_data.FieldMetaData("raidId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.ROOM_TITLE, new org.apache.thrift.meta_data.FieldMetaData("roomTitle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHOW_SPRING_INFO, new org.apache.thrift.meta_data.FieldMetaData("showSpringInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.sc.SCRefreshSpring.class)));
    tmpMap.put(_Fields.WED_BLESS_VAL, new org.apache.thrift.meta_data.FieldMetaData("wedBlessVal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WEDDINGVALID_TIME, new org.apache.thrift.meta_data.FieldMetaData("weddingvalidTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WEDDING_FINISH, new org.apache.thrift.meta_data.FieldMetaData("weddingFinish", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.UPDATE_ANNOUNCE_INFOS, new org.apache.thrift.meta_data.FieldMetaData("updateAnnounceInfos", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.sc.SCUpdateAnnounceInfos.class)));
    tmpMap.put(_Fields.WEDDING_STEP, new org.apache.thrift.meta_data.FieldMetaData("weddingStep", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.BRIDE_ID, new org.apache.thrift.meta_data.FieldMetaData("brideID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BRIDEGROOM_ID, new org.apache.thrift.meta_data.FieldMetaData("bridegroomID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCJoinDanceRoomMsg.class, metaDataMap);
  }

  public SCJoinDanceRoomMsg() {
  }

  public SCJoinDanceRoomMsg(
    String passwd,
    byte mode,
    byte songLvl,
    short songId,
    List<com.ling9527.music.common.msg.auto.RoomMemberInfo> members,
    boolean quickStart,
    int roomId,
    long leaderCharId,
    boolean vip,
    boolean watch,
    com.ling9527.music.common.msg.auto.RoomChannel channel,
    short maxMemberSize,
    int waitingScene,
    com.ling9527.music.common.msg.auto.CreateRoomType roomType,
    int startingScene,
    String roomTitle)
  {
    this();
    this.passwd = passwd;
    this.mode = mode;
    setModeIsSet(true);
    this.songLvl = songLvl;
    setSongLvlIsSet(true);
    this.songId = songId;
    setSongIdIsSet(true);
    this.members = members;
    this.quickStart = quickStart;
    setQuickStartIsSet(true);
    this.roomId = roomId;
    setRoomIdIsSet(true);
    this.leaderCharId = leaderCharId;
    setLeaderCharIdIsSet(true);
    this.vip = vip;
    setVipIsSet(true);
    this.watch = watch;
    setWatchIsSet(true);
    this.channel = channel;
    this.maxMemberSize = maxMemberSize;
    setMaxMemberSizeIsSet(true);
    this.waitingScene = waitingScene;
    setWaitingSceneIsSet(true);
    this.roomType = roomType;
    this.startingScene = startingScene;
    setStartingSceneIsSet(true);
    this.roomTitle = roomTitle;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCJoinDanceRoomMsg(SCJoinDanceRoomMsg other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPasswd()) {
      this.passwd = other.passwd;
    }
    this.mode = other.mode;
    this.songLvl = other.songLvl;
    this.songId = other.songId;
    if (other.isSetMembers()) {
      List<com.ling9527.music.common.msg.auto.RoomMemberInfo> __this__members = new ArrayList<com.ling9527.music.common.msg.auto.RoomMemberInfo>();
      for (com.ling9527.music.common.msg.auto.RoomMemberInfo other_element : other.members) {
        __this__members.add(new com.ling9527.music.common.msg.auto.RoomMemberInfo(other_element));
      }
      this.members = __this__members;
    }
    this.quickStart = other.quickStart;
    this.roomId = other.roomId;
    this.leaderCharId = other.leaderCharId;
    this.vip = other.vip;
    this.watch = other.watch;
    if (other.isSetChannel()) {
      this.channel = other.channel;
    }
    this.maxMemberSize = other.maxMemberSize;
    this.waitingScene = other.waitingScene;
    if (other.isSetRoomType()) {
      this.roomType = other.roomType;
    }
    this.startingScene = other.startingScene;
    this.chapterId = other.chapterId;
    this.raidId = other.raidId;
    if (other.isSetRoomTitle()) {
      this.roomTitle = other.roomTitle;
    }
    if (other.isSetShowSpringInfo()) {
      this.showSpringInfo = new com.ling9527.music.common.msg.auto.sc.SCRefreshSpring(other.showSpringInfo);
    }
    this.wedBlessVal = other.wedBlessVal;
    this.weddingvalidTime = other.weddingvalidTime;
    this.weddingFinish = other.weddingFinish;
    if (other.isSetUpdateAnnounceInfos()) {
      this.updateAnnounceInfos = new com.ling9527.music.common.msg.auto.sc.SCUpdateAnnounceInfos(other.updateAnnounceInfos);
    }
    this.weddingStep = other.weddingStep;
    this.brideID = other.brideID;
    this.bridegroomID = other.bridegroomID;
  }

  public SCJoinDanceRoomMsg deepCopy() {
    return new SCJoinDanceRoomMsg(this);
  }

  @Override
  public void clear() {
    this.passwd = null;
    setModeIsSet(false);
    this.mode = 0;
    setSongLvlIsSet(false);
    this.songLvl = 0;
    setSongIdIsSet(false);
    this.songId = 0;
    this.members = null;
    setQuickStartIsSet(false);
    this.quickStart = false;
    setRoomIdIsSet(false);
    this.roomId = 0;
    setLeaderCharIdIsSet(false);
    this.leaderCharId = 0;
    setVipIsSet(false);
    this.vip = false;
    setWatchIsSet(false);
    this.watch = false;
    this.channel = null;
    setMaxMemberSizeIsSet(false);
    this.maxMemberSize = 0;
    setWaitingSceneIsSet(false);
    this.waitingScene = 0;
    this.roomType = null;
    setStartingSceneIsSet(false);
    this.startingScene = 0;
    setChapterIdIsSet(false);
    this.chapterId = 0;
    setRaidIdIsSet(false);
    this.raidId = 0;
    this.roomTitle = null;
    this.showSpringInfo = null;
    setWedBlessValIsSet(false);
    this.wedBlessVal = 0;
    setWeddingvalidTimeIsSet(false);
    this.weddingvalidTime = 0;
    setWeddingFinishIsSet(false);
    this.weddingFinish = false;
    this.updateAnnounceInfos = null;
    setWeddingStepIsSet(false);
    this.weddingStep = 0;
    setBrideIDIsSet(false);
    this.brideID = 0;
    setBridegroomIDIsSet(false);
    this.bridegroomID = 0;
  }

  public String getPasswd() {
    return this.passwd;
  }

  public SCJoinDanceRoomMsg setPasswd(String passwd) {
    this.passwd = passwd;
    return this;
  }

  public void unsetPasswd() {
    this.passwd = null;
  }

  /** Returns true if field passwd is set (has been assigned a value) and false otherwise */
  public boolean isSetPasswd() {
    return this.passwd != null;
  }

  public void setPasswdIsSet(boolean value) {
    if (!value) {
      this.passwd = null;
    }
  }

  public byte getMode() {
    return this.mode;
  }

  public SCJoinDanceRoomMsg setMode(byte mode) {
    this.mode = mode;
    setModeIsSet(true);
    return this;
  }

  public void unsetMode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MODE_ISSET_ID);
  }

  /** Returns true if field mode is set (has been assigned a value) and false otherwise */
  public boolean isSetMode() {
    return EncodingUtils.testBit(__isset_bitfield, __MODE_ISSET_ID);
  }

  public void setModeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MODE_ISSET_ID, value);
  }

  public byte getSongLvl() {
    return this.songLvl;
  }

  public SCJoinDanceRoomMsg setSongLvl(byte songLvl) {
    this.songLvl = songLvl;
    setSongLvlIsSet(true);
    return this;
  }

  public void unsetSongLvl() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SONGLVL_ISSET_ID);
  }

  /** Returns true if field songLvl is set (has been assigned a value) and false otherwise */
  public boolean isSetSongLvl() {
    return EncodingUtils.testBit(__isset_bitfield, __SONGLVL_ISSET_ID);
  }

  public void setSongLvlIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SONGLVL_ISSET_ID, value);
  }

  public short getSongId() {
    return this.songId;
  }

  public SCJoinDanceRoomMsg setSongId(short songId) {
    this.songId = songId;
    setSongIdIsSet(true);
    return this;
  }

  public void unsetSongId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SONGID_ISSET_ID);
  }

  /** Returns true if field songId is set (has been assigned a value) and false otherwise */
  public boolean isSetSongId() {
    return EncodingUtils.testBit(__isset_bitfield, __SONGID_ISSET_ID);
  }

  public void setSongIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SONGID_ISSET_ID, value);
  }

  public int getMembersSize() {
    return (this.members == null) ? 0 : this.members.size();
  }

  public java.util.Iterator<com.ling9527.music.common.msg.auto.RoomMemberInfo> getMembersIterator() {
    return (this.members == null) ? null : this.members.iterator();
  }

  public void addToMembers(com.ling9527.music.common.msg.auto.RoomMemberInfo elem) {
    if (this.members == null) {
      this.members = new ArrayList<com.ling9527.music.common.msg.auto.RoomMemberInfo>();
    }
    this.members.add(elem);
  }

  public List<com.ling9527.music.common.msg.auto.RoomMemberInfo> getMembers() {
    return this.members;
  }

  public SCJoinDanceRoomMsg setMembers(List<com.ling9527.music.common.msg.auto.RoomMemberInfo> members) {
    this.members = members;
    return this;
  }

  public void unsetMembers() {
    this.members = null;
  }

  /** Returns true if field members is set (has been assigned a value) and false otherwise */
  public boolean isSetMembers() {
    return this.members != null;
  }

  public void setMembersIsSet(boolean value) {
    if (!value) {
      this.members = null;
    }
  }

  public boolean isQuickStart() {
    return this.quickStart;
  }

  public SCJoinDanceRoomMsg setQuickStart(boolean quickStart) {
    this.quickStart = quickStart;
    setQuickStartIsSet(true);
    return this;
  }

  public void unsetQuickStart() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUICKSTART_ISSET_ID);
  }

  /** Returns true if field quickStart is set (has been assigned a value) and false otherwise */
  public boolean isSetQuickStart() {
    return EncodingUtils.testBit(__isset_bitfield, __QUICKSTART_ISSET_ID);
  }

  public void setQuickStartIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUICKSTART_ISSET_ID, value);
  }

  public int getRoomId() {
    return this.roomId;
  }

  public SCJoinDanceRoomMsg setRoomId(int roomId) {
    this.roomId = roomId;
    setRoomIdIsSet(true);
    return this;
  }

  public void unsetRoomId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROOMID_ISSET_ID);
  }

  /** Returns true if field roomId is set (has been assigned a value) and false otherwise */
  public boolean isSetRoomId() {
    return EncodingUtils.testBit(__isset_bitfield, __ROOMID_ISSET_ID);
  }

  public void setRoomIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROOMID_ISSET_ID, value);
  }

  public long getLeaderCharId() {
    return this.leaderCharId;
  }

  public SCJoinDanceRoomMsg setLeaderCharId(long leaderCharId) {
    this.leaderCharId = leaderCharId;
    setLeaderCharIdIsSet(true);
    return this;
  }

  public void unsetLeaderCharId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEADERCHARID_ISSET_ID);
  }

  /** Returns true if field leaderCharId is set (has been assigned a value) and false otherwise */
  public boolean isSetLeaderCharId() {
    return EncodingUtils.testBit(__isset_bitfield, __LEADERCHARID_ISSET_ID);
  }

  public void setLeaderCharIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEADERCHARID_ISSET_ID, value);
  }

  public boolean isVip() {
    return this.vip;
  }

  public SCJoinDanceRoomMsg setVip(boolean vip) {
    this.vip = vip;
    setVipIsSet(true);
    return this;
  }

  public void unsetVip() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIP_ISSET_ID);
  }

  /** Returns true if field vip is set (has been assigned a value) and false otherwise */
  public boolean isSetVip() {
    return EncodingUtils.testBit(__isset_bitfield, __VIP_ISSET_ID);
  }

  public void setVipIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIP_ISSET_ID, value);
  }

  public boolean isWatch() {
    return this.watch;
  }

  public SCJoinDanceRoomMsg setWatch(boolean watch) {
    this.watch = watch;
    setWatchIsSet(true);
    return this;
  }

  public void unsetWatch() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WATCH_ISSET_ID);
  }

  /** Returns true if field watch is set (has been assigned a value) and false otherwise */
  public boolean isSetWatch() {
    return EncodingUtils.testBit(__isset_bitfield, __WATCH_ISSET_ID);
  }

  public void setWatchIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WATCH_ISSET_ID, value);
  }

  /**
   * 
   * @see com.ling9527.music.common.msg.auto.RoomChannel
   */
  public com.ling9527.music.common.msg.auto.RoomChannel getChannel() {
    return this.channel;
  }

  /**
   * 
   * @see com.ling9527.music.common.msg.auto.RoomChannel
   */
  public SCJoinDanceRoomMsg setChannel(com.ling9527.music.common.msg.auto.RoomChannel channel) {
    this.channel = channel;
    return this;
  }

  public void unsetChannel() {
    this.channel = null;
  }

  /** Returns true if field channel is set (has been assigned a value) and false otherwise */
  public boolean isSetChannel() {
    return this.channel != null;
  }

  public void setChannelIsSet(boolean value) {
    if (!value) {
      this.channel = null;
    }
  }

  public short getMaxMemberSize() {
    return this.maxMemberSize;
  }

  public SCJoinDanceRoomMsg setMaxMemberSize(short maxMemberSize) {
    this.maxMemberSize = maxMemberSize;
    setMaxMemberSizeIsSet(true);
    return this;
  }

  public void unsetMaxMemberSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXMEMBERSIZE_ISSET_ID);
  }

  /** Returns true if field maxMemberSize is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxMemberSize() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXMEMBERSIZE_ISSET_ID);
  }

  public void setMaxMemberSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXMEMBERSIZE_ISSET_ID, value);
  }

  /**
   * 等待场景
   */
  public int getWaitingScene() {
    return this.waitingScene;
  }

  /**
   * 等待场景
   */
  public SCJoinDanceRoomMsg setWaitingScene(int waitingScene) {
    this.waitingScene = waitingScene;
    setWaitingSceneIsSet(true);
    return this;
  }

  public void unsetWaitingScene() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WAITINGSCENE_ISSET_ID);
  }

  /** Returns true if field waitingScene is set (has been assigned a value) and false otherwise */
  public boolean isSetWaitingScene() {
    return EncodingUtils.testBit(__isset_bitfield, __WAITINGSCENE_ISSET_ID);
  }

  public void setWaitingSceneIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WAITINGSCENE_ISSET_ID, value);
  }

  /**
   * 
   * @see com.ling9527.music.common.msg.auto.CreateRoomType
   */
  public com.ling9527.music.common.msg.auto.CreateRoomType getRoomType() {
    return this.roomType;
  }

  /**
   * 
   * @see com.ling9527.music.common.msg.auto.CreateRoomType
   */
  public SCJoinDanceRoomMsg setRoomType(com.ling9527.music.common.msg.auto.CreateRoomType roomType) {
    this.roomType = roomType;
    return this;
  }

  public void unsetRoomType() {
    this.roomType = null;
  }

  /** Returns true if field roomType is set (has been assigned a value) and false otherwise */
  public boolean isSetRoomType() {
    return this.roomType != null;
  }

  public void setRoomTypeIsSet(boolean value) {
    if (!value) {
      this.roomType = null;
    }
  }

  /**
   * 开始场景
   */
  public int getStartingScene() {
    return this.startingScene;
  }

  /**
   * 开始场景
   */
  public SCJoinDanceRoomMsg setStartingScene(int startingScene) {
    this.startingScene = startingScene;
    setStartingSceneIsSet(true);
    return this;
  }

  public void unsetStartingScene() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTINGSCENE_ISSET_ID);
  }

  /** Returns true if field startingScene is set (has been assigned a value) and false otherwise */
  public boolean isSetStartingScene() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTINGSCENE_ISSET_ID);
  }

  public void setStartingSceneIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTINGSCENE_ISSET_ID, value);
  }

  public short getChapterId() {
    return this.chapterId;
  }

  public SCJoinDanceRoomMsg setChapterId(short chapterId) {
    this.chapterId = chapterId;
    setChapterIdIsSet(true);
    return this;
  }

  public void unsetChapterId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHAPTERID_ISSET_ID);
  }

  /** Returns true if field chapterId is set (has been assigned a value) and false otherwise */
  public boolean isSetChapterId() {
    return EncodingUtils.testBit(__isset_bitfield, __CHAPTERID_ISSET_ID);
  }

  public void setChapterIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHAPTERID_ISSET_ID, value);
  }

  public short getRaidId() {
    return this.raidId;
  }

  public SCJoinDanceRoomMsg setRaidId(short raidId) {
    this.raidId = raidId;
    setRaidIdIsSet(true);
    return this;
  }

  public void unsetRaidId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RAIDID_ISSET_ID);
  }

  /** Returns true if field raidId is set (has been assigned a value) and false otherwise */
  public boolean isSetRaidId() {
    return EncodingUtils.testBit(__isset_bitfield, __RAIDID_ISSET_ID);
  }

  public void setRaidIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RAIDID_ISSET_ID, value);
  }

  /**
   * 房间名
   */
  public String getRoomTitle() {
    return this.roomTitle;
  }

  /**
   * 房间名
   */
  public SCJoinDanceRoomMsg setRoomTitle(String roomTitle) {
    this.roomTitle = roomTitle;
    return this;
  }

  public void unsetRoomTitle() {
    this.roomTitle = null;
  }

  /** Returns true if field roomTitle is set (has been assigned a value) and false otherwise */
  public boolean isSetRoomTitle() {
    return this.roomTitle != null;
  }

  public void setRoomTitleIsSet(boolean value) {
    if (!value) {
      this.roomTitle = null;
    }
  }

  /**
   * 刷新出的泉眼
   */
  public com.ling9527.music.common.msg.auto.sc.SCRefreshSpring getShowSpringInfo() {
    return this.showSpringInfo;
  }

  /**
   * 刷新出的泉眼
   */
  public SCJoinDanceRoomMsg setShowSpringInfo(com.ling9527.music.common.msg.auto.sc.SCRefreshSpring showSpringInfo) {
    this.showSpringInfo = showSpringInfo;
    return this;
  }

  public void unsetShowSpringInfo() {
    this.showSpringInfo = null;
  }

  /** Returns true if field showSpringInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetShowSpringInfo() {
    return this.showSpringInfo != null;
  }

  public void setShowSpringInfoIsSet(boolean value) {
    if (!value) {
      this.showSpringInfo = null;
    }
  }

  /**
   * 当前婚礼祝福值
   */
  public int getWedBlessVal() {
    return this.wedBlessVal;
  }

  /**
   * 当前婚礼祝福值
   */
  public SCJoinDanceRoomMsg setWedBlessVal(int wedBlessVal) {
    this.wedBlessVal = wedBlessVal;
    setWedBlessValIsSet(true);
    return this;
  }

  public void unsetWedBlessVal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WEDBLESSVAL_ISSET_ID);
  }

  /** Returns true if field wedBlessVal is set (has been assigned a value) and false otherwise */
  public boolean isSetWedBlessVal() {
    return EncodingUtils.testBit(__isset_bitfield, __WEDBLESSVAL_ISSET_ID);
  }

  public void setWedBlessValIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WEDBLESSVAL_ISSET_ID, value);
  }

  /**
   * 当前婚礼截止时间(/1000)
   */
  public int getWeddingvalidTime() {
    return this.weddingvalidTime;
  }

  /**
   * 当前婚礼截止时间(/1000)
   */
  public SCJoinDanceRoomMsg setWeddingvalidTime(int weddingvalidTime) {
    this.weddingvalidTime = weddingvalidTime;
    setWeddingvalidTimeIsSet(true);
    return this;
  }

  public void unsetWeddingvalidTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WEDDINGVALIDTIME_ISSET_ID);
  }

  /** Returns true if field weddingvalidTime is set (has been assigned a value) and false otherwise */
  public boolean isSetWeddingvalidTime() {
    return EncodingUtils.testBit(__isset_bitfield, __WEDDINGVALIDTIME_ISSET_ID);
  }

  public void setWeddingvalidTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WEDDINGVALIDTIME_ISSET_ID, value);
  }

  /**
   * 婚礼是否完成
   */
  public boolean isWeddingFinish() {
    return this.weddingFinish;
  }

  /**
   * 婚礼是否完成
   */
  public SCJoinDanceRoomMsg setWeddingFinish(boolean weddingFinish) {
    this.weddingFinish = weddingFinish;
    setWeddingFinishIsSet(true);
    return this;
  }

  public void unsetWeddingFinish() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WEDDINGFINISH_ISSET_ID);
  }

  /** Returns true if field weddingFinish is set (has been assigned a value) and false otherwise */
  public boolean isSetWeddingFinish() {
    return EncodingUtils.testBit(__isset_bitfield, __WEDDINGFINISH_ISSET_ID);
  }

  public void setWeddingFinishIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WEDDINGFINISH_ISSET_ID, value);
  }

  /**
   * 通告信息更新
   */
  public com.ling9527.music.common.msg.auto.sc.SCUpdateAnnounceInfos getUpdateAnnounceInfos() {
    return this.updateAnnounceInfos;
  }

  /**
   * 通告信息更新
   */
  public SCJoinDanceRoomMsg setUpdateAnnounceInfos(com.ling9527.music.common.msg.auto.sc.SCUpdateAnnounceInfos updateAnnounceInfos) {
    this.updateAnnounceInfos = updateAnnounceInfos;
    return this;
  }

  public void unsetUpdateAnnounceInfos() {
    this.updateAnnounceInfos = null;
  }

  /** Returns true if field updateAnnounceInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateAnnounceInfos() {
    return this.updateAnnounceInfos != null;
  }

  public void setUpdateAnnounceInfosIsSet(boolean value) {
    if (!value) {
      this.updateAnnounceInfos = null;
    }
  }

  /**
   * 当前婚礼步骤
   */
  public byte getWeddingStep() {
    return this.weddingStep;
  }

  /**
   * 当前婚礼步骤
   */
  public SCJoinDanceRoomMsg setWeddingStep(byte weddingStep) {
    this.weddingStep = weddingStep;
    setWeddingStepIsSet(true);
    return this;
  }

  public void unsetWeddingStep() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WEDDINGSTEP_ISSET_ID);
  }

  /** Returns true if field weddingStep is set (has been assigned a value) and false otherwise */
  public boolean isSetWeddingStep() {
    return EncodingUtils.testBit(__isset_bitfield, __WEDDINGSTEP_ISSET_ID);
  }

  public void setWeddingStepIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WEDDINGSTEP_ISSET_ID, value);
  }

  /**
   * 婚礼新娘ID
   */
  public long getBrideID() {
    return this.brideID;
  }

  /**
   * 婚礼新娘ID
   */
  public SCJoinDanceRoomMsg setBrideID(long brideID) {
    this.brideID = brideID;
    setBrideIDIsSet(true);
    return this;
  }

  public void unsetBrideID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BRIDEID_ISSET_ID);
  }

  /** Returns true if field brideID is set (has been assigned a value) and false otherwise */
  public boolean isSetBrideID() {
    return EncodingUtils.testBit(__isset_bitfield, __BRIDEID_ISSET_ID);
  }

  public void setBrideIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BRIDEID_ISSET_ID, value);
  }

  /**
   * 婚礼新郎ID
   */
  public long getBridegroomID() {
    return this.bridegroomID;
  }

  /**
   * 婚礼新郎ID
   */
  public SCJoinDanceRoomMsg setBridegroomID(long bridegroomID) {
    this.bridegroomID = bridegroomID;
    setBridegroomIDIsSet(true);
    return this;
  }

  public void unsetBridegroomID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BRIDEGROOMID_ISSET_ID);
  }

  /** Returns true if field bridegroomID is set (has been assigned a value) and false otherwise */
  public boolean isSetBridegroomID() {
    return EncodingUtils.testBit(__isset_bitfield, __BRIDEGROOMID_ISSET_ID);
  }

  public void setBridegroomIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BRIDEGROOMID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PASSWD:
      if (value == null) {
        unsetPasswd();
      } else {
        setPasswd((String)value);
      }
      break;

    case MODE:
      if (value == null) {
        unsetMode();
      } else {
        setMode((Byte)value);
      }
      break;

    case SONG_LVL:
      if (value == null) {
        unsetSongLvl();
      } else {
        setSongLvl((Byte)value);
      }
      break;

    case SONG_ID:
      if (value == null) {
        unsetSongId();
      } else {
        setSongId((Short)value);
      }
      break;

    case MEMBERS:
      if (value == null) {
        unsetMembers();
      } else {
        setMembers((List<com.ling9527.music.common.msg.auto.RoomMemberInfo>)value);
      }
      break;

    case QUICK_START:
      if (value == null) {
        unsetQuickStart();
      } else {
        setQuickStart((Boolean)value);
      }
      break;

    case ROOM_ID:
      if (value == null) {
        unsetRoomId();
      } else {
        setRoomId((Integer)value);
      }
      break;

    case LEADER_CHAR_ID:
      if (value == null) {
        unsetLeaderCharId();
      } else {
        setLeaderCharId((Long)value);
      }
      break;

    case VIP:
      if (value == null) {
        unsetVip();
      } else {
        setVip((Boolean)value);
      }
      break;

    case WATCH:
      if (value == null) {
        unsetWatch();
      } else {
        setWatch((Boolean)value);
      }
      break;

    case CHANNEL:
      if (value == null) {
        unsetChannel();
      } else {
        setChannel((com.ling9527.music.common.msg.auto.RoomChannel)value);
      }
      break;

    case MAX_MEMBER_SIZE:
      if (value == null) {
        unsetMaxMemberSize();
      } else {
        setMaxMemberSize((Short)value);
      }
      break;

    case WAITING_SCENE:
      if (value == null) {
        unsetWaitingScene();
      } else {
        setWaitingScene((Integer)value);
      }
      break;

    case ROOM_TYPE:
      if (value == null) {
        unsetRoomType();
      } else {
        setRoomType((com.ling9527.music.common.msg.auto.CreateRoomType)value);
      }
      break;

    case STARTING_SCENE:
      if (value == null) {
        unsetStartingScene();
      } else {
        setStartingScene((Integer)value);
      }
      break;

    case CHAPTER_ID:
      if (value == null) {
        unsetChapterId();
      } else {
        setChapterId((Short)value);
      }
      break;

    case RAID_ID:
      if (value == null) {
        unsetRaidId();
      } else {
        setRaidId((Short)value);
      }
      break;

    case ROOM_TITLE:
      if (value == null) {
        unsetRoomTitle();
      } else {
        setRoomTitle((String)value);
      }
      break;

    case SHOW_SPRING_INFO:
      if (value == null) {
        unsetShowSpringInfo();
      } else {
        setShowSpringInfo((com.ling9527.music.common.msg.auto.sc.SCRefreshSpring)value);
      }
      break;

    case WED_BLESS_VAL:
      if (value == null) {
        unsetWedBlessVal();
      } else {
        setWedBlessVal((Integer)value);
      }
      break;

    case WEDDINGVALID_TIME:
      if (value == null) {
        unsetWeddingvalidTime();
      } else {
        setWeddingvalidTime((Integer)value);
      }
      break;

    case WEDDING_FINISH:
      if (value == null) {
        unsetWeddingFinish();
      } else {
        setWeddingFinish((Boolean)value);
      }
      break;

    case UPDATE_ANNOUNCE_INFOS:
      if (value == null) {
        unsetUpdateAnnounceInfos();
      } else {
        setUpdateAnnounceInfos((com.ling9527.music.common.msg.auto.sc.SCUpdateAnnounceInfos)value);
      }
      break;

    case WEDDING_STEP:
      if (value == null) {
        unsetWeddingStep();
      } else {
        setWeddingStep((Byte)value);
      }
      break;

    case BRIDE_ID:
      if (value == null) {
        unsetBrideID();
      } else {
        setBrideID((Long)value);
      }
      break;

    case BRIDEGROOM_ID:
      if (value == null) {
        unsetBridegroomID();
      } else {
        setBridegroomID((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PASSWD:
      return getPasswd();

    case MODE:
      return Byte.valueOf(getMode());

    case SONG_LVL:
      return Byte.valueOf(getSongLvl());

    case SONG_ID:
      return Short.valueOf(getSongId());

    case MEMBERS:
      return getMembers();

    case QUICK_START:
      return Boolean.valueOf(isQuickStart());

    case ROOM_ID:
      return Integer.valueOf(getRoomId());

    case LEADER_CHAR_ID:
      return Long.valueOf(getLeaderCharId());

    case VIP:
      return Boolean.valueOf(isVip());

    case WATCH:
      return Boolean.valueOf(isWatch());

    case CHANNEL:
      return getChannel();

    case MAX_MEMBER_SIZE:
      return Short.valueOf(getMaxMemberSize());

    case WAITING_SCENE:
      return Integer.valueOf(getWaitingScene());

    case ROOM_TYPE:
      return getRoomType();

    case STARTING_SCENE:
      return Integer.valueOf(getStartingScene());

    case CHAPTER_ID:
      return Short.valueOf(getChapterId());

    case RAID_ID:
      return Short.valueOf(getRaidId());

    case ROOM_TITLE:
      return getRoomTitle();

    case SHOW_SPRING_INFO:
      return getShowSpringInfo();

    case WED_BLESS_VAL:
      return Integer.valueOf(getWedBlessVal());

    case WEDDINGVALID_TIME:
      return Integer.valueOf(getWeddingvalidTime());

    case WEDDING_FINISH:
      return Boolean.valueOf(isWeddingFinish());

    case UPDATE_ANNOUNCE_INFOS:
      return getUpdateAnnounceInfos();

    case WEDDING_STEP:
      return Byte.valueOf(getWeddingStep());

    case BRIDE_ID:
      return Long.valueOf(getBrideID());

    case BRIDEGROOM_ID:
      return Long.valueOf(getBridegroomID());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PASSWD:
      return isSetPasswd();
    case MODE:
      return isSetMode();
    case SONG_LVL:
      return isSetSongLvl();
    case SONG_ID:
      return isSetSongId();
    case MEMBERS:
      return isSetMembers();
    case QUICK_START:
      return isSetQuickStart();
    case ROOM_ID:
      return isSetRoomId();
    case LEADER_CHAR_ID:
      return isSetLeaderCharId();
    case VIP:
      return isSetVip();
    case WATCH:
      return isSetWatch();
    case CHANNEL:
      return isSetChannel();
    case MAX_MEMBER_SIZE:
      return isSetMaxMemberSize();
    case WAITING_SCENE:
      return isSetWaitingScene();
    case ROOM_TYPE:
      return isSetRoomType();
    case STARTING_SCENE:
      return isSetStartingScene();
    case CHAPTER_ID:
      return isSetChapterId();
    case RAID_ID:
      return isSetRaidId();
    case ROOM_TITLE:
      return isSetRoomTitle();
    case SHOW_SPRING_INFO:
      return isSetShowSpringInfo();
    case WED_BLESS_VAL:
      return isSetWedBlessVal();
    case WEDDINGVALID_TIME:
      return isSetWeddingvalidTime();
    case WEDDING_FINISH:
      return isSetWeddingFinish();
    case UPDATE_ANNOUNCE_INFOS:
      return isSetUpdateAnnounceInfos();
    case WEDDING_STEP:
      return isSetWeddingStep();
    case BRIDE_ID:
      return isSetBrideID();
    case BRIDEGROOM_ID:
      return isSetBridegroomID();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCJoinDanceRoomMsg)
      return this.equals((SCJoinDanceRoomMsg)that);
    return false;
  }

  public boolean equals(SCJoinDanceRoomMsg that) {
    if (that == null)
      return false;

    boolean this_present_passwd = true && this.isSetPasswd();
    boolean that_present_passwd = true && that.isSetPasswd();
    if (this_present_passwd || that_present_passwd) {
      if (!(this_present_passwd && that_present_passwd))
        return false;
      if (!this.passwd.equals(that.passwd))
        return false;
    }

    boolean this_present_mode = true;
    boolean that_present_mode = true;
    if (this_present_mode || that_present_mode) {
      if (!(this_present_mode && that_present_mode))
        return false;
      if (this.mode != that.mode)
        return false;
    }

    boolean this_present_songLvl = true;
    boolean that_present_songLvl = true;
    if (this_present_songLvl || that_present_songLvl) {
      if (!(this_present_songLvl && that_present_songLvl))
        return false;
      if (this.songLvl != that.songLvl)
        return false;
    }

    boolean this_present_songId = true;
    boolean that_present_songId = true;
    if (this_present_songId || that_present_songId) {
      if (!(this_present_songId && that_present_songId))
        return false;
      if (this.songId != that.songId)
        return false;
    }

    boolean this_present_members = true && this.isSetMembers();
    boolean that_present_members = true && that.isSetMembers();
    if (this_present_members || that_present_members) {
      if (!(this_present_members && that_present_members))
        return false;
      if (!this.members.equals(that.members))
        return false;
    }

    boolean this_present_quickStart = true;
    boolean that_present_quickStart = true;
    if (this_present_quickStart || that_present_quickStart) {
      if (!(this_present_quickStart && that_present_quickStart))
        return false;
      if (this.quickStart != that.quickStart)
        return false;
    }

    boolean this_present_roomId = true;
    boolean that_present_roomId = true;
    if (this_present_roomId || that_present_roomId) {
      if (!(this_present_roomId && that_present_roomId))
        return false;
      if (this.roomId != that.roomId)
        return false;
    }

    boolean this_present_leaderCharId = true;
    boolean that_present_leaderCharId = true;
    if (this_present_leaderCharId || that_present_leaderCharId) {
      if (!(this_present_leaderCharId && that_present_leaderCharId))
        return false;
      if (this.leaderCharId != that.leaderCharId)
        return false;
    }

    boolean this_present_vip = true;
    boolean that_present_vip = true;
    if (this_present_vip || that_present_vip) {
      if (!(this_present_vip && that_present_vip))
        return false;
      if (this.vip != that.vip)
        return false;
    }

    boolean this_present_watch = true;
    boolean that_present_watch = true;
    if (this_present_watch || that_present_watch) {
      if (!(this_present_watch && that_present_watch))
        return false;
      if (this.watch != that.watch)
        return false;
    }

    boolean this_present_channel = true && this.isSetChannel();
    boolean that_present_channel = true && that.isSetChannel();
    if (this_present_channel || that_present_channel) {
      if (!(this_present_channel && that_present_channel))
        return false;
      if (!this.channel.equals(that.channel))
        return false;
    }

    boolean this_present_maxMemberSize = true;
    boolean that_present_maxMemberSize = true;
    if (this_present_maxMemberSize || that_present_maxMemberSize) {
      if (!(this_present_maxMemberSize && that_present_maxMemberSize))
        return false;
      if (this.maxMemberSize != that.maxMemberSize)
        return false;
    }

    boolean this_present_waitingScene = true;
    boolean that_present_waitingScene = true;
    if (this_present_waitingScene || that_present_waitingScene) {
      if (!(this_present_waitingScene && that_present_waitingScene))
        return false;
      if (this.waitingScene != that.waitingScene)
        return false;
    }

    boolean this_present_roomType = true && this.isSetRoomType();
    boolean that_present_roomType = true && that.isSetRoomType();
    if (this_present_roomType || that_present_roomType) {
      if (!(this_present_roomType && that_present_roomType))
        return false;
      if (!this.roomType.equals(that.roomType))
        return false;
    }

    boolean this_present_startingScene = true;
    boolean that_present_startingScene = true;
    if (this_present_startingScene || that_present_startingScene) {
      if (!(this_present_startingScene && that_present_startingScene))
        return false;
      if (this.startingScene != that.startingScene)
        return false;
    }

    boolean this_present_chapterId = true && this.isSetChapterId();
    boolean that_present_chapterId = true && that.isSetChapterId();
    if (this_present_chapterId || that_present_chapterId) {
      if (!(this_present_chapterId && that_present_chapterId))
        return false;
      if (this.chapterId != that.chapterId)
        return false;
    }

    boolean this_present_raidId = true && this.isSetRaidId();
    boolean that_present_raidId = true && that.isSetRaidId();
    if (this_present_raidId || that_present_raidId) {
      if (!(this_present_raidId && that_present_raidId))
        return false;
      if (this.raidId != that.raidId)
        return false;
    }

    boolean this_present_roomTitle = true && this.isSetRoomTitle();
    boolean that_present_roomTitle = true && that.isSetRoomTitle();
    if (this_present_roomTitle || that_present_roomTitle) {
      if (!(this_present_roomTitle && that_present_roomTitle))
        return false;
      if (!this.roomTitle.equals(that.roomTitle))
        return false;
    }

    boolean this_present_showSpringInfo = true && this.isSetShowSpringInfo();
    boolean that_present_showSpringInfo = true && that.isSetShowSpringInfo();
    if (this_present_showSpringInfo || that_present_showSpringInfo) {
      if (!(this_present_showSpringInfo && that_present_showSpringInfo))
        return false;
      if (!this.showSpringInfo.equals(that.showSpringInfo))
        return false;
    }

    boolean this_present_wedBlessVal = true && this.isSetWedBlessVal();
    boolean that_present_wedBlessVal = true && that.isSetWedBlessVal();
    if (this_present_wedBlessVal || that_present_wedBlessVal) {
      if (!(this_present_wedBlessVal && that_present_wedBlessVal))
        return false;
      if (this.wedBlessVal != that.wedBlessVal)
        return false;
    }

    boolean this_present_weddingvalidTime = true && this.isSetWeddingvalidTime();
    boolean that_present_weddingvalidTime = true && that.isSetWeddingvalidTime();
    if (this_present_weddingvalidTime || that_present_weddingvalidTime) {
      if (!(this_present_weddingvalidTime && that_present_weddingvalidTime))
        return false;
      if (this.weddingvalidTime != that.weddingvalidTime)
        return false;
    }

    boolean this_present_weddingFinish = true && this.isSetWeddingFinish();
    boolean that_present_weddingFinish = true && that.isSetWeddingFinish();
    if (this_present_weddingFinish || that_present_weddingFinish) {
      if (!(this_present_weddingFinish && that_present_weddingFinish))
        return false;
      if (this.weddingFinish != that.weddingFinish)
        return false;
    }

    boolean this_present_updateAnnounceInfos = true && this.isSetUpdateAnnounceInfos();
    boolean that_present_updateAnnounceInfos = true && that.isSetUpdateAnnounceInfos();
    if (this_present_updateAnnounceInfos || that_present_updateAnnounceInfos) {
      if (!(this_present_updateAnnounceInfos && that_present_updateAnnounceInfos))
        return false;
      if (!this.updateAnnounceInfos.equals(that.updateAnnounceInfos))
        return false;
    }

    boolean this_present_weddingStep = true && this.isSetWeddingStep();
    boolean that_present_weddingStep = true && that.isSetWeddingStep();
    if (this_present_weddingStep || that_present_weddingStep) {
      if (!(this_present_weddingStep && that_present_weddingStep))
        return false;
      if (this.weddingStep != that.weddingStep)
        return false;
    }

    boolean this_present_brideID = true && this.isSetBrideID();
    boolean that_present_brideID = true && that.isSetBrideID();
    if (this_present_brideID || that_present_brideID) {
      if (!(this_present_brideID && that_present_brideID))
        return false;
      if (this.brideID != that.brideID)
        return false;
    }

    boolean this_present_bridegroomID = true && this.isSetBridegroomID();
    boolean that_present_bridegroomID = true && that.isSetBridegroomID();
    if (this_present_bridegroomID || that_present_bridegroomID) {
      if (!(this_present_bridegroomID && that_present_bridegroomID))
        return false;
      if (this.bridegroomID != that.bridegroomID)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCJoinDanceRoomMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCJoinDanceRoomMsg typedOther = (SCJoinDanceRoomMsg)other;

    lastComparison = Boolean.valueOf(isSetPasswd()).compareTo(typedOther.isSetPasswd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPasswd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.passwd, typedOther.passwd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMode()).compareTo(typedOther.isSetMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mode, typedOther.mode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSongLvl()).compareTo(typedOther.isSetSongLvl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSongLvl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.songLvl, typedOther.songLvl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSongId()).compareTo(typedOther.isSetSongId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSongId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.songId, typedOther.songId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMembers()).compareTo(typedOther.isSetMembers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMembers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.members, typedOther.members);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuickStart()).compareTo(typedOther.isSetQuickStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuickStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quickStart, typedOther.quickStart);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRoomId()).compareTo(typedOther.isSetRoomId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoomId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roomId, typedOther.roomId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLeaderCharId()).compareTo(typedOther.isSetLeaderCharId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeaderCharId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leaderCharId, typedOther.leaderCharId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVip()).compareTo(typedOther.isSetVip());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVip()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vip, typedOther.vip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWatch()).compareTo(typedOther.isSetWatch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWatch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.watch, typedOther.watch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChannel()).compareTo(typedOther.isSetChannel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channel, typedOther.channel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxMemberSize()).compareTo(typedOther.isSetMaxMemberSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxMemberSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxMemberSize, typedOther.maxMemberSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWaitingScene()).compareTo(typedOther.isSetWaitingScene());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWaitingScene()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.waitingScene, typedOther.waitingScene);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRoomType()).compareTo(typedOther.isSetRoomType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoomType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roomType, typedOther.roomType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartingScene()).compareTo(typedOther.isSetStartingScene());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartingScene()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startingScene, typedOther.startingScene);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChapterId()).compareTo(typedOther.isSetChapterId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChapterId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chapterId, typedOther.chapterId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRaidId()).compareTo(typedOther.isSetRaidId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRaidId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.raidId, typedOther.raidId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRoomTitle()).compareTo(typedOther.isSetRoomTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoomTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roomTitle, typedOther.roomTitle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShowSpringInfo()).compareTo(typedOther.isSetShowSpringInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShowSpringInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.showSpringInfo, typedOther.showSpringInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWedBlessVal()).compareTo(typedOther.isSetWedBlessVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWedBlessVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wedBlessVal, typedOther.wedBlessVal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWeddingvalidTime()).compareTo(typedOther.isSetWeddingvalidTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWeddingvalidTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.weddingvalidTime, typedOther.weddingvalidTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWeddingFinish()).compareTo(typedOther.isSetWeddingFinish());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWeddingFinish()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.weddingFinish, typedOther.weddingFinish);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateAnnounceInfos()).compareTo(typedOther.isSetUpdateAnnounceInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateAnnounceInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateAnnounceInfos, typedOther.updateAnnounceInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWeddingStep()).compareTo(typedOther.isSetWeddingStep());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWeddingStep()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.weddingStep, typedOther.weddingStep);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrideID()).compareTo(typedOther.isSetBrideID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrideID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brideID, typedOther.brideID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBridegroomID()).compareTo(typedOther.isSetBridegroomID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBridegroomID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bridegroomID, typedOther.bridegroomID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCJoinDanceRoomMsg(");
    boolean first = true;

    sb.append("passwd:");
    if (this.passwd == null) {
      sb.append("null");
    } else {
      sb.append(this.passwd);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mode:");
    sb.append(this.mode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("songLvl:");
    sb.append(this.songLvl);
    first = false;
    if (!first) sb.append(", ");
    sb.append("songId:");
    sb.append(this.songId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("members:");
    if (this.members == null) {
      sb.append("null");
    } else {
      sb.append(this.members);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("quickStart:");
    sb.append(this.quickStart);
    first = false;
    if (!first) sb.append(", ");
    sb.append("roomId:");
    sb.append(this.roomId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("leaderCharId:");
    sb.append(this.leaderCharId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vip:");
    sb.append(this.vip);
    first = false;
    if (!first) sb.append(", ");
    sb.append("watch:");
    sb.append(this.watch);
    first = false;
    if (!first) sb.append(", ");
    sb.append("channel:");
    if (this.channel == null) {
      sb.append("null");
    } else {
      sb.append(this.channel);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxMemberSize:");
    sb.append(this.maxMemberSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("waitingScene:");
    sb.append(this.waitingScene);
    first = false;
    if (!first) sb.append(", ");
    sb.append("roomType:");
    if (this.roomType == null) {
      sb.append("null");
    } else {
      sb.append(this.roomType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("startingScene:");
    sb.append(this.startingScene);
    first = false;
    if (isSetChapterId()) {
      if (!first) sb.append(", ");
      sb.append("chapterId:");
      sb.append(this.chapterId);
      first = false;
    }
    if (isSetRaidId()) {
      if (!first) sb.append(", ");
      sb.append("raidId:");
      sb.append(this.raidId);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("roomTitle:");
    if (this.roomTitle == null) {
      sb.append("null");
    } else {
      sb.append(this.roomTitle);
    }
    first = false;
    if (isSetShowSpringInfo()) {
      if (!first) sb.append(", ");
      sb.append("showSpringInfo:");
      if (this.showSpringInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.showSpringInfo);
      }
      first = false;
    }
    if (isSetWedBlessVal()) {
      if (!first) sb.append(", ");
      sb.append("wedBlessVal:");
      sb.append(this.wedBlessVal);
      first = false;
    }
    if (isSetWeddingvalidTime()) {
      if (!first) sb.append(", ");
      sb.append("weddingvalidTime:");
      sb.append(this.weddingvalidTime);
      first = false;
    }
    if (isSetWeddingFinish()) {
      if (!first) sb.append(", ");
      sb.append("weddingFinish:");
      sb.append(this.weddingFinish);
      first = false;
    }
    if (isSetUpdateAnnounceInfos()) {
      if (!first) sb.append(", ");
      sb.append("updateAnnounceInfos:");
      if (this.updateAnnounceInfos == null) {
        sb.append("null");
      } else {
        sb.append(this.updateAnnounceInfos);
      }
      first = false;
    }
    if (isSetWeddingStep()) {
      if (!first) sb.append(", ");
      sb.append("weddingStep:");
      sb.append(this.weddingStep);
      first = false;
    }
    if (isSetBrideID()) {
      if (!first) sb.append(", ");
      sb.append("brideID:");
      sb.append(this.brideID);
      first = false;
    }
    if (isSetBridegroomID()) {
      if (!first) sb.append(", ");
      sb.append("bridegroomID:");
      sb.append(this.bridegroomID);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (showSpringInfo != null) {
      showSpringInfo.validate();
    }
    if (updateAnnounceInfos != null) {
      updateAnnounceInfos.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCJoinDanceRoomMsgStandardSchemeFactory implements SchemeFactory {
    public SCJoinDanceRoomMsgStandardScheme getScheme() {
      return new SCJoinDanceRoomMsgStandardScheme();
    }
  }

  private static class SCJoinDanceRoomMsgStandardScheme extends StandardScheme<SCJoinDanceRoomMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCJoinDanceRoomMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PASSWD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.passwd = iprot.readString();
              struct.setPasswdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.mode = iprot.readByte();
              struct.setModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SONG_LVL
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.songLvl = iprot.readByte();
              struct.setSongLvlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SONG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.songId = iprot.readI16();
              struct.setSongIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MEMBERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.members = new ArrayList<com.ling9527.music.common.msg.auto.RoomMemberInfo>(_list8.size);
                for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                {
                  com.ling9527.music.common.msg.auto.RoomMemberInfo _elem10; // required
                  _elem10 = new com.ling9527.music.common.msg.auto.RoomMemberInfo();
                  _elem10.read(iprot);
                  struct.members.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setMembersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // QUICK_START
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.quickStart = iprot.readBool();
              struct.setQuickStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ROOM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.roomId = iprot.readI32();
              struct.setRoomIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LEADER_CHAR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.leaderCharId = iprot.readI64();
              struct.setLeaderCharIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // VIP
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.vip = iprot.readBool();
              struct.setVipIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // WATCH
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.watch = iprot.readBool();
              struct.setWatchIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CHANNEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.channel = com.ling9527.music.common.msg.auto.RoomChannel.findByValue(iprot.readI32());
              struct.setChannelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // MAX_MEMBER_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.maxMemberSize = iprot.readI16();
              struct.setMaxMemberSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // WAITING_SCENE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.waitingScene = iprot.readI32();
              struct.setWaitingSceneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // ROOM_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.roomType = com.ling9527.music.common.msg.auto.CreateRoomType.findByValue(iprot.readI32());
              struct.setRoomTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // STARTING_SCENE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.startingScene = iprot.readI32();
              struct.setStartingSceneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // CHAPTER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.chapterId = iprot.readI16();
              struct.setChapterIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // RAID_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.raidId = iprot.readI16();
              struct.setRaidIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // ROOM_TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.roomTitle = iprot.readString();
              struct.setRoomTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // SHOW_SPRING_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.showSpringInfo = new com.ling9527.music.common.msg.auto.sc.SCRefreshSpring();
              struct.showSpringInfo.read(iprot);
              struct.setShowSpringInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // WED_BLESS_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.wedBlessVal = iprot.readI32();
              struct.setWedBlessValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // WEDDINGVALID_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.weddingvalidTime = iprot.readI32();
              struct.setWeddingvalidTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // WEDDING_FINISH
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.weddingFinish = iprot.readBool();
              struct.setWeddingFinishIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // UPDATE_ANNOUNCE_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.updateAnnounceInfos = new com.ling9527.music.common.msg.auto.sc.SCUpdateAnnounceInfos();
              struct.updateAnnounceInfos.read(iprot);
              struct.setUpdateAnnounceInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // WEDDING_STEP
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.weddingStep = iprot.readByte();
              struct.setWeddingStepIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // BRIDE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.brideID = iprot.readI64();
              struct.setBrideIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // BRIDEGROOM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.bridegroomID = iprot.readI64();
              struct.setBridegroomIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCJoinDanceRoomMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.passwd != null) {
        oprot.writeFieldBegin(PASSWD_FIELD_DESC);
        oprot.writeString(struct.passwd);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MODE_FIELD_DESC);
      oprot.writeByte(struct.mode);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SONG_LVL_FIELD_DESC);
      oprot.writeByte(struct.songLvl);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SONG_ID_FIELD_DESC);
      oprot.writeI16(struct.songId);
      oprot.writeFieldEnd();
      if (struct.members != null) {
        oprot.writeFieldBegin(MEMBERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.members.size()));
          for (com.ling9527.music.common.msg.auto.RoomMemberInfo _iter11 : struct.members)
          {
            _iter11.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(QUICK_START_FIELD_DESC);
      oprot.writeBool(struct.quickStart);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROOM_ID_FIELD_DESC);
      oprot.writeI32(struct.roomId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LEADER_CHAR_ID_FIELD_DESC);
      oprot.writeI64(struct.leaderCharId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VIP_FIELD_DESC);
      oprot.writeBool(struct.vip);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WATCH_FIELD_DESC);
      oprot.writeBool(struct.watch);
      oprot.writeFieldEnd();
      if (struct.channel != null) {
        oprot.writeFieldBegin(CHANNEL_FIELD_DESC);
        oprot.writeI32(struct.channel.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MAX_MEMBER_SIZE_FIELD_DESC);
      oprot.writeI16(struct.maxMemberSize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WAITING_SCENE_FIELD_DESC);
      oprot.writeI32(struct.waitingScene);
      oprot.writeFieldEnd();
      if (struct.roomType != null) {
        oprot.writeFieldBegin(ROOM_TYPE_FIELD_DESC);
        oprot.writeI32(struct.roomType.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STARTING_SCENE_FIELD_DESC);
      oprot.writeI32(struct.startingScene);
      oprot.writeFieldEnd();
      if (struct.isSetChapterId()) {
        oprot.writeFieldBegin(CHAPTER_ID_FIELD_DESC);
        oprot.writeI16(struct.chapterId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRaidId()) {
        oprot.writeFieldBegin(RAID_ID_FIELD_DESC);
        oprot.writeI16(struct.raidId);
        oprot.writeFieldEnd();
      }
      if (struct.roomTitle != null) {
        oprot.writeFieldBegin(ROOM_TITLE_FIELD_DESC);
        oprot.writeString(struct.roomTitle);
        oprot.writeFieldEnd();
      }
      if (struct.showSpringInfo != null) {
        if (struct.isSetShowSpringInfo()) {
          oprot.writeFieldBegin(SHOW_SPRING_INFO_FIELD_DESC);
          struct.showSpringInfo.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetWedBlessVal()) {
        oprot.writeFieldBegin(WED_BLESS_VAL_FIELD_DESC);
        oprot.writeI32(struct.wedBlessVal);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWeddingvalidTime()) {
        oprot.writeFieldBegin(WEDDINGVALID_TIME_FIELD_DESC);
        oprot.writeI32(struct.weddingvalidTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWeddingFinish()) {
        oprot.writeFieldBegin(WEDDING_FINISH_FIELD_DESC);
        oprot.writeBool(struct.weddingFinish);
        oprot.writeFieldEnd();
      }
      if (struct.updateAnnounceInfos != null) {
        if (struct.isSetUpdateAnnounceInfos()) {
          oprot.writeFieldBegin(UPDATE_ANNOUNCE_INFOS_FIELD_DESC);
          struct.updateAnnounceInfos.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetWeddingStep()) {
        oprot.writeFieldBegin(WEDDING_STEP_FIELD_DESC);
        oprot.writeByte(struct.weddingStep);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBrideID()) {
        oprot.writeFieldBegin(BRIDE_ID_FIELD_DESC);
        oprot.writeI64(struct.brideID);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBridegroomID()) {
        oprot.writeFieldBegin(BRIDEGROOM_ID_FIELD_DESC);
        oprot.writeI64(struct.bridegroomID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCJoinDanceRoomMsgTupleSchemeFactory implements SchemeFactory {
    public SCJoinDanceRoomMsgTupleScheme getScheme() {
      return new SCJoinDanceRoomMsgTupleScheme();
    }
  }

  private static class SCJoinDanceRoomMsgTupleScheme extends TupleScheme<SCJoinDanceRoomMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCJoinDanceRoomMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPasswd()) {
        optionals.set(0);
      }
      if (struct.isSetMode()) {
        optionals.set(1);
      }
      if (struct.isSetSongLvl()) {
        optionals.set(2);
      }
      if (struct.isSetSongId()) {
        optionals.set(3);
      }
      if (struct.isSetMembers()) {
        optionals.set(4);
      }
      if (struct.isSetQuickStart()) {
        optionals.set(5);
      }
      if (struct.isSetRoomId()) {
        optionals.set(6);
      }
      if (struct.isSetLeaderCharId()) {
        optionals.set(7);
      }
      if (struct.isSetVip()) {
        optionals.set(8);
      }
      if (struct.isSetWatch()) {
        optionals.set(9);
      }
      if (struct.isSetChannel()) {
        optionals.set(10);
      }
      if (struct.isSetMaxMemberSize()) {
        optionals.set(11);
      }
      if (struct.isSetWaitingScene()) {
        optionals.set(12);
      }
      if (struct.isSetRoomType()) {
        optionals.set(13);
      }
      if (struct.isSetStartingScene()) {
        optionals.set(14);
      }
      if (struct.isSetChapterId()) {
        optionals.set(15);
      }
      if (struct.isSetRaidId()) {
        optionals.set(16);
      }
      if (struct.isSetRoomTitle()) {
        optionals.set(17);
      }
      if (struct.isSetShowSpringInfo()) {
        optionals.set(18);
      }
      if (struct.isSetWedBlessVal()) {
        optionals.set(19);
      }
      if (struct.isSetWeddingvalidTime()) {
        optionals.set(20);
      }
      if (struct.isSetWeddingFinish()) {
        optionals.set(21);
      }
      if (struct.isSetUpdateAnnounceInfos()) {
        optionals.set(22);
      }
      if (struct.isSetWeddingStep()) {
        optionals.set(23);
      }
      if (struct.isSetBrideID()) {
        optionals.set(24);
      }
      if (struct.isSetBridegroomID()) {
        optionals.set(25);
      }
      oprot.writeBitSet(optionals, 26);
      if (struct.isSetPasswd()) {
        oprot.writeString(struct.passwd);
      }
      if (struct.isSetMode()) {
        oprot.writeByte(struct.mode);
      }
      if (struct.isSetSongLvl()) {
        oprot.writeByte(struct.songLvl);
      }
      if (struct.isSetSongId()) {
        oprot.writeI16(struct.songId);
      }
      if (struct.isSetMembers()) {
        {
          oprot.writeI32(struct.members.size());
          for (com.ling9527.music.common.msg.auto.RoomMemberInfo _iter12 : struct.members)
          {
            _iter12.write(oprot);
          }
        }
      }
      if (struct.isSetQuickStart()) {
        oprot.writeBool(struct.quickStart);
      }
      if (struct.isSetRoomId()) {
        oprot.writeI32(struct.roomId);
      }
      if (struct.isSetLeaderCharId()) {
        oprot.writeI64(struct.leaderCharId);
      }
      if (struct.isSetVip()) {
        oprot.writeBool(struct.vip);
      }
      if (struct.isSetWatch()) {
        oprot.writeBool(struct.watch);
      }
      if (struct.isSetChannel()) {
        oprot.writeI32(struct.channel.getValue());
      }
      if (struct.isSetMaxMemberSize()) {
        oprot.writeI16(struct.maxMemberSize);
      }
      if (struct.isSetWaitingScene()) {
        oprot.writeI32(struct.waitingScene);
      }
      if (struct.isSetRoomType()) {
        oprot.writeI32(struct.roomType.getValue());
      }
      if (struct.isSetStartingScene()) {
        oprot.writeI32(struct.startingScene);
      }
      if (struct.isSetChapterId()) {
        oprot.writeI16(struct.chapterId);
      }
      if (struct.isSetRaidId()) {
        oprot.writeI16(struct.raidId);
      }
      if (struct.isSetRoomTitle()) {
        oprot.writeString(struct.roomTitle);
      }
      if (struct.isSetShowSpringInfo()) {
        struct.showSpringInfo.write(oprot);
      }
      if (struct.isSetWedBlessVal()) {
        oprot.writeI32(struct.wedBlessVal);
      }
      if (struct.isSetWeddingvalidTime()) {
        oprot.writeI32(struct.weddingvalidTime);
      }
      if (struct.isSetWeddingFinish()) {
        oprot.writeBool(struct.weddingFinish);
      }
      if (struct.isSetUpdateAnnounceInfos()) {
        struct.updateAnnounceInfos.write(oprot);
      }
      if (struct.isSetWeddingStep()) {
        oprot.writeByte(struct.weddingStep);
      }
      if (struct.isSetBrideID()) {
        oprot.writeI64(struct.brideID);
      }
      if (struct.isSetBridegroomID()) {
        oprot.writeI64(struct.bridegroomID);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCJoinDanceRoomMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(26);
      if (incoming.get(0)) {
        struct.passwd = iprot.readString();
        struct.setPasswdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.mode = iprot.readByte();
        struct.setModeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.songLvl = iprot.readByte();
        struct.setSongLvlIsSet(true);
      }
      if (incoming.get(3)) {
        struct.songId = iprot.readI16();
        struct.setSongIdIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.members = new ArrayList<com.ling9527.music.common.msg.auto.RoomMemberInfo>(_list13.size);
          for (int _i14 = 0; _i14 < _list13.size; ++_i14)
          {
            com.ling9527.music.common.msg.auto.RoomMemberInfo _elem15; // required
            _elem15 = new com.ling9527.music.common.msg.auto.RoomMemberInfo();
            _elem15.read(iprot);
            struct.members.add(_elem15);
          }
        }
        struct.setMembersIsSet(true);
      }
      if (incoming.get(5)) {
        struct.quickStart = iprot.readBool();
        struct.setQuickStartIsSet(true);
      }
      if (incoming.get(6)) {
        struct.roomId = iprot.readI32();
        struct.setRoomIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.leaderCharId = iprot.readI64();
        struct.setLeaderCharIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.vip = iprot.readBool();
        struct.setVipIsSet(true);
      }
      if (incoming.get(9)) {
        struct.watch = iprot.readBool();
        struct.setWatchIsSet(true);
      }
      if (incoming.get(10)) {
        struct.channel = com.ling9527.music.common.msg.auto.RoomChannel.findByValue(iprot.readI32());
        struct.setChannelIsSet(true);
      }
      if (incoming.get(11)) {
        struct.maxMemberSize = iprot.readI16();
        struct.setMaxMemberSizeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.waitingScene = iprot.readI32();
        struct.setWaitingSceneIsSet(true);
      }
      if (incoming.get(13)) {
        struct.roomType = com.ling9527.music.common.msg.auto.CreateRoomType.findByValue(iprot.readI32());
        struct.setRoomTypeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.startingScene = iprot.readI32();
        struct.setStartingSceneIsSet(true);
      }
      if (incoming.get(15)) {
        struct.chapterId = iprot.readI16();
        struct.setChapterIdIsSet(true);
      }
      if (incoming.get(16)) {
        struct.raidId = iprot.readI16();
        struct.setRaidIdIsSet(true);
      }
      if (incoming.get(17)) {
        struct.roomTitle = iprot.readString();
        struct.setRoomTitleIsSet(true);
      }
      if (incoming.get(18)) {
        struct.showSpringInfo = new com.ling9527.music.common.msg.auto.sc.SCRefreshSpring();
        struct.showSpringInfo.read(iprot);
        struct.setShowSpringInfoIsSet(true);
      }
      if (incoming.get(19)) {
        struct.wedBlessVal = iprot.readI32();
        struct.setWedBlessValIsSet(true);
      }
      if (incoming.get(20)) {
        struct.weddingvalidTime = iprot.readI32();
        struct.setWeddingvalidTimeIsSet(true);
      }
      if (incoming.get(21)) {
        struct.weddingFinish = iprot.readBool();
        struct.setWeddingFinishIsSet(true);
      }
      if (incoming.get(22)) {
        struct.updateAnnounceInfos = new com.ling9527.music.common.msg.auto.sc.SCUpdateAnnounceInfos();
        struct.updateAnnounceInfos.read(iprot);
        struct.setUpdateAnnounceInfosIsSet(true);
      }
      if (incoming.get(23)) {
        struct.weddingStep = iprot.readByte();
        struct.setWeddingStepIsSet(true);
      }
      if (incoming.get(24)) {
        struct.brideID = iprot.readI64();
        struct.setBrideIDIsSet(true);
      }
      if (incoming.get(25)) {
        struct.bridegroomID = iprot.readI64();
        struct.setBridegroomIDIsSet(true);
      }
    }
  }

}

