/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MallItem implements org.apache.thrift.TBase<MallItem, MallItem._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MallItem");

  private static final org.apache.thrift.protocol.TField ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("itemId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ITEM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("itemType", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField ITEM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("itemName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField FOREVER_CURRENCY_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("foreverCurrencyCount", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField FOREVER_CURRENCY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("foreverCurrencyType", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField MONTH_CURRENCY_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("monthCurrencyCount", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField MONTH_CURRENCY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("monthCurrencyType", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField WEEK_CURRENCY_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("weekCurrencyCount", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField WEEK_CURRENCY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("weekCurrencyType", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("limit", org.apache.thrift.protocol.TType.BOOL, (short)11);
  private static final org.apache.thrift.protocol.TField REMAIN_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("remainCount", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField SEX_FIELD_DESC = new org.apache.thrift.protocol.TField("sex", org.apache.thrift.protocol.TType.BYTE, (short)13);
  private static final org.apache.thrift.protocol.TField DISCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("discount", org.apache.thrift.protocol.TType.BYTE, (short)14);
  private static final org.apache.thrift.protocol.TField USE_BIND_IB_FIELD_DESC = new org.apache.thrift.protocol.TField("useBindIb", org.apache.thrift.protocol.TType.BOOL, (short)15);
  private static final org.apache.thrift.protocol.TField RETURN_POINT_FIELD_DESC = new org.apache.thrift.protocol.TField("returnPoint", org.apache.thrift.protocol.TType.I32, (short)16);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MallItemStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MallItemTupleSchemeFactory());
  }

  public int itemId; // required
  public int itemType; // required
  public int state; // required
  public String itemName; // optional
  public int foreverCurrencyCount; // required
  public int foreverCurrencyType; // required
  public int monthCurrencyCount; // required
  public int monthCurrencyType; // required
  public int weekCurrencyCount; // required
  public int weekCurrencyType; // required
  public boolean limit; // required
  public int remainCount; // required
  public byte sex; // required
  public byte discount; // required
  public boolean useBindIb; // required
  public int returnPoint; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ITEM_ID((short)1, "itemId"),
    ITEM_TYPE((short)2, "itemType"),
    STATE((short)3, "state"),
    ITEM_NAME((short)4, "itemName"),
    FOREVER_CURRENCY_COUNT((short)5, "foreverCurrencyCount"),
    FOREVER_CURRENCY_TYPE((short)6, "foreverCurrencyType"),
    MONTH_CURRENCY_COUNT((short)7, "monthCurrencyCount"),
    MONTH_CURRENCY_TYPE((short)8, "monthCurrencyType"),
    WEEK_CURRENCY_COUNT((short)9, "weekCurrencyCount"),
    WEEK_CURRENCY_TYPE((short)10, "weekCurrencyType"),
    LIMIT((short)11, "limit"),
    REMAIN_COUNT((short)12, "remainCount"),
    SEX((short)13, "sex"),
    DISCOUNT((short)14, "discount"),
    USE_BIND_IB((short)15, "useBindIb"),
    RETURN_POINT((short)16, "returnPoint");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ITEM_ID
          return ITEM_ID;
        case 2: // ITEM_TYPE
          return ITEM_TYPE;
        case 3: // STATE
          return STATE;
        case 4: // ITEM_NAME
          return ITEM_NAME;
        case 5: // FOREVER_CURRENCY_COUNT
          return FOREVER_CURRENCY_COUNT;
        case 6: // FOREVER_CURRENCY_TYPE
          return FOREVER_CURRENCY_TYPE;
        case 7: // MONTH_CURRENCY_COUNT
          return MONTH_CURRENCY_COUNT;
        case 8: // MONTH_CURRENCY_TYPE
          return MONTH_CURRENCY_TYPE;
        case 9: // WEEK_CURRENCY_COUNT
          return WEEK_CURRENCY_COUNT;
        case 10: // WEEK_CURRENCY_TYPE
          return WEEK_CURRENCY_TYPE;
        case 11: // LIMIT
          return LIMIT;
        case 12: // REMAIN_COUNT
          return REMAIN_COUNT;
        case 13: // SEX
          return SEX;
        case 14: // DISCOUNT
          return DISCOUNT;
        case 15: // USE_BIND_IB
          return USE_BIND_IB;
        case 16: // RETURN_POINT
          return RETURN_POINT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ITEMID_ISSET_ID = 0;
  private static final int __ITEMTYPE_ISSET_ID = 1;
  private static final int __STATE_ISSET_ID = 2;
  private static final int __FOREVERCURRENCYCOUNT_ISSET_ID = 3;
  private static final int __FOREVERCURRENCYTYPE_ISSET_ID = 4;
  private static final int __MONTHCURRENCYCOUNT_ISSET_ID = 5;
  private static final int __MONTHCURRENCYTYPE_ISSET_ID = 6;
  private static final int __WEEKCURRENCYCOUNT_ISSET_ID = 7;
  private static final int __WEEKCURRENCYTYPE_ISSET_ID = 8;
  private static final int __LIMIT_ISSET_ID = 9;
  private static final int __REMAINCOUNT_ISSET_ID = 10;
  private static final int __SEX_ISSET_ID = 11;
  private static final int __DISCOUNT_ISSET_ID = 12;
  private static final int __USEBINDIB_ISSET_ID = 13;
  private static final int __RETURNPOINT_ISSET_ID = 14;
  private short __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.ITEM_NAME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("itemId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ITEM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("itemType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ITEM_NAME, new org.apache.thrift.meta_data.FieldMetaData("itemName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FOREVER_CURRENCY_COUNT, new org.apache.thrift.meta_data.FieldMetaData("foreverCurrencyCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FOREVER_CURRENCY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("foreverCurrencyType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MONTH_CURRENCY_COUNT, new org.apache.thrift.meta_data.FieldMetaData("monthCurrencyCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MONTH_CURRENCY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("monthCurrencyType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WEEK_CURRENCY_COUNT, new org.apache.thrift.meta_data.FieldMetaData("weekCurrencyCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WEEK_CURRENCY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("weekCurrencyType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LIMIT, new org.apache.thrift.meta_data.FieldMetaData("limit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.REMAIN_COUNT, new org.apache.thrift.meta_data.FieldMetaData("remainCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SEX, new org.apache.thrift.meta_data.FieldMetaData("sex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.DISCOUNT, new org.apache.thrift.meta_data.FieldMetaData("discount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.USE_BIND_IB, new org.apache.thrift.meta_data.FieldMetaData("useBindIb", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.RETURN_POINT, new org.apache.thrift.meta_data.FieldMetaData("returnPoint", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MallItem.class, metaDataMap);
  }

  public MallItem() {
  }

  public MallItem(
    int itemId,
    int itemType,
    int state,
    int foreverCurrencyCount,
    int foreverCurrencyType,
    int monthCurrencyCount,
    int monthCurrencyType,
    int weekCurrencyCount,
    int weekCurrencyType,
    boolean limit,
    int remainCount,
    byte sex,
    byte discount,
    boolean useBindIb,
    int returnPoint)
  {
    this();
    this.itemId = itemId;
    setItemIdIsSet(true);
    this.itemType = itemType;
    setItemTypeIsSet(true);
    this.state = state;
    setStateIsSet(true);
    this.foreverCurrencyCount = foreverCurrencyCount;
    setForeverCurrencyCountIsSet(true);
    this.foreverCurrencyType = foreverCurrencyType;
    setForeverCurrencyTypeIsSet(true);
    this.monthCurrencyCount = monthCurrencyCount;
    setMonthCurrencyCountIsSet(true);
    this.monthCurrencyType = monthCurrencyType;
    setMonthCurrencyTypeIsSet(true);
    this.weekCurrencyCount = weekCurrencyCount;
    setWeekCurrencyCountIsSet(true);
    this.weekCurrencyType = weekCurrencyType;
    setWeekCurrencyTypeIsSet(true);
    this.limit = limit;
    setLimitIsSet(true);
    this.remainCount = remainCount;
    setRemainCountIsSet(true);
    this.sex = sex;
    setSexIsSet(true);
    this.discount = discount;
    setDiscountIsSet(true);
    this.useBindIb = useBindIb;
    setUseBindIbIsSet(true);
    this.returnPoint = returnPoint;
    setReturnPointIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MallItem(MallItem other) {
    __isset_bitfield = other.__isset_bitfield;
    this.itemId = other.itemId;
    this.itemType = other.itemType;
    this.state = other.state;
    if (other.isSetItemName()) {
      this.itemName = other.itemName;
    }
    this.foreverCurrencyCount = other.foreverCurrencyCount;
    this.foreverCurrencyType = other.foreverCurrencyType;
    this.monthCurrencyCount = other.monthCurrencyCount;
    this.monthCurrencyType = other.monthCurrencyType;
    this.weekCurrencyCount = other.weekCurrencyCount;
    this.weekCurrencyType = other.weekCurrencyType;
    this.limit = other.limit;
    this.remainCount = other.remainCount;
    this.sex = other.sex;
    this.discount = other.discount;
    this.useBindIb = other.useBindIb;
    this.returnPoint = other.returnPoint;
  }

  public MallItem deepCopy() {
    return new MallItem(this);
  }

  @Override
  public void clear() {
    setItemIdIsSet(false);
    this.itemId = 0;
    setItemTypeIsSet(false);
    this.itemType = 0;
    setStateIsSet(false);
    this.state = 0;
    this.itemName = null;
    setForeverCurrencyCountIsSet(false);
    this.foreverCurrencyCount = 0;
    setForeverCurrencyTypeIsSet(false);
    this.foreverCurrencyType = 0;
    setMonthCurrencyCountIsSet(false);
    this.monthCurrencyCount = 0;
    setMonthCurrencyTypeIsSet(false);
    this.monthCurrencyType = 0;
    setWeekCurrencyCountIsSet(false);
    this.weekCurrencyCount = 0;
    setWeekCurrencyTypeIsSet(false);
    this.weekCurrencyType = 0;
    setLimitIsSet(false);
    this.limit = false;
    setRemainCountIsSet(false);
    this.remainCount = 0;
    setSexIsSet(false);
    this.sex = 0;
    setDiscountIsSet(false);
    this.discount = 0;
    setUseBindIbIsSet(false);
    this.useBindIb = false;
    setReturnPointIsSet(false);
    this.returnPoint = 0;
  }

  public int getItemId() {
    return this.itemId;
  }

  public MallItem setItemId(int itemId) {
    this.itemId = itemId;
    setItemIdIsSet(true);
    return this;
  }

  public void unsetItemId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ITEMID_ISSET_ID);
  }

  /** Returns true if field itemId is set (has been assigned a value) and false otherwise */
  public boolean isSetItemId() {
    return EncodingUtils.testBit(__isset_bitfield, __ITEMID_ISSET_ID);
  }

  public void setItemIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ITEMID_ISSET_ID, value);
  }

  public int getItemType() {
    return this.itemType;
  }

  public MallItem setItemType(int itemType) {
    this.itemType = itemType;
    setItemTypeIsSet(true);
    return this;
  }

  public void unsetItemType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ITEMTYPE_ISSET_ID);
  }

  /** Returns true if field itemType is set (has been assigned a value) and false otherwise */
  public boolean isSetItemType() {
    return EncodingUtils.testBit(__isset_bitfield, __ITEMTYPE_ISSET_ID);
  }

  public void setItemTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ITEMTYPE_ISSET_ID, value);
  }

  public int getState() {
    return this.state;
  }

  public MallItem setState(int state) {
    this.state = state;
    setStateIsSet(true);
    return this;
  }

  public void unsetState() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATE_ISSET_ID);
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return EncodingUtils.testBit(__isset_bitfield, __STATE_ISSET_ID);
  }

  public void setStateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATE_ISSET_ID, value);
  }

  public String getItemName() {
    return this.itemName;
  }

  public MallItem setItemName(String itemName) {
    this.itemName = itemName;
    return this;
  }

  public void unsetItemName() {
    this.itemName = null;
  }

  /** Returns true if field itemName is set (has been assigned a value) and false otherwise */
  public boolean isSetItemName() {
    return this.itemName != null;
  }

  public void setItemNameIsSet(boolean value) {
    if (!value) {
      this.itemName = null;
    }
  }

  public int getForeverCurrencyCount() {
    return this.foreverCurrencyCount;
  }

  public MallItem setForeverCurrencyCount(int foreverCurrencyCount) {
    this.foreverCurrencyCount = foreverCurrencyCount;
    setForeverCurrencyCountIsSet(true);
    return this;
  }

  public void unsetForeverCurrencyCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FOREVERCURRENCYCOUNT_ISSET_ID);
  }

  /** Returns true if field foreverCurrencyCount is set (has been assigned a value) and false otherwise */
  public boolean isSetForeverCurrencyCount() {
    return EncodingUtils.testBit(__isset_bitfield, __FOREVERCURRENCYCOUNT_ISSET_ID);
  }

  public void setForeverCurrencyCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FOREVERCURRENCYCOUNT_ISSET_ID, value);
  }

  public int getForeverCurrencyType() {
    return this.foreverCurrencyType;
  }

  public MallItem setForeverCurrencyType(int foreverCurrencyType) {
    this.foreverCurrencyType = foreverCurrencyType;
    setForeverCurrencyTypeIsSet(true);
    return this;
  }

  public void unsetForeverCurrencyType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FOREVERCURRENCYTYPE_ISSET_ID);
  }

  /** Returns true if field foreverCurrencyType is set (has been assigned a value) and false otherwise */
  public boolean isSetForeverCurrencyType() {
    return EncodingUtils.testBit(__isset_bitfield, __FOREVERCURRENCYTYPE_ISSET_ID);
  }

  public void setForeverCurrencyTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FOREVERCURRENCYTYPE_ISSET_ID, value);
  }

  public int getMonthCurrencyCount() {
    return this.monthCurrencyCount;
  }

  public MallItem setMonthCurrencyCount(int monthCurrencyCount) {
    this.monthCurrencyCount = monthCurrencyCount;
    setMonthCurrencyCountIsSet(true);
    return this;
  }

  public void unsetMonthCurrencyCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONTHCURRENCYCOUNT_ISSET_ID);
  }

  /** Returns true if field monthCurrencyCount is set (has been assigned a value) and false otherwise */
  public boolean isSetMonthCurrencyCount() {
    return EncodingUtils.testBit(__isset_bitfield, __MONTHCURRENCYCOUNT_ISSET_ID);
  }

  public void setMonthCurrencyCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONTHCURRENCYCOUNT_ISSET_ID, value);
  }

  public int getMonthCurrencyType() {
    return this.monthCurrencyType;
  }

  public MallItem setMonthCurrencyType(int monthCurrencyType) {
    this.monthCurrencyType = monthCurrencyType;
    setMonthCurrencyTypeIsSet(true);
    return this;
  }

  public void unsetMonthCurrencyType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONTHCURRENCYTYPE_ISSET_ID);
  }

  /** Returns true if field monthCurrencyType is set (has been assigned a value) and false otherwise */
  public boolean isSetMonthCurrencyType() {
    return EncodingUtils.testBit(__isset_bitfield, __MONTHCURRENCYTYPE_ISSET_ID);
  }

  public void setMonthCurrencyTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONTHCURRENCYTYPE_ISSET_ID, value);
  }

  public int getWeekCurrencyCount() {
    return this.weekCurrencyCount;
  }

  public MallItem setWeekCurrencyCount(int weekCurrencyCount) {
    this.weekCurrencyCount = weekCurrencyCount;
    setWeekCurrencyCountIsSet(true);
    return this;
  }

  public void unsetWeekCurrencyCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WEEKCURRENCYCOUNT_ISSET_ID);
  }

  /** Returns true if field weekCurrencyCount is set (has been assigned a value) and false otherwise */
  public boolean isSetWeekCurrencyCount() {
    return EncodingUtils.testBit(__isset_bitfield, __WEEKCURRENCYCOUNT_ISSET_ID);
  }

  public void setWeekCurrencyCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WEEKCURRENCYCOUNT_ISSET_ID, value);
  }

  public int getWeekCurrencyType() {
    return this.weekCurrencyType;
  }

  public MallItem setWeekCurrencyType(int weekCurrencyType) {
    this.weekCurrencyType = weekCurrencyType;
    setWeekCurrencyTypeIsSet(true);
    return this;
  }

  public void unsetWeekCurrencyType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WEEKCURRENCYTYPE_ISSET_ID);
  }

  /** Returns true if field weekCurrencyType is set (has been assigned a value) and false otherwise */
  public boolean isSetWeekCurrencyType() {
    return EncodingUtils.testBit(__isset_bitfield, __WEEKCURRENCYTYPE_ISSET_ID);
  }

  public void setWeekCurrencyTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WEEKCURRENCYTYPE_ISSET_ID, value);
  }

  public boolean isLimit() {
    return this.limit;
  }

  public MallItem setLimit(boolean limit) {
    this.limit = limit;
    setLimitIsSet(true);
    return this;
  }

  public void unsetLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMIT_ISSET_ID);
  }

  /** Returns true if field limit is set (has been assigned a value) and false otherwise */
  public boolean isSetLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __LIMIT_ISSET_ID);
  }

  public void setLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMIT_ISSET_ID, value);
  }

  public int getRemainCount() {
    return this.remainCount;
  }

  public MallItem setRemainCount(int remainCount) {
    this.remainCount = remainCount;
    setRemainCountIsSet(true);
    return this;
  }

  public void unsetRemainCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REMAINCOUNT_ISSET_ID);
  }

  /** Returns true if field remainCount is set (has been assigned a value) and false otherwise */
  public boolean isSetRemainCount() {
    return EncodingUtils.testBit(__isset_bitfield, __REMAINCOUNT_ISSET_ID);
  }

  public void setRemainCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REMAINCOUNT_ISSET_ID, value);
  }

  public byte getSex() {
    return this.sex;
  }

  public MallItem setSex(byte sex) {
    this.sex = sex;
    setSexIsSet(true);
    return this;
  }

  public void unsetSex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEX_ISSET_ID);
  }

  /** Returns true if field sex is set (has been assigned a value) and false otherwise */
  public boolean isSetSex() {
    return EncodingUtils.testBit(__isset_bitfield, __SEX_ISSET_ID);
  }

  public void setSexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEX_ISSET_ID, value);
  }

  public byte getDiscount() {
    return this.discount;
  }

  public MallItem setDiscount(byte discount) {
    this.discount = discount;
    setDiscountIsSet(true);
    return this;
  }

  public void unsetDiscount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DISCOUNT_ISSET_ID);
  }

  /** Returns true if field discount is set (has been assigned a value) and false otherwise */
  public boolean isSetDiscount() {
    return EncodingUtils.testBit(__isset_bitfield, __DISCOUNT_ISSET_ID);
  }

  public void setDiscountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DISCOUNT_ISSET_ID, value);
  }

  public boolean isUseBindIb() {
    return this.useBindIb;
  }

  public MallItem setUseBindIb(boolean useBindIb) {
    this.useBindIb = useBindIb;
    setUseBindIbIsSet(true);
    return this;
  }

  public void unsetUseBindIb() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USEBINDIB_ISSET_ID);
  }

  /** Returns true if field useBindIb is set (has been assigned a value) and false otherwise */
  public boolean isSetUseBindIb() {
    return EncodingUtils.testBit(__isset_bitfield, __USEBINDIB_ISSET_ID);
  }

  public void setUseBindIbIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USEBINDIB_ISSET_ID, value);
  }

  public int getReturnPoint() {
    return this.returnPoint;
  }

  public MallItem setReturnPoint(int returnPoint) {
    this.returnPoint = returnPoint;
    setReturnPointIsSet(true);
    return this;
  }

  public void unsetReturnPoint() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RETURNPOINT_ISSET_ID);
  }

  /** Returns true if field returnPoint is set (has been assigned a value) and false otherwise */
  public boolean isSetReturnPoint() {
    return EncodingUtils.testBit(__isset_bitfield, __RETURNPOINT_ISSET_ID);
  }

  public void setReturnPointIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RETURNPOINT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ITEM_ID:
      if (value == null) {
        unsetItemId();
      } else {
        setItemId((Integer)value);
      }
      break;

    case ITEM_TYPE:
      if (value == null) {
        unsetItemType();
      } else {
        setItemType((Integer)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((Integer)value);
      }
      break;

    case ITEM_NAME:
      if (value == null) {
        unsetItemName();
      } else {
        setItemName((String)value);
      }
      break;

    case FOREVER_CURRENCY_COUNT:
      if (value == null) {
        unsetForeverCurrencyCount();
      } else {
        setForeverCurrencyCount((Integer)value);
      }
      break;

    case FOREVER_CURRENCY_TYPE:
      if (value == null) {
        unsetForeverCurrencyType();
      } else {
        setForeverCurrencyType((Integer)value);
      }
      break;

    case MONTH_CURRENCY_COUNT:
      if (value == null) {
        unsetMonthCurrencyCount();
      } else {
        setMonthCurrencyCount((Integer)value);
      }
      break;

    case MONTH_CURRENCY_TYPE:
      if (value == null) {
        unsetMonthCurrencyType();
      } else {
        setMonthCurrencyType((Integer)value);
      }
      break;

    case WEEK_CURRENCY_COUNT:
      if (value == null) {
        unsetWeekCurrencyCount();
      } else {
        setWeekCurrencyCount((Integer)value);
      }
      break;

    case WEEK_CURRENCY_TYPE:
      if (value == null) {
        unsetWeekCurrencyType();
      } else {
        setWeekCurrencyType((Integer)value);
      }
      break;

    case LIMIT:
      if (value == null) {
        unsetLimit();
      } else {
        setLimit((Boolean)value);
      }
      break;

    case REMAIN_COUNT:
      if (value == null) {
        unsetRemainCount();
      } else {
        setRemainCount((Integer)value);
      }
      break;

    case SEX:
      if (value == null) {
        unsetSex();
      } else {
        setSex((Byte)value);
      }
      break;

    case DISCOUNT:
      if (value == null) {
        unsetDiscount();
      } else {
        setDiscount((Byte)value);
      }
      break;

    case USE_BIND_IB:
      if (value == null) {
        unsetUseBindIb();
      } else {
        setUseBindIb((Boolean)value);
      }
      break;

    case RETURN_POINT:
      if (value == null) {
        unsetReturnPoint();
      } else {
        setReturnPoint((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ITEM_ID:
      return Integer.valueOf(getItemId());

    case ITEM_TYPE:
      return Integer.valueOf(getItemType());

    case STATE:
      return Integer.valueOf(getState());

    case ITEM_NAME:
      return getItemName();

    case FOREVER_CURRENCY_COUNT:
      return Integer.valueOf(getForeverCurrencyCount());

    case FOREVER_CURRENCY_TYPE:
      return Integer.valueOf(getForeverCurrencyType());

    case MONTH_CURRENCY_COUNT:
      return Integer.valueOf(getMonthCurrencyCount());

    case MONTH_CURRENCY_TYPE:
      return Integer.valueOf(getMonthCurrencyType());

    case WEEK_CURRENCY_COUNT:
      return Integer.valueOf(getWeekCurrencyCount());

    case WEEK_CURRENCY_TYPE:
      return Integer.valueOf(getWeekCurrencyType());

    case LIMIT:
      return Boolean.valueOf(isLimit());

    case REMAIN_COUNT:
      return Integer.valueOf(getRemainCount());

    case SEX:
      return Byte.valueOf(getSex());

    case DISCOUNT:
      return Byte.valueOf(getDiscount());

    case USE_BIND_IB:
      return Boolean.valueOf(isUseBindIb());

    case RETURN_POINT:
      return Integer.valueOf(getReturnPoint());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ITEM_ID:
      return isSetItemId();
    case ITEM_TYPE:
      return isSetItemType();
    case STATE:
      return isSetState();
    case ITEM_NAME:
      return isSetItemName();
    case FOREVER_CURRENCY_COUNT:
      return isSetForeverCurrencyCount();
    case FOREVER_CURRENCY_TYPE:
      return isSetForeverCurrencyType();
    case MONTH_CURRENCY_COUNT:
      return isSetMonthCurrencyCount();
    case MONTH_CURRENCY_TYPE:
      return isSetMonthCurrencyType();
    case WEEK_CURRENCY_COUNT:
      return isSetWeekCurrencyCount();
    case WEEK_CURRENCY_TYPE:
      return isSetWeekCurrencyType();
    case LIMIT:
      return isSetLimit();
    case REMAIN_COUNT:
      return isSetRemainCount();
    case SEX:
      return isSetSex();
    case DISCOUNT:
      return isSetDiscount();
    case USE_BIND_IB:
      return isSetUseBindIb();
    case RETURN_POINT:
      return isSetReturnPoint();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MallItem)
      return this.equals((MallItem)that);
    return false;
  }

  public boolean equals(MallItem that) {
    if (that == null)
      return false;

    boolean this_present_itemId = true;
    boolean that_present_itemId = true;
    if (this_present_itemId || that_present_itemId) {
      if (!(this_present_itemId && that_present_itemId))
        return false;
      if (this.itemId != that.itemId)
        return false;
    }

    boolean this_present_itemType = true;
    boolean that_present_itemType = true;
    if (this_present_itemType || that_present_itemType) {
      if (!(this_present_itemType && that_present_itemType))
        return false;
      if (this.itemType != that.itemType)
        return false;
    }

    boolean this_present_state = true;
    boolean that_present_state = true;
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (this.state != that.state)
        return false;
    }

    boolean this_present_itemName = true && this.isSetItemName();
    boolean that_present_itemName = true && that.isSetItemName();
    if (this_present_itemName || that_present_itemName) {
      if (!(this_present_itemName && that_present_itemName))
        return false;
      if (!this.itemName.equals(that.itemName))
        return false;
    }

    boolean this_present_foreverCurrencyCount = true;
    boolean that_present_foreverCurrencyCount = true;
    if (this_present_foreverCurrencyCount || that_present_foreverCurrencyCount) {
      if (!(this_present_foreverCurrencyCount && that_present_foreverCurrencyCount))
        return false;
      if (this.foreverCurrencyCount != that.foreverCurrencyCount)
        return false;
    }

    boolean this_present_foreverCurrencyType = true;
    boolean that_present_foreverCurrencyType = true;
    if (this_present_foreverCurrencyType || that_present_foreverCurrencyType) {
      if (!(this_present_foreverCurrencyType && that_present_foreverCurrencyType))
        return false;
      if (this.foreverCurrencyType != that.foreverCurrencyType)
        return false;
    }

    boolean this_present_monthCurrencyCount = true;
    boolean that_present_monthCurrencyCount = true;
    if (this_present_monthCurrencyCount || that_present_monthCurrencyCount) {
      if (!(this_present_monthCurrencyCount && that_present_monthCurrencyCount))
        return false;
      if (this.monthCurrencyCount != that.monthCurrencyCount)
        return false;
    }

    boolean this_present_monthCurrencyType = true;
    boolean that_present_monthCurrencyType = true;
    if (this_present_monthCurrencyType || that_present_monthCurrencyType) {
      if (!(this_present_monthCurrencyType && that_present_monthCurrencyType))
        return false;
      if (this.monthCurrencyType != that.monthCurrencyType)
        return false;
    }

    boolean this_present_weekCurrencyCount = true;
    boolean that_present_weekCurrencyCount = true;
    if (this_present_weekCurrencyCount || that_present_weekCurrencyCount) {
      if (!(this_present_weekCurrencyCount && that_present_weekCurrencyCount))
        return false;
      if (this.weekCurrencyCount != that.weekCurrencyCount)
        return false;
    }

    boolean this_present_weekCurrencyType = true;
    boolean that_present_weekCurrencyType = true;
    if (this_present_weekCurrencyType || that_present_weekCurrencyType) {
      if (!(this_present_weekCurrencyType && that_present_weekCurrencyType))
        return false;
      if (this.weekCurrencyType != that.weekCurrencyType)
        return false;
    }

    boolean this_present_limit = true;
    boolean that_present_limit = true;
    if (this_present_limit || that_present_limit) {
      if (!(this_present_limit && that_present_limit))
        return false;
      if (this.limit != that.limit)
        return false;
    }

    boolean this_present_remainCount = true;
    boolean that_present_remainCount = true;
    if (this_present_remainCount || that_present_remainCount) {
      if (!(this_present_remainCount && that_present_remainCount))
        return false;
      if (this.remainCount != that.remainCount)
        return false;
    }

    boolean this_present_sex = true;
    boolean that_present_sex = true;
    if (this_present_sex || that_present_sex) {
      if (!(this_present_sex && that_present_sex))
        return false;
      if (this.sex != that.sex)
        return false;
    }

    boolean this_present_discount = true;
    boolean that_present_discount = true;
    if (this_present_discount || that_present_discount) {
      if (!(this_present_discount && that_present_discount))
        return false;
      if (this.discount != that.discount)
        return false;
    }

    boolean this_present_useBindIb = true;
    boolean that_present_useBindIb = true;
    if (this_present_useBindIb || that_present_useBindIb) {
      if (!(this_present_useBindIb && that_present_useBindIb))
        return false;
      if (this.useBindIb != that.useBindIb)
        return false;
    }

    boolean this_present_returnPoint = true;
    boolean that_present_returnPoint = true;
    if (this_present_returnPoint || that_present_returnPoint) {
      if (!(this_present_returnPoint && that_present_returnPoint))
        return false;
      if (this.returnPoint != that.returnPoint)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(MallItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    MallItem typedOther = (MallItem)other;

    lastComparison = Boolean.valueOf(isSetItemId()).compareTo(typedOther.isSetItemId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemId, typedOther.itemId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItemType()).compareTo(typedOther.isSetItemType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemType, typedOther.itemType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetState()).compareTo(typedOther.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, typedOther.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItemName()).compareTo(typedOther.isSetItemName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemName, typedOther.itemName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetForeverCurrencyCount()).compareTo(typedOther.isSetForeverCurrencyCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForeverCurrencyCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foreverCurrencyCount, typedOther.foreverCurrencyCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetForeverCurrencyType()).compareTo(typedOther.isSetForeverCurrencyType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForeverCurrencyType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foreverCurrencyType, typedOther.foreverCurrencyType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonthCurrencyCount()).compareTo(typedOther.isSetMonthCurrencyCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonthCurrencyCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.monthCurrencyCount, typedOther.monthCurrencyCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonthCurrencyType()).compareTo(typedOther.isSetMonthCurrencyType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonthCurrencyType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.monthCurrencyType, typedOther.monthCurrencyType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWeekCurrencyCount()).compareTo(typedOther.isSetWeekCurrencyCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWeekCurrencyCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.weekCurrencyCount, typedOther.weekCurrencyCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWeekCurrencyType()).compareTo(typedOther.isSetWeekCurrencyType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWeekCurrencyType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.weekCurrencyType, typedOther.weekCurrencyType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLimit()).compareTo(typedOther.isSetLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limit, typedOther.limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemainCount()).compareTo(typedOther.isSetRemainCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemainCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remainCount, typedOther.remainCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSex()).compareTo(typedOther.isSetSex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sex, typedOther.sex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDiscount()).compareTo(typedOther.isSetDiscount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDiscount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.discount, typedOther.discount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUseBindIb()).compareTo(typedOther.isSetUseBindIb());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUseBindIb()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.useBindIb, typedOther.useBindIb);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReturnPoint()).compareTo(typedOther.isSetReturnPoint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReturnPoint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.returnPoint, typedOther.returnPoint);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MallItem(");
    boolean first = true;

    sb.append("itemId:");
    sb.append(this.itemId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("itemType:");
    sb.append(this.itemType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("state:");
    sb.append(this.state);
    first = false;
    if (isSetItemName()) {
      if (!first) sb.append(", ");
      sb.append("itemName:");
      if (this.itemName == null) {
        sb.append("null");
      } else {
        sb.append(this.itemName);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("foreverCurrencyCount:");
    sb.append(this.foreverCurrencyCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("foreverCurrencyType:");
    sb.append(this.foreverCurrencyType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("monthCurrencyCount:");
    sb.append(this.monthCurrencyCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("monthCurrencyType:");
    sb.append(this.monthCurrencyType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("weekCurrencyCount:");
    sb.append(this.weekCurrencyCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("weekCurrencyType:");
    sb.append(this.weekCurrencyType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("limit:");
    sb.append(this.limit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("remainCount:");
    sb.append(this.remainCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sex:");
    sb.append(this.sex);
    first = false;
    if (!first) sb.append(", ");
    sb.append("discount:");
    sb.append(this.discount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("useBindIb:");
    sb.append(this.useBindIb);
    first = false;
    if (!first) sb.append(", ");
    sb.append("returnPoint:");
    sb.append(this.returnPoint);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MallItemStandardSchemeFactory implements SchemeFactory {
    public MallItemStandardScheme getScheme() {
      return new MallItemStandardScheme();
    }
  }

  private static class MallItemStandardScheme extends StandardScheme<MallItem> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MallItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ITEM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.itemId = iprot.readI32();
              struct.setItemIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ITEM_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.itemType = iprot.readI32();
              struct.setItemTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.state = iprot.readI32();
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ITEM_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.itemName = iprot.readString();
              struct.setItemNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FOREVER_CURRENCY_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.foreverCurrencyCount = iprot.readI32();
              struct.setForeverCurrencyCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FOREVER_CURRENCY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.foreverCurrencyType = iprot.readI32();
              struct.setForeverCurrencyTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MONTH_CURRENCY_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.monthCurrencyCount = iprot.readI32();
              struct.setMonthCurrencyCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MONTH_CURRENCY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.monthCurrencyType = iprot.readI32();
              struct.setMonthCurrencyTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // WEEK_CURRENCY_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.weekCurrencyCount = iprot.readI32();
              struct.setWeekCurrencyCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // WEEK_CURRENCY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.weekCurrencyType = iprot.readI32();
              struct.setWeekCurrencyTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.limit = iprot.readBool();
              struct.setLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // REMAIN_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.remainCount = iprot.readI32();
              struct.setRemainCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SEX
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.sex = iprot.readByte();
              struct.setSexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // DISCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.discount = iprot.readByte();
              struct.setDiscountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // USE_BIND_IB
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.useBindIb = iprot.readBool();
              struct.setUseBindIbIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // RETURN_POINT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.returnPoint = iprot.readI32();
              struct.setReturnPointIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MallItem struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
      oprot.writeI32(struct.itemId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ITEM_TYPE_FIELD_DESC);
      oprot.writeI32(struct.itemType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATE_FIELD_DESC);
      oprot.writeI32(struct.state);
      oprot.writeFieldEnd();
      if (struct.itemName != null) {
        if (struct.isSetItemName()) {
          oprot.writeFieldBegin(ITEM_NAME_FIELD_DESC);
          oprot.writeString(struct.itemName);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(FOREVER_CURRENCY_COUNT_FIELD_DESC);
      oprot.writeI32(struct.foreverCurrencyCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FOREVER_CURRENCY_TYPE_FIELD_DESC);
      oprot.writeI32(struct.foreverCurrencyType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MONTH_CURRENCY_COUNT_FIELD_DESC);
      oprot.writeI32(struct.monthCurrencyCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MONTH_CURRENCY_TYPE_FIELD_DESC);
      oprot.writeI32(struct.monthCurrencyType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WEEK_CURRENCY_COUNT_FIELD_DESC);
      oprot.writeI32(struct.weekCurrencyCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WEEK_CURRENCY_TYPE_FIELD_DESC);
      oprot.writeI32(struct.weekCurrencyType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LIMIT_FIELD_DESC);
      oprot.writeBool(struct.limit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REMAIN_COUNT_FIELD_DESC);
      oprot.writeI32(struct.remainCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SEX_FIELD_DESC);
      oprot.writeByte(struct.sex);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DISCOUNT_FIELD_DESC);
      oprot.writeByte(struct.discount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USE_BIND_IB_FIELD_DESC);
      oprot.writeBool(struct.useBindIb);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RETURN_POINT_FIELD_DESC);
      oprot.writeI32(struct.returnPoint);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MallItemTupleSchemeFactory implements SchemeFactory {
    public MallItemTupleScheme getScheme() {
      return new MallItemTupleScheme();
    }
  }

  private static class MallItemTupleScheme extends TupleScheme<MallItem> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MallItem struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetItemId()) {
        optionals.set(0);
      }
      if (struct.isSetItemType()) {
        optionals.set(1);
      }
      if (struct.isSetState()) {
        optionals.set(2);
      }
      if (struct.isSetItemName()) {
        optionals.set(3);
      }
      if (struct.isSetForeverCurrencyCount()) {
        optionals.set(4);
      }
      if (struct.isSetForeverCurrencyType()) {
        optionals.set(5);
      }
      if (struct.isSetMonthCurrencyCount()) {
        optionals.set(6);
      }
      if (struct.isSetMonthCurrencyType()) {
        optionals.set(7);
      }
      if (struct.isSetWeekCurrencyCount()) {
        optionals.set(8);
      }
      if (struct.isSetWeekCurrencyType()) {
        optionals.set(9);
      }
      if (struct.isSetLimit()) {
        optionals.set(10);
      }
      if (struct.isSetRemainCount()) {
        optionals.set(11);
      }
      if (struct.isSetSex()) {
        optionals.set(12);
      }
      if (struct.isSetDiscount()) {
        optionals.set(13);
      }
      if (struct.isSetUseBindIb()) {
        optionals.set(14);
      }
      if (struct.isSetReturnPoint()) {
        optionals.set(15);
      }
      oprot.writeBitSet(optionals, 16);
      if (struct.isSetItemId()) {
        oprot.writeI32(struct.itemId);
      }
      if (struct.isSetItemType()) {
        oprot.writeI32(struct.itemType);
      }
      if (struct.isSetState()) {
        oprot.writeI32(struct.state);
      }
      if (struct.isSetItemName()) {
        oprot.writeString(struct.itemName);
      }
      if (struct.isSetForeverCurrencyCount()) {
        oprot.writeI32(struct.foreverCurrencyCount);
      }
      if (struct.isSetForeverCurrencyType()) {
        oprot.writeI32(struct.foreverCurrencyType);
      }
      if (struct.isSetMonthCurrencyCount()) {
        oprot.writeI32(struct.monthCurrencyCount);
      }
      if (struct.isSetMonthCurrencyType()) {
        oprot.writeI32(struct.monthCurrencyType);
      }
      if (struct.isSetWeekCurrencyCount()) {
        oprot.writeI32(struct.weekCurrencyCount);
      }
      if (struct.isSetWeekCurrencyType()) {
        oprot.writeI32(struct.weekCurrencyType);
      }
      if (struct.isSetLimit()) {
        oprot.writeBool(struct.limit);
      }
      if (struct.isSetRemainCount()) {
        oprot.writeI32(struct.remainCount);
      }
      if (struct.isSetSex()) {
        oprot.writeByte(struct.sex);
      }
      if (struct.isSetDiscount()) {
        oprot.writeByte(struct.discount);
      }
      if (struct.isSetUseBindIb()) {
        oprot.writeBool(struct.useBindIb);
      }
      if (struct.isSetReturnPoint()) {
        oprot.writeI32(struct.returnPoint);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MallItem struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(16);
      if (incoming.get(0)) {
        struct.itemId = iprot.readI32();
        struct.setItemIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.itemType = iprot.readI32();
        struct.setItemTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.state = iprot.readI32();
        struct.setStateIsSet(true);
      }
      if (incoming.get(3)) {
        struct.itemName = iprot.readString();
        struct.setItemNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.foreverCurrencyCount = iprot.readI32();
        struct.setForeverCurrencyCountIsSet(true);
      }
      if (incoming.get(5)) {
        struct.foreverCurrencyType = iprot.readI32();
        struct.setForeverCurrencyTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.monthCurrencyCount = iprot.readI32();
        struct.setMonthCurrencyCountIsSet(true);
      }
      if (incoming.get(7)) {
        struct.monthCurrencyType = iprot.readI32();
        struct.setMonthCurrencyTypeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.weekCurrencyCount = iprot.readI32();
        struct.setWeekCurrencyCountIsSet(true);
      }
      if (incoming.get(9)) {
        struct.weekCurrencyType = iprot.readI32();
        struct.setWeekCurrencyTypeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.limit = iprot.readBool();
        struct.setLimitIsSet(true);
      }
      if (incoming.get(11)) {
        struct.remainCount = iprot.readI32();
        struct.setRemainCountIsSet(true);
      }
      if (incoming.get(12)) {
        struct.sex = iprot.readByte();
        struct.setSexIsSet(true);
      }
      if (incoming.get(13)) {
        struct.discount = iprot.readByte();
        struct.setDiscountIsSet(true);
      }
      if (incoming.get(14)) {
        struct.useBindIb = iprot.readBool();
        struct.setUseBindIbIsSet(true);
      }
      if (incoming.get(15)) {
        struct.returnPoint = iprot.readI32();
        struct.setReturnPointIsSet(true);
      }
    }
  }

}

