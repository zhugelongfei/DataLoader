/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ComposeActivity implements org.apache.thrift.TBase<ComposeActivity, ComposeActivity._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ComposeActivity");

  private static final org.apache.thrift.protocol.TField ACTIVITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("activityId", org.apache.thrift.protocol.TType.I16, (short)1);
  private static final org.apache.thrift.protocol.TField ACTIVITY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("activityName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField EXCHANGE_COURSE_FIELD_DESC = new org.apache.thrift.protocol.TField("exchangeCourse", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField BEGIN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("beginTime", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField DAY_LIMIT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("dayLimitTime", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField ITEM_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("itemIds", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.BYTE, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ComposeActivityStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ComposeActivityTupleSchemeFactory());
  }

  public short activityId; // required
  public String activityName; // required
  public String description; // required
  public CourseTaskData exchangeCourse; // required
  public long beginTime; // required
  public long endTime; // required
  public List<ComposeActivityTime> dayLimitTime; // required
  public List<ComposeItemIndex> itemIds; // required
  public byte type; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ACTIVITY_ID((short)1, "activityId"),
    ACTIVITY_NAME((short)2, "activityName"),
    DESCRIPTION((short)3, "description"),
    EXCHANGE_COURSE((short)4, "exchangeCourse"),
    BEGIN_TIME((short)5, "beginTime"),
    END_TIME((short)6, "endTime"),
    DAY_LIMIT_TIME((short)7, "dayLimitTime"),
    ITEM_IDS((short)8, "itemIds"),
    TYPE((short)9, "type");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACTIVITY_ID
          return ACTIVITY_ID;
        case 2: // ACTIVITY_NAME
          return ACTIVITY_NAME;
        case 3: // DESCRIPTION
          return DESCRIPTION;
        case 4: // EXCHANGE_COURSE
          return EXCHANGE_COURSE;
        case 5: // BEGIN_TIME
          return BEGIN_TIME;
        case 6: // END_TIME
          return END_TIME;
        case 7: // DAY_LIMIT_TIME
          return DAY_LIMIT_TIME;
        case 8: // ITEM_IDS
          return ITEM_IDS;
        case 9: // TYPE
          return TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ACTIVITYID_ISSET_ID = 0;
  private static final int __BEGINTIME_ISSET_ID = 1;
  private static final int __ENDTIME_ISSET_ID = 2;
  private static final int __TYPE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACTIVITY_ID, new org.apache.thrift.meta_data.FieldMetaData("activityId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.ACTIVITY_NAME, new org.apache.thrift.meta_data.FieldMetaData("activityName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXCHANGE_COURSE, new org.apache.thrift.meta_data.FieldMetaData("exchangeCourse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CourseTaskData.class)));
    tmpMap.put(_Fields.BEGIN_TIME, new org.apache.thrift.meta_data.FieldMetaData("beginTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DAY_LIMIT_TIME, new org.apache.thrift.meta_data.FieldMetaData("dayLimitTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ComposeActivityTime.class))));
    tmpMap.put(_Fields.ITEM_IDS, new org.apache.thrift.meta_data.FieldMetaData("itemIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ComposeItemIndex.class))));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ComposeActivity.class, metaDataMap);
  }

  public ComposeActivity() {
  }

  public ComposeActivity(
    short activityId,
    String activityName,
    String description,
    CourseTaskData exchangeCourse,
    long beginTime,
    long endTime,
    List<ComposeActivityTime> dayLimitTime,
    List<ComposeItemIndex> itemIds,
    byte type)
  {
    this();
    this.activityId = activityId;
    setActivityIdIsSet(true);
    this.activityName = activityName;
    this.description = description;
    this.exchangeCourse = exchangeCourse;
    this.beginTime = beginTime;
    setBeginTimeIsSet(true);
    this.endTime = endTime;
    setEndTimeIsSet(true);
    this.dayLimitTime = dayLimitTime;
    this.itemIds = itemIds;
    this.type = type;
    setTypeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ComposeActivity(ComposeActivity other) {
    __isset_bitfield = other.__isset_bitfield;
    this.activityId = other.activityId;
    if (other.isSetActivityName()) {
      this.activityName = other.activityName;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    if (other.isSetExchangeCourse()) {
      this.exchangeCourse = new CourseTaskData(other.exchangeCourse);
    }
    this.beginTime = other.beginTime;
    this.endTime = other.endTime;
    if (other.isSetDayLimitTime()) {
      List<ComposeActivityTime> __this__dayLimitTime = new ArrayList<ComposeActivityTime>();
      for (ComposeActivityTime other_element : other.dayLimitTime) {
        __this__dayLimitTime.add(new ComposeActivityTime(other_element));
      }
      this.dayLimitTime = __this__dayLimitTime;
    }
    if (other.isSetItemIds()) {
      List<ComposeItemIndex> __this__itemIds = new ArrayList<ComposeItemIndex>();
      for (ComposeItemIndex other_element : other.itemIds) {
        __this__itemIds.add(new ComposeItemIndex(other_element));
      }
      this.itemIds = __this__itemIds;
    }
    this.type = other.type;
  }

  public ComposeActivity deepCopy() {
    return new ComposeActivity(this);
  }

  @Override
  public void clear() {
    setActivityIdIsSet(false);
    this.activityId = 0;
    this.activityName = null;
    this.description = null;
    this.exchangeCourse = null;
    setBeginTimeIsSet(false);
    this.beginTime = 0;
    setEndTimeIsSet(false);
    this.endTime = 0;
    this.dayLimitTime = null;
    this.itemIds = null;
    setTypeIsSet(false);
    this.type = 0;
  }

  public short getActivityId() {
    return this.activityId;
  }

  public ComposeActivity setActivityId(short activityId) {
    this.activityId = activityId;
    setActivityIdIsSet(true);
    return this;
  }

  public void unsetActivityId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIVITYID_ISSET_ID);
  }

  /** Returns true if field activityId is set (has been assigned a value) and false otherwise */
  public boolean isSetActivityId() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTIVITYID_ISSET_ID);
  }

  public void setActivityIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIVITYID_ISSET_ID, value);
  }

  public String getActivityName() {
    return this.activityName;
  }

  public ComposeActivity setActivityName(String activityName) {
    this.activityName = activityName;
    return this;
  }

  public void unsetActivityName() {
    this.activityName = null;
  }

  /** Returns true if field activityName is set (has been assigned a value) and false otherwise */
  public boolean isSetActivityName() {
    return this.activityName != null;
  }

  public void setActivityNameIsSet(boolean value) {
    if (!value) {
      this.activityName = null;
    }
  }

  public String getDescription() {
    return this.description;
  }

  public ComposeActivity setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public CourseTaskData getExchangeCourse() {
    return this.exchangeCourse;
  }

  public ComposeActivity setExchangeCourse(CourseTaskData exchangeCourse) {
    this.exchangeCourse = exchangeCourse;
    return this;
  }

  public void unsetExchangeCourse() {
    this.exchangeCourse = null;
  }

  /** Returns true if field exchangeCourse is set (has been assigned a value) and false otherwise */
  public boolean isSetExchangeCourse() {
    return this.exchangeCourse != null;
  }

  public void setExchangeCourseIsSet(boolean value) {
    if (!value) {
      this.exchangeCourse = null;
    }
  }

  public long getBeginTime() {
    return this.beginTime;
  }

  public ComposeActivity setBeginTime(long beginTime) {
    this.beginTime = beginTime;
    setBeginTimeIsSet(true);
    return this;
  }

  public void unsetBeginTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BEGINTIME_ISSET_ID);
  }

  /** Returns true if field beginTime is set (has been assigned a value) and false otherwise */
  public boolean isSetBeginTime() {
    return EncodingUtils.testBit(__isset_bitfield, __BEGINTIME_ISSET_ID);
  }

  public void setBeginTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BEGINTIME_ISSET_ID, value);
  }

  public long getEndTime() {
    return this.endTime;
  }

  public ComposeActivity setEndTime(long endTime) {
    this.endTime = endTime;
    setEndTimeIsSet(true);
    return this;
  }

  public void unsetEndTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  public void setEndTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
  }

  public int getDayLimitTimeSize() {
    return (this.dayLimitTime == null) ? 0 : this.dayLimitTime.size();
  }

  public java.util.Iterator<ComposeActivityTime> getDayLimitTimeIterator() {
    return (this.dayLimitTime == null) ? null : this.dayLimitTime.iterator();
  }

  public void addToDayLimitTime(ComposeActivityTime elem) {
    if (this.dayLimitTime == null) {
      this.dayLimitTime = new ArrayList<ComposeActivityTime>();
    }
    this.dayLimitTime.add(elem);
  }

  public List<ComposeActivityTime> getDayLimitTime() {
    return this.dayLimitTime;
  }

  public ComposeActivity setDayLimitTime(List<ComposeActivityTime> dayLimitTime) {
    this.dayLimitTime = dayLimitTime;
    return this;
  }

  public void unsetDayLimitTime() {
    this.dayLimitTime = null;
  }

  /** Returns true if field dayLimitTime is set (has been assigned a value) and false otherwise */
  public boolean isSetDayLimitTime() {
    return this.dayLimitTime != null;
  }

  public void setDayLimitTimeIsSet(boolean value) {
    if (!value) {
      this.dayLimitTime = null;
    }
  }

  public int getItemIdsSize() {
    return (this.itemIds == null) ? 0 : this.itemIds.size();
  }

  public java.util.Iterator<ComposeItemIndex> getItemIdsIterator() {
    return (this.itemIds == null) ? null : this.itemIds.iterator();
  }

  public void addToItemIds(ComposeItemIndex elem) {
    if (this.itemIds == null) {
      this.itemIds = new ArrayList<ComposeItemIndex>();
    }
    this.itemIds.add(elem);
  }

  public List<ComposeItemIndex> getItemIds() {
    return this.itemIds;
  }

  public ComposeActivity setItemIds(List<ComposeItemIndex> itemIds) {
    this.itemIds = itemIds;
    return this;
  }

  public void unsetItemIds() {
    this.itemIds = null;
  }

  /** Returns true if field itemIds is set (has been assigned a value) and false otherwise */
  public boolean isSetItemIds() {
    return this.itemIds != null;
  }

  public void setItemIdsIsSet(boolean value) {
    if (!value) {
      this.itemIds = null;
    }
  }

  public byte getType() {
    return this.type;
  }

  public ComposeActivity setType(byte type) {
    this.type = type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ACTIVITY_ID:
      if (value == null) {
        unsetActivityId();
      } else {
        setActivityId((Short)value);
      }
      break;

    case ACTIVITY_NAME:
      if (value == null) {
        unsetActivityName();
      } else {
        setActivityName((String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case EXCHANGE_COURSE:
      if (value == null) {
        unsetExchangeCourse();
      } else {
        setExchangeCourse((CourseTaskData)value);
      }
      break;

    case BEGIN_TIME:
      if (value == null) {
        unsetBeginTime();
      } else {
        setBeginTime((Long)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((Long)value);
      }
      break;

    case DAY_LIMIT_TIME:
      if (value == null) {
        unsetDayLimitTime();
      } else {
        setDayLimitTime((List<ComposeActivityTime>)value);
      }
      break;

    case ITEM_IDS:
      if (value == null) {
        unsetItemIds();
      } else {
        setItemIds((List<ComposeItemIndex>)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Byte)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ACTIVITY_ID:
      return Short.valueOf(getActivityId());

    case ACTIVITY_NAME:
      return getActivityName();

    case DESCRIPTION:
      return getDescription();

    case EXCHANGE_COURSE:
      return getExchangeCourse();

    case BEGIN_TIME:
      return Long.valueOf(getBeginTime());

    case END_TIME:
      return Long.valueOf(getEndTime());

    case DAY_LIMIT_TIME:
      return getDayLimitTime();

    case ITEM_IDS:
      return getItemIds();

    case TYPE:
      return Byte.valueOf(getType());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ACTIVITY_ID:
      return isSetActivityId();
    case ACTIVITY_NAME:
      return isSetActivityName();
    case DESCRIPTION:
      return isSetDescription();
    case EXCHANGE_COURSE:
      return isSetExchangeCourse();
    case BEGIN_TIME:
      return isSetBeginTime();
    case END_TIME:
      return isSetEndTime();
    case DAY_LIMIT_TIME:
      return isSetDayLimitTime();
    case ITEM_IDS:
      return isSetItemIds();
    case TYPE:
      return isSetType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ComposeActivity)
      return this.equals((ComposeActivity)that);
    return false;
  }

  public boolean equals(ComposeActivity that) {
    if (that == null)
      return false;

    boolean this_present_activityId = true;
    boolean that_present_activityId = true;
    if (this_present_activityId || that_present_activityId) {
      if (!(this_present_activityId && that_present_activityId))
        return false;
      if (this.activityId != that.activityId)
        return false;
    }

    boolean this_present_activityName = true && this.isSetActivityName();
    boolean that_present_activityName = true && that.isSetActivityName();
    if (this_present_activityName || that_present_activityName) {
      if (!(this_present_activityName && that_present_activityName))
        return false;
      if (!this.activityName.equals(that.activityName))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_exchangeCourse = true && this.isSetExchangeCourse();
    boolean that_present_exchangeCourse = true && that.isSetExchangeCourse();
    if (this_present_exchangeCourse || that_present_exchangeCourse) {
      if (!(this_present_exchangeCourse && that_present_exchangeCourse))
        return false;
      if (!this.exchangeCourse.equals(that.exchangeCourse))
        return false;
    }

    boolean this_present_beginTime = true;
    boolean that_present_beginTime = true;
    if (this_present_beginTime || that_present_beginTime) {
      if (!(this_present_beginTime && that_present_beginTime))
        return false;
      if (this.beginTime != that.beginTime)
        return false;
    }

    boolean this_present_endTime = true;
    boolean that_present_endTime = true;
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (this.endTime != that.endTime)
        return false;
    }

    boolean this_present_dayLimitTime = true && this.isSetDayLimitTime();
    boolean that_present_dayLimitTime = true && that.isSetDayLimitTime();
    if (this_present_dayLimitTime || that_present_dayLimitTime) {
      if (!(this_present_dayLimitTime && that_present_dayLimitTime))
        return false;
      if (!this.dayLimitTime.equals(that.dayLimitTime))
        return false;
    }

    boolean this_present_itemIds = true && this.isSetItemIds();
    boolean that_present_itemIds = true && that.isSetItemIds();
    if (this_present_itemIds || that_present_itemIds) {
      if (!(this_present_itemIds && that_present_itemIds))
        return false;
      if (!this.itemIds.equals(that.itemIds))
        return false;
    }

    boolean this_present_type = true;
    boolean that_present_type = true;
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ComposeActivity other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ComposeActivity typedOther = (ComposeActivity)other;

    lastComparison = Boolean.valueOf(isSetActivityId()).compareTo(typedOther.isSetActivityId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActivityId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activityId, typedOther.activityId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActivityName()).compareTo(typedOther.isSetActivityName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActivityName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activityName, typedOther.activityName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(typedOther.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, typedOther.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchangeCourse()).compareTo(typedOther.isSetExchangeCourse());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchangeCourse()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchangeCourse, typedOther.exchangeCourse);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBeginTime()).compareTo(typedOther.isSetBeginTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBeginTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.beginTime, typedOther.beginTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(typedOther.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, typedOther.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDayLimitTime()).compareTo(typedOther.isSetDayLimitTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDayLimitTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dayLimitTime, typedOther.dayLimitTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItemIds()).compareTo(typedOther.isSetItemIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemIds, typedOther.itemIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, typedOther.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ComposeActivity(");
    boolean first = true;

    sb.append("activityId:");
    sb.append(this.activityId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("activityName:");
    if (this.activityName == null) {
      sb.append("null");
    } else {
      sb.append(this.activityName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("description:");
    if (this.description == null) {
      sb.append("null");
    } else {
      sb.append(this.description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("exchangeCourse:");
    if (this.exchangeCourse == null) {
      sb.append("null");
    } else {
      sb.append(this.exchangeCourse);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("beginTime:");
    sb.append(this.beginTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endTime:");
    sb.append(this.endTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dayLimitTime:");
    if (this.dayLimitTime == null) {
      sb.append("null");
    } else {
      sb.append(this.dayLimitTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("itemIds:");
    if (this.itemIds == null) {
      sb.append("null");
    } else {
      sb.append(this.itemIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    sb.append(this.type);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (exchangeCourse != null) {
      exchangeCourse.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ComposeActivityStandardSchemeFactory implements SchemeFactory {
    public ComposeActivityStandardScheme getScheme() {
      return new ComposeActivityStandardScheme();
    }
  }

  private static class ComposeActivityStandardScheme extends StandardScheme<ComposeActivity> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ComposeActivity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ACTIVITY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.activityId = iprot.readI16();
              struct.setActivityIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ACTIVITY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.activityName = iprot.readString();
              struct.setActivityNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EXCHANGE_COURSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.exchangeCourse = new CourseTaskData();
              struct.exchangeCourse.read(iprot);
              struct.setExchangeCourseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BEGIN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.beginTime = iprot.readI64();
              struct.setBeginTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.endTime = iprot.readI64();
              struct.setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DAY_LIMIT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list538 = iprot.readListBegin();
                struct.dayLimitTime = new ArrayList<ComposeActivityTime>(_list538.size);
                for (int _i539 = 0; _i539 < _list538.size; ++_i539)
                {
                  ComposeActivityTime _elem540; // required
                  _elem540 = new ComposeActivityTime();
                  _elem540.read(iprot);
                  struct.dayLimitTime.add(_elem540);
                }
                iprot.readListEnd();
              }
              struct.setDayLimitTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ITEM_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list541 = iprot.readListBegin();
                struct.itemIds = new ArrayList<ComposeItemIndex>(_list541.size);
                for (int _i542 = 0; _i542 < _list541.size; ++_i542)
                {
                  ComposeItemIndex _elem543; // required
                  _elem543 = new ComposeItemIndex();
                  _elem543.read(iprot);
                  struct.itemIds.add(_elem543);
                }
                iprot.readListEnd();
              }
              struct.setItemIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.type = iprot.readByte();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ComposeActivity struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ACTIVITY_ID_FIELD_DESC);
      oprot.writeI16(struct.activityId);
      oprot.writeFieldEnd();
      if (struct.activityName != null) {
        oprot.writeFieldBegin(ACTIVITY_NAME_FIELD_DESC);
        oprot.writeString(struct.activityName);
        oprot.writeFieldEnd();
      }
      if (struct.description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.description);
        oprot.writeFieldEnd();
      }
      if (struct.exchangeCourse != null) {
        oprot.writeFieldBegin(EXCHANGE_COURSE_FIELD_DESC);
        struct.exchangeCourse.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BEGIN_TIME_FIELD_DESC);
      oprot.writeI64(struct.beginTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(END_TIME_FIELD_DESC);
      oprot.writeI64(struct.endTime);
      oprot.writeFieldEnd();
      if (struct.dayLimitTime != null) {
        oprot.writeFieldBegin(DAY_LIMIT_TIME_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.dayLimitTime.size()));
          for (ComposeActivityTime _iter544 : struct.dayLimitTime)
          {
            _iter544.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.itemIds != null) {
        oprot.writeFieldBegin(ITEM_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.itemIds.size()));
          for (ComposeItemIndex _iter545 : struct.itemIds)
          {
            _iter545.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeByte(struct.type);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ComposeActivityTupleSchemeFactory implements SchemeFactory {
    public ComposeActivityTupleScheme getScheme() {
      return new ComposeActivityTupleScheme();
    }
  }

  private static class ComposeActivityTupleScheme extends TupleScheme<ComposeActivity> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ComposeActivity struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetActivityId()) {
        optionals.set(0);
      }
      if (struct.isSetActivityName()) {
        optionals.set(1);
      }
      if (struct.isSetDescription()) {
        optionals.set(2);
      }
      if (struct.isSetExchangeCourse()) {
        optionals.set(3);
      }
      if (struct.isSetBeginTime()) {
        optionals.set(4);
      }
      if (struct.isSetEndTime()) {
        optionals.set(5);
      }
      if (struct.isSetDayLimitTime()) {
        optionals.set(6);
      }
      if (struct.isSetItemIds()) {
        optionals.set(7);
      }
      if (struct.isSetType()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetActivityId()) {
        oprot.writeI16(struct.activityId);
      }
      if (struct.isSetActivityName()) {
        oprot.writeString(struct.activityName);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetExchangeCourse()) {
        struct.exchangeCourse.write(oprot);
      }
      if (struct.isSetBeginTime()) {
        oprot.writeI64(struct.beginTime);
      }
      if (struct.isSetEndTime()) {
        oprot.writeI64(struct.endTime);
      }
      if (struct.isSetDayLimitTime()) {
        {
          oprot.writeI32(struct.dayLimitTime.size());
          for (ComposeActivityTime _iter546 : struct.dayLimitTime)
          {
            _iter546.write(oprot);
          }
        }
      }
      if (struct.isSetItemIds()) {
        {
          oprot.writeI32(struct.itemIds.size());
          for (ComposeItemIndex _iter547 : struct.itemIds)
          {
            _iter547.write(oprot);
          }
        }
      }
      if (struct.isSetType()) {
        oprot.writeByte(struct.type);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ComposeActivity struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.activityId = iprot.readI16();
        struct.setActivityIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.activityName = iprot.readString();
        struct.setActivityNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.exchangeCourse = new CourseTaskData();
        struct.exchangeCourse.read(iprot);
        struct.setExchangeCourseIsSet(true);
      }
      if (incoming.get(4)) {
        struct.beginTime = iprot.readI64();
        struct.setBeginTimeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.endTime = iprot.readI64();
        struct.setEndTimeIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list548 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.dayLimitTime = new ArrayList<ComposeActivityTime>(_list548.size);
          for (int _i549 = 0; _i549 < _list548.size; ++_i549)
          {
            ComposeActivityTime _elem550; // required
            _elem550 = new ComposeActivityTime();
            _elem550.read(iprot);
            struct.dayLimitTime.add(_elem550);
          }
        }
        struct.setDayLimitTimeIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list551 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.itemIds = new ArrayList<ComposeItemIndex>(_list551.size);
          for (int _i552 = 0; _i552 < _list551.size; ++_i552)
          {
            ComposeItemIndex _elem553; // required
            _elem553 = new ComposeItemIndex();
            _elem553.read(iprot);
            struct.itemIds.add(_elem553);
          }
        }
        struct.setItemIdsIsSet(true);
      }
      if (incoming.get(8)) {
        struct.type = iprot.readByte();
        struct.setTypeIsSet(true);
      }
    }
  }

}

