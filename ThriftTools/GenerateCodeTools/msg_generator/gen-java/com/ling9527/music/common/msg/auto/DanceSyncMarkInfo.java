/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DanceSyncMarkInfo implements org.apache.thrift.TBase<DanceSyncMarkInfo, DanceSyncMarkInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DanceSyncMarkInfo");

  private static final org.apache.thrift.protocol.TField CHAR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("charId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField KEY_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("keyResult", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField COMBOS_FIELD_DESC = new org.apache.thrift.protocol.TField("combos", org.apache.thrift.protocol.TType.I16, (short)3);
  private static final org.apache.thrift.protocol.TField MARK_FIELD_DESC = new org.apache.thrift.protocol.TField("mark", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("index", org.apache.thrift.protocol.TType.I16, (short)5);
  private static final org.apache.thrift.protocol.TField LOVERS_DYN_SYNC_MARK_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("loversDynSyncMarkInfo", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField LOVERS_TRD_SYNC_MARK_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("loversTrdSyncMarkInfo", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField CHEER_VAL_RATIO_FIELD_DESC = new org.apache.thrift.protocol.TField("cheerValRatio", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField PERFECT_COMBOS_FIELD_DESC = new org.apache.thrift.protocol.TField("perfectCombos", org.apache.thrift.protocol.TType.I16, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DanceSyncMarkInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DanceSyncMarkInfoTupleSchemeFactory());
  }

  public long charId; // optional
  public byte keyResult; // optional
  public short combos; // optional
  public int mark; // optional
  public short index; // optional
  public LoversDynSyncMarkInfo loversDynSyncMarkInfo; // optional
  public LoversTrdSyncMarkInfo loversTrdSyncMarkInfo; // optional
  /**
   * 自己贡献欢呼值占比*1000取整
   */
  public int cheerValRatio; // optional
  public short perfectCombos; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CHAR_ID((short)1, "charId"),
    KEY_RESULT((short)2, "keyResult"),
    COMBOS((short)3, "combos"),
    MARK((short)4, "mark"),
    INDEX((short)5, "index"),
    LOVERS_DYN_SYNC_MARK_INFO((short)6, "loversDynSyncMarkInfo"),
    LOVERS_TRD_SYNC_MARK_INFO((short)7, "loversTrdSyncMarkInfo"),
    /**
     * 自己贡献欢呼值占比*1000取整
     */
    CHEER_VAL_RATIO((short)8, "cheerValRatio"),
    PERFECT_COMBOS((short)9, "perfectCombos");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CHAR_ID
          return CHAR_ID;
        case 2: // KEY_RESULT
          return KEY_RESULT;
        case 3: // COMBOS
          return COMBOS;
        case 4: // MARK
          return MARK;
        case 5: // INDEX
          return INDEX;
        case 6: // LOVERS_DYN_SYNC_MARK_INFO
          return LOVERS_DYN_SYNC_MARK_INFO;
        case 7: // LOVERS_TRD_SYNC_MARK_INFO
          return LOVERS_TRD_SYNC_MARK_INFO;
        case 8: // CHEER_VAL_RATIO
          return CHEER_VAL_RATIO;
        case 9: // PERFECT_COMBOS
          return PERFECT_COMBOS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CHARID_ISSET_ID = 0;
  private static final int __KEYRESULT_ISSET_ID = 1;
  private static final int __COMBOS_ISSET_ID = 2;
  private static final int __MARK_ISSET_ID = 3;
  private static final int __INDEX_ISSET_ID = 4;
  private static final int __CHEERVALRATIO_ISSET_ID = 5;
  private static final int __PERFECTCOMBOS_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.CHAR_ID,_Fields.KEY_RESULT,_Fields.COMBOS,_Fields.MARK,_Fields.INDEX,_Fields.LOVERS_DYN_SYNC_MARK_INFO,_Fields.LOVERS_TRD_SYNC_MARK_INFO,_Fields.CHEER_VAL_RATIO,_Fields.PERFECT_COMBOS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CHAR_ID, new org.apache.thrift.meta_data.FieldMetaData("charId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.KEY_RESULT, new org.apache.thrift.meta_data.FieldMetaData("keyResult", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.COMBOS, new org.apache.thrift.meta_data.FieldMetaData("combos", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.MARK, new org.apache.thrift.meta_data.FieldMetaData("mark", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INDEX, new org.apache.thrift.meta_data.FieldMetaData("index", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.LOVERS_DYN_SYNC_MARK_INFO, new org.apache.thrift.meta_data.FieldMetaData("loversDynSyncMarkInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LoversDynSyncMarkInfo.class)));
    tmpMap.put(_Fields.LOVERS_TRD_SYNC_MARK_INFO, new org.apache.thrift.meta_data.FieldMetaData("loversTrdSyncMarkInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LoversTrdSyncMarkInfo.class)));
    tmpMap.put(_Fields.CHEER_VAL_RATIO, new org.apache.thrift.meta_data.FieldMetaData("cheerValRatio", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PERFECT_COMBOS, new org.apache.thrift.meta_data.FieldMetaData("perfectCombos", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DanceSyncMarkInfo.class, metaDataMap);
  }

  public DanceSyncMarkInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DanceSyncMarkInfo(DanceSyncMarkInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.charId = other.charId;
    this.keyResult = other.keyResult;
    this.combos = other.combos;
    this.mark = other.mark;
    this.index = other.index;
    if (other.isSetLoversDynSyncMarkInfo()) {
      this.loversDynSyncMarkInfo = new LoversDynSyncMarkInfo(other.loversDynSyncMarkInfo);
    }
    if (other.isSetLoversTrdSyncMarkInfo()) {
      this.loversTrdSyncMarkInfo = new LoversTrdSyncMarkInfo(other.loversTrdSyncMarkInfo);
    }
    this.cheerValRatio = other.cheerValRatio;
    this.perfectCombos = other.perfectCombos;
  }

  public DanceSyncMarkInfo deepCopy() {
    return new DanceSyncMarkInfo(this);
  }

  @Override
  public void clear() {
    setCharIdIsSet(false);
    this.charId = 0;
    setKeyResultIsSet(false);
    this.keyResult = 0;
    setCombosIsSet(false);
    this.combos = 0;
    setMarkIsSet(false);
    this.mark = 0;
    setIndexIsSet(false);
    this.index = 0;
    this.loversDynSyncMarkInfo = null;
    this.loversTrdSyncMarkInfo = null;
    setCheerValRatioIsSet(false);
    this.cheerValRatio = 0;
    setPerfectCombosIsSet(false);
    this.perfectCombos = 0;
  }

  public long getCharId() {
    return this.charId;
  }

  public DanceSyncMarkInfo setCharId(long charId) {
    this.charId = charId;
    setCharIdIsSet(true);
    return this;
  }

  public void unsetCharId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHARID_ISSET_ID);
  }

  /** Returns true if field charId is set (has been assigned a value) and false otherwise */
  public boolean isSetCharId() {
    return EncodingUtils.testBit(__isset_bitfield, __CHARID_ISSET_ID);
  }

  public void setCharIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHARID_ISSET_ID, value);
  }

  public byte getKeyResult() {
    return this.keyResult;
  }

  public DanceSyncMarkInfo setKeyResult(byte keyResult) {
    this.keyResult = keyResult;
    setKeyResultIsSet(true);
    return this;
  }

  public void unsetKeyResult() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __KEYRESULT_ISSET_ID);
  }

  /** Returns true if field keyResult is set (has been assigned a value) and false otherwise */
  public boolean isSetKeyResult() {
    return EncodingUtils.testBit(__isset_bitfield, __KEYRESULT_ISSET_ID);
  }

  public void setKeyResultIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __KEYRESULT_ISSET_ID, value);
  }

  public short getCombos() {
    return this.combos;
  }

  public DanceSyncMarkInfo setCombos(short combos) {
    this.combos = combos;
    setCombosIsSet(true);
    return this;
  }

  public void unsetCombos() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMBOS_ISSET_ID);
  }

  /** Returns true if field combos is set (has been assigned a value) and false otherwise */
  public boolean isSetCombos() {
    return EncodingUtils.testBit(__isset_bitfield, __COMBOS_ISSET_ID);
  }

  public void setCombosIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMBOS_ISSET_ID, value);
  }

  public int getMark() {
    return this.mark;
  }

  public DanceSyncMarkInfo setMark(int mark) {
    this.mark = mark;
    setMarkIsSet(true);
    return this;
  }

  public void unsetMark() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MARK_ISSET_ID);
  }

  /** Returns true if field mark is set (has been assigned a value) and false otherwise */
  public boolean isSetMark() {
    return EncodingUtils.testBit(__isset_bitfield, __MARK_ISSET_ID);
  }

  public void setMarkIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MARK_ISSET_ID, value);
  }

  public short getIndex() {
    return this.index;
  }

  public DanceSyncMarkInfo setIndex(short index) {
    this.index = index;
    setIndexIsSet(true);
    return this;
  }

  public void unsetIndex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INDEX_ISSET_ID);
  }

  /** Returns true if field index is set (has been assigned a value) and false otherwise */
  public boolean isSetIndex() {
    return EncodingUtils.testBit(__isset_bitfield, __INDEX_ISSET_ID);
  }

  public void setIndexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INDEX_ISSET_ID, value);
  }

  public LoversDynSyncMarkInfo getLoversDynSyncMarkInfo() {
    return this.loversDynSyncMarkInfo;
  }

  public DanceSyncMarkInfo setLoversDynSyncMarkInfo(LoversDynSyncMarkInfo loversDynSyncMarkInfo) {
    this.loversDynSyncMarkInfo = loversDynSyncMarkInfo;
    return this;
  }

  public void unsetLoversDynSyncMarkInfo() {
    this.loversDynSyncMarkInfo = null;
  }

  /** Returns true if field loversDynSyncMarkInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetLoversDynSyncMarkInfo() {
    return this.loversDynSyncMarkInfo != null;
  }

  public void setLoversDynSyncMarkInfoIsSet(boolean value) {
    if (!value) {
      this.loversDynSyncMarkInfo = null;
    }
  }

  public LoversTrdSyncMarkInfo getLoversTrdSyncMarkInfo() {
    return this.loversTrdSyncMarkInfo;
  }

  public DanceSyncMarkInfo setLoversTrdSyncMarkInfo(LoversTrdSyncMarkInfo loversTrdSyncMarkInfo) {
    this.loversTrdSyncMarkInfo = loversTrdSyncMarkInfo;
    return this;
  }

  public void unsetLoversTrdSyncMarkInfo() {
    this.loversTrdSyncMarkInfo = null;
  }

  /** Returns true if field loversTrdSyncMarkInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetLoversTrdSyncMarkInfo() {
    return this.loversTrdSyncMarkInfo != null;
  }

  public void setLoversTrdSyncMarkInfoIsSet(boolean value) {
    if (!value) {
      this.loversTrdSyncMarkInfo = null;
    }
  }

  /**
   * 自己贡献欢呼值占比*1000取整
   */
  public int getCheerValRatio() {
    return this.cheerValRatio;
  }

  /**
   * 自己贡献欢呼值占比*1000取整
   */
  public DanceSyncMarkInfo setCheerValRatio(int cheerValRatio) {
    this.cheerValRatio = cheerValRatio;
    setCheerValRatioIsSet(true);
    return this;
  }

  public void unsetCheerValRatio() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHEERVALRATIO_ISSET_ID);
  }

  /** Returns true if field cheerValRatio is set (has been assigned a value) and false otherwise */
  public boolean isSetCheerValRatio() {
    return EncodingUtils.testBit(__isset_bitfield, __CHEERVALRATIO_ISSET_ID);
  }

  public void setCheerValRatioIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHEERVALRATIO_ISSET_ID, value);
  }

  public short getPerfectCombos() {
    return this.perfectCombos;
  }

  public DanceSyncMarkInfo setPerfectCombos(short perfectCombos) {
    this.perfectCombos = perfectCombos;
    setPerfectCombosIsSet(true);
    return this;
  }

  public void unsetPerfectCombos() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PERFECTCOMBOS_ISSET_ID);
  }

  /** Returns true if field perfectCombos is set (has been assigned a value) and false otherwise */
  public boolean isSetPerfectCombos() {
    return EncodingUtils.testBit(__isset_bitfield, __PERFECTCOMBOS_ISSET_ID);
  }

  public void setPerfectCombosIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PERFECTCOMBOS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CHAR_ID:
      if (value == null) {
        unsetCharId();
      } else {
        setCharId((Long)value);
      }
      break;

    case KEY_RESULT:
      if (value == null) {
        unsetKeyResult();
      } else {
        setKeyResult((Byte)value);
      }
      break;

    case COMBOS:
      if (value == null) {
        unsetCombos();
      } else {
        setCombos((Short)value);
      }
      break;

    case MARK:
      if (value == null) {
        unsetMark();
      } else {
        setMark((Integer)value);
      }
      break;

    case INDEX:
      if (value == null) {
        unsetIndex();
      } else {
        setIndex((Short)value);
      }
      break;

    case LOVERS_DYN_SYNC_MARK_INFO:
      if (value == null) {
        unsetLoversDynSyncMarkInfo();
      } else {
        setLoversDynSyncMarkInfo((LoversDynSyncMarkInfo)value);
      }
      break;

    case LOVERS_TRD_SYNC_MARK_INFO:
      if (value == null) {
        unsetLoversTrdSyncMarkInfo();
      } else {
        setLoversTrdSyncMarkInfo((LoversTrdSyncMarkInfo)value);
      }
      break;

    case CHEER_VAL_RATIO:
      if (value == null) {
        unsetCheerValRatio();
      } else {
        setCheerValRatio((Integer)value);
      }
      break;

    case PERFECT_COMBOS:
      if (value == null) {
        unsetPerfectCombos();
      } else {
        setPerfectCombos((Short)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CHAR_ID:
      return Long.valueOf(getCharId());

    case KEY_RESULT:
      return Byte.valueOf(getKeyResult());

    case COMBOS:
      return Short.valueOf(getCombos());

    case MARK:
      return Integer.valueOf(getMark());

    case INDEX:
      return Short.valueOf(getIndex());

    case LOVERS_DYN_SYNC_MARK_INFO:
      return getLoversDynSyncMarkInfo();

    case LOVERS_TRD_SYNC_MARK_INFO:
      return getLoversTrdSyncMarkInfo();

    case CHEER_VAL_RATIO:
      return Integer.valueOf(getCheerValRatio());

    case PERFECT_COMBOS:
      return Short.valueOf(getPerfectCombos());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CHAR_ID:
      return isSetCharId();
    case KEY_RESULT:
      return isSetKeyResult();
    case COMBOS:
      return isSetCombos();
    case MARK:
      return isSetMark();
    case INDEX:
      return isSetIndex();
    case LOVERS_DYN_SYNC_MARK_INFO:
      return isSetLoversDynSyncMarkInfo();
    case LOVERS_TRD_SYNC_MARK_INFO:
      return isSetLoversTrdSyncMarkInfo();
    case CHEER_VAL_RATIO:
      return isSetCheerValRatio();
    case PERFECT_COMBOS:
      return isSetPerfectCombos();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DanceSyncMarkInfo)
      return this.equals((DanceSyncMarkInfo)that);
    return false;
  }

  public boolean equals(DanceSyncMarkInfo that) {
    if (that == null)
      return false;

    boolean this_present_charId = true && this.isSetCharId();
    boolean that_present_charId = true && that.isSetCharId();
    if (this_present_charId || that_present_charId) {
      if (!(this_present_charId && that_present_charId))
        return false;
      if (this.charId != that.charId)
        return false;
    }

    boolean this_present_keyResult = true && this.isSetKeyResult();
    boolean that_present_keyResult = true && that.isSetKeyResult();
    if (this_present_keyResult || that_present_keyResult) {
      if (!(this_present_keyResult && that_present_keyResult))
        return false;
      if (this.keyResult != that.keyResult)
        return false;
    }

    boolean this_present_combos = true && this.isSetCombos();
    boolean that_present_combos = true && that.isSetCombos();
    if (this_present_combos || that_present_combos) {
      if (!(this_present_combos && that_present_combos))
        return false;
      if (this.combos != that.combos)
        return false;
    }

    boolean this_present_mark = true && this.isSetMark();
    boolean that_present_mark = true && that.isSetMark();
    if (this_present_mark || that_present_mark) {
      if (!(this_present_mark && that_present_mark))
        return false;
      if (this.mark != that.mark)
        return false;
    }

    boolean this_present_index = true && this.isSetIndex();
    boolean that_present_index = true && that.isSetIndex();
    if (this_present_index || that_present_index) {
      if (!(this_present_index && that_present_index))
        return false;
      if (this.index != that.index)
        return false;
    }

    boolean this_present_loversDynSyncMarkInfo = true && this.isSetLoversDynSyncMarkInfo();
    boolean that_present_loversDynSyncMarkInfo = true && that.isSetLoversDynSyncMarkInfo();
    if (this_present_loversDynSyncMarkInfo || that_present_loversDynSyncMarkInfo) {
      if (!(this_present_loversDynSyncMarkInfo && that_present_loversDynSyncMarkInfo))
        return false;
      if (!this.loversDynSyncMarkInfo.equals(that.loversDynSyncMarkInfo))
        return false;
    }

    boolean this_present_loversTrdSyncMarkInfo = true && this.isSetLoversTrdSyncMarkInfo();
    boolean that_present_loversTrdSyncMarkInfo = true && that.isSetLoversTrdSyncMarkInfo();
    if (this_present_loversTrdSyncMarkInfo || that_present_loversTrdSyncMarkInfo) {
      if (!(this_present_loversTrdSyncMarkInfo && that_present_loversTrdSyncMarkInfo))
        return false;
      if (!this.loversTrdSyncMarkInfo.equals(that.loversTrdSyncMarkInfo))
        return false;
    }

    boolean this_present_cheerValRatio = true && this.isSetCheerValRatio();
    boolean that_present_cheerValRatio = true && that.isSetCheerValRatio();
    if (this_present_cheerValRatio || that_present_cheerValRatio) {
      if (!(this_present_cheerValRatio && that_present_cheerValRatio))
        return false;
      if (this.cheerValRatio != that.cheerValRatio)
        return false;
    }

    boolean this_present_perfectCombos = true && this.isSetPerfectCombos();
    boolean that_present_perfectCombos = true && that.isSetPerfectCombos();
    if (this_present_perfectCombos || that_present_perfectCombos) {
      if (!(this_present_perfectCombos && that_present_perfectCombos))
        return false;
      if (this.perfectCombos != that.perfectCombos)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(DanceSyncMarkInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    DanceSyncMarkInfo typedOther = (DanceSyncMarkInfo)other;

    lastComparison = Boolean.valueOf(isSetCharId()).compareTo(typedOther.isSetCharId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCharId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.charId, typedOther.charId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKeyResult()).compareTo(typedOther.isSetKeyResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeyResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyResult, typedOther.keyResult);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCombos()).compareTo(typedOther.isSetCombos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCombos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.combos, typedOther.combos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMark()).compareTo(typedOther.isSetMark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mark, typedOther.mark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIndex()).compareTo(typedOther.isSetIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.index, typedOther.index);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoversDynSyncMarkInfo()).compareTo(typedOther.isSetLoversDynSyncMarkInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoversDynSyncMarkInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loversDynSyncMarkInfo, typedOther.loversDynSyncMarkInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoversTrdSyncMarkInfo()).compareTo(typedOther.isSetLoversTrdSyncMarkInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoversTrdSyncMarkInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loversTrdSyncMarkInfo, typedOther.loversTrdSyncMarkInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheerValRatio()).compareTo(typedOther.isSetCheerValRatio());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheerValRatio()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cheerValRatio, typedOther.cheerValRatio);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPerfectCombos()).compareTo(typedOther.isSetPerfectCombos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPerfectCombos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.perfectCombos, typedOther.perfectCombos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DanceSyncMarkInfo(");
    boolean first = true;

    if (isSetCharId()) {
      sb.append("charId:");
      sb.append(this.charId);
      first = false;
    }
    if (isSetKeyResult()) {
      if (!first) sb.append(", ");
      sb.append("keyResult:");
      sb.append(this.keyResult);
      first = false;
    }
    if (isSetCombos()) {
      if (!first) sb.append(", ");
      sb.append("combos:");
      sb.append(this.combos);
      first = false;
    }
    if (isSetMark()) {
      if (!first) sb.append(", ");
      sb.append("mark:");
      sb.append(this.mark);
      first = false;
    }
    if (isSetIndex()) {
      if (!first) sb.append(", ");
      sb.append("index:");
      sb.append(this.index);
      first = false;
    }
    if (isSetLoversDynSyncMarkInfo()) {
      if (!first) sb.append(", ");
      sb.append("loversDynSyncMarkInfo:");
      if (this.loversDynSyncMarkInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.loversDynSyncMarkInfo);
      }
      first = false;
    }
    if (isSetLoversTrdSyncMarkInfo()) {
      if (!first) sb.append(", ");
      sb.append("loversTrdSyncMarkInfo:");
      if (this.loversTrdSyncMarkInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.loversTrdSyncMarkInfo);
      }
      first = false;
    }
    if (isSetCheerValRatio()) {
      if (!first) sb.append(", ");
      sb.append("cheerValRatio:");
      sb.append(this.cheerValRatio);
      first = false;
    }
    if (isSetPerfectCombos()) {
      if (!first) sb.append(", ");
      sb.append("perfectCombos:");
      sb.append(this.perfectCombos);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (loversDynSyncMarkInfo != null) {
      loversDynSyncMarkInfo.validate();
    }
    if (loversTrdSyncMarkInfo != null) {
      loversTrdSyncMarkInfo.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DanceSyncMarkInfoStandardSchemeFactory implements SchemeFactory {
    public DanceSyncMarkInfoStandardScheme getScheme() {
      return new DanceSyncMarkInfoStandardScheme();
    }
  }

  private static class DanceSyncMarkInfoStandardScheme extends StandardScheme<DanceSyncMarkInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DanceSyncMarkInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CHAR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.charId = iprot.readI64();
              struct.setCharIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // KEY_RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.keyResult = iprot.readByte();
              struct.setKeyResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMBOS
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.combos = iprot.readI16();
              struct.setCombosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MARK
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mark = iprot.readI32();
              struct.setMarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.index = iprot.readI16();
              struct.setIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LOVERS_DYN_SYNC_MARK_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.loversDynSyncMarkInfo = new LoversDynSyncMarkInfo();
              struct.loversDynSyncMarkInfo.read(iprot);
              struct.setLoversDynSyncMarkInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LOVERS_TRD_SYNC_MARK_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.loversTrdSyncMarkInfo = new LoversTrdSyncMarkInfo();
              struct.loversTrdSyncMarkInfo.read(iprot);
              struct.setLoversTrdSyncMarkInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CHEER_VAL_RATIO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cheerValRatio = iprot.readI32();
              struct.setCheerValRatioIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PERFECT_COMBOS
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.perfectCombos = iprot.readI16();
              struct.setPerfectCombosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DanceSyncMarkInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetCharId()) {
        oprot.writeFieldBegin(CHAR_ID_FIELD_DESC);
        oprot.writeI64(struct.charId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetKeyResult()) {
        oprot.writeFieldBegin(KEY_RESULT_FIELD_DESC);
        oprot.writeByte(struct.keyResult);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCombos()) {
        oprot.writeFieldBegin(COMBOS_FIELD_DESC);
        oprot.writeI16(struct.combos);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMark()) {
        oprot.writeFieldBegin(MARK_FIELD_DESC);
        oprot.writeI32(struct.mark);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIndex()) {
        oprot.writeFieldBegin(INDEX_FIELD_DESC);
        oprot.writeI16(struct.index);
        oprot.writeFieldEnd();
      }
      if (struct.loversDynSyncMarkInfo != null) {
        if (struct.isSetLoversDynSyncMarkInfo()) {
          oprot.writeFieldBegin(LOVERS_DYN_SYNC_MARK_INFO_FIELD_DESC);
          struct.loversDynSyncMarkInfo.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.loversTrdSyncMarkInfo != null) {
        if (struct.isSetLoversTrdSyncMarkInfo()) {
          oprot.writeFieldBegin(LOVERS_TRD_SYNC_MARK_INFO_FIELD_DESC);
          struct.loversTrdSyncMarkInfo.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCheerValRatio()) {
        oprot.writeFieldBegin(CHEER_VAL_RATIO_FIELD_DESC);
        oprot.writeI32(struct.cheerValRatio);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPerfectCombos()) {
        oprot.writeFieldBegin(PERFECT_COMBOS_FIELD_DESC);
        oprot.writeI16(struct.perfectCombos);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DanceSyncMarkInfoTupleSchemeFactory implements SchemeFactory {
    public DanceSyncMarkInfoTupleScheme getScheme() {
      return new DanceSyncMarkInfoTupleScheme();
    }
  }

  private static class DanceSyncMarkInfoTupleScheme extends TupleScheme<DanceSyncMarkInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DanceSyncMarkInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCharId()) {
        optionals.set(0);
      }
      if (struct.isSetKeyResult()) {
        optionals.set(1);
      }
      if (struct.isSetCombos()) {
        optionals.set(2);
      }
      if (struct.isSetMark()) {
        optionals.set(3);
      }
      if (struct.isSetIndex()) {
        optionals.set(4);
      }
      if (struct.isSetLoversDynSyncMarkInfo()) {
        optionals.set(5);
      }
      if (struct.isSetLoversTrdSyncMarkInfo()) {
        optionals.set(6);
      }
      if (struct.isSetCheerValRatio()) {
        optionals.set(7);
      }
      if (struct.isSetPerfectCombos()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetCharId()) {
        oprot.writeI64(struct.charId);
      }
      if (struct.isSetKeyResult()) {
        oprot.writeByte(struct.keyResult);
      }
      if (struct.isSetCombos()) {
        oprot.writeI16(struct.combos);
      }
      if (struct.isSetMark()) {
        oprot.writeI32(struct.mark);
      }
      if (struct.isSetIndex()) {
        oprot.writeI16(struct.index);
      }
      if (struct.isSetLoversDynSyncMarkInfo()) {
        struct.loversDynSyncMarkInfo.write(oprot);
      }
      if (struct.isSetLoversTrdSyncMarkInfo()) {
        struct.loversTrdSyncMarkInfo.write(oprot);
      }
      if (struct.isSetCheerValRatio()) {
        oprot.writeI32(struct.cheerValRatio);
      }
      if (struct.isSetPerfectCombos()) {
        oprot.writeI16(struct.perfectCombos);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DanceSyncMarkInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.charId = iprot.readI64();
        struct.setCharIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.keyResult = iprot.readByte();
        struct.setKeyResultIsSet(true);
      }
      if (incoming.get(2)) {
        struct.combos = iprot.readI16();
        struct.setCombosIsSet(true);
      }
      if (incoming.get(3)) {
        struct.mark = iprot.readI32();
        struct.setMarkIsSet(true);
      }
      if (incoming.get(4)) {
        struct.index = iprot.readI16();
        struct.setIndexIsSet(true);
      }
      if (incoming.get(5)) {
        struct.loversDynSyncMarkInfo = new LoversDynSyncMarkInfo();
        struct.loversDynSyncMarkInfo.read(iprot);
        struct.setLoversDynSyncMarkInfoIsSet(true);
      }
      if (incoming.get(6)) {
        struct.loversTrdSyncMarkInfo = new LoversTrdSyncMarkInfo();
        struct.loversTrdSyncMarkInfo.read(iprot);
        struct.setLoversTrdSyncMarkInfoIsSet(true);
      }
      if (incoming.get(7)) {
        struct.cheerValRatio = iprot.readI32();
        struct.setCheerValRatioIsSet(true);
      }
      if (incoming.get(8)) {
        struct.perfectCombos = iprot.readI16();
        struct.setPerfectCombosIsSet(true);
      }
    }
  }

}

