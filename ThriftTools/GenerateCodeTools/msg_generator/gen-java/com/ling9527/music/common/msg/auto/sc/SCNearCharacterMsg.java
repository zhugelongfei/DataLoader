/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SCNearCharacterMsg implements org.apache.thrift.TBase<SCNearCharacterMsg, SCNearCharacterMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCNearCharacterMsg");

  private static final org.apache.thrift.protocol.TField CARD_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("cardInfos", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField NEED_CLIENT_SORT_FIELD_DESC = new org.apache.thrift.protocol.TField("needClientSort", org.apache.thrift.protocol.TType.BOOL, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCNearCharacterMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCNearCharacterMsgTupleSchemeFactory());
  }

  public List<com.ling9527.music.common.msg.auto.SimpleBusinessCardInfo> cardInfos; // required
  /**
   * 是否需要客户端进行排序
   */
  public boolean needClientSort; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CARD_INFOS((short)1, "cardInfos"),
    /**
     * 是否需要客户端进行排序
     */
    NEED_CLIENT_SORT((short)2, "needClientSort");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CARD_INFOS
          return CARD_INFOS;
        case 2: // NEED_CLIENT_SORT
          return NEED_CLIENT_SORT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NEEDCLIENTSORT_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CARD_INFOS, new org.apache.thrift.meta_data.FieldMetaData("cardInfos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.SimpleBusinessCardInfo.class))));
    tmpMap.put(_Fields.NEED_CLIENT_SORT, new org.apache.thrift.meta_data.FieldMetaData("needClientSort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCNearCharacterMsg.class, metaDataMap);
  }

  public SCNearCharacterMsg() {
  }

  public SCNearCharacterMsg(
    List<com.ling9527.music.common.msg.auto.SimpleBusinessCardInfo> cardInfos,
    boolean needClientSort)
  {
    this();
    this.cardInfos = cardInfos;
    this.needClientSort = needClientSort;
    setNeedClientSortIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCNearCharacterMsg(SCNearCharacterMsg other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCardInfos()) {
      List<com.ling9527.music.common.msg.auto.SimpleBusinessCardInfo> __this__cardInfos = new ArrayList<com.ling9527.music.common.msg.auto.SimpleBusinessCardInfo>();
      for (com.ling9527.music.common.msg.auto.SimpleBusinessCardInfo other_element : other.cardInfos) {
        __this__cardInfos.add(new com.ling9527.music.common.msg.auto.SimpleBusinessCardInfo(other_element));
      }
      this.cardInfos = __this__cardInfos;
    }
    this.needClientSort = other.needClientSort;
  }

  public SCNearCharacterMsg deepCopy() {
    return new SCNearCharacterMsg(this);
  }

  @Override
  public void clear() {
    this.cardInfos = null;
    setNeedClientSortIsSet(false);
    this.needClientSort = false;
  }

  public int getCardInfosSize() {
    return (this.cardInfos == null) ? 0 : this.cardInfos.size();
  }

  public java.util.Iterator<com.ling9527.music.common.msg.auto.SimpleBusinessCardInfo> getCardInfosIterator() {
    return (this.cardInfos == null) ? null : this.cardInfos.iterator();
  }

  public void addToCardInfos(com.ling9527.music.common.msg.auto.SimpleBusinessCardInfo elem) {
    if (this.cardInfos == null) {
      this.cardInfos = new ArrayList<com.ling9527.music.common.msg.auto.SimpleBusinessCardInfo>();
    }
    this.cardInfos.add(elem);
  }

  public List<com.ling9527.music.common.msg.auto.SimpleBusinessCardInfo> getCardInfos() {
    return this.cardInfos;
  }

  public SCNearCharacterMsg setCardInfos(List<com.ling9527.music.common.msg.auto.SimpleBusinessCardInfo> cardInfos) {
    this.cardInfos = cardInfos;
    return this;
  }

  public void unsetCardInfos() {
    this.cardInfos = null;
  }

  /** Returns true if field cardInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetCardInfos() {
    return this.cardInfos != null;
  }

  public void setCardInfosIsSet(boolean value) {
    if (!value) {
      this.cardInfos = null;
    }
  }

  /**
   * 是否需要客户端进行排序
   */
  public boolean isNeedClientSort() {
    return this.needClientSort;
  }

  /**
   * 是否需要客户端进行排序
   */
  public SCNearCharacterMsg setNeedClientSort(boolean needClientSort) {
    this.needClientSort = needClientSort;
    setNeedClientSortIsSet(true);
    return this;
  }

  public void unsetNeedClientSort() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEEDCLIENTSORT_ISSET_ID);
  }

  /** Returns true if field needClientSort is set (has been assigned a value) and false otherwise */
  public boolean isSetNeedClientSort() {
    return EncodingUtils.testBit(__isset_bitfield, __NEEDCLIENTSORT_ISSET_ID);
  }

  public void setNeedClientSortIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEEDCLIENTSORT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CARD_INFOS:
      if (value == null) {
        unsetCardInfos();
      } else {
        setCardInfos((List<com.ling9527.music.common.msg.auto.SimpleBusinessCardInfo>)value);
      }
      break;

    case NEED_CLIENT_SORT:
      if (value == null) {
        unsetNeedClientSort();
      } else {
        setNeedClientSort((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CARD_INFOS:
      return getCardInfos();

    case NEED_CLIENT_SORT:
      return Boolean.valueOf(isNeedClientSort());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CARD_INFOS:
      return isSetCardInfos();
    case NEED_CLIENT_SORT:
      return isSetNeedClientSort();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCNearCharacterMsg)
      return this.equals((SCNearCharacterMsg)that);
    return false;
  }

  public boolean equals(SCNearCharacterMsg that) {
    if (that == null)
      return false;

    boolean this_present_cardInfos = true && this.isSetCardInfos();
    boolean that_present_cardInfos = true && that.isSetCardInfos();
    if (this_present_cardInfos || that_present_cardInfos) {
      if (!(this_present_cardInfos && that_present_cardInfos))
        return false;
      if (!this.cardInfos.equals(that.cardInfos))
        return false;
    }

    boolean this_present_needClientSort = true;
    boolean that_present_needClientSort = true;
    if (this_present_needClientSort || that_present_needClientSort) {
      if (!(this_present_needClientSort && that_present_needClientSort))
        return false;
      if (this.needClientSort != that.needClientSort)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCNearCharacterMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCNearCharacterMsg typedOther = (SCNearCharacterMsg)other;

    lastComparison = Boolean.valueOf(isSetCardInfos()).compareTo(typedOther.isSetCardInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCardInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cardInfos, typedOther.cardInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNeedClientSort()).compareTo(typedOther.isSetNeedClientSort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNeedClientSort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.needClientSort, typedOther.needClientSort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCNearCharacterMsg(");
    boolean first = true;

    sb.append("cardInfos:");
    if (this.cardInfos == null) {
      sb.append("null");
    } else {
      sb.append(this.cardInfos);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("needClientSort:");
    sb.append(this.needClientSort);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCNearCharacterMsgStandardSchemeFactory implements SchemeFactory {
    public SCNearCharacterMsgStandardScheme getScheme() {
      return new SCNearCharacterMsgStandardScheme();
    }
  }

  private static class SCNearCharacterMsgStandardScheme extends StandardScheme<SCNearCharacterMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCNearCharacterMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CARD_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list88 = iprot.readListBegin();
                struct.cardInfos = new ArrayList<com.ling9527.music.common.msg.auto.SimpleBusinessCardInfo>(_list88.size);
                for (int _i89 = 0; _i89 < _list88.size; ++_i89)
                {
                  com.ling9527.music.common.msg.auto.SimpleBusinessCardInfo _elem90; // required
                  _elem90 = new com.ling9527.music.common.msg.auto.SimpleBusinessCardInfo();
                  _elem90.read(iprot);
                  struct.cardInfos.add(_elem90);
                }
                iprot.readListEnd();
              }
              struct.setCardInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NEED_CLIENT_SORT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.needClientSort = iprot.readBool();
              struct.setNeedClientSortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCNearCharacterMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.cardInfos != null) {
        oprot.writeFieldBegin(CARD_INFOS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.cardInfos.size()));
          for (com.ling9527.music.common.msg.auto.SimpleBusinessCardInfo _iter91 : struct.cardInfos)
          {
            _iter91.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NEED_CLIENT_SORT_FIELD_DESC);
      oprot.writeBool(struct.needClientSort);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCNearCharacterMsgTupleSchemeFactory implements SchemeFactory {
    public SCNearCharacterMsgTupleScheme getScheme() {
      return new SCNearCharacterMsgTupleScheme();
    }
  }

  private static class SCNearCharacterMsgTupleScheme extends TupleScheme<SCNearCharacterMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCNearCharacterMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCardInfos()) {
        optionals.set(0);
      }
      if (struct.isSetNeedClientSort()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetCardInfos()) {
        {
          oprot.writeI32(struct.cardInfos.size());
          for (com.ling9527.music.common.msg.auto.SimpleBusinessCardInfo _iter92 : struct.cardInfos)
          {
            _iter92.write(oprot);
          }
        }
      }
      if (struct.isSetNeedClientSort()) {
        oprot.writeBool(struct.needClientSort);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCNearCharacterMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list93 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.cardInfos = new ArrayList<com.ling9527.music.common.msg.auto.SimpleBusinessCardInfo>(_list93.size);
          for (int _i94 = 0; _i94 < _list93.size; ++_i94)
          {
            com.ling9527.music.common.msg.auto.SimpleBusinessCardInfo _elem95; // required
            _elem95 = new com.ling9527.music.common.msg.auto.SimpleBusinessCardInfo();
            _elem95.read(iprot);
            struct.cardInfos.add(_elem95);
          }
        }
        struct.setCardInfosIsSet(true);
      }
      if (incoming.get(1)) {
        struct.needClientSort = iprot.readBool();
        struct.setNeedClientSortIsSet(true);
      }
    }
  }

}

