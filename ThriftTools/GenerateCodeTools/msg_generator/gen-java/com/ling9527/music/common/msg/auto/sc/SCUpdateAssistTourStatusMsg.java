/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 更新协助巡演状态
 */
public class SCUpdateAssistTourStatusMsg implements org.apache.thrift.TBase<SCUpdateAssistTourStatusMsg, SCUpdateAssistTourStatusMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCUpdateAssistTourStatusMsg");

  private static final org.apache.thrift.protocol.TField UPDATE_ASSIST_STATUSS_FIELD_DESC = new org.apache.thrift.protocol.TField("updateAssistStatuss", org.apache.thrift.protocol.TType.MAP, (short)1);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCUpdateAssistTourStatusMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCUpdateAssistTourStatusMsgTupleSchemeFactory());
  }

  public Map<Long,Byte> updateAssistStatuss; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UPDATE_ASSIST_STATUSS((short)1, "updateAssistStatuss");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UPDATE_ASSIST_STATUSS
          return UPDATE_ASSIST_STATUSS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UPDATE_ASSIST_STATUSS, new org.apache.thrift.meta_data.FieldMetaData("updateAssistStatuss", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCUpdateAssistTourStatusMsg.class, metaDataMap);
  }

  public SCUpdateAssistTourStatusMsg() {
  }

  public SCUpdateAssistTourStatusMsg(
    Map<Long,Byte> updateAssistStatuss)
  {
    this();
    this.updateAssistStatuss = updateAssistStatuss;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCUpdateAssistTourStatusMsg(SCUpdateAssistTourStatusMsg other) {
    if (other.isSetUpdateAssistStatuss()) {
      Map<Long,Byte> __this__updateAssistStatuss = new HashMap<Long,Byte>();
      for (Map.Entry<Long, Byte> other_element : other.updateAssistStatuss.entrySet()) {

        Long other_element_key = other_element.getKey();
        Byte other_element_value = other_element.getValue();

        Long __this__updateAssistStatuss_copy_key = other_element_key;

        Byte __this__updateAssistStatuss_copy_value = other_element_value;

        __this__updateAssistStatuss.put(__this__updateAssistStatuss_copy_key, __this__updateAssistStatuss_copy_value);
      }
      this.updateAssistStatuss = __this__updateAssistStatuss;
    }
  }

  public SCUpdateAssistTourStatusMsg deepCopy() {
    return new SCUpdateAssistTourStatusMsg(this);
  }

  @Override
  public void clear() {
    this.updateAssistStatuss = null;
  }

  public int getUpdateAssistStatussSize() {
    return (this.updateAssistStatuss == null) ? 0 : this.updateAssistStatuss.size();
  }

  public void putToUpdateAssistStatuss(long key, byte val) {
    if (this.updateAssistStatuss == null) {
      this.updateAssistStatuss = new HashMap<Long,Byte>();
    }
    this.updateAssistStatuss.put(key, val);
  }

  public Map<Long,Byte> getUpdateAssistStatuss() {
    return this.updateAssistStatuss;
  }

  public SCUpdateAssistTourStatusMsg setUpdateAssistStatuss(Map<Long,Byte> updateAssistStatuss) {
    this.updateAssistStatuss = updateAssistStatuss;
    return this;
  }

  public void unsetUpdateAssistStatuss() {
    this.updateAssistStatuss = null;
  }

  /** Returns true if field updateAssistStatuss is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateAssistStatuss() {
    return this.updateAssistStatuss != null;
  }

  public void setUpdateAssistStatussIsSet(boolean value) {
    if (!value) {
      this.updateAssistStatuss = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case UPDATE_ASSIST_STATUSS:
      if (value == null) {
        unsetUpdateAssistStatuss();
      } else {
        setUpdateAssistStatuss((Map<Long,Byte>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case UPDATE_ASSIST_STATUSS:
      return getUpdateAssistStatuss();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case UPDATE_ASSIST_STATUSS:
      return isSetUpdateAssistStatuss();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCUpdateAssistTourStatusMsg)
      return this.equals((SCUpdateAssistTourStatusMsg)that);
    return false;
  }

  public boolean equals(SCUpdateAssistTourStatusMsg that) {
    if (that == null)
      return false;

    boolean this_present_updateAssistStatuss = true && this.isSetUpdateAssistStatuss();
    boolean that_present_updateAssistStatuss = true && that.isSetUpdateAssistStatuss();
    if (this_present_updateAssistStatuss || that_present_updateAssistStatuss) {
      if (!(this_present_updateAssistStatuss && that_present_updateAssistStatuss))
        return false;
      if (!this.updateAssistStatuss.equals(that.updateAssistStatuss))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCUpdateAssistTourStatusMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCUpdateAssistTourStatusMsg typedOther = (SCUpdateAssistTourStatusMsg)other;

    lastComparison = Boolean.valueOf(isSetUpdateAssistStatuss()).compareTo(typedOther.isSetUpdateAssistStatuss());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateAssistStatuss()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateAssistStatuss, typedOther.updateAssistStatuss);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCUpdateAssistTourStatusMsg(");
    boolean first = true;

    sb.append("updateAssistStatuss:");
    if (this.updateAssistStatuss == null) {
      sb.append("null");
    } else {
      sb.append(this.updateAssistStatuss);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCUpdateAssistTourStatusMsgStandardSchemeFactory implements SchemeFactory {
    public SCUpdateAssistTourStatusMsgStandardScheme getScheme() {
      return new SCUpdateAssistTourStatusMsgStandardScheme();
    }
  }

  private static class SCUpdateAssistTourStatusMsgStandardScheme extends StandardScheme<SCUpdateAssistTourStatusMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCUpdateAssistTourStatusMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UPDATE_ASSIST_STATUSS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map80 = iprot.readMapBegin();
                struct.updateAssistStatuss = new HashMap<Long,Byte>(2*_map80.size);
                for (int _i81 = 0; _i81 < _map80.size; ++_i81)
                {
                  long _key82; // required
                  byte _val83; // required
                  _key82 = iprot.readI64();
                  _val83 = iprot.readByte();
                  struct.updateAssistStatuss.put(_key82, _val83);
                }
                iprot.readMapEnd();
              }
              struct.setUpdateAssistStatussIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCUpdateAssistTourStatusMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.updateAssistStatuss != null) {
        oprot.writeFieldBegin(UPDATE_ASSIST_STATUSS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.BYTE, struct.updateAssistStatuss.size()));
          for (Map.Entry<Long, Byte> _iter84 : struct.updateAssistStatuss.entrySet())
          {
            oprot.writeI64(_iter84.getKey());
            oprot.writeByte(_iter84.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCUpdateAssistTourStatusMsgTupleSchemeFactory implements SchemeFactory {
    public SCUpdateAssistTourStatusMsgTupleScheme getScheme() {
      return new SCUpdateAssistTourStatusMsgTupleScheme();
    }
  }

  private static class SCUpdateAssistTourStatusMsgTupleScheme extends TupleScheme<SCUpdateAssistTourStatusMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCUpdateAssistTourStatusMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUpdateAssistStatuss()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetUpdateAssistStatuss()) {
        {
          oprot.writeI32(struct.updateAssistStatuss.size());
          for (Map.Entry<Long, Byte> _iter85 : struct.updateAssistStatuss.entrySet())
          {
            oprot.writeI64(_iter85.getKey());
            oprot.writeByte(_iter85.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCUpdateAssistTourStatusMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map86 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.BYTE, iprot.readI32());
          struct.updateAssistStatuss = new HashMap<Long,Byte>(2*_map86.size);
          for (int _i87 = 0; _i87 < _map86.size; ++_i87)
          {
            long _key88; // required
            byte _val89; // required
            _key88 = iprot.readI64();
            _val89 = iprot.readByte();
            struct.updateAssistStatuss.put(_key88, _val89);
          }
        }
        struct.setUpdateAssistStatussIsSet(true);
      }
    }
  }

}

