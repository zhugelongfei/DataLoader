/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 更新温泉广场奖励信息
 */
public class SCUpdateSpringReward implements org.apache.thrift.TBase<SCUpdateSpringReward, SCUpdateSpringReward._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCUpdateSpringReward");

  private static final org.apache.thrift.protocol.TField REWARD_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("rewardExp", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField REWARD_SWEET_FIELD_DESC = new org.apache.thrift.protocol.TField("rewardSweet", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField REWARD_COIN_FIELD_DESC = new org.apache.thrift.protocol.TField("rewardCoin", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCUpdateSpringRewardStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCUpdateSpringRewardTupleSchemeFactory());
  }

  /**
   * 总共获得经验
   */
  public int rewardExp; // optional
  /**
   * 总共获得甜蜜值
   */
  public int rewardSweet; // optional
  /**
   * 总共获得金币
   */
  public int rewardCoin; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 总共获得经验
     */
    REWARD_EXP((short)1, "rewardExp"),
    /**
     * 总共获得甜蜜值
     */
    REWARD_SWEET((short)2, "rewardSweet"),
    /**
     * 总共获得金币
     */
    REWARD_COIN((short)3, "rewardCoin");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REWARD_EXP
          return REWARD_EXP;
        case 2: // REWARD_SWEET
          return REWARD_SWEET;
        case 3: // REWARD_COIN
          return REWARD_COIN;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __REWARDEXP_ISSET_ID = 0;
  private static final int __REWARDSWEET_ISSET_ID = 1;
  private static final int __REWARDCOIN_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.REWARD_EXP,_Fields.REWARD_SWEET,_Fields.REWARD_COIN};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REWARD_EXP, new org.apache.thrift.meta_data.FieldMetaData("rewardExp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REWARD_SWEET, new org.apache.thrift.meta_data.FieldMetaData("rewardSweet", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REWARD_COIN, new org.apache.thrift.meta_data.FieldMetaData("rewardCoin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCUpdateSpringReward.class, metaDataMap);
  }

  public SCUpdateSpringReward() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCUpdateSpringReward(SCUpdateSpringReward other) {
    __isset_bitfield = other.__isset_bitfield;
    this.rewardExp = other.rewardExp;
    this.rewardSweet = other.rewardSweet;
    this.rewardCoin = other.rewardCoin;
  }

  public SCUpdateSpringReward deepCopy() {
    return new SCUpdateSpringReward(this);
  }

  @Override
  public void clear() {
    setRewardExpIsSet(false);
    this.rewardExp = 0;
    setRewardSweetIsSet(false);
    this.rewardSweet = 0;
    setRewardCoinIsSet(false);
    this.rewardCoin = 0;
  }

  /**
   * 总共获得经验
   */
  public int getRewardExp() {
    return this.rewardExp;
  }

  /**
   * 总共获得经验
   */
  public SCUpdateSpringReward setRewardExp(int rewardExp) {
    this.rewardExp = rewardExp;
    setRewardExpIsSet(true);
    return this;
  }

  public void unsetRewardExp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REWARDEXP_ISSET_ID);
  }

  /** Returns true if field rewardExp is set (has been assigned a value) and false otherwise */
  public boolean isSetRewardExp() {
    return EncodingUtils.testBit(__isset_bitfield, __REWARDEXP_ISSET_ID);
  }

  public void setRewardExpIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REWARDEXP_ISSET_ID, value);
  }

  /**
   * 总共获得甜蜜值
   */
  public int getRewardSweet() {
    return this.rewardSweet;
  }

  /**
   * 总共获得甜蜜值
   */
  public SCUpdateSpringReward setRewardSweet(int rewardSweet) {
    this.rewardSweet = rewardSweet;
    setRewardSweetIsSet(true);
    return this;
  }

  public void unsetRewardSweet() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REWARDSWEET_ISSET_ID);
  }

  /** Returns true if field rewardSweet is set (has been assigned a value) and false otherwise */
  public boolean isSetRewardSweet() {
    return EncodingUtils.testBit(__isset_bitfield, __REWARDSWEET_ISSET_ID);
  }

  public void setRewardSweetIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REWARDSWEET_ISSET_ID, value);
  }

  /**
   * 总共获得金币
   */
  public int getRewardCoin() {
    return this.rewardCoin;
  }

  /**
   * 总共获得金币
   */
  public SCUpdateSpringReward setRewardCoin(int rewardCoin) {
    this.rewardCoin = rewardCoin;
    setRewardCoinIsSet(true);
    return this;
  }

  public void unsetRewardCoin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REWARDCOIN_ISSET_ID);
  }

  /** Returns true if field rewardCoin is set (has been assigned a value) and false otherwise */
  public boolean isSetRewardCoin() {
    return EncodingUtils.testBit(__isset_bitfield, __REWARDCOIN_ISSET_ID);
  }

  public void setRewardCoinIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REWARDCOIN_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case REWARD_EXP:
      if (value == null) {
        unsetRewardExp();
      } else {
        setRewardExp((Integer)value);
      }
      break;

    case REWARD_SWEET:
      if (value == null) {
        unsetRewardSweet();
      } else {
        setRewardSweet((Integer)value);
      }
      break;

    case REWARD_COIN:
      if (value == null) {
        unsetRewardCoin();
      } else {
        setRewardCoin((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case REWARD_EXP:
      return Integer.valueOf(getRewardExp());

    case REWARD_SWEET:
      return Integer.valueOf(getRewardSweet());

    case REWARD_COIN:
      return Integer.valueOf(getRewardCoin());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case REWARD_EXP:
      return isSetRewardExp();
    case REWARD_SWEET:
      return isSetRewardSweet();
    case REWARD_COIN:
      return isSetRewardCoin();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCUpdateSpringReward)
      return this.equals((SCUpdateSpringReward)that);
    return false;
  }

  public boolean equals(SCUpdateSpringReward that) {
    if (that == null)
      return false;

    boolean this_present_rewardExp = true && this.isSetRewardExp();
    boolean that_present_rewardExp = true && that.isSetRewardExp();
    if (this_present_rewardExp || that_present_rewardExp) {
      if (!(this_present_rewardExp && that_present_rewardExp))
        return false;
      if (this.rewardExp != that.rewardExp)
        return false;
    }

    boolean this_present_rewardSweet = true && this.isSetRewardSweet();
    boolean that_present_rewardSweet = true && that.isSetRewardSweet();
    if (this_present_rewardSweet || that_present_rewardSweet) {
      if (!(this_present_rewardSweet && that_present_rewardSweet))
        return false;
      if (this.rewardSweet != that.rewardSweet)
        return false;
    }

    boolean this_present_rewardCoin = true && this.isSetRewardCoin();
    boolean that_present_rewardCoin = true && that.isSetRewardCoin();
    if (this_present_rewardCoin || that_present_rewardCoin) {
      if (!(this_present_rewardCoin && that_present_rewardCoin))
        return false;
      if (this.rewardCoin != that.rewardCoin)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCUpdateSpringReward other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCUpdateSpringReward typedOther = (SCUpdateSpringReward)other;

    lastComparison = Boolean.valueOf(isSetRewardExp()).compareTo(typedOther.isSetRewardExp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRewardExp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rewardExp, typedOther.rewardExp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRewardSweet()).compareTo(typedOther.isSetRewardSweet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRewardSweet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rewardSweet, typedOther.rewardSweet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRewardCoin()).compareTo(typedOther.isSetRewardCoin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRewardCoin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rewardCoin, typedOther.rewardCoin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCUpdateSpringReward(");
    boolean first = true;

    if (isSetRewardExp()) {
      sb.append("rewardExp:");
      sb.append(this.rewardExp);
      first = false;
    }
    if (isSetRewardSweet()) {
      if (!first) sb.append(", ");
      sb.append("rewardSweet:");
      sb.append(this.rewardSweet);
      first = false;
    }
    if (isSetRewardCoin()) {
      if (!first) sb.append(", ");
      sb.append("rewardCoin:");
      sb.append(this.rewardCoin);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCUpdateSpringRewardStandardSchemeFactory implements SchemeFactory {
    public SCUpdateSpringRewardStandardScheme getScheme() {
      return new SCUpdateSpringRewardStandardScheme();
    }
  }

  private static class SCUpdateSpringRewardStandardScheme extends StandardScheme<SCUpdateSpringReward> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCUpdateSpringReward struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REWARD_EXP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rewardExp = iprot.readI32();
              struct.setRewardExpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REWARD_SWEET
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rewardSweet = iprot.readI32();
              struct.setRewardSweetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REWARD_COIN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rewardCoin = iprot.readI32();
              struct.setRewardCoinIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCUpdateSpringReward struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetRewardExp()) {
        oprot.writeFieldBegin(REWARD_EXP_FIELD_DESC);
        oprot.writeI32(struct.rewardExp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRewardSweet()) {
        oprot.writeFieldBegin(REWARD_SWEET_FIELD_DESC);
        oprot.writeI32(struct.rewardSweet);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRewardCoin()) {
        oprot.writeFieldBegin(REWARD_COIN_FIELD_DESC);
        oprot.writeI32(struct.rewardCoin);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCUpdateSpringRewardTupleSchemeFactory implements SchemeFactory {
    public SCUpdateSpringRewardTupleScheme getScheme() {
      return new SCUpdateSpringRewardTupleScheme();
    }
  }

  private static class SCUpdateSpringRewardTupleScheme extends TupleScheme<SCUpdateSpringReward> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCUpdateSpringReward struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRewardExp()) {
        optionals.set(0);
      }
      if (struct.isSetRewardSweet()) {
        optionals.set(1);
      }
      if (struct.isSetRewardCoin()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetRewardExp()) {
        oprot.writeI32(struct.rewardExp);
      }
      if (struct.isSetRewardSweet()) {
        oprot.writeI32(struct.rewardSweet);
      }
      if (struct.isSetRewardCoin()) {
        oprot.writeI32(struct.rewardCoin);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCUpdateSpringReward struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.rewardExp = iprot.readI32();
        struct.setRewardExpIsSet(true);
      }
      if (incoming.get(1)) {
        struct.rewardSweet = iprot.readI32();
        struct.setRewardSweetIsSet(true);
      }
      if (incoming.get(2)) {
        struct.rewardCoin = iprot.readI32();
        struct.setRewardCoinIsSet(true);
      }
    }
  }

}

