/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class BattleFinishInfo implements org.apache.thrift.TBase<BattleFinishInfo, BattleFinishInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BattleFinishInfo");

  private static final org.apache.thrift.protocol.TField MAX_PERFECT_COMBO_FIELD_DESC = new org.apache.thrift.protocol.TField("maxPerfectCombo", org.apache.thrift.protocol.TType.I16, (short)1);
  private static final org.apache.thrift.protocol.TField MAX_COMBO_FIELD_DESC = new org.apache.thrift.protocol.TField("maxCombo", org.apache.thrift.protocol.TType.I16, (short)2);
  private static final org.apache.thrift.protocol.TField PERFECT_FIELD_DESC = new org.apache.thrift.protocol.TField("perfect", org.apache.thrift.protocol.TType.I16, (short)3);
  private static final org.apache.thrift.protocol.TField GREAT_FIELD_DESC = new org.apache.thrift.protocol.TField("great", org.apache.thrift.protocol.TType.I16, (short)4);
  private static final org.apache.thrift.protocol.TField GOOD_FIELD_DESC = new org.apache.thrift.protocol.TField("good", org.apache.thrift.protocol.TType.I16, (short)5);
  private static final org.apache.thrift.protocol.TField MSS_FIELD_DESC = new org.apache.thrift.protocol.TField("mss", org.apache.thrift.protocol.TType.I16, (short)6);
  private static final org.apache.thrift.protocol.TField COUPON_FIELD_DESC = new org.apache.thrift.protocol.TField("coupon", org.apache.thrift.protocol.TType.I16, (short)7);
  private static final org.apache.thrift.protocol.TField TEAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("teams", org.apache.thrift.protocol.TType.LIST, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BattleFinishInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BattleFinishInfoTupleSchemeFactory());
  }

  public short maxPerfectCombo; // required
  public short maxCombo; // required
  public short perfect; // required
  public short great; // required
  public short good; // required
  public short mss; // required
  public short coupon; // required
  public List<BattleTeamResult> teams; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MAX_PERFECT_COMBO((short)1, "maxPerfectCombo"),
    MAX_COMBO((short)2, "maxCombo"),
    PERFECT((short)3, "perfect"),
    GREAT((short)4, "great"),
    GOOD((short)5, "good"),
    MSS((short)6, "mss"),
    COUPON((short)7, "coupon"),
    TEAMS((short)8, "teams");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MAX_PERFECT_COMBO
          return MAX_PERFECT_COMBO;
        case 2: // MAX_COMBO
          return MAX_COMBO;
        case 3: // PERFECT
          return PERFECT;
        case 4: // GREAT
          return GREAT;
        case 5: // GOOD
          return GOOD;
        case 6: // MSS
          return MSS;
        case 7: // COUPON
          return COUPON;
        case 8: // TEAMS
          return TEAMS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MAXPERFECTCOMBO_ISSET_ID = 0;
  private static final int __MAXCOMBO_ISSET_ID = 1;
  private static final int __PERFECT_ISSET_ID = 2;
  private static final int __GREAT_ISSET_ID = 3;
  private static final int __GOOD_ISSET_ID = 4;
  private static final int __MSS_ISSET_ID = 5;
  private static final int __COUPON_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MAX_PERFECT_COMBO, new org.apache.thrift.meta_data.FieldMetaData("maxPerfectCombo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.MAX_COMBO, new org.apache.thrift.meta_data.FieldMetaData("maxCombo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.PERFECT, new org.apache.thrift.meta_data.FieldMetaData("perfect", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.GREAT, new org.apache.thrift.meta_data.FieldMetaData("great", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.GOOD, new org.apache.thrift.meta_data.FieldMetaData("good", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.MSS, new org.apache.thrift.meta_data.FieldMetaData("mss", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.COUPON, new org.apache.thrift.meta_data.FieldMetaData("coupon", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.TEAMS, new org.apache.thrift.meta_data.FieldMetaData("teams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BattleTeamResult.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BattleFinishInfo.class, metaDataMap);
  }

  public BattleFinishInfo() {
  }

  public BattleFinishInfo(
    short maxPerfectCombo,
    short maxCombo,
    short perfect,
    short great,
    short good,
    short mss,
    short coupon,
    List<BattleTeamResult> teams)
  {
    this();
    this.maxPerfectCombo = maxPerfectCombo;
    setMaxPerfectComboIsSet(true);
    this.maxCombo = maxCombo;
    setMaxComboIsSet(true);
    this.perfect = perfect;
    setPerfectIsSet(true);
    this.great = great;
    setGreatIsSet(true);
    this.good = good;
    setGoodIsSet(true);
    this.mss = mss;
    setMssIsSet(true);
    this.coupon = coupon;
    setCouponIsSet(true);
    this.teams = teams;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BattleFinishInfo(BattleFinishInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.maxPerfectCombo = other.maxPerfectCombo;
    this.maxCombo = other.maxCombo;
    this.perfect = other.perfect;
    this.great = other.great;
    this.good = other.good;
    this.mss = other.mss;
    this.coupon = other.coupon;
    if (other.isSetTeams()) {
      List<BattleTeamResult> __this__teams = new ArrayList<BattleTeamResult>();
      for (BattleTeamResult other_element : other.teams) {
        __this__teams.add(new BattleTeamResult(other_element));
      }
      this.teams = __this__teams;
    }
  }

  public BattleFinishInfo deepCopy() {
    return new BattleFinishInfo(this);
  }

  @Override
  public void clear() {
    setMaxPerfectComboIsSet(false);
    this.maxPerfectCombo = 0;
    setMaxComboIsSet(false);
    this.maxCombo = 0;
    setPerfectIsSet(false);
    this.perfect = 0;
    setGreatIsSet(false);
    this.great = 0;
    setGoodIsSet(false);
    this.good = 0;
    setMssIsSet(false);
    this.mss = 0;
    setCouponIsSet(false);
    this.coupon = 0;
    this.teams = null;
  }

  public short getMaxPerfectCombo() {
    return this.maxPerfectCombo;
  }

  public BattleFinishInfo setMaxPerfectCombo(short maxPerfectCombo) {
    this.maxPerfectCombo = maxPerfectCombo;
    setMaxPerfectComboIsSet(true);
    return this;
  }

  public void unsetMaxPerfectCombo() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXPERFECTCOMBO_ISSET_ID);
  }

  /** Returns true if field maxPerfectCombo is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxPerfectCombo() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXPERFECTCOMBO_ISSET_ID);
  }

  public void setMaxPerfectComboIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXPERFECTCOMBO_ISSET_ID, value);
  }

  public short getMaxCombo() {
    return this.maxCombo;
  }

  public BattleFinishInfo setMaxCombo(short maxCombo) {
    this.maxCombo = maxCombo;
    setMaxComboIsSet(true);
    return this;
  }

  public void unsetMaxCombo() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXCOMBO_ISSET_ID);
  }

  /** Returns true if field maxCombo is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxCombo() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXCOMBO_ISSET_ID);
  }

  public void setMaxComboIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXCOMBO_ISSET_ID, value);
  }

  public short getPerfect() {
    return this.perfect;
  }

  public BattleFinishInfo setPerfect(short perfect) {
    this.perfect = perfect;
    setPerfectIsSet(true);
    return this;
  }

  public void unsetPerfect() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PERFECT_ISSET_ID);
  }

  /** Returns true if field perfect is set (has been assigned a value) and false otherwise */
  public boolean isSetPerfect() {
    return EncodingUtils.testBit(__isset_bitfield, __PERFECT_ISSET_ID);
  }

  public void setPerfectIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PERFECT_ISSET_ID, value);
  }

  public short getGreat() {
    return this.great;
  }

  public BattleFinishInfo setGreat(short great) {
    this.great = great;
    setGreatIsSet(true);
    return this;
  }

  public void unsetGreat() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GREAT_ISSET_ID);
  }

  /** Returns true if field great is set (has been assigned a value) and false otherwise */
  public boolean isSetGreat() {
    return EncodingUtils.testBit(__isset_bitfield, __GREAT_ISSET_ID);
  }

  public void setGreatIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GREAT_ISSET_ID, value);
  }

  public short getGood() {
    return this.good;
  }

  public BattleFinishInfo setGood(short good) {
    this.good = good;
    setGoodIsSet(true);
    return this;
  }

  public void unsetGood() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GOOD_ISSET_ID);
  }

  /** Returns true if field good is set (has been assigned a value) and false otherwise */
  public boolean isSetGood() {
    return EncodingUtils.testBit(__isset_bitfield, __GOOD_ISSET_ID);
  }

  public void setGoodIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GOOD_ISSET_ID, value);
  }

  public short getMss() {
    return this.mss;
  }

  public BattleFinishInfo setMss(short mss) {
    this.mss = mss;
    setMssIsSet(true);
    return this;
  }

  public void unsetMss() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MSS_ISSET_ID);
  }

  /** Returns true if field mss is set (has been assigned a value) and false otherwise */
  public boolean isSetMss() {
    return EncodingUtils.testBit(__isset_bitfield, __MSS_ISSET_ID);
  }

  public void setMssIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MSS_ISSET_ID, value);
  }

  public short getCoupon() {
    return this.coupon;
  }

  public BattleFinishInfo setCoupon(short coupon) {
    this.coupon = coupon;
    setCouponIsSet(true);
    return this;
  }

  public void unsetCoupon() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUPON_ISSET_ID);
  }

  /** Returns true if field coupon is set (has been assigned a value) and false otherwise */
  public boolean isSetCoupon() {
    return EncodingUtils.testBit(__isset_bitfield, __COUPON_ISSET_ID);
  }

  public void setCouponIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUPON_ISSET_ID, value);
  }

  public int getTeamsSize() {
    return (this.teams == null) ? 0 : this.teams.size();
  }

  public java.util.Iterator<BattleTeamResult> getTeamsIterator() {
    return (this.teams == null) ? null : this.teams.iterator();
  }

  public void addToTeams(BattleTeamResult elem) {
    if (this.teams == null) {
      this.teams = new ArrayList<BattleTeamResult>();
    }
    this.teams.add(elem);
  }

  public List<BattleTeamResult> getTeams() {
    return this.teams;
  }

  public BattleFinishInfo setTeams(List<BattleTeamResult> teams) {
    this.teams = teams;
    return this;
  }

  public void unsetTeams() {
    this.teams = null;
  }

  /** Returns true if field teams is set (has been assigned a value) and false otherwise */
  public boolean isSetTeams() {
    return this.teams != null;
  }

  public void setTeamsIsSet(boolean value) {
    if (!value) {
      this.teams = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MAX_PERFECT_COMBO:
      if (value == null) {
        unsetMaxPerfectCombo();
      } else {
        setMaxPerfectCombo((Short)value);
      }
      break;

    case MAX_COMBO:
      if (value == null) {
        unsetMaxCombo();
      } else {
        setMaxCombo((Short)value);
      }
      break;

    case PERFECT:
      if (value == null) {
        unsetPerfect();
      } else {
        setPerfect((Short)value);
      }
      break;

    case GREAT:
      if (value == null) {
        unsetGreat();
      } else {
        setGreat((Short)value);
      }
      break;

    case GOOD:
      if (value == null) {
        unsetGood();
      } else {
        setGood((Short)value);
      }
      break;

    case MSS:
      if (value == null) {
        unsetMss();
      } else {
        setMss((Short)value);
      }
      break;

    case COUPON:
      if (value == null) {
        unsetCoupon();
      } else {
        setCoupon((Short)value);
      }
      break;

    case TEAMS:
      if (value == null) {
        unsetTeams();
      } else {
        setTeams((List<BattleTeamResult>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MAX_PERFECT_COMBO:
      return Short.valueOf(getMaxPerfectCombo());

    case MAX_COMBO:
      return Short.valueOf(getMaxCombo());

    case PERFECT:
      return Short.valueOf(getPerfect());

    case GREAT:
      return Short.valueOf(getGreat());

    case GOOD:
      return Short.valueOf(getGood());

    case MSS:
      return Short.valueOf(getMss());

    case COUPON:
      return Short.valueOf(getCoupon());

    case TEAMS:
      return getTeams();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MAX_PERFECT_COMBO:
      return isSetMaxPerfectCombo();
    case MAX_COMBO:
      return isSetMaxCombo();
    case PERFECT:
      return isSetPerfect();
    case GREAT:
      return isSetGreat();
    case GOOD:
      return isSetGood();
    case MSS:
      return isSetMss();
    case COUPON:
      return isSetCoupon();
    case TEAMS:
      return isSetTeams();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BattleFinishInfo)
      return this.equals((BattleFinishInfo)that);
    return false;
  }

  public boolean equals(BattleFinishInfo that) {
    if (that == null)
      return false;

    boolean this_present_maxPerfectCombo = true;
    boolean that_present_maxPerfectCombo = true;
    if (this_present_maxPerfectCombo || that_present_maxPerfectCombo) {
      if (!(this_present_maxPerfectCombo && that_present_maxPerfectCombo))
        return false;
      if (this.maxPerfectCombo != that.maxPerfectCombo)
        return false;
    }

    boolean this_present_maxCombo = true;
    boolean that_present_maxCombo = true;
    if (this_present_maxCombo || that_present_maxCombo) {
      if (!(this_present_maxCombo && that_present_maxCombo))
        return false;
      if (this.maxCombo != that.maxCombo)
        return false;
    }

    boolean this_present_perfect = true;
    boolean that_present_perfect = true;
    if (this_present_perfect || that_present_perfect) {
      if (!(this_present_perfect && that_present_perfect))
        return false;
      if (this.perfect != that.perfect)
        return false;
    }

    boolean this_present_great = true;
    boolean that_present_great = true;
    if (this_present_great || that_present_great) {
      if (!(this_present_great && that_present_great))
        return false;
      if (this.great != that.great)
        return false;
    }

    boolean this_present_good = true;
    boolean that_present_good = true;
    if (this_present_good || that_present_good) {
      if (!(this_present_good && that_present_good))
        return false;
      if (this.good != that.good)
        return false;
    }

    boolean this_present_mss = true;
    boolean that_present_mss = true;
    if (this_present_mss || that_present_mss) {
      if (!(this_present_mss && that_present_mss))
        return false;
      if (this.mss != that.mss)
        return false;
    }

    boolean this_present_coupon = true;
    boolean that_present_coupon = true;
    if (this_present_coupon || that_present_coupon) {
      if (!(this_present_coupon && that_present_coupon))
        return false;
      if (this.coupon != that.coupon)
        return false;
    }

    boolean this_present_teams = true && this.isSetTeams();
    boolean that_present_teams = true && that.isSetTeams();
    if (this_present_teams || that_present_teams) {
      if (!(this_present_teams && that_present_teams))
        return false;
      if (!this.teams.equals(that.teams))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(BattleFinishInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    BattleFinishInfo typedOther = (BattleFinishInfo)other;

    lastComparison = Boolean.valueOf(isSetMaxPerfectCombo()).compareTo(typedOther.isSetMaxPerfectCombo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxPerfectCombo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxPerfectCombo, typedOther.maxPerfectCombo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxCombo()).compareTo(typedOther.isSetMaxCombo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxCombo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxCombo, typedOther.maxCombo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPerfect()).compareTo(typedOther.isSetPerfect());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPerfect()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.perfect, typedOther.perfect);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGreat()).compareTo(typedOther.isSetGreat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGreat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.great, typedOther.great);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGood()).compareTo(typedOther.isSetGood());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGood()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.good, typedOther.good);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMss()).compareTo(typedOther.isSetMss());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMss()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mss, typedOther.mss);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCoupon()).compareTo(typedOther.isSetCoupon());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCoupon()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coupon, typedOther.coupon);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeams()).compareTo(typedOther.isSetTeams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teams, typedOther.teams);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BattleFinishInfo(");
    boolean first = true;

    sb.append("maxPerfectCombo:");
    sb.append(this.maxPerfectCombo);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxCombo:");
    sb.append(this.maxCombo);
    first = false;
    if (!first) sb.append(", ");
    sb.append("perfect:");
    sb.append(this.perfect);
    first = false;
    if (!first) sb.append(", ");
    sb.append("great:");
    sb.append(this.great);
    first = false;
    if (!first) sb.append(", ");
    sb.append("good:");
    sb.append(this.good);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mss:");
    sb.append(this.mss);
    first = false;
    if (!first) sb.append(", ");
    sb.append("coupon:");
    sb.append(this.coupon);
    first = false;
    if (!first) sb.append(", ");
    sb.append("teams:");
    if (this.teams == null) {
      sb.append("null");
    } else {
      sb.append(this.teams);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BattleFinishInfoStandardSchemeFactory implements SchemeFactory {
    public BattleFinishInfoStandardScheme getScheme() {
      return new BattleFinishInfoStandardScheme();
    }
  }

  private static class BattleFinishInfoStandardScheme extends StandardScheme<BattleFinishInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BattleFinishInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MAX_PERFECT_COMBO
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.maxPerfectCombo = iprot.readI16();
              struct.setMaxPerfectComboIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MAX_COMBO
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.maxCombo = iprot.readI16();
              struct.setMaxComboIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PERFECT
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.perfect = iprot.readI16();
              struct.setPerfectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // GREAT
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.great = iprot.readI16();
              struct.setGreatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // GOOD
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.good = iprot.readI16();
              struct.setGoodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MSS
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.mss = iprot.readI16();
              struct.setMssIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // COUPON
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.coupon = iprot.readI16();
              struct.setCouponIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TEAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list90 = iprot.readListBegin();
                struct.teams = new ArrayList<BattleTeamResult>(_list90.size);
                for (int _i91 = 0; _i91 < _list90.size; ++_i91)
                {
                  BattleTeamResult _elem92; // required
                  _elem92 = new BattleTeamResult();
                  _elem92.read(iprot);
                  struct.teams.add(_elem92);
                }
                iprot.readListEnd();
              }
              struct.setTeamsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BattleFinishInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MAX_PERFECT_COMBO_FIELD_DESC);
      oprot.writeI16(struct.maxPerfectCombo);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_COMBO_FIELD_DESC);
      oprot.writeI16(struct.maxCombo);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PERFECT_FIELD_DESC);
      oprot.writeI16(struct.perfect);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GREAT_FIELD_DESC);
      oprot.writeI16(struct.great);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GOOD_FIELD_DESC);
      oprot.writeI16(struct.good);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MSS_FIELD_DESC);
      oprot.writeI16(struct.mss);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COUPON_FIELD_DESC);
      oprot.writeI16(struct.coupon);
      oprot.writeFieldEnd();
      if (struct.teams != null) {
        oprot.writeFieldBegin(TEAMS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.teams.size()));
          for (BattleTeamResult _iter93 : struct.teams)
          {
            _iter93.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BattleFinishInfoTupleSchemeFactory implements SchemeFactory {
    public BattleFinishInfoTupleScheme getScheme() {
      return new BattleFinishInfoTupleScheme();
    }
  }

  private static class BattleFinishInfoTupleScheme extends TupleScheme<BattleFinishInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BattleFinishInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMaxPerfectCombo()) {
        optionals.set(0);
      }
      if (struct.isSetMaxCombo()) {
        optionals.set(1);
      }
      if (struct.isSetPerfect()) {
        optionals.set(2);
      }
      if (struct.isSetGreat()) {
        optionals.set(3);
      }
      if (struct.isSetGood()) {
        optionals.set(4);
      }
      if (struct.isSetMss()) {
        optionals.set(5);
      }
      if (struct.isSetCoupon()) {
        optionals.set(6);
      }
      if (struct.isSetTeams()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetMaxPerfectCombo()) {
        oprot.writeI16(struct.maxPerfectCombo);
      }
      if (struct.isSetMaxCombo()) {
        oprot.writeI16(struct.maxCombo);
      }
      if (struct.isSetPerfect()) {
        oprot.writeI16(struct.perfect);
      }
      if (struct.isSetGreat()) {
        oprot.writeI16(struct.great);
      }
      if (struct.isSetGood()) {
        oprot.writeI16(struct.good);
      }
      if (struct.isSetMss()) {
        oprot.writeI16(struct.mss);
      }
      if (struct.isSetCoupon()) {
        oprot.writeI16(struct.coupon);
      }
      if (struct.isSetTeams()) {
        {
          oprot.writeI32(struct.teams.size());
          for (BattleTeamResult _iter94 : struct.teams)
          {
            _iter94.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BattleFinishInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.maxPerfectCombo = iprot.readI16();
        struct.setMaxPerfectComboIsSet(true);
      }
      if (incoming.get(1)) {
        struct.maxCombo = iprot.readI16();
        struct.setMaxComboIsSet(true);
      }
      if (incoming.get(2)) {
        struct.perfect = iprot.readI16();
        struct.setPerfectIsSet(true);
      }
      if (incoming.get(3)) {
        struct.great = iprot.readI16();
        struct.setGreatIsSet(true);
      }
      if (incoming.get(4)) {
        struct.good = iprot.readI16();
        struct.setGoodIsSet(true);
      }
      if (incoming.get(5)) {
        struct.mss = iprot.readI16();
        struct.setMssIsSet(true);
      }
      if (incoming.get(6)) {
        struct.coupon = iprot.readI16();
        struct.setCouponIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list95 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.teams = new ArrayList<BattleTeamResult>(_list95.size);
          for (int _i96 = 0; _i96 < _list95.size; ++_i96)
          {
            BattleTeamResult _elem97; // required
            _elem97 = new BattleTeamResult();
            _elem97.read(iprot);
            struct.teams.add(_elem97);
          }
        }
        struct.setTeamsIsSet(true);
      }
    }
  }

}

