/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 上排行榜的排名信息
 */
public class SCOnRankInfoMsg implements org.apache.thrift.TBase<SCOnRankInfoMsg, SCOnRankInfoMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCOnRankInfoMsg");

  private static final org.apache.thrift.protocol.TField CHAR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("charId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField ON_RANK_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("onRankInfos", org.apache.thrift.protocol.TType.MAP, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCOnRankInfoMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCOnRankInfoMsgTupleSchemeFactory());
  }

  public long charId; // required
  /**
   * 上榜信息<排行榜类型ERankingType，排名信息>
   */
  public Map<Byte,OnRankInfo> onRankInfos; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CHAR_ID((short)1, "charId"),
    /**
     * 上榜信息<排行榜类型ERankingType，排名信息>
     */
    ON_RANK_INFOS((short)2, "onRankInfos");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CHAR_ID
          return CHAR_ID;
        case 2: // ON_RANK_INFOS
          return ON_RANK_INFOS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CHARID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.ON_RANK_INFOS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CHAR_ID, new org.apache.thrift.meta_data.FieldMetaData("charId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ON_RANK_INFOS, new org.apache.thrift.meta_data.FieldMetaData("onRankInfos", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OnRankInfo.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCOnRankInfoMsg.class, metaDataMap);
  }

  public SCOnRankInfoMsg() {
  }

  public SCOnRankInfoMsg(
    long charId)
  {
    this();
    this.charId = charId;
    setCharIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCOnRankInfoMsg(SCOnRankInfoMsg other) {
    __isset_bitfield = other.__isset_bitfield;
    this.charId = other.charId;
    if (other.isSetOnRankInfos()) {
      Map<Byte,OnRankInfo> __this__onRankInfos = new HashMap<Byte,OnRankInfo>();
      for (Map.Entry<Byte, OnRankInfo> other_element : other.onRankInfos.entrySet()) {

        Byte other_element_key = other_element.getKey();
        OnRankInfo other_element_value = other_element.getValue();

        Byte __this__onRankInfos_copy_key = other_element_key;

        OnRankInfo __this__onRankInfos_copy_value = new OnRankInfo(other_element_value);

        __this__onRankInfos.put(__this__onRankInfos_copy_key, __this__onRankInfos_copy_value);
      }
      this.onRankInfos = __this__onRankInfos;
    }
  }

  public SCOnRankInfoMsg deepCopy() {
    return new SCOnRankInfoMsg(this);
  }

  @Override
  public void clear() {
    setCharIdIsSet(false);
    this.charId = 0;
    this.onRankInfos = null;
  }

  public long getCharId() {
    return this.charId;
  }

  public SCOnRankInfoMsg setCharId(long charId) {
    this.charId = charId;
    setCharIdIsSet(true);
    return this;
  }

  public void unsetCharId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHARID_ISSET_ID);
  }

  /** Returns true if field charId is set (has been assigned a value) and false otherwise */
  public boolean isSetCharId() {
    return EncodingUtils.testBit(__isset_bitfield, __CHARID_ISSET_ID);
  }

  public void setCharIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHARID_ISSET_ID, value);
  }

  public int getOnRankInfosSize() {
    return (this.onRankInfos == null) ? 0 : this.onRankInfos.size();
  }

  public void putToOnRankInfos(byte key, OnRankInfo val) {
    if (this.onRankInfos == null) {
      this.onRankInfos = new HashMap<Byte,OnRankInfo>();
    }
    this.onRankInfos.put(key, val);
  }

  /**
   * 上榜信息<排行榜类型ERankingType，排名信息>
   */
  public Map<Byte,OnRankInfo> getOnRankInfos() {
    return this.onRankInfos;
  }

  /**
   * 上榜信息<排行榜类型ERankingType，排名信息>
   */
  public SCOnRankInfoMsg setOnRankInfos(Map<Byte,OnRankInfo> onRankInfos) {
    this.onRankInfos = onRankInfos;
    return this;
  }

  public void unsetOnRankInfos() {
    this.onRankInfos = null;
  }

  /** Returns true if field onRankInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetOnRankInfos() {
    return this.onRankInfos != null;
  }

  public void setOnRankInfosIsSet(boolean value) {
    if (!value) {
      this.onRankInfos = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CHAR_ID:
      if (value == null) {
        unsetCharId();
      } else {
        setCharId((Long)value);
      }
      break;

    case ON_RANK_INFOS:
      if (value == null) {
        unsetOnRankInfos();
      } else {
        setOnRankInfos((Map<Byte,OnRankInfo>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CHAR_ID:
      return Long.valueOf(getCharId());

    case ON_RANK_INFOS:
      return getOnRankInfos();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CHAR_ID:
      return isSetCharId();
    case ON_RANK_INFOS:
      return isSetOnRankInfos();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCOnRankInfoMsg)
      return this.equals((SCOnRankInfoMsg)that);
    return false;
  }

  public boolean equals(SCOnRankInfoMsg that) {
    if (that == null)
      return false;

    boolean this_present_charId = true;
    boolean that_present_charId = true;
    if (this_present_charId || that_present_charId) {
      if (!(this_present_charId && that_present_charId))
        return false;
      if (this.charId != that.charId)
        return false;
    }

    boolean this_present_onRankInfos = true && this.isSetOnRankInfos();
    boolean that_present_onRankInfos = true && that.isSetOnRankInfos();
    if (this_present_onRankInfos || that_present_onRankInfos) {
      if (!(this_present_onRankInfos && that_present_onRankInfos))
        return false;
      if (!this.onRankInfos.equals(that.onRankInfos))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCOnRankInfoMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCOnRankInfoMsg typedOther = (SCOnRankInfoMsg)other;

    lastComparison = Boolean.valueOf(isSetCharId()).compareTo(typedOther.isSetCharId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCharId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.charId, typedOther.charId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOnRankInfos()).compareTo(typedOther.isSetOnRankInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOnRankInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.onRankInfos, typedOther.onRankInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCOnRankInfoMsg(");
    boolean first = true;

    sb.append("charId:");
    sb.append(this.charId);
    first = false;
    if (isSetOnRankInfos()) {
      if (!first) sb.append(", ");
      sb.append("onRankInfos:");
      if (this.onRankInfos == null) {
        sb.append("null");
      } else {
        sb.append(this.onRankInfos);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCOnRankInfoMsgStandardSchemeFactory implements SchemeFactory {
    public SCOnRankInfoMsgStandardScheme getScheme() {
      return new SCOnRankInfoMsgStandardScheme();
    }
  }

  private static class SCOnRankInfoMsgStandardScheme extends StandardScheme<SCOnRankInfoMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCOnRankInfoMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CHAR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.charId = iprot.readI64();
              struct.setCharIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ON_RANK_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map34 = iprot.readMapBegin();
                struct.onRankInfos = new HashMap<Byte,OnRankInfo>(2*_map34.size);
                for (int _i35 = 0; _i35 < _map34.size; ++_i35)
                {
                  byte _key36; // required
                  OnRankInfo _val37; // required
                  _key36 = iprot.readByte();
                  _val37 = new OnRankInfo();
                  _val37.read(iprot);
                  struct.onRankInfos.put(_key36, _val37);
                }
                iprot.readMapEnd();
              }
              struct.setOnRankInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCOnRankInfoMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CHAR_ID_FIELD_DESC);
      oprot.writeI64(struct.charId);
      oprot.writeFieldEnd();
      if (struct.onRankInfos != null) {
        if (struct.isSetOnRankInfos()) {
          oprot.writeFieldBegin(ON_RANK_INFOS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.BYTE, org.apache.thrift.protocol.TType.STRUCT, struct.onRankInfos.size()));
            for (Map.Entry<Byte, OnRankInfo> _iter38 : struct.onRankInfos.entrySet())
            {
              oprot.writeByte(_iter38.getKey());
              _iter38.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCOnRankInfoMsgTupleSchemeFactory implements SchemeFactory {
    public SCOnRankInfoMsgTupleScheme getScheme() {
      return new SCOnRankInfoMsgTupleScheme();
    }
  }

  private static class SCOnRankInfoMsgTupleScheme extends TupleScheme<SCOnRankInfoMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCOnRankInfoMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCharId()) {
        optionals.set(0);
      }
      if (struct.isSetOnRankInfos()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetCharId()) {
        oprot.writeI64(struct.charId);
      }
      if (struct.isSetOnRankInfos()) {
        {
          oprot.writeI32(struct.onRankInfos.size());
          for (Map.Entry<Byte, OnRankInfo> _iter39 : struct.onRankInfos.entrySet())
          {
            oprot.writeByte(_iter39.getKey());
            _iter39.getValue().write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCOnRankInfoMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.charId = iprot.readI64();
        struct.setCharIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map40 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.BYTE, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.onRankInfos = new HashMap<Byte,OnRankInfo>(2*_map40.size);
          for (int _i41 = 0; _i41 < _map40.size; ++_i41)
          {
            byte _key42; // required
            OnRankInfo _val43; // required
            _key42 = iprot.readByte();
            _val43 = new OnRankInfo();
            _val43.read(iprot);
            struct.onRankInfos.put(_key42, _val43);
          }
        }
        struct.setOnRankInfosIsSet(true);
      }
    }
  }

}

