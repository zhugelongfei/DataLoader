/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SCDanceMarkResultMsg implements org.apache.thrift.TBase<SCDanceMarkResultMsg, SCDanceMarkResultMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCDanceMarkResultMsg");

  private static final org.apache.thrift.protocol.TField MARKS_FIELD_DESC = new org.apache.thrift.protocol.TField("marks", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField COUPON_FIELD_DESC = new org.apache.thrift.protocol.TField("coupon", org.apache.thrift.protocol.TType.I16, (short)2);
  private static final org.apache.thrift.protocol.TField BATTLE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("battleInfo", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("exp", org.apache.thrift.protocol.TType.I16, (short)4);
  private static final org.apache.thrift.protocol.TField CUP_FIELD_DESC = new org.apache.thrift.protocol.TField("cup", org.apache.thrift.protocol.TType.I16, (short)5);
  private static final org.apache.thrift.protocol.TField APPEND_COUPON_FIELD_DESC = new org.apache.thrift.protocol.TField("appendCoupon", org.apache.thrift.protocol.TType.I16, (short)6);
  private static final org.apache.thrift.protocol.TField APPEND_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("appendExp", org.apache.thrift.protocol.TType.I16, (short)7);
  private static final org.apache.thrift.protocol.TField CARD_ITEM_PRIZES_FIELD_DESC = new org.apache.thrift.protocol.TField("cardItemPrizes", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField TOTAL_PERFECT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalPerfect", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField TOTAL_GREAT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalGreat", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField TOTAL_GOOD_FIELD_DESC = new org.apache.thrift.protocol.TField("totalGood", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField TOTAL_MISS_FIELD_DESC = new org.apache.thrift.protocol.TField("totalMiss", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField TOTAL_MARK_FIELD_DESC = new org.apache.thrift.protocol.TField("totalMark", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField TOTAL_MAX_PERFECT_COMBO_FIELD_DESC = new org.apache.thrift.protocol.TField("totalMaxPerfectCombo", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField TOTAL_MAX_COMBO_FIELD_DESC = new org.apache.thrift.protocol.TField("totalMaxCombo", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField TOTAL_MARK_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("totalMarkRate", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField TOTAL_MASTER_PERFECT_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("totalMasterPerfectRate", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField AVG_GRADE_FIELD_DESC = new org.apache.thrift.protocol.TField("avgGrade", org.apache.thrift.protocol.TType.BYTE, (short)18);
  private static final org.apache.thrift.protocol.TField TOTAL_STARS_FIELD_DESC = new org.apache.thrift.protocol.TField("totalStars", org.apache.thrift.protocol.TType.BYTE, (short)19);
  private static final org.apache.thrift.protocol.TField TOUR_DANCE_RESULT_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("tourDanceResultMsg", org.apache.thrift.protocol.TType.STRUCT, (short)20);
  private static final org.apache.thrift.protocol.TField ANNOUNCE_PASS_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("announcePassInfo", org.apache.thrift.protocol.TType.STRUCT, (short)22);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCDanceMarkResultMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCDanceMarkResultMsgTupleSchemeFactory());
  }

  /**
   * all dancer's rank
   */
  public List<com.ling9527.music.common.msg.auto.DanceMarkInfo> marks; // required
  public short coupon; // required
  public com.ling9527.music.common.msg.auto.BattleFinishInfo battleInfo; // required
  public short exp; // required
  public short cup; // required
  public short appendCoupon; // required
  public short appendExp; // required
  public List<com.ling9527.music.common.msg.auto.ItemPrize> cardItemPrizes; // required
  public int totalPerfect; // required
  public int totalGreat; // required
  public int totalGood; // required
  public int totalMiss; // required
  public int totalMark; // required
  public int totalMaxPerfectCombo; // required
  public int totalMaxCombo; // required
  public int totalMarkRate; // required
  public int totalMasterPerfectRate; // required
  public byte avgGrade; // required
  public byte totalStars; // required
  public com.ling9527.music.common.msg.auto.sc.TourDancePassResult tourDanceResultMsg; // optional
  public com.ling9527.music.common.msg.auto.sc.AnnouncePassInfo announcePassInfo; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * all dancer's rank
     */
    MARKS((short)1, "marks"),
    COUPON((short)2, "coupon"),
    BATTLE_INFO((short)3, "battleInfo"),
    EXP((short)4, "exp"),
    CUP((short)5, "cup"),
    APPEND_COUPON((short)6, "appendCoupon"),
    APPEND_EXP((short)7, "appendExp"),
    CARD_ITEM_PRIZES((short)8, "cardItemPrizes"),
    TOTAL_PERFECT((short)9, "totalPerfect"),
    TOTAL_GREAT((short)10, "totalGreat"),
    TOTAL_GOOD((short)11, "totalGood"),
    TOTAL_MISS((short)12, "totalMiss"),
    TOTAL_MARK((short)13, "totalMark"),
    TOTAL_MAX_PERFECT_COMBO((short)14, "totalMaxPerfectCombo"),
    TOTAL_MAX_COMBO((short)15, "totalMaxCombo"),
    TOTAL_MARK_RATE((short)16, "totalMarkRate"),
    TOTAL_MASTER_PERFECT_RATE((short)17, "totalMasterPerfectRate"),
    AVG_GRADE((short)18, "avgGrade"),
    TOTAL_STARS((short)19, "totalStars"),
    TOUR_DANCE_RESULT_MSG((short)20, "tourDanceResultMsg"),
    ANNOUNCE_PASS_INFO((short)22, "announcePassInfo");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MARKS
          return MARKS;
        case 2: // COUPON
          return COUPON;
        case 3: // BATTLE_INFO
          return BATTLE_INFO;
        case 4: // EXP
          return EXP;
        case 5: // CUP
          return CUP;
        case 6: // APPEND_COUPON
          return APPEND_COUPON;
        case 7: // APPEND_EXP
          return APPEND_EXP;
        case 8: // CARD_ITEM_PRIZES
          return CARD_ITEM_PRIZES;
        case 9: // TOTAL_PERFECT
          return TOTAL_PERFECT;
        case 10: // TOTAL_GREAT
          return TOTAL_GREAT;
        case 11: // TOTAL_GOOD
          return TOTAL_GOOD;
        case 12: // TOTAL_MISS
          return TOTAL_MISS;
        case 13: // TOTAL_MARK
          return TOTAL_MARK;
        case 14: // TOTAL_MAX_PERFECT_COMBO
          return TOTAL_MAX_PERFECT_COMBO;
        case 15: // TOTAL_MAX_COMBO
          return TOTAL_MAX_COMBO;
        case 16: // TOTAL_MARK_RATE
          return TOTAL_MARK_RATE;
        case 17: // TOTAL_MASTER_PERFECT_RATE
          return TOTAL_MASTER_PERFECT_RATE;
        case 18: // AVG_GRADE
          return AVG_GRADE;
        case 19: // TOTAL_STARS
          return TOTAL_STARS;
        case 20: // TOUR_DANCE_RESULT_MSG
          return TOUR_DANCE_RESULT_MSG;
        case 22: // ANNOUNCE_PASS_INFO
          return ANNOUNCE_PASS_INFO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COUPON_ISSET_ID = 0;
  private static final int __EXP_ISSET_ID = 1;
  private static final int __CUP_ISSET_ID = 2;
  private static final int __APPENDCOUPON_ISSET_ID = 3;
  private static final int __APPENDEXP_ISSET_ID = 4;
  private static final int __TOTALPERFECT_ISSET_ID = 5;
  private static final int __TOTALGREAT_ISSET_ID = 6;
  private static final int __TOTALGOOD_ISSET_ID = 7;
  private static final int __TOTALMISS_ISSET_ID = 8;
  private static final int __TOTALMARK_ISSET_ID = 9;
  private static final int __TOTALMAXPERFECTCOMBO_ISSET_ID = 10;
  private static final int __TOTALMAXCOMBO_ISSET_ID = 11;
  private static final int __TOTALMARKRATE_ISSET_ID = 12;
  private static final int __TOTALMASTERPERFECTRATE_ISSET_ID = 13;
  private static final int __AVGGRADE_ISSET_ID = 14;
  private static final int __TOTALSTARS_ISSET_ID = 15;
  private short __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.TOUR_DANCE_RESULT_MSG,_Fields.ANNOUNCE_PASS_INFO};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MARKS, new org.apache.thrift.meta_data.FieldMetaData("marks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.DanceMarkInfo.class))));
    tmpMap.put(_Fields.COUPON, new org.apache.thrift.meta_data.FieldMetaData("coupon", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.BATTLE_INFO, new org.apache.thrift.meta_data.FieldMetaData("battleInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.BattleFinishInfo.class)));
    tmpMap.put(_Fields.EXP, new org.apache.thrift.meta_data.FieldMetaData("exp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.CUP, new org.apache.thrift.meta_data.FieldMetaData("cup", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.APPEND_COUPON, new org.apache.thrift.meta_data.FieldMetaData("appendCoupon", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.APPEND_EXP, new org.apache.thrift.meta_data.FieldMetaData("appendExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.CARD_ITEM_PRIZES, new org.apache.thrift.meta_data.FieldMetaData("cardItemPrizes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.ItemPrize.class))));
    tmpMap.put(_Fields.TOTAL_PERFECT, new org.apache.thrift.meta_data.FieldMetaData("totalPerfect", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_GREAT, new org.apache.thrift.meta_data.FieldMetaData("totalGreat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_GOOD, new org.apache.thrift.meta_data.FieldMetaData("totalGood", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_MISS, new org.apache.thrift.meta_data.FieldMetaData("totalMiss", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_MARK, new org.apache.thrift.meta_data.FieldMetaData("totalMark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_MAX_PERFECT_COMBO, new org.apache.thrift.meta_data.FieldMetaData("totalMaxPerfectCombo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_MAX_COMBO, new org.apache.thrift.meta_data.FieldMetaData("totalMaxCombo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_MARK_RATE, new org.apache.thrift.meta_data.FieldMetaData("totalMarkRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_MASTER_PERFECT_RATE, new org.apache.thrift.meta_data.FieldMetaData("totalMasterPerfectRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AVG_GRADE, new org.apache.thrift.meta_data.FieldMetaData("avgGrade", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.TOTAL_STARS, new org.apache.thrift.meta_data.FieldMetaData("totalStars", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.TOUR_DANCE_RESULT_MSG, new org.apache.thrift.meta_data.FieldMetaData("tourDanceResultMsg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.sc.TourDancePassResult.class)));
    tmpMap.put(_Fields.ANNOUNCE_PASS_INFO, new org.apache.thrift.meta_data.FieldMetaData("announcePassInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.sc.AnnouncePassInfo.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCDanceMarkResultMsg.class, metaDataMap);
  }

  public SCDanceMarkResultMsg() {
  }

  public SCDanceMarkResultMsg(
    List<com.ling9527.music.common.msg.auto.DanceMarkInfo> marks,
    short coupon,
    com.ling9527.music.common.msg.auto.BattleFinishInfo battleInfo,
    short exp,
    short cup,
    short appendCoupon,
    short appendExp,
    List<com.ling9527.music.common.msg.auto.ItemPrize> cardItemPrizes,
    int totalPerfect,
    int totalGreat,
    int totalGood,
    int totalMiss,
    int totalMark,
    int totalMaxPerfectCombo,
    int totalMaxCombo,
    int totalMarkRate,
    int totalMasterPerfectRate,
    byte avgGrade,
    byte totalStars)
  {
    this();
    this.marks = marks;
    this.coupon = coupon;
    setCouponIsSet(true);
    this.battleInfo = battleInfo;
    this.exp = exp;
    setExpIsSet(true);
    this.cup = cup;
    setCupIsSet(true);
    this.appendCoupon = appendCoupon;
    setAppendCouponIsSet(true);
    this.appendExp = appendExp;
    setAppendExpIsSet(true);
    this.cardItemPrizes = cardItemPrizes;
    this.totalPerfect = totalPerfect;
    setTotalPerfectIsSet(true);
    this.totalGreat = totalGreat;
    setTotalGreatIsSet(true);
    this.totalGood = totalGood;
    setTotalGoodIsSet(true);
    this.totalMiss = totalMiss;
    setTotalMissIsSet(true);
    this.totalMark = totalMark;
    setTotalMarkIsSet(true);
    this.totalMaxPerfectCombo = totalMaxPerfectCombo;
    setTotalMaxPerfectComboIsSet(true);
    this.totalMaxCombo = totalMaxCombo;
    setTotalMaxComboIsSet(true);
    this.totalMarkRate = totalMarkRate;
    setTotalMarkRateIsSet(true);
    this.totalMasterPerfectRate = totalMasterPerfectRate;
    setTotalMasterPerfectRateIsSet(true);
    this.avgGrade = avgGrade;
    setAvgGradeIsSet(true);
    this.totalStars = totalStars;
    setTotalStarsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCDanceMarkResultMsg(SCDanceMarkResultMsg other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetMarks()) {
      List<com.ling9527.music.common.msg.auto.DanceMarkInfo> __this__marks = new ArrayList<com.ling9527.music.common.msg.auto.DanceMarkInfo>();
      for (com.ling9527.music.common.msg.auto.DanceMarkInfo other_element : other.marks) {
        __this__marks.add(new com.ling9527.music.common.msg.auto.DanceMarkInfo(other_element));
      }
      this.marks = __this__marks;
    }
    this.coupon = other.coupon;
    if (other.isSetBattleInfo()) {
      this.battleInfo = new com.ling9527.music.common.msg.auto.BattleFinishInfo(other.battleInfo);
    }
    this.exp = other.exp;
    this.cup = other.cup;
    this.appendCoupon = other.appendCoupon;
    this.appendExp = other.appendExp;
    if (other.isSetCardItemPrizes()) {
      List<com.ling9527.music.common.msg.auto.ItemPrize> __this__cardItemPrizes = new ArrayList<com.ling9527.music.common.msg.auto.ItemPrize>();
      for (com.ling9527.music.common.msg.auto.ItemPrize other_element : other.cardItemPrizes) {
        __this__cardItemPrizes.add(new com.ling9527.music.common.msg.auto.ItemPrize(other_element));
      }
      this.cardItemPrizes = __this__cardItemPrizes;
    }
    this.totalPerfect = other.totalPerfect;
    this.totalGreat = other.totalGreat;
    this.totalGood = other.totalGood;
    this.totalMiss = other.totalMiss;
    this.totalMark = other.totalMark;
    this.totalMaxPerfectCombo = other.totalMaxPerfectCombo;
    this.totalMaxCombo = other.totalMaxCombo;
    this.totalMarkRate = other.totalMarkRate;
    this.totalMasterPerfectRate = other.totalMasterPerfectRate;
    this.avgGrade = other.avgGrade;
    this.totalStars = other.totalStars;
    if (other.isSetTourDanceResultMsg()) {
      this.tourDanceResultMsg = new com.ling9527.music.common.msg.auto.sc.TourDancePassResult(other.tourDanceResultMsg);
    }
    if (other.isSetAnnouncePassInfo()) {
      this.announcePassInfo = new com.ling9527.music.common.msg.auto.sc.AnnouncePassInfo(other.announcePassInfo);
    }
  }

  public SCDanceMarkResultMsg deepCopy() {
    return new SCDanceMarkResultMsg(this);
  }

  @Override
  public void clear() {
    this.marks = null;
    setCouponIsSet(false);
    this.coupon = 0;
    this.battleInfo = null;
    setExpIsSet(false);
    this.exp = 0;
    setCupIsSet(false);
    this.cup = 0;
    setAppendCouponIsSet(false);
    this.appendCoupon = 0;
    setAppendExpIsSet(false);
    this.appendExp = 0;
    this.cardItemPrizes = null;
    setTotalPerfectIsSet(false);
    this.totalPerfect = 0;
    setTotalGreatIsSet(false);
    this.totalGreat = 0;
    setTotalGoodIsSet(false);
    this.totalGood = 0;
    setTotalMissIsSet(false);
    this.totalMiss = 0;
    setTotalMarkIsSet(false);
    this.totalMark = 0;
    setTotalMaxPerfectComboIsSet(false);
    this.totalMaxPerfectCombo = 0;
    setTotalMaxComboIsSet(false);
    this.totalMaxCombo = 0;
    setTotalMarkRateIsSet(false);
    this.totalMarkRate = 0;
    setTotalMasterPerfectRateIsSet(false);
    this.totalMasterPerfectRate = 0;
    setAvgGradeIsSet(false);
    this.avgGrade = 0;
    setTotalStarsIsSet(false);
    this.totalStars = 0;
    this.tourDanceResultMsg = null;
    this.announcePassInfo = null;
  }

  public int getMarksSize() {
    return (this.marks == null) ? 0 : this.marks.size();
  }

  public java.util.Iterator<com.ling9527.music.common.msg.auto.DanceMarkInfo> getMarksIterator() {
    return (this.marks == null) ? null : this.marks.iterator();
  }

  public void addToMarks(com.ling9527.music.common.msg.auto.DanceMarkInfo elem) {
    if (this.marks == null) {
      this.marks = new ArrayList<com.ling9527.music.common.msg.auto.DanceMarkInfo>();
    }
    this.marks.add(elem);
  }

  /**
   * all dancer's rank
   */
  public List<com.ling9527.music.common.msg.auto.DanceMarkInfo> getMarks() {
    return this.marks;
  }

  /**
   * all dancer's rank
   */
  public SCDanceMarkResultMsg setMarks(List<com.ling9527.music.common.msg.auto.DanceMarkInfo> marks) {
    this.marks = marks;
    return this;
  }

  public void unsetMarks() {
    this.marks = null;
  }

  /** Returns true if field marks is set (has been assigned a value) and false otherwise */
  public boolean isSetMarks() {
    return this.marks != null;
  }

  public void setMarksIsSet(boolean value) {
    if (!value) {
      this.marks = null;
    }
  }

  public short getCoupon() {
    return this.coupon;
  }

  public SCDanceMarkResultMsg setCoupon(short coupon) {
    this.coupon = coupon;
    setCouponIsSet(true);
    return this;
  }

  public void unsetCoupon() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUPON_ISSET_ID);
  }

  /** Returns true if field coupon is set (has been assigned a value) and false otherwise */
  public boolean isSetCoupon() {
    return EncodingUtils.testBit(__isset_bitfield, __COUPON_ISSET_ID);
  }

  public void setCouponIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUPON_ISSET_ID, value);
  }

  public com.ling9527.music.common.msg.auto.BattleFinishInfo getBattleInfo() {
    return this.battleInfo;
  }

  public SCDanceMarkResultMsg setBattleInfo(com.ling9527.music.common.msg.auto.BattleFinishInfo battleInfo) {
    this.battleInfo = battleInfo;
    return this;
  }

  public void unsetBattleInfo() {
    this.battleInfo = null;
  }

  /** Returns true if field battleInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetBattleInfo() {
    return this.battleInfo != null;
  }

  public void setBattleInfoIsSet(boolean value) {
    if (!value) {
      this.battleInfo = null;
    }
  }

  public short getExp() {
    return this.exp;
  }

  public SCDanceMarkResultMsg setExp(short exp) {
    this.exp = exp;
    setExpIsSet(true);
    return this;
  }

  public void unsetExp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXP_ISSET_ID);
  }

  /** Returns true if field exp is set (has been assigned a value) and false otherwise */
  public boolean isSetExp() {
    return EncodingUtils.testBit(__isset_bitfield, __EXP_ISSET_ID);
  }

  public void setExpIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXP_ISSET_ID, value);
  }

  public short getCup() {
    return this.cup;
  }

  public SCDanceMarkResultMsg setCup(short cup) {
    this.cup = cup;
    setCupIsSet(true);
    return this;
  }

  public void unsetCup() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CUP_ISSET_ID);
  }

  /** Returns true if field cup is set (has been assigned a value) and false otherwise */
  public boolean isSetCup() {
    return EncodingUtils.testBit(__isset_bitfield, __CUP_ISSET_ID);
  }

  public void setCupIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CUP_ISSET_ID, value);
  }

  public short getAppendCoupon() {
    return this.appendCoupon;
  }

  public SCDanceMarkResultMsg setAppendCoupon(short appendCoupon) {
    this.appendCoupon = appendCoupon;
    setAppendCouponIsSet(true);
    return this;
  }

  public void unsetAppendCoupon() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPENDCOUPON_ISSET_ID);
  }

  /** Returns true if field appendCoupon is set (has been assigned a value) and false otherwise */
  public boolean isSetAppendCoupon() {
    return EncodingUtils.testBit(__isset_bitfield, __APPENDCOUPON_ISSET_ID);
  }

  public void setAppendCouponIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPENDCOUPON_ISSET_ID, value);
  }

  public short getAppendExp() {
    return this.appendExp;
  }

  public SCDanceMarkResultMsg setAppendExp(short appendExp) {
    this.appendExp = appendExp;
    setAppendExpIsSet(true);
    return this;
  }

  public void unsetAppendExp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPENDEXP_ISSET_ID);
  }

  /** Returns true if field appendExp is set (has been assigned a value) and false otherwise */
  public boolean isSetAppendExp() {
    return EncodingUtils.testBit(__isset_bitfield, __APPENDEXP_ISSET_ID);
  }

  public void setAppendExpIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPENDEXP_ISSET_ID, value);
  }

  public int getCardItemPrizesSize() {
    return (this.cardItemPrizes == null) ? 0 : this.cardItemPrizes.size();
  }

  public java.util.Iterator<com.ling9527.music.common.msg.auto.ItemPrize> getCardItemPrizesIterator() {
    return (this.cardItemPrizes == null) ? null : this.cardItemPrizes.iterator();
  }

  public void addToCardItemPrizes(com.ling9527.music.common.msg.auto.ItemPrize elem) {
    if (this.cardItemPrizes == null) {
      this.cardItemPrizes = new ArrayList<com.ling9527.music.common.msg.auto.ItemPrize>();
    }
    this.cardItemPrizes.add(elem);
  }

  public List<com.ling9527.music.common.msg.auto.ItemPrize> getCardItemPrizes() {
    return this.cardItemPrizes;
  }

  public SCDanceMarkResultMsg setCardItemPrizes(List<com.ling9527.music.common.msg.auto.ItemPrize> cardItemPrizes) {
    this.cardItemPrizes = cardItemPrizes;
    return this;
  }

  public void unsetCardItemPrizes() {
    this.cardItemPrizes = null;
  }

  /** Returns true if field cardItemPrizes is set (has been assigned a value) and false otherwise */
  public boolean isSetCardItemPrizes() {
    return this.cardItemPrizes != null;
  }

  public void setCardItemPrizesIsSet(boolean value) {
    if (!value) {
      this.cardItemPrizes = null;
    }
  }

  public int getTotalPerfect() {
    return this.totalPerfect;
  }

  public SCDanceMarkResultMsg setTotalPerfect(int totalPerfect) {
    this.totalPerfect = totalPerfect;
    setTotalPerfectIsSet(true);
    return this;
  }

  public void unsetTotalPerfect() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALPERFECT_ISSET_ID);
  }

  /** Returns true if field totalPerfect is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalPerfect() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALPERFECT_ISSET_ID);
  }

  public void setTotalPerfectIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALPERFECT_ISSET_ID, value);
  }

  public int getTotalGreat() {
    return this.totalGreat;
  }

  public SCDanceMarkResultMsg setTotalGreat(int totalGreat) {
    this.totalGreat = totalGreat;
    setTotalGreatIsSet(true);
    return this;
  }

  public void unsetTotalGreat() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALGREAT_ISSET_ID);
  }

  /** Returns true if field totalGreat is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalGreat() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALGREAT_ISSET_ID);
  }

  public void setTotalGreatIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALGREAT_ISSET_ID, value);
  }

  public int getTotalGood() {
    return this.totalGood;
  }

  public SCDanceMarkResultMsg setTotalGood(int totalGood) {
    this.totalGood = totalGood;
    setTotalGoodIsSet(true);
    return this;
  }

  public void unsetTotalGood() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALGOOD_ISSET_ID);
  }

  /** Returns true if field totalGood is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalGood() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALGOOD_ISSET_ID);
  }

  public void setTotalGoodIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALGOOD_ISSET_ID, value);
  }

  public int getTotalMiss() {
    return this.totalMiss;
  }

  public SCDanceMarkResultMsg setTotalMiss(int totalMiss) {
    this.totalMiss = totalMiss;
    setTotalMissIsSet(true);
    return this;
  }

  public void unsetTotalMiss() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALMISS_ISSET_ID);
  }

  /** Returns true if field totalMiss is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalMiss() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALMISS_ISSET_ID);
  }

  public void setTotalMissIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALMISS_ISSET_ID, value);
  }

  public int getTotalMark() {
    return this.totalMark;
  }

  public SCDanceMarkResultMsg setTotalMark(int totalMark) {
    this.totalMark = totalMark;
    setTotalMarkIsSet(true);
    return this;
  }

  public void unsetTotalMark() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALMARK_ISSET_ID);
  }

  /** Returns true if field totalMark is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalMark() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALMARK_ISSET_ID);
  }

  public void setTotalMarkIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALMARK_ISSET_ID, value);
  }

  public int getTotalMaxPerfectCombo() {
    return this.totalMaxPerfectCombo;
  }

  public SCDanceMarkResultMsg setTotalMaxPerfectCombo(int totalMaxPerfectCombo) {
    this.totalMaxPerfectCombo = totalMaxPerfectCombo;
    setTotalMaxPerfectComboIsSet(true);
    return this;
  }

  public void unsetTotalMaxPerfectCombo() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALMAXPERFECTCOMBO_ISSET_ID);
  }

  /** Returns true if field totalMaxPerfectCombo is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalMaxPerfectCombo() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALMAXPERFECTCOMBO_ISSET_ID);
  }

  public void setTotalMaxPerfectComboIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALMAXPERFECTCOMBO_ISSET_ID, value);
  }

  public int getTotalMaxCombo() {
    return this.totalMaxCombo;
  }

  public SCDanceMarkResultMsg setTotalMaxCombo(int totalMaxCombo) {
    this.totalMaxCombo = totalMaxCombo;
    setTotalMaxComboIsSet(true);
    return this;
  }

  public void unsetTotalMaxCombo() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALMAXCOMBO_ISSET_ID);
  }

  /** Returns true if field totalMaxCombo is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalMaxCombo() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALMAXCOMBO_ISSET_ID);
  }

  public void setTotalMaxComboIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALMAXCOMBO_ISSET_ID, value);
  }

  public int getTotalMarkRate() {
    return this.totalMarkRate;
  }

  public SCDanceMarkResultMsg setTotalMarkRate(int totalMarkRate) {
    this.totalMarkRate = totalMarkRate;
    setTotalMarkRateIsSet(true);
    return this;
  }

  public void unsetTotalMarkRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALMARKRATE_ISSET_ID);
  }

  /** Returns true if field totalMarkRate is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalMarkRate() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALMARKRATE_ISSET_ID);
  }

  public void setTotalMarkRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALMARKRATE_ISSET_ID, value);
  }

  public int getTotalMasterPerfectRate() {
    return this.totalMasterPerfectRate;
  }

  public SCDanceMarkResultMsg setTotalMasterPerfectRate(int totalMasterPerfectRate) {
    this.totalMasterPerfectRate = totalMasterPerfectRate;
    setTotalMasterPerfectRateIsSet(true);
    return this;
  }

  public void unsetTotalMasterPerfectRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALMASTERPERFECTRATE_ISSET_ID);
  }

  /** Returns true if field totalMasterPerfectRate is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalMasterPerfectRate() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALMASTERPERFECTRATE_ISSET_ID);
  }

  public void setTotalMasterPerfectRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALMASTERPERFECTRATE_ISSET_ID, value);
  }

  public byte getAvgGrade() {
    return this.avgGrade;
  }

  public SCDanceMarkResultMsg setAvgGrade(byte avgGrade) {
    this.avgGrade = avgGrade;
    setAvgGradeIsSet(true);
    return this;
  }

  public void unsetAvgGrade() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AVGGRADE_ISSET_ID);
  }

  /** Returns true if field avgGrade is set (has been assigned a value) and false otherwise */
  public boolean isSetAvgGrade() {
    return EncodingUtils.testBit(__isset_bitfield, __AVGGRADE_ISSET_ID);
  }

  public void setAvgGradeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AVGGRADE_ISSET_ID, value);
  }

  public byte getTotalStars() {
    return this.totalStars;
  }

  public SCDanceMarkResultMsg setTotalStars(byte totalStars) {
    this.totalStars = totalStars;
    setTotalStarsIsSet(true);
    return this;
  }

  public void unsetTotalStars() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALSTARS_ISSET_ID);
  }

  /** Returns true if field totalStars is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalStars() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALSTARS_ISSET_ID);
  }

  public void setTotalStarsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALSTARS_ISSET_ID, value);
  }

  public com.ling9527.music.common.msg.auto.sc.TourDancePassResult getTourDanceResultMsg() {
    return this.tourDanceResultMsg;
  }

  public SCDanceMarkResultMsg setTourDanceResultMsg(com.ling9527.music.common.msg.auto.sc.TourDancePassResult tourDanceResultMsg) {
    this.tourDanceResultMsg = tourDanceResultMsg;
    return this;
  }

  public void unsetTourDanceResultMsg() {
    this.tourDanceResultMsg = null;
  }

  /** Returns true if field tourDanceResultMsg is set (has been assigned a value) and false otherwise */
  public boolean isSetTourDanceResultMsg() {
    return this.tourDanceResultMsg != null;
  }

  public void setTourDanceResultMsgIsSet(boolean value) {
    if (!value) {
      this.tourDanceResultMsg = null;
    }
  }

  public com.ling9527.music.common.msg.auto.sc.AnnouncePassInfo getAnnouncePassInfo() {
    return this.announcePassInfo;
  }

  public SCDanceMarkResultMsg setAnnouncePassInfo(com.ling9527.music.common.msg.auto.sc.AnnouncePassInfo announcePassInfo) {
    this.announcePassInfo = announcePassInfo;
    return this;
  }

  public void unsetAnnouncePassInfo() {
    this.announcePassInfo = null;
  }

  /** Returns true if field announcePassInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetAnnouncePassInfo() {
    return this.announcePassInfo != null;
  }

  public void setAnnouncePassInfoIsSet(boolean value) {
    if (!value) {
      this.announcePassInfo = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MARKS:
      if (value == null) {
        unsetMarks();
      } else {
        setMarks((List<com.ling9527.music.common.msg.auto.DanceMarkInfo>)value);
      }
      break;

    case COUPON:
      if (value == null) {
        unsetCoupon();
      } else {
        setCoupon((Short)value);
      }
      break;

    case BATTLE_INFO:
      if (value == null) {
        unsetBattleInfo();
      } else {
        setBattleInfo((com.ling9527.music.common.msg.auto.BattleFinishInfo)value);
      }
      break;

    case EXP:
      if (value == null) {
        unsetExp();
      } else {
        setExp((Short)value);
      }
      break;

    case CUP:
      if (value == null) {
        unsetCup();
      } else {
        setCup((Short)value);
      }
      break;

    case APPEND_COUPON:
      if (value == null) {
        unsetAppendCoupon();
      } else {
        setAppendCoupon((Short)value);
      }
      break;

    case APPEND_EXP:
      if (value == null) {
        unsetAppendExp();
      } else {
        setAppendExp((Short)value);
      }
      break;

    case CARD_ITEM_PRIZES:
      if (value == null) {
        unsetCardItemPrizes();
      } else {
        setCardItemPrizes((List<com.ling9527.music.common.msg.auto.ItemPrize>)value);
      }
      break;

    case TOTAL_PERFECT:
      if (value == null) {
        unsetTotalPerfect();
      } else {
        setTotalPerfect((Integer)value);
      }
      break;

    case TOTAL_GREAT:
      if (value == null) {
        unsetTotalGreat();
      } else {
        setTotalGreat((Integer)value);
      }
      break;

    case TOTAL_GOOD:
      if (value == null) {
        unsetTotalGood();
      } else {
        setTotalGood((Integer)value);
      }
      break;

    case TOTAL_MISS:
      if (value == null) {
        unsetTotalMiss();
      } else {
        setTotalMiss((Integer)value);
      }
      break;

    case TOTAL_MARK:
      if (value == null) {
        unsetTotalMark();
      } else {
        setTotalMark((Integer)value);
      }
      break;

    case TOTAL_MAX_PERFECT_COMBO:
      if (value == null) {
        unsetTotalMaxPerfectCombo();
      } else {
        setTotalMaxPerfectCombo((Integer)value);
      }
      break;

    case TOTAL_MAX_COMBO:
      if (value == null) {
        unsetTotalMaxCombo();
      } else {
        setTotalMaxCombo((Integer)value);
      }
      break;

    case TOTAL_MARK_RATE:
      if (value == null) {
        unsetTotalMarkRate();
      } else {
        setTotalMarkRate((Integer)value);
      }
      break;

    case TOTAL_MASTER_PERFECT_RATE:
      if (value == null) {
        unsetTotalMasterPerfectRate();
      } else {
        setTotalMasterPerfectRate((Integer)value);
      }
      break;

    case AVG_GRADE:
      if (value == null) {
        unsetAvgGrade();
      } else {
        setAvgGrade((Byte)value);
      }
      break;

    case TOTAL_STARS:
      if (value == null) {
        unsetTotalStars();
      } else {
        setTotalStars((Byte)value);
      }
      break;

    case TOUR_DANCE_RESULT_MSG:
      if (value == null) {
        unsetTourDanceResultMsg();
      } else {
        setTourDanceResultMsg((com.ling9527.music.common.msg.auto.sc.TourDancePassResult)value);
      }
      break;

    case ANNOUNCE_PASS_INFO:
      if (value == null) {
        unsetAnnouncePassInfo();
      } else {
        setAnnouncePassInfo((com.ling9527.music.common.msg.auto.sc.AnnouncePassInfo)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MARKS:
      return getMarks();

    case COUPON:
      return Short.valueOf(getCoupon());

    case BATTLE_INFO:
      return getBattleInfo();

    case EXP:
      return Short.valueOf(getExp());

    case CUP:
      return Short.valueOf(getCup());

    case APPEND_COUPON:
      return Short.valueOf(getAppendCoupon());

    case APPEND_EXP:
      return Short.valueOf(getAppendExp());

    case CARD_ITEM_PRIZES:
      return getCardItemPrizes();

    case TOTAL_PERFECT:
      return Integer.valueOf(getTotalPerfect());

    case TOTAL_GREAT:
      return Integer.valueOf(getTotalGreat());

    case TOTAL_GOOD:
      return Integer.valueOf(getTotalGood());

    case TOTAL_MISS:
      return Integer.valueOf(getTotalMiss());

    case TOTAL_MARK:
      return Integer.valueOf(getTotalMark());

    case TOTAL_MAX_PERFECT_COMBO:
      return Integer.valueOf(getTotalMaxPerfectCombo());

    case TOTAL_MAX_COMBO:
      return Integer.valueOf(getTotalMaxCombo());

    case TOTAL_MARK_RATE:
      return Integer.valueOf(getTotalMarkRate());

    case TOTAL_MASTER_PERFECT_RATE:
      return Integer.valueOf(getTotalMasterPerfectRate());

    case AVG_GRADE:
      return Byte.valueOf(getAvgGrade());

    case TOTAL_STARS:
      return Byte.valueOf(getTotalStars());

    case TOUR_DANCE_RESULT_MSG:
      return getTourDanceResultMsg();

    case ANNOUNCE_PASS_INFO:
      return getAnnouncePassInfo();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MARKS:
      return isSetMarks();
    case COUPON:
      return isSetCoupon();
    case BATTLE_INFO:
      return isSetBattleInfo();
    case EXP:
      return isSetExp();
    case CUP:
      return isSetCup();
    case APPEND_COUPON:
      return isSetAppendCoupon();
    case APPEND_EXP:
      return isSetAppendExp();
    case CARD_ITEM_PRIZES:
      return isSetCardItemPrizes();
    case TOTAL_PERFECT:
      return isSetTotalPerfect();
    case TOTAL_GREAT:
      return isSetTotalGreat();
    case TOTAL_GOOD:
      return isSetTotalGood();
    case TOTAL_MISS:
      return isSetTotalMiss();
    case TOTAL_MARK:
      return isSetTotalMark();
    case TOTAL_MAX_PERFECT_COMBO:
      return isSetTotalMaxPerfectCombo();
    case TOTAL_MAX_COMBO:
      return isSetTotalMaxCombo();
    case TOTAL_MARK_RATE:
      return isSetTotalMarkRate();
    case TOTAL_MASTER_PERFECT_RATE:
      return isSetTotalMasterPerfectRate();
    case AVG_GRADE:
      return isSetAvgGrade();
    case TOTAL_STARS:
      return isSetTotalStars();
    case TOUR_DANCE_RESULT_MSG:
      return isSetTourDanceResultMsg();
    case ANNOUNCE_PASS_INFO:
      return isSetAnnouncePassInfo();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCDanceMarkResultMsg)
      return this.equals((SCDanceMarkResultMsg)that);
    return false;
  }

  public boolean equals(SCDanceMarkResultMsg that) {
    if (that == null)
      return false;

    boolean this_present_marks = true && this.isSetMarks();
    boolean that_present_marks = true && that.isSetMarks();
    if (this_present_marks || that_present_marks) {
      if (!(this_present_marks && that_present_marks))
        return false;
      if (!this.marks.equals(that.marks))
        return false;
    }

    boolean this_present_coupon = true;
    boolean that_present_coupon = true;
    if (this_present_coupon || that_present_coupon) {
      if (!(this_present_coupon && that_present_coupon))
        return false;
      if (this.coupon != that.coupon)
        return false;
    }

    boolean this_present_battleInfo = true && this.isSetBattleInfo();
    boolean that_present_battleInfo = true && that.isSetBattleInfo();
    if (this_present_battleInfo || that_present_battleInfo) {
      if (!(this_present_battleInfo && that_present_battleInfo))
        return false;
      if (!this.battleInfo.equals(that.battleInfo))
        return false;
    }

    boolean this_present_exp = true;
    boolean that_present_exp = true;
    if (this_present_exp || that_present_exp) {
      if (!(this_present_exp && that_present_exp))
        return false;
      if (this.exp != that.exp)
        return false;
    }

    boolean this_present_cup = true;
    boolean that_present_cup = true;
    if (this_present_cup || that_present_cup) {
      if (!(this_present_cup && that_present_cup))
        return false;
      if (this.cup != that.cup)
        return false;
    }

    boolean this_present_appendCoupon = true;
    boolean that_present_appendCoupon = true;
    if (this_present_appendCoupon || that_present_appendCoupon) {
      if (!(this_present_appendCoupon && that_present_appendCoupon))
        return false;
      if (this.appendCoupon != that.appendCoupon)
        return false;
    }

    boolean this_present_appendExp = true;
    boolean that_present_appendExp = true;
    if (this_present_appendExp || that_present_appendExp) {
      if (!(this_present_appendExp && that_present_appendExp))
        return false;
      if (this.appendExp != that.appendExp)
        return false;
    }

    boolean this_present_cardItemPrizes = true && this.isSetCardItemPrizes();
    boolean that_present_cardItemPrizes = true && that.isSetCardItemPrizes();
    if (this_present_cardItemPrizes || that_present_cardItemPrizes) {
      if (!(this_present_cardItemPrizes && that_present_cardItemPrizes))
        return false;
      if (!this.cardItemPrizes.equals(that.cardItemPrizes))
        return false;
    }

    boolean this_present_totalPerfect = true;
    boolean that_present_totalPerfect = true;
    if (this_present_totalPerfect || that_present_totalPerfect) {
      if (!(this_present_totalPerfect && that_present_totalPerfect))
        return false;
      if (this.totalPerfect != that.totalPerfect)
        return false;
    }

    boolean this_present_totalGreat = true;
    boolean that_present_totalGreat = true;
    if (this_present_totalGreat || that_present_totalGreat) {
      if (!(this_present_totalGreat && that_present_totalGreat))
        return false;
      if (this.totalGreat != that.totalGreat)
        return false;
    }

    boolean this_present_totalGood = true;
    boolean that_present_totalGood = true;
    if (this_present_totalGood || that_present_totalGood) {
      if (!(this_present_totalGood && that_present_totalGood))
        return false;
      if (this.totalGood != that.totalGood)
        return false;
    }

    boolean this_present_totalMiss = true;
    boolean that_present_totalMiss = true;
    if (this_present_totalMiss || that_present_totalMiss) {
      if (!(this_present_totalMiss && that_present_totalMiss))
        return false;
      if (this.totalMiss != that.totalMiss)
        return false;
    }

    boolean this_present_totalMark = true;
    boolean that_present_totalMark = true;
    if (this_present_totalMark || that_present_totalMark) {
      if (!(this_present_totalMark && that_present_totalMark))
        return false;
      if (this.totalMark != that.totalMark)
        return false;
    }

    boolean this_present_totalMaxPerfectCombo = true;
    boolean that_present_totalMaxPerfectCombo = true;
    if (this_present_totalMaxPerfectCombo || that_present_totalMaxPerfectCombo) {
      if (!(this_present_totalMaxPerfectCombo && that_present_totalMaxPerfectCombo))
        return false;
      if (this.totalMaxPerfectCombo != that.totalMaxPerfectCombo)
        return false;
    }

    boolean this_present_totalMaxCombo = true;
    boolean that_present_totalMaxCombo = true;
    if (this_present_totalMaxCombo || that_present_totalMaxCombo) {
      if (!(this_present_totalMaxCombo && that_present_totalMaxCombo))
        return false;
      if (this.totalMaxCombo != that.totalMaxCombo)
        return false;
    }

    boolean this_present_totalMarkRate = true;
    boolean that_present_totalMarkRate = true;
    if (this_present_totalMarkRate || that_present_totalMarkRate) {
      if (!(this_present_totalMarkRate && that_present_totalMarkRate))
        return false;
      if (this.totalMarkRate != that.totalMarkRate)
        return false;
    }

    boolean this_present_totalMasterPerfectRate = true;
    boolean that_present_totalMasterPerfectRate = true;
    if (this_present_totalMasterPerfectRate || that_present_totalMasterPerfectRate) {
      if (!(this_present_totalMasterPerfectRate && that_present_totalMasterPerfectRate))
        return false;
      if (this.totalMasterPerfectRate != that.totalMasterPerfectRate)
        return false;
    }

    boolean this_present_avgGrade = true;
    boolean that_present_avgGrade = true;
    if (this_present_avgGrade || that_present_avgGrade) {
      if (!(this_present_avgGrade && that_present_avgGrade))
        return false;
      if (this.avgGrade != that.avgGrade)
        return false;
    }

    boolean this_present_totalStars = true;
    boolean that_present_totalStars = true;
    if (this_present_totalStars || that_present_totalStars) {
      if (!(this_present_totalStars && that_present_totalStars))
        return false;
      if (this.totalStars != that.totalStars)
        return false;
    }

    boolean this_present_tourDanceResultMsg = true && this.isSetTourDanceResultMsg();
    boolean that_present_tourDanceResultMsg = true && that.isSetTourDanceResultMsg();
    if (this_present_tourDanceResultMsg || that_present_tourDanceResultMsg) {
      if (!(this_present_tourDanceResultMsg && that_present_tourDanceResultMsg))
        return false;
      if (!this.tourDanceResultMsg.equals(that.tourDanceResultMsg))
        return false;
    }

    boolean this_present_announcePassInfo = true && this.isSetAnnouncePassInfo();
    boolean that_present_announcePassInfo = true && that.isSetAnnouncePassInfo();
    if (this_present_announcePassInfo || that_present_announcePassInfo) {
      if (!(this_present_announcePassInfo && that_present_announcePassInfo))
        return false;
      if (!this.announcePassInfo.equals(that.announcePassInfo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCDanceMarkResultMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCDanceMarkResultMsg typedOther = (SCDanceMarkResultMsg)other;

    lastComparison = Boolean.valueOf(isSetMarks()).compareTo(typedOther.isSetMarks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMarks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.marks, typedOther.marks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCoupon()).compareTo(typedOther.isSetCoupon());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCoupon()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coupon, typedOther.coupon);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBattleInfo()).compareTo(typedOther.isSetBattleInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBattleInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.battleInfo, typedOther.battleInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExp()).compareTo(typedOther.isSetExp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exp, typedOther.exp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCup()).compareTo(typedOther.isSetCup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCup()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cup, typedOther.cup);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppendCoupon()).compareTo(typedOther.isSetAppendCoupon());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppendCoupon()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appendCoupon, typedOther.appendCoupon);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppendExp()).compareTo(typedOther.isSetAppendExp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppendExp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appendExp, typedOther.appendExp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCardItemPrizes()).compareTo(typedOther.isSetCardItemPrizes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCardItemPrizes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cardItemPrizes, typedOther.cardItemPrizes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalPerfect()).compareTo(typedOther.isSetTotalPerfect());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalPerfect()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalPerfect, typedOther.totalPerfect);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalGreat()).compareTo(typedOther.isSetTotalGreat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalGreat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalGreat, typedOther.totalGreat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalGood()).compareTo(typedOther.isSetTotalGood());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalGood()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalGood, typedOther.totalGood);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalMiss()).compareTo(typedOther.isSetTotalMiss());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalMiss()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalMiss, typedOther.totalMiss);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalMark()).compareTo(typedOther.isSetTotalMark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalMark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalMark, typedOther.totalMark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalMaxPerfectCombo()).compareTo(typedOther.isSetTotalMaxPerfectCombo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalMaxPerfectCombo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalMaxPerfectCombo, typedOther.totalMaxPerfectCombo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalMaxCombo()).compareTo(typedOther.isSetTotalMaxCombo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalMaxCombo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalMaxCombo, typedOther.totalMaxCombo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalMarkRate()).compareTo(typedOther.isSetTotalMarkRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalMarkRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalMarkRate, typedOther.totalMarkRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalMasterPerfectRate()).compareTo(typedOther.isSetTotalMasterPerfectRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalMasterPerfectRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalMasterPerfectRate, typedOther.totalMasterPerfectRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAvgGrade()).compareTo(typedOther.isSetAvgGrade());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvgGrade()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.avgGrade, typedOther.avgGrade);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalStars()).compareTo(typedOther.isSetTotalStars());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalStars()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalStars, typedOther.totalStars);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTourDanceResultMsg()).compareTo(typedOther.isSetTourDanceResultMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTourDanceResultMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tourDanceResultMsg, typedOther.tourDanceResultMsg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAnnouncePassInfo()).compareTo(typedOther.isSetAnnouncePassInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnnouncePassInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.announcePassInfo, typedOther.announcePassInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCDanceMarkResultMsg(");
    boolean first = true;

    sb.append("marks:");
    if (this.marks == null) {
      sb.append("null");
    } else {
      sb.append(this.marks);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("coupon:");
    sb.append(this.coupon);
    first = false;
    if (!first) sb.append(", ");
    sb.append("battleInfo:");
    if (this.battleInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.battleInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("exp:");
    sb.append(this.exp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cup:");
    sb.append(this.cup);
    first = false;
    if (!first) sb.append(", ");
    sb.append("appendCoupon:");
    sb.append(this.appendCoupon);
    first = false;
    if (!first) sb.append(", ");
    sb.append("appendExp:");
    sb.append(this.appendExp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cardItemPrizes:");
    if (this.cardItemPrizes == null) {
      sb.append("null");
    } else {
      sb.append(this.cardItemPrizes);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalPerfect:");
    sb.append(this.totalPerfect);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalGreat:");
    sb.append(this.totalGreat);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalGood:");
    sb.append(this.totalGood);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalMiss:");
    sb.append(this.totalMiss);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalMark:");
    sb.append(this.totalMark);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalMaxPerfectCombo:");
    sb.append(this.totalMaxPerfectCombo);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalMaxCombo:");
    sb.append(this.totalMaxCombo);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalMarkRate:");
    sb.append(this.totalMarkRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalMasterPerfectRate:");
    sb.append(this.totalMasterPerfectRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("avgGrade:");
    sb.append(this.avgGrade);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalStars:");
    sb.append(this.totalStars);
    first = false;
    if (isSetTourDanceResultMsg()) {
      if (!first) sb.append(", ");
      sb.append("tourDanceResultMsg:");
      if (this.tourDanceResultMsg == null) {
        sb.append("null");
      } else {
        sb.append(this.tourDanceResultMsg);
      }
      first = false;
    }
    if (isSetAnnouncePassInfo()) {
      if (!first) sb.append(", ");
      sb.append("announcePassInfo:");
      if (this.announcePassInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.announcePassInfo);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (battleInfo != null) {
      battleInfo.validate();
    }
    if (tourDanceResultMsg != null) {
      tourDanceResultMsg.validate();
    }
    if (announcePassInfo != null) {
      announcePassInfo.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCDanceMarkResultMsgStandardSchemeFactory implements SchemeFactory {
    public SCDanceMarkResultMsgStandardScheme getScheme() {
      return new SCDanceMarkResultMsgStandardScheme();
    }
  }

  private static class SCDanceMarkResultMsgStandardScheme extends StandardScheme<SCDanceMarkResultMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCDanceMarkResultMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MARKS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.marks = new ArrayList<com.ling9527.music.common.msg.auto.DanceMarkInfo>(_list32.size);
                for (int _i33 = 0; _i33 < _list32.size; ++_i33)
                {
                  com.ling9527.music.common.msg.auto.DanceMarkInfo _elem34; // required
                  _elem34 = new com.ling9527.music.common.msg.auto.DanceMarkInfo();
                  _elem34.read(iprot);
                  struct.marks.add(_elem34);
                }
                iprot.readListEnd();
              }
              struct.setMarksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COUPON
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.coupon = iprot.readI16();
              struct.setCouponIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BATTLE_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.battleInfo = new com.ling9527.music.common.msg.auto.BattleFinishInfo();
              struct.battleInfo.read(iprot);
              struct.setBattleInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EXP
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.exp = iprot.readI16();
              struct.setExpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CUP
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.cup = iprot.readI16();
              struct.setCupIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // APPEND_COUPON
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.appendCoupon = iprot.readI16();
              struct.setAppendCouponIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // APPEND_EXP
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.appendExp = iprot.readI16();
              struct.setAppendExpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CARD_ITEM_PRIZES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list35 = iprot.readListBegin();
                struct.cardItemPrizes = new ArrayList<com.ling9527.music.common.msg.auto.ItemPrize>(_list35.size);
                for (int _i36 = 0; _i36 < _list35.size; ++_i36)
                {
                  com.ling9527.music.common.msg.auto.ItemPrize _elem37; // required
                  _elem37 = new com.ling9527.music.common.msg.auto.ItemPrize();
                  _elem37.read(iprot);
                  struct.cardItemPrizes.add(_elem37);
                }
                iprot.readListEnd();
              }
              struct.setCardItemPrizesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TOTAL_PERFECT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalPerfect = iprot.readI32();
              struct.setTotalPerfectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TOTAL_GREAT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalGreat = iprot.readI32();
              struct.setTotalGreatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TOTAL_GOOD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalGood = iprot.readI32();
              struct.setTotalGoodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TOTAL_MISS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalMiss = iprot.readI32();
              struct.setTotalMissIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // TOTAL_MARK
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalMark = iprot.readI32();
              struct.setTotalMarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // TOTAL_MAX_PERFECT_COMBO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalMaxPerfectCombo = iprot.readI32();
              struct.setTotalMaxPerfectComboIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // TOTAL_MAX_COMBO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalMaxCombo = iprot.readI32();
              struct.setTotalMaxComboIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // TOTAL_MARK_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalMarkRate = iprot.readI32();
              struct.setTotalMarkRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // TOTAL_MASTER_PERFECT_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalMasterPerfectRate = iprot.readI32();
              struct.setTotalMasterPerfectRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // AVG_GRADE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.avgGrade = iprot.readByte();
              struct.setAvgGradeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // TOTAL_STARS
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.totalStars = iprot.readByte();
              struct.setTotalStarsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // TOUR_DANCE_RESULT_MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.tourDanceResultMsg = new com.ling9527.music.common.msg.auto.sc.TourDancePassResult();
              struct.tourDanceResultMsg.read(iprot);
              struct.setTourDanceResultMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // ANNOUNCE_PASS_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.announcePassInfo = new com.ling9527.music.common.msg.auto.sc.AnnouncePassInfo();
              struct.announcePassInfo.read(iprot);
              struct.setAnnouncePassInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCDanceMarkResultMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.marks != null) {
        oprot.writeFieldBegin(MARKS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.marks.size()));
          for (com.ling9527.music.common.msg.auto.DanceMarkInfo _iter38 : struct.marks)
          {
            _iter38.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(COUPON_FIELD_DESC);
      oprot.writeI16(struct.coupon);
      oprot.writeFieldEnd();
      if (struct.battleInfo != null) {
        oprot.writeFieldBegin(BATTLE_INFO_FIELD_DESC);
        struct.battleInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(EXP_FIELD_DESC);
      oprot.writeI16(struct.exp);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CUP_FIELD_DESC);
      oprot.writeI16(struct.cup);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(APPEND_COUPON_FIELD_DESC);
      oprot.writeI16(struct.appendCoupon);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(APPEND_EXP_FIELD_DESC);
      oprot.writeI16(struct.appendExp);
      oprot.writeFieldEnd();
      if (struct.cardItemPrizes != null) {
        oprot.writeFieldBegin(CARD_ITEM_PRIZES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.cardItemPrizes.size()));
          for (com.ling9527.music.common.msg.auto.ItemPrize _iter39 : struct.cardItemPrizes)
          {
            _iter39.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TOTAL_PERFECT_FIELD_DESC);
      oprot.writeI32(struct.totalPerfect);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_GREAT_FIELD_DESC);
      oprot.writeI32(struct.totalGreat);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_GOOD_FIELD_DESC);
      oprot.writeI32(struct.totalGood);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_MISS_FIELD_DESC);
      oprot.writeI32(struct.totalMiss);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_MARK_FIELD_DESC);
      oprot.writeI32(struct.totalMark);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_MAX_PERFECT_COMBO_FIELD_DESC);
      oprot.writeI32(struct.totalMaxPerfectCombo);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_MAX_COMBO_FIELD_DESC);
      oprot.writeI32(struct.totalMaxCombo);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_MARK_RATE_FIELD_DESC);
      oprot.writeI32(struct.totalMarkRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_MASTER_PERFECT_RATE_FIELD_DESC);
      oprot.writeI32(struct.totalMasterPerfectRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AVG_GRADE_FIELD_DESC);
      oprot.writeByte(struct.avgGrade);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_STARS_FIELD_DESC);
      oprot.writeByte(struct.totalStars);
      oprot.writeFieldEnd();
      if (struct.tourDanceResultMsg != null) {
        if (struct.isSetTourDanceResultMsg()) {
          oprot.writeFieldBegin(TOUR_DANCE_RESULT_MSG_FIELD_DESC);
          struct.tourDanceResultMsg.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.announcePassInfo != null) {
        if (struct.isSetAnnouncePassInfo()) {
          oprot.writeFieldBegin(ANNOUNCE_PASS_INFO_FIELD_DESC);
          struct.announcePassInfo.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCDanceMarkResultMsgTupleSchemeFactory implements SchemeFactory {
    public SCDanceMarkResultMsgTupleScheme getScheme() {
      return new SCDanceMarkResultMsgTupleScheme();
    }
  }

  private static class SCDanceMarkResultMsgTupleScheme extends TupleScheme<SCDanceMarkResultMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCDanceMarkResultMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMarks()) {
        optionals.set(0);
      }
      if (struct.isSetCoupon()) {
        optionals.set(1);
      }
      if (struct.isSetBattleInfo()) {
        optionals.set(2);
      }
      if (struct.isSetExp()) {
        optionals.set(3);
      }
      if (struct.isSetCup()) {
        optionals.set(4);
      }
      if (struct.isSetAppendCoupon()) {
        optionals.set(5);
      }
      if (struct.isSetAppendExp()) {
        optionals.set(6);
      }
      if (struct.isSetCardItemPrizes()) {
        optionals.set(7);
      }
      if (struct.isSetTotalPerfect()) {
        optionals.set(8);
      }
      if (struct.isSetTotalGreat()) {
        optionals.set(9);
      }
      if (struct.isSetTotalGood()) {
        optionals.set(10);
      }
      if (struct.isSetTotalMiss()) {
        optionals.set(11);
      }
      if (struct.isSetTotalMark()) {
        optionals.set(12);
      }
      if (struct.isSetTotalMaxPerfectCombo()) {
        optionals.set(13);
      }
      if (struct.isSetTotalMaxCombo()) {
        optionals.set(14);
      }
      if (struct.isSetTotalMarkRate()) {
        optionals.set(15);
      }
      if (struct.isSetTotalMasterPerfectRate()) {
        optionals.set(16);
      }
      if (struct.isSetAvgGrade()) {
        optionals.set(17);
      }
      if (struct.isSetTotalStars()) {
        optionals.set(18);
      }
      if (struct.isSetTourDanceResultMsg()) {
        optionals.set(19);
      }
      if (struct.isSetAnnouncePassInfo()) {
        optionals.set(20);
      }
      oprot.writeBitSet(optionals, 21);
      if (struct.isSetMarks()) {
        {
          oprot.writeI32(struct.marks.size());
          for (com.ling9527.music.common.msg.auto.DanceMarkInfo _iter40 : struct.marks)
          {
            _iter40.write(oprot);
          }
        }
      }
      if (struct.isSetCoupon()) {
        oprot.writeI16(struct.coupon);
      }
      if (struct.isSetBattleInfo()) {
        struct.battleInfo.write(oprot);
      }
      if (struct.isSetExp()) {
        oprot.writeI16(struct.exp);
      }
      if (struct.isSetCup()) {
        oprot.writeI16(struct.cup);
      }
      if (struct.isSetAppendCoupon()) {
        oprot.writeI16(struct.appendCoupon);
      }
      if (struct.isSetAppendExp()) {
        oprot.writeI16(struct.appendExp);
      }
      if (struct.isSetCardItemPrizes()) {
        {
          oprot.writeI32(struct.cardItemPrizes.size());
          for (com.ling9527.music.common.msg.auto.ItemPrize _iter41 : struct.cardItemPrizes)
          {
            _iter41.write(oprot);
          }
        }
      }
      if (struct.isSetTotalPerfect()) {
        oprot.writeI32(struct.totalPerfect);
      }
      if (struct.isSetTotalGreat()) {
        oprot.writeI32(struct.totalGreat);
      }
      if (struct.isSetTotalGood()) {
        oprot.writeI32(struct.totalGood);
      }
      if (struct.isSetTotalMiss()) {
        oprot.writeI32(struct.totalMiss);
      }
      if (struct.isSetTotalMark()) {
        oprot.writeI32(struct.totalMark);
      }
      if (struct.isSetTotalMaxPerfectCombo()) {
        oprot.writeI32(struct.totalMaxPerfectCombo);
      }
      if (struct.isSetTotalMaxCombo()) {
        oprot.writeI32(struct.totalMaxCombo);
      }
      if (struct.isSetTotalMarkRate()) {
        oprot.writeI32(struct.totalMarkRate);
      }
      if (struct.isSetTotalMasterPerfectRate()) {
        oprot.writeI32(struct.totalMasterPerfectRate);
      }
      if (struct.isSetAvgGrade()) {
        oprot.writeByte(struct.avgGrade);
      }
      if (struct.isSetTotalStars()) {
        oprot.writeByte(struct.totalStars);
      }
      if (struct.isSetTourDanceResultMsg()) {
        struct.tourDanceResultMsg.write(oprot);
      }
      if (struct.isSetAnnouncePassInfo()) {
        struct.announcePassInfo.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCDanceMarkResultMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(21);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list42 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.marks = new ArrayList<com.ling9527.music.common.msg.auto.DanceMarkInfo>(_list42.size);
          for (int _i43 = 0; _i43 < _list42.size; ++_i43)
          {
            com.ling9527.music.common.msg.auto.DanceMarkInfo _elem44; // required
            _elem44 = new com.ling9527.music.common.msg.auto.DanceMarkInfo();
            _elem44.read(iprot);
            struct.marks.add(_elem44);
          }
        }
        struct.setMarksIsSet(true);
      }
      if (incoming.get(1)) {
        struct.coupon = iprot.readI16();
        struct.setCouponIsSet(true);
      }
      if (incoming.get(2)) {
        struct.battleInfo = new com.ling9527.music.common.msg.auto.BattleFinishInfo();
        struct.battleInfo.read(iprot);
        struct.setBattleInfoIsSet(true);
      }
      if (incoming.get(3)) {
        struct.exp = iprot.readI16();
        struct.setExpIsSet(true);
      }
      if (incoming.get(4)) {
        struct.cup = iprot.readI16();
        struct.setCupIsSet(true);
      }
      if (incoming.get(5)) {
        struct.appendCoupon = iprot.readI16();
        struct.setAppendCouponIsSet(true);
      }
      if (incoming.get(6)) {
        struct.appendExp = iprot.readI16();
        struct.setAppendExpIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.cardItemPrizes = new ArrayList<com.ling9527.music.common.msg.auto.ItemPrize>(_list45.size);
          for (int _i46 = 0; _i46 < _list45.size; ++_i46)
          {
            com.ling9527.music.common.msg.auto.ItemPrize _elem47; // required
            _elem47 = new com.ling9527.music.common.msg.auto.ItemPrize();
            _elem47.read(iprot);
            struct.cardItemPrizes.add(_elem47);
          }
        }
        struct.setCardItemPrizesIsSet(true);
      }
      if (incoming.get(8)) {
        struct.totalPerfect = iprot.readI32();
        struct.setTotalPerfectIsSet(true);
      }
      if (incoming.get(9)) {
        struct.totalGreat = iprot.readI32();
        struct.setTotalGreatIsSet(true);
      }
      if (incoming.get(10)) {
        struct.totalGood = iprot.readI32();
        struct.setTotalGoodIsSet(true);
      }
      if (incoming.get(11)) {
        struct.totalMiss = iprot.readI32();
        struct.setTotalMissIsSet(true);
      }
      if (incoming.get(12)) {
        struct.totalMark = iprot.readI32();
        struct.setTotalMarkIsSet(true);
      }
      if (incoming.get(13)) {
        struct.totalMaxPerfectCombo = iprot.readI32();
        struct.setTotalMaxPerfectComboIsSet(true);
      }
      if (incoming.get(14)) {
        struct.totalMaxCombo = iprot.readI32();
        struct.setTotalMaxComboIsSet(true);
      }
      if (incoming.get(15)) {
        struct.totalMarkRate = iprot.readI32();
        struct.setTotalMarkRateIsSet(true);
      }
      if (incoming.get(16)) {
        struct.totalMasterPerfectRate = iprot.readI32();
        struct.setTotalMasterPerfectRateIsSet(true);
      }
      if (incoming.get(17)) {
        struct.avgGrade = iprot.readByte();
        struct.setAvgGradeIsSet(true);
      }
      if (incoming.get(18)) {
        struct.totalStars = iprot.readByte();
        struct.setTotalStarsIsSet(true);
      }
      if (incoming.get(19)) {
        struct.tourDanceResultMsg = new com.ling9527.music.common.msg.auto.sc.TourDancePassResult();
        struct.tourDanceResultMsg.read(iprot);
        struct.setTourDanceResultMsgIsSet(true);
      }
      if (incoming.get(20)) {
        struct.announcePassInfo = new com.ling9527.music.common.msg.auto.sc.AnnouncePassInfo();
        struct.announcePassInfo.read(iprot);
        struct.setAnnouncePassInfoIsSet(true);
      }
    }
  }

}

