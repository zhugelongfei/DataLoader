/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 请求对应id的信息参数
 */
public class CommonDataQueryByIdsParam implements org.apache.thrift.TBase<CommonDataQueryByIdsParam, CommonDataQueryByIdsParam._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CommonDataQueryByIdsParam");

  private static final org.apache.thrift.protocol.TField NO_CACHED_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("noCachedIds", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField CACHED_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("cachedIds", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField FROM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("fromType", org.apache.thrift.protocol.TType.I16, (short)3);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I16, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CommonDataQueryByIdsParamStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CommonDataQueryByIdsParamTupleSchemeFactory());
  }

  /**
   * 客户端没有缓存的信息id
   */
  public List<Long> noCachedIds; // required
  /**
   * 客户端有缓存的信息id
   */
  public List<Long> cachedIds; // optional
  /**
   * 客户端请求的类型
   */
  public short fromType; // optional
  /**
   * 客户端此类缓存信息总版本号
   */
  public short version; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 客户端没有缓存的信息id
     */
    NO_CACHED_IDS((short)1, "noCachedIds"),
    /**
     * 客户端有缓存的信息id
     */
    CACHED_IDS((short)2, "cachedIds"),
    /**
     * 客户端请求的类型
     */
    FROM_TYPE((short)3, "fromType"),
    /**
     * 客户端此类缓存信息总版本号
     */
    VERSION((short)4, "version");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NO_CACHED_IDS
          return NO_CACHED_IDS;
        case 2: // CACHED_IDS
          return CACHED_IDS;
        case 3: // FROM_TYPE
          return FROM_TYPE;
        case 4: // VERSION
          return VERSION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FROMTYPE_ISSET_ID = 0;
  private static final int __VERSION_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.CACHED_IDS,_Fields.FROM_TYPE,_Fields.VERSION};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NO_CACHED_IDS, new org.apache.thrift.meta_data.FieldMetaData("noCachedIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.CACHED_IDS, new org.apache.thrift.meta_data.FieldMetaData("cachedIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.FROM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("fromType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CommonDataQueryByIdsParam.class, metaDataMap);
  }

  public CommonDataQueryByIdsParam() {
  }

  public CommonDataQueryByIdsParam(
    List<Long> noCachedIds)
  {
    this();
    this.noCachedIds = noCachedIds;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CommonDataQueryByIdsParam(CommonDataQueryByIdsParam other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetNoCachedIds()) {
      List<Long> __this__noCachedIds = new ArrayList<Long>();
      for (Long other_element : other.noCachedIds) {
        __this__noCachedIds.add(other_element);
      }
      this.noCachedIds = __this__noCachedIds;
    }
    if (other.isSetCachedIds()) {
      List<Long> __this__cachedIds = new ArrayList<Long>();
      for (Long other_element : other.cachedIds) {
        __this__cachedIds.add(other_element);
      }
      this.cachedIds = __this__cachedIds;
    }
    this.fromType = other.fromType;
    this.version = other.version;
  }

  public CommonDataQueryByIdsParam deepCopy() {
    return new CommonDataQueryByIdsParam(this);
  }

  @Override
  public void clear() {
    this.noCachedIds = null;
    this.cachedIds = null;
    setFromTypeIsSet(false);
    this.fromType = 0;
    setVersionIsSet(false);
    this.version = 0;
  }

  public int getNoCachedIdsSize() {
    return (this.noCachedIds == null) ? 0 : this.noCachedIds.size();
  }

  public java.util.Iterator<Long> getNoCachedIdsIterator() {
    return (this.noCachedIds == null) ? null : this.noCachedIds.iterator();
  }

  public void addToNoCachedIds(long elem) {
    if (this.noCachedIds == null) {
      this.noCachedIds = new ArrayList<Long>();
    }
    this.noCachedIds.add(elem);
  }

  /**
   * 客户端没有缓存的信息id
   */
  public List<Long> getNoCachedIds() {
    return this.noCachedIds;
  }

  /**
   * 客户端没有缓存的信息id
   */
  public CommonDataQueryByIdsParam setNoCachedIds(List<Long> noCachedIds) {
    this.noCachedIds = noCachedIds;
    return this;
  }

  public void unsetNoCachedIds() {
    this.noCachedIds = null;
  }

  /** Returns true if field noCachedIds is set (has been assigned a value) and false otherwise */
  public boolean isSetNoCachedIds() {
    return this.noCachedIds != null;
  }

  public void setNoCachedIdsIsSet(boolean value) {
    if (!value) {
      this.noCachedIds = null;
    }
  }

  public int getCachedIdsSize() {
    return (this.cachedIds == null) ? 0 : this.cachedIds.size();
  }

  public java.util.Iterator<Long> getCachedIdsIterator() {
    return (this.cachedIds == null) ? null : this.cachedIds.iterator();
  }

  public void addToCachedIds(long elem) {
    if (this.cachedIds == null) {
      this.cachedIds = new ArrayList<Long>();
    }
    this.cachedIds.add(elem);
  }

  /**
   * 客户端有缓存的信息id
   */
  public List<Long> getCachedIds() {
    return this.cachedIds;
  }

  /**
   * 客户端有缓存的信息id
   */
  public CommonDataQueryByIdsParam setCachedIds(List<Long> cachedIds) {
    this.cachedIds = cachedIds;
    return this;
  }

  public void unsetCachedIds() {
    this.cachedIds = null;
  }

  /** Returns true if field cachedIds is set (has been assigned a value) and false otherwise */
  public boolean isSetCachedIds() {
    return this.cachedIds != null;
  }

  public void setCachedIdsIsSet(boolean value) {
    if (!value) {
      this.cachedIds = null;
    }
  }

  /**
   * 客户端请求的类型
   */
  public short getFromType() {
    return this.fromType;
  }

  /**
   * 客户端请求的类型
   */
  public CommonDataQueryByIdsParam setFromType(short fromType) {
    this.fromType = fromType;
    setFromTypeIsSet(true);
    return this;
  }

  public void unsetFromType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FROMTYPE_ISSET_ID);
  }

  /** Returns true if field fromType is set (has been assigned a value) and false otherwise */
  public boolean isSetFromType() {
    return EncodingUtils.testBit(__isset_bitfield, __FROMTYPE_ISSET_ID);
  }

  public void setFromTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FROMTYPE_ISSET_ID, value);
  }

  /**
   * 客户端此类缓存信息总版本号
   */
  public short getVersion() {
    return this.version;
  }

  /**
   * 客户端此类缓存信息总版本号
   */
  public CommonDataQueryByIdsParam setVersion(short version) {
    this.version = version;
    setVersionIsSet(true);
    return this;
  }

  public void unsetVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NO_CACHED_IDS:
      if (value == null) {
        unsetNoCachedIds();
      } else {
        setNoCachedIds((List<Long>)value);
      }
      break;

    case CACHED_IDS:
      if (value == null) {
        unsetCachedIds();
      } else {
        setCachedIds((List<Long>)value);
      }
      break;

    case FROM_TYPE:
      if (value == null) {
        unsetFromType();
      } else {
        setFromType((Short)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((Short)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NO_CACHED_IDS:
      return getNoCachedIds();

    case CACHED_IDS:
      return getCachedIds();

    case FROM_TYPE:
      return Short.valueOf(getFromType());

    case VERSION:
      return Short.valueOf(getVersion());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NO_CACHED_IDS:
      return isSetNoCachedIds();
    case CACHED_IDS:
      return isSetCachedIds();
    case FROM_TYPE:
      return isSetFromType();
    case VERSION:
      return isSetVersion();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CommonDataQueryByIdsParam)
      return this.equals((CommonDataQueryByIdsParam)that);
    return false;
  }

  public boolean equals(CommonDataQueryByIdsParam that) {
    if (that == null)
      return false;

    boolean this_present_noCachedIds = true && this.isSetNoCachedIds();
    boolean that_present_noCachedIds = true && that.isSetNoCachedIds();
    if (this_present_noCachedIds || that_present_noCachedIds) {
      if (!(this_present_noCachedIds && that_present_noCachedIds))
        return false;
      if (!this.noCachedIds.equals(that.noCachedIds))
        return false;
    }

    boolean this_present_cachedIds = true && this.isSetCachedIds();
    boolean that_present_cachedIds = true && that.isSetCachedIds();
    if (this_present_cachedIds || that_present_cachedIds) {
      if (!(this_present_cachedIds && that_present_cachedIds))
        return false;
      if (!this.cachedIds.equals(that.cachedIds))
        return false;
    }

    boolean this_present_fromType = true && this.isSetFromType();
    boolean that_present_fromType = true && that.isSetFromType();
    if (this_present_fromType || that_present_fromType) {
      if (!(this_present_fromType && that_present_fromType))
        return false;
      if (this.fromType != that.fromType)
        return false;
    }

    boolean this_present_version = true && this.isSetVersion();
    boolean that_present_version = true && that.isSetVersion();
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(CommonDataQueryByIdsParam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CommonDataQueryByIdsParam typedOther = (CommonDataQueryByIdsParam)other;

    lastComparison = Boolean.valueOf(isSetNoCachedIds()).compareTo(typedOther.isSetNoCachedIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNoCachedIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noCachedIds, typedOther.noCachedIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCachedIds()).compareTo(typedOther.isSetCachedIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCachedIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cachedIds, typedOther.cachedIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFromType()).compareTo(typedOther.isSetFromType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromType, typedOther.fromType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(typedOther.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, typedOther.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CommonDataQueryByIdsParam(");
    boolean first = true;

    sb.append("noCachedIds:");
    if (this.noCachedIds == null) {
      sb.append("null");
    } else {
      sb.append(this.noCachedIds);
    }
    first = false;
    if (isSetCachedIds()) {
      if (!first) sb.append(", ");
      sb.append("cachedIds:");
      if (this.cachedIds == null) {
        sb.append("null");
      } else {
        sb.append(this.cachedIds);
      }
      first = false;
    }
    if (isSetFromType()) {
      if (!first) sb.append(", ");
      sb.append("fromType:");
      sb.append(this.fromType);
      first = false;
    }
    if (isSetVersion()) {
      if (!first) sb.append(", ");
      sb.append("version:");
      sb.append(this.version);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CommonDataQueryByIdsParamStandardSchemeFactory implements SchemeFactory {
    public CommonDataQueryByIdsParamStandardScheme getScheme() {
      return new CommonDataQueryByIdsParamStandardScheme();
    }
  }

  private static class CommonDataQueryByIdsParamStandardScheme extends StandardScheme<CommonDataQueryByIdsParam> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CommonDataQueryByIdsParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NO_CACHED_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list732 = iprot.readListBegin();
                struct.noCachedIds = new ArrayList<Long>(_list732.size);
                for (int _i733 = 0; _i733 < _list732.size; ++_i733)
                {
                  long _elem734; // required
                  _elem734 = iprot.readI64();
                  struct.noCachedIds.add(_elem734);
                }
                iprot.readListEnd();
              }
              struct.setNoCachedIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CACHED_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list735 = iprot.readListBegin();
                struct.cachedIds = new ArrayList<Long>(_list735.size);
                for (int _i736 = 0; _i736 < _list735.size; ++_i736)
                {
                  long _elem737; // required
                  _elem737 = iprot.readI64();
                  struct.cachedIds.add(_elem737);
                }
                iprot.readListEnd();
              }
              struct.setCachedIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FROM_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.fromType = iprot.readI16();
              struct.setFromTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.version = iprot.readI16();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CommonDataQueryByIdsParam struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.noCachedIds != null) {
        oprot.writeFieldBegin(NO_CACHED_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.noCachedIds.size()));
          for (long _iter738 : struct.noCachedIds)
          {
            oprot.writeI64(_iter738);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.cachedIds != null) {
        if (struct.isSetCachedIds()) {
          oprot.writeFieldBegin(CACHED_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.cachedIds.size()));
            for (long _iter739 : struct.cachedIds)
            {
              oprot.writeI64(_iter739);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetFromType()) {
        oprot.writeFieldBegin(FROM_TYPE_FIELD_DESC);
        oprot.writeI16(struct.fromType);
        oprot.writeFieldEnd();
      }
      if (struct.isSetVersion()) {
        oprot.writeFieldBegin(VERSION_FIELD_DESC);
        oprot.writeI16(struct.version);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CommonDataQueryByIdsParamTupleSchemeFactory implements SchemeFactory {
    public CommonDataQueryByIdsParamTupleScheme getScheme() {
      return new CommonDataQueryByIdsParamTupleScheme();
    }
  }

  private static class CommonDataQueryByIdsParamTupleScheme extends TupleScheme<CommonDataQueryByIdsParam> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CommonDataQueryByIdsParam struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetNoCachedIds()) {
        optionals.set(0);
      }
      if (struct.isSetCachedIds()) {
        optionals.set(1);
      }
      if (struct.isSetFromType()) {
        optionals.set(2);
      }
      if (struct.isSetVersion()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetNoCachedIds()) {
        {
          oprot.writeI32(struct.noCachedIds.size());
          for (long _iter740 : struct.noCachedIds)
          {
            oprot.writeI64(_iter740);
          }
        }
      }
      if (struct.isSetCachedIds()) {
        {
          oprot.writeI32(struct.cachedIds.size());
          for (long _iter741 : struct.cachedIds)
          {
            oprot.writeI64(_iter741);
          }
        }
      }
      if (struct.isSetFromType()) {
        oprot.writeI16(struct.fromType);
      }
      if (struct.isSetVersion()) {
        oprot.writeI16(struct.version);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CommonDataQueryByIdsParam struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list742 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.noCachedIds = new ArrayList<Long>(_list742.size);
          for (int _i743 = 0; _i743 < _list742.size; ++_i743)
          {
            long _elem744; // required
            _elem744 = iprot.readI64();
            struct.noCachedIds.add(_elem744);
          }
        }
        struct.setNoCachedIdsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list745 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.cachedIds = new ArrayList<Long>(_list745.size);
          for (int _i746 = 0; _i746 < _list745.size; ++_i746)
          {
            long _elem747; // required
            _elem747 = iprot.readI64();
            struct.cachedIds.add(_elem747);
          }
        }
        struct.setCachedIdsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.fromType = iprot.readI16();
        struct.setFromTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.version = iprot.readI16();
        struct.setVersionIsSet(true);
      }
    }
  }

}

