/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 通告商店物品信息
 */
public class SCAnnounceShopItems implements org.apache.thrift.TBase<SCAnnounceShopItems, SCAnnounceShopItems._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCAnnounceShopItems");

  private static final org.apache.thrift.protocol.TField SHOP_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("shopVersion", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("items", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField REFRESH_COST_FIELD_DESC = new org.apache.thrift.protocol.TField("refreshCost", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField LEFT_FREE_TIMES_FIELD_DESC = new org.apache.thrift.protocol.TField("leftFreeTimes", org.apache.thrift.protocol.TType.I16, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCAnnounceShopItemsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCAnnounceShopItemsTupleSchemeFactory());
  }

  /**
   * 通告商店版本
   */
  public int shopVersion; // required
  /**
   * key : 商品id ,val: 商品消耗
   */
  public List<com.ling9527.music.common.msg.auto.ItemObject> items; // required
  /**
   * 刷新消耗
   */
  public int refreshCost; // required
  /**
   * 剩余免费刷新次数
   */
  public short leftFreeTimes; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 通告商店版本
     */
    SHOP_VERSION((short)1, "shopVersion"),
    /**
     * key : 商品id ,val: 商品消耗
     */
    ITEMS((short)2, "items"),
    /**
     * 刷新消耗
     */
    REFRESH_COST((short)3, "refreshCost"),
    /**
     * 剩余免费刷新次数
     */
    LEFT_FREE_TIMES((short)4, "leftFreeTimes");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SHOP_VERSION
          return SHOP_VERSION;
        case 2: // ITEMS
          return ITEMS;
        case 3: // REFRESH_COST
          return REFRESH_COST;
        case 4: // LEFT_FREE_TIMES
          return LEFT_FREE_TIMES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SHOPVERSION_ISSET_ID = 0;
  private static final int __REFRESHCOST_ISSET_ID = 1;
  private static final int __LEFTFREETIMES_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SHOP_VERSION, new org.apache.thrift.meta_data.FieldMetaData("shopVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ITEMS, new org.apache.thrift.meta_data.FieldMetaData("items", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.ItemObject.class))));
    tmpMap.put(_Fields.REFRESH_COST, new org.apache.thrift.meta_data.FieldMetaData("refreshCost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LEFT_FREE_TIMES, new org.apache.thrift.meta_data.FieldMetaData("leftFreeTimes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCAnnounceShopItems.class, metaDataMap);
  }

  public SCAnnounceShopItems() {
  }

  public SCAnnounceShopItems(
    int shopVersion,
    List<com.ling9527.music.common.msg.auto.ItemObject> items,
    int refreshCost,
    short leftFreeTimes)
  {
    this();
    this.shopVersion = shopVersion;
    setShopVersionIsSet(true);
    this.items = items;
    this.refreshCost = refreshCost;
    setRefreshCostIsSet(true);
    this.leftFreeTimes = leftFreeTimes;
    setLeftFreeTimesIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCAnnounceShopItems(SCAnnounceShopItems other) {
    __isset_bitfield = other.__isset_bitfield;
    this.shopVersion = other.shopVersion;
    if (other.isSetItems()) {
      List<com.ling9527.music.common.msg.auto.ItemObject> __this__items = new ArrayList<com.ling9527.music.common.msg.auto.ItemObject>();
      for (com.ling9527.music.common.msg.auto.ItemObject other_element : other.items) {
        __this__items.add(new com.ling9527.music.common.msg.auto.ItemObject(other_element));
      }
      this.items = __this__items;
    }
    this.refreshCost = other.refreshCost;
    this.leftFreeTimes = other.leftFreeTimes;
  }

  public SCAnnounceShopItems deepCopy() {
    return new SCAnnounceShopItems(this);
  }

  @Override
  public void clear() {
    setShopVersionIsSet(false);
    this.shopVersion = 0;
    this.items = null;
    setRefreshCostIsSet(false);
    this.refreshCost = 0;
    setLeftFreeTimesIsSet(false);
    this.leftFreeTimes = 0;
  }

  /**
   * 通告商店版本
   */
  public int getShopVersion() {
    return this.shopVersion;
  }

  /**
   * 通告商店版本
   */
  public SCAnnounceShopItems setShopVersion(int shopVersion) {
    this.shopVersion = shopVersion;
    setShopVersionIsSet(true);
    return this;
  }

  public void unsetShopVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOPVERSION_ISSET_ID);
  }

  /** Returns true if field shopVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetShopVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __SHOPVERSION_ISSET_ID);
  }

  public void setShopVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOPVERSION_ISSET_ID, value);
  }

  public int getItemsSize() {
    return (this.items == null) ? 0 : this.items.size();
  }

  public java.util.Iterator<com.ling9527.music.common.msg.auto.ItemObject> getItemsIterator() {
    return (this.items == null) ? null : this.items.iterator();
  }

  public void addToItems(com.ling9527.music.common.msg.auto.ItemObject elem) {
    if (this.items == null) {
      this.items = new ArrayList<com.ling9527.music.common.msg.auto.ItemObject>();
    }
    this.items.add(elem);
  }

  /**
   * key : 商品id ,val: 商品消耗
   */
  public List<com.ling9527.music.common.msg.auto.ItemObject> getItems() {
    return this.items;
  }

  /**
   * key : 商品id ,val: 商品消耗
   */
  public SCAnnounceShopItems setItems(List<com.ling9527.music.common.msg.auto.ItemObject> items) {
    this.items = items;
    return this;
  }

  public void unsetItems() {
    this.items = null;
  }

  /** Returns true if field items is set (has been assigned a value) and false otherwise */
  public boolean isSetItems() {
    return this.items != null;
  }

  public void setItemsIsSet(boolean value) {
    if (!value) {
      this.items = null;
    }
  }

  /**
   * 刷新消耗
   */
  public int getRefreshCost() {
    return this.refreshCost;
  }

  /**
   * 刷新消耗
   */
  public SCAnnounceShopItems setRefreshCost(int refreshCost) {
    this.refreshCost = refreshCost;
    setRefreshCostIsSet(true);
    return this;
  }

  public void unsetRefreshCost() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFRESHCOST_ISSET_ID);
  }

  /** Returns true if field refreshCost is set (has been assigned a value) and false otherwise */
  public boolean isSetRefreshCost() {
    return EncodingUtils.testBit(__isset_bitfield, __REFRESHCOST_ISSET_ID);
  }

  public void setRefreshCostIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFRESHCOST_ISSET_ID, value);
  }

  /**
   * 剩余免费刷新次数
   */
  public short getLeftFreeTimes() {
    return this.leftFreeTimes;
  }

  /**
   * 剩余免费刷新次数
   */
  public SCAnnounceShopItems setLeftFreeTimes(short leftFreeTimes) {
    this.leftFreeTimes = leftFreeTimes;
    setLeftFreeTimesIsSet(true);
    return this;
  }

  public void unsetLeftFreeTimes() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEFTFREETIMES_ISSET_ID);
  }

  /** Returns true if field leftFreeTimes is set (has been assigned a value) and false otherwise */
  public boolean isSetLeftFreeTimes() {
    return EncodingUtils.testBit(__isset_bitfield, __LEFTFREETIMES_ISSET_ID);
  }

  public void setLeftFreeTimesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEFTFREETIMES_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SHOP_VERSION:
      if (value == null) {
        unsetShopVersion();
      } else {
        setShopVersion((Integer)value);
      }
      break;

    case ITEMS:
      if (value == null) {
        unsetItems();
      } else {
        setItems((List<com.ling9527.music.common.msg.auto.ItemObject>)value);
      }
      break;

    case REFRESH_COST:
      if (value == null) {
        unsetRefreshCost();
      } else {
        setRefreshCost((Integer)value);
      }
      break;

    case LEFT_FREE_TIMES:
      if (value == null) {
        unsetLeftFreeTimes();
      } else {
        setLeftFreeTimes((Short)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SHOP_VERSION:
      return Integer.valueOf(getShopVersion());

    case ITEMS:
      return getItems();

    case REFRESH_COST:
      return Integer.valueOf(getRefreshCost());

    case LEFT_FREE_TIMES:
      return Short.valueOf(getLeftFreeTimes());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SHOP_VERSION:
      return isSetShopVersion();
    case ITEMS:
      return isSetItems();
    case REFRESH_COST:
      return isSetRefreshCost();
    case LEFT_FREE_TIMES:
      return isSetLeftFreeTimes();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCAnnounceShopItems)
      return this.equals((SCAnnounceShopItems)that);
    return false;
  }

  public boolean equals(SCAnnounceShopItems that) {
    if (that == null)
      return false;

    boolean this_present_shopVersion = true;
    boolean that_present_shopVersion = true;
    if (this_present_shopVersion || that_present_shopVersion) {
      if (!(this_present_shopVersion && that_present_shopVersion))
        return false;
      if (this.shopVersion != that.shopVersion)
        return false;
    }

    boolean this_present_items = true && this.isSetItems();
    boolean that_present_items = true && that.isSetItems();
    if (this_present_items || that_present_items) {
      if (!(this_present_items && that_present_items))
        return false;
      if (!this.items.equals(that.items))
        return false;
    }

    boolean this_present_refreshCost = true;
    boolean that_present_refreshCost = true;
    if (this_present_refreshCost || that_present_refreshCost) {
      if (!(this_present_refreshCost && that_present_refreshCost))
        return false;
      if (this.refreshCost != that.refreshCost)
        return false;
    }

    boolean this_present_leftFreeTimes = true;
    boolean that_present_leftFreeTimes = true;
    if (this_present_leftFreeTimes || that_present_leftFreeTimes) {
      if (!(this_present_leftFreeTimes && that_present_leftFreeTimes))
        return false;
      if (this.leftFreeTimes != that.leftFreeTimes)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCAnnounceShopItems other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCAnnounceShopItems typedOther = (SCAnnounceShopItems)other;

    lastComparison = Boolean.valueOf(isSetShopVersion()).compareTo(typedOther.isSetShopVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShopVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shopVersion, typedOther.shopVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItems()).compareTo(typedOther.isSetItems());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItems()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.items, typedOther.items);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefreshCost()).compareTo(typedOther.isSetRefreshCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefreshCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refreshCost, typedOther.refreshCost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLeftFreeTimes()).compareTo(typedOther.isSetLeftFreeTimes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeftFreeTimes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leftFreeTimes, typedOther.leftFreeTimes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCAnnounceShopItems(");
    boolean first = true;

    sb.append("shopVersion:");
    sb.append(this.shopVersion);
    first = false;
    if (!first) sb.append(", ");
    sb.append("items:");
    if (this.items == null) {
      sb.append("null");
    } else {
      sb.append(this.items);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("refreshCost:");
    sb.append(this.refreshCost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("leftFreeTimes:");
    sb.append(this.leftFreeTimes);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCAnnounceShopItemsStandardSchemeFactory implements SchemeFactory {
    public SCAnnounceShopItemsStandardScheme getScheme() {
      return new SCAnnounceShopItemsStandardScheme();
    }
  }

  private static class SCAnnounceShopItemsStandardScheme extends StandardScheme<SCAnnounceShopItems> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCAnnounceShopItems struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SHOP_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.shopVersion = iprot.readI32();
              struct.setShopVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ITEMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.items = new ArrayList<com.ling9527.music.common.msg.auto.ItemObject>(_list8.size);
                for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                {
                  com.ling9527.music.common.msg.auto.ItemObject _elem10; // required
                  _elem10 = new com.ling9527.music.common.msg.auto.ItemObject();
                  _elem10.read(iprot);
                  struct.items.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setItemsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REFRESH_COST
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.refreshCost = iprot.readI32();
              struct.setRefreshCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LEFT_FREE_TIMES
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.leftFreeTimes = iprot.readI16();
              struct.setLeftFreeTimesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCAnnounceShopItems struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SHOP_VERSION_FIELD_DESC);
      oprot.writeI32(struct.shopVersion);
      oprot.writeFieldEnd();
      if (struct.items != null) {
        oprot.writeFieldBegin(ITEMS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.items.size()));
          for (com.ling9527.music.common.msg.auto.ItemObject _iter11 : struct.items)
          {
            _iter11.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REFRESH_COST_FIELD_DESC);
      oprot.writeI32(struct.refreshCost);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LEFT_FREE_TIMES_FIELD_DESC);
      oprot.writeI16(struct.leftFreeTimes);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCAnnounceShopItemsTupleSchemeFactory implements SchemeFactory {
    public SCAnnounceShopItemsTupleScheme getScheme() {
      return new SCAnnounceShopItemsTupleScheme();
    }
  }

  private static class SCAnnounceShopItemsTupleScheme extends TupleScheme<SCAnnounceShopItems> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCAnnounceShopItems struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetShopVersion()) {
        optionals.set(0);
      }
      if (struct.isSetItems()) {
        optionals.set(1);
      }
      if (struct.isSetRefreshCost()) {
        optionals.set(2);
      }
      if (struct.isSetLeftFreeTimes()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetShopVersion()) {
        oprot.writeI32(struct.shopVersion);
      }
      if (struct.isSetItems()) {
        {
          oprot.writeI32(struct.items.size());
          for (com.ling9527.music.common.msg.auto.ItemObject _iter12 : struct.items)
          {
            _iter12.write(oprot);
          }
        }
      }
      if (struct.isSetRefreshCost()) {
        oprot.writeI32(struct.refreshCost);
      }
      if (struct.isSetLeftFreeTimes()) {
        oprot.writeI16(struct.leftFreeTimes);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCAnnounceShopItems struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.shopVersion = iprot.readI32();
        struct.setShopVersionIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.items = new ArrayList<com.ling9527.music.common.msg.auto.ItemObject>(_list13.size);
          for (int _i14 = 0; _i14 < _list13.size; ++_i14)
          {
            com.ling9527.music.common.msg.auto.ItemObject _elem15; // required
            _elem15 = new com.ling9527.music.common.msg.auto.ItemObject();
            _elem15.read(iprot);
            struct.items.add(_elem15);
          }
        }
        struct.setItemsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.refreshCost = iprot.readI32();
        struct.setRefreshCostIsSet(true);
      }
      if (incoming.get(3)) {
        struct.leftFreeTimes = iprot.readI16();
        struct.setLeftFreeTimesIsSet(true);
      }
    }
  }

}

