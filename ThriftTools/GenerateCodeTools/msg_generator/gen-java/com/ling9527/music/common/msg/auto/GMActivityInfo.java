/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class GMActivityInfo implements org.apache.thrift.TBase<GMActivityInfo, GMActivityInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GMActivityInfo");

  private static final org.apache.thrift.protocol.TField ACTIVIY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("activiyId", org.apache.thrift.protocol.TType.I16, (short)1);
  private static final org.apache.thrift.protocol.TField ACTIVITY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("activityName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ICON_FIELD_DESC = new org.apache.thrift.protocol.TField("icon", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.BYTE, (short)5);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.BYTE, (short)6);
  private static final org.apache.thrift.protocol.TField SUB_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("subType", org.apache.thrift.protocol.TType.BYTE, (short)7);
  private static final org.apache.thrift.protocol.TField BEGIN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("beginTime", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField COMPLETED_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("completedParam", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("param", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField PRIZE_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("prizeInfos", org.apache.thrift.protocol.TType.STRUCT, (short)12);
  private static final org.apache.thrift.protocol.TField PARAM_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("paramDesc", org.apache.thrift.protocol.TType.LIST, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GMActivityInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GMActivityInfoTupleSchemeFactory());
  }

  public short activiyId; // required
  public String activityName; // required
  public String icon; // required
  public String content; // required
  public byte state; // required
  public byte type; // required
  public byte subType; // required
  public long beginTime; // required
  public long endTime; // required
  public List<String> completedParam; // required
  public List<String> param; // required
  /**
   * 奖励
   */
  public PrizeInfo prizeInfos; // optional
  public List<String> paramDesc; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ACTIVIY_ID((short)1, "activiyId"),
    ACTIVITY_NAME((short)2, "activityName"),
    ICON((short)3, "icon"),
    CONTENT((short)4, "content"),
    STATE((short)5, "state"),
    TYPE((short)6, "type"),
    SUB_TYPE((short)7, "subType"),
    BEGIN_TIME((short)8, "beginTime"),
    END_TIME((short)9, "endTime"),
    COMPLETED_PARAM((short)10, "completedParam"),
    PARAM((short)11, "param"),
    /**
     * 奖励
     */
    PRIZE_INFOS((short)12, "prizeInfos"),
    PARAM_DESC((short)13, "paramDesc");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACTIVIY_ID
          return ACTIVIY_ID;
        case 2: // ACTIVITY_NAME
          return ACTIVITY_NAME;
        case 3: // ICON
          return ICON;
        case 4: // CONTENT
          return CONTENT;
        case 5: // STATE
          return STATE;
        case 6: // TYPE
          return TYPE;
        case 7: // SUB_TYPE
          return SUB_TYPE;
        case 8: // BEGIN_TIME
          return BEGIN_TIME;
        case 9: // END_TIME
          return END_TIME;
        case 10: // COMPLETED_PARAM
          return COMPLETED_PARAM;
        case 11: // PARAM
          return PARAM;
        case 12: // PRIZE_INFOS
          return PRIZE_INFOS;
        case 13: // PARAM_DESC
          return PARAM_DESC;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ACTIVIYID_ISSET_ID = 0;
  private static final int __STATE_ISSET_ID = 1;
  private static final int __TYPE_ISSET_ID = 2;
  private static final int __SUBTYPE_ISSET_ID = 3;
  private static final int __BEGINTIME_ISSET_ID = 4;
  private static final int __ENDTIME_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.PRIZE_INFOS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACTIVIY_ID, new org.apache.thrift.meta_data.FieldMetaData("activiyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.ACTIVITY_NAME, new org.apache.thrift.meta_data.FieldMetaData("activityName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ICON, new org.apache.thrift.meta_data.FieldMetaData("icon", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.SUB_TYPE, new org.apache.thrift.meta_data.FieldMetaData("subType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.BEGIN_TIME, new org.apache.thrift.meta_data.FieldMetaData("beginTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COMPLETED_PARAM, new org.apache.thrift.meta_data.FieldMetaData("completedParam", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.PARAM, new org.apache.thrift.meta_data.FieldMetaData("param", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.PRIZE_INFOS, new org.apache.thrift.meta_data.FieldMetaData("prizeInfos", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrizeInfo.class)));
    tmpMap.put(_Fields.PARAM_DESC, new org.apache.thrift.meta_data.FieldMetaData("paramDesc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GMActivityInfo.class, metaDataMap);
  }

  public GMActivityInfo() {
  }

  public GMActivityInfo(
    short activiyId,
    String activityName,
    String icon,
    String content,
    byte state,
    byte type,
    byte subType,
    long beginTime,
    long endTime,
    List<String> completedParam,
    List<String> param,
    List<String> paramDesc)
  {
    this();
    this.activiyId = activiyId;
    setActiviyIdIsSet(true);
    this.activityName = activityName;
    this.icon = icon;
    this.content = content;
    this.state = state;
    setStateIsSet(true);
    this.type = type;
    setTypeIsSet(true);
    this.subType = subType;
    setSubTypeIsSet(true);
    this.beginTime = beginTime;
    setBeginTimeIsSet(true);
    this.endTime = endTime;
    setEndTimeIsSet(true);
    this.completedParam = completedParam;
    this.param = param;
    this.paramDesc = paramDesc;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GMActivityInfo(GMActivityInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.activiyId = other.activiyId;
    if (other.isSetActivityName()) {
      this.activityName = other.activityName;
    }
    if (other.isSetIcon()) {
      this.icon = other.icon;
    }
    if (other.isSetContent()) {
      this.content = other.content;
    }
    this.state = other.state;
    this.type = other.type;
    this.subType = other.subType;
    this.beginTime = other.beginTime;
    this.endTime = other.endTime;
    if (other.isSetCompletedParam()) {
      List<String> __this__completedParam = new ArrayList<String>();
      for (String other_element : other.completedParam) {
        __this__completedParam.add(other_element);
      }
      this.completedParam = __this__completedParam;
    }
    if (other.isSetParam()) {
      List<String> __this__param = new ArrayList<String>();
      for (String other_element : other.param) {
        __this__param.add(other_element);
      }
      this.param = __this__param;
    }
    if (other.isSetPrizeInfos()) {
      this.prizeInfos = new PrizeInfo(other.prizeInfos);
    }
    if (other.isSetParamDesc()) {
      List<String> __this__paramDesc = new ArrayList<String>();
      for (String other_element : other.paramDesc) {
        __this__paramDesc.add(other_element);
      }
      this.paramDesc = __this__paramDesc;
    }
  }

  public GMActivityInfo deepCopy() {
    return new GMActivityInfo(this);
  }

  @Override
  public void clear() {
    setActiviyIdIsSet(false);
    this.activiyId = 0;
    this.activityName = null;
    this.icon = null;
    this.content = null;
    setStateIsSet(false);
    this.state = 0;
    setTypeIsSet(false);
    this.type = 0;
    setSubTypeIsSet(false);
    this.subType = 0;
    setBeginTimeIsSet(false);
    this.beginTime = 0;
    setEndTimeIsSet(false);
    this.endTime = 0;
    this.completedParam = null;
    this.param = null;
    this.prizeInfos = null;
    this.paramDesc = null;
  }

  public short getActiviyId() {
    return this.activiyId;
  }

  public GMActivityInfo setActiviyId(short activiyId) {
    this.activiyId = activiyId;
    setActiviyIdIsSet(true);
    return this;
  }

  public void unsetActiviyId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIVIYID_ISSET_ID);
  }

  /** Returns true if field activiyId is set (has been assigned a value) and false otherwise */
  public boolean isSetActiviyId() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTIVIYID_ISSET_ID);
  }

  public void setActiviyIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIVIYID_ISSET_ID, value);
  }

  public String getActivityName() {
    return this.activityName;
  }

  public GMActivityInfo setActivityName(String activityName) {
    this.activityName = activityName;
    return this;
  }

  public void unsetActivityName() {
    this.activityName = null;
  }

  /** Returns true if field activityName is set (has been assigned a value) and false otherwise */
  public boolean isSetActivityName() {
    return this.activityName != null;
  }

  public void setActivityNameIsSet(boolean value) {
    if (!value) {
      this.activityName = null;
    }
  }

  public String getIcon() {
    return this.icon;
  }

  public GMActivityInfo setIcon(String icon) {
    this.icon = icon;
    return this;
  }

  public void unsetIcon() {
    this.icon = null;
  }

  /** Returns true if field icon is set (has been assigned a value) and false otherwise */
  public boolean isSetIcon() {
    return this.icon != null;
  }

  public void setIconIsSet(boolean value) {
    if (!value) {
      this.icon = null;
    }
  }

  public String getContent() {
    return this.content;
  }

  public GMActivityInfo setContent(String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public byte getState() {
    return this.state;
  }

  public GMActivityInfo setState(byte state) {
    this.state = state;
    setStateIsSet(true);
    return this;
  }

  public void unsetState() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATE_ISSET_ID);
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return EncodingUtils.testBit(__isset_bitfield, __STATE_ISSET_ID);
  }

  public void setStateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATE_ISSET_ID, value);
  }

  public byte getType() {
    return this.type;
  }

  public GMActivityInfo setType(byte type) {
    this.type = type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
  }

  public byte getSubType() {
    return this.subType;
  }

  public GMActivityInfo setSubType(byte subType) {
    this.subType = subType;
    setSubTypeIsSet(true);
    return this;
  }

  public void unsetSubType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBTYPE_ISSET_ID);
  }

  /** Returns true if field subType is set (has been assigned a value) and false otherwise */
  public boolean isSetSubType() {
    return EncodingUtils.testBit(__isset_bitfield, __SUBTYPE_ISSET_ID);
  }

  public void setSubTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBTYPE_ISSET_ID, value);
  }

  public long getBeginTime() {
    return this.beginTime;
  }

  public GMActivityInfo setBeginTime(long beginTime) {
    this.beginTime = beginTime;
    setBeginTimeIsSet(true);
    return this;
  }

  public void unsetBeginTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BEGINTIME_ISSET_ID);
  }

  /** Returns true if field beginTime is set (has been assigned a value) and false otherwise */
  public boolean isSetBeginTime() {
    return EncodingUtils.testBit(__isset_bitfield, __BEGINTIME_ISSET_ID);
  }

  public void setBeginTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BEGINTIME_ISSET_ID, value);
  }

  public long getEndTime() {
    return this.endTime;
  }

  public GMActivityInfo setEndTime(long endTime) {
    this.endTime = endTime;
    setEndTimeIsSet(true);
    return this;
  }

  public void unsetEndTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  public void setEndTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
  }

  public int getCompletedParamSize() {
    return (this.completedParam == null) ? 0 : this.completedParam.size();
  }

  public java.util.Iterator<String> getCompletedParamIterator() {
    return (this.completedParam == null) ? null : this.completedParam.iterator();
  }

  public void addToCompletedParam(String elem) {
    if (this.completedParam == null) {
      this.completedParam = new ArrayList<String>();
    }
    this.completedParam.add(elem);
  }

  public List<String> getCompletedParam() {
    return this.completedParam;
  }

  public GMActivityInfo setCompletedParam(List<String> completedParam) {
    this.completedParam = completedParam;
    return this;
  }

  public void unsetCompletedParam() {
    this.completedParam = null;
  }

  /** Returns true if field completedParam is set (has been assigned a value) and false otherwise */
  public boolean isSetCompletedParam() {
    return this.completedParam != null;
  }

  public void setCompletedParamIsSet(boolean value) {
    if (!value) {
      this.completedParam = null;
    }
  }

  public int getParamSize() {
    return (this.param == null) ? 0 : this.param.size();
  }

  public java.util.Iterator<String> getParamIterator() {
    return (this.param == null) ? null : this.param.iterator();
  }

  public void addToParam(String elem) {
    if (this.param == null) {
      this.param = new ArrayList<String>();
    }
    this.param.add(elem);
  }

  public List<String> getParam() {
    return this.param;
  }

  public GMActivityInfo setParam(List<String> param) {
    this.param = param;
    return this;
  }

  public void unsetParam() {
    this.param = null;
  }

  /** Returns true if field param is set (has been assigned a value) and false otherwise */
  public boolean isSetParam() {
    return this.param != null;
  }

  public void setParamIsSet(boolean value) {
    if (!value) {
      this.param = null;
    }
  }

  /**
   * 奖励
   */
  public PrizeInfo getPrizeInfos() {
    return this.prizeInfos;
  }

  /**
   * 奖励
   */
  public GMActivityInfo setPrizeInfos(PrizeInfo prizeInfos) {
    this.prizeInfos = prizeInfos;
    return this;
  }

  public void unsetPrizeInfos() {
    this.prizeInfos = null;
  }

  /** Returns true if field prizeInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetPrizeInfos() {
    return this.prizeInfos != null;
  }

  public void setPrizeInfosIsSet(boolean value) {
    if (!value) {
      this.prizeInfos = null;
    }
  }

  public int getParamDescSize() {
    return (this.paramDesc == null) ? 0 : this.paramDesc.size();
  }

  public java.util.Iterator<String> getParamDescIterator() {
    return (this.paramDesc == null) ? null : this.paramDesc.iterator();
  }

  public void addToParamDesc(String elem) {
    if (this.paramDesc == null) {
      this.paramDesc = new ArrayList<String>();
    }
    this.paramDesc.add(elem);
  }

  public List<String> getParamDesc() {
    return this.paramDesc;
  }

  public GMActivityInfo setParamDesc(List<String> paramDesc) {
    this.paramDesc = paramDesc;
    return this;
  }

  public void unsetParamDesc() {
    this.paramDesc = null;
  }

  /** Returns true if field paramDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetParamDesc() {
    return this.paramDesc != null;
  }

  public void setParamDescIsSet(boolean value) {
    if (!value) {
      this.paramDesc = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ACTIVIY_ID:
      if (value == null) {
        unsetActiviyId();
      } else {
        setActiviyId((Short)value);
      }
      break;

    case ACTIVITY_NAME:
      if (value == null) {
        unsetActivityName();
      } else {
        setActivityName((String)value);
      }
      break;

    case ICON:
      if (value == null) {
        unsetIcon();
      } else {
        setIcon((String)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((Byte)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Byte)value);
      }
      break;

    case SUB_TYPE:
      if (value == null) {
        unsetSubType();
      } else {
        setSubType((Byte)value);
      }
      break;

    case BEGIN_TIME:
      if (value == null) {
        unsetBeginTime();
      } else {
        setBeginTime((Long)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((Long)value);
      }
      break;

    case COMPLETED_PARAM:
      if (value == null) {
        unsetCompletedParam();
      } else {
        setCompletedParam((List<String>)value);
      }
      break;

    case PARAM:
      if (value == null) {
        unsetParam();
      } else {
        setParam((List<String>)value);
      }
      break;

    case PRIZE_INFOS:
      if (value == null) {
        unsetPrizeInfos();
      } else {
        setPrizeInfos((PrizeInfo)value);
      }
      break;

    case PARAM_DESC:
      if (value == null) {
        unsetParamDesc();
      } else {
        setParamDesc((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ACTIVIY_ID:
      return Short.valueOf(getActiviyId());

    case ACTIVITY_NAME:
      return getActivityName();

    case ICON:
      return getIcon();

    case CONTENT:
      return getContent();

    case STATE:
      return Byte.valueOf(getState());

    case TYPE:
      return Byte.valueOf(getType());

    case SUB_TYPE:
      return Byte.valueOf(getSubType());

    case BEGIN_TIME:
      return Long.valueOf(getBeginTime());

    case END_TIME:
      return Long.valueOf(getEndTime());

    case COMPLETED_PARAM:
      return getCompletedParam();

    case PARAM:
      return getParam();

    case PRIZE_INFOS:
      return getPrizeInfos();

    case PARAM_DESC:
      return getParamDesc();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ACTIVIY_ID:
      return isSetActiviyId();
    case ACTIVITY_NAME:
      return isSetActivityName();
    case ICON:
      return isSetIcon();
    case CONTENT:
      return isSetContent();
    case STATE:
      return isSetState();
    case TYPE:
      return isSetType();
    case SUB_TYPE:
      return isSetSubType();
    case BEGIN_TIME:
      return isSetBeginTime();
    case END_TIME:
      return isSetEndTime();
    case COMPLETED_PARAM:
      return isSetCompletedParam();
    case PARAM:
      return isSetParam();
    case PRIZE_INFOS:
      return isSetPrizeInfos();
    case PARAM_DESC:
      return isSetParamDesc();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GMActivityInfo)
      return this.equals((GMActivityInfo)that);
    return false;
  }

  public boolean equals(GMActivityInfo that) {
    if (that == null)
      return false;

    boolean this_present_activiyId = true;
    boolean that_present_activiyId = true;
    if (this_present_activiyId || that_present_activiyId) {
      if (!(this_present_activiyId && that_present_activiyId))
        return false;
      if (this.activiyId != that.activiyId)
        return false;
    }

    boolean this_present_activityName = true && this.isSetActivityName();
    boolean that_present_activityName = true && that.isSetActivityName();
    if (this_present_activityName || that_present_activityName) {
      if (!(this_present_activityName && that_present_activityName))
        return false;
      if (!this.activityName.equals(that.activityName))
        return false;
    }

    boolean this_present_icon = true && this.isSetIcon();
    boolean that_present_icon = true && that.isSetIcon();
    if (this_present_icon || that_present_icon) {
      if (!(this_present_icon && that_present_icon))
        return false;
      if (!this.icon.equals(that.icon))
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_state = true;
    boolean that_present_state = true;
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (this.state != that.state)
        return false;
    }

    boolean this_present_type = true;
    boolean that_present_type = true;
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    boolean this_present_subType = true;
    boolean that_present_subType = true;
    if (this_present_subType || that_present_subType) {
      if (!(this_present_subType && that_present_subType))
        return false;
      if (this.subType != that.subType)
        return false;
    }

    boolean this_present_beginTime = true;
    boolean that_present_beginTime = true;
    if (this_present_beginTime || that_present_beginTime) {
      if (!(this_present_beginTime && that_present_beginTime))
        return false;
      if (this.beginTime != that.beginTime)
        return false;
    }

    boolean this_present_endTime = true;
    boolean that_present_endTime = true;
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (this.endTime != that.endTime)
        return false;
    }

    boolean this_present_completedParam = true && this.isSetCompletedParam();
    boolean that_present_completedParam = true && that.isSetCompletedParam();
    if (this_present_completedParam || that_present_completedParam) {
      if (!(this_present_completedParam && that_present_completedParam))
        return false;
      if (!this.completedParam.equals(that.completedParam))
        return false;
    }

    boolean this_present_param = true && this.isSetParam();
    boolean that_present_param = true && that.isSetParam();
    if (this_present_param || that_present_param) {
      if (!(this_present_param && that_present_param))
        return false;
      if (!this.param.equals(that.param))
        return false;
    }

    boolean this_present_prizeInfos = true && this.isSetPrizeInfos();
    boolean that_present_prizeInfos = true && that.isSetPrizeInfos();
    if (this_present_prizeInfos || that_present_prizeInfos) {
      if (!(this_present_prizeInfos && that_present_prizeInfos))
        return false;
      if (!this.prizeInfos.equals(that.prizeInfos))
        return false;
    }

    boolean this_present_paramDesc = true && this.isSetParamDesc();
    boolean that_present_paramDesc = true && that.isSetParamDesc();
    if (this_present_paramDesc || that_present_paramDesc) {
      if (!(this_present_paramDesc && that_present_paramDesc))
        return false;
      if (!this.paramDesc.equals(that.paramDesc))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(GMActivityInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    GMActivityInfo typedOther = (GMActivityInfo)other;

    lastComparison = Boolean.valueOf(isSetActiviyId()).compareTo(typedOther.isSetActiviyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiviyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activiyId, typedOther.activiyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActivityName()).compareTo(typedOther.isSetActivityName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActivityName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activityName, typedOther.activityName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIcon()).compareTo(typedOther.isSetIcon());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIcon()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.icon, typedOther.icon);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(typedOther.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, typedOther.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetState()).compareTo(typedOther.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, typedOther.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, typedOther.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubType()).compareTo(typedOther.isSetSubType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subType, typedOther.subType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBeginTime()).compareTo(typedOther.isSetBeginTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBeginTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.beginTime, typedOther.beginTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(typedOther.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, typedOther.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompletedParam()).compareTo(typedOther.isSetCompletedParam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompletedParam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.completedParam, typedOther.completedParam);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParam()).compareTo(typedOther.isSetParam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param, typedOther.param);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrizeInfos()).compareTo(typedOther.isSetPrizeInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrizeInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prizeInfos, typedOther.prizeInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParamDesc()).compareTo(typedOther.isSetParamDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParamDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramDesc, typedOther.paramDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GMActivityInfo(");
    boolean first = true;

    sb.append("activiyId:");
    sb.append(this.activiyId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("activityName:");
    if (this.activityName == null) {
      sb.append("null");
    } else {
      sb.append(this.activityName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("icon:");
    if (this.icon == null) {
      sb.append("null");
    } else {
      sb.append(this.icon);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      sb.append(this.content);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("state:");
    sb.append(this.state);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    sb.append(this.type);
    first = false;
    if (!first) sb.append(", ");
    sb.append("subType:");
    sb.append(this.subType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("beginTime:");
    sb.append(this.beginTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endTime:");
    sb.append(this.endTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("completedParam:");
    if (this.completedParam == null) {
      sb.append("null");
    } else {
      sb.append(this.completedParam);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("param:");
    if (this.param == null) {
      sb.append("null");
    } else {
      sb.append(this.param);
    }
    first = false;
    if (isSetPrizeInfos()) {
      if (!first) sb.append(", ");
      sb.append("prizeInfos:");
      if (this.prizeInfos == null) {
        sb.append("null");
      } else {
        sb.append(this.prizeInfos);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("paramDesc:");
    if (this.paramDesc == null) {
      sb.append("null");
    } else {
      sb.append(this.paramDesc);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (prizeInfos != null) {
      prizeInfos.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GMActivityInfoStandardSchemeFactory implements SchemeFactory {
    public GMActivityInfoStandardScheme getScheme() {
      return new GMActivityInfoStandardScheme();
    }
  }

  private static class GMActivityInfoStandardScheme extends StandardScheme<GMActivityInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GMActivityInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ACTIVIY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.activiyId = iprot.readI16();
              struct.setActiviyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ACTIVITY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.activityName = iprot.readString();
              struct.setActivityNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ICON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.icon = iprot.readString();
              struct.setIconIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.state = iprot.readByte();
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.type = iprot.readByte();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SUB_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.subType = iprot.readByte();
              struct.setSubTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BEGIN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.beginTime = iprot.readI64();
              struct.setBeginTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.endTime = iprot.readI64();
              struct.setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // COMPLETED_PARAM
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list292 = iprot.readListBegin();
                struct.completedParam = new ArrayList<String>(_list292.size);
                for (int _i293 = 0; _i293 < _list292.size; ++_i293)
                {
                  String _elem294; // required
                  _elem294 = iprot.readString();
                  struct.completedParam.add(_elem294);
                }
                iprot.readListEnd();
              }
              struct.setCompletedParamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PARAM
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list295 = iprot.readListBegin();
                struct.param = new ArrayList<String>(_list295.size);
                for (int _i296 = 0; _i296 < _list295.size; ++_i296)
                {
                  String _elem297; // required
                  _elem297 = iprot.readString();
                  struct.param.add(_elem297);
                }
                iprot.readListEnd();
              }
              struct.setParamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PRIZE_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.prizeInfos = new PrizeInfo();
              struct.prizeInfos.read(iprot);
              struct.setPrizeInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PARAM_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list298 = iprot.readListBegin();
                struct.paramDesc = new ArrayList<String>(_list298.size);
                for (int _i299 = 0; _i299 < _list298.size; ++_i299)
                {
                  String _elem300; // required
                  _elem300 = iprot.readString();
                  struct.paramDesc.add(_elem300);
                }
                iprot.readListEnd();
              }
              struct.setParamDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GMActivityInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ACTIVIY_ID_FIELD_DESC);
      oprot.writeI16(struct.activiyId);
      oprot.writeFieldEnd();
      if (struct.activityName != null) {
        oprot.writeFieldBegin(ACTIVITY_NAME_FIELD_DESC);
        oprot.writeString(struct.activityName);
        oprot.writeFieldEnd();
      }
      if (struct.icon != null) {
        oprot.writeFieldBegin(ICON_FIELD_DESC);
        oprot.writeString(struct.icon);
        oprot.writeFieldEnd();
      }
      if (struct.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeString(struct.content);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATE_FIELD_DESC);
      oprot.writeByte(struct.state);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeByte(struct.type);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SUB_TYPE_FIELD_DESC);
      oprot.writeByte(struct.subType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BEGIN_TIME_FIELD_DESC);
      oprot.writeI64(struct.beginTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(END_TIME_FIELD_DESC);
      oprot.writeI64(struct.endTime);
      oprot.writeFieldEnd();
      if (struct.completedParam != null) {
        oprot.writeFieldBegin(COMPLETED_PARAM_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.completedParam.size()));
          for (String _iter301 : struct.completedParam)
          {
            oprot.writeString(_iter301);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.param != null) {
        oprot.writeFieldBegin(PARAM_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.param.size()));
          for (String _iter302 : struct.param)
          {
            oprot.writeString(_iter302);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.prizeInfos != null) {
        if (struct.isSetPrizeInfos()) {
          oprot.writeFieldBegin(PRIZE_INFOS_FIELD_DESC);
          struct.prizeInfos.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.paramDesc != null) {
        oprot.writeFieldBegin(PARAM_DESC_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.paramDesc.size()));
          for (String _iter303 : struct.paramDesc)
          {
            oprot.writeString(_iter303);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GMActivityInfoTupleSchemeFactory implements SchemeFactory {
    public GMActivityInfoTupleScheme getScheme() {
      return new GMActivityInfoTupleScheme();
    }
  }

  private static class GMActivityInfoTupleScheme extends TupleScheme<GMActivityInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GMActivityInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetActiviyId()) {
        optionals.set(0);
      }
      if (struct.isSetActivityName()) {
        optionals.set(1);
      }
      if (struct.isSetIcon()) {
        optionals.set(2);
      }
      if (struct.isSetContent()) {
        optionals.set(3);
      }
      if (struct.isSetState()) {
        optionals.set(4);
      }
      if (struct.isSetType()) {
        optionals.set(5);
      }
      if (struct.isSetSubType()) {
        optionals.set(6);
      }
      if (struct.isSetBeginTime()) {
        optionals.set(7);
      }
      if (struct.isSetEndTime()) {
        optionals.set(8);
      }
      if (struct.isSetCompletedParam()) {
        optionals.set(9);
      }
      if (struct.isSetParam()) {
        optionals.set(10);
      }
      if (struct.isSetPrizeInfos()) {
        optionals.set(11);
      }
      if (struct.isSetParamDesc()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetActiviyId()) {
        oprot.writeI16(struct.activiyId);
      }
      if (struct.isSetActivityName()) {
        oprot.writeString(struct.activityName);
      }
      if (struct.isSetIcon()) {
        oprot.writeString(struct.icon);
      }
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
      if (struct.isSetState()) {
        oprot.writeByte(struct.state);
      }
      if (struct.isSetType()) {
        oprot.writeByte(struct.type);
      }
      if (struct.isSetSubType()) {
        oprot.writeByte(struct.subType);
      }
      if (struct.isSetBeginTime()) {
        oprot.writeI64(struct.beginTime);
      }
      if (struct.isSetEndTime()) {
        oprot.writeI64(struct.endTime);
      }
      if (struct.isSetCompletedParam()) {
        {
          oprot.writeI32(struct.completedParam.size());
          for (String _iter304 : struct.completedParam)
          {
            oprot.writeString(_iter304);
          }
        }
      }
      if (struct.isSetParam()) {
        {
          oprot.writeI32(struct.param.size());
          for (String _iter305 : struct.param)
          {
            oprot.writeString(_iter305);
          }
        }
      }
      if (struct.isSetPrizeInfos()) {
        struct.prizeInfos.write(oprot);
      }
      if (struct.isSetParamDesc()) {
        {
          oprot.writeI32(struct.paramDesc.size());
          for (String _iter306 : struct.paramDesc)
          {
            oprot.writeString(_iter306);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GMActivityInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.activiyId = iprot.readI16();
        struct.setActiviyIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.activityName = iprot.readString();
        struct.setActivityNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.icon = iprot.readString();
        struct.setIconIsSet(true);
      }
      if (incoming.get(3)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
      if (incoming.get(4)) {
        struct.state = iprot.readByte();
        struct.setStateIsSet(true);
      }
      if (incoming.get(5)) {
        struct.type = iprot.readByte();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.subType = iprot.readByte();
        struct.setSubTypeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.beginTime = iprot.readI64();
        struct.setBeginTimeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.endTime = iprot.readI64();
        struct.setEndTimeIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list307 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.completedParam = new ArrayList<String>(_list307.size);
          for (int _i308 = 0; _i308 < _list307.size; ++_i308)
          {
            String _elem309; // required
            _elem309 = iprot.readString();
            struct.completedParam.add(_elem309);
          }
        }
        struct.setCompletedParamIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list310 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.param = new ArrayList<String>(_list310.size);
          for (int _i311 = 0; _i311 < _list310.size; ++_i311)
          {
            String _elem312; // required
            _elem312 = iprot.readString();
            struct.param.add(_elem312);
          }
        }
        struct.setParamIsSet(true);
      }
      if (incoming.get(11)) {
        struct.prizeInfos = new PrizeInfo();
        struct.prizeInfos.read(iprot);
        struct.setPrizeInfosIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list313 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.paramDesc = new ArrayList<String>(_list313.size);
          for (int _i314 = 0; _i314 < _list313.size; ++_i314)
          {
            String _elem315; // required
            _elem315 = iprot.readString();
            struct.paramDesc.add(_elem315);
          }
        }
        struct.setParamDescIsSet(true);
      }
    }
  }

}

