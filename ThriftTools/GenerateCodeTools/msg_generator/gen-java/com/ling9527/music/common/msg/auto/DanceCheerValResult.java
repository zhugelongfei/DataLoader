/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 舞蹈欢呼值结果
 */
public class DanceCheerValResult implements org.apache.thrift.TBase<DanceCheerValResult, DanceCheerValResult._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DanceCheerValResult");

  private static final org.apache.thrift.protocol.TField CHAR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("charId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField CHEER_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("cheerVal", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PASS_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("passStatus", org.apache.thrift.protocol.TType.BYTE, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DanceCheerValResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DanceCheerValResultTupleSchemeFactory());
  }

  public long charId; // required
  public int cheerVal; // required
  /**
   * 0-未通关 1-通关
   */
  public byte passStatus; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CHAR_ID((short)1, "charId"),
    CHEER_VAL((short)2, "cheerVal"),
    /**
     * 0-未通关 1-通关
     */
    PASS_STATUS((short)3, "passStatus");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CHAR_ID
          return CHAR_ID;
        case 2: // CHEER_VAL
          return CHEER_VAL;
        case 3: // PASS_STATUS
          return PASS_STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CHARID_ISSET_ID = 0;
  private static final int __CHEERVAL_ISSET_ID = 1;
  private static final int __PASSSTATUS_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.PASS_STATUS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CHAR_ID, new org.apache.thrift.meta_data.FieldMetaData("charId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CHEER_VAL, new org.apache.thrift.meta_data.FieldMetaData("cheerVal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PASS_STATUS, new org.apache.thrift.meta_data.FieldMetaData("passStatus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DanceCheerValResult.class, metaDataMap);
  }

  public DanceCheerValResult() {
  }

  public DanceCheerValResult(
    long charId,
    int cheerVal)
  {
    this();
    this.charId = charId;
    setCharIdIsSet(true);
    this.cheerVal = cheerVal;
    setCheerValIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DanceCheerValResult(DanceCheerValResult other) {
    __isset_bitfield = other.__isset_bitfield;
    this.charId = other.charId;
    this.cheerVal = other.cheerVal;
    this.passStatus = other.passStatus;
  }

  public DanceCheerValResult deepCopy() {
    return new DanceCheerValResult(this);
  }

  @Override
  public void clear() {
    setCharIdIsSet(false);
    this.charId = 0;
    setCheerValIsSet(false);
    this.cheerVal = 0;
    setPassStatusIsSet(false);
    this.passStatus = 0;
  }

  public long getCharId() {
    return this.charId;
  }

  public DanceCheerValResult setCharId(long charId) {
    this.charId = charId;
    setCharIdIsSet(true);
    return this;
  }

  public void unsetCharId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHARID_ISSET_ID);
  }

  /** Returns true if field charId is set (has been assigned a value) and false otherwise */
  public boolean isSetCharId() {
    return EncodingUtils.testBit(__isset_bitfield, __CHARID_ISSET_ID);
  }

  public void setCharIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHARID_ISSET_ID, value);
  }

  public int getCheerVal() {
    return this.cheerVal;
  }

  public DanceCheerValResult setCheerVal(int cheerVal) {
    this.cheerVal = cheerVal;
    setCheerValIsSet(true);
    return this;
  }

  public void unsetCheerVal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHEERVAL_ISSET_ID);
  }

  /** Returns true if field cheerVal is set (has been assigned a value) and false otherwise */
  public boolean isSetCheerVal() {
    return EncodingUtils.testBit(__isset_bitfield, __CHEERVAL_ISSET_ID);
  }

  public void setCheerValIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHEERVAL_ISSET_ID, value);
  }

  /**
   * 0-未通关 1-通关
   */
  public byte getPassStatus() {
    return this.passStatus;
  }

  /**
   * 0-未通关 1-通关
   */
  public DanceCheerValResult setPassStatus(byte passStatus) {
    this.passStatus = passStatus;
    setPassStatusIsSet(true);
    return this;
  }

  public void unsetPassStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PASSSTATUS_ISSET_ID);
  }

  /** Returns true if field passStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetPassStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __PASSSTATUS_ISSET_ID);
  }

  public void setPassStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PASSSTATUS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CHAR_ID:
      if (value == null) {
        unsetCharId();
      } else {
        setCharId((Long)value);
      }
      break;

    case CHEER_VAL:
      if (value == null) {
        unsetCheerVal();
      } else {
        setCheerVal((Integer)value);
      }
      break;

    case PASS_STATUS:
      if (value == null) {
        unsetPassStatus();
      } else {
        setPassStatus((Byte)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CHAR_ID:
      return Long.valueOf(getCharId());

    case CHEER_VAL:
      return Integer.valueOf(getCheerVal());

    case PASS_STATUS:
      return Byte.valueOf(getPassStatus());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CHAR_ID:
      return isSetCharId();
    case CHEER_VAL:
      return isSetCheerVal();
    case PASS_STATUS:
      return isSetPassStatus();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DanceCheerValResult)
      return this.equals((DanceCheerValResult)that);
    return false;
  }

  public boolean equals(DanceCheerValResult that) {
    if (that == null)
      return false;

    boolean this_present_charId = true;
    boolean that_present_charId = true;
    if (this_present_charId || that_present_charId) {
      if (!(this_present_charId && that_present_charId))
        return false;
      if (this.charId != that.charId)
        return false;
    }

    boolean this_present_cheerVal = true;
    boolean that_present_cheerVal = true;
    if (this_present_cheerVal || that_present_cheerVal) {
      if (!(this_present_cheerVal && that_present_cheerVal))
        return false;
      if (this.cheerVal != that.cheerVal)
        return false;
    }

    boolean this_present_passStatus = true && this.isSetPassStatus();
    boolean that_present_passStatus = true && that.isSetPassStatus();
    if (this_present_passStatus || that_present_passStatus) {
      if (!(this_present_passStatus && that_present_passStatus))
        return false;
      if (this.passStatus != that.passStatus)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(DanceCheerValResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    DanceCheerValResult typedOther = (DanceCheerValResult)other;

    lastComparison = Boolean.valueOf(isSetCharId()).compareTo(typedOther.isSetCharId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCharId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.charId, typedOther.charId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheerVal()).compareTo(typedOther.isSetCheerVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheerVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cheerVal, typedOther.cheerVal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPassStatus()).compareTo(typedOther.isSetPassStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.passStatus, typedOther.passStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DanceCheerValResult(");
    boolean first = true;

    sb.append("charId:");
    sb.append(this.charId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cheerVal:");
    sb.append(this.cheerVal);
    first = false;
    if (isSetPassStatus()) {
      if (!first) sb.append(", ");
      sb.append("passStatus:");
      sb.append(this.passStatus);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DanceCheerValResultStandardSchemeFactory implements SchemeFactory {
    public DanceCheerValResultStandardScheme getScheme() {
      return new DanceCheerValResultStandardScheme();
    }
  }

  private static class DanceCheerValResultStandardScheme extends StandardScheme<DanceCheerValResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DanceCheerValResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CHAR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.charId = iprot.readI64();
              struct.setCharIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CHEER_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cheerVal = iprot.readI32();
              struct.setCheerValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PASS_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.passStatus = iprot.readByte();
              struct.setPassStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DanceCheerValResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CHAR_ID_FIELD_DESC);
      oprot.writeI64(struct.charId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CHEER_VAL_FIELD_DESC);
      oprot.writeI32(struct.cheerVal);
      oprot.writeFieldEnd();
      if (struct.isSetPassStatus()) {
        oprot.writeFieldBegin(PASS_STATUS_FIELD_DESC);
        oprot.writeByte(struct.passStatus);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DanceCheerValResultTupleSchemeFactory implements SchemeFactory {
    public DanceCheerValResultTupleScheme getScheme() {
      return new DanceCheerValResultTupleScheme();
    }
  }

  private static class DanceCheerValResultTupleScheme extends TupleScheme<DanceCheerValResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DanceCheerValResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCharId()) {
        optionals.set(0);
      }
      if (struct.isSetCheerVal()) {
        optionals.set(1);
      }
      if (struct.isSetPassStatus()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetCharId()) {
        oprot.writeI64(struct.charId);
      }
      if (struct.isSetCheerVal()) {
        oprot.writeI32(struct.cheerVal);
      }
      if (struct.isSetPassStatus()) {
        oprot.writeByte(struct.passStatus);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DanceCheerValResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.charId = iprot.readI64();
        struct.setCharIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cheerVal = iprot.readI32();
        struct.setCheerValIsSet(true);
      }
      if (incoming.get(2)) {
        struct.passStatus = iprot.readByte();
        struct.setPassStatusIsSet(true);
      }
    }
  }

}

