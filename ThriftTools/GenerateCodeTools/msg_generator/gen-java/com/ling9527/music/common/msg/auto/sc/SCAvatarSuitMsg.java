/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 服装套装消息
 */
public class SCAvatarSuitMsg implements org.apache.thrift.TBase<SCAvatarSuitMsg, SCAvatarSuitMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCAvatarSuitMsg");

  private static final org.apache.thrift.protocol.TField SUIT_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("suitInfos", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField UNLOCK_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("unlockInfos", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField USED_SUIT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("usedSuitId", org.apache.thrift.protocol.TType.BYTE, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCAvatarSuitMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCAvatarSuitMsgTupleSchemeFactory());
  }

  /**
   * 套装id（1开始）-套装信息
   */
  public Map<Byte,com.ling9527.music.common.msg.auto.AvatarSuitInfo> suitInfos; // required
  /**
   * 未解锁提示，套装id（1开始）-提示
   */
  public Map<Byte,Integer> unlockInfos; // required
  /**
   * 当前使用套装
   */
  public byte usedSuitId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 套装id（1开始）-套装信息
     */
    SUIT_INFOS((short)1, "suitInfos"),
    /**
     * 未解锁提示，套装id（1开始）-提示
     */
    UNLOCK_INFOS((short)2, "unlockInfos"),
    /**
     * 当前使用套装
     */
    USED_SUIT_ID((short)3, "usedSuitId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SUIT_INFOS
          return SUIT_INFOS;
        case 2: // UNLOCK_INFOS
          return UNLOCK_INFOS;
        case 3: // USED_SUIT_ID
          return USED_SUIT_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __USEDSUITID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.USED_SUIT_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUIT_INFOS, new org.apache.thrift.meta_data.FieldMetaData("suitInfos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.AvatarSuitInfo.class))));
    tmpMap.put(_Fields.UNLOCK_INFOS, new org.apache.thrift.meta_data.FieldMetaData("unlockInfos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.USED_SUIT_ID, new org.apache.thrift.meta_data.FieldMetaData("usedSuitId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCAvatarSuitMsg.class, metaDataMap);
  }

  public SCAvatarSuitMsg() {
  }

  public SCAvatarSuitMsg(
    Map<Byte,com.ling9527.music.common.msg.auto.AvatarSuitInfo> suitInfos,
    Map<Byte,Integer> unlockInfos)
  {
    this();
    this.suitInfos = suitInfos;
    this.unlockInfos = unlockInfos;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCAvatarSuitMsg(SCAvatarSuitMsg other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSuitInfos()) {
      Map<Byte,com.ling9527.music.common.msg.auto.AvatarSuitInfo> __this__suitInfos = new HashMap<Byte,com.ling9527.music.common.msg.auto.AvatarSuitInfo>();
      for (Map.Entry<Byte, com.ling9527.music.common.msg.auto.AvatarSuitInfo> other_element : other.suitInfos.entrySet()) {

        Byte other_element_key = other_element.getKey();
        com.ling9527.music.common.msg.auto.AvatarSuitInfo other_element_value = other_element.getValue();

        Byte __this__suitInfos_copy_key = other_element_key;

        com.ling9527.music.common.msg.auto.AvatarSuitInfo __this__suitInfos_copy_value = new com.ling9527.music.common.msg.auto.AvatarSuitInfo(other_element_value);

        __this__suitInfos.put(__this__suitInfos_copy_key, __this__suitInfos_copy_value);
      }
      this.suitInfos = __this__suitInfos;
    }
    if (other.isSetUnlockInfos()) {
      Map<Byte,Integer> __this__unlockInfos = new HashMap<Byte,Integer>();
      for (Map.Entry<Byte, Integer> other_element : other.unlockInfos.entrySet()) {

        Byte other_element_key = other_element.getKey();
        Integer other_element_value = other_element.getValue();

        Byte __this__unlockInfos_copy_key = other_element_key;

        Integer __this__unlockInfos_copy_value = other_element_value;

        __this__unlockInfos.put(__this__unlockInfos_copy_key, __this__unlockInfos_copy_value);
      }
      this.unlockInfos = __this__unlockInfos;
    }
    this.usedSuitId = other.usedSuitId;
  }

  public SCAvatarSuitMsg deepCopy() {
    return new SCAvatarSuitMsg(this);
  }

  @Override
  public void clear() {
    this.suitInfos = null;
    this.unlockInfos = null;
    setUsedSuitIdIsSet(false);
    this.usedSuitId = 0;
  }

  public int getSuitInfosSize() {
    return (this.suitInfos == null) ? 0 : this.suitInfos.size();
  }

  public void putToSuitInfos(byte key, com.ling9527.music.common.msg.auto.AvatarSuitInfo val) {
    if (this.suitInfos == null) {
      this.suitInfos = new HashMap<Byte,com.ling9527.music.common.msg.auto.AvatarSuitInfo>();
    }
    this.suitInfos.put(key, val);
  }

  /**
   * 套装id（1开始）-套装信息
   */
  public Map<Byte,com.ling9527.music.common.msg.auto.AvatarSuitInfo> getSuitInfos() {
    return this.suitInfos;
  }

  /**
   * 套装id（1开始）-套装信息
   */
  public SCAvatarSuitMsg setSuitInfos(Map<Byte,com.ling9527.music.common.msg.auto.AvatarSuitInfo> suitInfos) {
    this.suitInfos = suitInfos;
    return this;
  }

  public void unsetSuitInfos() {
    this.suitInfos = null;
  }

  /** Returns true if field suitInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetSuitInfos() {
    return this.suitInfos != null;
  }

  public void setSuitInfosIsSet(boolean value) {
    if (!value) {
      this.suitInfos = null;
    }
  }

  public int getUnlockInfosSize() {
    return (this.unlockInfos == null) ? 0 : this.unlockInfos.size();
  }

  public void putToUnlockInfos(byte key, int val) {
    if (this.unlockInfos == null) {
      this.unlockInfos = new HashMap<Byte,Integer>();
    }
    this.unlockInfos.put(key, val);
  }

  /**
   * 未解锁提示，套装id（1开始）-提示
   */
  public Map<Byte,Integer> getUnlockInfos() {
    return this.unlockInfos;
  }

  /**
   * 未解锁提示，套装id（1开始）-提示
   */
  public SCAvatarSuitMsg setUnlockInfos(Map<Byte,Integer> unlockInfos) {
    this.unlockInfos = unlockInfos;
    return this;
  }

  public void unsetUnlockInfos() {
    this.unlockInfos = null;
  }

  /** Returns true if field unlockInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetUnlockInfos() {
    return this.unlockInfos != null;
  }

  public void setUnlockInfosIsSet(boolean value) {
    if (!value) {
      this.unlockInfos = null;
    }
  }

  /**
   * 当前使用套装
   */
  public byte getUsedSuitId() {
    return this.usedSuitId;
  }

  /**
   * 当前使用套装
   */
  public SCAvatarSuitMsg setUsedSuitId(byte usedSuitId) {
    this.usedSuitId = usedSuitId;
    setUsedSuitIdIsSet(true);
    return this;
  }

  public void unsetUsedSuitId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USEDSUITID_ISSET_ID);
  }

  /** Returns true if field usedSuitId is set (has been assigned a value) and false otherwise */
  public boolean isSetUsedSuitId() {
    return EncodingUtils.testBit(__isset_bitfield, __USEDSUITID_ISSET_ID);
  }

  public void setUsedSuitIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USEDSUITID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUIT_INFOS:
      if (value == null) {
        unsetSuitInfos();
      } else {
        setSuitInfos((Map<Byte,com.ling9527.music.common.msg.auto.AvatarSuitInfo>)value);
      }
      break;

    case UNLOCK_INFOS:
      if (value == null) {
        unsetUnlockInfos();
      } else {
        setUnlockInfos((Map<Byte,Integer>)value);
      }
      break;

    case USED_SUIT_ID:
      if (value == null) {
        unsetUsedSuitId();
      } else {
        setUsedSuitId((Byte)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUIT_INFOS:
      return getSuitInfos();

    case UNLOCK_INFOS:
      return getUnlockInfos();

    case USED_SUIT_ID:
      return Byte.valueOf(getUsedSuitId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUIT_INFOS:
      return isSetSuitInfos();
    case UNLOCK_INFOS:
      return isSetUnlockInfos();
    case USED_SUIT_ID:
      return isSetUsedSuitId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCAvatarSuitMsg)
      return this.equals((SCAvatarSuitMsg)that);
    return false;
  }

  public boolean equals(SCAvatarSuitMsg that) {
    if (that == null)
      return false;

    boolean this_present_suitInfos = true && this.isSetSuitInfos();
    boolean that_present_suitInfos = true && that.isSetSuitInfos();
    if (this_present_suitInfos || that_present_suitInfos) {
      if (!(this_present_suitInfos && that_present_suitInfos))
        return false;
      if (!this.suitInfos.equals(that.suitInfos))
        return false;
    }

    boolean this_present_unlockInfos = true && this.isSetUnlockInfos();
    boolean that_present_unlockInfos = true && that.isSetUnlockInfos();
    if (this_present_unlockInfos || that_present_unlockInfos) {
      if (!(this_present_unlockInfos && that_present_unlockInfos))
        return false;
      if (!this.unlockInfos.equals(that.unlockInfos))
        return false;
    }

    boolean this_present_usedSuitId = true && this.isSetUsedSuitId();
    boolean that_present_usedSuitId = true && that.isSetUsedSuitId();
    if (this_present_usedSuitId || that_present_usedSuitId) {
      if (!(this_present_usedSuitId && that_present_usedSuitId))
        return false;
      if (this.usedSuitId != that.usedSuitId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCAvatarSuitMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCAvatarSuitMsg typedOther = (SCAvatarSuitMsg)other;

    lastComparison = Boolean.valueOf(isSetSuitInfos()).compareTo(typedOther.isSetSuitInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuitInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.suitInfos, typedOther.suitInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnlockInfos()).compareTo(typedOther.isSetUnlockInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnlockInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unlockInfos, typedOther.unlockInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsedSuitId()).compareTo(typedOther.isSetUsedSuitId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsedSuitId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.usedSuitId, typedOther.usedSuitId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCAvatarSuitMsg(");
    boolean first = true;

    sb.append("suitInfos:");
    if (this.suitInfos == null) {
      sb.append("null");
    } else {
      sb.append(this.suitInfos);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("unlockInfos:");
    if (this.unlockInfos == null) {
      sb.append("null");
    } else {
      sb.append(this.unlockInfos);
    }
    first = false;
    if (isSetUsedSuitId()) {
      if (!first) sb.append(", ");
      sb.append("usedSuitId:");
      sb.append(this.usedSuitId);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCAvatarSuitMsgStandardSchemeFactory implements SchemeFactory {
    public SCAvatarSuitMsgStandardScheme getScheme() {
      return new SCAvatarSuitMsgStandardScheme();
    }
  }

  private static class SCAvatarSuitMsgStandardScheme extends StandardScheme<SCAvatarSuitMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCAvatarSuitMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SUIT_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map96 = iprot.readMapBegin();
                struct.suitInfos = new HashMap<Byte,com.ling9527.music.common.msg.auto.AvatarSuitInfo>(2*_map96.size);
                for (int _i97 = 0; _i97 < _map96.size; ++_i97)
                {
                  byte _key98; // required
                  com.ling9527.music.common.msg.auto.AvatarSuitInfo _val99; // required
                  _key98 = iprot.readByte();
                  _val99 = new com.ling9527.music.common.msg.auto.AvatarSuitInfo();
                  _val99.read(iprot);
                  struct.suitInfos.put(_key98, _val99);
                }
                iprot.readMapEnd();
              }
              struct.setSuitInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // UNLOCK_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map100 = iprot.readMapBegin();
                struct.unlockInfos = new HashMap<Byte,Integer>(2*_map100.size);
                for (int _i101 = 0; _i101 < _map100.size; ++_i101)
                {
                  byte _key102; // required
                  int _val103; // required
                  _key102 = iprot.readByte();
                  _val103 = iprot.readI32();
                  struct.unlockInfos.put(_key102, _val103);
                }
                iprot.readMapEnd();
              }
              struct.setUnlockInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USED_SUIT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.usedSuitId = iprot.readByte();
              struct.setUsedSuitIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCAvatarSuitMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.suitInfos != null) {
        oprot.writeFieldBegin(SUIT_INFOS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.BYTE, org.apache.thrift.protocol.TType.STRUCT, struct.suitInfos.size()));
          for (Map.Entry<Byte, com.ling9527.music.common.msg.auto.AvatarSuitInfo> _iter104 : struct.suitInfos.entrySet())
          {
            oprot.writeByte(_iter104.getKey());
            _iter104.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.unlockInfos != null) {
        oprot.writeFieldBegin(UNLOCK_INFOS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.BYTE, org.apache.thrift.protocol.TType.I32, struct.unlockInfos.size()));
          for (Map.Entry<Byte, Integer> _iter105 : struct.unlockInfos.entrySet())
          {
            oprot.writeByte(_iter105.getKey());
            oprot.writeI32(_iter105.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.isSetUsedSuitId()) {
        oprot.writeFieldBegin(USED_SUIT_ID_FIELD_DESC);
        oprot.writeByte(struct.usedSuitId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCAvatarSuitMsgTupleSchemeFactory implements SchemeFactory {
    public SCAvatarSuitMsgTupleScheme getScheme() {
      return new SCAvatarSuitMsgTupleScheme();
    }
  }

  private static class SCAvatarSuitMsgTupleScheme extends TupleScheme<SCAvatarSuitMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCAvatarSuitMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSuitInfos()) {
        optionals.set(0);
      }
      if (struct.isSetUnlockInfos()) {
        optionals.set(1);
      }
      if (struct.isSetUsedSuitId()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetSuitInfos()) {
        {
          oprot.writeI32(struct.suitInfos.size());
          for (Map.Entry<Byte, com.ling9527.music.common.msg.auto.AvatarSuitInfo> _iter106 : struct.suitInfos.entrySet())
          {
            oprot.writeByte(_iter106.getKey());
            _iter106.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetUnlockInfos()) {
        {
          oprot.writeI32(struct.unlockInfos.size());
          for (Map.Entry<Byte, Integer> _iter107 : struct.unlockInfos.entrySet())
          {
            oprot.writeByte(_iter107.getKey());
            oprot.writeI32(_iter107.getValue());
          }
        }
      }
      if (struct.isSetUsedSuitId()) {
        oprot.writeByte(struct.usedSuitId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCAvatarSuitMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map108 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.BYTE, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.suitInfos = new HashMap<Byte,com.ling9527.music.common.msg.auto.AvatarSuitInfo>(2*_map108.size);
          for (int _i109 = 0; _i109 < _map108.size; ++_i109)
          {
            byte _key110; // required
            com.ling9527.music.common.msg.auto.AvatarSuitInfo _val111; // required
            _key110 = iprot.readByte();
            _val111 = new com.ling9527.music.common.msg.auto.AvatarSuitInfo();
            _val111.read(iprot);
            struct.suitInfos.put(_key110, _val111);
          }
        }
        struct.setSuitInfosIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map112 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.BYTE, org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.unlockInfos = new HashMap<Byte,Integer>(2*_map112.size);
          for (int _i113 = 0; _i113 < _map112.size; ++_i113)
          {
            byte _key114; // required
            int _val115; // required
            _key114 = iprot.readByte();
            _val115 = iprot.readI32();
            struct.unlockInfos.put(_key114, _val115);
          }
        }
        struct.setUnlockInfosIsSet(true);
      }
      if (incoming.get(2)) {
        struct.usedSuitId = iprot.readByte();
        struct.setUsedSuitIdIsSet(true);
      }
    }
  }

}

