/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 泡温泉剩余时间信息
 */
public class SCSpringLeftTimes implements org.apache.thrift.TBase<SCSpringLeftTimes, SCSpringLeftTimes._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCSpringLeftTimes");

  private static final org.apache.thrift.protocol.TField EXP_LEFT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("expLeftTime", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SWEET_LEFT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("sweetLeftTime", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField COIN_LEFT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("coinLeftTime", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCSpringLeftTimesStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCSpringLeftTimesTupleSchemeFactory());
  }

  /**
   * 增加经验剩余时间
   */
  public int expLeftTime; // optional
  /**
   * 增加甜蜜值剩余时间
   */
  public int sweetLeftTime; // optional
  /**
   * 舞蹈区增加金币剩余时间
   */
  public int coinLeftTime; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 增加经验剩余时间
     */
    EXP_LEFT_TIME((short)1, "expLeftTime"),
    /**
     * 增加甜蜜值剩余时间
     */
    SWEET_LEFT_TIME((short)2, "sweetLeftTime"),
    /**
     * 舞蹈区增加金币剩余时间
     */
    COIN_LEFT_TIME((short)3, "coinLeftTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EXP_LEFT_TIME
          return EXP_LEFT_TIME;
        case 2: // SWEET_LEFT_TIME
          return SWEET_LEFT_TIME;
        case 3: // COIN_LEFT_TIME
          return COIN_LEFT_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EXPLEFTTIME_ISSET_ID = 0;
  private static final int __SWEETLEFTTIME_ISSET_ID = 1;
  private static final int __COINLEFTTIME_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.EXP_LEFT_TIME,_Fields.SWEET_LEFT_TIME,_Fields.COIN_LEFT_TIME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EXP_LEFT_TIME, new org.apache.thrift.meta_data.FieldMetaData("expLeftTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SWEET_LEFT_TIME, new org.apache.thrift.meta_data.FieldMetaData("sweetLeftTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COIN_LEFT_TIME, new org.apache.thrift.meta_data.FieldMetaData("coinLeftTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCSpringLeftTimes.class, metaDataMap);
  }

  public SCSpringLeftTimes() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCSpringLeftTimes(SCSpringLeftTimes other) {
    __isset_bitfield = other.__isset_bitfield;
    this.expLeftTime = other.expLeftTime;
    this.sweetLeftTime = other.sweetLeftTime;
    this.coinLeftTime = other.coinLeftTime;
  }

  public SCSpringLeftTimes deepCopy() {
    return new SCSpringLeftTimes(this);
  }

  @Override
  public void clear() {
    setExpLeftTimeIsSet(false);
    this.expLeftTime = 0;
    setSweetLeftTimeIsSet(false);
    this.sweetLeftTime = 0;
    setCoinLeftTimeIsSet(false);
    this.coinLeftTime = 0;
  }

  /**
   * 增加经验剩余时间
   */
  public int getExpLeftTime() {
    return this.expLeftTime;
  }

  /**
   * 增加经验剩余时间
   */
  public SCSpringLeftTimes setExpLeftTime(int expLeftTime) {
    this.expLeftTime = expLeftTime;
    setExpLeftTimeIsSet(true);
    return this;
  }

  public void unsetExpLeftTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXPLEFTTIME_ISSET_ID);
  }

  /** Returns true if field expLeftTime is set (has been assigned a value) and false otherwise */
  public boolean isSetExpLeftTime() {
    return EncodingUtils.testBit(__isset_bitfield, __EXPLEFTTIME_ISSET_ID);
  }

  public void setExpLeftTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXPLEFTTIME_ISSET_ID, value);
  }

  /**
   * 增加甜蜜值剩余时间
   */
  public int getSweetLeftTime() {
    return this.sweetLeftTime;
  }

  /**
   * 增加甜蜜值剩余时间
   */
  public SCSpringLeftTimes setSweetLeftTime(int sweetLeftTime) {
    this.sweetLeftTime = sweetLeftTime;
    setSweetLeftTimeIsSet(true);
    return this;
  }

  public void unsetSweetLeftTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SWEETLEFTTIME_ISSET_ID);
  }

  /** Returns true if field sweetLeftTime is set (has been assigned a value) and false otherwise */
  public boolean isSetSweetLeftTime() {
    return EncodingUtils.testBit(__isset_bitfield, __SWEETLEFTTIME_ISSET_ID);
  }

  public void setSweetLeftTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SWEETLEFTTIME_ISSET_ID, value);
  }

  /**
   * 舞蹈区增加金币剩余时间
   */
  public int getCoinLeftTime() {
    return this.coinLeftTime;
  }

  /**
   * 舞蹈区增加金币剩余时间
   */
  public SCSpringLeftTimes setCoinLeftTime(int coinLeftTime) {
    this.coinLeftTime = coinLeftTime;
    setCoinLeftTimeIsSet(true);
    return this;
  }

  public void unsetCoinLeftTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COINLEFTTIME_ISSET_ID);
  }

  /** Returns true if field coinLeftTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCoinLeftTime() {
    return EncodingUtils.testBit(__isset_bitfield, __COINLEFTTIME_ISSET_ID);
  }

  public void setCoinLeftTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COINLEFTTIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EXP_LEFT_TIME:
      if (value == null) {
        unsetExpLeftTime();
      } else {
        setExpLeftTime((Integer)value);
      }
      break;

    case SWEET_LEFT_TIME:
      if (value == null) {
        unsetSweetLeftTime();
      } else {
        setSweetLeftTime((Integer)value);
      }
      break;

    case COIN_LEFT_TIME:
      if (value == null) {
        unsetCoinLeftTime();
      } else {
        setCoinLeftTime((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EXP_LEFT_TIME:
      return Integer.valueOf(getExpLeftTime());

    case SWEET_LEFT_TIME:
      return Integer.valueOf(getSweetLeftTime());

    case COIN_LEFT_TIME:
      return Integer.valueOf(getCoinLeftTime());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EXP_LEFT_TIME:
      return isSetExpLeftTime();
    case SWEET_LEFT_TIME:
      return isSetSweetLeftTime();
    case COIN_LEFT_TIME:
      return isSetCoinLeftTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCSpringLeftTimes)
      return this.equals((SCSpringLeftTimes)that);
    return false;
  }

  public boolean equals(SCSpringLeftTimes that) {
    if (that == null)
      return false;

    boolean this_present_expLeftTime = true && this.isSetExpLeftTime();
    boolean that_present_expLeftTime = true && that.isSetExpLeftTime();
    if (this_present_expLeftTime || that_present_expLeftTime) {
      if (!(this_present_expLeftTime && that_present_expLeftTime))
        return false;
      if (this.expLeftTime != that.expLeftTime)
        return false;
    }

    boolean this_present_sweetLeftTime = true && this.isSetSweetLeftTime();
    boolean that_present_sweetLeftTime = true && that.isSetSweetLeftTime();
    if (this_present_sweetLeftTime || that_present_sweetLeftTime) {
      if (!(this_present_sweetLeftTime && that_present_sweetLeftTime))
        return false;
      if (this.sweetLeftTime != that.sweetLeftTime)
        return false;
    }

    boolean this_present_coinLeftTime = true && this.isSetCoinLeftTime();
    boolean that_present_coinLeftTime = true && that.isSetCoinLeftTime();
    if (this_present_coinLeftTime || that_present_coinLeftTime) {
      if (!(this_present_coinLeftTime && that_present_coinLeftTime))
        return false;
      if (this.coinLeftTime != that.coinLeftTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCSpringLeftTimes other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCSpringLeftTimes typedOther = (SCSpringLeftTimes)other;

    lastComparison = Boolean.valueOf(isSetExpLeftTime()).compareTo(typedOther.isSetExpLeftTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpLeftTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expLeftTime, typedOther.expLeftTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSweetLeftTime()).compareTo(typedOther.isSetSweetLeftTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSweetLeftTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sweetLeftTime, typedOther.sweetLeftTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCoinLeftTime()).compareTo(typedOther.isSetCoinLeftTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCoinLeftTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coinLeftTime, typedOther.coinLeftTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCSpringLeftTimes(");
    boolean first = true;

    if (isSetExpLeftTime()) {
      sb.append("expLeftTime:");
      sb.append(this.expLeftTime);
      first = false;
    }
    if (isSetSweetLeftTime()) {
      if (!first) sb.append(", ");
      sb.append("sweetLeftTime:");
      sb.append(this.sweetLeftTime);
      first = false;
    }
    if (isSetCoinLeftTime()) {
      if (!first) sb.append(", ");
      sb.append("coinLeftTime:");
      sb.append(this.coinLeftTime);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCSpringLeftTimesStandardSchemeFactory implements SchemeFactory {
    public SCSpringLeftTimesStandardScheme getScheme() {
      return new SCSpringLeftTimesStandardScheme();
    }
  }

  private static class SCSpringLeftTimesStandardScheme extends StandardScheme<SCSpringLeftTimes> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCSpringLeftTimes struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EXP_LEFT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.expLeftTime = iprot.readI32();
              struct.setExpLeftTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SWEET_LEFT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sweetLeftTime = iprot.readI32();
              struct.setSweetLeftTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COIN_LEFT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.coinLeftTime = iprot.readI32();
              struct.setCoinLeftTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCSpringLeftTimes struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetExpLeftTime()) {
        oprot.writeFieldBegin(EXP_LEFT_TIME_FIELD_DESC);
        oprot.writeI32(struct.expLeftTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSweetLeftTime()) {
        oprot.writeFieldBegin(SWEET_LEFT_TIME_FIELD_DESC);
        oprot.writeI32(struct.sweetLeftTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCoinLeftTime()) {
        oprot.writeFieldBegin(COIN_LEFT_TIME_FIELD_DESC);
        oprot.writeI32(struct.coinLeftTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCSpringLeftTimesTupleSchemeFactory implements SchemeFactory {
    public SCSpringLeftTimesTupleScheme getScheme() {
      return new SCSpringLeftTimesTupleScheme();
    }
  }

  private static class SCSpringLeftTimesTupleScheme extends TupleScheme<SCSpringLeftTimes> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCSpringLeftTimes struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetExpLeftTime()) {
        optionals.set(0);
      }
      if (struct.isSetSweetLeftTime()) {
        optionals.set(1);
      }
      if (struct.isSetCoinLeftTime()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetExpLeftTime()) {
        oprot.writeI32(struct.expLeftTime);
      }
      if (struct.isSetSweetLeftTime()) {
        oprot.writeI32(struct.sweetLeftTime);
      }
      if (struct.isSetCoinLeftTime()) {
        oprot.writeI32(struct.coinLeftTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCSpringLeftTimes struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.expLeftTime = iprot.readI32();
        struct.setExpLeftTimeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sweetLeftTime = iprot.readI32();
        struct.setSweetLeftTimeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.coinLeftTime = iprot.readI32();
        struct.setCoinLeftTimeIsSet(true);
      }
    }
  }

}

