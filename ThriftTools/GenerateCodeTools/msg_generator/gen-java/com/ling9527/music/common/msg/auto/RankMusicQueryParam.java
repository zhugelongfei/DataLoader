/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class RankMusicQueryParam implements org.apache.thrift.TBase<RankMusicQueryParam, RankMusicQueryParam._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RankMusicQueryParam");

  private static final org.apache.thrift.protocol.TField MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("mode", org.apache.thrift.protocol.TType.BYTE, (short)1);
  private static final org.apache.thrift.protocol.TField MUSIC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("musicId", org.apache.thrift.protocol.TType.I16, (short)2);
  private static final org.apache.thrift.protocol.TField LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("level", org.apache.thrift.protocol.TType.BYTE, (short)3);
  private static final org.apache.thrift.protocol.TField LAST_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("lastLevel", org.apache.thrift.protocol.TType.BYTE, (short)4);
  private static final org.apache.thrift.protocol.TField IS_FIRST_PANEL_FIELD_DESC = new org.apache.thrift.protocol.TField("isFirstPanel", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField CLIENT_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("clientParam", org.apache.thrift.protocol.TType.BYTE, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RankMusicQueryParamStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RankMusicQueryParamTupleSchemeFactory());
  }

  public byte mode; // required
  public short musicId; // required
  public byte level; // required
  public byte lastLevel; // optional
  /**
   * 是否封面,客户端请求封面数据不存在,服务器会随一个发送
   */
  public boolean isFirstPanel; // optional
  /**
   * 客户端自己区分使用
   */
  public byte clientParam; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MODE((short)1, "mode"),
    MUSIC_ID((short)2, "musicId"),
    LEVEL((short)3, "level"),
    LAST_LEVEL((short)4, "lastLevel"),
    /**
     * 是否封面,客户端请求封面数据不存在,服务器会随一个发送
     */
    IS_FIRST_PANEL((short)5, "isFirstPanel"),
    /**
     * 客户端自己区分使用
     */
    CLIENT_PARAM((short)6, "clientParam");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MODE
          return MODE;
        case 2: // MUSIC_ID
          return MUSIC_ID;
        case 3: // LEVEL
          return LEVEL;
        case 4: // LAST_LEVEL
          return LAST_LEVEL;
        case 5: // IS_FIRST_PANEL
          return IS_FIRST_PANEL;
        case 6: // CLIENT_PARAM
          return CLIENT_PARAM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MODE_ISSET_ID = 0;
  private static final int __MUSICID_ISSET_ID = 1;
  private static final int __LEVEL_ISSET_ID = 2;
  private static final int __LASTLEVEL_ISSET_ID = 3;
  private static final int __ISFIRSTPANEL_ISSET_ID = 4;
  private static final int __CLIENTPARAM_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.LAST_LEVEL,_Fields.IS_FIRST_PANEL,_Fields.CLIENT_PARAM};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MODE, new org.apache.thrift.meta_data.FieldMetaData("mode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.MUSIC_ID, new org.apache.thrift.meta_data.FieldMetaData("musicId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.LEVEL, new org.apache.thrift.meta_data.FieldMetaData("level", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.LAST_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("lastLevel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.IS_FIRST_PANEL, new org.apache.thrift.meta_data.FieldMetaData("isFirstPanel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CLIENT_PARAM, new org.apache.thrift.meta_data.FieldMetaData("clientParam", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RankMusicQueryParam.class, metaDataMap);
  }

  public RankMusicQueryParam() {
  }

  public RankMusicQueryParam(
    byte mode,
    short musicId,
    byte level)
  {
    this();
    this.mode = mode;
    setModeIsSet(true);
    this.musicId = musicId;
    setMusicIdIsSet(true);
    this.level = level;
    setLevelIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RankMusicQueryParam(RankMusicQueryParam other) {
    __isset_bitfield = other.__isset_bitfield;
    this.mode = other.mode;
    this.musicId = other.musicId;
    this.level = other.level;
    this.lastLevel = other.lastLevel;
    this.isFirstPanel = other.isFirstPanel;
    this.clientParam = other.clientParam;
  }

  public RankMusicQueryParam deepCopy() {
    return new RankMusicQueryParam(this);
  }

  @Override
  public void clear() {
    setModeIsSet(false);
    this.mode = 0;
    setMusicIdIsSet(false);
    this.musicId = 0;
    setLevelIsSet(false);
    this.level = 0;
    setLastLevelIsSet(false);
    this.lastLevel = 0;
    setIsFirstPanelIsSet(false);
    this.isFirstPanel = false;
    setClientParamIsSet(false);
    this.clientParam = 0;
  }

  public byte getMode() {
    return this.mode;
  }

  public RankMusicQueryParam setMode(byte mode) {
    this.mode = mode;
    setModeIsSet(true);
    return this;
  }

  public void unsetMode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MODE_ISSET_ID);
  }

  /** Returns true if field mode is set (has been assigned a value) and false otherwise */
  public boolean isSetMode() {
    return EncodingUtils.testBit(__isset_bitfield, __MODE_ISSET_ID);
  }

  public void setModeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MODE_ISSET_ID, value);
  }

  public short getMusicId() {
    return this.musicId;
  }

  public RankMusicQueryParam setMusicId(short musicId) {
    this.musicId = musicId;
    setMusicIdIsSet(true);
    return this;
  }

  public void unsetMusicId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MUSICID_ISSET_ID);
  }

  /** Returns true if field musicId is set (has been assigned a value) and false otherwise */
  public boolean isSetMusicId() {
    return EncodingUtils.testBit(__isset_bitfield, __MUSICID_ISSET_ID);
  }

  public void setMusicIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MUSICID_ISSET_ID, value);
  }

  public byte getLevel() {
    return this.level;
  }

  public RankMusicQueryParam setLevel(byte level) {
    this.level = level;
    setLevelIsSet(true);
    return this;
  }

  public void unsetLevel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEVEL_ISSET_ID);
  }

  /** Returns true if field level is set (has been assigned a value) and false otherwise */
  public boolean isSetLevel() {
    return EncodingUtils.testBit(__isset_bitfield, __LEVEL_ISSET_ID);
  }

  public void setLevelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEVEL_ISSET_ID, value);
  }

  public byte getLastLevel() {
    return this.lastLevel;
  }

  public RankMusicQueryParam setLastLevel(byte lastLevel) {
    this.lastLevel = lastLevel;
    setLastLevelIsSet(true);
    return this;
  }

  public void unsetLastLevel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTLEVEL_ISSET_ID);
  }

  /** Returns true if field lastLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetLastLevel() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTLEVEL_ISSET_ID);
  }

  public void setLastLevelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTLEVEL_ISSET_ID, value);
  }

  /**
   * 是否封面,客户端请求封面数据不存在,服务器会随一个发送
   */
  public boolean isIsFirstPanel() {
    return this.isFirstPanel;
  }

  /**
   * 是否封面,客户端请求封面数据不存在,服务器会随一个发送
   */
  public RankMusicQueryParam setIsFirstPanel(boolean isFirstPanel) {
    this.isFirstPanel = isFirstPanel;
    setIsFirstPanelIsSet(true);
    return this;
  }

  public void unsetIsFirstPanel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISFIRSTPANEL_ISSET_ID);
  }

  /** Returns true if field isFirstPanel is set (has been assigned a value) and false otherwise */
  public boolean isSetIsFirstPanel() {
    return EncodingUtils.testBit(__isset_bitfield, __ISFIRSTPANEL_ISSET_ID);
  }

  public void setIsFirstPanelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISFIRSTPANEL_ISSET_ID, value);
  }

  /**
   * 客户端自己区分使用
   */
  public byte getClientParam() {
    return this.clientParam;
  }

  /**
   * 客户端自己区分使用
   */
  public RankMusicQueryParam setClientParam(byte clientParam) {
    this.clientParam = clientParam;
    setClientParamIsSet(true);
    return this;
  }

  public void unsetClientParam() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLIENTPARAM_ISSET_ID);
  }

  /** Returns true if field clientParam is set (has been assigned a value) and false otherwise */
  public boolean isSetClientParam() {
    return EncodingUtils.testBit(__isset_bitfield, __CLIENTPARAM_ISSET_ID);
  }

  public void setClientParamIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLIENTPARAM_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MODE:
      if (value == null) {
        unsetMode();
      } else {
        setMode((Byte)value);
      }
      break;

    case MUSIC_ID:
      if (value == null) {
        unsetMusicId();
      } else {
        setMusicId((Short)value);
      }
      break;

    case LEVEL:
      if (value == null) {
        unsetLevel();
      } else {
        setLevel((Byte)value);
      }
      break;

    case LAST_LEVEL:
      if (value == null) {
        unsetLastLevel();
      } else {
        setLastLevel((Byte)value);
      }
      break;

    case IS_FIRST_PANEL:
      if (value == null) {
        unsetIsFirstPanel();
      } else {
        setIsFirstPanel((Boolean)value);
      }
      break;

    case CLIENT_PARAM:
      if (value == null) {
        unsetClientParam();
      } else {
        setClientParam((Byte)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MODE:
      return Byte.valueOf(getMode());

    case MUSIC_ID:
      return Short.valueOf(getMusicId());

    case LEVEL:
      return Byte.valueOf(getLevel());

    case LAST_LEVEL:
      return Byte.valueOf(getLastLevel());

    case IS_FIRST_PANEL:
      return Boolean.valueOf(isIsFirstPanel());

    case CLIENT_PARAM:
      return Byte.valueOf(getClientParam());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MODE:
      return isSetMode();
    case MUSIC_ID:
      return isSetMusicId();
    case LEVEL:
      return isSetLevel();
    case LAST_LEVEL:
      return isSetLastLevel();
    case IS_FIRST_PANEL:
      return isSetIsFirstPanel();
    case CLIENT_PARAM:
      return isSetClientParam();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RankMusicQueryParam)
      return this.equals((RankMusicQueryParam)that);
    return false;
  }

  public boolean equals(RankMusicQueryParam that) {
    if (that == null)
      return false;

    boolean this_present_mode = true;
    boolean that_present_mode = true;
    if (this_present_mode || that_present_mode) {
      if (!(this_present_mode && that_present_mode))
        return false;
      if (this.mode != that.mode)
        return false;
    }

    boolean this_present_musicId = true;
    boolean that_present_musicId = true;
    if (this_present_musicId || that_present_musicId) {
      if (!(this_present_musicId && that_present_musicId))
        return false;
      if (this.musicId != that.musicId)
        return false;
    }

    boolean this_present_level = true;
    boolean that_present_level = true;
    if (this_present_level || that_present_level) {
      if (!(this_present_level && that_present_level))
        return false;
      if (this.level != that.level)
        return false;
    }

    boolean this_present_lastLevel = true && this.isSetLastLevel();
    boolean that_present_lastLevel = true && that.isSetLastLevel();
    if (this_present_lastLevel || that_present_lastLevel) {
      if (!(this_present_lastLevel && that_present_lastLevel))
        return false;
      if (this.lastLevel != that.lastLevel)
        return false;
    }

    boolean this_present_isFirstPanel = true && this.isSetIsFirstPanel();
    boolean that_present_isFirstPanel = true && that.isSetIsFirstPanel();
    if (this_present_isFirstPanel || that_present_isFirstPanel) {
      if (!(this_present_isFirstPanel && that_present_isFirstPanel))
        return false;
      if (this.isFirstPanel != that.isFirstPanel)
        return false;
    }

    boolean this_present_clientParam = true && this.isSetClientParam();
    boolean that_present_clientParam = true && that.isSetClientParam();
    if (this_present_clientParam || that_present_clientParam) {
      if (!(this_present_clientParam && that_present_clientParam))
        return false;
      if (this.clientParam != that.clientParam)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(RankMusicQueryParam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    RankMusicQueryParam typedOther = (RankMusicQueryParam)other;

    lastComparison = Boolean.valueOf(isSetMode()).compareTo(typedOther.isSetMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mode, typedOther.mode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMusicId()).compareTo(typedOther.isSetMusicId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMusicId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.musicId, typedOther.musicId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLevel()).compareTo(typedOther.isSetLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.level, typedOther.level);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastLevel()).compareTo(typedOther.isSetLastLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastLevel, typedOther.lastLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsFirstPanel()).compareTo(typedOther.isSetIsFirstPanel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsFirstPanel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isFirstPanel, typedOther.isFirstPanel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientParam()).compareTo(typedOther.isSetClientParam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientParam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientParam, typedOther.clientParam);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RankMusicQueryParam(");
    boolean first = true;

    sb.append("mode:");
    sb.append(this.mode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("musicId:");
    sb.append(this.musicId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("level:");
    sb.append(this.level);
    first = false;
    if (isSetLastLevel()) {
      if (!first) sb.append(", ");
      sb.append("lastLevel:");
      sb.append(this.lastLevel);
      first = false;
    }
    if (isSetIsFirstPanel()) {
      if (!first) sb.append(", ");
      sb.append("isFirstPanel:");
      sb.append(this.isFirstPanel);
      first = false;
    }
    if (isSetClientParam()) {
      if (!first) sb.append(", ");
      sb.append("clientParam:");
      sb.append(this.clientParam);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RankMusicQueryParamStandardSchemeFactory implements SchemeFactory {
    public RankMusicQueryParamStandardScheme getScheme() {
      return new RankMusicQueryParamStandardScheme();
    }
  }

  private static class RankMusicQueryParamStandardScheme extends StandardScheme<RankMusicQueryParam> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RankMusicQueryParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.mode = iprot.readByte();
              struct.setModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MUSIC_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.musicId = iprot.readI16();
              struct.setMusicIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.level = iprot.readByte();
              struct.setLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LAST_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.lastLevel = iprot.readByte();
              struct.setLastLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_FIRST_PANEL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isFirstPanel = iprot.readBool();
              struct.setIsFirstPanelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CLIENT_PARAM
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.clientParam = iprot.readByte();
              struct.setClientParamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RankMusicQueryParam struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MODE_FIELD_DESC);
      oprot.writeByte(struct.mode);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MUSIC_ID_FIELD_DESC);
      oprot.writeI16(struct.musicId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LEVEL_FIELD_DESC);
      oprot.writeByte(struct.level);
      oprot.writeFieldEnd();
      if (struct.isSetLastLevel()) {
        oprot.writeFieldBegin(LAST_LEVEL_FIELD_DESC);
        oprot.writeByte(struct.lastLevel);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsFirstPanel()) {
        oprot.writeFieldBegin(IS_FIRST_PANEL_FIELD_DESC);
        oprot.writeBool(struct.isFirstPanel);
        oprot.writeFieldEnd();
      }
      if (struct.isSetClientParam()) {
        oprot.writeFieldBegin(CLIENT_PARAM_FIELD_DESC);
        oprot.writeByte(struct.clientParam);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RankMusicQueryParamTupleSchemeFactory implements SchemeFactory {
    public RankMusicQueryParamTupleScheme getScheme() {
      return new RankMusicQueryParamTupleScheme();
    }
  }

  private static class RankMusicQueryParamTupleScheme extends TupleScheme<RankMusicQueryParam> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RankMusicQueryParam struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMode()) {
        optionals.set(0);
      }
      if (struct.isSetMusicId()) {
        optionals.set(1);
      }
      if (struct.isSetLevel()) {
        optionals.set(2);
      }
      if (struct.isSetLastLevel()) {
        optionals.set(3);
      }
      if (struct.isSetIsFirstPanel()) {
        optionals.set(4);
      }
      if (struct.isSetClientParam()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetMode()) {
        oprot.writeByte(struct.mode);
      }
      if (struct.isSetMusicId()) {
        oprot.writeI16(struct.musicId);
      }
      if (struct.isSetLevel()) {
        oprot.writeByte(struct.level);
      }
      if (struct.isSetLastLevel()) {
        oprot.writeByte(struct.lastLevel);
      }
      if (struct.isSetIsFirstPanel()) {
        oprot.writeBool(struct.isFirstPanel);
      }
      if (struct.isSetClientParam()) {
        oprot.writeByte(struct.clientParam);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RankMusicQueryParam struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.mode = iprot.readByte();
        struct.setModeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.musicId = iprot.readI16();
        struct.setMusicIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.level = iprot.readByte();
        struct.setLevelIsSet(true);
      }
      if (incoming.get(3)) {
        struct.lastLevel = iprot.readByte();
        struct.setLastLevelIsSet(true);
      }
      if (incoming.get(4)) {
        struct.isFirstPanel = iprot.readBool();
        struct.setIsFirstPanelIsSet(true);
      }
      if (incoming.get(5)) {
        struct.clientParam = iprot.readByte();
        struct.setClientParamIsSet(true);
      }
    }
  }

}

