/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 游戏数据分页信息
 */
public class CommonDataPageInfos implements org.apache.thrift.TBase<CommonDataPageInfos, CommonDataPageInfos._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CommonDataPageInfos");

  private static final org.apache.thrift.protocol.TField PAGE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("pageIds", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField TOTAL_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("totalSize", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I16, (short)3);
  private static final org.apache.thrift.protocol.TField UPDATE_MALL_ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("updateMallItems", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField UPDATE_GROUND_ROOM_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("updateGroundRoomInfos", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField UPDATE_DANCE_ROOM_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("updateDanceRoomInfos", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField UPDATE_GUILD_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("updateGuildInfos", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField UPDATE_WEDDING_NOTICES_FIELD_DESC = new org.apache.thrift.protocol.TField("updateWeddingNotices", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField UPDATE_WEDDING_ROOM_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("updateWeddingRoomInfos", org.apache.thrift.protocol.TType.LIST, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CommonDataPageInfosStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CommonDataPageInfosTupleSchemeFactory());
  }

  public List<CommonDataPageIds> pageIds; // required
  /**
   * 信息总数
   */
  public int totalSize; // required
  /**
   * 此类信息总版本号
   */
  public short version; // optional
  /**
   * 从未发给客户端的，或者需要更新的商品信息
   */
  public List<MallItem> updateMallItems; // optional
  /**
   * 需要更新的温泉广场信息
   */
  public List<GroundRoomInfo> updateGroundRoomInfos; // optional
  /**
   * 需要更新的竞技房间信息
   */
  public List<DanceRoomInfo> updateDanceRoomInfos; // optional
  /**
   * 需要更新的舞团信息
   */
  public List<GuildBaseInfo> updateGuildInfos; // optional
  /**
   * 需要更新的婚礼动态信息
   */
  public List<WeddingNotice> updateWeddingNotices; // optional
  /**
   * 需要更新的婚房信息
   */
  public List<WeddingRoomInfo> updateWeddingRoomInfos; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PAGE_IDS((short)1, "pageIds"),
    /**
     * 信息总数
     */
    TOTAL_SIZE((short)2, "totalSize"),
    /**
     * 此类信息总版本号
     */
    VERSION((short)3, "version"),
    /**
     * 从未发给客户端的，或者需要更新的商品信息
     */
    UPDATE_MALL_ITEMS((short)4, "updateMallItems"),
    /**
     * 需要更新的温泉广场信息
     */
    UPDATE_GROUND_ROOM_INFOS((short)5, "updateGroundRoomInfos"),
    /**
     * 需要更新的竞技房间信息
     */
    UPDATE_DANCE_ROOM_INFOS((short)6, "updateDanceRoomInfos"),
    /**
     * 需要更新的舞团信息
     */
    UPDATE_GUILD_INFOS((short)7, "updateGuildInfos"),
    /**
     * 需要更新的婚礼动态信息
     */
    UPDATE_WEDDING_NOTICES((short)8, "updateWeddingNotices"),
    /**
     * 需要更新的婚房信息
     */
    UPDATE_WEDDING_ROOM_INFOS((short)9, "updateWeddingRoomInfos");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PAGE_IDS
          return PAGE_IDS;
        case 2: // TOTAL_SIZE
          return TOTAL_SIZE;
        case 3: // VERSION
          return VERSION;
        case 4: // UPDATE_MALL_ITEMS
          return UPDATE_MALL_ITEMS;
        case 5: // UPDATE_GROUND_ROOM_INFOS
          return UPDATE_GROUND_ROOM_INFOS;
        case 6: // UPDATE_DANCE_ROOM_INFOS
          return UPDATE_DANCE_ROOM_INFOS;
        case 7: // UPDATE_GUILD_INFOS
          return UPDATE_GUILD_INFOS;
        case 8: // UPDATE_WEDDING_NOTICES
          return UPDATE_WEDDING_NOTICES;
        case 9: // UPDATE_WEDDING_ROOM_INFOS
          return UPDATE_WEDDING_ROOM_INFOS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOTALSIZE_ISSET_ID = 0;
  private static final int __VERSION_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.VERSION,_Fields.UPDATE_MALL_ITEMS,_Fields.UPDATE_GROUND_ROOM_INFOS,_Fields.UPDATE_DANCE_ROOM_INFOS,_Fields.UPDATE_GUILD_INFOS,_Fields.UPDATE_WEDDING_NOTICES,_Fields.UPDATE_WEDDING_ROOM_INFOS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PAGE_IDS, new org.apache.thrift.meta_data.FieldMetaData("pageIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CommonDataPageIds.class))));
    tmpMap.put(_Fields.TOTAL_SIZE, new org.apache.thrift.meta_data.FieldMetaData("totalSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.UPDATE_MALL_ITEMS, new org.apache.thrift.meta_data.FieldMetaData("updateMallItems", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MallItem.class))));
    tmpMap.put(_Fields.UPDATE_GROUND_ROOM_INFOS, new org.apache.thrift.meta_data.FieldMetaData("updateGroundRoomInfos", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GroundRoomInfo.class))));
    tmpMap.put(_Fields.UPDATE_DANCE_ROOM_INFOS, new org.apache.thrift.meta_data.FieldMetaData("updateDanceRoomInfos", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DanceRoomInfo.class))));
    tmpMap.put(_Fields.UPDATE_GUILD_INFOS, new org.apache.thrift.meta_data.FieldMetaData("updateGuildInfos", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GuildBaseInfo.class))));
    tmpMap.put(_Fields.UPDATE_WEDDING_NOTICES, new org.apache.thrift.meta_data.FieldMetaData("updateWeddingNotices", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WeddingNotice.class))));
    tmpMap.put(_Fields.UPDATE_WEDDING_ROOM_INFOS, new org.apache.thrift.meta_data.FieldMetaData("updateWeddingRoomInfos", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WeddingRoomInfo.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CommonDataPageInfos.class, metaDataMap);
  }

  public CommonDataPageInfos() {
  }

  public CommonDataPageInfos(
    List<CommonDataPageIds> pageIds,
    int totalSize)
  {
    this();
    this.pageIds = pageIds;
    this.totalSize = totalSize;
    setTotalSizeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CommonDataPageInfos(CommonDataPageInfos other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPageIds()) {
      List<CommonDataPageIds> __this__pageIds = new ArrayList<CommonDataPageIds>();
      for (CommonDataPageIds other_element : other.pageIds) {
        __this__pageIds.add(new CommonDataPageIds(other_element));
      }
      this.pageIds = __this__pageIds;
    }
    this.totalSize = other.totalSize;
    this.version = other.version;
    if (other.isSetUpdateMallItems()) {
      List<MallItem> __this__updateMallItems = new ArrayList<MallItem>();
      for (MallItem other_element : other.updateMallItems) {
        __this__updateMallItems.add(new MallItem(other_element));
      }
      this.updateMallItems = __this__updateMallItems;
    }
    if (other.isSetUpdateGroundRoomInfos()) {
      List<GroundRoomInfo> __this__updateGroundRoomInfos = new ArrayList<GroundRoomInfo>();
      for (GroundRoomInfo other_element : other.updateGroundRoomInfos) {
        __this__updateGroundRoomInfos.add(new GroundRoomInfo(other_element));
      }
      this.updateGroundRoomInfos = __this__updateGroundRoomInfos;
    }
    if (other.isSetUpdateDanceRoomInfos()) {
      List<DanceRoomInfo> __this__updateDanceRoomInfos = new ArrayList<DanceRoomInfo>();
      for (DanceRoomInfo other_element : other.updateDanceRoomInfos) {
        __this__updateDanceRoomInfos.add(new DanceRoomInfo(other_element));
      }
      this.updateDanceRoomInfos = __this__updateDanceRoomInfos;
    }
    if (other.isSetUpdateGuildInfos()) {
      List<GuildBaseInfo> __this__updateGuildInfos = new ArrayList<GuildBaseInfo>();
      for (GuildBaseInfo other_element : other.updateGuildInfos) {
        __this__updateGuildInfos.add(new GuildBaseInfo(other_element));
      }
      this.updateGuildInfos = __this__updateGuildInfos;
    }
    if (other.isSetUpdateWeddingNotices()) {
      List<WeddingNotice> __this__updateWeddingNotices = new ArrayList<WeddingNotice>();
      for (WeddingNotice other_element : other.updateWeddingNotices) {
        __this__updateWeddingNotices.add(new WeddingNotice(other_element));
      }
      this.updateWeddingNotices = __this__updateWeddingNotices;
    }
    if (other.isSetUpdateWeddingRoomInfos()) {
      List<WeddingRoomInfo> __this__updateWeddingRoomInfos = new ArrayList<WeddingRoomInfo>();
      for (WeddingRoomInfo other_element : other.updateWeddingRoomInfos) {
        __this__updateWeddingRoomInfos.add(new WeddingRoomInfo(other_element));
      }
      this.updateWeddingRoomInfos = __this__updateWeddingRoomInfos;
    }
  }

  public CommonDataPageInfos deepCopy() {
    return new CommonDataPageInfos(this);
  }

  @Override
  public void clear() {
    this.pageIds = null;
    setTotalSizeIsSet(false);
    this.totalSize = 0;
    setVersionIsSet(false);
    this.version = 0;
    this.updateMallItems = null;
    this.updateGroundRoomInfos = null;
    this.updateDanceRoomInfos = null;
    this.updateGuildInfos = null;
    this.updateWeddingNotices = null;
    this.updateWeddingRoomInfos = null;
  }

  public int getPageIdsSize() {
    return (this.pageIds == null) ? 0 : this.pageIds.size();
  }

  public java.util.Iterator<CommonDataPageIds> getPageIdsIterator() {
    return (this.pageIds == null) ? null : this.pageIds.iterator();
  }

  public void addToPageIds(CommonDataPageIds elem) {
    if (this.pageIds == null) {
      this.pageIds = new ArrayList<CommonDataPageIds>();
    }
    this.pageIds.add(elem);
  }

  public List<CommonDataPageIds> getPageIds() {
    return this.pageIds;
  }

  public CommonDataPageInfos setPageIds(List<CommonDataPageIds> pageIds) {
    this.pageIds = pageIds;
    return this;
  }

  public void unsetPageIds() {
    this.pageIds = null;
  }

  /** Returns true if field pageIds is set (has been assigned a value) and false otherwise */
  public boolean isSetPageIds() {
    return this.pageIds != null;
  }

  public void setPageIdsIsSet(boolean value) {
    if (!value) {
      this.pageIds = null;
    }
  }

  /**
   * 信息总数
   */
  public int getTotalSize() {
    return this.totalSize;
  }

  /**
   * 信息总数
   */
  public CommonDataPageInfos setTotalSize(int totalSize) {
    this.totalSize = totalSize;
    setTotalSizeIsSet(true);
    return this;
  }

  public void unsetTotalSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALSIZE_ISSET_ID);
  }

  /** Returns true if field totalSize is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalSize() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALSIZE_ISSET_ID);
  }

  public void setTotalSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALSIZE_ISSET_ID, value);
  }

  /**
   * 此类信息总版本号
   */
  public short getVersion() {
    return this.version;
  }

  /**
   * 此类信息总版本号
   */
  public CommonDataPageInfos setVersion(short version) {
    this.version = version;
    setVersionIsSet(true);
    return this;
  }

  public void unsetVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
  }

  public int getUpdateMallItemsSize() {
    return (this.updateMallItems == null) ? 0 : this.updateMallItems.size();
  }

  public java.util.Iterator<MallItem> getUpdateMallItemsIterator() {
    return (this.updateMallItems == null) ? null : this.updateMallItems.iterator();
  }

  public void addToUpdateMallItems(MallItem elem) {
    if (this.updateMallItems == null) {
      this.updateMallItems = new ArrayList<MallItem>();
    }
    this.updateMallItems.add(elem);
  }

  /**
   * 从未发给客户端的，或者需要更新的商品信息
   */
  public List<MallItem> getUpdateMallItems() {
    return this.updateMallItems;
  }

  /**
   * 从未发给客户端的，或者需要更新的商品信息
   */
  public CommonDataPageInfos setUpdateMallItems(List<MallItem> updateMallItems) {
    this.updateMallItems = updateMallItems;
    return this;
  }

  public void unsetUpdateMallItems() {
    this.updateMallItems = null;
  }

  /** Returns true if field updateMallItems is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateMallItems() {
    return this.updateMallItems != null;
  }

  public void setUpdateMallItemsIsSet(boolean value) {
    if (!value) {
      this.updateMallItems = null;
    }
  }

  public int getUpdateGroundRoomInfosSize() {
    return (this.updateGroundRoomInfos == null) ? 0 : this.updateGroundRoomInfos.size();
  }

  public java.util.Iterator<GroundRoomInfo> getUpdateGroundRoomInfosIterator() {
    return (this.updateGroundRoomInfos == null) ? null : this.updateGroundRoomInfos.iterator();
  }

  public void addToUpdateGroundRoomInfos(GroundRoomInfo elem) {
    if (this.updateGroundRoomInfos == null) {
      this.updateGroundRoomInfos = new ArrayList<GroundRoomInfo>();
    }
    this.updateGroundRoomInfos.add(elem);
  }

  /**
   * 需要更新的温泉广场信息
   */
  public List<GroundRoomInfo> getUpdateGroundRoomInfos() {
    return this.updateGroundRoomInfos;
  }

  /**
   * 需要更新的温泉广场信息
   */
  public CommonDataPageInfos setUpdateGroundRoomInfos(List<GroundRoomInfo> updateGroundRoomInfos) {
    this.updateGroundRoomInfos = updateGroundRoomInfos;
    return this;
  }

  public void unsetUpdateGroundRoomInfos() {
    this.updateGroundRoomInfos = null;
  }

  /** Returns true if field updateGroundRoomInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateGroundRoomInfos() {
    return this.updateGroundRoomInfos != null;
  }

  public void setUpdateGroundRoomInfosIsSet(boolean value) {
    if (!value) {
      this.updateGroundRoomInfos = null;
    }
  }

  public int getUpdateDanceRoomInfosSize() {
    return (this.updateDanceRoomInfos == null) ? 0 : this.updateDanceRoomInfos.size();
  }

  public java.util.Iterator<DanceRoomInfo> getUpdateDanceRoomInfosIterator() {
    return (this.updateDanceRoomInfos == null) ? null : this.updateDanceRoomInfos.iterator();
  }

  public void addToUpdateDanceRoomInfos(DanceRoomInfo elem) {
    if (this.updateDanceRoomInfos == null) {
      this.updateDanceRoomInfos = new ArrayList<DanceRoomInfo>();
    }
    this.updateDanceRoomInfos.add(elem);
  }

  /**
   * 需要更新的竞技房间信息
   */
  public List<DanceRoomInfo> getUpdateDanceRoomInfos() {
    return this.updateDanceRoomInfos;
  }

  /**
   * 需要更新的竞技房间信息
   */
  public CommonDataPageInfos setUpdateDanceRoomInfos(List<DanceRoomInfo> updateDanceRoomInfos) {
    this.updateDanceRoomInfos = updateDanceRoomInfos;
    return this;
  }

  public void unsetUpdateDanceRoomInfos() {
    this.updateDanceRoomInfos = null;
  }

  /** Returns true if field updateDanceRoomInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateDanceRoomInfos() {
    return this.updateDanceRoomInfos != null;
  }

  public void setUpdateDanceRoomInfosIsSet(boolean value) {
    if (!value) {
      this.updateDanceRoomInfos = null;
    }
  }

  public int getUpdateGuildInfosSize() {
    return (this.updateGuildInfos == null) ? 0 : this.updateGuildInfos.size();
  }

  public java.util.Iterator<GuildBaseInfo> getUpdateGuildInfosIterator() {
    return (this.updateGuildInfos == null) ? null : this.updateGuildInfos.iterator();
  }

  public void addToUpdateGuildInfos(GuildBaseInfo elem) {
    if (this.updateGuildInfos == null) {
      this.updateGuildInfos = new ArrayList<GuildBaseInfo>();
    }
    this.updateGuildInfos.add(elem);
  }

  /**
   * 需要更新的舞团信息
   */
  public List<GuildBaseInfo> getUpdateGuildInfos() {
    return this.updateGuildInfos;
  }

  /**
   * 需要更新的舞团信息
   */
  public CommonDataPageInfos setUpdateGuildInfos(List<GuildBaseInfo> updateGuildInfos) {
    this.updateGuildInfos = updateGuildInfos;
    return this;
  }

  public void unsetUpdateGuildInfos() {
    this.updateGuildInfos = null;
  }

  /** Returns true if field updateGuildInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateGuildInfos() {
    return this.updateGuildInfos != null;
  }

  public void setUpdateGuildInfosIsSet(boolean value) {
    if (!value) {
      this.updateGuildInfos = null;
    }
  }

  public int getUpdateWeddingNoticesSize() {
    return (this.updateWeddingNotices == null) ? 0 : this.updateWeddingNotices.size();
  }

  public java.util.Iterator<WeddingNotice> getUpdateWeddingNoticesIterator() {
    return (this.updateWeddingNotices == null) ? null : this.updateWeddingNotices.iterator();
  }

  public void addToUpdateWeddingNotices(WeddingNotice elem) {
    if (this.updateWeddingNotices == null) {
      this.updateWeddingNotices = new ArrayList<WeddingNotice>();
    }
    this.updateWeddingNotices.add(elem);
  }

  /**
   * 需要更新的婚礼动态信息
   */
  public List<WeddingNotice> getUpdateWeddingNotices() {
    return this.updateWeddingNotices;
  }

  /**
   * 需要更新的婚礼动态信息
   */
  public CommonDataPageInfos setUpdateWeddingNotices(List<WeddingNotice> updateWeddingNotices) {
    this.updateWeddingNotices = updateWeddingNotices;
    return this;
  }

  public void unsetUpdateWeddingNotices() {
    this.updateWeddingNotices = null;
  }

  /** Returns true if field updateWeddingNotices is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateWeddingNotices() {
    return this.updateWeddingNotices != null;
  }

  public void setUpdateWeddingNoticesIsSet(boolean value) {
    if (!value) {
      this.updateWeddingNotices = null;
    }
  }

  public int getUpdateWeddingRoomInfosSize() {
    return (this.updateWeddingRoomInfos == null) ? 0 : this.updateWeddingRoomInfos.size();
  }

  public java.util.Iterator<WeddingRoomInfo> getUpdateWeddingRoomInfosIterator() {
    return (this.updateWeddingRoomInfos == null) ? null : this.updateWeddingRoomInfos.iterator();
  }

  public void addToUpdateWeddingRoomInfos(WeddingRoomInfo elem) {
    if (this.updateWeddingRoomInfos == null) {
      this.updateWeddingRoomInfos = new ArrayList<WeddingRoomInfo>();
    }
    this.updateWeddingRoomInfos.add(elem);
  }

  /**
   * 需要更新的婚房信息
   */
  public List<WeddingRoomInfo> getUpdateWeddingRoomInfos() {
    return this.updateWeddingRoomInfos;
  }

  /**
   * 需要更新的婚房信息
   */
  public CommonDataPageInfos setUpdateWeddingRoomInfos(List<WeddingRoomInfo> updateWeddingRoomInfos) {
    this.updateWeddingRoomInfos = updateWeddingRoomInfos;
    return this;
  }

  public void unsetUpdateWeddingRoomInfos() {
    this.updateWeddingRoomInfos = null;
  }

  /** Returns true if field updateWeddingRoomInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateWeddingRoomInfos() {
    return this.updateWeddingRoomInfos != null;
  }

  public void setUpdateWeddingRoomInfosIsSet(boolean value) {
    if (!value) {
      this.updateWeddingRoomInfos = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PAGE_IDS:
      if (value == null) {
        unsetPageIds();
      } else {
        setPageIds((List<CommonDataPageIds>)value);
      }
      break;

    case TOTAL_SIZE:
      if (value == null) {
        unsetTotalSize();
      } else {
        setTotalSize((Integer)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((Short)value);
      }
      break;

    case UPDATE_MALL_ITEMS:
      if (value == null) {
        unsetUpdateMallItems();
      } else {
        setUpdateMallItems((List<MallItem>)value);
      }
      break;

    case UPDATE_GROUND_ROOM_INFOS:
      if (value == null) {
        unsetUpdateGroundRoomInfos();
      } else {
        setUpdateGroundRoomInfos((List<GroundRoomInfo>)value);
      }
      break;

    case UPDATE_DANCE_ROOM_INFOS:
      if (value == null) {
        unsetUpdateDanceRoomInfos();
      } else {
        setUpdateDanceRoomInfos((List<DanceRoomInfo>)value);
      }
      break;

    case UPDATE_GUILD_INFOS:
      if (value == null) {
        unsetUpdateGuildInfos();
      } else {
        setUpdateGuildInfos((List<GuildBaseInfo>)value);
      }
      break;

    case UPDATE_WEDDING_NOTICES:
      if (value == null) {
        unsetUpdateWeddingNotices();
      } else {
        setUpdateWeddingNotices((List<WeddingNotice>)value);
      }
      break;

    case UPDATE_WEDDING_ROOM_INFOS:
      if (value == null) {
        unsetUpdateWeddingRoomInfos();
      } else {
        setUpdateWeddingRoomInfos((List<WeddingRoomInfo>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PAGE_IDS:
      return getPageIds();

    case TOTAL_SIZE:
      return Integer.valueOf(getTotalSize());

    case VERSION:
      return Short.valueOf(getVersion());

    case UPDATE_MALL_ITEMS:
      return getUpdateMallItems();

    case UPDATE_GROUND_ROOM_INFOS:
      return getUpdateGroundRoomInfos();

    case UPDATE_DANCE_ROOM_INFOS:
      return getUpdateDanceRoomInfos();

    case UPDATE_GUILD_INFOS:
      return getUpdateGuildInfos();

    case UPDATE_WEDDING_NOTICES:
      return getUpdateWeddingNotices();

    case UPDATE_WEDDING_ROOM_INFOS:
      return getUpdateWeddingRoomInfos();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PAGE_IDS:
      return isSetPageIds();
    case TOTAL_SIZE:
      return isSetTotalSize();
    case VERSION:
      return isSetVersion();
    case UPDATE_MALL_ITEMS:
      return isSetUpdateMallItems();
    case UPDATE_GROUND_ROOM_INFOS:
      return isSetUpdateGroundRoomInfos();
    case UPDATE_DANCE_ROOM_INFOS:
      return isSetUpdateDanceRoomInfos();
    case UPDATE_GUILD_INFOS:
      return isSetUpdateGuildInfos();
    case UPDATE_WEDDING_NOTICES:
      return isSetUpdateWeddingNotices();
    case UPDATE_WEDDING_ROOM_INFOS:
      return isSetUpdateWeddingRoomInfos();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CommonDataPageInfos)
      return this.equals((CommonDataPageInfos)that);
    return false;
  }

  public boolean equals(CommonDataPageInfos that) {
    if (that == null)
      return false;

    boolean this_present_pageIds = true && this.isSetPageIds();
    boolean that_present_pageIds = true && that.isSetPageIds();
    if (this_present_pageIds || that_present_pageIds) {
      if (!(this_present_pageIds && that_present_pageIds))
        return false;
      if (!this.pageIds.equals(that.pageIds))
        return false;
    }

    boolean this_present_totalSize = true;
    boolean that_present_totalSize = true;
    if (this_present_totalSize || that_present_totalSize) {
      if (!(this_present_totalSize && that_present_totalSize))
        return false;
      if (this.totalSize != that.totalSize)
        return false;
    }

    boolean this_present_version = true && this.isSetVersion();
    boolean that_present_version = true && that.isSetVersion();
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    boolean this_present_updateMallItems = true && this.isSetUpdateMallItems();
    boolean that_present_updateMallItems = true && that.isSetUpdateMallItems();
    if (this_present_updateMallItems || that_present_updateMallItems) {
      if (!(this_present_updateMallItems && that_present_updateMallItems))
        return false;
      if (!this.updateMallItems.equals(that.updateMallItems))
        return false;
    }

    boolean this_present_updateGroundRoomInfos = true && this.isSetUpdateGroundRoomInfos();
    boolean that_present_updateGroundRoomInfos = true && that.isSetUpdateGroundRoomInfos();
    if (this_present_updateGroundRoomInfos || that_present_updateGroundRoomInfos) {
      if (!(this_present_updateGroundRoomInfos && that_present_updateGroundRoomInfos))
        return false;
      if (!this.updateGroundRoomInfos.equals(that.updateGroundRoomInfos))
        return false;
    }

    boolean this_present_updateDanceRoomInfos = true && this.isSetUpdateDanceRoomInfos();
    boolean that_present_updateDanceRoomInfos = true && that.isSetUpdateDanceRoomInfos();
    if (this_present_updateDanceRoomInfos || that_present_updateDanceRoomInfos) {
      if (!(this_present_updateDanceRoomInfos && that_present_updateDanceRoomInfos))
        return false;
      if (!this.updateDanceRoomInfos.equals(that.updateDanceRoomInfos))
        return false;
    }

    boolean this_present_updateGuildInfos = true && this.isSetUpdateGuildInfos();
    boolean that_present_updateGuildInfos = true && that.isSetUpdateGuildInfos();
    if (this_present_updateGuildInfos || that_present_updateGuildInfos) {
      if (!(this_present_updateGuildInfos && that_present_updateGuildInfos))
        return false;
      if (!this.updateGuildInfos.equals(that.updateGuildInfos))
        return false;
    }

    boolean this_present_updateWeddingNotices = true && this.isSetUpdateWeddingNotices();
    boolean that_present_updateWeddingNotices = true && that.isSetUpdateWeddingNotices();
    if (this_present_updateWeddingNotices || that_present_updateWeddingNotices) {
      if (!(this_present_updateWeddingNotices && that_present_updateWeddingNotices))
        return false;
      if (!this.updateWeddingNotices.equals(that.updateWeddingNotices))
        return false;
    }

    boolean this_present_updateWeddingRoomInfos = true && this.isSetUpdateWeddingRoomInfos();
    boolean that_present_updateWeddingRoomInfos = true && that.isSetUpdateWeddingRoomInfos();
    if (this_present_updateWeddingRoomInfos || that_present_updateWeddingRoomInfos) {
      if (!(this_present_updateWeddingRoomInfos && that_present_updateWeddingRoomInfos))
        return false;
      if (!this.updateWeddingRoomInfos.equals(that.updateWeddingRoomInfos))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(CommonDataPageInfos other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CommonDataPageInfos typedOther = (CommonDataPageInfos)other;

    lastComparison = Boolean.valueOf(isSetPageIds()).compareTo(typedOther.isSetPageIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageIds, typedOther.pageIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalSize()).compareTo(typedOther.isSetTotalSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalSize, typedOther.totalSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(typedOther.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, typedOther.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateMallItems()).compareTo(typedOther.isSetUpdateMallItems());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateMallItems()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateMallItems, typedOther.updateMallItems);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateGroundRoomInfos()).compareTo(typedOther.isSetUpdateGroundRoomInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateGroundRoomInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateGroundRoomInfos, typedOther.updateGroundRoomInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateDanceRoomInfos()).compareTo(typedOther.isSetUpdateDanceRoomInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateDanceRoomInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateDanceRoomInfos, typedOther.updateDanceRoomInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateGuildInfos()).compareTo(typedOther.isSetUpdateGuildInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateGuildInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateGuildInfos, typedOther.updateGuildInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateWeddingNotices()).compareTo(typedOther.isSetUpdateWeddingNotices());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateWeddingNotices()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateWeddingNotices, typedOther.updateWeddingNotices);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateWeddingRoomInfos()).compareTo(typedOther.isSetUpdateWeddingRoomInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateWeddingRoomInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateWeddingRoomInfos, typedOther.updateWeddingRoomInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CommonDataPageInfos(");
    boolean first = true;

    sb.append("pageIds:");
    if (this.pageIds == null) {
      sb.append("null");
    } else {
      sb.append(this.pageIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalSize:");
    sb.append(this.totalSize);
    first = false;
    if (isSetVersion()) {
      if (!first) sb.append(", ");
      sb.append("version:");
      sb.append(this.version);
      first = false;
    }
    if (isSetUpdateMallItems()) {
      if (!first) sb.append(", ");
      sb.append("updateMallItems:");
      if (this.updateMallItems == null) {
        sb.append("null");
      } else {
        sb.append(this.updateMallItems);
      }
      first = false;
    }
    if (isSetUpdateGroundRoomInfos()) {
      if (!first) sb.append(", ");
      sb.append("updateGroundRoomInfos:");
      if (this.updateGroundRoomInfos == null) {
        sb.append("null");
      } else {
        sb.append(this.updateGroundRoomInfos);
      }
      first = false;
    }
    if (isSetUpdateDanceRoomInfos()) {
      if (!first) sb.append(", ");
      sb.append("updateDanceRoomInfos:");
      if (this.updateDanceRoomInfos == null) {
        sb.append("null");
      } else {
        sb.append(this.updateDanceRoomInfos);
      }
      first = false;
    }
    if (isSetUpdateGuildInfos()) {
      if (!first) sb.append(", ");
      sb.append("updateGuildInfos:");
      if (this.updateGuildInfos == null) {
        sb.append("null");
      } else {
        sb.append(this.updateGuildInfos);
      }
      first = false;
    }
    if (isSetUpdateWeddingNotices()) {
      if (!first) sb.append(", ");
      sb.append("updateWeddingNotices:");
      if (this.updateWeddingNotices == null) {
        sb.append("null");
      } else {
        sb.append(this.updateWeddingNotices);
      }
      first = false;
    }
    if (isSetUpdateWeddingRoomInfos()) {
      if (!first) sb.append(", ");
      sb.append("updateWeddingRoomInfos:");
      if (this.updateWeddingRoomInfos == null) {
        sb.append("null");
      } else {
        sb.append(this.updateWeddingRoomInfos);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CommonDataPageInfosStandardSchemeFactory implements SchemeFactory {
    public CommonDataPageInfosStandardScheme getScheme() {
      return new CommonDataPageInfosStandardScheme();
    }
  }

  private static class CommonDataPageInfosStandardScheme extends StandardScheme<CommonDataPageInfos> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CommonDataPageInfos struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PAGE_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list644 = iprot.readListBegin();
                struct.pageIds = new ArrayList<CommonDataPageIds>(_list644.size);
                for (int _i645 = 0; _i645 < _list644.size; ++_i645)
                {
                  CommonDataPageIds _elem646; // required
                  _elem646 = new CommonDataPageIds();
                  _elem646.read(iprot);
                  struct.pageIds.add(_elem646);
                }
                iprot.readListEnd();
              }
              struct.setPageIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TOTAL_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalSize = iprot.readI32();
              struct.setTotalSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.version = iprot.readI16();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // UPDATE_MALL_ITEMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list647 = iprot.readListBegin();
                struct.updateMallItems = new ArrayList<MallItem>(_list647.size);
                for (int _i648 = 0; _i648 < _list647.size; ++_i648)
                {
                  MallItem _elem649; // required
                  _elem649 = new MallItem();
                  _elem649.read(iprot);
                  struct.updateMallItems.add(_elem649);
                }
                iprot.readListEnd();
              }
              struct.setUpdateMallItemsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // UPDATE_GROUND_ROOM_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list650 = iprot.readListBegin();
                struct.updateGroundRoomInfos = new ArrayList<GroundRoomInfo>(_list650.size);
                for (int _i651 = 0; _i651 < _list650.size; ++_i651)
                {
                  GroundRoomInfo _elem652; // required
                  _elem652 = new GroundRoomInfo();
                  _elem652.read(iprot);
                  struct.updateGroundRoomInfos.add(_elem652);
                }
                iprot.readListEnd();
              }
              struct.setUpdateGroundRoomInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // UPDATE_DANCE_ROOM_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list653 = iprot.readListBegin();
                struct.updateDanceRoomInfos = new ArrayList<DanceRoomInfo>(_list653.size);
                for (int _i654 = 0; _i654 < _list653.size; ++_i654)
                {
                  DanceRoomInfo _elem655; // required
                  _elem655 = new DanceRoomInfo();
                  _elem655.read(iprot);
                  struct.updateDanceRoomInfos.add(_elem655);
                }
                iprot.readListEnd();
              }
              struct.setUpdateDanceRoomInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // UPDATE_GUILD_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list656 = iprot.readListBegin();
                struct.updateGuildInfos = new ArrayList<GuildBaseInfo>(_list656.size);
                for (int _i657 = 0; _i657 < _list656.size; ++_i657)
                {
                  GuildBaseInfo _elem658; // required
                  _elem658 = new GuildBaseInfo();
                  _elem658.read(iprot);
                  struct.updateGuildInfos.add(_elem658);
                }
                iprot.readListEnd();
              }
              struct.setUpdateGuildInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // UPDATE_WEDDING_NOTICES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list659 = iprot.readListBegin();
                struct.updateWeddingNotices = new ArrayList<WeddingNotice>(_list659.size);
                for (int _i660 = 0; _i660 < _list659.size; ++_i660)
                {
                  WeddingNotice _elem661; // required
                  _elem661 = new WeddingNotice();
                  _elem661.read(iprot);
                  struct.updateWeddingNotices.add(_elem661);
                }
                iprot.readListEnd();
              }
              struct.setUpdateWeddingNoticesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // UPDATE_WEDDING_ROOM_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list662 = iprot.readListBegin();
                struct.updateWeddingRoomInfos = new ArrayList<WeddingRoomInfo>(_list662.size);
                for (int _i663 = 0; _i663 < _list662.size; ++_i663)
                {
                  WeddingRoomInfo _elem664; // required
                  _elem664 = new WeddingRoomInfo();
                  _elem664.read(iprot);
                  struct.updateWeddingRoomInfos.add(_elem664);
                }
                iprot.readListEnd();
              }
              struct.setUpdateWeddingRoomInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CommonDataPageInfos struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.pageIds != null) {
        oprot.writeFieldBegin(PAGE_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.pageIds.size()));
          for (CommonDataPageIds _iter665 : struct.pageIds)
          {
            _iter665.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TOTAL_SIZE_FIELD_DESC);
      oprot.writeI32(struct.totalSize);
      oprot.writeFieldEnd();
      if (struct.isSetVersion()) {
        oprot.writeFieldBegin(VERSION_FIELD_DESC);
        oprot.writeI16(struct.version);
        oprot.writeFieldEnd();
      }
      if (struct.updateMallItems != null) {
        if (struct.isSetUpdateMallItems()) {
          oprot.writeFieldBegin(UPDATE_MALL_ITEMS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.updateMallItems.size()));
            for (MallItem _iter666 : struct.updateMallItems)
            {
              _iter666.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.updateGroundRoomInfos != null) {
        if (struct.isSetUpdateGroundRoomInfos()) {
          oprot.writeFieldBegin(UPDATE_GROUND_ROOM_INFOS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.updateGroundRoomInfos.size()));
            for (GroundRoomInfo _iter667 : struct.updateGroundRoomInfos)
            {
              _iter667.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.updateDanceRoomInfos != null) {
        if (struct.isSetUpdateDanceRoomInfos()) {
          oprot.writeFieldBegin(UPDATE_DANCE_ROOM_INFOS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.updateDanceRoomInfos.size()));
            for (DanceRoomInfo _iter668 : struct.updateDanceRoomInfos)
            {
              _iter668.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.updateGuildInfos != null) {
        if (struct.isSetUpdateGuildInfos()) {
          oprot.writeFieldBegin(UPDATE_GUILD_INFOS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.updateGuildInfos.size()));
            for (GuildBaseInfo _iter669 : struct.updateGuildInfos)
            {
              _iter669.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.updateWeddingNotices != null) {
        if (struct.isSetUpdateWeddingNotices()) {
          oprot.writeFieldBegin(UPDATE_WEDDING_NOTICES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.updateWeddingNotices.size()));
            for (WeddingNotice _iter670 : struct.updateWeddingNotices)
            {
              _iter670.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.updateWeddingRoomInfos != null) {
        if (struct.isSetUpdateWeddingRoomInfos()) {
          oprot.writeFieldBegin(UPDATE_WEDDING_ROOM_INFOS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.updateWeddingRoomInfos.size()));
            for (WeddingRoomInfo _iter671 : struct.updateWeddingRoomInfos)
            {
              _iter671.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CommonDataPageInfosTupleSchemeFactory implements SchemeFactory {
    public CommonDataPageInfosTupleScheme getScheme() {
      return new CommonDataPageInfosTupleScheme();
    }
  }

  private static class CommonDataPageInfosTupleScheme extends TupleScheme<CommonDataPageInfos> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CommonDataPageInfos struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPageIds()) {
        optionals.set(0);
      }
      if (struct.isSetTotalSize()) {
        optionals.set(1);
      }
      if (struct.isSetVersion()) {
        optionals.set(2);
      }
      if (struct.isSetUpdateMallItems()) {
        optionals.set(3);
      }
      if (struct.isSetUpdateGroundRoomInfos()) {
        optionals.set(4);
      }
      if (struct.isSetUpdateDanceRoomInfos()) {
        optionals.set(5);
      }
      if (struct.isSetUpdateGuildInfos()) {
        optionals.set(6);
      }
      if (struct.isSetUpdateWeddingNotices()) {
        optionals.set(7);
      }
      if (struct.isSetUpdateWeddingRoomInfos()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetPageIds()) {
        {
          oprot.writeI32(struct.pageIds.size());
          for (CommonDataPageIds _iter672 : struct.pageIds)
          {
            _iter672.write(oprot);
          }
        }
      }
      if (struct.isSetTotalSize()) {
        oprot.writeI32(struct.totalSize);
      }
      if (struct.isSetVersion()) {
        oprot.writeI16(struct.version);
      }
      if (struct.isSetUpdateMallItems()) {
        {
          oprot.writeI32(struct.updateMallItems.size());
          for (MallItem _iter673 : struct.updateMallItems)
          {
            _iter673.write(oprot);
          }
        }
      }
      if (struct.isSetUpdateGroundRoomInfos()) {
        {
          oprot.writeI32(struct.updateGroundRoomInfos.size());
          for (GroundRoomInfo _iter674 : struct.updateGroundRoomInfos)
          {
            _iter674.write(oprot);
          }
        }
      }
      if (struct.isSetUpdateDanceRoomInfos()) {
        {
          oprot.writeI32(struct.updateDanceRoomInfos.size());
          for (DanceRoomInfo _iter675 : struct.updateDanceRoomInfos)
          {
            _iter675.write(oprot);
          }
        }
      }
      if (struct.isSetUpdateGuildInfos()) {
        {
          oprot.writeI32(struct.updateGuildInfos.size());
          for (GuildBaseInfo _iter676 : struct.updateGuildInfos)
          {
            _iter676.write(oprot);
          }
        }
      }
      if (struct.isSetUpdateWeddingNotices()) {
        {
          oprot.writeI32(struct.updateWeddingNotices.size());
          for (WeddingNotice _iter677 : struct.updateWeddingNotices)
          {
            _iter677.write(oprot);
          }
        }
      }
      if (struct.isSetUpdateWeddingRoomInfos()) {
        {
          oprot.writeI32(struct.updateWeddingRoomInfos.size());
          for (WeddingRoomInfo _iter678 : struct.updateWeddingRoomInfos)
          {
            _iter678.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CommonDataPageInfos struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list679 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.pageIds = new ArrayList<CommonDataPageIds>(_list679.size);
          for (int _i680 = 0; _i680 < _list679.size; ++_i680)
          {
            CommonDataPageIds _elem681; // required
            _elem681 = new CommonDataPageIds();
            _elem681.read(iprot);
            struct.pageIds.add(_elem681);
          }
        }
        struct.setPageIdsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.totalSize = iprot.readI32();
        struct.setTotalSizeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.version = iprot.readI16();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list682 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.updateMallItems = new ArrayList<MallItem>(_list682.size);
          for (int _i683 = 0; _i683 < _list682.size; ++_i683)
          {
            MallItem _elem684; // required
            _elem684 = new MallItem();
            _elem684.read(iprot);
            struct.updateMallItems.add(_elem684);
          }
        }
        struct.setUpdateMallItemsIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list685 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.updateGroundRoomInfos = new ArrayList<GroundRoomInfo>(_list685.size);
          for (int _i686 = 0; _i686 < _list685.size; ++_i686)
          {
            GroundRoomInfo _elem687; // required
            _elem687 = new GroundRoomInfo();
            _elem687.read(iprot);
            struct.updateGroundRoomInfos.add(_elem687);
          }
        }
        struct.setUpdateGroundRoomInfosIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list688 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.updateDanceRoomInfos = new ArrayList<DanceRoomInfo>(_list688.size);
          for (int _i689 = 0; _i689 < _list688.size; ++_i689)
          {
            DanceRoomInfo _elem690; // required
            _elem690 = new DanceRoomInfo();
            _elem690.read(iprot);
            struct.updateDanceRoomInfos.add(_elem690);
          }
        }
        struct.setUpdateDanceRoomInfosIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list691 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.updateGuildInfos = new ArrayList<GuildBaseInfo>(_list691.size);
          for (int _i692 = 0; _i692 < _list691.size; ++_i692)
          {
            GuildBaseInfo _elem693; // required
            _elem693 = new GuildBaseInfo();
            _elem693.read(iprot);
            struct.updateGuildInfos.add(_elem693);
          }
        }
        struct.setUpdateGuildInfosIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list694 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.updateWeddingNotices = new ArrayList<WeddingNotice>(_list694.size);
          for (int _i695 = 0; _i695 < _list694.size; ++_i695)
          {
            WeddingNotice _elem696; // required
            _elem696 = new WeddingNotice();
            _elem696.read(iprot);
            struct.updateWeddingNotices.add(_elem696);
          }
        }
        struct.setUpdateWeddingNoticesIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list697 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.updateWeddingRoomInfos = new ArrayList<WeddingRoomInfo>(_list697.size);
          for (int _i698 = 0; _i698 < _list697.size; ++_i698)
          {
            WeddingRoomInfo _elem699; // required
            _elem699 = new WeddingRoomInfo();
            _elem699.read(iprot);
            struct.updateWeddingRoomInfos.add(_elem699);
          }
        }
        struct.setUpdateWeddingRoomInfosIsSet(true);
      }
    }
  }

}

