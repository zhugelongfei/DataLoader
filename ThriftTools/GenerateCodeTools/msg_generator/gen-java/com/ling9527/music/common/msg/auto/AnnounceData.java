/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 通告数据
 */
public class AnnounceData implements org.apache.thrift.TBase<AnnounceData, AnnounceData._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AnnounceData");

  private static final org.apache.thrift.protocol.TField ANNOUNCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("announceId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ADVICE_STAR_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("adviceStarVal", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PRIZE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("prizeInfo", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField EXTRA_PRIZE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("extraPrizeInfo", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField COLD_DOWN_FIELD_DESC = new org.apache.thrift.protocol.TField("coldDown", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField OCCUPATION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("occupationType", org.apache.thrift.protocol.TType.BYTE, (short)6);
  private static final org.apache.thrift.protocol.TField OCCUPATION_LVL_FIELD_DESC = new org.apache.thrift.protocol.TField("occupationLvl", org.apache.thrift.protocol.TType.I16, (short)7);
  private static final org.apache.thrift.protocol.TField MUSIC_LVL_FIELD_DESC = new org.apache.thrift.protocol.TField("musicLvl", org.apache.thrift.protocol.TType.BYTE, (short)8);
  private static final org.apache.thrift.protocol.TField PASS_CONDS_FIELD_DESC = new org.apache.thrift.protocol.TField("passConds", org.apache.thrift.protocol.TType.LIST, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AnnounceDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AnnounceDataTupleSchemeFactory());
  }

  public int announceId; // required
  /**
   * 建议星光值
   */
  public int adviceStarVal; // required
  /**
   * 奖励
   */
  public PrizeInfo prizeInfo; // required
  /**
   * 额外奖励
   */
  public PrizeInfo extraPrizeInfo; // optional
  /**
   * 通告冷却时间(距离1970.1.1的秒数)
   */
  public int coldDown; // optional
  /**
   * 0-歌手 1-舞者 2-模特
   */
  public byte occupationType; // required
  /**
   * 职业等级
   */
  public short occupationLvl; // required
  /**
   * 难度0-简单 1-普通 2-困难 3-疯狂
   */
  public byte musicLvl; // required
  /**
   * 通关条件
   */
  public List<PassCond> passConds; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ANNOUNCE_ID((short)1, "announceId"),
    /**
     * 建议星光值
     */
    ADVICE_STAR_VAL((short)2, "adviceStarVal"),
    /**
     * 奖励
     */
    PRIZE_INFO((short)3, "prizeInfo"),
    /**
     * 额外奖励
     */
    EXTRA_PRIZE_INFO((short)4, "extraPrizeInfo"),
    /**
     * 通告冷却时间(距离1970.1.1的秒数)
     */
    COLD_DOWN((short)5, "coldDown"),
    /**
     * 0-歌手 1-舞者 2-模特
     */
    OCCUPATION_TYPE((short)6, "occupationType"),
    /**
     * 职业等级
     */
    OCCUPATION_LVL((short)7, "occupationLvl"),
    /**
     * 难度0-简单 1-普通 2-困难 3-疯狂
     */
    MUSIC_LVL((short)8, "musicLvl"),
    /**
     * 通关条件
     */
    PASS_CONDS((short)9, "passConds");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ANNOUNCE_ID
          return ANNOUNCE_ID;
        case 2: // ADVICE_STAR_VAL
          return ADVICE_STAR_VAL;
        case 3: // PRIZE_INFO
          return PRIZE_INFO;
        case 4: // EXTRA_PRIZE_INFO
          return EXTRA_PRIZE_INFO;
        case 5: // COLD_DOWN
          return COLD_DOWN;
        case 6: // OCCUPATION_TYPE
          return OCCUPATION_TYPE;
        case 7: // OCCUPATION_LVL
          return OCCUPATION_LVL;
        case 8: // MUSIC_LVL
          return MUSIC_LVL;
        case 9: // PASS_CONDS
          return PASS_CONDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ANNOUNCEID_ISSET_ID = 0;
  private static final int __ADVICESTARVAL_ISSET_ID = 1;
  private static final int __COLDDOWN_ISSET_ID = 2;
  private static final int __OCCUPATIONTYPE_ISSET_ID = 3;
  private static final int __OCCUPATIONLVL_ISSET_ID = 4;
  private static final int __MUSICLVL_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.EXTRA_PRIZE_INFO,_Fields.COLD_DOWN};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ANNOUNCE_ID, new org.apache.thrift.meta_data.FieldMetaData("announceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ADVICE_STAR_VAL, new org.apache.thrift.meta_data.FieldMetaData("adviceStarVal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRIZE_INFO, new org.apache.thrift.meta_data.FieldMetaData("prizeInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrizeInfo.class)));
    tmpMap.put(_Fields.EXTRA_PRIZE_INFO, new org.apache.thrift.meta_data.FieldMetaData("extraPrizeInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrizeInfo.class)));
    tmpMap.put(_Fields.COLD_DOWN, new org.apache.thrift.meta_data.FieldMetaData("coldDown", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OCCUPATION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("occupationType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.OCCUPATION_LVL, new org.apache.thrift.meta_data.FieldMetaData("occupationLvl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.MUSIC_LVL, new org.apache.thrift.meta_data.FieldMetaData("musicLvl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.PASS_CONDS, new org.apache.thrift.meta_data.FieldMetaData("passConds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PassCond.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AnnounceData.class, metaDataMap);
  }

  public AnnounceData() {
  }

  public AnnounceData(
    int announceId,
    int adviceStarVal,
    PrizeInfo prizeInfo,
    byte occupationType,
    short occupationLvl,
    byte musicLvl,
    List<PassCond> passConds)
  {
    this();
    this.announceId = announceId;
    setAnnounceIdIsSet(true);
    this.adviceStarVal = adviceStarVal;
    setAdviceStarValIsSet(true);
    this.prizeInfo = prizeInfo;
    this.occupationType = occupationType;
    setOccupationTypeIsSet(true);
    this.occupationLvl = occupationLvl;
    setOccupationLvlIsSet(true);
    this.musicLvl = musicLvl;
    setMusicLvlIsSet(true);
    this.passConds = passConds;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AnnounceData(AnnounceData other) {
    __isset_bitfield = other.__isset_bitfield;
    this.announceId = other.announceId;
    this.adviceStarVal = other.adviceStarVal;
    if (other.isSetPrizeInfo()) {
      this.prizeInfo = new PrizeInfo(other.prizeInfo);
    }
    if (other.isSetExtraPrizeInfo()) {
      this.extraPrizeInfo = new PrizeInfo(other.extraPrizeInfo);
    }
    this.coldDown = other.coldDown;
    this.occupationType = other.occupationType;
    this.occupationLvl = other.occupationLvl;
    this.musicLvl = other.musicLvl;
    if (other.isSetPassConds()) {
      List<PassCond> __this__passConds = new ArrayList<PassCond>();
      for (PassCond other_element : other.passConds) {
        __this__passConds.add(new PassCond(other_element));
      }
      this.passConds = __this__passConds;
    }
  }

  public AnnounceData deepCopy() {
    return new AnnounceData(this);
  }

  @Override
  public void clear() {
    setAnnounceIdIsSet(false);
    this.announceId = 0;
    setAdviceStarValIsSet(false);
    this.adviceStarVal = 0;
    this.prizeInfo = null;
    this.extraPrizeInfo = null;
    setColdDownIsSet(false);
    this.coldDown = 0;
    setOccupationTypeIsSet(false);
    this.occupationType = 0;
    setOccupationLvlIsSet(false);
    this.occupationLvl = 0;
    setMusicLvlIsSet(false);
    this.musicLvl = 0;
    this.passConds = null;
  }

  public int getAnnounceId() {
    return this.announceId;
  }

  public AnnounceData setAnnounceId(int announceId) {
    this.announceId = announceId;
    setAnnounceIdIsSet(true);
    return this;
  }

  public void unsetAnnounceId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ANNOUNCEID_ISSET_ID);
  }

  /** Returns true if field announceId is set (has been assigned a value) and false otherwise */
  public boolean isSetAnnounceId() {
    return EncodingUtils.testBit(__isset_bitfield, __ANNOUNCEID_ISSET_ID);
  }

  public void setAnnounceIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ANNOUNCEID_ISSET_ID, value);
  }

  /**
   * 建议星光值
   */
  public int getAdviceStarVal() {
    return this.adviceStarVal;
  }

  /**
   * 建议星光值
   */
  public AnnounceData setAdviceStarVal(int adviceStarVal) {
    this.adviceStarVal = adviceStarVal;
    setAdviceStarValIsSet(true);
    return this;
  }

  public void unsetAdviceStarVal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ADVICESTARVAL_ISSET_ID);
  }

  /** Returns true if field adviceStarVal is set (has been assigned a value) and false otherwise */
  public boolean isSetAdviceStarVal() {
    return EncodingUtils.testBit(__isset_bitfield, __ADVICESTARVAL_ISSET_ID);
  }

  public void setAdviceStarValIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ADVICESTARVAL_ISSET_ID, value);
  }

  /**
   * 奖励
   */
  public PrizeInfo getPrizeInfo() {
    return this.prizeInfo;
  }

  /**
   * 奖励
   */
  public AnnounceData setPrizeInfo(PrizeInfo prizeInfo) {
    this.prizeInfo = prizeInfo;
    return this;
  }

  public void unsetPrizeInfo() {
    this.prizeInfo = null;
  }

  /** Returns true if field prizeInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetPrizeInfo() {
    return this.prizeInfo != null;
  }

  public void setPrizeInfoIsSet(boolean value) {
    if (!value) {
      this.prizeInfo = null;
    }
  }

  /**
   * 额外奖励
   */
  public PrizeInfo getExtraPrizeInfo() {
    return this.extraPrizeInfo;
  }

  /**
   * 额外奖励
   */
  public AnnounceData setExtraPrizeInfo(PrizeInfo extraPrizeInfo) {
    this.extraPrizeInfo = extraPrizeInfo;
    return this;
  }

  public void unsetExtraPrizeInfo() {
    this.extraPrizeInfo = null;
  }

  /** Returns true if field extraPrizeInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetExtraPrizeInfo() {
    return this.extraPrizeInfo != null;
  }

  public void setExtraPrizeInfoIsSet(boolean value) {
    if (!value) {
      this.extraPrizeInfo = null;
    }
  }

  /**
   * 通告冷却时间(距离1970.1.1的秒数)
   */
  public int getColdDown() {
    return this.coldDown;
  }

  /**
   * 通告冷却时间(距离1970.1.1的秒数)
   */
  public AnnounceData setColdDown(int coldDown) {
    this.coldDown = coldDown;
    setColdDownIsSet(true);
    return this;
  }

  public void unsetColdDown() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COLDDOWN_ISSET_ID);
  }

  /** Returns true if field coldDown is set (has been assigned a value) and false otherwise */
  public boolean isSetColdDown() {
    return EncodingUtils.testBit(__isset_bitfield, __COLDDOWN_ISSET_ID);
  }

  public void setColdDownIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COLDDOWN_ISSET_ID, value);
  }

  /**
   * 0-歌手 1-舞者 2-模特
   */
  public byte getOccupationType() {
    return this.occupationType;
  }

  /**
   * 0-歌手 1-舞者 2-模特
   */
  public AnnounceData setOccupationType(byte occupationType) {
    this.occupationType = occupationType;
    setOccupationTypeIsSet(true);
    return this;
  }

  public void unsetOccupationType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OCCUPATIONTYPE_ISSET_ID);
  }

  /** Returns true if field occupationType is set (has been assigned a value) and false otherwise */
  public boolean isSetOccupationType() {
    return EncodingUtils.testBit(__isset_bitfield, __OCCUPATIONTYPE_ISSET_ID);
  }

  public void setOccupationTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OCCUPATIONTYPE_ISSET_ID, value);
  }

  /**
   * 职业等级
   */
  public short getOccupationLvl() {
    return this.occupationLvl;
  }

  /**
   * 职业等级
   */
  public AnnounceData setOccupationLvl(short occupationLvl) {
    this.occupationLvl = occupationLvl;
    setOccupationLvlIsSet(true);
    return this;
  }

  public void unsetOccupationLvl() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OCCUPATIONLVL_ISSET_ID);
  }

  /** Returns true if field occupationLvl is set (has been assigned a value) and false otherwise */
  public boolean isSetOccupationLvl() {
    return EncodingUtils.testBit(__isset_bitfield, __OCCUPATIONLVL_ISSET_ID);
  }

  public void setOccupationLvlIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OCCUPATIONLVL_ISSET_ID, value);
  }

  /**
   * 难度0-简单 1-普通 2-困难 3-疯狂
   */
  public byte getMusicLvl() {
    return this.musicLvl;
  }

  /**
   * 难度0-简单 1-普通 2-困难 3-疯狂
   */
  public AnnounceData setMusicLvl(byte musicLvl) {
    this.musicLvl = musicLvl;
    setMusicLvlIsSet(true);
    return this;
  }

  public void unsetMusicLvl() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MUSICLVL_ISSET_ID);
  }

  /** Returns true if field musicLvl is set (has been assigned a value) and false otherwise */
  public boolean isSetMusicLvl() {
    return EncodingUtils.testBit(__isset_bitfield, __MUSICLVL_ISSET_ID);
  }

  public void setMusicLvlIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MUSICLVL_ISSET_ID, value);
  }

  public int getPassCondsSize() {
    return (this.passConds == null) ? 0 : this.passConds.size();
  }

  public java.util.Iterator<PassCond> getPassCondsIterator() {
    return (this.passConds == null) ? null : this.passConds.iterator();
  }

  public void addToPassConds(PassCond elem) {
    if (this.passConds == null) {
      this.passConds = new ArrayList<PassCond>();
    }
    this.passConds.add(elem);
  }

  /**
   * 通关条件
   */
  public List<PassCond> getPassConds() {
    return this.passConds;
  }

  /**
   * 通关条件
   */
  public AnnounceData setPassConds(List<PassCond> passConds) {
    this.passConds = passConds;
    return this;
  }

  public void unsetPassConds() {
    this.passConds = null;
  }

  /** Returns true if field passConds is set (has been assigned a value) and false otherwise */
  public boolean isSetPassConds() {
    return this.passConds != null;
  }

  public void setPassCondsIsSet(boolean value) {
    if (!value) {
      this.passConds = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ANNOUNCE_ID:
      if (value == null) {
        unsetAnnounceId();
      } else {
        setAnnounceId((Integer)value);
      }
      break;

    case ADVICE_STAR_VAL:
      if (value == null) {
        unsetAdviceStarVal();
      } else {
        setAdviceStarVal((Integer)value);
      }
      break;

    case PRIZE_INFO:
      if (value == null) {
        unsetPrizeInfo();
      } else {
        setPrizeInfo((PrizeInfo)value);
      }
      break;

    case EXTRA_PRIZE_INFO:
      if (value == null) {
        unsetExtraPrizeInfo();
      } else {
        setExtraPrizeInfo((PrizeInfo)value);
      }
      break;

    case COLD_DOWN:
      if (value == null) {
        unsetColdDown();
      } else {
        setColdDown((Integer)value);
      }
      break;

    case OCCUPATION_TYPE:
      if (value == null) {
        unsetOccupationType();
      } else {
        setOccupationType((Byte)value);
      }
      break;

    case OCCUPATION_LVL:
      if (value == null) {
        unsetOccupationLvl();
      } else {
        setOccupationLvl((Short)value);
      }
      break;

    case MUSIC_LVL:
      if (value == null) {
        unsetMusicLvl();
      } else {
        setMusicLvl((Byte)value);
      }
      break;

    case PASS_CONDS:
      if (value == null) {
        unsetPassConds();
      } else {
        setPassConds((List<PassCond>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ANNOUNCE_ID:
      return Integer.valueOf(getAnnounceId());

    case ADVICE_STAR_VAL:
      return Integer.valueOf(getAdviceStarVal());

    case PRIZE_INFO:
      return getPrizeInfo();

    case EXTRA_PRIZE_INFO:
      return getExtraPrizeInfo();

    case COLD_DOWN:
      return Integer.valueOf(getColdDown());

    case OCCUPATION_TYPE:
      return Byte.valueOf(getOccupationType());

    case OCCUPATION_LVL:
      return Short.valueOf(getOccupationLvl());

    case MUSIC_LVL:
      return Byte.valueOf(getMusicLvl());

    case PASS_CONDS:
      return getPassConds();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ANNOUNCE_ID:
      return isSetAnnounceId();
    case ADVICE_STAR_VAL:
      return isSetAdviceStarVal();
    case PRIZE_INFO:
      return isSetPrizeInfo();
    case EXTRA_PRIZE_INFO:
      return isSetExtraPrizeInfo();
    case COLD_DOWN:
      return isSetColdDown();
    case OCCUPATION_TYPE:
      return isSetOccupationType();
    case OCCUPATION_LVL:
      return isSetOccupationLvl();
    case MUSIC_LVL:
      return isSetMusicLvl();
    case PASS_CONDS:
      return isSetPassConds();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AnnounceData)
      return this.equals((AnnounceData)that);
    return false;
  }

  public boolean equals(AnnounceData that) {
    if (that == null)
      return false;

    boolean this_present_announceId = true;
    boolean that_present_announceId = true;
    if (this_present_announceId || that_present_announceId) {
      if (!(this_present_announceId && that_present_announceId))
        return false;
      if (this.announceId != that.announceId)
        return false;
    }

    boolean this_present_adviceStarVal = true;
    boolean that_present_adviceStarVal = true;
    if (this_present_adviceStarVal || that_present_adviceStarVal) {
      if (!(this_present_adviceStarVal && that_present_adviceStarVal))
        return false;
      if (this.adviceStarVal != that.adviceStarVal)
        return false;
    }

    boolean this_present_prizeInfo = true && this.isSetPrizeInfo();
    boolean that_present_prizeInfo = true && that.isSetPrizeInfo();
    if (this_present_prizeInfo || that_present_prizeInfo) {
      if (!(this_present_prizeInfo && that_present_prizeInfo))
        return false;
      if (!this.prizeInfo.equals(that.prizeInfo))
        return false;
    }

    boolean this_present_extraPrizeInfo = true && this.isSetExtraPrizeInfo();
    boolean that_present_extraPrizeInfo = true && that.isSetExtraPrizeInfo();
    if (this_present_extraPrizeInfo || that_present_extraPrizeInfo) {
      if (!(this_present_extraPrizeInfo && that_present_extraPrizeInfo))
        return false;
      if (!this.extraPrizeInfo.equals(that.extraPrizeInfo))
        return false;
    }

    boolean this_present_coldDown = true && this.isSetColdDown();
    boolean that_present_coldDown = true && that.isSetColdDown();
    if (this_present_coldDown || that_present_coldDown) {
      if (!(this_present_coldDown && that_present_coldDown))
        return false;
      if (this.coldDown != that.coldDown)
        return false;
    }

    boolean this_present_occupationType = true;
    boolean that_present_occupationType = true;
    if (this_present_occupationType || that_present_occupationType) {
      if (!(this_present_occupationType && that_present_occupationType))
        return false;
      if (this.occupationType != that.occupationType)
        return false;
    }

    boolean this_present_occupationLvl = true;
    boolean that_present_occupationLvl = true;
    if (this_present_occupationLvl || that_present_occupationLvl) {
      if (!(this_present_occupationLvl && that_present_occupationLvl))
        return false;
      if (this.occupationLvl != that.occupationLvl)
        return false;
    }

    boolean this_present_musicLvl = true;
    boolean that_present_musicLvl = true;
    if (this_present_musicLvl || that_present_musicLvl) {
      if (!(this_present_musicLvl && that_present_musicLvl))
        return false;
      if (this.musicLvl != that.musicLvl)
        return false;
    }

    boolean this_present_passConds = true && this.isSetPassConds();
    boolean that_present_passConds = true && that.isSetPassConds();
    if (this_present_passConds || that_present_passConds) {
      if (!(this_present_passConds && that_present_passConds))
        return false;
      if (!this.passConds.equals(that.passConds))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(AnnounceData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    AnnounceData typedOther = (AnnounceData)other;

    lastComparison = Boolean.valueOf(isSetAnnounceId()).compareTo(typedOther.isSetAnnounceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnnounceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.announceId, typedOther.announceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdviceStarVal()).compareTo(typedOther.isSetAdviceStarVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdviceStarVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adviceStarVal, typedOther.adviceStarVal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrizeInfo()).compareTo(typedOther.isSetPrizeInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrizeInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prizeInfo, typedOther.prizeInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtraPrizeInfo()).compareTo(typedOther.isSetExtraPrizeInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtraPrizeInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extraPrizeInfo, typedOther.extraPrizeInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColdDown()).compareTo(typedOther.isSetColdDown());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColdDown()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coldDown, typedOther.coldDown);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOccupationType()).compareTo(typedOther.isSetOccupationType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOccupationType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.occupationType, typedOther.occupationType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOccupationLvl()).compareTo(typedOther.isSetOccupationLvl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOccupationLvl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.occupationLvl, typedOther.occupationLvl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMusicLvl()).compareTo(typedOther.isSetMusicLvl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMusicLvl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.musicLvl, typedOther.musicLvl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPassConds()).compareTo(typedOther.isSetPassConds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassConds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.passConds, typedOther.passConds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AnnounceData(");
    boolean first = true;

    sb.append("announceId:");
    sb.append(this.announceId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("adviceStarVal:");
    sb.append(this.adviceStarVal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("prizeInfo:");
    if (this.prizeInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.prizeInfo);
    }
    first = false;
    if (isSetExtraPrizeInfo()) {
      if (!first) sb.append(", ");
      sb.append("extraPrizeInfo:");
      if (this.extraPrizeInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.extraPrizeInfo);
      }
      first = false;
    }
    if (isSetColdDown()) {
      if (!first) sb.append(", ");
      sb.append("coldDown:");
      sb.append(this.coldDown);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("occupationType:");
    sb.append(this.occupationType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("occupationLvl:");
    sb.append(this.occupationLvl);
    first = false;
    if (!first) sb.append(", ");
    sb.append("musicLvl:");
    sb.append(this.musicLvl);
    first = false;
    if (!first) sb.append(", ");
    sb.append("passConds:");
    if (this.passConds == null) {
      sb.append("null");
    } else {
      sb.append(this.passConds);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (prizeInfo != null) {
      prizeInfo.validate();
    }
    if (extraPrizeInfo != null) {
      extraPrizeInfo.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AnnounceDataStandardSchemeFactory implements SchemeFactory {
    public AnnounceDataStandardScheme getScheme() {
      return new AnnounceDataStandardScheme();
    }
  }

  private static class AnnounceDataStandardScheme extends StandardScheme<AnnounceData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AnnounceData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ANNOUNCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.announceId = iprot.readI32();
              struct.setAnnounceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ADVICE_STAR_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.adviceStarVal = iprot.readI32();
              struct.setAdviceStarValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PRIZE_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.prizeInfo = new PrizeInfo();
              struct.prizeInfo.read(iprot);
              struct.setPrizeInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EXTRA_PRIZE_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.extraPrizeInfo = new PrizeInfo();
              struct.extraPrizeInfo.read(iprot);
              struct.setExtraPrizeInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COLD_DOWN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.coldDown = iprot.readI32();
              struct.setColdDownIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // OCCUPATION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.occupationType = iprot.readByte();
              struct.setOccupationTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // OCCUPATION_LVL
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.occupationLvl = iprot.readI16();
              struct.setOccupationLvlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MUSIC_LVL
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.musicLvl = iprot.readByte();
              struct.setMusicLvlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PASS_CONDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list406 = iprot.readListBegin();
                struct.passConds = new ArrayList<PassCond>(_list406.size);
                for (int _i407 = 0; _i407 < _list406.size; ++_i407)
                {
                  PassCond _elem408; // required
                  _elem408 = new PassCond();
                  _elem408.read(iprot);
                  struct.passConds.add(_elem408);
                }
                iprot.readListEnd();
              }
              struct.setPassCondsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AnnounceData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ANNOUNCE_ID_FIELD_DESC);
      oprot.writeI32(struct.announceId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ADVICE_STAR_VAL_FIELD_DESC);
      oprot.writeI32(struct.adviceStarVal);
      oprot.writeFieldEnd();
      if (struct.prizeInfo != null) {
        oprot.writeFieldBegin(PRIZE_INFO_FIELD_DESC);
        struct.prizeInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.extraPrizeInfo != null) {
        if (struct.isSetExtraPrizeInfo()) {
          oprot.writeFieldBegin(EXTRA_PRIZE_INFO_FIELD_DESC);
          struct.extraPrizeInfo.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetColdDown()) {
        oprot.writeFieldBegin(COLD_DOWN_FIELD_DESC);
        oprot.writeI32(struct.coldDown);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OCCUPATION_TYPE_FIELD_DESC);
      oprot.writeByte(struct.occupationType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OCCUPATION_LVL_FIELD_DESC);
      oprot.writeI16(struct.occupationLvl);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MUSIC_LVL_FIELD_DESC);
      oprot.writeByte(struct.musicLvl);
      oprot.writeFieldEnd();
      if (struct.passConds != null) {
        oprot.writeFieldBegin(PASS_CONDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.passConds.size()));
          for (PassCond _iter409 : struct.passConds)
          {
            _iter409.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AnnounceDataTupleSchemeFactory implements SchemeFactory {
    public AnnounceDataTupleScheme getScheme() {
      return new AnnounceDataTupleScheme();
    }
  }

  private static class AnnounceDataTupleScheme extends TupleScheme<AnnounceData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AnnounceData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAnnounceId()) {
        optionals.set(0);
      }
      if (struct.isSetAdviceStarVal()) {
        optionals.set(1);
      }
      if (struct.isSetPrizeInfo()) {
        optionals.set(2);
      }
      if (struct.isSetExtraPrizeInfo()) {
        optionals.set(3);
      }
      if (struct.isSetColdDown()) {
        optionals.set(4);
      }
      if (struct.isSetOccupationType()) {
        optionals.set(5);
      }
      if (struct.isSetOccupationLvl()) {
        optionals.set(6);
      }
      if (struct.isSetMusicLvl()) {
        optionals.set(7);
      }
      if (struct.isSetPassConds()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetAnnounceId()) {
        oprot.writeI32(struct.announceId);
      }
      if (struct.isSetAdviceStarVal()) {
        oprot.writeI32(struct.adviceStarVal);
      }
      if (struct.isSetPrizeInfo()) {
        struct.prizeInfo.write(oprot);
      }
      if (struct.isSetExtraPrizeInfo()) {
        struct.extraPrizeInfo.write(oprot);
      }
      if (struct.isSetColdDown()) {
        oprot.writeI32(struct.coldDown);
      }
      if (struct.isSetOccupationType()) {
        oprot.writeByte(struct.occupationType);
      }
      if (struct.isSetOccupationLvl()) {
        oprot.writeI16(struct.occupationLvl);
      }
      if (struct.isSetMusicLvl()) {
        oprot.writeByte(struct.musicLvl);
      }
      if (struct.isSetPassConds()) {
        {
          oprot.writeI32(struct.passConds.size());
          for (PassCond _iter410 : struct.passConds)
          {
            _iter410.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AnnounceData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.announceId = iprot.readI32();
        struct.setAnnounceIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.adviceStarVal = iprot.readI32();
        struct.setAdviceStarValIsSet(true);
      }
      if (incoming.get(2)) {
        struct.prizeInfo = new PrizeInfo();
        struct.prizeInfo.read(iprot);
        struct.setPrizeInfoIsSet(true);
      }
      if (incoming.get(3)) {
        struct.extraPrizeInfo = new PrizeInfo();
        struct.extraPrizeInfo.read(iprot);
        struct.setExtraPrizeInfoIsSet(true);
      }
      if (incoming.get(4)) {
        struct.coldDown = iprot.readI32();
        struct.setColdDownIsSet(true);
      }
      if (incoming.get(5)) {
        struct.occupationType = iprot.readByte();
        struct.setOccupationTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.occupationLvl = iprot.readI16();
        struct.setOccupationLvlIsSet(true);
      }
      if (incoming.get(7)) {
        struct.musicLvl = iprot.readByte();
        struct.setMusicLvlIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list411 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.passConds = new ArrayList<PassCond>(_list411.size);
          for (int _i412 = 0; _i412 < _list411.size; ++_i412)
          {
            PassCond _elem413; // required
            _elem413 = new PassCond();
            _elem413.read(iprot);
            struct.passConds.add(_elem413);
          }
        }
        struct.setPassCondsIsSet(true);
      }
    }
  }

}

