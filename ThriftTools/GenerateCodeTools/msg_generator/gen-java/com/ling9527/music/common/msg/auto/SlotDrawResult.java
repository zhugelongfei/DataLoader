/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SlotDrawResult implements org.apache.thrift.TBase<SlotDrawResult, SlotDrawResult._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SlotDrawResult");

  private static final org.apache.thrift.protocol.TField POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("position", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField DIAMOND_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("diamondAmount", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField BIND_DIAMOND_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("bindDiamondAmount", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SlotDrawResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SlotDrawResultTupleSchemeFactory());
  }

  public int position; // required
  public int diamondAmount; // required
  public int bindDiamondAmount; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    POSITION((short)1, "position"),
    DIAMOND_AMOUNT((short)2, "diamondAmount"),
    BIND_DIAMOND_AMOUNT((short)3, "bindDiamondAmount");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // POSITION
          return POSITION;
        case 2: // DIAMOND_AMOUNT
          return DIAMOND_AMOUNT;
        case 3: // BIND_DIAMOND_AMOUNT
          return BIND_DIAMOND_AMOUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __POSITION_ISSET_ID = 0;
  private static final int __DIAMONDAMOUNT_ISSET_ID = 1;
  private static final int __BINDDIAMONDAMOUNT_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.POSITION, new org.apache.thrift.meta_data.FieldMetaData("position", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DIAMOND_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("diamondAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BIND_DIAMOND_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("bindDiamondAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SlotDrawResult.class, metaDataMap);
  }

  public SlotDrawResult() {
  }

  public SlotDrawResult(
    int position,
    int diamondAmount,
    int bindDiamondAmount)
  {
    this();
    this.position = position;
    setPositionIsSet(true);
    this.diamondAmount = diamondAmount;
    setDiamondAmountIsSet(true);
    this.bindDiamondAmount = bindDiamondAmount;
    setBindDiamondAmountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SlotDrawResult(SlotDrawResult other) {
    __isset_bitfield = other.__isset_bitfield;
    this.position = other.position;
    this.diamondAmount = other.diamondAmount;
    this.bindDiamondAmount = other.bindDiamondAmount;
  }

  public SlotDrawResult deepCopy() {
    return new SlotDrawResult(this);
  }

  @Override
  public void clear() {
    setPositionIsSet(false);
    this.position = 0;
    setDiamondAmountIsSet(false);
    this.diamondAmount = 0;
    setBindDiamondAmountIsSet(false);
    this.bindDiamondAmount = 0;
  }

  public int getPosition() {
    return this.position;
  }

  public SlotDrawResult setPosition(int position) {
    this.position = position;
    setPositionIsSet(true);
    return this;
  }

  public void unsetPosition() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITION_ISSET_ID);
  }

  /** Returns true if field position is set (has been assigned a value) and false otherwise */
  public boolean isSetPosition() {
    return EncodingUtils.testBit(__isset_bitfield, __POSITION_ISSET_ID);
  }

  public void setPositionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITION_ISSET_ID, value);
  }

  public int getDiamondAmount() {
    return this.diamondAmount;
  }

  public SlotDrawResult setDiamondAmount(int diamondAmount) {
    this.diamondAmount = diamondAmount;
    setDiamondAmountIsSet(true);
    return this;
  }

  public void unsetDiamondAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DIAMONDAMOUNT_ISSET_ID);
  }

  /** Returns true if field diamondAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetDiamondAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __DIAMONDAMOUNT_ISSET_ID);
  }

  public void setDiamondAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DIAMONDAMOUNT_ISSET_ID, value);
  }

  public int getBindDiamondAmount() {
    return this.bindDiamondAmount;
  }

  public SlotDrawResult setBindDiamondAmount(int bindDiamondAmount) {
    this.bindDiamondAmount = bindDiamondAmount;
    setBindDiamondAmountIsSet(true);
    return this;
  }

  public void unsetBindDiamondAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BINDDIAMONDAMOUNT_ISSET_ID);
  }

  /** Returns true if field bindDiamondAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetBindDiamondAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __BINDDIAMONDAMOUNT_ISSET_ID);
  }

  public void setBindDiamondAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BINDDIAMONDAMOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case POSITION:
      if (value == null) {
        unsetPosition();
      } else {
        setPosition((Integer)value);
      }
      break;

    case DIAMOND_AMOUNT:
      if (value == null) {
        unsetDiamondAmount();
      } else {
        setDiamondAmount((Integer)value);
      }
      break;

    case BIND_DIAMOND_AMOUNT:
      if (value == null) {
        unsetBindDiamondAmount();
      } else {
        setBindDiamondAmount((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case POSITION:
      return Integer.valueOf(getPosition());

    case DIAMOND_AMOUNT:
      return Integer.valueOf(getDiamondAmount());

    case BIND_DIAMOND_AMOUNT:
      return Integer.valueOf(getBindDiamondAmount());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case POSITION:
      return isSetPosition();
    case DIAMOND_AMOUNT:
      return isSetDiamondAmount();
    case BIND_DIAMOND_AMOUNT:
      return isSetBindDiamondAmount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SlotDrawResult)
      return this.equals((SlotDrawResult)that);
    return false;
  }

  public boolean equals(SlotDrawResult that) {
    if (that == null)
      return false;

    boolean this_present_position = true;
    boolean that_present_position = true;
    if (this_present_position || that_present_position) {
      if (!(this_present_position && that_present_position))
        return false;
      if (this.position != that.position)
        return false;
    }

    boolean this_present_diamondAmount = true;
    boolean that_present_diamondAmount = true;
    if (this_present_diamondAmount || that_present_diamondAmount) {
      if (!(this_present_diamondAmount && that_present_diamondAmount))
        return false;
      if (this.diamondAmount != that.diamondAmount)
        return false;
    }

    boolean this_present_bindDiamondAmount = true;
    boolean that_present_bindDiamondAmount = true;
    if (this_present_bindDiamondAmount || that_present_bindDiamondAmount) {
      if (!(this_present_bindDiamondAmount && that_present_bindDiamondAmount))
        return false;
      if (this.bindDiamondAmount != that.bindDiamondAmount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SlotDrawResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SlotDrawResult typedOther = (SlotDrawResult)other;

    lastComparison = Boolean.valueOf(isSetPosition()).compareTo(typedOther.isSetPosition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPosition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.position, typedOther.position);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDiamondAmount()).compareTo(typedOther.isSetDiamondAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDiamondAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.diamondAmount, typedOther.diamondAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBindDiamondAmount()).compareTo(typedOther.isSetBindDiamondAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBindDiamondAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bindDiamondAmount, typedOther.bindDiamondAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SlotDrawResult(");
    boolean first = true;

    sb.append("position:");
    sb.append(this.position);
    first = false;
    if (!first) sb.append(", ");
    sb.append("diamondAmount:");
    sb.append(this.diamondAmount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bindDiamondAmount:");
    sb.append(this.bindDiamondAmount);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SlotDrawResultStandardSchemeFactory implements SchemeFactory {
    public SlotDrawResultStandardScheme getScheme() {
      return new SlotDrawResultStandardScheme();
    }
  }

  private static class SlotDrawResultStandardScheme extends StandardScheme<SlotDrawResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SlotDrawResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // POSITION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.position = iprot.readI32();
              struct.setPositionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DIAMOND_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.diamondAmount = iprot.readI32();
              struct.setDiamondAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BIND_DIAMOND_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bindDiamondAmount = iprot.readI32();
              struct.setBindDiamondAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SlotDrawResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(POSITION_FIELD_DESC);
      oprot.writeI32(struct.position);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DIAMOND_AMOUNT_FIELD_DESC);
      oprot.writeI32(struct.diamondAmount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BIND_DIAMOND_AMOUNT_FIELD_DESC);
      oprot.writeI32(struct.bindDiamondAmount);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SlotDrawResultTupleSchemeFactory implements SchemeFactory {
    public SlotDrawResultTupleScheme getScheme() {
      return new SlotDrawResultTupleScheme();
    }
  }

  private static class SlotDrawResultTupleScheme extends TupleScheme<SlotDrawResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SlotDrawResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPosition()) {
        optionals.set(0);
      }
      if (struct.isSetDiamondAmount()) {
        optionals.set(1);
      }
      if (struct.isSetBindDiamondAmount()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetPosition()) {
        oprot.writeI32(struct.position);
      }
      if (struct.isSetDiamondAmount()) {
        oprot.writeI32(struct.diamondAmount);
      }
      if (struct.isSetBindDiamondAmount()) {
        oprot.writeI32(struct.bindDiamondAmount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SlotDrawResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.position = iprot.readI32();
        struct.setPositionIsSet(true);
      }
      if (incoming.get(1)) {
        struct.diamondAmount = iprot.readI32();
        struct.setDiamondAmountIsSet(true);
      }
      if (incoming.get(2)) {
        struct.bindDiamondAmount = iprot.readI32();
        struct.setBindDiamondAmountIsSet(true);
      }
    }
  }

}

