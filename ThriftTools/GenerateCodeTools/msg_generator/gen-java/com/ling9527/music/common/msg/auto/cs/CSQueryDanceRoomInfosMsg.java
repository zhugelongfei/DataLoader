/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.cs;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 查询竞技房间信息
 */
public class CSQueryDanceRoomInfosMsg implements org.apache.thrift.TBase<CSQueryDanceRoomInfosMsg, CSQueryDanceRoomInfosMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CSQueryDanceRoomInfosMsg");

  private static final org.apache.thrift.protocol.TField PAGE_INFO_QUERY_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("pageInfoQueryParam", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField CHANNEL_FIELD_DESC = new org.apache.thrift.protocol.TField("channel", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("mode", org.apache.thrift.protocol.TType.BYTE, (short)3);
  private static final org.apache.thrift.protocol.TField QUERY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("queryType", org.apache.thrift.protocol.TType.BYTE, (short)4);
  private static final org.apache.thrift.protocol.TField QUERY_STYLE_FIELD_DESC = new org.apache.thrift.protocol.TField("queryStyle", org.apache.thrift.protocol.TType.BYTE, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CSQueryDanceRoomInfosMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CSQueryDanceRoomInfosMsgTupleSchemeFactory());
  }

  /**
   * 分页信息查询参数
   */
  public com.ling9527.music.common.msg.auto.CommonDataPageInfoQueryParam pageInfoQueryParam; // required
  /**
   * 
   * @see com.ling9527.music.common.msg.auto.RoomChannel
   */
  public com.ling9527.music.common.msg.auto.RoomChannel channel; // required
  /**
   * 模式
   */
  public byte mode; // required
  /**
   * 0,all rooms   1,wait rooms
   */
  public byte queryType; // required
  /**
   * 0-全部 1-附近
   */
  public byte queryStyle; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 分页信息查询参数
     */
    PAGE_INFO_QUERY_PARAM((short)1, "pageInfoQueryParam"),
    /**
     * 
     * @see com.ling9527.music.common.msg.auto.RoomChannel
     */
    CHANNEL((short)2, "channel"),
    /**
     * 模式
     */
    MODE((short)3, "mode"),
    /**
     * 0,all rooms   1,wait rooms
     */
    QUERY_TYPE((short)4, "queryType"),
    /**
     * 0-全部 1-附近
     */
    QUERY_STYLE((short)5, "queryStyle");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PAGE_INFO_QUERY_PARAM
          return PAGE_INFO_QUERY_PARAM;
        case 2: // CHANNEL
          return CHANNEL;
        case 3: // MODE
          return MODE;
        case 4: // QUERY_TYPE
          return QUERY_TYPE;
        case 5: // QUERY_STYLE
          return QUERY_STYLE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MODE_ISSET_ID = 0;
  private static final int __QUERYTYPE_ISSET_ID = 1;
  private static final int __QUERYSTYLE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PAGE_INFO_QUERY_PARAM, new org.apache.thrift.meta_data.FieldMetaData("pageInfoQueryParam", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.CommonDataPageInfoQueryParam.class)));
    tmpMap.put(_Fields.CHANNEL, new org.apache.thrift.meta_data.FieldMetaData("channel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.ling9527.music.common.msg.auto.RoomChannel.class)));
    tmpMap.put(_Fields.MODE, new org.apache.thrift.meta_data.FieldMetaData("mode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.QUERY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("queryType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.QUERY_STYLE, new org.apache.thrift.meta_data.FieldMetaData("queryStyle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CSQueryDanceRoomInfosMsg.class, metaDataMap);
  }

  public CSQueryDanceRoomInfosMsg() {
  }

  public CSQueryDanceRoomInfosMsg(
    com.ling9527.music.common.msg.auto.CommonDataPageInfoQueryParam pageInfoQueryParam,
    com.ling9527.music.common.msg.auto.RoomChannel channel,
    byte mode,
    byte queryType,
    byte queryStyle)
  {
    this();
    this.pageInfoQueryParam = pageInfoQueryParam;
    this.channel = channel;
    this.mode = mode;
    setModeIsSet(true);
    this.queryType = queryType;
    setQueryTypeIsSet(true);
    this.queryStyle = queryStyle;
    setQueryStyleIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CSQueryDanceRoomInfosMsg(CSQueryDanceRoomInfosMsg other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPageInfoQueryParam()) {
      this.pageInfoQueryParam = new com.ling9527.music.common.msg.auto.CommonDataPageInfoQueryParam(other.pageInfoQueryParam);
    }
    if (other.isSetChannel()) {
      this.channel = other.channel;
    }
    this.mode = other.mode;
    this.queryType = other.queryType;
    this.queryStyle = other.queryStyle;
  }

  public CSQueryDanceRoomInfosMsg deepCopy() {
    return new CSQueryDanceRoomInfosMsg(this);
  }

  @Override
  public void clear() {
    this.pageInfoQueryParam = null;
    this.channel = null;
    setModeIsSet(false);
    this.mode = 0;
    setQueryTypeIsSet(false);
    this.queryType = 0;
    setQueryStyleIsSet(false);
    this.queryStyle = 0;
  }

  /**
   * 分页信息查询参数
   */
  public com.ling9527.music.common.msg.auto.CommonDataPageInfoQueryParam getPageInfoQueryParam() {
    return this.pageInfoQueryParam;
  }

  /**
   * 分页信息查询参数
   */
  public CSQueryDanceRoomInfosMsg setPageInfoQueryParam(com.ling9527.music.common.msg.auto.CommonDataPageInfoQueryParam pageInfoQueryParam) {
    this.pageInfoQueryParam = pageInfoQueryParam;
    return this;
  }

  public void unsetPageInfoQueryParam() {
    this.pageInfoQueryParam = null;
  }

  /** Returns true if field pageInfoQueryParam is set (has been assigned a value) and false otherwise */
  public boolean isSetPageInfoQueryParam() {
    return this.pageInfoQueryParam != null;
  }

  public void setPageInfoQueryParamIsSet(boolean value) {
    if (!value) {
      this.pageInfoQueryParam = null;
    }
  }

  /**
   * 
   * @see com.ling9527.music.common.msg.auto.RoomChannel
   */
  public com.ling9527.music.common.msg.auto.RoomChannel getChannel() {
    return this.channel;
  }

  /**
   * 
   * @see com.ling9527.music.common.msg.auto.RoomChannel
   */
  public CSQueryDanceRoomInfosMsg setChannel(com.ling9527.music.common.msg.auto.RoomChannel channel) {
    this.channel = channel;
    return this;
  }

  public void unsetChannel() {
    this.channel = null;
  }

  /** Returns true if field channel is set (has been assigned a value) and false otherwise */
  public boolean isSetChannel() {
    return this.channel != null;
  }

  public void setChannelIsSet(boolean value) {
    if (!value) {
      this.channel = null;
    }
  }

  /**
   * 模式
   */
  public byte getMode() {
    return this.mode;
  }

  /**
   * 模式
   */
  public CSQueryDanceRoomInfosMsg setMode(byte mode) {
    this.mode = mode;
    setModeIsSet(true);
    return this;
  }

  public void unsetMode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MODE_ISSET_ID);
  }

  /** Returns true if field mode is set (has been assigned a value) and false otherwise */
  public boolean isSetMode() {
    return EncodingUtils.testBit(__isset_bitfield, __MODE_ISSET_ID);
  }

  public void setModeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MODE_ISSET_ID, value);
  }

  /**
   * 0,all rooms   1,wait rooms
   */
  public byte getQueryType() {
    return this.queryType;
  }

  /**
   * 0,all rooms   1,wait rooms
   */
  public CSQueryDanceRoomInfosMsg setQueryType(byte queryType) {
    this.queryType = queryType;
    setQueryTypeIsSet(true);
    return this;
  }

  public void unsetQueryType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUERYTYPE_ISSET_ID);
  }

  /** Returns true if field queryType is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryType() {
    return EncodingUtils.testBit(__isset_bitfield, __QUERYTYPE_ISSET_ID);
  }

  public void setQueryTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUERYTYPE_ISSET_ID, value);
  }

  /**
   * 0-全部 1-附近
   */
  public byte getQueryStyle() {
    return this.queryStyle;
  }

  /**
   * 0-全部 1-附近
   */
  public CSQueryDanceRoomInfosMsg setQueryStyle(byte queryStyle) {
    this.queryStyle = queryStyle;
    setQueryStyleIsSet(true);
    return this;
  }

  public void unsetQueryStyle() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUERYSTYLE_ISSET_ID);
  }

  /** Returns true if field queryStyle is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryStyle() {
    return EncodingUtils.testBit(__isset_bitfield, __QUERYSTYLE_ISSET_ID);
  }

  public void setQueryStyleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUERYSTYLE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PAGE_INFO_QUERY_PARAM:
      if (value == null) {
        unsetPageInfoQueryParam();
      } else {
        setPageInfoQueryParam((com.ling9527.music.common.msg.auto.CommonDataPageInfoQueryParam)value);
      }
      break;

    case CHANNEL:
      if (value == null) {
        unsetChannel();
      } else {
        setChannel((com.ling9527.music.common.msg.auto.RoomChannel)value);
      }
      break;

    case MODE:
      if (value == null) {
        unsetMode();
      } else {
        setMode((Byte)value);
      }
      break;

    case QUERY_TYPE:
      if (value == null) {
        unsetQueryType();
      } else {
        setQueryType((Byte)value);
      }
      break;

    case QUERY_STYLE:
      if (value == null) {
        unsetQueryStyle();
      } else {
        setQueryStyle((Byte)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PAGE_INFO_QUERY_PARAM:
      return getPageInfoQueryParam();

    case CHANNEL:
      return getChannel();

    case MODE:
      return Byte.valueOf(getMode());

    case QUERY_TYPE:
      return Byte.valueOf(getQueryType());

    case QUERY_STYLE:
      return Byte.valueOf(getQueryStyle());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PAGE_INFO_QUERY_PARAM:
      return isSetPageInfoQueryParam();
    case CHANNEL:
      return isSetChannel();
    case MODE:
      return isSetMode();
    case QUERY_TYPE:
      return isSetQueryType();
    case QUERY_STYLE:
      return isSetQueryStyle();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CSQueryDanceRoomInfosMsg)
      return this.equals((CSQueryDanceRoomInfosMsg)that);
    return false;
  }

  public boolean equals(CSQueryDanceRoomInfosMsg that) {
    if (that == null)
      return false;

    boolean this_present_pageInfoQueryParam = true && this.isSetPageInfoQueryParam();
    boolean that_present_pageInfoQueryParam = true && that.isSetPageInfoQueryParam();
    if (this_present_pageInfoQueryParam || that_present_pageInfoQueryParam) {
      if (!(this_present_pageInfoQueryParam && that_present_pageInfoQueryParam))
        return false;
      if (!this.pageInfoQueryParam.equals(that.pageInfoQueryParam))
        return false;
    }

    boolean this_present_channel = true && this.isSetChannel();
    boolean that_present_channel = true && that.isSetChannel();
    if (this_present_channel || that_present_channel) {
      if (!(this_present_channel && that_present_channel))
        return false;
      if (!this.channel.equals(that.channel))
        return false;
    }

    boolean this_present_mode = true;
    boolean that_present_mode = true;
    if (this_present_mode || that_present_mode) {
      if (!(this_present_mode && that_present_mode))
        return false;
      if (this.mode != that.mode)
        return false;
    }

    boolean this_present_queryType = true;
    boolean that_present_queryType = true;
    if (this_present_queryType || that_present_queryType) {
      if (!(this_present_queryType && that_present_queryType))
        return false;
      if (this.queryType != that.queryType)
        return false;
    }

    boolean this_present_queryStyle = true;
    boolean that_present_queryStyle = true;
    if (this_present_queryStyle || that_present_queryStyle) {
      if (!(this_present_queryStyle && that_present_queryStyle))
        return false;
      if (this.queryStyle != that.queryStyle)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(CSQueryDanceRoomInfosMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CSQueryDanceRoomInfosMsg typedOther = (CSQueryDanceRoomInfosMsg)other;

    lastComparison = Boolean.valueOf(isSetPageInfoQueryParam()).compareTo(typedOther.isSetPageInfoQueryParam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageInfoQueryParam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageInfoQueryParam, typedOther.pageInfoQueryParam);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChannel()).compareTo(typedOther.isSetChannel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channel, typedOther.channel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMode()).compareTo(typedOther.isSetMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mode, typedOther.mode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueryType()).compareTo(typedOther.isSetQueryType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryType, typedOther.queryType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueryStyle()).compareTo(typedOther.isSetQueryStyle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryStyle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryStyle, typedOther.queryStyle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CSQueryDanceRoomInfosMsg(");
    boolean first = true;

    sb.append("pageInfoQueryParam:");
    if (this.pageInfoQueryParam == null) {
      sb.append("null");
    } else {
      sb.append(this.pageInfoQueryParam);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("channel:");
    if (this.channel == null) {
      sb.append("null");
    } else {
      sb.append(this.channel);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mode:");
    sb.append(this.mode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("queryType:");
    sb.append(this.queryType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("queryStyle:");
    sb.append(this.queryStyle);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (pageInfoQueryParam != null) {
      pageInfoQueryParam.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CSQueryDanceRoomInfosMsgStandardSchemeFactory implements SchemeFactory {
    public CSQueryDanceRoomInfosMsgStandardScheme getScheme() {
      return new CSQueryDanceRoomInfosMsgStandardScheme();
    }
  }

  private static class CSQueryDanceRoomInfosMsgStandardScheme extends StandardScheme<CSQueryDanceRoomInfosMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CSQueryDanceRoomInfosMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PAGE_INFO_QUERY_PARAM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.pageInfoQueryParam = new com.ling9527.music.common.msg.auto.CommonDataPageInfoQueryParam();
              struct.pageInfoQueryParam.read(iprot);
              struct.setPageInfoQueryParamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CHANNEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.channel = com.ling9527.music.common.msg.auto.RoomChannel.findByValue(iprot.readI32());
              struct.setChannelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.mode = iprot.readByte();
              struct.setModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // QUERY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.queryType = iprot.readByte();
              struct.setQueryTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // QUERY_STYLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.queryStyle = iprot.readByte();
              struct.setQueryStyleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CSQueryDanceRoomInfosMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.pageInfoQueryParam != null) {
        oprot.writeFieldBegin(PAGE_INFO_QUERY_PARAM_FIELD_DESC);
        struct.pageInfoQueryParam.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.channel != null) {
        oprot.writeFieldBegin(CHANNEL_FIELD_DESC);
        oprot.writeI32(struct.channel.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MODE_FIELD_DESC);
      oprot.writeByte(struct.mode);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(QUERY_TYPE_FIELD_DESC);
      oprot.writeByte(struct.queryType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(QUERY_STYLE_FIELD_DESC);
      oprot.writeByte(struct.queryStyle);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CSQueryDanceRoomInfosMsgTupleSchemeFactory implements SchemeFactory {
    public CSQueryDanceRoomInfosMsgTupleScheme getScheme() {
      return new CSQueryDanceRoomInfosMsgTupleScheme();
    }
  }

  private static class CSQueryDanceRoomInfosMsgTupleScheme extends TupleScheme<CSQueryDanceRoomInfosMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CSQueryDanceRoomInfosMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPageInfoQueryParam()) {
        optionals.set(0);
      }
      if (struct.isSetChannel()) {
        optionals.set(1);
      }
      if (struct.isSetMode()) {
        optionals.set(2);
      }
      if (struct.isSetQueryType()) {
        optionals.set(3);
      }
      if (struct.isSetQueryStyle()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetPageInfoQueryParam()) {
        struct.pageInfoQueryParam.write(oprot);
      }
      if (struct.isSetChannel()) {
        oprot.writeI32(struct.channel.getValue());
      }
      if (struct.isSetMode()) {
        oprot.writeByte(struct.mode);
      }
      if (struct.isSetQueryType()) {
        oprot.writeByte(struct.queryType);
      }
      if (struct.isSetQueryStyle()) {
        oprot.writeByte(struct.queryStyle);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CSQueryDanceRoomInfosMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.pageInfoQueryParam = new com.ling9527.music.common.msg.auto.CommonDataPageInfoQueryParam();
        struct.pageInfoQueryParam.read(iprot);
        struct.setPageInfoQueryParamIsSet(true);
      }
      if (incoming.get(1)) {
        struct.channel = com.ling9527.music.common.msg.auto.RoomChannel.findByValue(iprot.readI32());
        struct.setChannelIsSet(true);
      }
      if (incoming.get(2)) {
        struct.mode = iprot.readByte();
        struct.setModeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.queryType = iprot.readByte();
        struct.setQueryTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.queryStyle = iprot.readByte();
        struct.setQueryStyleIsSet(true);
      }
    }
  }

}

