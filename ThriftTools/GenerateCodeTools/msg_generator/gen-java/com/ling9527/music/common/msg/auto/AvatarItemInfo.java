/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class AvatarItemInfo implements org.apache.thrift.TBase<AvatarItemInfo, AvatarItemInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AvatarItemInfo");

  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.BYTE, (short)1);
  private static final org.apache.thrift.protocol.TField TEMPLATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("templateId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField INSTANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instanceId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField VALID_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("validTime", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField DIY_AREAS_FIELD_DESC = new org.apache.thrift.protocol.TField("diyAreas", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField BIND_FIELD_DESC = new org.apache.thrift.protocol.TField("bind", org.apache.thrift.protocol.TType.BYTE, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AvatarItemInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AvatarItemInfoTupleSchemeFactory());
  }

  public byte type; // required
  public int templateId; // required
  public long instanceId; // required
  public int count; // required
  public int validTime; // required
  public AvatarDiyArea diyAreas; // required
  public byte bind; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TYPE((short)1, "type"),
    TEMPLATE_ID((short)2, "templateId"),
    INSTANCE_ID((short)3, "instanceId"),
    COUNT((short)4, "count"),
    VALID_TIME((short)5, "validTime"),
    DIY_AREAS((short)6, "diyAreas"),
    BIND((short)7, "bind");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TYPE
          return TYPE;
        case 2: // TEMPLATE_ID
          return TEMPLATE_ID;
        case 3: // INSTANCE_ID
          return INSTANCE_ID;
        case 4: // COUNT
          return COUNT;
        case 5: // VALID_TIME
          return VALID_TIME;
        case 6: // DIY_AREAS
          return DIY_AREAS;
        case 7: // BIND
          return BIND;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TYPE_ISSET_ID = 0;
  private static final int __TEMPLATEID_ISSET_ID = 1;
  private static final int __INSTANCEID_ISSET_ID = 2;
  private static final int __COUNT_ISSET_ID = 3;
  private static final int __VALIDTIME_ISSET_ID = 4;
  private static final int __BIND_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.TEMPLATE_ID, new org.apache.thrift.meta_data.FieldMetaData("templateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INSTANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("instanceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VALID_TIME, new org.apache.thrift.meta_data.FieldMetaData("validTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DIY_AREAS, new org.apache.thrift.meta_data.FieldMetaData("diyAreas", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AvatarDiyArea.class)));
    tmpMap.put(_Fields.BIND, new org.apache.thrift.meta_data.FieldMetaData("bind", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AvatarItemInfo.class, metaDataMap);
  }

  public AvatarItemInfo() {
  }

  public AvatarItemInfo(
    byte type,
    int templateId,
    long instanceId,
    int count,
    int validTime,
    AvatarDiyArea diyAreas,
    byte bind)
  {
    this();
    this.type = type;
    setTypeIsSet(true);
    this.templateId = templateId;
    setTemplateIdIsSet(true);
    this.instanceId = instanceId;
    setInstanceIdIsSet(true);
    this.count = count;
    setCountIsSet(true);
    this.validTime = validTime;
    setValidTimeIsSet(true);
    this.diyAreas = diyAreas;
    this.bind = bind;
    setBindIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AvatarItemInfo(AvatarItemInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.type = other.type;
    this.templateId = other.templateId;
    this.instanceId = other.instanceId;
    this.count = other.count;
    this.validTime = other.validTime;
    if (other.isSetDiyAreas()) {
      this.diyAreas = new AvatarDiyArea(other.diyAreas);
    }
    this.bind = other.bind;
  }

  public AvatarItemInfo deepCopy() {
    return new AvatarItemInfo(this);
  }

  @Override
  public void clear() {
    setTypeIsSet(false);
    this.type = 0;
    setTemplateIdIsSet(false);
    this.templateId = 0;
    setInstanceIdIsSet(false);
    this.instanceId = 0;
    setCountIsSet(false);
    this.count = 0;
    setValidTimeIsSet(false);
    this.validTime = 0;
    this.diyAreas = null;
    setBindIsSet(false);
    this.bind = 0;
  }

  public byte getType() {
    return this.type;
  }

  public AvatarItemInfo setType(byte type) {
    this.type = type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
  }

  public int getTemplateId() {
    return this.templateId;
  }

  public AvatarItemInfo setTemplateId(int templateId) {
    this.templateId = templateId;
    setTemplateIdIsSet(true);
    return this;
  }

  public void unsetTemplateId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TEMPLATEID_ISSET_ID);
  }

  /** Returns true if field templateId is set (has been assigned a value) and false otherwise */
  public boolean isSetTemplateId() {
    return EncodingUtils.testBit(__isset_bitfield, __TEMPLATEID_ISSET_ID);
  }

  public void setTemplateIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TEMPLATEID_ISSET_ID, value);
  }

  public long getInstanceId() {
    return this.instanceId;
  }

  public AvatarItemInfo setInstanceId(long instanceId) {
    this.instanceId = instanceId;
    setInstanceIdIsSet(true);
    return this;
  }

  public void unsetInstanceId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INSTANCEID_ISSET_ID);
  }

  /** Returns true if field instanceId is set (has been assigned a value) and false otherwise */
  public boolean isSetInstanceId() {
    return EncodingUtils.testBit(__isset_bitfield, __INSTANCEID_ISSET_ID);
  }

  public void setInstanceIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INSTANCEID_ISSET_ID, value);
  }

  public int getCount() {
    return this.count;
  }

  public AvatarItemInfo setCount(int count) {
    this.count = count;
    setCountIsSet(true);
    return this;
  }

  public void unsetCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  /** Returns true if field count is set (has been assigned a value) and false otherwise */
  public boolean isSetCount() {
    return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  public void setCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
  }

  public int getValidTime() {
    return this.validTime;
  }

  public AvatarItemInfo setValidTime(int validTime) {
    this.validTime = validTime;
    setValidTimeIsSet(true);
    return this;
  }

  public void unsetValidTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VALIDTIME_ISSET_ID);
  }

  /** Returns true if field validTime is set (has been assigned a value) and false otherwise */
  public boolean isSetValidTime() {
    return EncodingUtils.testBit(__isset_bitfield, __VALIDTIME_ISSET_ID);
  }

  public void setValidTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VALIDTIME_ISSET_ID, value);
  }

  public AvatarDiyArea getDiyAreas() {
    return this.diyAreas;
  }

  public AvatarItemInfo setDiyAreas(AvatarDiyArea diyAreas) {
    this.diyAreas = diyAreas;
    return this;
  }

  public void unsetDiyAreas() {
    this.diyAreas = null;
  }

  /** Returns true if field diyAreas is set (has been assigned a value) and false otherwise */
  public boolean isSetDiyAreas() {
    return this.diyAreas != null;
  }

  public void setDiyAreasIsSet(boolean value) {
    if (!value) {
      this.diyAreas = null;
    }
  }

  public byte getBind() {
    return this.bind;
  }

  public AvatarItemInfo setBind(byte bind) {
    this.bind = bind;
    setBindIsSet(true);
    return this;
  }

  public void unsetBind() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BIND_ISSET_ID);
  }

  /** Returns true if field bind is set (has been assigned a value) and false otherwise */
  public boolean isSetBind() {
    return EncodingUtils.testBit(__isset_bitfield, __BIND_ISSET_ID);
  }

  public void setBindIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BIND_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Byte)value);
      }
      break;

    case TEMPLATE_ID:
      if (value == null) {
        unsetTemplateId();
      } else {
        setTemplateId((Integer)value);
      }
      break;

    case INSTANCE_ID:
      if (value == null) {
        unsetInstanceId();
      } else {
        setInstanceId((Long)value);
      }
      break;

    case COUNT:
      if (value == null) {
        unsetCount();
      } else {
        setCount((Integer)value);
      }
      break;

    case VALID_TIME:
      if (value == null) {
        unsetValidTime();
      } else {
        setValidTime((Integer)value);
      }
      break;

    case DIY_AREAS:
      if (value == null) {
        unsetDiyAreas();
      } else {
        setDiyAreas((AvatarDiyArea)value);
      }
      break;

    case BIND:
      if (value == null) {
        unsetBind();
      } else {
        setBind((Byte)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TYPE:
      return Byte.valueOf(getType());

    case TEMPLATE_ID:
      return Integer.valueOf(getTemplateId());

    case INSTANCE_ID:
      return Long.valueOf(getInstanceId());

    case COUNT:
      return Integer.valueOf(getCount());

    case VALID_TIME:
      return Integer.valueOf(getValidTime());

    case DIY_AREAS:
      return getDiyAreas();

    case BIND:
      return Byte.valueOf(getBind());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TYPE:
      return isSetType();
    case TEMPLATE_ID:
      return isSetTemplateId();
    case INSTANCE_ID:
      return isSetInstanceId();
    case COUNT:
      return isSetCount();
    case VALID_TIME:
      return isSetValidTime();
    case DIY_AREAS:
      return isSetDiyAreas();
    case BIND:
      return isSetBind();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AvatarItemInfo)
      return this.equals((AvatarItemInfo)that);
    return false;
  }

  public boolean equals(AvatarItemInfo that) {
    if (that == null)
      return false;

    boolean this_present_type = true;
    boolean that_present_type = true;
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    boolean this_present_templateId = true;
    boolean that_present_templateId = true;
    if (this_present_templateId || that_present_templateId) {
      if (!(this_present_templateId && that_present_templateId))
        return false;
      if (this.templateId != that.templateId)
        return false;
    }

    boolean this_present_instanceId = true;
    boolean that_present_instanceId = true;
    if (this_present_instanceId || that_present_instanceId) {
      if (!(this_present_instanceId && that_present_instanceId))
        return false;
      if (this.instanceId != that.instanceId)
        return false;
    }

    boolean this_present_count = true;
    boolean that_present_count = true;
    if (this_present_count || that_present_count) {
      if (!(this_present_count && that_present_count))
        return false;
      if (this.count != that.count)
        return false;
    }

    boolean this_present_validTime = true;
    boolean that_present_validTime = true;
    if (this_present_validTime || that_present_validTime) {
      if (!(this_present_validTime && that_present_validTime))
        return false;
      if (this.validTime != that.validTime)
        return false;
    }

    boolean this_present_diyAreas = true && this.isSetDiyAreas();
    boolean that_present_diyAreas = true && that.isSetDiyAreas();
    if (this_present_diyAreas || that_present_diyAreas) {
      if (!(this_present_diyAreas && that_present_diyAreas))
        return false;
      if (!this.diyAreas.equals(that.diyAreas))
        return false;
    }

    boolean this_present_bind = true;
    boolean that_present_bind = true;
    if (this_present_bind || that_present_bind) {
      if (!(this_present_bind && that_present_bind))
        return false;
      if (this.bind != that.bind)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(AvatarItemInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    AvatarItemInfo typedOther = (AvatarItemInfo)other;

    lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, typedOther.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTemplateId()).compareTo(typedOther.isSetTemplateId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemplateId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateId, typedOther.templateId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstanceId()).compareTo(typedOther.isSetInstanceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstanceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instanceId, typedOther.instanceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValidTime()).compareTo(typedOther.isSetValidTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValidTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validTime, typedOther.validTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDiyAreas()).compareTo(typedOther.isSetDiyAreas());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDiyAreas()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.diyAreas, typedOther.diyAreas);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBind()).compareTo(typedOther.isSetBind());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBind()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bind, typedOther.bind);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AvatarItemInfo(");
    boolean first = true;

    sb.append("type:");
    sb.append(this.type);
    first = false;
    if (!first) sb.append(", ");
    sb.append("templateId:");
    sb.append(this.templateId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("instanceId:");
    sb.append(this.instanceId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("count:");
    sb.append(this.count);
    first = false;
    if (!first) sb.append(", ");
    sb.append("validTime:");
    sb.append(this.validTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("diyAreas:");
    if (this.diyAreas == null) {
      sb.append("null");
    } else {
      sb.append(this.diyAreas);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bind:");
    sb.append(this.bind);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (diyAreas != null) {
      diyAreas.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AvatarItemInfoStandardSchemeFactory implements SchemeFactory {
    public AvatarItemInfoStandardScheme getScheme() {
      return new AvatarItemInfoStandardScheme();
    }
  }

  private static class AvatarItemInfoStandardScheme extends StandardScheme<AvatarItemInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AvatarItemInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.type = iprot.readByte();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TEMPLATE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.templateId = iprot.readI32();
              struct.setTemplateIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INSTANCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.instanceId = iprot.readI64();
              struct.setInstanceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.count = iprot.readI32();
              struct.setCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // VALID_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.validTime = iprot.readI32();
              struct.setValidTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DIY_AREAS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.diyAreas = new AvatarDiyArea();
              struct.diyAreas.read(iprot);
              struct.setDiyAreasIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BIND
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.bind = iprot.readByte();
              struct.setBindIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AvatarItemInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeByte(struct.type);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TEMPLATE_ID_FIELD_DESC);
      oprot.writeI32(struct.templateId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INSTANCE_ID_FIELD_DESC);
      oprot.writeI64(struct.instanceId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COUNT_FIELD_DESC);
      oprot.writeI32(struct.count);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VALID_TIME_FIELD_DESC);
      oprot.writeI32(struct.validTime);
      oprot.writeFieldEnd();
      if (struct.diyAreas != null) {
        oprot.writeFieldBegin(DIY_AREAS_FIELD_DESC);
        struct.diyAreas.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BIND_FIELD_DESC);
      oprot.writeByte(struct.bind);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AvatarItemInfoTupleSchemeFactory implements SchemeFactory {
    public AvatarItemInfoTupleScheme getScheme() {
      return new AvatarItemInfoTupleScheme();
    }
  }

  private static class AvatarItemInfoTupleScheme extends TupleScheme<AvatarItemInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AvatarItemInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetType()) {
        optionals.set(0);
      }
      if (struct.isSetTemplateId()) {
        optionals.set(1);
      }
      if (struct.isSetInstanceId()) {
        optionals.set(2);
      }
      if (struct.isSetCount()) {
        optionals.set(3);
      }
      if (struct.isSetValidTime()) {
        optionals.set(4);
      }
      if (struct.isSetDiyAreas()) {
        optionals.set(5);
      }
      if (struct.isSetBind()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetType()) {
        oprot.writeByte(struct.type);
      }
      if (struct.isSetTemplateId()) {
        oprot.writeI32(struct.templateId);
      }
      if (struct.isSetInstanceId()) {
        oprot.writeI64(struct.instanceId);
      }
      if (struct.isSetCount()) {
        oprot.writeI32(struct.count);
      }
      if (struct.isSetValidTime()) {
        oprot.writeI32(struct.validTime);
      }
      if (struct.isSetDiyAreas()) {
        struct.diyAreas.write(oprot);
      }
      if (struct.isSetBind()) {
        oprot.writeByte(struct.bind);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AvatarItemInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.type = iprot.readByte();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.templateId = iprot.readI32();
        struct.setTemplateIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.instanceId = iprot.readI64();
        struct.setInstanceIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.count = iprot.readI32();
        struct.setCountIsSet(true);
      }
      if (incoming.get(4)) {
        struct.validTime = iprot.readI32();
        struct.setValidTimeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.diyAreas = new AvatarDiyArea();
        struct.diyAreas.read(iprot);
        struct.setDiyAreasIsSet(true);
      }
      if (incoming.get(6)) {
        struct.bind = iprot.readByte();
        struct.setBindIsSet(true);
      }
    }
  }

}

