/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SCSignInStateMsg implements org.apache.thrift.TBase<SCSignInStateMsg, SCSignInStateMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCSignInStateMsg");

  private static final org.apache.thrift.protocol.TField FIRST_DAY_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("firstDayTimestamp", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField DAILY_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("dailyState", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField COLLECTIVE_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("collectiveState", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCSignInStateMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCSignInStateMsgTupleSchemeFactory());
  }

  public int firstDayTimestamp; // required
  public List<Byte> dailyState; // required
  public List<Byte> collectiveState; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FIRST_DAY_TIMESTAMP((short)1, "firstDayTimestamp"),
    DAILY_STATE((short)2, "dailyState"),
    COLLECTIVE_STATE((short)3, "collectiveState");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FIRST_DAY_TIMESTAMP
          return FIRST_DAY_TIMESTAMP;
        case 2: // DAILY_STATE
          return DAILY_STATE;
        case 3: // COLLECTIVE_STATE
          return COLLECTIVE_STATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FIRSTDAYTIMESTAMP_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FIRST_DAY_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("firstDayTimestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DAILY_STATE, new org.apache.thrift.meta_data.FieldMetaData("dailyState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE))));
    tmpMap.put(_Fields.COLLECTIVE_STATE, new org.apache.thrift.meta_data.FieldMetaData("collectiveState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCSignInStateMsg.class, metaDataMap);
  }

  public SCSignInStateMsg() {
  }

  public SCSignInStateMsg(
    int firstDayTimestamp,
    List<Byte> dailyState,
    List<Byte> collectiveState)
  {
    this();
    this.firstDayTimestamp = firstDayTimestamp;
    setFirstDayTimestampIsSet(true);
    this.dailyState = dailyState;
    this.collectiveState = collectiveState;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCSignInStateMsg(SCSignInStateMsg other) {
    __isset_bitfield = other.__isset_bitfield;
    this.firstDayTimestamp = other.firstDayTimestamp;
    if (other.isSetDailyState()) {
      List<Byte> __this__dailyState = new ArrayList<Byte>();
      for (Byte other_element : other.dailyState) {
        __this__dailyState.add(other_element);
      }
      this.dailyState = __this__dailyState;
    }
    if (other.isSetCollectiveState()) {
      List<Byte> __this__collectiveState = new ArrayList<Byte>();
      for (Byte other_element : other.collectiveState) {
        __this__collectiveState.add(other_element);
      }
      this.collectiveState = __this__collectiveState;
    }
  }

  public SCSignInStateMsg deepCopy() {
    return new SCSignInStateMsg(this);
  }

  @Override
  public void clear() {
    setFirstDayTimestampIsSet(false);
    this.firstDayTimestamp = 0;
    this.dailyState = null;
    this.collectiveState = null;
  }

  public int getFirstDayTimestamp() {
    return this.firstDayTimestamp;
  }

  public SCSignInStateMsg setFirstDayTimestamp(int firstDayTimestamp) {
    this.firstDayTimestamp = firstDayTimestamp;
    setFirstDayTimestampIsSet(true);
    return this;
  }

  public void unsetFirstDayTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIRSTDAYTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field firstDayTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetFirstDayTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __FIRSTDAYTIMESTAMP_ISSET_ID);
  }

  public void setFirstDayTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIRSTDAYTIMESTAMP_ISSET_ID, value);
  }

  public int getDailyStateSize() {
    return (this.dailyState == null) ? 0 : this.dailyState.size();
  }

  public java.util.Iterator<Byte> getDailyStateIterator() {
    return (this.dailyState == null) ? null : this.dailyState.iterator();
  }

  public void addToDailyState(byte elem) {
    if (this.dailyState == null) {
      this.dailyState = new ArrayList<Byte>();
    }
    this.dailyState.add(elem);
  }

  public List<Byte> getDailyState() {
    return this.dailyState;
  }

  public SCSignInStateMsg setDailyState(List<Byte> dailyState) {
    this.dailyState = dailyState;
    return this;
  }

  public void unsetDailyState() {
    this.dailyState = null;
  }

  /** Returns true if field dailyState is set (has been assigned a value) and false otherwise */
  public boolean isSetDailyState() {
    return this.dailyState != null;
  }

  public void setDailyStateIsSet(boolean value) {
    if (!value) {
      this.dailyState = null;
    }
  }

  public int getCollectiveStateSize() {
    return (this.collectiveState == null) ? 0 : this.collectiveState.size();
  }

  public java.util.Iterator<Byte> getCollectiveStateIterator() {
    return (this.collectiveState == null) ? null : this.collectiveState.iterator();
  }

  public void addToCollectiveState(byte elem) {
    if (this.collectiveState == null) {
      this.collectiveState = new ArrayList<Byte>();
    }
    this.collectiveState.add(elem);
  }

  public List<Byte> getCollectiveState() {
    return this.collectiveState;
  }

  public SCSignInStateMsg setCollectiveState(List<Byte> collectiveState) {
    this.collectiveState = collectiveState;
    return this;
  }

  public void unsetCollectiveState() {
    this.collectiveState = null;
  }

  /** Returns true if field collectiveState is set (has been assigned a value) and false otherwise */
  public boolean isSetCollectiveState() {
    return this.collectiveState != null;
  }

  public void setCollectiveStateIsSet(boolean value) {
    if (!value) {
      this.collectiveState = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FIRST_DAY_TIMESTAMP:
      if (value == null) {
        unsetFirstDayTimestamp();
      } else {
        setFirstDayTimestamp((Integer)value);
      }
      break;

    case DAILY_STATE:
      if (value == null) {
        unsetDailyState();
      } else {
        setDailyState((List<Byte>)value);
      }
      break;

    case COLLECTIVE_STATE:
      if (value == null) {
        unsetCollectiveState();
      } else {
        setCollectiveState((List<Byte>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FIRST_DAY_TIMESTAMP:
      return Integer.valueOf(getFirstDayTimestamp());

    case DAILY_STATE:
      return getDailyState();

    case COLLECTIVE_STATE:
      return getCollectiveState();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FIRST_DAY_TIMESTAMP:
      return isSetFirstDayTimestamp();
    case DAILY_STATE:
      return isSetDailyState();
    case COLLECTIVE_STATE:
      return isSetCollectiveState();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCSignInStateMsg)
      return this.equals((SCSignInStateMsg)that);
    return false;
  }

  public boolean equals(SCSignInStateMsg that) {
    if (that == null)
      return false;

    boolean this_present_firstDayTimestamp = true;
    boolean that_present_firstDayTimestamp = true;
    if (this_present_firstDayTimestamp || that_present_firstDayTimestamp) {
      if (!(this_present_firstDayTimestamp && that_present_firstDayTimestamp))
        return false;
      if (this.firstDayTimestamp != that.firstDayTimestamp)
        return false;
    }

    boolean this_present_dailyState = true && this.isSetDailyState();
    boolean that_present_dailyState = true && that.isSetDailyState();
    if (this_present_dailyState || that_present_dailyState) {
      if (!(this_present_dailyState && that_present_dailyState))
        return false;
      if (!this.dailyState.equals(that.dailyState))
        return false;
    }

    boolean this_present_collectiveState = true && this.isSetCollectiveState();
    boolean that_present_collectiveState = true && that.isSetCollectiveState();
    if (this_present_collectiveState || that_present_collectiveState) {
      if (!(this_present_collectiveState && that_present_collectiveState))
        return false;
      if (!this.collectiveState.equals(that.collectiveState))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCSignInStateMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCSignInStateMsg typedOther = (SCSignInStateMsg)other;

    lastComparison = Boolean.valueOf(isSetFirstDayTimestamp()).compareTo(typedOther.isSetFirstDayTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFirstDayTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firstDayTimestamp, typedOther.firstDayTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDailyState()).compareTo(typedOther.isSetDailyState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDailyState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dailyState, typedOther.dailyState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCollectiveState()).compareTo(typedOther.isSetCollectiveState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCollectiveState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collectiveState, typedOther.collectiveState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCSignInStateMsg(");
    boolean first = true;

    sb.append("firstDayTimestamp:");
    sb.append(this.firstDayTimestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dailyState:");
    if (this.dailyState == null) {
      sb.append("null");
    } else {
      sb.append(this.dailyState);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("collectiveState:");
    if (this.collectiveState == null) {
      sb.append("null");
    } else {
      sb.append(this.collectiveState);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCSignInStateMsgStandardSchemeFactory implements SchemeFactory {
    public SCSignInStateMsgStandardScheme getScheme() {
      return new SCSignInStateMsgStandardScheme();
    }
  }

  private static class SCSignInStateMsgStandardScheme extends StandardScheme<SCSignInStateMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCSignInStateMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FIRST_DAY_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.firstDayTimestamp = iprot.readI32();
              struct.setFirstDayTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DAILY_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.dailyState = new ArrayList<Byte>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  byte _elem2; // required
                  _elem2 = iprot.readByte();
                  struct.dailyState.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setDailyStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COLLECTIVE_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.collectiveState = new ArrayList<Byte>(_list3.size);
                for (int _i4 = 0; _i4 < _list3.size; ++_i4)
                {
                  byte _elem5; // required
                  _elem5 = iprot.readByte();
                  struct.collectiveState.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setCollectiveStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCSignInStateMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(FIRST_DAY_TIMESTAMP_FIELD_DESC);
      oprot.writeI32(struct.firstDayTimestamp);
      oprot.writeFieldEnd();
      if (struct.dailyState != null) {
        oprot.writeFieldBegin(DAILY_STATE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BYTE, struct.dailyState.size()));
          for (byte _iter6 : struct.dailyState)
          {
            oprot.writeByte(_iter6);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.collectiveState != null) {
        oprot.writeFieldBegin(COLLECTIVE_STATE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BYTE, struct.collectiveState.size()));
          for (byte _iter7 : struct.collectiveState)
          {
            oprot.writeByte(_iter7);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCSignInStateMsgTupleSchemeFactory implements SchemeFactory {
    public SCSignInStateMsgTupleScheme getScheme() {
      return new SCSignInStateMsgTupleScheme();
    }
  }

  private static class SCSignInStateMsgTupleScheme extends TupleScheme<SCSignInStateMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCSignInStateMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetFirstDayTimestamp()) {
        optionals.set(0);
      }
      if (struct.isSetDailyState()) {
        optionals.set(1);
      }
      if (struct.isSetCollectiveState()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetFirstDayTimestamp()) {
        oprot.writeI32(struct.firstDayTimestamp);
      }
      if (struct.isSetDailyState()) {
        {
          oprot.writeI32(struct.dailyState.size());
          for (byte _iter8 : struct.dailyState)
          {
            oprot.writeByte(_iter8);
          }
        }
      }
      if (struct.isSetCollectiveState()) {
        {
          oprot.writeI32(struct.collectiveState.size());
          for (byte _iter9 : struct.collectiveState)
          {
            oprot.writeByte(_iter9);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCSignInStateMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.firstDayTimestamp = iprot.readI32();
        struct.setFirstDayTimestampIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BYTE, iprot.readI32());
          struct.dailyState = new ArrayList<Byte>(_list10.size);
          for (int _i11 = 0; _i11 < _list10.size; ++_i11)
          {
            byte _elem12; // required
            _elem12 = iprot.readByte();
            struct.dailyState.add(_elem12);
          }
        }
        struct.setDailyStateIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BYTE, iprot.readI32());
          struct.collectiveState = new ArrayList<Byte>(_list13.size);
          for (int _i14 = 0; _i14 < _list13.size; ++_i14)
          {
            byte _elem15; // required
            _elem15 = iprot.readByte();
            struct.collectiveState.add(_elem15);
          }
        }
        struct.setCollectiveStateIsSet(true);
      }
    }
  }

}

