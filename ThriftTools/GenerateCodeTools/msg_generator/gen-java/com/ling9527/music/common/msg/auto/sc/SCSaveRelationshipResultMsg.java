/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 修改密友或情侣间的关系称呼
 */
public class SCSaveRelationshipResultMsg implements org.apache.thrift.TBase<SCSaveRelationshipResultMsg, SCSaveRelationshipResultMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCSaveRelationshipResultMsg");

  private static final org.apache.thrift.protocol.TField NEW_NICK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("newNickName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TO_CHAR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("toCharId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField IS_SELF_FIELD_DESC = new org.apache.thrift.protocol.TField("isSelf", org.apache.thrift.protocol.TType.BOOL, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCSaveRelationshipResultMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCSaveRelationshipResultMsgTupleSchemeFactory());
  }

  /**
   * 新关系昵称
   */
  public String newNickName; // required
  public long toCharId; // required
  public boolean isSelf; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 新关系昵称
     */
    NEW_NICK_NAME((short)1, "newNickName"),
    TO_CHAR_ID((short)2, "toCharId"),
    IS_SELF((short)3, "isSelf");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NEW_NICK_NAME
          return NEW_NICK_NAME;
        case 2: // TO_CHAR_ID
          return TO_CHAR_ID;
        case 3: // IS_SELF
          return IS_SELF;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOCHARID_ISSET_ID = 0;
  private static final int __ISSELF_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NEW_NICK_NAME, new org.apache.thrift.meta_data.FieldMetaData("newNickName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TO_CHAR_ID, new org.apache.thrift.meta_data.FieldMetaData("toCharId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IS_SELF, new org.apache.thrift.meta_data.FieldMetaData("isSelf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCSaveRelationshipResultMsg.class, metaDataMap);
  }

  public SCSaveRelationshipResultMsg() {
  }

  public SCSaveRelationshipResultMsg(
    String newNickName,
    long toCharId,
    boolean isSelf)
  {
    this();
    this.newNickName = newNickName;
    this.toCharId = toCharId;
    setToCharIdIsSet(true);
    this.isSelf = isSelf;
    setIsSelfIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCSaveRelationshipResultMsg(SCSaveRelationshipResultMsg other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetNewNickName()) {
      this.newNickName = other.newNickName;
    }
    this.toCharId = other.toCharId;
    this.isSelf = other.isSelf;
  }

  public SCSaveRelationshipResultMsg deepCopy() {
    return new SCSaveRelationshipResultMsg(this);
  }

  @Override
  public void clear() {
    this.newNickName = null;
    setToCharIdIsSet(false);
    this.toCharId = 0;
    setIsSelfIsSet(false);
    this.isSelf = false;
  }

  /**
   * 新关系昵称
   */
  public String getNewNickName() {
    return this.newNickName;
  }

  /**
   * 新关系昵称
   */
  public SCSaveRelationshipResultMsg setNewNickName(String newNickName) {
    this.newNickName = newNickName;
    return this;
  }

  public void unsetNewNickName() {
    this.newNickName = null;
  }

  /** Returns true if field newNickName is set (has been assigned a value) and false otherwise */
  public boolean isSetNewNickName() {
    return this.newNickName != null;
  }

  public void setNewNickNameIsSet(boolean value) {
    if (!value) {
      this.newNickName = null;
    }
  }

  public long getToCharId() {
    return this.toCharId;
  }

  public SCSaveRelationshipResultMsg setToCharId(long toCharId) {
    this.toCharId = toCharId;
    setToCharIdIsSet(true);
    return this;
  }

  public void unsetToCharId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOCHARID_ISSET_ID);
  }

  /** Returns true if field toCharId is set (has been assigned a value) and false otherwise */
  public boolean isSetToCharId() {
    return EncodingUtils.testBit(__isset_bitfield, __TOCHARID_ISSET_ID);
  }

  public void setToCharIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOCHARID_ISSET_ID, value);
  }

  public boolean isIsSelf() {
    return this.isSelf;
  }

  public SCSaveRelationshipResultMsg setIsSelf(boolean isSelf) {
    this.isSelf = isSelf;
    setIsSelfIsSet(true);
    return this;
  }

  public void unsetIsSelf() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISSELF_ISSET_ID);
  }

  /** Returns true if field isSelf is set (has been assigned a value) and false otherwise */
  public boolean isSetIsSelf() {
    return EncodingUtils.testBit(__isset_bitfield, __ISSELF_ISSET_ID);
  }

  public void setIsSelfIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISSELF_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NEW_NICK_NAME:
      if (value == null) {
        unsetNewNickName();
      } else {
        setNewNickName((String)value);
      }
      break;

    case TO_CHAR_ID:
      if (value == null) {
        unsetToCharId();
      } else {
        setToCharId((Long)value);
      }
      break;

    case IS_SELF:
      if (value == null) {
        unsetIsSelf();
      } else {
        setIsSelf((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NEW_NICK_NAME:
      return getNewNickName();

    case TO_CHAR_ID:
      return Long.valueOf(getToCharId());

    case IS_SELF:
      return Boolean.valueOf(isIsSelf());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NEW_NICK_NAME:
      return isSetNewNickName();
    case TO_CHAR_ID:
      return isSetToCharId();
    case IS_SELF:
      return isSetIsSelf();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCSaveRelationshipResultMsg)
      return this.equals((SCSaveRelationshipResultMsg)that);
    return false;
  }

  public boolean equals(SCSaveRelationshipResultMsg that) {
    if (that == null)
      return false;

    boolean this_present_newNickName = true && this.isSetNewNickName();
    boolean that_present_newNickName = true && that.isSetNewNickName();
    if (this_present_newNickName || that_present_newNickName) {
      if (!(this_present_newNickName && that_present_newNickName))
        return false;
      if (!this.newNickName.equals(that.newNickName))
        return false;
    }

    boolean this_present_toCharId = true;
    boolean that_present_toCharId = true;
    if (this_present_toCharId || that_present_toCharId) {
      if (!(this_present_toCharId && that_present_toCharId))
        return false;
      if (this.toCharId != that.toCharId)
        return false;
    }

    boolean this_present_isSelf = true;
    boolean that_present_isSelf = true;
    if (this_present_isSelf || that_present_isSelf) {
      if (!(this_present_isSelf && that_present_isSelf))
        return false;
      if (this.isSelf != that.isSelf)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCSaveRelationshipResultMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCSaveRelationshipResultMsg typedOther = (SCSaveRelationshipResultMsg)other;

    lastComparison = Boolean.valueOf(isSetNewNickName()).compareTo(typedOther.isSetNewNickName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewNickName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newNickName, typedOther.newNickName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToCharId()).compareTo(typedOther.isSetToCharId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToCharId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toCharId, typedOther.toCharId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsSelf()).compareTo(typedOther.isSetIsSelf());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsSelf()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isSelf, typedOther.isSelf);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCSaveRelationshipResultMsg(");
    boolean first = true;

    sb.append("newNickName:");
    if (this.newNickName == null) {
      sb.append("null");
    } else {
      sb.append(this.newNickName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("toCharId:");
    sb.append(this.toCharId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isSelf:");
    sb.append(this.isSelf);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCSaveRelationshipResultMsgStandardSchemeFactory implements SchemeFactory {
    public SCSaveRelationshipResultMsgStandardScheme getScheme() {
      return new SCSaveRelationshipResultMsgStandardScheme();
    }
  }

  private static class SCSaveRelationshipResultMsgStandardScheme extends StandardScheme<SCSaveRelationshipResultMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCSaveRelationshipResultMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NEW_NICK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.newNickName = iprot.readString();
              struct.setNewNickNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TO_CHAR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.toCharId = iprot.readI64();
              struct.setToCharIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IS_SELF
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isSelf = iprot.readBool();
              struct.setIsSelfIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCSaveRelationshipResultMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.newNickName != null) {
        oprot.writeFieldBegin(NEW_NICK_NAME_FIELD_DESC);
        oprot.writeString(struct.newNickName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TO_CHAR_ID_FIELD_DESC);
      oprot.writeI64(struct.toCharId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_SELF_FIELD_DESC);
      oprot.writeBool(struct.isSelf);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCSaveRelationshipResultMsgTupleSchemeFactory implements SchemeFactory {
    public SCSaveRelationshipResultMsgTupleScheme getScheme() {
      return new SCSaveRelationshipResultMsgTupleScheme();
    }
  }

  private static class SCSaveRelationshipResultMsgTupleScheme extends TupleScheme<SCSaveRelationshipResultMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCSaveRelationshipResultMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetNewNickName()) {
        optionals.set(0);
      }
      if (struct.isSetToCharId()) {
        optionals.set(1);
      }
      if (struct.isSetIsSelf()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetNewNickName()) {
        oprot.writeString(struct.newNickName);
      }
      if (struct.isSetToCharId()) {
        oprot.writeI64(struct.toCharId);
      }
      if (struct.isSetIsSelf()) {
        oprot.writeBool(struct.isSelf);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCSaveRelationshipResultMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.newNickName = iprot.readString();
        struct.setNewNickNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.toCharId = iprot.readI64();
        struct.setToCharIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.isSelf = iprot.readBool();
        struct.setIsSelfIsSet(true);
      }
    }
  }

}

