/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ConmmonSignInAward implements org.apache.thrift.TBase<ConmmonSignInAward, ConmmonSignInAward._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ConmmonSignInAward");

  private static final org.apache.thrift.protocol.TField DAY_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("dayIndex", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField MALE_AWARD_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("maleAwardType", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField MALE_AWARD_ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("maleAwardItemId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField MALE_AWARD_ITEM_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("maleAwardItemAmount", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField FEMALE_AWARD_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("femaleAwardType", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField FEMALE_AWARD_ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("femaleAwardItemId", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField FEMALE_AWARD_ITEM_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("femaleAwardItemAmount", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField VIP_AWARD_FIELD_DESC = new org.apache.thrift.protocol.TField("vipAward", org.apache.thrift.protocol.TType.LIST, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ConmmonSignInAwardStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ConmmonSignInAwardTupleSchemeFactory());
  }

  public int dayIndex; // required
  public int maleAwardType; // required
  public int maleAwardItemId; // required
  public int maleAwardItemAmount; // required
  public int femaleAwardType; // required
  public int femaleAwardItemId; // required
  public int femaleAwardItemAmount; // required
  public List<VipSignAward> vipAward; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DAY_INDEX((short)1, "dayIndex"),
    MALE_AWARD_TYPE((short)2, "maleAwardType"),
    MALE_AWARD_ITEM_ID((short)3, "maleAwardItemId"),
    MALE_AWARD_ITEM_AMOUNT((short)4, "maleAwardItemAmount"),
    FEMALE_AWARD_TYPE((short)5, "femaleAwardType"),
    FEMALE_AWARD_ITEM_ID((short)6, "femaleAwardItemId"),
    FEMALE_AWARD_ITEM_AMOUNT((short)7, "femaleAwardItemAmount"),
    VIP_AWARD((short)8, "vipAward");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DAY_INDEX
          return DAY_INDEX;
        case 2: // MALE_AWARD_TYPE
          return MALE_AWARD_TYPE;
        case 3: // MALE_AWARD_ITEM_ID
          return MALE_AWARD_ITEM_ID;
        case 4: // MALE_AWARD_ITEM_AMOUNT
          return MALE_AWARD_ITEM_AMOUNT;
        case 5: // FEMALE_AWARD_TYPE
          return FEMALE_AWARD_TYPE;
        case 6: // FEMALE_AWARD_ITEM_ID
          return FEMALE_AWARD_ITEM_ID;
        case 7: // FEMALE_AWARD_ITEM_AMOUNT
          return FEMALE_AWARD_ITEM_AMOUNT;
        case 8: // VIP_AWARD
          return VIP_AWARD;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DAYINDEX_ISSET_ID = 0;
  private static final int __MALEAWARDTYPE_ISSET_ID = 1;
  private static final int __MALEAWARDITEMID_ISSET_ID = 2;
  private static final int __MALEAWARDITEMAMOUNT_ISSET_ID = 3;
  private static final int __FEMALEAWARDTYPE_ISSET_ID = 4;
  private static final int __FEMALEAWARDITEMID_ISSET_ID = 5;
  private static final int __FEMALEAWARDITEMAMOUNT_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DAY_INDEX, new org.apache.thrift.meta_data.FieldMetaData("dayIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MALE_AWARD_TYPE, new org.apache.thrift.meta_data.FieldMetaData("maleAwardType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MALE_AWARD_ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("maleAwardItemId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MALE_AWARD_ITEM_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("maleAwardItemAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FEMALE_AWARD_TYPE, new org.apache.thrift.meta_data.FieldMetaData("femaleAwardType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FEMALE_AWARD_ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("femaleAwardItemId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FEMALE_AWARD_ITEM_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("femaleAwardItemAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VIP_AWARD, new org.apache.thrift.meta_data.FieldMetaData("vipAward", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, VipSignAward.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ConmmonSignInAward.class, metaDataMap);
  }

  public ConmmonSignInAward() {
  }

  public ConmmonSignInAward(
    int dayIndex,
    int maleAwardType,
    int maleAwardItemId,
    int maleAwardItemAmount,
    int femaleAwardType,
    int femaleAwardItemId,
    int femaleAwardItemAmount,
    List<VipSignAward> vipAward)
  {
    this();
    this.dayIndex = dayIndex;
    setDayIndexIsSet(true);
    this.maleAwardType = maleAwardType;
    setMaleAwardTypeIsSet(true);
    this.maleAwardItemId = maleAwardItemId;
    setMaleAwardItemIdIsSet(true);
    this.maleAwardItemAmount = maleAwardItemAmount;
    setMaleAwardItemAmountIsSet(true);
    this.femaleAwardType = femaleAwardType;
    setFemaleAwardTypeIsSet(true);
    this.femaleAwardItemId = femaleAwardItemId;
    setFemaleAwardItemIdIsSet(true);
    this.femaleAwardItemAmount = femaleAwardItemAmount;
    setFemaleAwardItemAmountIsSet(true);
    this.vipAward = vipAward;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ConmmonSignInAward(ConmmonSignInAward other) {
    __isset_bitfield = other.__isset_bitfield;
    this.dayIndex = other.dayIndex;
    this.maleAwardType = other.maleAwardType;
    this.maleAwardItemId = other.maleAwardItemId;
    this.maleAwardItemAmount = other.maleAwardItemAmount;
    this.femaleAwardType = other.femaleAwardType;
    this.femaleAwardItemId = other.femaleAwardItemId;
    this.femaleAwardItemAmount = other.femaleAwardItemAmount;
    if (other.isSetVipAward()) {
      List<VipSignAward> __this__vipAward = new ArrayList<VipSignAward>();
      for (VipSignAward other_element : other.vipAward) {
        __this__vipAward.add(new VipSignAward(other_element));
      }
      this.vipAward = __this__vipAward;
    }
  }

  public ConmmonSignInAward deepCopy() {
    return new ConmmonSignInAward(this);
  }

  @Override
  public void clear() {
    setDayIndexIsSet(false);
    this.dayIndex = 0;
    setMaleAwardTypeIsSet(false);
    this.maleAwardType = 0;
    setMaleAwardItemIdIsSet(false);
    this.maleAwardItemId = 0;
    setMaleAwardItemAmountIsSet(false);
    this.maleAwardItemAmount = 0;
    setFemaleAwardTypeIsSet(false);
    this.femaleAwardType = 0;
    setFemaleAwardItemIdIsSet(false);
    this.femaleAwardItemId = 0;
    setFemaleAwardItemAmountIsSet(false);
    this.femaleAwardItemAmount = 0;
    this.vipAward = null;
  }

  public int getDayIndex() {
    return this.dayIndex;
  }

  public ConmmonSignInAward setDayIndex(int dayIndex) {
    this.dayIndex = dayIndex;
    setDayIndexIsSet(true);
    return this;
  }

  public void unsetDayIndex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DAYINDEX_ISSET_ID);
  }

  /** Returns true if field dayIndex is set (has been assigned a value) and false otherwise */
  public boolean isSetDayIndex() {
    return EncodingUtils.testBit(__isset_bitfield, __DAYINDEX_ISSET_ID);
  }

  public void setDayIndexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DAYINDEX_ISSET_ID, value);
  }

  public int getMaleAwardType() {
    return this.maleAwardType;
  }

  public ConmmonSignInAward setMaleAwardType(int maleAwardType) {
    this.maleAwardType = maleAwardType;
    setMaleAwardTypeIsSet(true);
    return this;
  }

  public void unsetMaleAwardType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MALEAWARDTYPE_ISSET_ID);
  }

  /** Returns true if field maleAwardType is set (has been assigned a value) and false otherwise */
  public boolean isSetMaleAwardType() {
    return EncodingUtils.testBit(__isset_bitfield, __MALEAWARDTYPE_ISSET_ID);
  }

  public void setMaleAwardTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MALEAWARDTYPE_ISSET_ID, value);
  }

  public int getMaleAwardItemId() {
    return this.maleAwardItemId;
  }

  public ConmmonSignInAward setMaleAwardItemId(int maleAwardItemId) {
    this.maleAwardItemId = maleAwardItemId;
    setMaleAwardItemIdIsSet(true);
    return this;
  }

  public void unsetMaleAwardItemId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MALEAWARDITEMID_ISSET_ID);
  }

  /** Returns true if field maleAwardItemId is set (has been assigned a value) and false otherwise */
  public boolean isSetMaleAwardItemId() {
    return EncodingUtils.testBit(__isset_bitfield, __MALEAWARDITEMID_ISSET_ID);
  }

  public void setMaleAwardItemIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MALEAWARDITEMID_ISSET_ID, value);
  }

  public int getMaleAwardItemAmount() {
    return this.maleAwardItemAmount;
  }

  public ConmmonSignInAward setMaleAwardItemAmount(int maleAwardItemAmount) {
    this.maleAwardItemAmount = maleAwardItemAmount;
    setMaleAwardItemAmountIsSet(true);
    return this;
  }

  public void unsetMaleAwardItemAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MALEAWARDITEMAMOUNT_ISSET_ID);
  }

  /** Returns true if field maleAwardItemAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetMaleAwardItemAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __MALEAWARDITEMAMOUNT_ISSET_ID);
  }

  public void setMaleAwardItemAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MALEAWARDITEMAMOUNT_ISSET_ID, value);
  }

  public int getFemaleAwardType() {
    return this.femaleAwardType;
  }

  public ConmmonSignInAward setFemaleAwardType(int femaleAwardType) {
    this.femaleAwardType = femaleAwardType;
    setFemaleAwardTypeIsSet(true);
    return this;
  }

  public void unsetFemaleAwardType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FEMALEAWARDTYPE_ISSET_ID);
  }

  /** Returns true if field femaleAwardType is set (has been assigned a value) and false otherwise */
  public boolean isSetFemaleAwardType() {
    return EncodingUtils.testBit(__isset_bitfield, __FEMALEAWARDTYPE_ISSET_ID);
  }

  public void setFemaleAwardTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FEMALEAWARDTYPE_ISSET_ID, value);
  }

  public int getFemaleAwardItemId() {
    return this.femaleAwardItemId;
  }

  public ConmmonSignInAward setFemaleAwardItemId(int femaleAwardItemId) {
    this.femaleAwardItemId = femaleAwardItemId;
    setFemaleAwardItemIdIsSet(true);
    return this;
  }

  public void unsetFemaleAwardItemId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FEMALEAWARDITEMID_ISSET_ID);
  }

  /** Returns true if field femaleAwardItemId is set (has been assigned a value) and false otherwise */
  public boolean isSetFemaleAwardItemId() {
    return EncodingUtils.testBit(__isset_bitfield, __FEMALEAWARDITEMID_ISSET_ID);
  }

  public void setFemaleAwardItemIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FEMALEAWARDITEMID_ISSET_ID, value);
  }

  public int getFemaleAwardItemAmount() {
    return this.femaleAwardItemAmount;
  }

  public ConmmonSignInAward setFemaleAwardItemAmount(int femaleAwardItemAmount) {
    this.femaleAwardItemAmount = femaleAwardItemAmount;
    setFemaleAwardItemAmountIsSet(true);
    return this;
  }

  public void unsetFemaleAwardItemAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FEMALEAWARDITEMAMOUNT_ISSET_ID);
  }

  /** Returns true if field femaleAwardItemAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetFemaleAwardItemAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __FEMALEAWARDITEMAMOUNT_ISSET_ID);
  }

  public void setFemaleAwardItemAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FEMALEAWARDITEMAMOUNT_ISSET_ID, value);
  }

  public int getVipAwardSize() {
    return (this.vipAward == null) ? 0 : this.vipAward.size();
  }

  public java.util.Iterator<VipSignAward> getVipAwardIterator() {
    return (this.vipAward == null) ? null : this.vipAward.iterator();
  }

  public void addToVipAward(VipSignAward elem) {
    if (this.vipAward == null) {
      this.vipAward = new ArrayList<VipSignAward>();
    }
    this.vipAward.add(elem);
  }

  public List<VipSignAward> getVipAward() {
    return this.vipAward;
  }

  public ConmmonSignInAward setVipAward(List<VipSignAward> vipAward) {
    this.vipAward = vipAward;
    return this;
  }

  public void unsetVipAward() {
    this.vipAward = null;
  }

  /** Returns true if field vipAward is set (has been assigned a value) and false otherwise */
  public boolean isSetVipAward() {
    return this.vipAward != null;
  }

  public void setVipAwardIsSet(boolean value) {
    if (!value) {
      this.vipAward = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DAY_INDEX:
      if (value == null) {
        unsetDayIndex();
      } else {
        setDayIndex((Integer)value);
      }
      break;

    case MALE_AWARD_TYPE:
      if (value == null) {
        unsetMaleAwardType();
      } else {
        setMaleAwardType((Integer)value);
      }
      break;

    case MALE_AWARD_ITEM_ID:
      if (value == null) {
        unsetMaleAwardItemId();
      } else {
        setMaleAwardItemId((Integer)value);
      }
      break;

    case MALE_AWARD_ITEM_AMOUNT:
      if (value == null) {
        unsetMaleAwardItemAmount();
      } else {
        setMaleAwardItemAmount((Integer)value);
      }
      break;

    case FEMALE_AWARD_TYPE:
      if (value == null) {
        unsetFemaleAwardType();
      } else {
        setFemaleAwardType((Integer)value);
      }
      break;

    case FEMALE_AWARD_ITEM_ID:
      if (value == null) {
        unsetFemaleAwardItemId();
      } else {
        setFemaleAwardItemId((Integer)value);
      }
      break;

    case FEMALE_AWARD_ITEM_AMOUNT:
      if (value == null) {
        unsetFemaleAwardItemAmount();
      } else {
        setFemaleAwardItemAmount((Integer)value);
      }
      break;

    case VIP_AWARD:
      if (value == null) {
        unsetVipAward();
      } else {
        setVipAward((List<VipSignAward>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DAY_INDEX:
      return Integer.valueOf(getDayIndex());

    case MALE_AWARD_TYPE:
      return Integer.valueOf(getMaleAwardType());

    case MALE_AWARD_ITEM_ID:
      return Integer.valueOf(getMaleAwardItemId());

    case MALE_AWARD_ITEM_AMOUNT:
      return Integer.valueOf(getMaleAwardItemAmount());

    case FEMALE_AWARD_TYPE:
      return Integer.valueOf(getFemaleAwardType());

    case FEMALE_AWARD_ITEM_ID:
      return Integer.valueOf(getFemaleAwardItemId());

    case FEMALE_AWARD_ITEM_AMOUNT:
      return Integer.valueOf(getFemaleAwardItemAmount());

    case VIP_AWARD:
      return getVipAward();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DAY_INDEX:
      return isSetDayIndex();
    case MALE_AWARD_TYPE:
      return isSetMaleAwardType();
    case MALE_AWARD_ITEM_ID:
      return isSetMaleAwardItemId();
    case MALE_AWARD_ITEM_AMOUNT:
      return isSetMaleAwardItemAmount();
    case FEMALE_AWARD_TYPE:
      return isSetFemaleAwardType();
    case FEMALE_AWARD_ITEM_ID:
      return isSetFemaleAwardItemId();
    case FEMALE_AWARD_ITEM_AMOUNT:
      return isSetFemaleAwardItemAmount();
    case VIP_AWARD:
      return isSetVipAward();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ConmmonSignInAward)
      return this.equals((ConmmonSignInAward)that);
    return false;
  }

  public boolean equals(ConmmonSignInAward that) {
    if (that == null)
      return false;

    boolean this_present_dayIndex = true;
    boolean that_present_dayIndex = true;
    if (this_present_dayIndex || that_present_dayIndex) {
      if (!(this_present_dayIndex && that_present_dayIndex))
        return false;
      if (this.dayIndex != that.dayIndex)
        return false;
    }

    boolean this_present_maleAwardType = true;
    boolean that_present_maleAwardType = true;
    if (this_present_maleAwardType || that_present_maleAwardType) {
      if (!(this_present_maleAwardType && that_present_maleAwardType))
        return false;
      if (this.maleAwardType != that.maleAwardType)
        return false;
    }

    boolean this_present_maleAwardItemId = true;
    boolean that_present_maleAwardItemId = true;
    if (this_present_maleAwardItemId || that_present_maleAwardItemId) {
      if (!(this_present_maleAwardItemId && that_present_maleAwardItemId))
        return false;
      if (this.maleAwardItemId != that.maleAwardItemId)
        return false;
    }

    boolean this_present_maleAwardItemAmount = true;
    boolean that_present_maleAwardItemAmount = true;
    if (this_present_maleAwardItemAmount || that_present_maleAwardItemAmount) {
      if (!(this_present_maleAwardItemAmount && that_present_maleAwardItemAmount))
        return false;
      if (this.maleAwardItemAmount != that.maleAwardItemAmount)
        return false;
    }

    boolean this_present_femaleAwardType = true;
    boolean that_present_femaleAwardType = true;
    if (this_present_femaleAwardType || that_present_femaleAwardType) {
      if (!(this_present_femaleAwardType && that_present_femaleAwardType))
        return false;
      if (this.femaleAwardType != that.femaleAwardType)
        return false;
    }

    boolean this_present_femaleAwardItemId = true;
    boolean that_present_femaleAwardItemId = true;
    if (this_present_femaleAwardItemId || that_present_femaleAwardItemId) {
      if (!(this_present_femaleAwardItemId && that_present_femaleAwardItemId))
        return false;
      if (this.femaleAwardItemId != that.femaleAwardItemId)
        return false;
    }

    boolean this_present_femaleAwardItemAmount = true;
    boolean that_present_femaleAwardItemAmount = true;
    if (this_present_femaleAwardItemAmount || that_present_femaleAwardItemAmount) {
      if (!(this_present_femaleAwardItemAmount && that_present_femaleAwardItemAmount))
        return false;
      if (this.femaleAwardItemAmount != that.femaleAwardItemAmount)
        return false;
    }

    boolean this_present_vipAward = true && this.isSetVipAward();
    boolean that_present_vipAward = true && that.isSetVipAward();
    if (this_present_vipAward || that_present_vipAward) {
      if (!(this_present_vipAward && that_present_vipAward))
        return false;
      if (!this.vipAward.equals(that.vipAward))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ConmmonSignInAward other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ConmmonSignInAward typedOther = (ConmmonSignInAward)other;

    lastComparison = Boolean.valueOf(isSetDayIndex()).compareTo(typedOther.isSetDayIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDayIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dayIndex, typedOther.dayIndex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaleAwardType()).compareTo(typedOther.isSetMaleAwardType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaleAwardType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maleAwardType, typedOther.maleAwardType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaleAwardItemId()).compareTo(typedOther.isSetMaleAwardItemId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaleAwardItemId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maleAwardItemId, typedOther.maleAwardItemId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaleAwardItemAmount()).compareTo(typedOther.isSetMaleAwardItemAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaleAwardItemAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maleAwardItemAmount, typedOther.maleAwardItemAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFemaleAwardType()).compareTo(typedOther.isSetFemaleAwardType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFemaleAwardType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.femaleAwardType, typedOther.femaleAwardType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFemaleAwardItemId()).compareTo(typedOther.isSetFemaleAwardItemId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFemaleAwardItemId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.femaleAwardItemId, typedOther.femaleAwardItemId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFemaleAwardItemAmount()).compareTo(typedOther.isSetFemaleAwardItemAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFemaleAwardItemAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.femaleAwardItemAmount, typedOther.femaleAwardItemAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVipAward()).compareTo(typedOther.isSetVipAward());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVipAward()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vipAward, typedOther.vipAward);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ConmmonSignInAward(");
    boolean first = true;

    sb.append("dayIndex:");
    sb.append(this.dayIndex);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maleAwardType:");
    sb.append(this.maleAwardType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maleAwardItemId:");
    sb.append(this.maleAwardItemId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maleAwardItemAmount:");
    sb.append(this.maleAwardItemAmount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("femaleAwardType:");
    sb.append(this.femaleAwardType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("femaleAwardItemId:");
    sb.append(this.femaleAwardItemId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("femaleAwardItemAmount:");
    sb.append(this.femaleAwardItemAmount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vipAward:");
    if (this.vipAward == null) {
      sb.append("null");
    } else {
      sb.append(this.vipAward);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ConmmonSignInAwardStandardSchemeFactory implements SchemeFactory {
    public ConmmonSignInAwardStandardScheme getScheme() {
      return new ConmmonSignInAwardStandardScheme();
    }
  }

  private static class ConmmonSignInAwardStandardScheme extends StandardScheme<ConmmonSignInAward> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ConmmonSignInAward struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DAY_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dayIndex = iprot.readI32();
              struct.setDayIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MALE_AWARD_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maleAwardType = iprot.readI32();
              struct.setMaleAwardTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MALE_AWARD_ITEM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maleAwardItemId = iprot.readI32();
              struct.setMaleAwardItemIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MALE_AWARD_ITEM_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maleAwardItemAmount = iprot.readI32();
              struct.setMaleAwardItemAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FEMALE_AWARD_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.femaleAwardType = iprot.readI32();
              struct.setFemaleAwardTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FEMALE_AWARD_ITEM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.femaleAwardItemId = iprot.readI32();
              struct.setFemaleAwardItemIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FEMALE_AWARD_ITEM_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.femaleAwardItemAmount = iprot.readI32();
              struct.setFemaleAwardItemAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // VIP_AWARD
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.vipAward = new ArrayList<VipSignAward>(_list16.size);
                for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                {
                  VipSignAward _elem18; // required
                  _elem18 = new VipSignAward();
                  _elem18.read(iprot);
                  struct.vipAward.add(_elem18);
                }
                iprot.readListEnd();
              }
              struct.setVipAwardIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ConmmonSignInAward struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(DAY_INDEX_FIELD_DESC);
      oprot.writeI32(struct.dayIndex);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MALE_AWARD_TYPE_FIELD_DESC);
      oprot.writeI32(struct.maleAwardType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MALE_AWARD_ITEM_ID_FIELD_DESC);
      oprot.writeI32(struct.maleAwardItemId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MALE_AWARD_ITEM_AMOUNT_FIELD_DESC);
      oprot.writeI32(struct.maleAwardItemAmount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FEMALE_AWARD_TYPE_FIELD_DESC);
      oprot.writeI32(struct.femaleAwardType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FEMALE_AWARD_ITEM_ID_FIELD_DESC);
      oprot.writeI32(struct.femaleAwardItemId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FEMALE_AWARD_ITEM_AMOUNT_FIELD_DESC);
      oprot.writeI32(struct.femaleAwardItemAmount);
      oprot.writeFieldEnd();
      if (struct.vipAward != null) {
        oprot.writeFieldBegin(VIP_AWARD_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.vipAward.size()));
          for (VipSignAward _iter19 : struct.vipAward)
          {
            _iter19.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ConmmonSignInAwardTupleSchemeFactory implements SchemeFactory {
    public ConmmonSignInAwardTupleScheme getScheme() {
      return new ConmmonSignInAwardTupleScheme();
    }
  }

  private static class ConmmonSignInAwardTupleScheme extends TupleScheme<ConmmonSignInAward> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ConmmonSignInAward struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDayIndex()) {
        optionals.set(0);
      }
      if (struct.isSetMaleAwardType()) {
        optionals.set(1);
      }
      if (struct.isSetMaleAwardItemId()) {
        optionals.set(2);
      }
      if (struct.isSetMaleAwardItemAmount()) {
        optionals.set(3);
      }
      if (struct.isSetFemaleAwardType()) {
        optionals.set(4);
      }
      if (struct.isSetFemaleAwardItemId()) {
        optionals.set(5);
      }
      if (struct.isSetFemaleAwardItemAmount()) {
        optionals.set(6);
      }
      if (struct.isSetVipAward()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetDayIndex()) {
        oprot.writeI32(struct.dayIndex);
      }
      if (struct.isSetMaleAwardType()) {
        oprot.writeI32(struct.maleAwardType);
      }
      if (struct.isSetMaleAwardItemId()) {
        oprot.writeI32(struct.maleAwardItemId);
      }
      if (struct.isSetMaleAwardItemAmount()) {
        oprot.writeI32(struct.maleAwardItemAmount);
      }
      if (struct.isSetFemaleAwardType()) {
        oprot.writeI32(struct.femaleAwardType);
      }
      if (struct.isSetFemaleAwardItemId()) {
        oprot.writeI32(struct.femaleAwardItemId);
      }
      if (struct.isSetFemaleAwardItemAmount()) {
        oprot.writeI32(struct.femaleAwardItemAmount);
      }
      if (struct.isSetVipAward()) {
        {
          oprot.writeI32(struct.vipAward.size());
          for (VipSignAward _iter20 : struct.vipAward)
          {
            _iter20.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ConmmonSignInAward struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.dayIndex = iprot.readI32();
        struct.setDayIndexIsSet(true);
      }
      if (incoming.get(1)) {
        struct.maleAwardType = iprot.readI32();
        struct.setMaleAwardTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.maleAwardItemId = iprot.readI32();
        struct.setMaleAwardItemIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.maleAwardItemAmount = iprot.readI32();
        struct.setMaleAwardItemAmountIsSet(true);
      }
      if (incoming.get(4)) {
        struct.femaleAwardType = iprot.readI32();
        struct.setFemaleAwardTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.femaleAwardItemId = iprot.readI32();
        struct.setFemaleAwardItemIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.femaleAwardItemAmount = iprot.readI32();
        struct.setFemaleAwardItemAmountIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.vipAward = new ArrayList<VipSignAward>(_list21.size);
          for (int _i22 = 0; _i22 < _list21.size; ++_i22)
          {
            VipSignAward _elem23; // required
            _elem23 = new VipSignAward();
            _elem23.read(iprot);
            struct.vipAward.add(_elem23);
          }
        }
        struct.setVipAwardIsSet(true);
      }
    }
  }

}

