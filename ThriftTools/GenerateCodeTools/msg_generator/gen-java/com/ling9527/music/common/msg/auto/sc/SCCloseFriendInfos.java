/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 所有密友信息， 只发第一个密友详细信息
 */
public class SCCloseFriendInfos implements org.apache.thrift.TBase<SCCloseFriendInfos, SCCloseFriendInfos._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCCloseFriendInfos");

  private static final org.apache.thrift.protocol.TField CHAR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("charId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField CLOSE_FRIEND_BASE_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("closeFriendBaseInfos", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField FIRST_CLOSE_FRIEND_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("firstCloseFriendInfo", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCCloseFriendInfosStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCCloseFriendInfosTupleSchemeFactory());
  }

  /**
   * 密友信息所属的角色id
   */
  public long charId; // required
  public List<com.ling9527.music.common.msg.auto.PlayerBaseInfo> closeFriendBaseInfos; // optional
  /**
   * 第一个密友信息
   */
  public com.ling9527.music.common.msg.auto.CloseFriendInfo firstCloseFriendInfo; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 密友信息所属的角色id
     */
    CHAR_ID((short)1, "charId"),
    CLOSE_FRIEND_BASE_INFOS((short)2, "closeFriendBaseInfos"),
    /**
     * 第一个密友信息
     */
    FIRST_CLOSE_FRIEND_INFO((short)3, "firstCloseFriendInfo");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CHAR_ID
          return CHAR_ID;
        case 2: // CLOSE_FRIEND_BASE_INFOS
          return CLOSE_FRIEND_BASE_INFOS;
        case 3: // FIRST_CLOSE_FRIEND_INFO
          return FIRST_CLOSE_FRIEND_INFO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CHARID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.CLOSE_FRIEND_BASE_INFOS,_Fields.FIRST_CLOSE_FRIEND_INFO};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CHAR_ID, new org.apache.thrift.meta_data.FieldMetaData("charId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CLOSE_FRIEND_BASE_INFOS, new org.apache.thrift.meta_data.FieldMetaData("closeFriendBaseInfos", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.PlayerBaseInfo.class))));
    tmpMap.put(_Fields.FIRST_CLOSE_FRIEND_INFO, new org.apache.thrift.meta_data.FieldMetaData("firstCloseFriendInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.CloseFriendInfo.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCCloseFriendInfos.class, metaDataMap);
  }

  public SCCloseFriendInfos() {
  }

  public SCCloseFriendInfos(
    long charId)
  {
    this();
    this.charId = charId;
    setCharIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCCloseFriendInfos(SCCloseFriendInfos other) {
    __isset_bitfield = other.__isset_bitfield;
    this.charId = other.charId;
    if (other.isSetCloseFriendBaseInfos()) {
      List<com.ling9527.music.common.msg.auto.PlayerBaseInfo> __this__closeFriendBaseInfos = new ArrayList<com.ling9527.music.common.msg.auto.PlayerBaseInfo>();
      for (com.ling9527.music.common.msg.auto.PlayerBaseInfo other_element : other.closeFriendBaseInfos) {
        __this__closeFriendBaseInfos.add(new com.ling9527.music.common.msg.auto.PlayerBaseInfo(other_element));
      }
      this.closeFriendBaseInfos = __this__closeFriendBaseInfos;
    }
    if (other.isSetFirstCloseFriendInfo()) {
      this.firstCloseFriendInfo = new com.ling9527.music.common.msg.auto.CloseFriendInfo(other.firstCloseFriendInfo);
    }
  }

  public SCCloseFriendInfos deepCopy() {
    return new SCCloseFriendInfos(this);
  }

  @Override
  public void clear() {
    setCharIdIsSet(false);
    this.charId = 0;
    this.closeFriendBaseInfos = null;
    this.firstCloseFriendInfo = null;
  }

  /**
   * 密友信息所属的角色id
   */
  public long getCharId() {
    return this.charId;
  }

  /**
   * 密友信息所属的角色id
   */
  public SCCloseFriendInfos setCharId(long charId) {
    this.charId = charId;
    setCharIdIsSet(true);
    return this;
  }

  public void unsetCharId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHARID_ISSET_ID);
  }

  /** Returns true if field charId is set (has been assigned a value) and false otherwise */
  public boolean isSetCharId() {
    return EncodingUtils.testBit(__isset_bitfield, __CHARID_ISSET_ID);
  }

  public void setCharIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHARID_ISSET_ID, value);
  }

  public int getCloseFriendBaseInfosSize() {
    return (this.closeFriendBaseInfos == null) ? 0 : this.closeFriendBaseInfos.size();
  }

  public java.util.Iterator<com.ling9527.music.common.msg.auto.PlayerBaseInfo> getCloseFriendBaseInfosIterator() {
    return (this.closeFriendBaseInfos == null) ? null : this.closeFriendBaseInfos.iterator();
  }

  public void addToCloseFriendBaseInfos(com.ling9527.music.common.msg.auto.PlayerBaseInfo elem) {
    if (this.closeFriendBaseInfos == null) {
      this.closeFriendBaseInfos = new ArrayList<com.ling9527.music.common.msg.auto.PlayerBaseInfo>();
    }
    this.closeFriendBaseInfos.add(elem);
  }

  public List<com.ling9527.music.common.msg.auto.PlayerBaseInfo> getCloseFriendBaseInfos() {
    return this.closeFriendBaseInfos;
  }

  public SCCloseFriendInfos setCloseFriendBaseInfos(List<com.ling9527.music.common.msg.auto.PlayerBaseInfo> closeFriendBaseInfos) {
    this.closeFriendBaseInfos = closeFriendBaseInfos;
    return this;
  }

  public void unsetCloseFriendBaseInfos() {
    this.closeFriendBaseInfos = null;
  }

  /** Returns true if field closeFriendBaseInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetCloseFriendBaseInfos() {
    return this.closeFriendBaseInfos != null;
  }

  public void setCloseFriendBaseInfosIsSet(boolean value) {
    if (!value) {
      this.closeFriendBaseInfos = null;
    }
  }

  /**
   * 第一个密友信息
   */
  public com.ling9527.music.common.msg.auto.CloseFriendInfo getFirstCloseFriendInfo() {
    return this.firstCloseFriendInfo;
  }

  /**
   * 第一个密友信息
   */
  public SCCloseFriendInfos setFirstCloseFriendInfo(com.ling9527.music.common.msg.auto.CloseFriendInfo firstCloseFriendInfo) {
    this.firstCloseFriendInfo = firstCloseFriendInfo;
    return this;
  }

  public void unsetFirstCloseFriendInfo() {
    this.firstCloseFriendInfo = null;
  }

  /** Returns true if field firstCloseFriendInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetFirstCloseFriendInfo() {
    return this.firstCloseFriendInfo != null;
  }

  public void setFirstCloseFriendInfoIsSet(boolean value) {
    if (!value) {
      this.firstCloseFriendInfo = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CHAR_ID:
      if (value == null) {
        unsetCharId();
      } else {
        setCharId((Long)value);
      }
      break;

    case CLOSE_FRIEND_BASE_INFOS:
      if (value == null) {
        unsetCloseFriendBaseInfos();
      } else {
        setCloseFriendBaseInfos((List<com.ling9527.music.common.msg.auto.PlayerBaseInfo>)value);
      }
      break;

    case FIRST_CLOSE_FRIEND_INFO:
      if (value == null) {
        unsetFirstCloseFriendInfo();
      } else {
        setFirstCloseFriendInfo((com.ling9527.music.common.msg.auto.CloseFriendInfo)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CHAR_ID:
      return Long.valueOf(getCharId());

    case CLOSE_FRIEND_BASE_INFOS:
      return getCloseFriendBaseInfos();

    case FIRST_CLOSE_FRIEND_INFO:
      return getFirstCloseFriendInfo();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CHAR_ID:
      return isSetCharId();
    case CLOSE_FRIEND_BASE_INFOS:
      return isSetCloseFriendBaseInfos();
    case FIRST_CLOSE_FRIEND_INFO:
      return isSetFirstCloseFriendInfo();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCCloseFriendInfos)
      return this.equals((SCCloseFriendInfos)that);
    return false;
  }

  public boolean equals(SCCloseFriendInfos that) {
    if (that == null)
      return false;

    boolean this_present_charId = true;
    boolean that_present_charId = true;
    if (this_present_charId || that_present_charId) {
      if (!(this_present_charId && that_present_charId))
        return false;
      if (this.charId != that.charId)
        return false;
    }

    boolean this_present_closeFriendBaseInfos = true && this.isSetCloseFriendBaseInfos();
    boolean that_present_closeFriendBaseInfos = true && that.isSetCloseFriendBaseInfos();
    if (this_present_closeFriendBaseInfos || that_present_closeFriendBaseInfos) {
      if (!(this_present_closeFriendBaseInfos && that_present_closeFriendBaseInfos))
        return false;
      if (!this.closeFriendBaseInfos.equals(that.closeFriendBaseInfos))
        return false;
    }

    boolean this_present_firstCloseFriendInfo = true && this.isSetFirstCloseFriendInfo();
    boolean that_present_firstCloseFriendInfo = true && that.isSetFirstCloseFriendInfo();
    if (this_present_firstCloseFriendInfo || that_present_firstCloseFriendInfo) {
      if (!(this_present_firstCloseFriendInfo && that_present_firstCloseFriendInfo))
        return false;
      if (!this.firstCloseFriendInfo.equals(that.firstCloseFriendInfo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCCloseFriendInfos other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCCloseFriendInfos typedOther = (SCCloseFriendInfos)other;

    lastComparison = Boolean.valueOf(isSetCharId()).compareTo(typedOther.isSetCharId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCharId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.charId, typedOther.charId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCloseFriendBaseInfos()).compareTo(typedOther.isSetCloseFriendBaseInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCloseFriendBaseInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.closeFriendBaseInfos, typedOther.closeFriendBaseInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFirstCloseFriendInfo()).compareTo(typedOther.isSetFirstCloseFriendInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFirstCloseFriendInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firstCloseFriendInfo, typedOther.firstCloseFriendInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCCloseFriendInfos(");
    boolean first = true;

    sb.append("charId:");
    sb.append(this.charId);
    first = false;
    if (isSetCloseFriendBaseInfos()) {
      if (!first) sb.append(", ");
      sb.append("closeFriendBaseInfos:");
      if (this.closeFriendBaseInfos == null) {
        sb.append("null");
      } else {
        sb.append(this.closeFriendBaseInfos);
      }
      first = false;
    }
    if (isSetFirstCloseFriendInfo()) {
      if (!first) sb.append(", ");
      sb.append("firstCloseFriendInfo:");
      if (this.firstCloseFriendInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.firstCloseFriendInfo);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (firstCloseFriendInfo != null) {
      firstCloseFriendInfo.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCCloseFriendInfosStandardSchemeFactory implements SchemeFactory {
    public SCCloseFriendInfosStandardScheme getScheme() {
      return new SCCloseFriendInfosStandardScheme();
    }
  }

  private static class SCCloseFriendInfosStandardScheme extends StandardScheme<SCCloseFriendInfos> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCCloseFriendInfos struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CHAR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.charId = iprot.readI64();
              struct.setCharIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CLOSE_FRIEND_BASE_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                struct.closeFriendBaseInfos = new ArrayList<com.ling9527.music.common.msg.auto.PlayerBaseInfo>(_list40.size);
                for (int _i41 = 0; _i41 < _list40.size; ++_i41)
                {
                  com.ling9527.music.common.msg.auto.PlayerBaseInfo _elem42; // required
                  _elem42 = new com.ling9527.music.common.msg.auto.PlayerBaseInfo();
                  _elem42.read(iprot);
                  struct.closeFriendBaseInfos.add(_elem42);
                }
                iprot.readListEnd();
              }
              struct.setCloseFriendBaseInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FIRST_CLOSE_FRIEND_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.firstCloseFriendInfo = new com.ling9527.music.common.msg.auto.CloseFriendInfo();
              struct.firstCloseFriendInfo.read(iprot);
              struct.setFirstCloseFriendInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCCloseFriendInfos struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CHAR_ID_FIELD_DESC);
      oprot.writeI64(struct.charId);
      oprot.writeFieldEnd();
      if (struct.closeFriendBaseInfos != null) {
        if (struct.isSetCloseFriendBaseInfos()) {
          oprot.writeFieldBegin(CLOSE_FRIEND_BASE_INFOS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.closeFriendBaseInfos.size()));
            for (com.ling9527.music.common.msg.auto.PlayerBaseInfo _iter43 : struct.closeFriendBaseInfos)
            {
              _iter43.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.firstCloseFriendInfo != null) {
        if (struct.isSetFirstCloseFriendInfo()) {
          oprot.writeFieldBegin(FIRST_CLOSE_FRIEND_INFO_FIELD_DESC);
          struct.firstCloseFriendInfo.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCCloseFriendInfosTupleSchemeFactory implements SchemeFactory {
    public SCCloseFriendInfosTupleScheme getScheme() {
      return new SCCloseFriendInfosTupleScheme();
    }
  }

  private static class SCCloseFriendInfosTupleScheme extends TupleScheme<SCCloseFriendInfos> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCCloseFriendInfos struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCharId()) {
        optionals.set(0);
      }
      if (struct.isSetCloseFriendBaseInfos()) {
        optionals.set(1);
      }
      if (struct.isSetFirstCloseFriendInfo()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetCharId()) {
        oprot.writeI64(struct.charId);
      }
      if (struct.isSetCloseFriendBaseInfos()) {
        {
          oprot.writeI32(struct.closeFriendBaseInfos.size());
          for (com.ling9527.music.common.msg.auto.PlayerBaseInfo _iter44 : struct.closeFriendBaseInfos)
          {
            _iter44.write(oprot);
          }
        }
      }
      if (struct.isSetFirstCloseFriendInfo()) {
        struct.firstCloseFriendInfo.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCCloseFriendInfos struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.charId = iprot.readI64();
        struct.setCharIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.closeFriendBaseInfos = new ArrayList<com.ling9527.music.common.msg.auto.PlayerBaseInfo>(_list45.size);
          for (int _i46 = 0; _i46 < _list45.size; ++_i46)
          {
            com.ling9527.music.common.msg.auto.PlayerBaseInfo _elem47; // required
            _elem47 = new com.ling9527.music.common.msg.auto.PlayerBaseInfo();
            _elem47.read(iprot);
            struct.closeFriendBaseInfos.add(_elem47);
          }
        }
        struct.setCloseFriendBaseInfosIsSet(true);
      }
      if (incoming.get(2)) {
        struct.firstCloseFriendInfo = new com.ling9527.music.common.msg.auto.CloseFriendInfo();
        struct.firstCloseFriendInfo.read(iprot);
        struct.setFirstCloseFriendInfoIsSet(true);
      }
    }
  }

}

