/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 巡演章节信息
 */
public class SCTourChapterInfoMsg implements org.apache.thrift.TBase<SCTourChapterInfoMsg, SCTourChapterInfoMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCTourChapterInfoMsg");

  private static final org.apache.thrift.protocol.TField CHAPTER_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("chapterInfos", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField CUR_CHAPTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("curChapterId", org.apache.thrift.protocol.TType.I16, (short)2);
  private static final org.apache.thrift.protocol.TField LEFT_TOUR_TIMES_FIELD_DESC = new org.apache.thrift.protocol.TField("leftTourTimes", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField DAY_BUY_TIMES_FIELD_DESC = new org.apache.thrift.protocol.TField("dayBuyTimes", org.apache.thrift.protocol.TType.I16, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCTourChapterInfoMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCTourChapterInfoMsgTupleSchemeFactory());
  }

  /**
   * 章节信息
   */
  public List<TourChapterInfo> chapterInfos; // required
  /**
   * 当前章节id
   */
  public short curChapterId; // required
  /**
   * 剩余巡演次数
   */
  public int leftTourTimes; // required
  /**
   * 今日已购买次数
   */
  public short dayBuyTimes; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 章节信息
     */
    CHAPTER_INFOS((short)1, "chapterInfos"),
    /**
     * 当前章节id
     */
    CUR_CHAPTER_ID((short)2, "curChapterId"),
    /**
     * 剩余巡演次数
     */
    LEFT_TOUR_TIMES((short)3, "leftTourTimes"),
    /**
     * 今日已购买次数
     */
    DAY_BUY_TIMES((short)4, "dayBuyTimes");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CHAPTER_INFOS
          return CHAPTER_INFOS;
        case 2: // CUR_CHAPTER_ID
          return CUR_CHAPTER_ID;
        case 3: // LEFT_TOUR_TIMES
          return LEFT_TOUR_TIMES;
        case 4: // DAY_BUY_TIMES
          return DAY_BUY_TIMES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CURCHAPTERID_ISSET_ID = 0;
  private static final int __LEFTTOURTIMES_ISSET_ID = 1;
  private static final int __DAYBUYTIMES_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CHAPTER_INFOS, new org.apache.thrift.meta_data.FieldMetaData("chapterInfos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TourChapterInfo.class))));
    tmpMap.put(_Fields.CUR_CHAPTER_ID, new org.apache.thrift.meta_data.FieldMetaData("curChapterId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.LEFT_TOUR_TIMES, new org.apache.thrift.meta_data.FieldMetaData("leftTourTimes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DAY_BUY_TIMES, new org.apache.thrift.meta_data.FieldMetaData("dayBuyTimes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCTourChapterInfoMsg.class, metaDataMap);
  }

  public SCTourChapterInfoMsg() {
  }

  public SCTourChapterInfoMsg(
    List<TourChapterInfo> chapterInfos,
    short curChapterId,
    int leftTourTimes,
    short dayBuyTimes)
  {
    this();
    this.chapterInfos = chapterInfos;
    this.curChapterId = curChapterId;
    setCurChapterIdIsSet(true);
    this.leftTourTimes = leftTourTimes;
    setLeftTourTimesIsSet(true);
    this.dayBuyTimes = dayBuyTimes;
    setDayBuyTimesIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCTourChapterInfoMsg(SCTourChapterInfoMsg other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetChapterInfos()) {
      List<TourChapterInfo> __this__chapterInfos = new ArrayList<TourChapterInfo>();
      for (TourChapterInfo other_element : other.chapterInfos) {
        __this__chapterInfos.add(new TourChapterInfo(other_element));
      }
      this.chapterInfos = __this__chapterInfos;
    }
    this.curChapterId = other.curChapterId;
    this.leftTourTimes = other.leftTourTimes;
    this.dayBuyTimes = other.dayBuyTimes;
  }

  public SCTourChapterInfoMsg deepCopy() {
    return new SCTourChapterInfoMsg(this);
  }

  @Override
  public void clear() {
    this.chapterInfos = null;
    setCurChapterIdIsSet(false);
    this.curChapterId = 0;
    setLeftTourTimesIsSet(false);
    this.leftTourTimes = 0;
    setDayBuyTimesIsSet(false);
    this.dayBuyTimes = 0;
  }

  public int getChapterInfosSize() {
    return (this.chapterInfos == null) ? 0 : this.chapterInfos.size();
  }

  public java.util.Iterator<TourChapterInfo> getChapterInfosIterator() {
    return (this.chapterInfos == null) ? null : this.chapterInfos.iterator();
  }

  public void addToChapterInfos(TourChapterInfo elem) {
    if (this.chapterInfos == null) {
      this.chapterInfos = new ArrayList<TourChapterInfo>();
    }
    this.chapterInfos.add(elem);
  }

  /**
   * 章节信息
   */
  public List<TourChapterInfo> getChapterInfos() {
    return this.chapterInfos;
  }

  /**
   * 章节信息
   */
  public SCTourChapterInfoMsg setChapterInfos(List<TourChapterInfo> chapterInfos) {
    this.chapterInfos = chapterInfos;
    return this;
  }

  public void unsetChapterInfos() {
    this.chapterInfos = null;
  }

  /** Returns true if field chapterInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetChapterInfos() {
    return this.chapterInfos != null;
  }

  public void setChapterInfosIsSet(boolean value) {
    if (!value) {
      this.chapterInfos = null;
    }
  }

  /**
   * 当前章节id
   */
  public short getCurChapterId() {
    return this.curChapterId;
  }

  /**
   * 当前章节id
   */
  public SCTourChapterInfoMsg setCurChapterId(short curChapterId) {
    this.curChapterId = curChapterId;
    setCurChapterIdIsSet(true);
    return this;
  }

  public void unsetCurChapterId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURCHAPTERID_ISSET_ID);
  }

  /** Returns true if field curChapterId is set (has been assigned a value) and false otherwise */
  public boolean isSetCurChapterId() {
    return EncodingUtils.testBit(__isset_bitfield, __CURCHAPTERID_ISSET_ID);
  }

  public void setCurChapterIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURCHAPTERID_ISSET_ID, value);
  }

  /**
   * 剩余巡演次数
   */
  public int getLeftTourTimes() {
    return this.leftTourTimes;
  }

  /**
   * 剩余巡演次数
   */
  public SCTourChapterInfoMsg setLeftTourTimes(int leftTourTimes) {
    this.leftTourTimes = leftTourTimes;
    setLeftTourTimesIsSet(true);
    return this;
  }

  public void unsetLeftTourTimes() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEFTTOURTIMES_ISSET_ID);
  }

  /** Returns true if field leftTourTimes is set (has been assigned a value) and false otherwise */
  public boolean isSetLeftTourTimes() {
    return EncodingUtils.testBit(__isset_bitfield, __LEFTTOURTIMES_ISSET_ID);
  }

  public void setLeftTourTimesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEFTTOURTIMES_ISSET_ID, value);
  }

  /**
   * 今日已购买次数
   */
  public short getDayBuyTimes() {
    return this.dayBuyTimes;
  }

  /**
   * 今日已购买次数
   */
  public SCTourChapterInfoMsg setDayBuyTimes(short dayBuyTimes) {
    this.dayBuyTimes = dayBuyTimes;
    setDayBuyTimesIsSet(true);
    return this;
  }

  public void unsetDayBuyTimes() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DAYBUYTIMES_ISSET_ID);
  }

  /** Returns true if field dayBuyTimes is set (has been assigned a value) and false otherwise */
  public boolean isSetDayBuyTimes() {
    return EncodingUtils.testBit(__isset_bitfield, __DAYBUYTIMES_ISSET_ID);
  }

  public void setDayBuyTimesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DAYBUYTIMES_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CHAPTER_INFOS:
      if (value == null) {
        unsetChapterInfos();
      } else {
        setChapterInfos((List<TourChapterInfo>)value);
      }
      break;

    case CUR_CHAPTER_ID:
      if (value == null) {
        unsetCurChapterId();
      } else {
        setCurChapterId((Short)value);
      }
      break;

    case LEFT_TOUR_TIMES:
      if (value == null) {
        unsetLeftTourTimes();
      } else {
        setLeftTourTimes((Integer)value);
      }
      break;

    case DAY_BUY_TIMES:
      if (value == null) {
        unsetDayBuyTimes();
      } else {
        setDayBuyTimes((Short)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CHAPTER_INFOS:
      return getChapterInfos();

    case CUR_CHAPTER_ID:
      return Short.valueOf(getCurChapterId());

    case LEFT_TOUR_TIMES:
      return Integer.valueOf(getLeftTourTimes());

    case DAY_BUY_TIMES:
      return Short.valueOf(getDayBuyTimes());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CHAPTER_INFOS:
      return isSetChapterInfos();
    case CUR_CHAPTER_ID:
      return isSetCurChapterId();
    case LEFT_TOUR_TIMES:
      return isSetLeftTourTimes();
    case DAY_BUY_TIMES:
      return isSetDayBuyTimes();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCTourChapterInfoMsg)
      return this.equals((SCTourChapterInfoMsg)that);
    return false;
  }

  public boolean equals(SCTourChapterInfoMsg that) {
    if (that == null)
      return false;

    boolean this_present_chapterInfos = true && this.isSetChapterInfos();
    boolean that_present_chapterInfos = true && that.isSetChapterInfos();
    if (this_present_chapterInfos || that_present_chapterInfos) {
      if (!(this_present_chapterInfos && that_present_chapterInfos))
        return false;
      if (!this.chapterInfos.equals(that.chapterInfos))
        return false;
    }

    boolean this_present_curChapterId = true;
    boolean that_present_curChapterId = true;
    if (this_present_curChapterId || that_present_curChapterId) {
      if (!(this_present_curChapterId && that_present_curChapterId))
        return false;
      if (this.curChapterId != that.curChapterId)
        return false;
    }

    boolean this_present_leftTourTimes = true;
    boolean that_present_leftTourTimes = true;
    if (this_present_leftTourTimes || that_present_leftTourTimes) {
      if (!(this_present_leftTourTimes && that_present_leftTourTimes))
        return false;
      if (this.leftTourTimes != that.leftTourTimes)
        return false;
    }

    boolean this_present_dayBuyTimes = true;
    boolean that_present_dayBuyTimes = true;
    if (this_present_dayBuyTimes || that_present_dayBuyTimes) {
      if (!(this_present_dayBuyTimes && that_present_dayBuyTimes))
        return false;
      if (this.dayBuyTimes != that.dayBuyTimes)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCTourChapterInfoMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCTourChapterInfoMsg typedOther = (SCTourChapterInfoMsg)other;

    lastComparison = Boolean.valueOf(isSetChapterInfos()).compareTo(typedOther.isSetChapterInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChapterInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chapterInfos, typedOther.chapterInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurChapterId()).compareTo(typedOther.isSetCurChapterId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurChapterId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.curChapterId, typedOther.curChapterId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLeftTourTimes()).compareTo(typedOther.isSetLeftTourTimes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeftTourTimes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leftTourTimes, typedOther.leftTourTimes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDayBuyTimes()).compareTo(typedOther.isSetDayBuyTimes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDayBuyTimes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dayBuyTimes, typedOther.dayBuyTimes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCTourChapterInfoMsg(");
    boolean first = true;

    sb.append("chapterInfos:");
    if (this.chapterInfos == null) {
      sb.append("null");
    } else {
      sb.append(this.chapterInfos);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("curChapterId:");
    sb.append(this.curChapterId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("leftTourTimes:");
    sb.append(this.leftTourTimes);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dayBuyTimes:");
    sb.append(this.dayBuyTimes);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCTourChapterInfoMsgStandardSchemeFactory implements SchemeFactory {
    public SCTourChapterInfoMsgStandardScheme getScheme() {
      return new SCTourChapterInfoMsgStandardScheme();
    }
  }

  private static class SCTourChapterInfoMsgStandardScheme extends StandardScheme<SCTourChapterInfoMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCTourChapterInfoMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CHAPTER_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.chapterInfos = new ArrayList<TourChapterInfo>(_list8.size);
                for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                {
                  TourChapterInfo _elem10; // required
                  _elem10 = new TourChapterInfo();
                  _elem10.read(iprot);
                  struct.chapterInfos.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setChapterInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CUR_CHAPTER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.curChapterId = iprot.readI16();
              struct.setCurChapterIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LEFT_TOUR_TIMES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.leftTourTimes = iprot.readI32();
              struct.setLeftTourTimesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DAY_BUY_TIMES
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.dayBuyTimes = iprot.readI16();
              struct.setDayBuyTimesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCTourChapterInfoMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.chapterInfos != null) {
        oprot.writeFieldBegin(CHAPTER_INFOS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.chapterInfos.size()));
          for (TourChapterInfo _iter11 : struct.chapterInfos)
          {
            _iter11.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CUR_CHAPTER_ID_FIELD_DESC);
      oprot.writeI16(struct.curChapterId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LEFT_TOUR_TIMES_FIELD_DESC);
      oprot.writeI32(struct.leftTourTimes);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DAY_BUY_TIMES_FIELD_DESC);
      oprot.writeI16(struct.dayBuyTimes);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCTourChapterInfoMsgTupleSchemeFactory implements SchemeFactory {
    public SCTourChapterInfoMsgTupleScheme getScheme() {
      return new SCTourChapterInfoMsgTupleScheme();
    }
  }

  private static class SCTourChapterInfoMsgTupleScheme extends TupleScheme<SCTourChapterInfoMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCTourChapterInfoMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetChapterInfos()) {
        optionals.set(0);
      }
      if (struct.isSetCurChapterId()) {
        optionals.set(1);
      }
      if (struct.isSetLeftTourTimes()) {
        optionals.set(2);
      }
      if (struct.isSetDayBuyTimes()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetChapterInfos()) {
        {
          oprot.writeI32(struct.chapterInfos.size());
          for (TourChapterInfo _iter12 : struct.chapterInfos)
          {
            _iter12.write(oprot);
          }
        }
      }
      if (struct.isSetCurChapterId()) {
        oprot.writeI16(struct.curChapterId);
      }
      if (struct.isSetLeftTourTimes()) {
        oprot.writeI32(struct.leftTourTimes);
      }
      if (struct.isSetDayBuyTimes()) {
        oprot.writeI16(struct.dayBuyTimes);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCTourChapterInfoMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.chapterInfos = new ArrayList<TourChapterInfo>(_list13.size);
          for (int _i14 = 0; _i14 < _list13.size; ++_i14)
          {
            TourChapterInfo _elem15; // required
            _elem15 = new TourChapterInfo();
            _elem15.read(iprot);
            struct.chapterInfos.add(_elem15);
          }
        }
        struct.setChapterInfosIsSet(true);
      }
      if (incoming.get(1)) {
        struct.curChapterId = iprot.readI16();
        struct.setCurChapterIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.leftTourTimes = iprot.readI32();
        struct.setLeftTourTimesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.dayBuyTimes = iprot.readI16();
        struct.setDayBuyTimesIsSet(true);
      }
    }
  }

}

