/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.cs;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 客户端在login_gate验证通过后，凭返回的gameSession到游戏服验证登录
 */
public class CSTokenLoginMsg implements org.apache.thrift.TBase<CSTokenLoginMsg, CSTokenLoginMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CSTokenLoginMsg");

  private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MAC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("macId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DEVICE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceType", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DEVICE_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceVersion", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DEVICE_PLATFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("devicePlatform", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField DEVICE_MODEL_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceModel", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField APP_CHANNEL_FIELD_DESC = new org.apache.thrift.protocol.TField("appChannel", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField CHANNEL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("channelName", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField CHANNEL_PLATFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("channelPlatform", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField CHANNEL_UDID_FIELD_DESC = new org.apache.thrift.protocol.TField("channelUdid", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField GAME_SESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("gameSession", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField IS_RECONNECT_FIELD_DESC = new org.apache.thrift.protocol.TField("isReconnect", org.apache.thrift.protocol.TType.BOOL, (short)13);
  private static final org.apache.thrift.protocol.TField GS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("gsId", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField NETWORK_ISP_FIELD_DESC = new org.apache.thrift.protocol.TField("networkIsp", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField NETWORK_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("networkType", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField DEVICE_HEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceHeight", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField DEVICE_WIDTH_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceWidth", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField ROOT_MARK_FIELD_DESC = new org.apache.thrift.protocol.TField("rootMark", org.apache.thrift.protocol.TType.I16, (short)19);
  private static final org.apache.thrift.protocol.TField SDK_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("sdkVersion", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField CPID_FIELD_DESC = new org.apache.thrift.protocol.TField("cpid", org.apache.thrift.protocol.TType.STRING, (short)21);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CSTokenLoginMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CSTokenLoginMsgTupleSchemeFactory());
  }

  /**
   * 设备uuid
   */
  public String deviceId; // required
  public String macId; // required
  public String deviceType; // required
  public String deviceVersion; // required
  /**
   * 设备平台
   */
  public String devicePlatform; // required
  /**
   * 设备型号
   */
  public String deviceModel; // required
  /**
   * 客户端版本号
   */
  public String version; // required
  /**
   * 运营渠道
   */
  public String appChannel; // required
  /**
   * 登录渠道
   */
  public String channelName; // required
  /**
   * 渠道sdk获得的平台
   */
  public String channelPlatform; // required
  /**
   * 玩家登录的移动设备号，通过UniSDK提供的接口获取
   */
  public String channelUdid; // required
  /**
   * 游戏自己维护的session
   */
  public String gameSession; // required
  /**
   * 是否断线重连
   */
  public boolean isReconnect; // optional
  /**
   * 登录的游戏服id
   */
  public String gsId; // optional
  /**
   * 网络运营商
   */
  public String networkIsp; // required
  /**
   * 网络类型
   */
  public String networkType; // required
  public int deviceHeight; // required
  public int deviceWidth; // required
  /**
   * root 越狱标记 0为非越狱(安卓root),1为越狱(安卓rootroot),2为模拟器
   */
  public short rootMark; // required
  /**
   * sdk 版本
   */
  public String sdkVersion; // required
  /**
   * cpid
   */
  public String cpid; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 设备uuid
     */
    DEVICE_ID((short)1, "deviceId"),
    MAC_ID((short)2, "macId"),
    DEVICE_TYPE((short)3, "deviceType"),
    DEVICE_VERSION((short)4, "deviceVersion"),
    /**
     * 设备平台
     */
    DEVICE_PLATFORM((short)5, "devicePlatform"),
    /**
     * 设备型号
     */
    DEVICE_MODEL((short)6, "deviceModel"),
    /**
     * 客户端版本号
     */
    VERSION((short)7, "version"),
    /**
     * 运营渠道
     */
    APP_CHANNEL((short)8, "appChannel"),
    /**
     * 登录渠道
     */
    CHANNEL_NAME((short)9, "channelName"),
    /**
     * 渠道sdk获得的平台
     */
    CHANNEL_PLATFORM((short)10, "channelPlatform"),
    /**
     * 玩家登录的移动设备号，通过UniSDK提供的接口获取
     */
    CHANNEL_UDID((short)11, "channelUdid"),
    /**
     * 游戏自己维护的session
     */
    GAME_SESSION((short)12, "gameSession"),
    /**
     * 是否断线重连
     */
    IS_RECONNECT((short)13, "isReconnect"),
    /**
     * 登录的游戏服id
     */
    GS_ID((short)14, "gsId"),
    /**
     * 网络运营商
     */
    NETWORK_ISP((short)15, "networkIsp"),
    /**
     * 网络类型
     */
    NETWORK_TYPE((short)16, "networkType"),
    DEVICE_HEIGHT((short)17, "deviceHeight"),
    DEVICE_WIDTH((short)18, "deviceWidth"),
    /**
     * root 越狱标记 0为非越狱(安卓root),1为越狱(安卓rootroot),2为模拟器
     */
    ROOT_MARK((short)19, "rootMark"),
    /**
     * sdk 版本
     */
    SDK_VERSION((short)20, "sdkVersion"),
    /**
     * cpid
     */
    CPID((short)21, "cpid");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DEVICE_ID
          return DEVICE_ID;
        case 2: // MAC_ID
          return MAC_ID;
        case 3: // DEVICE_TYPE
          return DEVICE_TYPE;
        case 4: // DEVICE_VERSION
          return DEVICE_VERSION;
        case 5: // DEVICE_PLATFORM
          return DEVICE_PLATFORM;
        case 6: // DEVICE_MODEL
          return DEVICE_MODEL;
        case 7: // VERSION
          return VERSION;
        case 8: // APP_CHANNEL
          return APP_CHANNEL;
        case 9: // CHANNEL_NAME
          return CHANNEL_NAME;
        case 10: // CHANNEL_PLATFORM
          return CHANNEL_PLATFORM;
        case 11: // CHANNEL_UDID
          return CHANNEL_UDID;
        case 12: // GAME_SESSION
          return GAME_SESSION;
        case 13: // IS_RECONNECT
          return IS_RECONNECT;
        case 14: // GS_ID
          return GS_ID;
        case 15: // NETWORK_ISP
          return NETWORK_ISP;
        case 16: // NETWORK_TYPE
          return NETWORK_TYPE;
        case 17: // DEVICE_HEIGHT
          return DEVICE_HEIGHT;
        case 18: // DEVICE_WIDTH
          return DEVICE_WIDTH;
        case 19: // ROOT_MARK
          return ROOT_MARK;
        case 20: // SDK_VERSION
          return SDK_VERSION;
        case 21: // CPID
          return CPID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISRECONNECT_ISSET_ID = 0;
  private static final int __DEVICEHEIGHT_ISSET_ID = 1;
  private static final int __DEVICEWIDTH_ISSET_ID = 2;
  private static final int __ROOTMARK_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.IS_RECONNECT,_Fields.GS_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAC_ID, new org.apache.thrift.meta_data.FieldMetaData("macId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEVICE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("deviceType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEVICE_VERSION, new org.apache.thrift.meta_data.FieldMetaData("deviceVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEVICE_PLATFORM, new org.apache.thrift.meta_data.FieldMetaData("devicePlatform", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEVICE_MODEL, new org.apache.thrift.meta_data.FieldMetaData("deviceModel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APP_CHANNEL, new org.apache.thrift.meta_data.FieldMetaData("appChannel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHANNEL_NAME, new org.apache.thrift.meta_data.FieldMetaData("channelName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHANNEL_PLATFORM, new org.apache.thrift.meta_data.FieldMetaData("channelPlatform", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHANNEL_UDID, new org.apache.thrift.meta_data.FieldMetaData("channelUdid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GAME_SESSION, new org.apache.thrift.meta_data.FieldMetaData("gameSession", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_RECONNECT, new org.apache.thrift.meta_data.FieldMetaData("isReconnect", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.GS_ID, new org.apache.thrift.meta_data.FieldMetaData("gsId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NETWORK_ISP, new org.apache.thrift.meta_data.FieldMetaData("networkIsp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NETWORK_TYPE, new org.apache.thrift.meta_data.FieldMetaData("networkType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEVICE_HEIGHT, new org.apache.thrift.meta_data.FieldMetaData("deviceHeight", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEVICE_WIDTH, new org.apache.thrift.meta_data.FieldMetaData("deviceWidth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROOT_MARK, new org.apache.thrift.meta_data.FieldMetaData("rootMark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.SDK_VERSION, new org.apache.thrift.meta_data.FieldMetaData("sdkVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CPID, new org.apache.thrift.meta_data.FieldMetaData("cpid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CSTokenLoginMsg.class, metaDataMap);
  }

  public CSTokenLoginMsg() {
  }

  public CSTokenLoginMsg(
    String deviceId,
    String macId,
    String deviceType,
    String deviceVersion,
    String devicePlatform,
    String deviceModel,
    String version,
    String appChannel,
    String channelName,
    String channelPlatform,
    String channelUdid,
    String gameSession,
    String networkIsp,
    String networkType,
    int deviceHeight,
    int deviceWidth,
    short rootMark,
    String sdkVersion,
    String cpid)
  {
    this();
    this.deviceId = deviceId;
    this.macId = macId;
    this.deviceType = deviceType;
    this.deviceVersion = deviceVersion;
    this.devicePlatform = devicePlatform;
    this.deviceModel = deviceModel;
    this.version = version;
    this.appChannel = appChannel;
    this.channelName = channelName;
    this.channelPlatform = channelPlatform;
    this.channelUdid = channelUdid;
    this.gameSession = gameSession;
    this.networkIsp = networkIsp;
    this.networkType = networkType;
    this.deviceHeight = deviceHeight;
    setDeviceHeightIsSet(true);
    this.deviceWidth = deviceWidth;
    setDeviceWidthIsSet(true);
    this.rootMark = rootMark;
    setRootMarkIsSet(true);
    this.sdkVersion = sdkVersion;
    this.cpid = cpid;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CSTokenLoginMsg(CSTokenLoginMsg other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetDeviceId()) {
      this.deviceId = other.deviceId;
    }
    if (other.isSetMacId()) {
      this.macId = other.macId;
    }
    if (other.isSetDeviceType()) {
      this.deviceType = other.deviceType;
    }
    if (other.isSetDeviceVersion()) {
      this.deviceVersion = other.deviceVersion;
    }
    if (other.isSetDevicePlatform()) {
      this.devicePlatform = other.devicePlatform;
    }
    if (other.isSetDeviceModel()) {
      this.deviceModel = other.deviceModel;
    }
    if (other.isSetVersion()) {
      this.version = other.version;
    }
    if (other.isSetAppChannel()) {
      this.appChannel = other.appChannel;
    }
    if (other.isSetChannelName()) {
      this.channelName = other.channelName;
    }
    if (other.isSetChannelPlatform()) {
      this.channelPlatform = other.channelPlatform;
    }
    if (other.isSetChannelUdid()) {
      this.channelUdid = other.channelUdid;
    }
    if (other.isSetGameSession()) {
      this.gameSession = other.gameSession;
    }
    this.isReconnect = other.isReconnect;
    if (other.isSetGsId()) {
      this.gsId = other.gsId;
    }
    if (other.isSetNetworkIsp()) {
      this.networkIsp = other.networkIsp;
    }
    if (other.isSetNetworkType()) {
      this.networkType = other.networkType;
    }
    this.deviceHeight = other.deviceHeight;
    this.deviceWidth = other.deviceWidth;
    this.rootMark = other.rootMark;
    if (other.isSetSdkVersion()) {
      this.sdkVersion = other.sdkVersion;
    }
    if (other.isSetCpid()) {
      this.cpid = other.cpid;
    }
  }

  public CSTokenLoginMsg deepCopy() {
    return new CSTokenLoginMsg(this);
  }

  @Override
  public void clear() {
    this.deviceId = null;
    this.macId = null;
    this.deviceType = null;
    this.deviceVersion = null;
    this.devicePlatform = null;
    this.deviceModel = null;
    this.version = null;
    this.appChannel = null;
    this.channelName = null;
    this.channelPlatform = null;
    this.channelUdid = null;
    this.gameSession = null;
    setIsReconnectIsSet(false);
    this.isReconnect = false;
    this.gsId = null;
    this.networkIsp = null;
    this.networkType = null;
    setDeviceHeightIsSet(false);
    this.deviceHeight = 0;
    setDeviceWidthIsSet(false);
    this.deviceWidth = 0;
    setRootMarkIsSet(false);
    this.rootMark = 0;
    this.sdkVersion = null;
    this.cpid = null;
  }

  /**
   * 设备uuid
   */
  public String getDeviceId() {
    return this.deviceId;
  }

  /**
   * 设备uuid
   */
  public CSTokenLoginMsg setDeviceId(String deviceId) {
    this.deviceId = deviceId;
    return this;
  }

  public void unsetDeviceId() {
    this.deviceId = null;
  }

  /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceId() {
    return this.deviceId != null;
  }

  public void setDeviceIdIsSet(boolean value) {
    if (!value) {
      this.deviceId = null;
    }
  }

  public String getMacId() {
    return this.macId;
  }

  public CSTokenLoginMsg setMacId(String macId) {
    this.macId = macId;
    return this;
  }

  public void unsetMacId() {
    this.macId = null;
  }

  /** Returns true if field macId is set (has been assigned a value) and false otherwise */
  public boolean isSetMacId() {
    return this.macId != null;
  }

  public void setMacIdIsSet(boolean value) {
    if (!value) {
      this.macId = null;
    }
  }

  public String getDeviceType() {
    return this.deviceType;
  }

  public CSTokenLoginMsg setDeviceType(String deviceType) {
    this.deviceType = deviceType;
    return this;
  }

  public void unsetDeviceType() {
    this.deviceType = null;
  }

  /** Returns true if field deviceType is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceType() {
    return this.deviceType != null;
  }

  public void setDeviceTypeIsSet(boolean value) {
    if (!value) {
      this.deviceType = null;
    }
  }

  public String getDeviceVersion() {
    return this.deviceVersion;
  }

  public CSTokenLoginMsg setDeviceVersion(String deviceVersion) {
    this.deviceVersion = deviceVersion;
    return this;
  }

  public void unsetDeviceVersion() {
    this.deviceVersion = null;
  }

  /** Returns true if field deviceVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceVersion() {
    return this.deviceVersion != null;
  }

  public void setDeviceVersionIsSet(boolean value) {
    if (!value) {
      this.deviceVersion = null;
    }
  }

  /**
   * 设备平台
   */
  public String getDevicePlatform() {
    return this.devicePlatform;
  }

  /**
   * 设备平台
   */
  public CSTokenLoginMsg setDevicePlatform(String devicePlatform) {
    this.devicePlatform = devicePlatform;
    return this;
  }

  public void unsetDevicePlatform() {
    this.devicePlatform = null;
  }

  /** Returns true if field devicePlatform is set (has been assigned a value) and false otherwise */
  public boolean isSetDevicePlatform() {
    return this.devicePlatform != null;
  }

  public void setDevicePlatformIsSet(boolean value) {
    if (!value) {
      this.devicePlatform = null;
    }
  }

  /**
   * 设备型号
   */
  public String getDeviceModel() {
    return this.deviceModel;
  }

  /**
   * 设备型号
   */
  public CSTokenLoginMsg setDeviceModel(String deviceModel) {
    this.deviceModel = deviceModel;
    return this;
  }

  public void unsetDeviceModel() {
    this.deviceModel = null;
  }

  /** Returns true if field deviceModel is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceModel() {
    return this.deviceModel != null;
  }

  public void setDeviceModelIsSet(boolean value) {
    if (!value) {
      this.deviceModel = null;
    }
  }

  /**
   * 客户端版本号
   */
  public String getVersion() {
    return this.version;
  }

  /**
   * 客户端版本号
   */
  public CSTokenLoginMsg setVersion(String version) {
    this.version = version;
    return this;
  }

  public void unsetVersion() {
    this.version = null;
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return this.version != null;
  }

  public void setVersionIsSet(boolean value) {
    if (!value) {
      this.version = null;
    }
  }

  /**
   * 运营渠道
   */
  public String getAppChannel() {
    return this.appChannel;
  }

  /**
   * 运营渠道
   */
  public CSTokenLoginMsg setAppChannel(String appChannel) {
    this.appChannel = appChannel;
    return this;
  }

  public void unsetAppChannel() {
    this.appChannel = null;
  }

  /** Returns true if field appChannel is set (has been assigned a value) and false otherwise */
  public boolean isSetAppChannel() {
    return this.appChannel != null;
  }

  public void setAppChannelIsSet(boolean value) {
    if (!value) {
      this.appChannel = null;
    }
  }

  /**
   * 登录渠道
   */
  public String getChannelName() {
    return this.channelName;
  }

  /**
   * 登录渠道
   */
  public CSTokenLoginMsg setChannelName(String channelName) {
    this.channelName = channelName;
    return this;
  }

  public void unsetChannelName() {
    this.channelName = null;
  }

  /** Returns true if field channelName is set (has been assigned a value) and false otherwise */
  public boolean isSetChannelName() {
    return this.channelName != null;
  }

  public void setChannelNameIsSet(boolean value) {
    if (!value) {
      this.channelName = null;
    }
  }

  /**
   * 渠道sdk获得的平台
   */
  public String getChannelPlatform() {
    return this.channelPlatform;
  }

  /**
   * 渠道sdk获得的平台
   */
  public CSTokenLoginMsg setChannelPlatform(String channelPlatform) {
    this.channelPlatform = channelPlatform;
    return this;
  }

  public void unsetChannelPlatform() {
    this.channelPlatform = null;
  }

  /** Returns true if field channelPlatform is set (has been assigned a value) and false otherwise */
  public boolean isSetChannelPlatform() {
    return this.channelPlatform != null;
  }

  public void setChannelPlatformIsSet(boolean value) {
    if (!value) {
      this.channelPlatform = null;
    }
  }

  /**
   * 玩家登录的移动设备号，通过UniSDK提供的接口获取
   */
  public String getChannelUdid() {
    return this.channelUdid;
  }

  /**
   * 玩家登录的移动设备号，通过UniSDK提供的接口获取
   */
  public CSTokenLoginMsg setChannelUdid(String channelUdid) {
    this.channelUdid = channelUdid;
    return this;
  }

  public void unsetChannelUdid() {
    this.channelUdid = null;
  }

  /** Returns true if field channelUdid is set (has been assigned a value) and false otherwise */
  public boolean isSetChannelUdid() {
    return this.channelUdid != null;
  }

  public void setChannelUdidIsSet(boolean value) {
    if (!value) {
      this.channelUdid = null;
    }
  }

  /**
   * 游戏自己维护的session
   */
  public String getGameSession() {
    return this.gameSession;
  }

  /**
   * 游戏自己维护的session
   */
  public CSTokenLoginMsg setGameSession(String gameSession) {
    this.gameSession = gameSession;
    return this;
  }

  public void unsetGameSession() {
    this.gameSession = null;
  }

  /** Returns true if field gameSession is set (has been assigned a value) and false otherwise */
  public boolean isSetGameSession() {
    return this.gameSession != null;
  }

  public void setGameSessionIsSet(boolean value) {
    if (!value) {
      this.gameSession = null;
    }
  }

  /**
   * 是否断线重连
   */
  public boolean isIsReconnect() {
    return this.isReconnect;
  }

  /**
   * 是否断线重连
   */
  public CSTokenLoginMsg setIsReconnect(boolean isReconnect) {
    this.isReconnect = isReconnect;
    setIsReconnectIsSet(true);
    return this;
  }

  public void unsetIsReconnect() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISRECONNECT_ISSET_ID);
  }

  /** Returns true if field isReconnect is set (has been assigned a value) and false otherwise */
  public boolean isSetIsReconnect() {
    return EncodingUtils.testBit(__isset_bitfield, __ISRECONNECT_ISSET_ID);
  }

  public void setIsReconnectIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISRECONNECT_ISSET_ID, value);
  }

  /**
   * 登录的游戏服id
   */
  public String getGsId() {
    return this.gsId;
  }

  /**
   * 登录的游戏服id
   */
  public CSTokenLoginMsg setGsId(String gsId) {
    this.gsId = gsId;
    return this;
  }

  public void unsetGsId() {
    this.gsId = null;
  }

  /** Returns true if field gsId is set (has been assigned a value) and false otherwise */
  public boolean isSetGsId() {
    return this.gsId != null;
  }

  public void setGsIdIsSet(boolean value) {
    if (!value) {
      this.gsId = null;
    }
  }

  /**
   * 网络运营商
   */
  public String getNetworkIsp() {
    return this.networkIsp;
  }

  /**
   * 网络运营商
   */
  public CSTokenLoginMsg setNetworkIsp(String networkIsp) {
    this.networkIsp = networkIsp;
    return this;
  }

  public void unsetNetworkIsp() {
    this.networkIsp = null;
  }

  /** Returns true if field networkIsp is set (has been assigned a value) and false otherwise */
  public boolean isSetNetworkIsp() {
    return this.networkIsp != null;
  }

  public void setNetworkIspIsSet(boolean value) {
    if (!value) {
      this.networkIsp = null;
    }
  }

  /**
   * 网络类型
   */
  public String getNetworkType() {
    return this.networkType;
  }

  /**
   * 网络类型
   */
  public CSTokenLoginMsg setNetworkType(String networkType) {
    this.networkType = networkType;
    return this;
  }

  public void unsetNetworkType() {
    this.networkType = null;
  }

  /** Returns true if field networkType is set (has been assigned a value) and false otherwise */
  public boolean isSetNetworkType() {
    return this.networkType != null;
  }

  public void setNetworkTypeIsSet(boolean value) {
    if (!value) {
      this.networkType = null;
    }
  }

  public int getDeviceHeight() {
    return this.deviceHeight;
  }

  public CSTokenLoginMsg setDeviceHeight(int deviceHeight) {
    this.deviceHeight = deviceHeight;
    setDeviceHeightIsSet(true);
    return this;
  }

  public void unsetDeviceHeight() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEVICEHEIGHT_ISSET_ID);
  }

  /** Returns true if field deviceHeight is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceHeight() {
    return EncodingUtils.testBit(__isset_bitfield, __DEVICEHEIGHT_ISSET_ID);
  }

  public void setDeviceHeightIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEVICEHEIGHT_ISSET_ID, value);
  }

  public int getDeviceWidth() {
    return this.deviceWidth;
  }

  public CSTokenLoginMsg setDeviceWidth(int deviceWidth) {
    this.deviceWidth = deviceWidth;
    setDeviceWidthIsSet(true);
    return this;
  }

  public void unsetDeviceWidth() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEVICEWIDTH_ISSET_ID);
  }

  /** Returns true if field deviceWidth is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceWidth() {
    return EncodingUtils.testBit(__isset_bitfield, __DEVICEWIDTH_ISSET_ID);
  }

  public void setDeviceWidthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEVICEWIDTH_ISSET_ID, value);
  }

  /**
   * root 越狱标记 0为非越狱(安卓root),1为越狱(安卓rootroot),2为模拟器
   */
  public short getRootMark() {
    return this.rootMark;
  }

  /**
   * root 越狱标记 0为非越狱(安卓root),1为越狱(安卓rootroot),2为模拟器
   */
  public CSTokenLoginMsg setRootMark(short rootMark) {
    this.rootMark = rootMark;
    setRootMarkIsSet(true);
    return this;
  }

  public void unsetRootMark() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROOTMARK_ISSET_ID);
  }

  /** Returns true if field rootMark is set (has been assigned a value) and false otherwise */
  public boolean isSetRootMark() {
    return EncodingUtils.testBit(__isset_bitfield, __ROOTMARK_ISSET_ID);
  }

  public void setRootMarkIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROOTMARK_ISSET_ID, value);
  }

  /**
   * sdk 版本
   */
  public String getSdkVersion() {
    return this.sdkVersion;
  }

  /**
   * sdk 版本
   */
  public CSTokenLoginMsg setSdkVersion(String sdkVersion) {
    this.sdkVersion = sdkVersion;
    return this;
  }

  public void unsetSdkVersion() {
    this.sdkVersion = null;
  }

  /** Returns true if field sdkVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetSdkVersion() {
    return this.sdkVersion != null;
  }

  public void setSdkVersionIsSet(boolean value) {
    if (!value) {
      this.sdkVersion = null;
    }
  }

  /**
   * cpid
   */
  public String getCpid() {
    return this.cpid;
  }

  /**
   * cpid
   */
  public CSTokenLoginMsg setCpid(String cpid) {
    this.cpid = cpid;
    return this;
  }

  public void unsetCpid() {
    this.cpid = null;
  }

  /** Returns true if field cpid is set (has been assigned a value) and false otherwise */
  public boolean isSetCpid() {
    return this.cpid != null;
  }

  public void setCpidIsSet(boolean value) {
    if (!value) {
      this.cpid = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DEVICE_ID:
      if (value == null) {
        unsetDeviceId();
      } else {
        setDeviceId((String)value);
      }
      break;

    case MAC_ID:
      if (value == null) {
        unsetMacId();
      } else {
        setMacId((String)value);
      }
      break;

    case DEVICE_TYPE:
      if (value == null) {
        unsetDeviceType();
      } else {
        setDeviceType((String)value);
      }
      break;

    case DEVICE_VERSION:
      if (value == null) {
        unsetDeviceVersion();
      } else {
        setDeviceVersion((String)value);
      }
      break;

    case DEVICE_PLATFORM:
      if (value == null) {
        unsetDevicePlatform();
      } else {
        setDevicePlatform((String)value);
      }
      break;

    case DEVICE_MODEL:
      if (value == null) {
        unsetDeviceModel();
      } else {
        setDeviceModel((String)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((String)value);
      }
      break;

    case APP_CHANNEL:
      if (value == null) {
        unsetAppChannel();
      } else {
        setAppChannel((String)value);
      }
      break;

    case CHANNEL_NAME:
      if (value == null) {
        unsetChannelName();
      } else {
        setChannelName((String)value);
      }
      break;

    case CHANNEL_PLATFORM:
      if (value == null) {
        unsetChannelPlatform();
      } else {
        setChannelPlatform((String)value);
      }
      break;

    case CHANNEL_UDID:
      if (value == null) {
        unsetChannelUdid();
      } else {
        setChannelUdid((String)value);
      }
      break;

    case GAME_SESSION:
      if (value == null) {
        unsetGameSession();
      } else {
        setGameSession((String)value);
      }
      break;

    case IS_RECONNECT:
      if (value == null) {
        unsetIsReconnect();
      } else {
        setIsReconnect((Boolean)value);
      }
      break;

    case GS_ID:
      if (value == null) {
        unsetGsId();
      } else {
        setGsId((String)value);
      }
      break;

    case NETWORK_ISP:
      if (value == null) {
        unsetNetworkIsp();
      } else {
        setNetworkIsp((String)value);
      }
      break;

    case NETWORK_TYPE:
      if (value == null) {
        unsetNetworkType();
      } else {
        setNetworkType((String)value);
      }
      break;

    case DEVICE_HEIGHT:
      if (value == null) {
        unsetDeviceHeight();
      } else {
        setDeviceHeight((Integer)value);
      }
      break;

    case DEVICE_WIDTH:
      if (value == null) {
        unsetDeviceWidth();
      } else {
        setDeviceWidth((Integer)value);
      }
      break;

    case ROOT_MARK:
      if (value == null) {
        unsetRootMark();
      } else {
        setRootMark((Short)value);
      }
      break;

    case SDK_VERSION:
      if (value == null) {
        unsetSdkVersion();
      } else {
        setSdkVersion((String)value);
      }
      break;

    case CPID:
      if (value == null) {
        unsetCpid();
      } else {
        setCpid((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DEVICE_ID:
      return getDeviceId();

    case MAC_ID:
      return getMacId();

    case DEVICE_TYPE:
      return getDeviceType();

    case DEVICE_VERSION:
      return getDeviceVersion();

    case DEVICE_PLATFORM:
      return getDevicePlatform();

    case DEVICE_MODEL:
      return getDeviceModel();

    case VERSION:
      return getVersion();

    case APP_CHANNEL:
      return getAppChannel();

    case CHANNEL_NAME:
      return getChannelName();

    case CHANNEL_PLATFORM:
      return getChannelPlatform();

    case CHANNEL_UDID:
      return getChannelUdid();

    case GAME_SESSION:
      return getGameSession();

    case IS_RECONNECT:
      return Boolean.valueOf(isIsReconnect());

    case GS_ID:
      return getGsId();

    case NETWORK_ISP:
      return getNetworkIsp();

    case NETWORK_TYPE:
      return getNetworkType();

    case DEVICE_HEIGHT:
      return Integer.valueOf(getDeviceHeight());

    case DEVICE_WIDTH:
      return Integer.valueOf(getDeviceWidth());

    case ROOT_MARK:
      return Short.valueOf(getRootMark());

    case SDK_VERSION:
      return getSdkVersion();

    case CPID:
      return getCpid();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DEVICE_ID:
      return isSetDeviceId();
    case MAC_ID:
      return isSetMacId();
    case DEVICE_TYPE:
      return isSetDeviceType();
    case DEVICE_VERSION:
      return isSetDeviceVersion();
    case DEVICE_PLATFORM:
      return isSetDevicePlatform();
    case DEVICE_MODEL:
      return isSetDeviceModel();
    case VERSION:
      return isSetVersion();
    case APP_CHANNEL:
      return isSetAppChannel();
    case CHANNEL_NAME:
      return isSetChannelName();
    case CHANNEL_PLATFORM:
      return isSetChannelPlatform();
    case CHANNEL_UDID:
      return isSetChannelUdid();
    case GAME_SESSION:
      return isSetGameSession();
    case IS_RECONNECT:
      return isSetIsReconnect();
    case GS_ID:
      return isSetGsId();
    case NETWORK_ISP:
      return isSetNetworkIsp();
    case NETWORK_TYPE:
      return isSetNetworkType();
    case DEVICE_HEIGHT:
      return isSetDeviceHeight();
    case DEVICE_WIDTH:
      return isSetDeviceWidth();
    case ROOT_MARK:
      return isSetRootMark();
    case SDK_VERSION:
      return isSetSdkVersion();
    case CPID:
      return isSetCpid();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CSTokenLoginMsg)
      return this.equals((CSTokenLoginMsg)that);
    return false;
  }

  public boolean equals(CSTokenLoginMsg that) {
    if (that == null)
      return false;

    boolean this_present_deviceId = true && this.isSetDeviceId();
    boolean that_present_deviceId = true && that.isSetDeviceId();
    if (this_present_deviceId || that_present_deviceId) {
      if (!(this_present_deviceId && that_present_deviceId))
        return false;
      if (!this.deviceId.equals(that.deviceId))
        return false;
    }

    boolean this_present_macId = true && this.isSetMacId();
    boolean that_present_macId = true && that.isSetMacId();
    if (this_present_macId || that_present_macId) {
      if (!(this_present_macId && that_present_macId))
        return false;
      if (!this.macId.equals(that.macId))
        return false;
    }

    boolean this_present_deviceType = true && this.isSetDeviceType();
    boolean that_present_deviceType = true && that.isSetDeviceType();
    if (this_present_deviceType || that_present_deviceType) {
      if (!(this_present_deviceType && that_present_deviceType))
        return false;
      if (!this.deviceType.equals(that.deviceType))
        return false;
    }

    boolean this_present_deviceVersion = true && this.isSetDeviceVersion();
    boolean that_present_deviceVersion = true && that.isSetDeviceVersion();
    if (this_present_deviceVersion || that_present_deviceVersion) {
      if (!(this_present_deviceVersion && that_present_deviceVersion))
        return false;
      if (!this.deviceVersion.equals(that.deviceVersion))
        return false;
    }

    boolean this_present_devicePlatform = true && this.isSetDevicePlatform();
    boolean that_present_devicePlatform = true && that.isSetDevicePlatform();
    if (this_present_devicePlatform || that_present_devicePlatform) {
      if (!(this_present_devicePlatform && that_present_devicePlatform))
        return false;
      if (!this.devicePlatform.equals(that.devicePlatform))
        return false;
    }

    boolean this_present_deviceModel = true && this.isSetDeviceModel();
    boolean that_present_deviceModel = true && that.isSetDeviceModel();
    if (this_present_deviceModel || that_present_deviceModel) {
      if (!(this_present_deviceModel && that_present_deviceModel))
        return false;
      if (!this.deviceModel.equals(that.deviceModel))
        return false;
    }

    boolean this_present_version = true && this.isSetVersion();
    boolean that_present_version = true && that.isSetVersion();
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (!this.version.equals(that.version))
        return false;
    }

    boolean this_present_appChannel = true && this.isSetAppChannel();
    boolean that_present_appChannel = true && that.isSetAppChannel();
    if (this_present_appChannel || that_present_appChannel) {
      if (!(this_present_appChannel && that_present_appChannel))
        return false;
      if (!this.appChannel.equals(that.appChannel))
        return false;
    }

    boolean this_present_channelName = true && this.isSetChannelName();
    boolean that_present_channelName = true && that.isSetChannelName();
    if (this_present_channelName || that_present_channelName) {
      if (!(this_present_channelName && that_present_channelName))
        return false;
      if (!this.channelName.equals(that.channelName))
        return false;
    }

    boolean this_present_channelPlatform = true && this.isSetChannelPlatform();
    boolean that_present_channelPlatform = true && that.isSetChannelPlatform();
    if (this_present_channelPlatform || that_present_channelPlatform) {
      if (!(this_present_channelPlatform && that_present_channelPlatform))
        return false;
      if (!this.channelPlatform.equals(that.channelPlatform))
        return false;
    }

    boolean this_present_channelUdid = true && this.isSetChannelUdid();
    boolean that_present_channelUdid = true && that.isSetChannelUdid();
    if (this_present_channelUdid || that_present_channelUdid) {
      if (!(this_present_channelUdid && that_present_channelUdid))
        return false;
      if (!this.channelUdid.equals(that.channelUdid))
        return false;
    }

    boolean this_present_gameSession = true && this.isSetGameSession();
    boolean that_present_gameSession = true && that.isSetGameSession();
    if (this_present_gameSession || that_present_gameSession) {
      if (!(this_present_gameSession && that_present_gameSession))
        return false;
      if (!this.gameSession.equals(that.gameSession))
        return false;
    }

    boolean this_present_isReconnect = true && this.isSetIsReconnect();
    boolean that_present_isReconnect = true && that.isSetIsReconnect();
    if (this_present_isReconnect || that_present_isReconnect) {
      if (!(this_present_isReconnect && that_present_isReconnect))
        return false;
      if (this.isReconnect != that.isReconnect)
        return false;
    }

    boolean this_present_gsId = true && this.isSetGsId();
    boolean that_present_gsId = true && that.isSetGsId();
    if (this_present_gsId || that_present_gsId) {
      if (!(this_present_gsId && that_present_gsId))
        return false;
      if (!this.gsId.equals(that.gsId))
        return false;
    }

    boolean this_present_networkIsp = true && this.isSetNetworkIsp();
    boolean that_present_networkIsp = true && that.isSetNetworkIsp();
    if (this_present_networkIsp || that_present_networkIsp) {
      if (!(this_present_networkIsp && that_present_networkIsp))
        return false;
      if (!this.networkIsp.equals(that.networkIsp))
        return false;
    }

    boolean this_present_networkType = true && this.isSetNetworkType();
    boolean that_present_networkType = true && that.isSetNetworkType();
    if (this_present_networkType || that_present_networkType) {
      if (!(this_present_networkType && that_present_networkType))
        return false;
      if (!this.networkType.equals(that.networkType))
        return false;
    }

    boolean this_present_deviceHeight = true;
    boolean that_present_deviceHeight = true;
    if (this_present_deviceHeight || that_present_deviceHeight) {
      if (!(this_present_deviceHeight && that_present_deviceHeight))
        return false;
      if (this.deviceHeight != that.deviceHeight)
        return false;
    }

    boolean this_present_deviceWidth = true;
    boolean that_present_deviceWidth = true;
    if (this_present_deviceWidth || that_present_deviceWidth) {
      if (!(this_present_deviceWidth && that_present_deviceWidth))
        return false;
      if (this.deviceWidth != that.deviceWidth)
        return false;
    }

    boolean this_present_rootMark = true;
    boolean that_present_rootMark = true;
    if (this_present_rootMark || that_present_rootMark) {
      if (!(this_present_rootMark && that_present_rootMark))
        return false;
      if (this.rootMark != that.rootMark)
        return false;
    }

    boolean this_present_sdkVersion = true && this.isSetSdkVersion();
    boolean that_present_sdkVersion = true && that.isSetSdkVersion();
    if (this_present_sdkVersion || that_present_sdkVersion) {
      if (!(this_present_sdkVersion && that_present_sdkVersion))
        return false;
      if (!this.sdkVersion.equals(that.sdkVersion))
        return false;
    }

    boolean this_present_cpid = true && this.isSetCpid();
    boolean that_present_cpid = true && that.isSetCpid();
    if (this_present_cpid || that_present_cpid) {
      if (!(this_present_cpid && that_present_cpid))
        return false;
      if (!this.cpid.equals(that.cpid))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(CSTokenLoginMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CSTokenLoginMsg typedOther = (CSTokenLoginMsg)other;

    lastComparison = Boolean.valueOf(isSetDeviceId()).compareTo(typedOther.isSetDeviceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, typedOther.deviceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMacId()).compareTo(typedOther.isSetMacId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMacId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.macId, typedOther.macId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeviceType()).compareTo(typedOther.isSetDeviceType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceType, typedOther.deviceType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeviceVersion()).compareTo(typedOther.isSetDeviceVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceVersion, typedOther.deviceVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDevicePlatform()).compareTo(typedOther.isSetDevicePlatform());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDevicePlatform()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.devicePlatform, typedOther.devicePlatform);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeviceModel()).compareTo(typedOther.isSetDeviceModel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceModel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceModel, typedOther.deviceModel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(typedOther.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, typedOther.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppChannel()).compareTo(typedOther.isSetAppChannel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppChannel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appChannel, typedOther.appChannel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChannelName()).compareTo(typedOther.isSetChannelName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannelName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelName, typedOther.channelName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChannelPlatform()).compareTo(typedOther.isSetChannelPlatform());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannelPlatform()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelPlatform, typedOther.channelPlatform);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChannelUdid()).compareTo(typedOther.isSetChannelUdid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannelUdid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelUdid, typedOther.channelUdid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGameSession()).compareTo(typedOther.isSetGameSession());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGameSession()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameSession, typedOther.gameSession);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsReconnect()).compareTo(typedOther.isSetIsReconnect());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsReconnect()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isReconnect, typedOther.isReconnect);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGsId()).compareTo(typedOther.isSetGsId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGsId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gsId, typedOther.gsId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNetworkIsp()).compareTo(typedOther.isSetNetworkIsp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNetworkIsp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.networkIsp, typedOther.networkIsp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNetworkType()).compareTo(typedOther.isSetNetworkType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNetworkType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.networkType, typedOther.networkType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeviceHeight()).compareTo(typedOther.isSetDeviceHeight());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceHeight()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceHeight, typedOther.deviceHeight);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeviceWidth()).compareTo(typedOther.isSetDeviceWidth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceWidth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceWidth, typedOther.deviceWidth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRootMark()).compareTo(typedOther.isSetRootMark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRootMark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rootMark, typedOther.rootMark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSdkVersion()).compareTo(typedOther.isSetSdkVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSdkVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sdkVersion, typedOther.sdkVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpid()).compareTo(typedOther.isSetCpid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpid, typedOther.cpid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CSTokenLoginMsg(");
    boolean first = true;

    sb.append("deviceId:");
    if (this.deviceId == null) {
      sb.append("null");
    } else {
      sb.append(this.deviceId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("macId:");
    if (this.macId == null) {
      sb.append("null");
    } else {
      sb.append(this.macId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deviceType:");
    if (this.deviceType == null) {
      sb.append("null");
    } else {
      sb.append(this.deviceType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deviceVersion:");
    if (this.deviceVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.deviceVersion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("devicePlatform:");
    if (this.devicePlatform == null) {
      sb.append("null");
    } else {
      sb.append(this.devicePlatform);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deviceModel:");
    if (this.deviceModel == null) {
      sb.append("null");
    } else {
      sb.append(this.deviceModel);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("version:");
    if (this.version == null) {
      sb.append("null");
    } else {
      sb.append(this.version);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("appChannel:");
    if (this.appChannel == null) {
      sb.append("null");
    } else {
      sb.append(this.appChannel);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("channelName:");
    if (this.channelName == null) {
      sb.append("null");
    } else {
      sb.append(this.channelName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("channelPlatform:");
    if (this.channelPlatform == null) {
      sb.append("null");
    } else {
      sb.append(this.channelPlatform);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("channelUdid:");
    if (this.channelUdid == null) {
      sb.append("null");
    } else {
      sb.append(this.channelUdid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("gameSession:");
    if (this.gameSession == null) {
      sb.append("null");
    } else {
      sb.append(this.gameSession);
    }
    first = false;
    if (isSetIsReconnect()) {
      if (!first) sb.append(", ");
      sb.append("isReconnect:");
      sb.append(this.isReconnect);
      first = false;
    }
    if (isSetGsId()) {
      if (!first) sb.append(", ");
      sb.append("gsId:");
      if (this.gsId == null) {
        sb.append("null");
      } else {
        sb.append(this.gsId);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("networkIsp:");
    if (this.networkIsp == null) {
      sb.append("null");
    } else {
      sb.append(this.networkIsp);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("networkType:");
    if (this.networkType == null) {
      sb.append("null");
    } else {
      sb.append(this.networkType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deviceHeight:");
    sb.append(this.deviceHeight);
    first = false;
    if (!first) sb.append(", ");
    sb.append("deviceWidth:");
    sb.append(this.deviceWidth);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rootMark:");
    sb.append(this.rootMark);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sdkVersion:");
    if (this.sdkVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.sdkVersion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cpid:");
    if (this.cpid == null) {
      sb.append("null");
    } else {
      sb.append(this.cpid);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CSTokenLoginMsgStandardSchemeFactory implements SchemeFactory {
    public CSTokenLoginMsgStandardScheme getScheme() {
      return new CSTokenLoginMsgStandardScheme();
    }
  }

  private static class CSTokenLoginMsgStandardScheme extends StandardScheme<CSTokenLoginMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CSTokenLoginMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DEVICE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deviceId = iprot.readString();
              struct.setDeviceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MAC_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.macId = iprot.readString();
              struct.setMacIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DEVICE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deviceType = iprot.readString();
              struct.setDeviceTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DEVICE_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deviceVersion = iprot.readString();
              struct.setDeviceVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DEVICE_PLATFORM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.devicePlatform = iprot.readString();
              struct.setDevicePlatformIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DEVICE_MODEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deviceModel = iprot.readString();
              struct.setDeviceModelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.version = iprot.readString();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // APP_CHANNEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appChannel = iprot.readString();
              struct.setAppChannelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CHANNEL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.channelName = iprot.readString();
              struct.setChannelNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CHANNEL_PLATFORM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.channelPlatform = iprot.readString();
              struct.setChannelPlatformIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CHANNEL_UDID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.channelUdid = iprot.readString();
              struct.setChannelUdidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // GAME_SESSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.gameSession = iprot.readString();
              struct.setGameSessionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // IS_RECONNECT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isReconnect = iprot.readBool();
              struct.setIsReconnectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // GS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.gsId = iprot.readString();
              struct.setGsIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // NETWORK_ISP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.networkIsp = iprot.readString();
              struct.setNetworkIspIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // NETWORK_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.networkType = iprot.readString();
              struct.setNetworkTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // DEVICE_HEIGHT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.deviceHeight = iprot.readI32();
              struct.setDeviceHeightIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // DEVICE_WIDTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.deviceWidth = iprot.readI32();
              struct.setDeviceWidthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // ROOT_MARK
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.rootMark = iprot.readI16();
              struct.setRootMarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // SDK_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sdkVersion = iprot.readString();
              struct.setSdkVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // CPID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cpid = iprot.readString();
              struct.setCpidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CSTokenLoginMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.deviceId != null) {
        oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
        oprot.writeString(struct.deviceId);
        oprot.writeFieldEnd();
      }
      if (struct.macId != null) {
        oprot.writeFieldBegin(MAC_ID_FIELD_DESC);
        oprot.writeString(struct.macId);
        oprot.writeFieldEnd();
      }
      if (struct.deviceType != null) {
        oprot.writeFieldBegin(DEVICE_TYPE_FIELD_DESC);
        oprot.writeString(struct.deviceType);
        oprot.writeFieldEnd();
      }
      if (struct.deviceVersion != null) {
        oprot.writeFieldBegin(DEVICE_VERSION_FIELD_DESC);
        oprot.writeString(struct.deviceVersion);
        oprot.writeFieldEnd();
      }
      if (struct.devicePlatform != null) {
        oprot.writeFieldBegin(DEVICE_PLATFORM_FIELD_DESC);
        oprot.writeString(struct.devicePlatform);
        oprot.writeFieldEnd();
      }
      if (struct.deviceModel != null) {
        oprot.writeFieldBegin(DEVICE_MODEL_FIELD_DESC);
        oprot.writeString(struct.deviceModel);
        oprot.writeFieldEnd();
      }
      if (struct.version != null) {
        oprot.writeFieldBegin(VERSION_FIELD_DESC);
        oprot.writeString(struct.version);
        oprot.writeFieldEnd();
      }
      if (struct.appChannel != null) {
        oprot.writeFieldBegin(APP_CHANNEL_FIELD_DESC);
        oprot.writeString(struct.appChannel);
        oprot.writeFieldEnd();
      }
      if (struct.channelName != null) {
        oprot.writeFieldBegin(CHANNEL_NAME_FIELD_DESC);
        oprot.writeString(struct.channelName);
        oprot.writeFieldEnd();
      }
      if (struct.channelPlatform != null) {
        oprot.writeFieldBegin(CHANNEL_PLATFORM_FIELD_DESC);
        oprot.writeString(struct.channelPlatform);
        oprot.writeFieldEnd();
      }
      if (struct.channelUdid != null) {
        oprot.writeFieldBegin(CHANNEL_UDID_FIELD_DESC);
        oprot.writeString(struct.channelUdid);
        oprot.writeFieldEnd();
      }
      if (struct.gameSession != null) {
        oprot.writeFieldBegin(GAME_SESSION_FIELD_DESC);
        oprot.writeString(struct.gameSession);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsReconnect()) {
        oprot.writeFieldBegin(IS_RECONNECT_FIELD_DESC);
        oprot.writeBool(struct.isReconnect);
        oprot.writeFieldEnd();
      }
      if (struct.gsId != null) {
        if (struct.isSetGsId()) {
          oprot.writeFieldBegin(GS_ID_FIELD_DESC);
          oprot.writeString(struct.gsId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.networkIsp != null) {
        oprot.writeFieldBegin(NETWORK_ISP_FIELD_DESC);
        oprot.writeString(struct.networkIsp);
        oprot.writeFieldEnd();
      }
      if (struct.networkType != null) {
        oprot.writeFieldBegin(NETWORK_TYPE_FIELD_DESC);
        oprot.writeString(struct.networkType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DEVICE_HEIGHT_FIELD_DESC);
      oprot.writeI32(struct.deviceHeight);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEVICE_WIDTH_FIELD_DESC);
      oprot.writeI32(struct.deviceWidth);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROOT_MARK_FIELD_DESC);
      oprot.writeI16(struct.rootMark);
      oprot.writeFieldEnd();
      if (struct.sdkVersion != null) {
        oprot.writeFieldBegin(SDK_VERSION_FIELD_DESC);
        oprot.writeString(struct.sdkVersion);
        oprot.writeFieldEnd();
      }
      if (struct.cpid != null) {
        oprot.writeFieldBegin(CPID_FIELD_DESC);
        oprot.writeString(struct.cpid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CSTokenLoginMsgTupleSchemeFactory implements SchemeFactory {
    public CSTokenLoginMsgTupleScheme getScheme() {
      return new CSTokenLoginMsgTupleScheme();
    }
  }

  private static class CSTokenLoginMsgTupleScheme extends TupleScheme<CSTokenLoginMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CSTokenLoginMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDeviceId()) {
        optionals.set(0);
      }
      if (struct.isSetMacId()) {
        optionals.set(1);
      }
      if (struct.isSetDeviceType()) {
        optionals.set(2);
      }
      if (struct.isSetDeviceVersion()) {
        optionals.set(3);
      }
      if (struct.isSetDevicePlatform()) {
        optionals.set(4);
      }
      if (struct.isSetDeviceModel()) {
        optionals.set(5);
      }
      if (struct.isSetVersion()) {
        optionals.set(6);
      }
      if (struct.isSetAppChannel()) {
        optionals.set(7);
      }
      if (struct.isSetChannelName()) {
        optionals.set(8);
      }
      if (struct.isSetChannelPlatform()) {
        optionals.set(9);
      }
      if (struct.isSetChannelUdid()) {
        optionals.set(10);
      }
      if (struct.isSetGameSession()) {
        optionals.set(11);
      }
      if (struct.isSetIsReconnect()) {
        optionals.set(12);
      }
      if (struct.isSetGsId()) {
        optionals.set(13);
      }
      if (struct.isSetNetworkIsp()) {
        optionals.set(14);
      }
      if (struct.isSetNetworkType()) {
        optionals.set(15);
      }
      if (struct.isSetDeviceHeight()) {
        optionals.set(16);
      }
      if (struct.isSetDeviceWidth()) {
        optionals.set(17);
      }
      if (struct.isSetRootMark()) {
        optionals.set(18);
      }
      if (struct.isSetSdkVersion()) {
        optionals.set(19);
      }
      if (struct.isSetCpid()) {
        optionals.set(20);
      }
      oprot.writeBitSet(optionals, 21);
      if (struct.isSetDeviceId()) {
        oprot.writeString(struct.deviceId);
      }
      if (struct.isSetMacId()) {
        oprot.writeString(struct.macId);
      }
      if (struct.isSetDeviceType()) {
        oprot.writeString(struct.deviceType);
      }
      if (struct.isSetDeviceVersion()) {
        oprot.writeString(struct.deviceVersion);
      }
      if (struct.isSetDevicePlatform()) {
        oprot.writeString(struct.devicePlatform);
      }
      if (struct.isSetDeviceModel()) {
        oprot.writeString(struct.deviceModel);
      }
      if (struct.isSetVersion()) {
        oprot.writeString(struct.version);
      }
      if (struct.isSetAppChannel()) {
        oprot.writeString(struct.appChannel);
      }
      if (struct.isSetChannelName()) {
        oprot.writeString(struct.channelName);
      }
      if (struct.isSetChannelPlatform()) {
        oprot.writeString(struct.channelPlatform);
      }
      if (struct.isSetChannelUdid()) {
        oprot.writeString(struct.channelUdid);
      }
      if (struct.isSetGameSession()) {
        oprot.writeString(struct.gameSession);
      }
      if (struct.isSetIsReconnect()) {
        oprot.writeBool(struct.isReconnect);
      }
      if (struct.isSetGsId()) {
        oprot.writeString(struct.gsId);
      }
      if (struct.isSetNetworkIsp()) {
        oprot.writeString(struct.networkIsp);
      }
      if (struct.isSetNetworkType()) {
        oprot.writeString(struct.networkType);
      }
      if (struct.isSetDeviceHeight()) {
        oprot.writeI32(struct.deviceHeight);
      }
      if (struct.isSetDeviceWidth()) {
        oprot.writeI32(struct.deviceWidth);
      }
      if (struct.isSetRootMark()) {
        oprot.writeI16(struct.rootMark);
      }
      if (struct.isSetSdkVersion()) {
        oprot.writeString(struct.sdkVersion);
      }
      if (struct.isSetCpid()) {
        oprot.writeString(struct.cpid);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CSTokenLoginMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(21);
      if (incoming.get(0)) {
        struct.deviceId = iprot.readString();
        struct.setDeviceIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.macId = iprot.readString();
        struct.setMacIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.deviceType = iprot.readString();
        struct.setDeviceTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.deviceVersion = iprot.readString();
        struct.setDeviceVersionIsSet(true);
      }
      if (incoming.get(4)) {
        struct.devicePlatform = iprot.readString();
        struct.setDevicePlatformIsSet(true);
      }
      if (incoming.get(5)) {
        struct.deviceModel = iprot.readString();
        struct.setDeviceModelIsSet(true);
      }
      if (incoming.get(6)) {
        struct.version = iprot.readString();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(7)) {
        struct.appChannel = iprot.readString();
        struct.setAppChannelIsSet(true);
      }
      if (incoming.get(8)) {
        struct.channelName = iprot.readString();
        struct.setChannelNameIsSet(true);
      }
      if (incoming.get(9)) {
        struct.channelPlatform = iprot.readString();
        struct.setChannelPlatformIsSet(true);
      }
      if (incoming.get(10)) {
        struct.channelUdid = iprot.readString();
        struct.setChannelUdidIsSet(true);
      }
      if (incoming.get(11)) {
        struct.gameSession = iprot.readString();
        struct.setGameSessionIsSet(true);
      }
      if (incoming.get(12)) {
        struct.isReconnect = iprot.readBool();
        struct.setIsReconnectIsSet(true);
      }
      if (incoming.get(13)) {
        struct.gsId = iprot.readString();
        struct.setGsIdIsSet(true);
      }
      if (incoming.get(14)) {
        struct.networkIsp = iprot.readString();
        struct.setNetworkIspIsSet(true);
      }
      if (incoming.get(15)) {
        struct.networkType = iprot.readString();
        struct.setNetworkTypeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.deviceHeight = iprot.readI32();
        struct.setDeviceHeightIsSet(true);
      }
      if (incoming.get(17)) {
        struct.deviceWidth = iprot.readI32();
        struct.setDeviceWidthIsSet(true);
      }
      if (incoming.get(18)) {
        struct.rootMark = iprot.readI16();
        struct.setRootMarkIsSet(true);
      }
      if (incoming.get(19)) {
        struct.sdkVersion = iprot.readString();
        struct.setSdkVersionIsSet(true);
      }
      if (incoming.get(20)) {
        struct.cpid = iprot.readString();
        struct.setCpidIsSet(true);
      }
    }
  }

}

