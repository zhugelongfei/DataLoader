/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 舞团商城物品
 */
public class GuildShopItem implements org.apache.thrift.TBase<GuildShopItem, GuildShopItem._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GuildShopItem");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField AMOUNT_LEFT_FIELD_DESC = new org.apache.thrift.protocol.TField("amountLeft", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField CAN_BUY_FIELD_DESC = new org.apache.thrift.protocol.TField("canBuy", org.apache.thrift.protocol.TType.BOOL, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GuildShopItemStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GuildShopItemTupleSchemeFactory());
  }

  public int id; // required
  public int amountLeft; // required
  public boolean canBuy; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    AMOUNT_LEFT((short)2, "amountLeft"),
    CAN_BUY((short)3, "canBuy");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // AMOUNT_LEFT
          return AMOUNT_LEFT;
        case 3: // CAN_BUY
          return CAN_BUY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __AMOUNTLEFT_ISSET_ID = 1;
  private static final int __CANBUY_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AMOUNT_LEFT, new org.apache.thrift.meta_data.FieldMetaData("amountLeft", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CAN_BUY, new org.apache.thrift.meta_data.FieldMetaData("canBuy", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GuildShopItem.class, metaDataMap);
  }

  public GuildShopItem() {
  }

  public GuildShopItem(
    int id,
    int amountLeft,
    boolean canBuy)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.amountLeft = amountLeft;
    setAmountLeftIsSet(true);
    this.canBuy = canBuy;
    setCanBuyIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GuildShopItem(GuildShopItem other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.amountLeft = other.amountLeft;
    this.canBuy = other.canBuy;
  }

  public GuildShopItem deepCopy() {
    return new GuildShopItem(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setAmountLeftIsSet(false);
    this.amountLeft = 0;
    setCanBuyIsSet(false);
    this.canBuy = false;
  }

  public int getId() {
    return this.id;
  }

  public GuildShopItem setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getAmountLeft() {
    return this.amountLeft;
  }

  public GuildShopItem setAmountLeft(int amountLeft) {
    this.amountLeft = amountLeft;
    setAmountLeftIsSet(true);
    return this;
  }

  public void unsetAmountLeft() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AMOUNTLEFT_ISSET_ID);
  }

  /** Returns true if field amountLeft is set (has been assigned a value) and false otherwise */
  public boolean isSetAmountLeft() {
    return EncodingUtils.testBit(__isset_bitfield, __AMOUNTLEFT_ISSET_ID);
  }

  public void setAmountLeftIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AMOUNTLEFT_ISSET_ID, value);
  }

  public boolean isCanBuy() {
    return this.canBuy;
  }

  public GuildShopItem setCanBuy(boolean canBuy) {
    this.canBuy = canBuy;
    setCanBuyIsSet(true);
    return this;
  }

  public void unsetCanBuy() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CANBUY_ISSET_ID);
  }

  /** Returns true if field canBuy is set (has been assigned a value) and false otherwise */
  public boolean isSetCanBuy() {
    return EncodingUtils.testBit(__isset_bitfield, __CANBUY_ISSET_ID);
  }

  public void setCanBuyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CANBUY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case AMOUNT_LEFT:
      if (value == null) {
        unsetAmountLeft();
      } else {
        setAmountLeft((Integer)value);
      }
      break;

    case CAN_BUY:
      if (value == null) {
        unsetCanBuy();
      } else {
        setCanBuy((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case AMOUNT_LEFT:
      return Integer.valueOf(getAmountLeft());

    case CAN_BUY:
      return Boolean.valueOf(isCanBuy());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case AMOUNT_LEFT:
      return isSetAmountLeft();
    case CAN_BUY:
      return isSetCanBuy();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GuildShopItem)
      return this.equals((GuildShopItem)that);
    return false;
  }

  public boolean equals(GuildShopItem that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_amountLeft = true;
    boolean that_present_amountLeft = true;
    if (this_present_amountLeft || that_present_amountLeft) {
      if (!(this_present_amountLeft && that_present_amountLeft))
        return false;
      if (this.amountLeft != that.amountLeft)
        return false;
    }

    boolean this_present_canBuy = true;
    boolean that_present_canBuy = true;
    if (this_present_canBuy || that_present_canBuy) {
      if (!(this_present_canBuy && that_present_canBuy))
        return false;
      if (this.canBuy != that.canBuy)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(GuildShopItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    GuildShopItem typedOther = (GuildShopItem)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAmountLeft()).compareTo(typedOther.isSetAmountLeft());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAmountLeft()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amountLeft, typedOther.amountLeft);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCanBuy()).compareTo(typedOther.isSetCanBuy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCanBuy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.canBuy, typedOther.canBuy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GuildShopItem(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("amountLeft:");
    sb.append(this.amountLeft);
    first = false;
    if (!first) sb.append(", ");
    sb.append("canBuy:");
    sb.append(this.canBuy);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GuildShopItemStandardSchemeFactory implements SchemeFactory {
    public GuildShopItemStandardScheme getScheme() {
      return new GuildShopItemStandardScheme();
    }
  }

  private static class GuildShopItemStandardScheme extends StandardScheme<GuildShopItem> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GuildShopItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // AMOUNT_LEFT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.amountLeft = iprot.readI32();
              struct.setAmountLeftIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CAN_BUY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.canBuy = iprot.readBool();
              struct.setCanBuyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GuildShopItem struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AMOUNT_LEFT_FIELD_DESC);
      oprot.writeI32(struct.amountLeft);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CAN_BUY_FIELD_DESC);
      oprot.writeBool(struct.canBuy);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GuildShopItemTupleSchemeFactory implements SchemeFactory {
    public GuildShopItemTupleScheme getScheme() {
      return new GuildShopItemTupleScheme();
    }
  }

  private static class GuildShopItemTupleScheme extends TupleScheme<GuildShopItem> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GuildShopItem struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetAmountLeft()) {
        optionals.set(1);
      }
      if (struct.isSetCanBuy()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetAmountLeft()) {
        oprot.writeI32(struct.amountLeft);
      }
      if (struct.isSetCanBuy()) {
        oprot.writeBool(struct.canBuy);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GuildShopItem struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.amountLeft = iprot.readI32();
        struct.setAmountLeftIsSet(true);
      }
      if (incoming.get(2)) {
        struct.canBuy = iprot.readBool();
        struct.setCanBuyIsSet(true);
      }
    }
  }

}

