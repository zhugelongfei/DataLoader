/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SCRechargeSuccOrderListMsg implements org.apache.thrift.TBase<SCRechargeSuccOrderListMsg, SCRechargeSuccOrderListMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCRechargeSuccOrderListMsg");

  private static final org.apache.thrift.protocol.TField ORDER_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("orderIdList", org.apache.thrift.protocol.TType.LIST, (short)1);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCRechargeSuccOrderListMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCRechargeSuccOrderListMsgTupleSchemeFactory());
  }

  public List<String> orderIdList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ORDER_ID_LIST((short)1, "orderIdList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORDER_ID_LIST
          return ORDER_ID_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORDER_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("orderIdList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCRechargeSuccOrderListMsg.class, metaDataMap);
  }

  public SCRechargeSuccOrderListMsg() {
  }

  public SCRechargeSuccOrderListMsg(
    List<String> orderIdList)
  {
    this();
    this.orderIdList = orderIdList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCRechargeSuccOrderListMsg(SCRechargeSuccOrderListMsg other) {
    if (other.isSetOrderIdList()) {
      List<String> __this__orderIdList = new ArrayList<String>();
      for (String other_element : other.orderIdList) {
        __this__orderIdList.add(other_element);
      }
      this.orderIdList = __this__orderIdList;
    }
  }

  public SCRechargeSuccOrderListMsg deepCopy() {
    return new SCRechargeSuccOrderListMsg(this);
  }

  @Override
  public void clear() {
    this.orderIdList = null;
  }

  public int getOrderIdListSize() {
    return (this.orderIdList == null) ? 0 : this.orderIdList.size();
  }

  public java.util.Iterator<String> getOrderIdListIterator() {
    return (this.orderIdList == null) ? null : this.orderIdList.iterator();
  }

  public void addToOrderIdList(String elem) {
    if (this.orderIdList == null) {
      this.orderIdList = new ArrayList<String>();
    }
    this.orderIdList.add(elem);
  }

  public List<String> getOrderIdList() {
    return this.orderIdList;
  }

  public SCRechargeSuccOrderListMsg setOrderIdList(List<String> orderIdList) {
    this.orderIdList = orderIdList;
    return this;
  }

  public void unsetOrderIdList() {
    this.orderIdList = null;
  }

  /** Returns true if field orderIdList is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderIdList() {
    return this.orderIdList != null;
  }

  public void setOrderIdListIsSet(boolean value) {
    if (!value) {
      this.orderIdList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ORDER_ID_LIST:
      if (value == null) {
        unsetOrderIdList();
      } else {
        setOrderIdList((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ORDER_ID_LIST:
      return getOrderIdList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ORDER_ID_LIST:
      return isSetOrderIdList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCRechargeSuccOrderListMsg)
      return this.equals((SCRechargeSuccOrderListMsg)that);
    return false;
  }

  public boolean equals(SCRechargeSuccOrderListMsg that) {
    if (that == null)
      return false;

    boolean this_present_orderIdList = true && this.isSetOrderIdList();
    boolean that_present_orderIdList = true && that.isSetOrderIdList();
    if (this_present_orderIdList || that_present_orderIdList) {
      if (!(this_present_orderIdList && that_present_orderIdList))
        return false;
      if (!this.orderIdList.equals(that.orderIdList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCRechargeSuccOrderListMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCRechargeSuccOrderListMsg typedOther = (SCRechargeSuccOrderListMsg)other;

    lastComparison = Boolean.valueOf(isSetOrderIdList()).compareTo(typedOther.isSetOrderIdList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderIdList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderIdList, typedOther.orderIdList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCRechargeSuccOrderListMsg(");
    boolean first = true;

    sb.append("orderIdList:");
    if (this.orderIdList == null) {
      sb.append("null");
    } else {
      sb.append(this.orderIdList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCRechargeSuccOrderListMsgStandardSchemeFactory implements SchemeFactory {
    public SCRechargeSuccOrderListMsgStandardScheme getScheme() {
      return new SCRechargeSuccOrderListMsgStandardScheme();
    }
  }

  private static class SCRechargeSuccOrderListMsgStandardScheme extends StandardScheme<SCRechargeSuccOrderListMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCRechargeSuccOrderListMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ORDER_ID_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list54 = iprot.readListBegin();
                struct.orderIdList = new ArrayList<String>(_list54.size);
                for (int _i55 = 0; _i55 < _list54.size; ++_i55)
                {
                  String _elem56; // required
                  _elem56 = iprot.readString();
                  struct.orderIdList.add(_elem56);
                }
                iprot.readListEnd();
              }
              struct.setOrderIdListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCRechargeSuccOrderListMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.orderIdList != null) {
        oprot.writeFieldBegin(ORDER_ID_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.orderIdList.size()));
          for (String _iter57 : struct.orderIdList)
          {
            oprot.writeString(_iter57);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCRechargeSuccOrderListMsgTupleSchemeFactory implements SchemeFactory {
    public SCRechargeSuccOrderListMsgTupleScheme getScheme() {
      return new SCRechargeSuccOrderListMsgTupleScheme();
    }
  }

  private static class SCRechargeSuccOrderListMsgTupleScheme extends TupleScheme<SCRechargeSuccOrderListMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCRechargeSuccOrderListMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetOrderIdList()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetOrderIdList()) {
        {
          oprot.writeI32(struct.orderIdList.size());
          for (String _iter58 : struct.orderIdList)
          {
            oprot.writeString(_iter58);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCRechargeSuccOrderListMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list59 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.orderIdList = new ArrayList<String>(_list59.size);
          for (int _i60 = 0; _i60 < _list59.size; ++_i60)
          {
            String _elem61; // required
            _elem61 = iprot.readString();
            struct.orderIdList.add(_elem61);
          }
        }
        struct.setOrderIdListIsSet(true);
      }
    }
  }

}

