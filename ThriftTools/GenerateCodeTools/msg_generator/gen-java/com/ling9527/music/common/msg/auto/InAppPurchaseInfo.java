/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 充值套餐信息
 */
public class InAppPurchaseInfo implements org.apache.thrift.TBase<InAppPurchaseInfo, InAppPurchaseInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InAppPurchaseInfo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("itemId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ITEM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("itemType", org.apache.thrift.protocol.TType.BYTE, (short)3);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DES_FIELD_DESC = new org.apache.thrift.protocol.TField("des", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField IB_FIELD_DESC = new org.apache.thrift.protocol.TField("ib", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField CURRENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("currency", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField CURRENCY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("currencyType", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ADDITION_REWARD_FIELD_DESC = new org.apache.thrift.protocol.TField("additionReward", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField ICON_FIELD_DESC = new org.apache.thrift.protocol.TField("icon", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField RECOMMEND_FIELD_DESC = new org.apache.thrift.protocol.TField("recommend", org.apache.thrift.protocol.TType.BOOL, (short)11);
  private static final org.apache.thrift.protocol.TField AFTER_BY_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("afterByDesc", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField ADVISE_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("adviseDesc", org.apache.thrift.protocol.TType.STRING, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new InAppPurchaseInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new InAppPurchaseInfoTupleSchemeFactory());
  }

  /**
   * 价格档位
   */
  public int id; // required
  /**
   * 道具ID
   */
  public String itemId; // required
  /**
   * 类型 0->真实砖石 1->红包
   */
  public byte itemType; // required
  /**
   * 物品名称
   */
  public String name; // required
  /**
   * 描述
   */
  public String des; // required
  /**
   * 砖石数量
   */
  public int ib; // required
  /**
   * 货币
   */
  public double currency; // required
  /**
   * 货币类型
   */
  public String currencyType; // required
  /**
   * 额外货币数量
   */
  public int additionReward; // required
  /**
   * 图标
   */
  public String icon; // required
  /**
   * 推荐描述
   */
  public boolean recommend; // required
  /**
   * 购买完描述
   */
  public String afterByDesc; // required
  /**
   * 推荐描述
   */
  public String adviseDesc; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 价格档位
     */
    ID((short)1, "id"),
    /**
     * 道具ID
     */
    ITEM_ID((short)2, "itemId"),
    /**
     * 类型 0->真实砖石 1->红包
     */
    ITEM_TYPE((short)3, "itemType"),
    /**
     * 物品名称
     */
    NAME((short)4, "name"),
    /**
     * 描述
     */
    DES((short)5, "des"),
    /**
     * 砖石数量
     */
    IB((short)6, "ib"),
    /**
     * 货币
     */
    CURRENCY((short)7, "currency"),
    /**
     * 货币类型
     */
    CURRENCY_TYPE((short)8, "currencyType"),
    /**
     * 额外货币数量
     */
    ADDITION_REWARD((short)9, "additionReward"),
    /**
     * 图标
     */
    ICON((short)10, "icon"),
    /**
     * 推荐描述
     */
    RECOMMEND((short)11, "recommend"),
    /**
     * 购买完描述
     */
    AFTER_BY_DESC((short)12, "afterByDesc"),
    /**
     * 推荐描述
     */
    ADVISE_DESC((short)13, "adviseDesc");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // ITEM_ID
          return ITEM_ID;
        case 3: // ITEM_TYPE
          return ITEM_TYPE;
        case 4: // NAME
          return NAME;
        case 5: // DES
          return DES;
        case 6: // IB
          return IB;
        case 7: // CURRENCY
          return CURRENCY;
        case 8: // CURRENCY_TYPE
          return CURRENCY_TYPE;
        case 9: // ADDITION_REWARD
          return ADDITION_REWARD;
        case 10: // ICON
          return ICON;
        case 11: // RECOMMEND
          return RECOMMEND;
        case 12: // AFTER_BY_DESC
          return AFTER_BY_DESC;
        case 13: // ADVISE_DESC
          return ADVISE_DESC;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __ITEMTYPE_ISSET_ID = 1;
  private static final int __IB_ISSET_ID = 2;
  private static final int __CURRENCY_ISSET_ID = 3;
  private static final int __ADDITIONREWARD_ISSET_ID = 4;
  private static final int __RECOMMEND_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("itemId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ITEM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("itemType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DES, new org.apache.thrift.meta_data.FieldMetaData("des", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IB, new org.apache.thrift.meta_data.FieldMetaData("ib", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CURRENCY, new org.apache.thrift.meta_data.FieldMetaData("currency", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CURRENCY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("currencyType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADDITION_REWARD, new org.apache.thrift.meta_data.FieldMetaData("additionReward", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ICON, new org.apache.thrift.meta_data.FieldMetaData("icon", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECOMMEND, new org.apache.thrift.meta_data.FieldMetaData("recommend", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.AFTER_BY_DESC, new org.apache.thrift.meta_data.FieldMetaData("afterByDesc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADVISE_DESC, new org.apache.thrift.meta_data.FieldMetaData("adviseDesc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(InAppPurchaseInfo.class, metaDataMap);
  }

  public InAppPurchaseInfo() {
  }

  public InAppPurchaseInfo(
    int id,
    String itemId,
    byte itemType,
    String name,
    String des,
    int ib,
    double currency,
    String currencyType,
    int additionReward,
    String icon,
    boolean recommend,
    String afterByDesc,
    String adviseDesc)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.itemId = itemId;
    this.itemType = itemType;
    setItemTypeIsSet(true);
    this.name = name;
    this.des = des;
    this.ib = ib;
    setIbIsSet(true);
    this.currency = currency;
    setCurrencyIsSet(true);
    this.currencyType = currencyType;
    this.additionReward = additionReward;
    setAdditionRewardIsSet(true);
    this.icon = icon;
    this.recommend = recommend;
    setRecommendIsSet(true);
    this.afterByDesc = afterByDesc;
    this.adviseDesc = adviseDesc;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public InAppPurchaseInfo(InAppPurchaseInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetItemId()) {
      this.itemId = other.itemId;
    }
    this.itemType = other.itemType;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetDes()) {
      this.des = other.des;
    }
    this.ib = other.ib;
    this.currency = other.currency;
    if (other.isSetCurrencyType()) {
      this.currencyType = other.currencyType;
    }
    this.additionReward = other.additionReward;
    if (other.isSetIcon()) {
      this.icon = other.icon;
    }
    this.recommend = other.recommend;
    if (other.isSetAfterByDesc()) {
      this.afterByDesc = other.afterByDesc;
    }
    if (other.isSetAdviseDesc()) {
      this.adviseDesc = other.adviseDesc;
    }
  }

  public InAppPurchaseInfo deepCopy() {
    return new InAppPurchaseInfo(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.itemId = null;
    setItemTypeIsSet(false);
    this.itemType = 0;
    this.name = null;
    this.des = null;
    setIbIsSet(false);
    this.ib = 0;
    setCurrencyIsSet(false);
    this.currency = 0.0;
    this.currencyType = null;
    setAdditionRewardIsSet(false);
    this.additionReward = 0;
    this.icon = null;
    setRecommendIsSet(false);
    this.recommend = false;
    this.afterByDesc = null;
    this.adviseDesc = null;
  }

  /**
   * 价格档位
   */
  public int getId() {
    return this.id;
  }

  /**
   * 价格档位
   */
  public InAppPurchaseInfo setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  /**
   * 道具ID
   */
  public String getItemId() {
    return this.itemId;
  }

  /**
   * 道具ID
   */
  public InAppPurchaseInfo setItemId(String itemId) {
    this.itemId = itemId;
    return this;
  }

  public void unsetItemId() {
    this.itemId = null;
  }

  /** Returns true if field itemId is set (has been assigned a value) and false otherwise */
  public boolean isSetItemId() {
    return this.itemId != null;
  }

  public void setItemIdIsSet(boolean value) {
    if (!value) {
      this.itemId = null;
    }
  }

  /**
   * 类型 0->真实砖石 1->红包
   */
  public byte getItemType() {
    return this.itemType;
  }

  /**
   * 类型 0->真实砖石 1->红包
   */
  public InAppPurchaseInfo setItemType(byte itemType) {
    this.itemType = itemType;
    setItemTypeIsSet(true);
    return this;
  }

  public void unsetItemType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ITEMTYPE_ISSET_ID);
  }

  /** Returns true if field itemType is set (has been assigned a value) and false otherwise */
  public boolean isSetItemType() {
    return EncodingUtils.testBit(__isset_bitfield, __ITEMTYPE_ISSET_ID);
  }

  public void setItemTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ITEMTYPE_ISSET_ID, value);
  }

  /**
   * 物品名称
   */
  public String getName() {
    return this.name;
  }

  /**
   * 物品名称
   */
  public InAppPurchaseInfo setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  /**
   * 描述
   */
  public String getDes() {
    return this.des;
  }

  /**
   * 描述
   */
  public InAppPurchaseInfo setDes(String des) {
    this.des = des;
    return this;
  }

  public void unsetDes() {
    this.des = null;
  }

  /** Returns true if field des is set (has been assigned a value) and false otherwise */
  public boolean isSetDes() {
    return this.des != null;
  }

  public void setDesIsSet(boolean value) {
    if (!value) {
      this.des = null;
    }
  }

  /**
   * 砖石数量
   */
  public int getIb() {
    return this.ib;
  }

  /**
   * 砖石数量
   */
  public InAppPurchaseInfo setIb(int ib) {
    this.ib = ib;
    setIbIsSet(true);
    return this;
  }

  public void unsetIb() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IB_ISSET_ID);
  }

  /** Returns true if field ib is set (has been assigned a value) and false otherwise */
  public boolean isSetIb() {
    return EncodingUtils.testBit(__isset_bitfield, __IB_ISSET_ID);
  }

  public void setIbIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IB_ISSET_ID, value);
  }

  /**
   * 货币
   */
  public double getCurrency() {
    return this.currency;
  }

  /**
   * 货币
   */
  public InAppPurchaseInfo setCurrency(double currency) {
    this.currency = currency;
    setCurrencyIsSet(true);
    return this;
  }

  public void unsetCurrency() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRENCY_ISSET_ID);
  }

  /** Returns true if field currency is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrency() {
    return EncodingUtils.testBit(__isset_bitfield, __CURRENCY_ISSET_ID);
  }

  public void setCurrencyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRENCY_ISSET_ID, value);
  }

  /**
   * 货币类型
   */
  public String getCurrencyType() {
    return this.currencyType;
  }

  /**
   * 货币类型
   */
  public InAppPurchaseInfo setCurrencyType(String currencyType) {
    this.currencyType = currencyType;
    return this;
  }

  public void unsetCurrencyType() {
    this.currencyType = null;
  }

  /** Returns true if field currencyType is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrencyType() {
    return this.currencyType != null;
  }

  public void setCurrencyTypeIsSet(boolean value) {
    if (!value) {
      this.currencyType = null;
    }
  }

  /**
   * 额外货币数量
   */
  public int getAdditionReward() {
    return this.additionReward;
  }

  /**
   * 额外货币数量
   */
  public InAppPurchaseInfo setAdditionReward(int additionReward) {
    this.additionReward = additionReward;
    setAdditionRewardIsSet(true);
    return this;
  }

  public void unsetAdditionReward() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ADDITIONREWARD_ISSET_ID);
  }

  /** Returns true if field additionReward is set (has been assigned a value) and false otherwise */
  public boolean isSetAdditionReward() {
    return EncodingUtils.testBit(__isset_bitfield, __ADDITIONREWARD_ISSET_ID);
  }

  public void setAdditionRewardIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ADDITIONREWARD_ISSET_ID, value);
  }

  /**
   * 图标
   */
  public String getIcon() {
    return this.icon;
  }

  /**
   * 图标
   */
  public InAppPurchaseInfo setIcon(String icon) {
    this.icon = icon;
    return this;
  }

  public void unsetIcon() {
    this.icon = null;
  }

  /** Returns true if field icon is set (has been assigned a value) and false otherwise */
  public boolean isSetIcon() {
    return this.icon != null;
  }

  public void setIconIsSet(boolean value) {
    if (!value) {
      this.icon = null;
    }
  }

  /**
   * 推荐描述
   */
  public boolean isRecommend() {
    return this.recommend;
  }

  /**
   * 推荐描述
   */
  public InAppPurchaseInfo setRecommend(boolean recommend) {
    this.recommend = recommend;
    setRecommendIsSet(true);
    return this;
  }

  public void unsetRecommend() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECOMMEND_ISSET_ID);
  }

  /** Returns true if field recommend is set (has been assigned a value) and false otherwise */
  public boolean isSetRecommend() {
    return EncodingUtils.testBit(__isset_bitfield, __RECOMMEND_ISSET_ID);
  }

  public void setRecommendIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECOMMEND_ISSET_ID, value);
  }

  /**
   * 购买完描述
   */
  public String getAfterByDesc() {
    return this.afterByDesc;
  }

  /**
   * 购买完描述
   */
  public InAppPurchaseInfo setAfterByDesc(String afterByDesc) {
    this.afterByDesc = afterByDesc;
    return this;
  }

  public void unsetAfterByDesc() {
    this.afterByDesc = null;
  }

  /** Returns true if field afterByDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetAfterByDesc() {
    return this.afterByDesc != null;
  }

  public void setAfterByDescIsSet(boolean value) {
    if (!value) {
      this.afterByDesc = null;
    }
  }

  /**
   * 推荐描述
   */
  public String getAdviseDesc() {
    return this.adviseDesc;
  }

  /**
   * 推荐描述
   */
  public InAppPurchaseInfo setAdviseDesc(String adviseDesc) {
    this.adviseDesc = adviseDesc;
    return this;
  }

  public void unsetAdviseDesc() {
    this.adviseDesc = null;
  }

  /** Returns true if field adviseDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetAdviseDesc() {
    return this.adviseDesc != null;
  }

  public void setAdviseDescIsSet(boolean value) {
    if (!value) {
      this.adviseDesc = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case ITEM_ID:
      if (value == null) {
        unsetItemId();
      } else {
        setItemId((String)value);
      }
      break;

    case ITEM_TYPE:
      if (value == null) {
        unsetItemType();
      } else {
        setItemType((Byte)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case DES:
      if (value == null) {
        unsetDes();
      } else {
        setDes((String)value);
      }
      break;

    case IB:
      if (value == null) {
        unsetIb();
      } else {
        setIb((Integer)value);
      }
      break;

    case CURRENCY:
      if (value == null) {
        unsetCurrency();
      } else {
        setCurrency((Double)value);
      }
      break;

    case CURRENCY_TYPE:
      if (value == null) {
        unsetCurrencyType();
      } else {
        setCurrencyType((String)value);
      }
      break;

    case ADDITION_REWARD:
      if (value == null) {
        unsetAdditionReward();
      } else {
        setAdditionReward((Integer)value);
      }
      break;

    case ICON:
      if (value == null) {
        unsetIcon();
      } else {
        setIcon((String)value);
      }
      break;

    case RECOMMEND:
      if (value == null) {
        unsetRecommend();
      } else {
        setRecommend((Boolean)value);
      }
      break;

    case AFTER_BY_DESC:
      if (value == null) {
        unsetAfterByDesc();
      } else {
        setAfterByDesc((String)value);
      }
      break;

    case ADVISE_DESC:
      if (value == null) {
        unsetAdviseDesc();
      } else {
        setAdviseDesc((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case ITEM_ID:
      return getItemId();

    case ITEM_TYPE:
      return Byte.valueOf(getItemType());

    case NAME:
      return getName();

    case DES:
      return getDes();

    case IB:
      return Integer.valueOf(getIb());

    case CURRENCY:
      return Double.valueOf(getCurrency());

    case CURRENCY_TYPE:
      return getCurrencyType();

    case ADDITION_REWARD:
      return Integer.valueOf(getAdditionReward());

    case ICON:
      return getIcon();

    case RECOMMEND:
      return Boolean.valueOf(isRecommend());

    case AFTER_BY_DESC:
      return getAfterByDesc();

    case ADVISE_DESC:
      return getAdviseDesc();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case ITEM_ID:
      return isSetItemId();
    case ITEM_TYPE:
      return isSetItemType();
    case NAME:
      return isSetName();
    case DES:
      return isSetDes();
    case IB:
      return isSetIb();
    case CURRENCY:
      return isSetCurrency();
    case CURRENCY_TYPE:
      return isSetCurrencyType();
    case ADDITION_REWARD:
      return isSetAdditionReward();
    case ICON:
      return isSetIcon();
    case RECOMMEND:
      return isSetRecommend();
    case AFTER_BY_DESC:
      return isSetAfterByDesc();
    case ADVISE_DESC:
      return isSetAdviseDesc();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof InAppPurchaseInfo)
      return this.equals((InAppPurchaseInfo)that);
    return false;
  }

  public boolean equals(InAppPurchaseInfo that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_itemId = true && this.isSetItemId();
    boolean that_present_itemId = true && that.isSetItemId();
    if (this_present_itemId || that_present_itemId) {
      if (!(this_present_itemId && that_present_itemId))
        return false;
      if (!this.itemId.equals(that.itemId))
        return false;
    }

    boolean this_present_itemType = true;
    boolean that_present_itemType = true;
    if (this_present_itemType || that_present_itemType) {
      if (!(this_present_itemType && that_present_itemType))
        return false;
      if (this.itemType != that.itemType)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_des = true && this.isSetDes();
    boolean that_present_des = true && that.isSetDes();
    if (this_present_des || that_present_des) {
      if (!(this_present_des && that_present_des))
        return false;
      if (!this.des.equals(that.des))
        return false;
    }

    boolean this_present_ib = true;
    boolean that_present_ib = true;
    if (this_present_ib || that_present_ib) {
      if (!(this_present_ib && that_present_ib))
        return false;
      if (this.ib != that.ib)
        return false;
    }

    boolean this_present_currency = true;
    boolean that_present_currency = true;
    if (this_present_currency || that_present_currency) {
      if (!(this_present_currency && that_present_currency))
        return false;
      if (this.currency != that.currency)
        return false;
    }

    boolean this_present_currencyType = true && this.isSetCurrencyType();
    boolean that_present_currencyType = true && that.isSetCurrencyType();
    if (this_present_currencyType || that_present_currencyType) {
      if (!(this_present_currencyType && that_present_currencyType))
        return false;
      if (!this.currencyType.equals(that.currencyType))
        return false;
    }

    boolean this_present_additionReward = true;
    boolean that_present_additionReward = true;
    if (this_present_additionReward || that_present_additionReward) {
      if (!(this_present_additionReward && that_present_additionReward))
        return false;
      if (this.additionReward != that.additionReward)
        return false;
    }

    boolean this_present_icon = true && this.isSetIcon();
    boolean that_present_icon = true && that.isSetIcon();
    if (this_present_icon || that_present_icon) {
      if (!(this_present_icon && that_present_icon))
        return false;
      if (!this.icon.equals(that.icon))
        return false;
    }

    boolean this_present_recommend = true;
    boolean that_present_recommend = true;
    if (this_present_recommend || that_present_recommend) {
      if (!(this_present_recommend && that_present_recommend))
        return false;
      if (this.recommend != that.recommend)
        return false;
    }

    boolean this_present_afterByDesc = true && this.isSetAfterByDesc();
    boolean that_present_afterByDesc = true && that.isSetAfterByDesc();
    if (this_present_afterByDesc || that_present_afterByDesc) {
      if (!(this_present_afterByDesc && that_present_afterByDesc))
        return false;
      if (!this.afterByDesc.equals(that.afterByDesc))
        return false;
    }

    boolean this_present_adviseDesc = true && this.isSetAdviseDesc();
    boolean that_present_adviseDesc = true && that.isSetAdviseDesc();
    if (this_present_adviseDesc || that_present_adviseDesc) {
      if (!(this_present_adviseDesc && that_present_adviseDesc))
        return false;
      if (!this.adviseDesc.equals(that.adviseDesc))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(InAppPurchaseInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    InAppPurchaseInfo typedOther = (InAppPurchaseInfo)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItemId()).compareTo(typedOther.isSetItemId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemId, typedOther.itemId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItemType()).compareTo(typedOther.isSetItemType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemType, typedOther.itemType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDes()).compareTo(typedOther.isSetDes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.des, typedOther.des);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIb()).compareTo(typedOther.isSetIb());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIb()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ib, typedOther.ib);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrency()).compareTo(typedOther.isSetCurrency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currency, typedOther.currency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrencyType()).compareTo(typedOther.isSetCurrencyType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrencyType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currencyType, typedOther.currencyType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdditionReward()).compareTo(typedOther.isSetAdditionReward());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdditionReward()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.additionReward, typedOther.additionReward);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIcon()).compareTo(typedOther.isSetIcon());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIcon()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.icon, typedOther.icon);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecommend()).compareTo(typedOther.isSetRecommend());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecommend()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recommend, typedOther.recommend);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAfterByDesc()).compareTo(typedOther.isSetAfterByDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAfterByDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.afterByDesc, typedOther.afterByDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdviseDesc()).compareTo(typedOther.isSetAdviseDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdviseDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adviseDesc, typedOther.adviseDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("InAppPurchaseInfo(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("itemId:");
    if (this.itemId == null) {
      sb.append("null");
    } else {
      sb.append(this.itemId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("itemType:");
    sb.append(this.itemType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("des:");
    if (this.des == null) {
      sb.append("null");
    } else {
      sb.append(this.des);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ib:");
    sb.append(this.ib);
    first = false;
    if (!first) sb.append(", ");
    sb.append("currency:");
    sb.append(this.currency);
    first = false;
    if (!first) sb.append(", ");
    sb.append("currencyType:");
    if (this.currencyType == null) {
      sb.append("null");
    } else {
      sb.append(this.currencyType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("additionReward:");
    sb.append(this.additionReward);
    first = false;
    if (!first) sb.append(", ");
    sb.append("icon:");
    if (this.icon == null) {
      sb.append("null");
    } else {
      sb.append(this.icon);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("recommend:");
    sb.append(this.recommend);
    first = false;
    if (!first) sb.append(", ");
    sb.append("afterByDesc:");
    if (this.afterByDesc == null) {
      sb.append("null");
    } else {
      sb.append(this.afterByDesc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("adviseDesc:");
    if (this.adviseDesc == null) {
      sb.append("null");
    } else {
      sb.append(this.adviseDesc);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class InAppPurchaseInfoStandardSchemeFactory implements SchemeFactory {
    public InAppPurchaseInfoStandardScheme getScheme() {
      return new InAppPurchaseInfoStandardScheme();
    }
  }

  private static class InAppPurchaseInfoStandardScheme extends StandardScheme<InAppPurchaseInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, InAppPurchaseInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ITEM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.itemId = iprot.readString();
              struct.setItemIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ITEM_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.itemType = iprot.readByte();
              struct.setItemTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.des = iprot.readString();
              struct.setDesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IB
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ib = iprot.readI32();
              struct.setIbIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CURRENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.currency = iprot.readDouble();
              struct.setCurrencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CURRENCY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currencyType = iprot.readString();
              struct.setCurrencyTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ADDITION_REWARD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.additionReward = iprot.readI32();
              struct.setAdditionRewardIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ICON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.icon = iprot.readString();
              struct.setIconIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // RECOMMEND
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.recommend = iprot.readBool();
              struct.setRecommendIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // AFTER_BY_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.afterByDesc = iprot.readString();
              struct.setAfterByDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ADVISE_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.adviseDesc = iprot.readString();
              struct.setAdviseDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, InAppPurchaseInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.itemId != null) {
        oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
        oprot.writeString(struct.itemId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ITEM_TYPE_FIELD_DESC);
      oprot.writeByte(struct.itemType);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.des != null) {
        oprot.writeFieldBegin(DES_FIELD_DESC);
        oprot.writeString(struct.des);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IB_FIELD_DESC);
      oprot.writeI32(struct.ib);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CURRENCY_FIELD_DESC);
      oprot.writeDouble(struct.currency);
      oprot.writeFieldEnd();
      if (struct.currencyType != null) {
        oprot.writeFieldBegin(CURRENCY_TYPE_FIELD_DESC);
        oprot.writeString(struct.currencyType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ADDITION_REWARD_FIELD_DESC);
      oprot.writeI32(struct.additionReward);
      oprot.writeFieldEnd();
      if (struct.icon != null) {
        oprot.writeFieldBegin(ICON_FIELD_DESC);
        oprot.writeString(struct.icon);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RECOMMEND_FIELD_DESC);
      oprot.writeBool(struct.recommend);
      oprot.writeFieldEnd();
      if (struct.afterByDesc != null) {
        oprot.writeFieldBegin(AFTER_BY_DESC_FIELD_DESC);
        oprot.writeString(struct.afterByDesc);
        oprot.writeFieldEnd();
      }
      if (struct.adviseDesc != null) {
        oprot.writeFieldBegin(ADVISE_DESC_FIELD_DESC);
        oprot.writeString(struct.adviseDesc);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class InAppPurchaseInfoTupleSchemeFactory implements SchemeFactory {
    public InAppPurchaseInfoTupleScheme getScheme() {
      return new InAppPurchaseInfoTupleScheme();
    }
  }

  private static class InAppPurchaseInfoTupleScheme extends TupleScheme<InAppPurchaseInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, InAppPurchaseInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetItemId()) {
        optionals.set(1);
      }
      if (struct.isSetItemType()) {
        optionals.set(2);
      }
      if (struct.isSetName()) {
        optionals.set(3);
      }
      if (struct.isSetDes()) {
        optionals.set(4);
      }
      if (struct.isSetIb()) {
        optionals.set(5);
      }
      if (struct.isSetCurrency()) {
        optionals.set(6);
      }
      if (struct.isSetCurrencyType()) {
        optionals.set(7);
      }
      if (struct.isSetAdditionReward()) {
        optionals.set(8);
      }
      if (struct.isSetIcon()) {
        optionals.set(9);
      }
      if (struct.isSetRecommend()) {
        optionals.set(10);
      }
      if (struct.isSetAfterByDesc()) {
        optionals.set(11);
      }
      if (struct.isSetAdviseDesc()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetItemId()) {
        oprot.writeString(struct.itemId);
      }
      if (struct.isSetItemType()) {
        oprot.writeByte(struct.itemType);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetDes()) {
        oprot.writeString(struct.des);
      }
      if (struct.isSetIb()) {
        oprot.writeI32(struct.ib);
      }
      if (struct.isSetCurrency()) {
        oprot.writeDouble(struct.currency);
      }
      if (struct.isSetCurrencyType()) {
        oprot.writeString(struct.currencyType);
      }
      if (struct.isSetAdditionReward()) {
        oprot.writeI32(struct.additionReward);
      }
      if (struct.isSetIcon()) {
        oprot.writeString(struct.icon);
      }
      if (struct.isSetRecommend()) {
        oprot.writeBool(struct.recommend);
      }
      if (struct.isSetAfterByDesc()) {
        oprot.writeString(struct.afterByDesc);
      }
      if (struct.isSetAdviseDesc()) {
        oprot.writeString(struct.adviseDesc);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, InAppPurchaseInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.itemId = iprot.readString();
        struct.setItemIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.itemType = iprot.readByte();
        struct.setItemTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.des = iprot.readString();
        struct.setDesIsSet(true);
      }
      if (incoming.get(5)) {
        struct.ib = iprot.readI32();
        struct.setIbIsSet(true);
      }
      if (incoming.get(6)) {
        struct.currency = iprot.readDouble();
        struct.setCurrencyIsSet(true);
      }
      if (incoming.get(7)) {
        struct.currencyType = iprot.readString();
        struct.setCurrencyTypeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.additionReward = iprot.readI32();
        struct.setAdditionRewardIsSet(true);
      }
      if (incoming.get(9)) {
        struct.icon = iprot.readString();
        struct.setIconIsSet(true);
      }
      if (incoming.get(10)) {
        struct.recommend = iprot.readBool();
        struct.setRecommendIsSet(true);
      }
      if (incoming.get(11)) {
        struct.afterByDesc = iprot.readString();
        struct.setAfterByDescIsSet(true);
      }
      if (incoming.get(12)) {
        struct.adviseDesc = iprot.readString();
        struct.setAdviseDescIsSet(true);
      }
    }
  }

}

