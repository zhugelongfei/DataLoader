/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SCSearchInvitePlayerInfosMsg implements org.apache.thrift.TBase<SCSearchInvitePlayerInfosMsg, SCSearchInvitePlayerInfosMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCSearchInvitePlayerInfosMsg");

  private static final org.apache.thrift.protocol.TField RELATION_FIELD_DESC = new org.apache.thrift.protocol.TField("relation", org.apache.thrift.protocol.TType.BYTE, (short)1);
  private static final org.apache.thrift.protocol.TField PLAYER_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("playerInfos", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCSearchInvitePlayerInfosMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCSearchInvitePlayerInfosMsgTupleSchemeFactory());
  }

  /**
   * 0-stranger 1-friend
   */
  public byte relation; // required
  public List<com.ling9527.music.common.msg.auto.InvitePlayerInfo> playerInfos; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 0-stranger 1-friend
     */
    RELATION((short)1, "relation"),
    PLAYER_INFOS((short)2, "playerInfos");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RELATION
          return RELATION;
        case 2: // PLAYER_INFOS
          return PLAYER_INFOS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RELATION_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RELATION, new org.apache.thrift.meta_data.FieldMetaData("relation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.PLAYER_INFOS, new org.apache.thrift.meta_data.FieldMetaData("playerInfos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.InvitePlayerInfo.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCSearchInvitePlayerInfosMsg.class, metaDataMap);
  }

  public SCSearchInvitePlayerInfosMsg() {
  }

  public SCSearchInvitePlayerInfosMsg(
    byte relation,
    List<com.ling9527.music.common.msg.auto.InvitePlayerInfo> playerInfos)
  {
    this();
    this.relation = relation;
    setRelationIsSet(true);
    this.playerInfos = playerInfos;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCSearchInvitePlayerInfosMsg(SCSearchInvitePlayerInfosMsg other) {
    __isset_bitfield = other.__isset_bitfield;
    this.relation = other.relation;
    if (other.isSetPlayerInfos()) {
      List<com.ling9527.music.common.msg.auto.InvitePlayerInfo> __this__playerInfos = new ArrayList<com.ling9527.music.common.msg.auto.InvitePlayerInfo>();
      for (com.ling9527.music.common.msg.auto.InvitePlayerInfo other_element : other.playerInfos) {
        __this__playerInfos.add(new com.ling9527.music.common.msg.auto.InvitePlayerInfo(other_element));
      }
      this.playerInfos = __this__playerInfos;
    }
  }

  public SCSearchInvitePlayerInfosMsg deepCopy() {
    return new SCSearchInvitePlayerInfosMsg(this);
  }

  @Override
  public void clear() {
    setRelationIsSet(false);
    this.relation = 0;
    this.playerInfos = null;
  }

  /**
   * 0-stranger 1-friend
   */
  public byte getRelation() {
    return this.relation;
  }

  /**
   * 0-stranger 1-friend
   */
  public SCSearchInvitePlayerInfosMsg setRelation(byte relation) {
    this.relation = relation;
    setRelationIsSet(true);
    return this;
  }

  public void unsetRelation() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RELATION_ISSET_ID);
  }

  /** Returns true if field relation is set (has been assigned a value) and false otherwise */
  public boolean isSetRelation() {
    return EncodingUtils.testBit(__isset_bitfield, __RELATION_ISSET_ID);
  }

  public void setRelationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RELATION_ISSET_ID, value);
  }

  public int getPlayerInfosSize() {
    return (this.playerInfos == null) ? 0 : this.playerInfos.size();
  }

  public java.util.Iterator<com.ling9527.music.common.msg.auto.InvitePlayerInfo> getPlayerInfosIterator() {
    return (this.playerInfos == null) ? null : this.playerInfos.iterator();
  }

  public void addToPlayerInfos(com.ling9527.music.common.msg.auto.InvitePlayerInfo elem) {
    if (this.playerInfos == null) {
      this.playerInfos = new ArrayList<com.ling9527.music.common.msg.auto.InvitePlayerInfo>();
    }
    this.playerInfos.add(elem);
  }

  public List<com.ling9527.music.common.msg.auto.InvitePlayerInfo> getPlayerInfos() {
    return this.playerInfos;
  }

  public SCSearchInvitePlayerInfosMsg setPlayerInfos(List<com.ling9527.music.common.msg.auto.InvitePlayerInfo> playerInfos) {
    this.playerInfos = playerInfos;
    return this;
  }

  public void unsetPlayerInfos() {
    this.playerInfos = null;
  }

  /** Returns true if field playerInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetPlayerInfos() {
    return this.playerInfos != null;
  }

  public void setPlayerInfosIsSet(boolean value) {
    if (!value) {
      this.playerInfos = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RELATION:
      if (value == null) {
        unsetRelation();
      } else {
        setRelation((Byte)value);
      }
      break;

    case PLAYER_INFOS:
      if (value == null) {
        unsetPlayerInfos();
      } else {
        setPlayerInfos((List<com.ling9527.music.common.msg.auto.InvitePlayerInfo>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RELATION:
      return Byte.valueOf(getRelation());

    case PLAYER_INFOS:
      return getPlayerInfos();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RELATION:
      return isSetRelation();
    case PLAYER_INFOS:
      return isSetPlayerInfos();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCSearchInvitePlayerInfosMsg)
      return this.equals((SCSearchInvitePlayerInfosMsg)that);
    return false;
  }

  public boolean equals(SCSearchInvitePlayerInfosMsg that) {
    if (that == null)
      return false;

    boolean this_present_relation = true;
    boolean that_present_relation = true;
    if (this_present_relation || that_present_relation) {
      if (!(this_present_relation && that_present_relation))
        return false;
      if (this.relation != that.relation)
        return false;
    }

    boolean this_present_playerInfos = true && this.isSetPlayerInfos();
    boolean that_present_playerInfos = true && that.isSetPlayerInfos();
    if (this_present_playerInfos || that_present_playerInfos) {
      if (!(this_present_playerInfos && that_present_playerInfos))
        return false;
      if (!this.playerInfos.equals(that.playerInfos))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCSearchInvitePlayerInfosMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCSearchInvitePlayerInfosMsg typedOther = (SCSearchInvitePlayerInfosMsg)other;

    lastComparison = Boolean.valueOf(isSetRelation()).compareTo(typedOther.isSetRelation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relation, typedOther.relation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlayerInfos()).compareTo(typedOther.isSetPlayerInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlayerInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.playerInfos, typedOther.playerInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCSearchInvitePlayerInfosMsg(");
    boolean first = true;

    sb.append("relation:");
    sb.append(this.relation);
    first = false;
    if (!first) sb.append(", ");
    sb.append("playerInfos:");
    if (this.playerInfos == null) {
      sb.append("null");
    } else {
      sb.append(this.playerInfos);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCSearchInvitePlayerInfosMsgStandardSchemeFactory implements SchemeFactory {
    public SCSearchInvitePlayerInfosMsgStandardScheme getScheme() {
      return new SCSearchInvitePlayerInfosMsgStandardScheme();
    }
  }

  private static class SCSearchInvitePlayerInfosMsgStandardScheme extends StandardScheme<SCSearchInvitePlayerInfosMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCSearchInvitePlayerInfosMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RELATION
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.relation = iprot.readByte();
              struct.setRelationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PLAYER_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.playerInfos = new ArrayList<com.ling9527.music.common.msg.auto.InvitePlayerInfo>(_list32.size);
                for (int _i33 = 0; _i33 < _list32.size; ++_i33)
                {
                  com.ling9527.music.common.msg.auto.InvitePlayerInfo _elem34; // required
                  _elem34 = new com.ling9527.music.common.msg.auto.InvitePlayerInfo();
                  _elem34.read(iprot);
                  struct.playerInfos.add(_elem34);
                }
                iprot.readListEnd();
              }
              struct.setPlayerInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCSearchInvitePlayerInfosMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(RELATION_FIELD_DESC);
      oprot.writeByte(struct.relation);
      oprot.writeFieldEnd();
      if (struct.playerInfos != null) {
        oprot.writeFieldBegin(PLAYER_INFOS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.playerInfos.size()));
          for (com.ling9527.music.common.msg.auto.InvitePlayerInfo _iter35 : struct.playerInfos)
          {
            _iter35.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCSearchInvitePlayerInfosMsgTupleSchemeFactory implements SchemeFactory {
    public SCSearchInvitePlayerInfosMsgTupleScheme getScheme() {
      return new SCSearchInvitePlayerInfosMsgTupleScheme();
    }
  }

  private static class SCSearchInvitePlayerInfosMsgTupleScheme extends TupleScheme<SCSearchInvitePlayerInfosMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCSearchInvitePlayerInfosMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRelation()) {
        optionals.set(0);
      }
      if (struct.isSetPlayerInfos()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetRelation()) {
        oprot.writeByte(struct.relation);
      }
      if (struct.isSetPlayerInfos()) {
        {
          oprot.writeI32(struct.playerInfos.size());
          for (com.ling9527.music.common.msg.auto.InvitePlayerInfo _iter36 : struct.playerInfos)
          {
            _iter36.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCSearchInvitePlayerInfosMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.relation = iprot.readByte();
        struct.setRelationIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.playerInfos = new ArrayList<com.ling9527.music.common.msg.auto.InvitePlayerInfo>(_list37.size);
          for (int _i38 = 0; _i38 < _list37.size; ++_i38)
          {
            com.ling9527.music.common.msg.auto.InvitePlayerInfo _elem39; // required
            _elem39 = new com.ling9527.music.common.msg.auto.InvitePlayerInfo();
            _elem39.read(iprot);
            struct.playerInfos.add(_elem39);
          }
        }
        struct.setPlayerInfosIsSet(true);
      }
    }
  }

}

