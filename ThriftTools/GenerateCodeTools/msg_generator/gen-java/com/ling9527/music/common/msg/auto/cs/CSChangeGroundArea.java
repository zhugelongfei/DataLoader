/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.cs;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 切换广场区域
 */
public class CSChangeGroundArea implements org.apache.thrift.TBase<CSChangeGroundArea, CSChangeGroundArea._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CSChangeGroundArea");

  private static final org.apache.thrift.protocol.TField TARGET_GROUND_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("targetGroundStatus", org.apache.thrift.protocol.TType.BYTE, (short)1);
  private static final org.apache.thrift.protocol.TField POS_X_FIELD_DESC = new org.apache.thrift.protocol.TField("posX", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField POS_Y_FIELD_DESC = new org.apache.thrift.protocol.TField("posY", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField POS_Z_FIELD_DESC = new org.apache.thrift.protocol.TField("posZ", org.apache.thrift.protocol.TType.DOUBLE, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CSChangeGroundAreaStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CSChangeGroundAreaTupleSchemeFactory());
  }

  /**
   * 目标区域GroundPlayerStatus
   */
  public byte targetGroundStatus; // required
  /**
   * 新的坐标
   */
  public double posX; // required
  public double posY; // required
  public double posZ; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 目标区域GroundPlayerStatus
     */
    TARGET_GROUND_STATUS((short)1, "targetGroundStatus"),
    /**
     * 新的坐标
     */
    POS_X((short)2, "posX"),
    POS_Y((short)3, "posY"),
    POS_Z((short)4, "posZ");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TARGET_GROUND_STATUS
          return TARGET_GROUND_STATUS;
        case 2: // POS_X
          return POS_X;
        case 3: // POS_Y
          return POS_Y;
        case 4: // POS_Z
          return POS_Z;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TARGETGROUNDSTATUS_ISSET_ID = 0;
  private static final int __POSX_ISSET_ID = 1;
  private static final int __POSY_ISSET_ID = 2;
  private static final int __POSZ_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TARGET_GROUND_STATUS, new org.apache.thrift.meta_data.FieldMetaData("targetGroundStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.POS_X, new org.apache.thrift.meta_data.FieldMetaData("posX", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.POS_Y, new org.apache.thrift.meta_data.FieldMetaData("posY", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.POS_Z, new org.apache.thrift.meta_data.FieldMetaData("posZ", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CSChangeGroundArea.class, metaDataMap);
  }

  public CSChangeGroundArea() {
  }

  public CSChangeGroundArea(
    byte targetGroundStatus,
    double posX,
    double posY,
    double posZ)
  {
    this();
    this.targetGroundStatus = targetGroundStatus;
    setTargetGroundStatusIsSet(true);
    this.posX = posX;
    setPosXIsSet(true);
    this.posY = posY;
    setPosYIsSet(true);
    this.posZ = posZ;
    setPosZIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CSChangeGroundArea(CSChangeGroundArea other) {
    __isset_bitfield = other.__isset_bitfield;
    this.targetGroundStatus = other.targetGroundStatus;
    this.posX = other.posX;
    this.posY = other.posY;
    this.posZ = other.posZ;
  }

  public CSChangeGroundArea deepCopy() {
    return new CSChangeGroundArea(this);
  }

  @Override
  public void clear() {
    setTargetGroundStatusIsSet(false);
    this.targetGroundStatus = 0;
    setPosXIsSet(false);
    this.posX = 0.0;
    setPosYIsSet(false);
    this.posY = 0.0;
    setPosZIsSet(false);
    this.posZ = 0.0;
  }

  /**
   * 目标区域GroundPlayerStatus
   */
  public byte getTargetGroundStatus() {
    return this.targetGroundStatus;
  }

  /**
   * 目标区域GroundPlayerStatus
   */
  public CSChangeGroundArea setTargetGroundStatus(byte targetGroundStatus) {
    this.targetGroundStatus = targetGroundStatus;
    setTargetGroundStatusIsSet(true);
    return this;
  }

  public void unsetTargetGroundStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TARGETGROUNDSTATUS_ISSET_ID);
  }

  /** Returns true if field targetGroundStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetTargetGroundStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __TARGETGROUNDSTATUS_ISSET_ID);
  }

  public void setTargetGroundStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TARGETGROUNDSTATUS_ISSET_ID, value);
  }

  /**
   * 新的坐标
   */
  public double getPosX() {
    return this.posX;
  }

  /**
   * 新的坐标
   */
  public CSChangeGroundArea setPosX(double posX) {
    this.posX = posX;
    setPosXIsSet(true);
    return this;
  }

  public void unsetPosX() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSX_ISSET_ID);
  }

  /** Returns true if field posX is set (has been assigned a value) and false otherwise */
  public boolean isSetPosX() {
    return EncodingUtils.testBit(__isset_bitfield, __POSX_ISSET_ID);
  }

  public void setPosXIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSX_ISSET_ID, value);
  }

  public double getPosY() {
    return this.posY;
  }

  public CSChangeGroundArea setPosY(double posY) {
    this.posY = posY;
    setPosYIsSet(true);
    return this;
  }

  public void unsetPosY() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSY_ISSET_ID);
  }

  /** Returns true if field posY is set (has been assigned a value) and false otherwise */
  public boolean isSetPosY() {
    return EncodingUtils.testBit(__isset_bitfield, __POSY_ISSET_ID);
  }

  public void setPosYIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSY_ISSET_ID, value);
  }

  public double getPosZ() {
    return this.posZ;
  }

  public CSChangeGroundArea setPosZ(double posZ) {
    this.posZ = posZ;
    setPosZIsSet(true);
    return this;
  }

  public void unsetPosZ() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSZ_ISSET_ID);
  }

  /** Returns true if field posZ is set (has been assigned a value) and false otherwise */
  public boolean isSetPosZ() {
    return EncodingUtils.testBit(__isset_bitfield, __POSZ_ISSET_ID);
  }

  public void setPosZIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSZ_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TARGET_GROUND_STATUS:
      if (value == null) {
        unsetTargetGroundStatus();
      } else {
        setTargetGroundStatus((Byte)value);
      }
      break;

    case POS_X:
      if (value == null) {
        unsetPosX();
      } else {
        setPosX((Double)value);
      }
      break;

    case POS_Y:
      if (value == null) {
        unsetPosY();
      } else {
        setPosY((Double)value);
      }
      break;

    case POS_Z:
      if (value == null) {
        unsetPosZ();
      } else {
        setPosZ((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TARGET_GROUND_STATUS:
      return Byte.valueOf(getTargetGroundStatus());

    case POS_X:
      return Double.valueOf(getPosX());

    case POS_Y:
      return Double.valueOf(getPosY());

    case POS_Z:
      return Double.valueOf(getPosZ());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TARGET_GROUND_STATUS:
      return isSetTargetGroundStatus();
    case POS_X:
      return isSetPosX();
    case POS_Y:
      return isSetPosY();
    case POS_Z:
      return isSetPosZ();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CSChangeGroundArea)
      return this.equals((CSChangeGroundArea)that);
    return false;
  }

  public boolean equals(CSChangeGroundArea that) {
    if (that == null)
      return false;

    boolean this_present_targetGroundStatus = true;
    boolean that_present_targetGroundStatus = true;
    if (this_present_targetGroundStatus || that_present_targetGroundStatus) {
      if (!(this_present_targetGroundStatus && that_present_targetGroundStatus))
        return false;
      if (this.targetGroundStatus != that.targetGroundStatus)
        return false;
    }

    boolean this_present_posX = true;
    boolean that_present_posX = true;
    if (this_present_posX || that_present_posX) {
      if (!(this_present_posX && that_present_posX))
        return false;
      if (this.posX != that.posX)
        return false;
    }

    boolean this_present_posY = true;
    boolean that_present_posY = true;
    if (this_present_posY || that_present_posY) {
      if (!(this_present_posY && that_present_posY))
        return false;
      if (this.posY != that.posY)
        return false;
    }

    boolean this_present_posZ = true;
    boolean that_present_posZ = true;
    if (this_present_posZ || that_present_posZ) {
      if (!(this_present_posZ && that_present_posZ))
        return false;
      if (this.posZ != that.posZ)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(CSChangeGroundArea other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CSChangeGroundArea typedOther = (CSChangeGroundArea)other;

    lastComparison = Boolean.valueOf(isSetTargetGroundStatus()).compareTo(typedOther.isSetTargetGroundStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTargetGroundStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targetGroundStatus, typedOther.targetGroundStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPosX()).compareTo(typedOther.isSetPosX());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPosX()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.posX, typedOther.posX);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPosY()).compareTo(typedOther.isSetPosY());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPosY()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.posY, typedOther.posY);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPosZ()).compareTo(typedOther.isSetPosZ());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPosZ()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.posZ, typedOther.posZ);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CSChangeGroundArea(");
    boolean first = true;

    sb.append("targetGroundStatus:");
    sb.append(this.targetGroundStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("posX:");
    sb.append(this.posX);
    first = false;
    if (!first) sb.append(", ");
    sb.append("posY:");
    sb.append(this.posY);
    first = false;
    if (!first) sb.append(", ");
    sb.append("posZ:");
    sb.append(this.posZ);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CSChangeGroundAreaStandardSchemeFactory implements SchemeFactory {
    public CSChangeGroundAreaStandardScheme getScheme() {
      return new CSChangeGroundAreaStandardScheme();
    }
  }

  private static class CSChangeGroundAreaStandardScheme extends StandardScheme<CSChangeGroundArea> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CSChangeGroundArea struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TARGET_GROUND_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.targetGroundStatus = iprot.readByte();
              struct.setTargetGroundStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // POS_X
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.posX = iprot.readDouble();
              struct.setPosXIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // POS_Y
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.posY = iprot.readDouble();
              struct.setPosYIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // POS_Z
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.posZ = iprot.readDouble();
              struct.setPosZIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CSChangeGroundArea struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TARGET_GROUND_STATUS_FIELD_DESC);
      oprot.writeByte(struct.targetGroundStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POS_X_FIELD_DESC);
      oprot.writeDouble(struct.posX);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POS_Y_FIELD_DESC);
      oprot.writeDouble(struct.posY);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POS_Z_FIELD_DESC);
      oprot.writeDouble(struct.posZ);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CSChangeGroundAreaTupleSchemeFactory implements SchemeFactory {
    public CSChangeGroundAreaTupleScheme getScheme() {
      return new CSChangeGroundAreaTupleScheme();
    }
  }

  private static class CSChangeGroundAreaTupleScheme extends TupleScheme<CSChangeGroundArea> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CSChangeGroundArea struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTargetGroundStatus()) {
        optionals.set(0);
      }
      if (struct.isSetPosX()) {
        optionals.set(1);
      }
      if (struct.isSetPosY()) {
        optionals.set(2);
      }
      if (struct.isSetPosZ()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetTargetGroundStatus()) {
        oprot.writeByte(struct.targetGroundStatus);
      }
      if (struct.isSetPosX()) {
        oprot.writeDouble(struct.posX);
      }
      if (struct.isSetPosY()) {
        oprot.writeDouble(struct.posY);
      }
      if (struct.isSetPosZ()) {
        oprot.writeDouble(struct.posZ);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CSChangeGroundArea struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.targetGroundStatus = iprot.readByte();
        struct.setTargetGroundStatusIsSet(true);
      }
      if (incoming.get(1)) {
        struct.posX = iprot.readDouble();
        struct.setPosXIsSet(true);
      }
      if (incoming.get(2)) {
        struct.posY = iprot.readDouble();
        struct.setPosYIsSet(true);
      }
      if (incoming.get(3)) {
        struct.posZ = iprot.readDouble();
        struct.setPosZIsSet(true);
      }
    }
  }

}

