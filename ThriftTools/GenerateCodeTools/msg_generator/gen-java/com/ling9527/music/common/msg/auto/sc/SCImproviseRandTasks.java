/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 即兴表演随机任务
 */
public class SCImproviseRandTasks implements org.apache.thrift.TBase<SCImproviseRandTasks, SCImproviseRandTasks._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCImproviseRandTasks");

  private static final org.apache.thrift.protocol.TField RAND_TASK_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("randTaskIds", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField CHOICED_TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("choicedTaskId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PERF_PRIZE_COUPON_FIELD_DESC = new org.apache.thrift.protocol.TField("perfPrizeCoupon", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCImproviseRandTasksStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCImproviseRandTasksTupleSchemeFactory());
  }

  /**
   * 随机任务id列表
   */
  public List<Integer> randTaskIds; // required
  /**
   * 选择的随机任务id
   */
  public int choicedTaskId; // required
  /**
   * 演出奖励
   */
  public int perfPrizeCoupon; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 随机任务id列表
     */
    RAND_TASK_IDS((short)1, "randTaskIds"),
    /**
     * 选择的随机任务id
     */
    CHOICED_TASK_ID((short)2, "choicedTaskId"),
    /**
     * 演出奖励
     */
    PERF_PRIZE_COUPON((short)3, "perfPrizeCoupon");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RAND_TASK_IDS
          return RAND_TASK_IDS;
        case 2: // CHOICED_TASK_ID
          return CHOICED_TASK_ID;
        case 3: // PERF_PRIZE_COUPON
          return PERF_PRIZE_COUPON;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CHOICEDTASKID_ISSET_ID = 0;
  private static final int __PERFPRIZECOUPON_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RAND_TASK_IDS, new org.apache.thrift.meta_data.FieldMetaData("randTaskIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.CHOICED_TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("choicedTaskId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PERF_PRIZE_COUPON, new org.apache.thrift.meta_data.FieldMetaData("perfPrizeCoupon", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCImproviseRandTasks.class, metaDataMap);
  }

  public SCImproviseRandTasks() {
  }

  public SCImproviseRandTasks(
    List<Integer> randTaskIds,
    int choicedTaskId,
    int perfPrizeCoupon)
  {
    this();
    this.randTaskIds = randTaskIds;
    this.choicedTaskId = choicedTaskId;
    setChoicedTaskIdIsSet(true);
    this.perfPrizeCoupon = perfPrizeCoupon;
    setPerfPrizeCouponIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCImproviseRandTasks(SCImproviseRandTasks other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetRandTaskIds()) {
      List<Integer> __this__randTaskIds = new ArrayList<Integer>();
      for (Integer other_element : other.randTaskIds) {
        __this__randTaskIds.add(other_element);
      }
      this.randTaskIds = __this__randTaskIds;
    }
    this.choicedTaskId = other.choicedTaskId;
    this.perfPrizeCoupon = other.perfPrizeCoupon;
  }

  public SCImproviseRandTasks deepCopy() {
    return new SCImproviseRandTasks(this);
  }

  @Override
  public void clear() {
    this.randTaskIds = null;
    setChoicedTaskIdIsSet(false);
    this.choicedTaskId = 0;
    setPerfPrizeCouponIsSet(false);
    this.perfPrizeCoupon = 0;
  }

  public int getRandTaskIdsSize() {
    return (this.randTaskIds == null) ? 0 : this.randTaskIds.size();
  }

  public java.util.Iterator<Integer> getRandTaskIdsIterator() {
    return (this.randTaskIds == null) ? null : this.randTaskIds.iterator();
  }

  public void addToRandTaskIds(int elem) {
    if (this.randTaskIds == null) {
      this.randTaskIds = new ArrayList<Integer>();
    }
    this.randTaskIds.add(elem);
  }

  /**
   * 随机任务id列表
   */
  public List<Integer> getRandTaskIds() {
    return this.randTaskIds;
  }

  /**
   * 随机任务id列表
   */
  public SCImproviseRandTasks setRandTaskIds(List<Integer> randTaskIds) {
    this.randTaskIds = randTaskIds;
    return this;
  }

  public void unsetRandTaskIds() {
    this.randTaskIds = null;
  }

  /** Returns true if field randTaskIds is set (has been assigned a value) and false otherwise */
  public boolean isSetRandTaskIds() {
    return this.randTaskIds != null;
  }

  public void setRandTaskIdsIsSet(boolean value) {
    if (!value) {
      this.randTaskIds = null;
    }
  }

  /**
   * 选择的随机任务id
   */
  public int getChoicedTaskId() {
    return this.choicedTaskId;
  }

  /**
   * 选择的随机任务id
   */
  public SCImproviseRandTasks setChoicedTaskId(int choicedTaskId) {
    this.choicedTaskId = choicedTaskId;
    setChoicedTaskIdIsSet(true);
    return this;
  }

  public void unsetChoicedTaskId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHOICEDTASKID_ISSET_ID);
  }

  /** Returns true if field choicedTaskId is set (has been assigned a value) and false otherwise */
  public boolean isSetChoicedTaskId() {
    return EncodingUtils.testBit(__isset_bitfield, __CHOICEDTASKID_ISSET_ID);
  }

  public void setChoicedTaskIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHOICEDTASKID_ISSET_ID, value);
  }

  /**
   * 演出奖励
   */
  public int getPerfPrizeCoupon() {
    return this.perfPrizeCoupon;
  }

  /**
   * 演出奖励
   */
  public SCImproviseRandTasks setPerfPrizeCoupon(int perfPrizeCoupon) {
    this.perfPrizeCoupon = perfPrizeCoupon;
    setPerfPrizeCouponIsSet(true);
    return this;
  }

  public void unsetPerfPrizeCoupon() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PERFPRIZECOUPON_ISSET_ID);
  }

  /** Returns true if field perfPrizeCoupon is set (has been assigned a value) and false otherwise */
  public boolean isSetPerfPrizeCoupon() {
    return EncodingUtils.testBit(__isset_bitfield, __PERFPRIZECOUPON_ISSET_ID);
  }

  public void setPerfPrizeCouponIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PERFPRIZECOUPON_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RAND_TASK_IDS:
      if (value == null) {
        unsetRandTaskIds();
      } else {
        setRandTaskIds((List<Integer>)value);
      }
      break;

    case CHOICED_TASK_ID:
      if (value == null) {
        unsetChoicedTaskId();
      } else {
        setChoicedTaskId((Integer)value);
      }
      break;

    case PERF_PRIZE_COUPON:
      if (value == null) {
        unsetPerfPrizeCoupon();
      } else {
        setPerfPrizeCoupon((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RAND_TASK_IDS:
      return getRandTaskIds();

    case CHOICED_TASK_ID:
      return Integer.valueOf(getChoicedTaskId());

    case PERF_PRIZE_COUPON:
      return Integer.valueOf(getPerfPrizeCoupon());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RAND_TASK_IDS:
      return isSetRandTaskIds();
    case CHOICED_TASK_ID:
      return isSetChoicedTaskId();
    case PERF_PRIZE_COUPON:
      return isSetPerfPrizeCoupon();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCImproviseRandTasks)
      return this.equals((SCImproviseRandTasks)that);
    return false;
  }

  public boolean equals(SCImproviseRandTasks that) {
    if (that == null)
      return false;

    boolean this_present_randTaskIds = true && this.isSetRandTaskIds();
    boolean that_present_randTaskIds = true && that.isSetRandTaskIds();
    if (this_present_randTaskIds || that_present_randTaskIds) {
      if (!(this_present_randTaskIds && that_present_randTaskIds))
        return false;
      if (!this.randTaskIds.equals(that.randTaskIds))
        return false;
    }

    boolean this_present_choicedTaskId = true;
    boolean that_present_choicedTaskId = true;
    if (this_present_choicedTaskId || that_present_choicedTaskId) {
      if (!(this_present_choicedTaskId && that_present_choicedTaskId))
        return false;
      if (this.choicedTaskId != that.choicedTaskId)
        return false;
    }

    boolean this_present_perfPrizeCoupon = true;
    boolean that_present_perfPrizeCoupon = true;
    if (this_present_perfPrizeCoupon || that_present_perfPrizeCoupon) {
      if (!(this_present_perfPrizeCoupon && that_present_perfPrizeCoupon))
        return false;
      if (this.perfPrizeCoupon != that.perfPrizeCoupon)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCImproviseRandTasks other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCImproviseRandTasks typedOther = (SCImproviseRandTasks)other;

    lastComparison = Boolean.valueOf(isSetRandTaskIds()).compareTo(typedOther.isSetRandTaskIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRandTaskIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.randTaskIds, typedOther.randTaskIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChoicedTaskId()).compareTo(typedOther.isSetChoicedTaskId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChoicedTaskId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.choicedTaskId, typedOther.choicedTaskId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPerfPrizeCoupon()).compareTo(typedOther.isSetPerfPrizeCoupon());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPerfPrizeCoupon()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.perfPrizeCoupon, typedOther.perfPrizeCoupon);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCImproviseRandTasks(");
    boolean first = true;

    sb.append("randTaskIds:");
    if (this.randTaskIds == null) {
      sb.append("null");
    } else {
      sb.append(this.randTaskIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("choicedTaskId:");
    sb.append(this.choicedTaskId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("perfPrizeCoupon:");
    sb.append(this.perfPrizeCoupon);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCImproviseRandTasksStandardSchemeFactory implements SchemeFactory {
    public SCImproviseRandTasksStandardScheme getScheme() {
      return new SCImproviseRandTasksStandardScheme();
    }
  }

  private static class SCImproviseRandTasksStandardScheme extends StandardScheme<SCImproviseRandTasks> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCImproviseRandTasks struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RAND_TASK_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.randTaskIds = new ArrayList<Integer>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  int _elem2; // required
                  _elem2 = iprot.readI32();
                  struct.randTaskIds.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setRandTaskIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CHOICED_TASK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.choicedTaskId = iprot.readI32();
              struct.setChoicedTaskIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PERF_PRIZE_COUPON
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.perfPrizeCoupon = iprot.readI32();
              struct.setPerfPrizeCouponIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCImproviseRandTasks struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.randTaskIds != null) {
        oprot.writeFieldBegin(RAND_TASK_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.randTaskIds.size()));
          for (int _iter3 : struct.randTaskIds)
          {
            oprot.writeI32(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CHOICED_TASK_ID_FIELD_DESC);
      oprot.writeI32(struct.choicedTaskId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PERF_PRIZE_COUPON_FIELD_DESC);
      oprot.writeI32(struct.perfPrizeCoupon);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCImproviseRandTasksTupleSchemeFactory implements SchemeFactory {
    public SCImproviseRandTasksTupleScheme getScheme() {
      return new SCImproviseRandTasksTupleScheme();
    }
  }

  private static class SCImproviseRandTasksTupleScheme extends TupleScheme<SCImproviseRandTasks> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCImproviseRandTasks struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRandTaskIds()) {
        optionals.set(0);
      }
      if (struct.isSetChoicedTaskId()) {
        optionals.set(1);
      }
      if (struct.isSetPerfPrizeCoupon()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetRandTaskIds()) {
        {
          oprot.writeI32(struct.randTaskIds.size());
          for (int _iter4 : struct.randTaskIds)
          {
            oprot.writeI32(_iter4);
          }
        }
      }
      if (struct.isSetChoicedTaskId()) {
        oprot.writeI32(struct.choicedTaskId);
      }
      if (struct.isSetPerfPrizeCoupon()) {
        oprot.writeI32(struct.perfPrizeCoupon);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCImproviseRandTasks struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.randTaskIds = new ArrayList<Integer>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            int _elem7; // required
            _elem7 = iprot.readI32();
            struct.randTaskIds.add(_elem7);
          }
        }
        struct.setRandTaskIdsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.choicedTaskId = iprot.readI32();
        struct.setChoicedTaskIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.perfPrizeCoupon = iprot.readI32();
        struct.setPerfPrizeCouponIsSet(true);
      }
    }
  }

}

