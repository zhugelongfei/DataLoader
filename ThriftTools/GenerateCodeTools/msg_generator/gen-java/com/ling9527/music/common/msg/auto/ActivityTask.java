/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ActivityTask implements org.apache.thrift.TBase<ActivityTask, ActivityTask._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ActivityTask");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("desc", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField COUNTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("counterId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField COMPLETE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("completeCount", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField IS_REWARD_FIELD_DESC = new org.apache.thrift.protocol.TField("isReward", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ActivityTaskStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ActivityTaskTupleSchemeFactory());
  }

  public int id; // required
  public String desc; // required
  public int counterId; // required
  public int completeCount; // required
  public int isReward; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    DESC((short)2, "desc"),
    COUNTER_ID((short)3, "counterId"),
    COMPLETE_COUNT((short)4, "completeCount"),
    IS_REWARD((short)5, "isReward");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // DESC
          return DESC;
        case 3: // COUNTER_ID
          return COUNTER_ID;
        case 4: // COMPLETE_COUNT
          return COMPLETE_COUNT;
        case 5: // IS_REWARD
          return IS_REWARD;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __COUNTERID_ISSET_ID = 1;
  private static final int __COMPLETECOUNT_ISSET_ID = 2;
  private static final int __ISREWARD_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DESC, new org.apache.thrift.meta_data.FieldMetaData("desc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COUNTER_ID, new org.apache.thrift.meta_data.FieldMetaData("counterId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMPLETE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("completeCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_REWARD, new org.apache.thrift.meta_data.FieldMetaData("isReward", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ActivityTask.class, metaDataMap);
  }

  public ActivityTask() {
  }

  public ActivityTask(
    int id,
    String desc,
    int counterId,
    int completeCount,
    int isReward)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.desc = desc;
    this.counterId = counterId;
    setCounterIdIsSet(true);
    this.completeCount = completeCount;
    setCompleteCountIsSet(true);
    this.isReward = isReward;
    setIsRewardIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ActivityTask(ActivityTask other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetDesc()) {
      this.desc = other.desc;
    }
    this.counterId = other.counterId;
    this.completeCount = other.completeCount;
    this.isReward = other.isReward;
  }

  public ActivityTask deepCopy() {
    return new ActivityTask(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.desc = null;
    setCounterIdIsSet(false);
    this.counterId = 0;
    setCompleteCountIsSet(false);
    this.completeCount = 0;
    setIsRewardIsSet(false);
    this.isReward = 0;
  }

  public int getId() {
    return this.id;
  }

  public ActivityTask setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getDesc() {
    return this.desc;
  }

  public ActivityTask setDesc(String desc) {
    this.desc = desc;
    return this;
  }

  public void unsetDesc() {
    this.desc = null;
  }

  /** Returns true if field desc is set (has been assigned a value) and false otherwise */
  public boolean isSetDesc() {
    return this.desc != null;
  }

  public void setDescIsSet(boolean value) {
    if (!value) {
      this.desc = null;
    }
  }

  public int getCounterId() {
    return this.counterId;
  }

  public ActivityTask setCounterId(int counterId) {
    this.counterId = counterId;
    setCounterIdIsSet(true);
    return this;
  }

  public void unsetCounterId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNTERID_ISSET_ID);
  }

  /** Returns true if field counterId is set (has been assigned a value) and false otherwise */
  public boolean isSetCounterId() {
    return EncodingUtils.testBit(__isset_bitfield, __COUNTERID_ISSET_ID);
  }

  public void setCounterIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNTERID_ISSET_ID, value);
  }

  public int getCompleteCount() {
    return this.completeCount;
  }

  public ActivityTask setCompleteCount(int completeCount) {
    this.completeCount = completeCount;
    setCompleteCountIsSet(true);
    return this;
  }

  public void unsetCompleteCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPLETECOUNT_ISSET_ID);
  }

  /** Returns true if field completeCount is set (has been assigned a value) and false otherwise */
  public boolean isSetCompleteCount() {
    return EncodingUtils.testBit(__isset_bitfield, __COMPLETECOUNT_ISSET_ID);
  }

  public void setCompleteCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPLETECOUNT_ISSET_ID, value);
  }

  public int getIsReward() {
    return this.isReward;
  }

  public ActivityTask setIsReward(int isReward) {
    this.isReward = isReward;
    setIsRewardIsSet(true);
    return this;
  }

  public void unsetIsReward() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISREWARD_ISSET_ID);
  }

  /** Returns true if field isReward is set (has been assigned a value) and false otherwise */
  public boolean isSetIsReward() {
    return EncodingUtils.testBit(__isset_bitfield, __ISREWARD_ISSET_ID);
  }

  public void setIsRewardIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISREWARD_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case DESC:
      if (value == null) {
        unsetDesc();
      } else {
        setDesc((String)value);
      }
      break;

    case COUNTER_ID:
      if (value == null) {
        unsetCounterId();
      } else {
        setCounterId((Integer)value);
      }
      break;

    case COMPLETE_COUNT:
      if (value == null) {
        unsetCompleteCount();
      } else {
        setCompleteCount((Integer)value);
      }
      break;

    case IS_REWARD:
      if (value == null) {
        unsetIsReward();
      } else {
        setIsReward((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case DESC:
      return getDesc();

    case COUNTER_ID:
      return Integer.valueOf(getCounterId());

    case COMPLETE_COUNT:
      return Integer.valueOf(getCompleteCount());

    case IS_REWARD:
      return Integer.valueOf(getIsReward());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case DESC:
      return isSetDesc();
    case COUNTER_ID:
      return isSetCounterId();
    case COMPLETE_COUNT:
      return isSetCompleteCount();
    case IS_REWARD:
      return isSetIsReward();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ActivityTask)
      return this.equals((ActivityTask)that);
    return false;
  }

  public boolean equals(ActivityTask that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_desc = true && this.isSetDesc();
    boolean that_present_desc = true && that.isSetDesc();
    if (this_present_desc || that_present_desc) {
      if (!(this_present_desc && that_present_desc))
        return false;
      if (!this.desc.equals(that.desc))
        return false;
    }

    boolean this_present_counterId = true;
    boolean that_present_counterId = true;
    if (this_present_counterId || that_present_counterId) {
      if (!(this_present_counterId && that_present_counterId))
        return false;
      if (this.counterId != that.counterId)
        return false;
    }

    boolean this_present_completeCount = true;
    boolean that_present_completeCount = true;
    if (this_present_completeCount || that_present_completeCount) {
      if (!(this_present_completeCount && that_present_completeCount))
        return false;
      if (this.completeCount != that.completeCount)
        return false;
    }

    boolean this_present_isReward = true;
    boolean that_present_isReward = true;
    if (this_present_isReward || that_present_isReward) {
      if (!(this_present_isReward && that_present_isReward))
        return false;
      if (this.isReward != that.isReward)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ActivityTask other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ActivityTask typedOther = (ActivityTask)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDesc()).compareTo(typedOther.isSetDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.desc, typedOther.desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCounterId()).compareTo(typedOther.isSetCounterId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCounterId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.counterId, typedOther.counterId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompleteCount()).compareTo(typedOther.isSetCompleteCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompleteCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.completeCount, typedOther.completeCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsReward()).compareTo(typedOther.isSetIsReward());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsReward()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isReward, typedOther.isReward);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ActivityTask(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("desc:");
    if (this.desc == null) {
      sb.append("null");
    } else {
      sb.append(this.desc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("counterId:");
    sb.append(this.counterId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("completeCount:");
    sb.append(this.completeCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isReward:");
    sb.append(this.isReward);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ActivityTaskStandardSchemeFactory implements SchemeFactory {
    public ActivityTaskStandardScheme getScheme() {
      return new ActivityTaskStandardScheme();
    }
  }

  private static class ActivityTaskStandardScheme extends StandardScheme<ActivityTask> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ActivityTask struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.desc = iprot.readString();
              struct.setDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COUNTER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.counterId = iprot.readI32();
              struct.setCounterIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COMPLETE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.completeCount = iprot.readI32();
              struct.setCompleteCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_REWARD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isReward = iprot.readI32();
              struct.setIsRewardIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ActivityTask struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.desc != null) {
        oprot.writeFieldBegin(DESC_FIELD_DESC);
        oprot.writeString(struct.desc);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(COUNTER_ID_FIELD_DESC);
      oprot.writeI32(struct.counterId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COMPLETE_COUNT_FIELD_DESC);
      oprot.writeI32(struct.completeCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_REWARD_FIELD_DESC);
      oprot.writeI32(struct.isReward);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ActivityTaskTupleSchemeFactory implements SchemeFactory {
    public ActivityTaskTupleScheme getScheme() {
      return new ActivityTaskTupleScheme();
    }
  }

  private static class ActivityTaskTupleScheme extends TupleScheme<ActivityTask> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ActivityTask struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetDesc()) {
        optionals.set(1);
      }
      if (struct.isSetCounterId()) {
        optionals.set(2);
      }
      if (struct.isSetCompleteCount()) {
        optionals.set(3);
      }
      if (struct.isSetIsReward()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetDesc()) {
        oprot.writeString(struct.desc);
      }
      if (struct.isSetCounterId()) {
        oprot.writeI32(struct.counterId);
      }
      if (struct.isSetCompleteCount()) {
        oprot.writeI32(struct.completeCount);
      }
      if (struct.isSetIsReward()) {
        oprot.writeI32(struct.isReward);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ActivityTask struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.desc = iprot.readString();
        struct.setDescIsSet(true);
      }
      if (incoming.get(2)) {
        struct.counterId = iprot.readI32();
        struct.setCounterIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.completeCount = iprot.readI32();
        struct.setCompleteCountIsSet(true);
      }
      if (incoming.get(4)) {
        struct.isReward = iprot.readI32();
        struct.setIsRewardIsSet(true);
      }
    }
  }

}

