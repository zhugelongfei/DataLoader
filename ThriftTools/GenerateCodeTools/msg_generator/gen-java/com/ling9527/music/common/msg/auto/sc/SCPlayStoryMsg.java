/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 播放剧情
 */
public class SCPlayStoryMsg implements org.apache.thrift.TBase<SCPlayStoryMsg, SCPlayStoryMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCPlayStoryMsg");

  private static final org.apache.thrift.protocol.TField STORY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("storyId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PLAY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("playType", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField RETURN_UI_FIELD_DESC = new org.apache.thrift.protocol.TField("returnUI", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCPlayStoryMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCPlayStoryMsgTupleSchemeFactory());
  }

  public int storyId; // required
  /**
   * 
   * @see PlayStoryType
   */
  public PlayStoryType playType; // required
  /**
   * 播放完返回ui id
   */
  public int returnUI; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STORY_ID((short)1, "storyId"),
    /**
     * 
     * @see PlayStoryType
     */
    PLAY_TYPE((short)2, "playType"),
    /**
     * 播放完返回ui id
     */
    RETURN_UI((short)3, "returnUI");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STORY_ID
          return STORY_ID;
        case 2: // PLAY_TYPE
          return PLAY_TYPE;
        case 3: // RETURN_UI
          return RETURN_UI;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STORYID_ISSET_ID = 0;
  private static final int __RETURNUI_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.RETURN_UI};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STORY_ID, new org.apache.thrift.meta_data.FieldMetaData("storyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PLAY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("playType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PlayStoryType.class)));
    tmpMap.put(_Fields.RETURN_UI, new org.apache.thrift.meta_data.FieldMetaData("returnUI", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCPlayStoryMsg.class, metaDataMap);
  }

  public SCPlayStoryMsg() {
  }

  public SCPlayStoryMsg(
    int storyId,
    PlayStoryType playType)
  {
    this();
    this.storyId = storyId;
    setStoryIdIsSet(true);
    this.playType = playType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCPlayStoryMsg(SCPlayStoryMsg other) {
    __isset_bitfield = other.__isset_bitfield;
    this.storyId = other.storyId;
    if (other.isSetPlayType()) {
      this.playType = other.playType;
    }
    this.returnUI = other.returnUI;
  }

  public SCPlayStoryMsg deepCopy() {
    return new SCPlayStoryMsg(this);
  }

  @Override
  public void clear() {
    setStoryIdIsSet(false);
    this.storyId = 0;
    this.playType = null;
    setReturnUIIsSet(false);
    this.returnUI = 0;
  }

  public int getStoryId() {
    return this.storyId;
  }

  public SCPlayStoryMsg setStoryId(int storyId) {
    this.storyId = storyId;
    setStoryIdIsSet(true);
    return this;
  }

  public void unsetStoryId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STORYID_ISSET_ID);
  }

  /** Returns true if field storyId is set (has been assigned a value) and false otherwise */
  public boolean isSetStoryId() {
    return EncodingUtils.testBit(__isset_bitfield, __STORYID_ISSET_ID);
  }

  public void setStoryIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STORYID_ISSET_ID, value);
  }

  /**
   * 
   * @see PlayStoryType
   */
  public PlayStoryType getPlayType() {
    return this.playType;
  }

  /**
   * 
   * @see PlayStoryType
   */
  public SCPlayStoryMsg setPlayType(PlayStoryType playType) {
    this.playType = playType;
    return this;
  }

  public void unsetPlayType() {
    this.playType = null;
  }

  /** Returns true if field playType is set (has been assigned a value) and false otherwise */
  public boolean isSetPlayType() {
    return this.playType != null;
  }

  public void setPlayTypeIsSet(boolean value) {
    if (!value) {
      this.playType = null;
    }
  }

  /**
   * 播放完返回ui id
   */
  public int getReturnUI() {
    return this.returnUI;
  }

  /**
   * 播放完返回ui id
   */
  public SCPlayStoryMsg setReturnUI(int returnUI) {
    this.returnUI = returnUI;
    setReturnUIIsSet(true);
    return this;
  }

  public void unsetReturnUI() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RETURNUI_ISSET_ID);
  }

  /** Returns true if field returnUI is set (has been assigned a value) and false otherwise */
  public boolean isSetReturnUI() {
    return EncodingUtils.testBit(__isset_bitfield, __RETURNUI_ISSET_ID);
  }

  public void setReturnUIIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RETURNUI_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STORY_ID:
      if (value == null) {
        unsetStoryId();
      } else {
        setStoryId((Integer)value);
      }
      break;

    case PLAY_TYPE:
      if (value == null) {
        unsetPlayType();
      } else {
        setPlayType((PlayStoryType)value);
      }
      break;

    case RETURN_UI:
      if (value == null) {
        unsetReturnUI();
      } else {
        setReturnUI((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STORY_ID:
      return Integer.valueOf(getStoryId());

    case PLAY_TYPE:
      return getPlayType();

    case RETURN_UI:
      return Integer.valueOf(getReturnUI());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STORY_ID:
      return isSetStoryId();
    case PLAY_TYPE:
      return isSetPlayType();
    case RETURN_UI:
      return isSetReturnUI();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCPlayStoryMsg)
      return this.equals((SCPlayStoryMsg)that);
    return false;
  }

  public boolean equals(SCPlayStoryMsg that) {
    if (that == null)
      return false;

    boolean this_present_storyId = true;
    boolean that_present_storyId = true;
    if (this_present_storyId || that_present_storyId) {
      if (!(this_present_storyId && that_present_storyId))
        return false;
      if (this.storyId != that.storyId)
        return false;
    }

    boolean this_present_playType = true && this.isSetPlayType();
    boolean that_present_playType = true && that.isSetPlayType();
    if (this_present_playType || that_present_playType) {
      if (!(this_present_playType && that_present_playType))
        return false;
      if (!this.playType.equals(that.playType))
        return false;
    }

    boolean this_present_returnUI = true && this.isSetReturnUI();
    boolean that_present_returnUI = true && that.isSetReturnUI();
    if (this_present_returnUI || that_present_returnUI) {
      if (!(this_present_returnUI && that_present_returnUI))
        return false;
      if (this.returnUI != that.returnUI)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCPlayStoryMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCPlayStoryMsg typedOther = (SCPlayStoryMsg)other;

    lastComparison = Boolean.valueOf(isSetStoryId()).compareTo(typedOther.isSetStoryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStoryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.storyId, typedOther.storyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlayType()).compareTo(typedOther.isSetPlayType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlayType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.playType, typedOther.playType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReturnUI()).compareTo(typedOther.isSetReturnUI());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReturnUI()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.returnUI, typedOther.returnUI);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCPlayStoryMsg(");
    boolean first = true;

    sb.append("storyId:");
    sb.append(this.storyId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("playType:");
    if (this.playType == null) {
      sb.append("null");
    } else {
      sb.append(this.playType);
    }
    first = false;
    if (isSetReturnUI()) {
      if (!first) sb.append(", ");
      sb.append("returnUI:");
      sb.append(this.returnUI);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCPlayStoryMsgStandardSchemeFactory implements SchemeFactory {
    public SCPlayStoryMsgStandardScheme getScheme() {
      return new SCPlayStoryMsgStandardScheme();
    }
  }

  private static class SCPlayStoryMsgStandardScheme extends StandardScheme<SCPlayStoryMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCPlayStoryMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STORY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.storyId = iprot.readI32();
              struct.setStoryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PLAY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.playType = PlayStoryType.findByValue(iprot.readI32());
              struct.setPlayTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RETURN_UI
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.returnUI = iprot.readI32();
              struct.setReturnUIIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCPlayStoryMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(STORY_ID_FIELD_DESC);
      oprot.writeI32(struct.storyId);
      oprot.writeFieldEnd();
      if (struct.playType != null) {
        oprot.writeFieldBegin(PLAY_TYPE_FIELD_DESC);
        oprot.writeI32(struct.playType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.isSetReturnUI()) {
        oprot.writeFieldBegin(RETURN_UI_FIELD_DESC);
        oprot.writeI32(struct.returnUI);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCPlayStoryMsgTupleSchemeFactory implements SchemeFactory {
    public SCPlayStoryMsgTupleScheme getScheme() {
      return new SCPlayStoryMsgTupleScheme();
    }
  }

  private static class SCPlayStoryMsgTupleScheme extends TupleScheme<SCPlayStoryMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCPlayStoryMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetStoryId()) {
        optionals.set(0);
      }
      if (struct.isSetPlayType()) {
        optionals.set(1);
      }
      if (struct.isSetReturnUI()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetStoryId()) {
        oprot.writeI32(struct.storyId);
      }
      if (struct.isSetPlayType()) {
        oprot.writeI32(struct.playType.getValue());
      }
      if (struct.isSetReturnUI()) {
        oprot.writeI32(struct.returnUI);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCPlayStoryMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.storyId = iprot.readI32();
        struct.setStoryIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.playType = PlayStoryType.findByValue(iprot.readI32());
        struct.setPlayTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.returnUI = iprot.readI32();
        struct.setReturnUIIsSet(true);
      }
    }
  }

}

