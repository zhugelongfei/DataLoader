/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.cs;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CSSyncDanceInfoMsg implements org.apache.thrift.TBase<CSSyncDanceInfoMsg, CSSyncDanceInfoMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CSSyncDanceInfoMsg");

  private static final org.apache.thrift.protocol.TField DURING_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("duringTime", org.apache.thrift.protocol.TType.I16, (short)1);
  private static final org.apache.thrift.protocol.TField KEY_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("keyResult", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField COMBOS_FIELD_DESC = new org.apache.thrift.protocol.TField("combos", org.apache.thrift.protocol.TType.I16, (short)3);
  private static final org.apache.thrift.protocol.TField TOTAL_MARK_FIELD_DESC = new org.apache.thrift.protocol.TField("totalMark", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField DYNAMIC_INPUT_FIELD_DESC = new org.apache.thrift.protocol.TField("dynamicInput", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField TRADITIONAL_INPUT_FIELD_DESC = new org.apache.thrift.protocol.TField("traditionalInput", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField LOVERS_DYN_INPUT_FIELD_DESC = new org.apache.thrift.protocol.TField("loversDynInput", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField LOVERS_TRD_INPUT_FIELD_DESC = new org.apache.thrift.protocol.TField("loversTrdInput", org.apache.thrift.protocol.TType.STRUCT, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CSSyncDanceInfoMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CSSyncDanceInfoMsgTupleSchemeFactory());
  }

  public short duringTime; // required
  public List<Byte> keyResult; // required
  public short combos; // required
  public int totalMark; // required
  public com.ling9527.music.common.msg.auto.DynamicInput dynamicInput; // required
  public com.ling9527.music.common.msg.auto.TraditionalInput traditionalInput; // required
  public com.ling9527.music.common.msg.auto.LoversDynInput loversDynInput; // required
  public com.ling9527.music.common.msg.auto.LoversTrdInput loversTrdInput; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DURING_TIME((short)1, "duringTime"),
    KEY_RESULT((short)2, "keyResult"),
    COMBOS((short)3, "combos"),
    TOTAL_MARK((short)4, "totalMark"),
    DYNAMIC_INPUT((short)5, "dynamicInput"),
    TRADITIONAL_INPUT((short)6, "traditionalInput"),
    LOVERS_DYN_INPUT((short)7, "loversDynInput"),
    LOVERS_TRD_INPUT((short)8, "loversTrdInput");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DURING_TIME
          return DURING_TIME;
        case 2: // KEY_RESULT
          return KEY_RESULT;
        case 3: // COMBOS
          return COMBOS;
        case 4: // TOTAL_MARK
          return TOTAL_MARK;
        case 5: // DYNAMIC_INPUT
          return DYNAMIC_INPUT;
        case 6: // TRADITIONAL_INPUT
          return TRADITIONAL_INPUT;
        case 7: // LOVERS_DYN_INPUT
          return LOVERS_DYN_INPUT;
        case 8: // LOVERS_TRD_INPUT
          return LOVERS_TRD_INPUT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DURINGTIME_ISSET_ID = 0;
  private static final int __COMBOS_ISSET_ID = 1;
  private static final int __TOTALMARK_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DURING_TIME, new org.apache.thrift.meta_data.FieldMetaData("duringTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.KEY_RESULT, new org.apache.thrift.meta_data.FieldMetaData("keyResult", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE))));
    tmpMap.put(_Fields.COMBOS, new org.apache.thrift.meta_data.FieldMetaData("combos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.TOTAL_MARK, new org.apache.thrift.meta_data.FieldMetaData("totalMark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DYNAMIC_INPUT, new org.apache.thrift.meta_data.FieldMetaData("dynamicInput", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.DynamicInput.class)));
    tmpMap.put(_Fields.TRADITIONAL_INPUT, new org.apache.thrift.meta_data.FieldMetaData("traditionalInput", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.TraditionalInput.class)));
    tmpMap.put(_Fields.LOVERS_DYN_INPUT, new org.apache.thrift.meta_data.FieldMetaData("loversDynInput", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.LoversDynInput.class)));
    tmpMap.put(_Fields.LOVERS_TRD_INPUT, new org.apache.thrift.meta_data.FieldMetaData("loversTrdInput", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.LoversTrdInput.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CSSyncDanceInfoMsg.class, metaDataMap);
  }

  public CSSyncDanceInfoMsg() {
  }

  public CSSyncDanceInfoMsg(
    short duringTime,
    List<Byte> keyResult,
    short combos,
    int totalMark,
    com.ling9527.music.common.msg.auto.DynamicInput dynamicInput,
    com.ling9527.music.common.msg.auto.TraditionalInput traditionalInput,
    com.ling9527.music.common.msg.auto.LoversDynInput loversDynInput,
    com.ling9527.music.common.msg.auto.LoversTrdInput loversTrdInput)
  {
    this();
    this.duringTime = duringTime;
    setDuringTimeIsSet(true);
    this.keyResult = keyResult;
    this.combos = combos;
    setCombosIsSet(true);
    this.totalMark = totalMark;
    setTotalMarkIsSet(true);
    this.dynamicInput = dynamicInput;
    this.traditionalInput = traditionalInput;
    this.loversDynInput = loversDynInput;
    this.loversTrdInput = loversTrdInput;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CSSyncDanceInfoMsg(CSSyncDanceInfoMsg other) {
    __isset_bitfield = other.__isset_bitfield;
    this.duringTime = other.duringTime;
    if (other.isSetKeyResult()) {
      List<Byte> __this__keyResult = new ArrayList<Byte>();
      for (Byte other_element : other.keyResult) {
        __this__keyResult.add(other_element);
      }
      this.keyResult = __this__keyResult;
    }
    this.combos = other.combos;
    this.totalMark = other.totalMark;
    if (other.isSetDynamicInput()) {
      this.dynamicInput = new com.ling9527.music.common.msg.auto.DynamicInput(other.dynamicInput);
    }
    if (other.isSetTraditionalInput()) {
      this.traditionalInput = new com.ling9527.music.common.msg.auto.TraditionalInput(other.traditionalInput);
    }
    if (other.isSetLoversDynInput()) {
      this.loversDynInput = new com.ling9527.music.common.msg.auto.LoversDynInput(other.loversDynInput);
    }
    if (other.isSetLoversTrdInput()) {
      this.loversTrdInput = new com.ling9527.music.common.msg.auto.LoversTrdInput(other.loversTrdInput);
    }
  }

  public CSSyncDanceInfoMsg deepCopy() {
    return new CSSyncDanceInfoMsg(this);
  }

  @Override
  public void clear() {
    setDuringTimeIsSet(false);
    this.duringTime = 0;
    this.keyResult = null;
    setCombosIsSet(false);
    this.combos = 0;
    setTotalMarkIsSet(false);
    this.totalMark = 0;
    this.dynamicInput = null;
    this.traditionalInput = null;
    this.loversDynInput = null;
    this.loversTrdInput = null;
  }

  public short getDuringTime() {
    return this.duringTime;
  }

  public CSSyncDanceInfoMsg setDuringTime(short duringTime) {
    this.duringTime = duringTime;
    setDuringTimeIsSet(true);
    return this;
  }

  public void unsetDuringTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DURINGTIME_ISSET_ID);
  }

  /** Returns true if field duringTime is set (has been assigned a value) and false otherwise */
  public boolean isSetDuringTime() {
    return EncodingUtils.testBit(__isset_bitfield, __DURINGTIME_ISSET_ID);
  }

  public void setDuringTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DURINGTIME_ISSET_ID, value);
  }

  public int getKeyResultSize() {
    return (this.keyResult == null) ? 0 : this.keyResult.size();
  }

  public java.util.Iterator<Byte> getKeyResultIterator() {
    return (this.keyResult == null) ? null : this.keyResult.iterator();
  }

  public void addToKeyResult(byte elem) {
    if (this.keyResult == null) {
      this.keyResult = new ArrayList<Byte>();
    }
    this.keyResult.add(elem);
  }

  public List<Byte> getKeyResult() {
    return this.keyResult;
  }

  public CSSyncDanceInfoMsg setKeyResult(List<Byte> keyResult) {
    this.keyResult = keyResult;
    return this;
  }

  public void unsetKeyResult() {
    this.keyResult = null;
  }

  /** Returns true if field keyResult is set (has been assigned a value) and false otherwise */
  public boolean isSetKeyResult() {
    return this.keyResult != null;
  }

  public void setKeyResultIsSet(boolean value) {
    if (!value) {
      this.keyResult = null;
    }
  }

  public short getCombos() {
    return this.combos;
  }

  public CSSyncDanceInfoMsg setCombos(short combos) {
    this.combos = combos;
    setCombosIsSet(true);
    return this;
  }

  public void unsetCombos() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMBOS_ISSET_ID);
  }

  /** Returns true if field combos is set (has been assigned a value) and false otherwise */
  public boolean isSetCombos() {
    return EncodingUtils.testBit(__isset_bitfield, __COMBOS_ISSET_ID);
  }

  public void setCombosIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMBOS_ISSET_ID, value);
  }

  public int getTotalMark() {
    return this.totalMark;
  }

  public CSSyncDanceInfoMsg setTotalMark(int totalMark) {
    this.totalMark = totalMark;
    setTotalMarkIsSet(true);
    return this;
  }

  public void unsetTotalMark() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALMARK_ISSET_ID);
  }

  /** Returns true if field totalMark is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalMark() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALMARK_ISSET_ID);
  }

  public void setTotalMarkIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALMARK_ISSET_ID, value);
  }

  public com.ling9527.music.common.msg.auto.DynamicInput getDynamicInput() {
    return this.dynamicInput;
  }

  public CSSyncDanceInfoMsg setDynamicInput(com.ling9527.music.common.msg.auto.DynamicInput dynamicInput) {
    this.dynamicInput = dynamicInput;
    return this;
  }

  public void unsetDynamicInput() {
    this.dynamicInput = null;
  }

  /** Returns true if field dynamicInput is set (has been assigned a value) and false otherwise */
  public boolean isSetDynamicInput() {
    return this.dynamicInput != null;
  }

  public void setDynamicInputIsSet(boolean value) {
    if (!value) {
      this.dynamicInput = null;
    }
  }

  public com.ling9527.music.common.msg.auto.TraditionalInput getTraditionalInput() {
    return this.traditionalInput;
  }

  public CSSyncDanceInfoMsg setTraditionalInput(com.ling9527.music.common.msg.auto.TraditionalInput traditionalInput) {
    this.traditionalInput = traditionalInput;
    return this;
  }

  public void unsetTraditionalInput() {
    this.traditionalInput = null;
  }

  /** Returns true if field traditionalInput is set (has been assigned a value) and false otherwise */
  public boolean isSetTraditionalInput() {
    return this.traditionalInput != null;
  }

  public void setTraditionalInputIsSet(boolean value) {
    if (!value) {
      this.traditionalInput = null;
    }
  }

  public com.ling9527.music.common.msg.auto.LoversDynInput getLoversDynInput() {
    return this.loversDynInput;
  }

  public CSSyncDanceInfoMsg setLoversDynInput(com.ling9527.music.common.msg.auto.LoversDynInput loversDynInput) {
    this.loversDynInput = loversDynInput;
    return this;
  }

  public void unsetLoversDynInput() {
    this.loversDynInput = null;
  }

  /** Returns true if field loversDynInput is set (has been assigned a value) and false otherwise */
  public boolean isSetLoversDynInput() {
    return this.loversDynInput != null;
  }

  public void setLoversDynInputIsSet(boolean value) {
    if (!value) {
      this.loversDynInput = null;
    }
  }

  public com.ling9527.music.common.msg.auto.LoversTrdInput getLoversTrdInput() {
    return this.loversTrdInput;
  }

  public CSSyncDanceInfoMsg setLoversTrdInput(com.ling9527.music.common.msg.auto.LoversTrdInput loversTrdInput) {
    this.loversTrdInput = loversTrdInput;
    return this;
  }

  public void unsetLoversTrdInput() {
    this.loversTrdInput = null;
  }

  /** Returns true if field loversTrdInput is set (has been assigned a value) and false otherwise */
  public boolean isSetLoversTrdInput() {
    return this.loversTrdInput != null;
  }

  public void setLoversTrdInputIsSet(boolean value) {
    if (!value) {
      this.loversTrdInput = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DURING_TIME:
      if (value == null) {
        unsetDuringTime();
      } else {
        setDuringTime((Short)value);
      }
      break;

    case KEY_RESULT:
      if (value == null) {
        unsetKeyResult();
      } else {
        setKeyResult((List<Byte>)value);
      }
      break;

    case COMBOS:
      if (value == null) {
        unsetCombos();
      } else {
        setCombos((Short)value);
      }
      break;

    case TOTAL_MARK:
      if (value == null) {
        unsetTotalMark();
      } else {
        setTotalMark((Integer)value);
      }
      break;

    case DYNAMIC_INPUT:
      if (value == null) {
        unsetDynamicInput();
      } else {
        setDynamicInput((com.ling9527.music.common.msg.auto.DynamicInput)value);
      }
      break;

    case TRADITIONAL_INPUT:
      if (value == null) {
        unsetTraditionalInput();
      } else {
        setTraditionalInput((com.ling9527.music.common.msg.auto.TraditionalInput)value);
      }
      break;

    case LOVERS_DYN_INPUT:
      if (value == null) {
        unsetLoversDynInput();
      } else {
        setLoversDynInput((com.ling9527.music.common.msg.auto.LoversDynInput)value);
      }
      break;

    case LOVERS_TRD_INPUT:
      if (value == null) {
        unsetLoversTrdInput();
      } else {
        setLoversTrdInput((com.ling9527.music.common.msg.auto.LoversTrdInput)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DURING_TIME:
      return Short.valueOf(getDuringTime());

    case KEY_RESULT:
      return getKeyResult();

    case COMBOS:
      return Short.valueOf(getCombos());

    case TOTAL_MARK:
      return Integer.valueOf(getTotalMark());

    case DYNAMIC_INPUT:
      return getDynamicInput();

    case TRADITIONAL_INPUT:
      return getTraditionalInput();

    case LOVERS_DYN_INPUT:
      return getLoversDynInput();

    case LOVERS_TRD_INPUT:
      return getLoversTrdInput();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DURING_TIME:
      return isSetDuringTime();
    case KEY_RESULT:
      return isSetKeyResult();
    case COMBOS:
      return isSetCombos();
    case TOTAL_MARK:
      return isSetTotalMark();
    case DYNAMIC_INPUT:
      return isSetDynamicInput();
    case TRADITIONAL_INPUT:
      return isSetTraditionalInput();
    case LOVERS_DYN_INPUT:
      return isSetLoversDynInput();
    case LOVERS_TRD_INPUT:
      return isSetLoversTrdInput();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CSSyncDanceInfoMsg)
      return this.equals((CSSyncDanceInfoMsg)that);
    return false;
  }

  public boolean equals(CSSyncDanceInfoMsg that) {
    if (that == null)
      return false;

    boolean this_present_duringTime = true;
    boolean that_present_duringTime = true;
    if (this_present_duringTime || that_present_duringTime) {
      if (!(this_present_duringTime && that_present_duringTime))
        return false;
      if (this.duringTime != that.duringTime)
        return false;
    }

    boolean this_present_keyResult = true && this.isSetKeyResult();
    boolean that_present_keyResult = true && that.isSetKeyResult();
    if (this_present_keyResult || that_present_keyResult) {
      if (!(this_present_keyResult && that_present_keyResult))
        return false;
      if (!this.keyResult.equals(that.keyResult))
        return false;
    }

    boolean this_present_combos = true;
    boolean that_present_combos = true;
    if (this_present_combos || that_present_combos) {
      if (!(this_present_combos && that_present_combos))
        return false;
      if (this.combos != that.combos)
        return false;
    }

    boolean this_present_totalMark = true;
    boolean that_present_totalMark = true;
    if (this_present_totalMark || that_present_totalMark) {
      if (!(this_present_totalMark && that_present_totalMark))
        return false;
      if (this.totalMark != that.totalMark)
        return false;
    }

    boolean this_present_dynamicInput = true && this.isSetDynamicInput();
    boolean that_present_dynamicInput = true && that.isSetDynamicInput();
    if (this_present_dynamicInput || that_present_dynamicInput) {
      if (!(this_present_dynamicInput && that_present_dynamicInput))
        return false;
      if (!this.dynamicInput.equals(that.dynamicInput))
        return false;
    }

    boolean this_present_traditionalInput = true && this.isSetTraditionalInput();
    boolean that_present_traditionalInput = true && that.isSetTraditionalInput();
    if (this_present_traditionalInput || that_present_traditionalInput) {
      if (!(this_present_traditionalInput && that_present_traditionalInput))
        return false;
      if (!this.traditionalInput.equals(that.traditionalInput))
        return false;
    }

    boolean this_present_loversDynInput = true && this.isSetLoversDynInput();
    boolean that_present_loversDynInput = true && that.isSetLoversDynInput();
    if (this_present_loversDynInput || that_present_loversDynInput) {
      if (!(this_present_loversDynInput && that_present_loversDynInput))
        return false;
      if (!this.loversDynInput.equals(that.loversDynInput))
        return false;
    }

    boolean this_present_loversTrdInput = true && this.isSetLoversTrdInput();
    boolean that_present_loversTrdInput = true && that.isSetLoversTrdInput();
    if (this_present_loversTrdInput || that_present_loversTrdInput) {
      if (!(this_present_loversTrdInput && that_present_loversTrdInput))
        return false;
      if (!this.loversTrdInput.equals(that.loversTrdInput))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(CSSyncDanceInfoMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CSSyncDanceInfoMsg typedOther = (CSSyncDanceInfoMsg)other;

    lastComparison = Boolean.valueOf(isSetDuringTime()).compareTo(typedOther.isSetDuringTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDuringTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.duringTime, typedOther.duringTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKeyResult()).compareTo(typedOther.isSetKeyResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeyResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyResult, typedOther.keyResult);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCombos()).compareTo(typedOther.isSetCombos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCombos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.combos, typedOther.combos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalMark()).compareTo(typedOther.isSetTotalMark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalMark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalMark, typedOther.totalMark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDynamicInput()).compareTo(typedOther.isSetDynamicInput());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDynamicInput()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dynamicInput, typedOther.dynamicInput);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTraditionalInput()).compareTo(typedOther.isSetTraditionalInput());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTraditionalInput()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.traditionalInput, typedOther.traditionalInput);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoversDynInput()).compareTo(typedOther.isSetLoversDynInput());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoversDynInput()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loversDynInput, typedOther.loversDynInput);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoversTrdInput()).compareTo(typedOther.isSetLoversTrdInput());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoversTrdInput()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loversTrdInput, typedOther.loversTrdInput);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CSSyncDanceInfoMsg(");
    boolean first = true;

    sb.append("duringTime:");
    sb.append(this.duringTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("keyResult:");
    if (this.keyResult == null) {
      sb.append("null");
    } else {
      sb.append(this.keyResult);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("combos:");
    sb.append(this.combos);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalMark:");
    sb.append(this.totalMark);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dynamicInput:");
    if (this.dynamicInput == null) {
      sb.append("null");
    } else {
      sb.append(this.dynamicInput);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("traditionalInput:");
    if (this.traditionalInput == null) {
      sb.append("null");
    } else {
      sb.append(this.traditionalInput);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loversDynInput:");
    if (this.loversDynInput == null) {
      sb.append("null");
    } else {
      sb.append(this.loversDynInput);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loversTrdInput:");
    if (this.loversTrdInput == null) {
      sb.append("null");
    } else {
      sb.append(this.loversTrdInput);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (dynamicInput != null) {
      dynamicInput.validate();
    }
    if (traditionalInput != null) {
      traditionalInput.validate();
    }
    if (loversDynInput != null) {
      loversDynInput.validate();
    }
    if (loversTrdInput != null) {
      loversTrdInput.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CSSyncDanceInfoMsgStandardSchemeFactory implements SchemeFactory {
    public CSSyncDanceInfoMsgStandardScheme getScheme() {
      return new CSSyncDanceInfoMsgStandardScheme();
    }
  }

  private static class CSSyncDanceInfoMsgStandardScheme extends StandardScheme<CSSyncDanceInfoMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CSSyncDanceInfoMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DURING_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.duringTime = iprot.readI16();
              struct.setDuringTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // KEY_RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.keyResult = new ArrayList<Byte>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  byte _elem2; // required
                  _elem2 = iprot.readByte();
                  struct.keyResult.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setKeyResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMBOS
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.combos = iprot.readI16();
              struct.setCombosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TOTAL_MARK
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalMark = iprot.readI32();
              struct.setTotalMarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DYNAMIC_INPUT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.dynamicInput = new com.ling9527.music.common.msg.auto.DynamicInput();
              struct.dynamicInput.read(iprot);
              struct.setDynamicInputIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TRADITIONAL_INPUT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.traditionalInput = new com.ling9527.music.common.msg.auto.TraditionalInput();
              struct.traditionalInput.read(iprot);
              struct.setTraditionalInputIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LOVERS_DYN_INPUT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.loversDynInput = new com.ling9527.music.common.msg.auto.LoversDynInput();
              struct.loversDynInput.read(iprot);
              struct.setLoversDynInputIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LOVERS_TRD_INPUT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.loversTrdInput = new com.ling9527.music.common.msg.auto.LoversTrdInput();
              struct.loversTrdInput.read(iprot);
              struct.setLoversTrdInputIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CSSyncDanceInfoMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(DURING_TIME_FIELD_DESC);
      oprot.writeI16(struct.duringTime);
      oprot.writeFieldEnd();
      if (struct.keyResult != null) {
        oprot.writeFieldBegin(KEY_RESULT_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BYTE, struct.keyResult.size()));
          for (byte _iter3 : struct.keyResult)
          {
            oprot.writeByte(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(COMBOS_FIELD_DESC);
      oprot.writeI16(struct.combos);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_MARK_FIELD_DESC);
      oprot.writeI32(struct.totalMark);
      oprot.writeFieldEnd();
      if (struct.dynamicInput != null) {
        oprot.writeFieldBegin(DYNAMIC_INPUT_FIELD_DESC);
        struct.dynamicInput.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.traditionalInput != null) {
        oprot.writeFieldBegin(TRADITIONAL_INPUT_FIELD_DESC);
        struct.traditionalInput.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.loversDynInput != null) {
        oprot.writeFieldBegin(LOVERS_DYN_INPUT_FIELD_DESC);
        struct.loversDynInput.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.loversTrdInput != null) {
        oprot.writeFieldBegin(LOVERS_TRD_INPUT_FIELD_DESC);
        struct.loversTrdInput.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CSSyncDanceInfoMsgTupleSchemeFactory implements SchemeFactory {
    public CSSyncDanceInfoMsgTupleScheme getScheme() {
      return new CSSyncDanceInfoMsgTupleScheme();
    }
  }

  private static class CSSyncDanceInfoMsgTupleScheme extends TupleScheme<CSSyncDanceInfoMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CSSyncDanceInfoMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDuringTime()) {
        optionals.set(0);
      }
      if (struct.isSetKeyResult()) {
        optionals.set(1);
      }
      if (struct.isSetCombos()) {
        optionals.set(2);
      }
      if (struct.isSetTotalMark()) {
        optionals.set(3);
      }
      if (struct.isSetDynamicInput()) {
        optionals.set(4);
      }
      if (struct.isSetTraditionalInput()) {
        optionals.set(5);
      }
      if (struct.isSetLoversDynInput()) {
        optionals.set(6);
      }
      if (struct.isSetLoversTrdInput()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetDuringTime()) {
        oprot.writeI16(struct.duringTime);
      }
      if (struct.isSetKeyResult()) {
        {
          oprot.writeI32(struct.keyResult.size());
          for (byte _iter4 : struct.keyResult)
          {
            oprot.writeByte(_iter4);
          }
        }
      }
      if (struct.isSetCombos()) {
        oprot.writeI16(struct.combos);
      }
      if (struct.isSetTotalMark()) {
        oprot.writeI32(struct.totalMark);
      }
      if (struct.isSetDynamicInput()) {
        struct.dynamicInput.write(oprot);
      }
      if (struct.isSetTraditionalInput()) {
        struct.traditionalInput.write(oprot);
      }
      if (struct.isSetLoversDynInput()) {
        struct.loversDynInput.write(oprot);
      }
      if (struct.isSetLoversTrdInput()) {
        struct.loversTrdInput.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CSSyncDanceInfoMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.duringTime = iprot.readI16();
        struct.setDuringTimeIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BYTE, iprot.readI32());
          struct.keyResult = new ArrayList<Byte>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            byte _elem7; // required
            _elem7 = iprot.readByte();
            struct.keyResult.add(_elem7);
          }
        }
        struct.setKeyResultIsSet(true);
      }
      if (incoming.get(2)) {
        struct.combos = iprot.readI16();
        struct.setCombosIsSet(true);
      }
      if (incoming.get(3)) {
        struct.totalMark = iprot.readI32();
        struct.setTotalMarkIsSet(true);
      }
      if (incoming.get(4)) {
        struct.dynamicInput = new com.ling9527.music.common.msg.auto.DynamicInput();
        struct.dynamicInput.read(iprot);
        struct.setDynamicInputIsSet(true);
      }
      if (incoming.get(5)) {
        struct.traditionalInput = new com.ling9527.music.common.msg.auto.TraditionalInput();
        struct.traditionalInput.read(iprot);
        struct.setTraditionalInputIsSet(true);
      }
      if (incoming.get(6)) {
        struct.loversDynInput = new com.ling9527.music.common.msg.auto.LoversDynInput();
        struct.loversDynInput.read(iprot);
        struct.setLoversDynInputIsSet(true);
      }
      if (incoming.get(7)) {
        struct.loversTrdInput = new com.ling9527.music.common.msg.auto.LoversTrdInput();
        struct.loversTrdInput.read(iprot);
        struct.setLoversTrdInputIsSet(true);
      }
    }
  }

}

