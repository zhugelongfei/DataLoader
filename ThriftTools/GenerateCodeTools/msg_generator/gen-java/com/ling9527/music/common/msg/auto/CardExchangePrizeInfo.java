/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CardExchangePrizeInfo implements org.apache.thrift.TBase<CardExchangePrizeInfo, CardExchangePrizeInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CardExchangePrizeInfo");

  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("index", org.apache.thrift.protocol.TType.BYTE, (short)3);
  private static final org.apache.thrift.protocol.TField PRIZE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("prizeName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PRIZE_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("prizeInfos", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField CARD_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("cardList", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField EXCHANGED_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("exchangedCount", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField EXCHANGE_TOTAL_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("exchangeTotalCount", org.apache.thrift.protocol.TType.I32, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CardExchangePrizeInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CardExchangePrizeInfoTupleSchemeFactory());
  }

  public String title; // required
  public String content; // required
  public byte index; // required
  public String prizeName; // required
  /**
   * 奖励
   */
  public PrizeInfo prizeInfos; // optional
  public List<CardItemInfo> cardList; // required
  public int exchangedCount; // required
  public int exchangeTotalCount; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TITLE((short)1, "title"),
    CONTENT((short)2, "content"),
    INDEX((short)3, "index"),
    PRIZE_NAME((short)4, "prizeName"),
    /**
     * 奖励
     */
    PRIZE_INFOS((short)5, "prizeInfos"),
    CARD_LIST((short)6, "cardList"),
    EXCHANGED_COUNT((short)7, "exchangedCount"),
    EXCHANGE_TOTAL_COUNT((short)8, "exchangeTotalCount");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TITLE
          return TITLE;
        case 2: // CONTENT
          return CONTENT;
        case 3: // INDEX
          return INDEX;
        case 4: // PRIZE_NAME
          return PRIZE_NAME;
        case 5: // PRIZE_INFOS
          return PRIZE_INFOS;
        case 6: // CARD_LIST
          return CARD_LIST;
        case 7: // EXCHANGED_COUNT
          return EXCHANGED_COUNT;
        case 8: // EXCHANGE_TOTAL_COUNT
          return EXCHANGE_TOTAL_COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INDEX_ISSET_ID = 0;
  private static final int __EXCHANGEDCOUNT_ISSET_ID = 1;
  private static final int __EXCHANGETOTALCOUNT_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.PRIZE_INFOS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INDEX, new org.apache.thrift.meta_data.FieldMetaData("index", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.PRIZE_NAME, new org.apache.thrift.meta_data.FieldMetaData("prizeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRIZE_INFOS, new org.apache.thrift.meta_data.FieldMetaData("prizeInfos", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrizeInfo.class)));
    tmpMap.put(_Fields.CARD_LIST, new org.apache.thrift.meta_data.FieldMetaData("cardList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CardItemInfo.class))));
    tmpMap.put(_Fields.EXCHANGED_COUNT, new org.apache.thrift.meta_data.FieldMetaData("exchangedCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXCHANGE_TOTAL_COUNT, new org.apache.thrift.meta_data.FieldMetaData("exchangeTotalCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CardExchangePrizeInfo.class, metaDataMap);
  }

  public CardExchangePrizeInfo() {
  }

  public CardExchangePrizeInfo(
    String title,
    String content,
    byte index,
    String prizeName,
    List<CardItemInfo> cardList,
    int exchangedCount,
    int exchangeTotalCount)
  {
    this();
    this.title = title;
    this.content = content;
    this.index = index;
    setIndexIsSet(true);
    this.prizeName = prizeName;
    this.cardList = cardList;
    this.exchangedCount = exchangedCount;
    setExchangedCountIsSet(true);
    this.exchangeTotalCount = exchangeTotalCount;
    setExchangeTotalCountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CardExchangePrizeInfo(CardExchangePrizeInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetContent()) {
      this.content = other.content;
    }
    this.index = other.index;
    if (other.isSetPrizeName()) {
      this.prizeName = other.prizeName;
    }
    if (other.isSetPrizeInfos()) {
      this.prizeInfos = new PrizeInfo(other.prizeInfos);
    }
    if (other.isSetCardList()) {
      List<CardItemInfo> __this__cardList = new ArrayList<CardItemInfo>();
      for (CardItemInfo other_element : other.cardList) {
        __this__cardList.add(new CardItemInfo(other_element));
      }
      this.cardList = __this__cardList;
    }
    this.exchangedCount = other.exchangedCount;
    this.exchangeTotalCount = other.exchangeTotalCount;
  }

  public CardExchangePrizeInfo deepCopy() {
    return new CardExchangePrizeInfo(this);
  }

  @Override
  public void clear() {
    this.title = null;
    this.content = null;
    setIndexIsSet(false);
    this.index = 0;
    this.prizeName = null;
    this.prizeInfos = null;
    this.cardList = null;
    setExchangedCountIsSet(false);
    this.exchangedCount = 0;
    setExchangeTotalCountIsSet(false);
    this.exchangeTotalCount = 0;
  }

  public String getTitle() {
    return this.title;
  }

  public CardExchangePrizeInfo setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public String getContent() {
    return this.content;
  }

  public CardExchangePrizeInfo setContent(String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public byte getIndex() {
    return this.index;
  }

  public CardExchangePrizeInfo setIndex(byte index) {
    this.index = index;
    setIndexIsSet(true);
    return this;
  }

  public void unsetIndex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INDEX_ISSET_ID);
  }

  /** Returns true if field index is set (has been assigned a value) and false otherwise */
  public boolean isSetIndex() {
    return EncodingUtils.testBit(__isset_bitfield, __INDEX_ISSET_ID);
  }

  public void setIndexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INDEX_ISSET_ID, value);
  }

  public String getPrizeName() {
    return this.prizeName;
  }

  public CardExchangePrizeInfo setPrizeName(String prizeName) {
    this.prizeName = prizeName;
    return this;
  }

  public void unsetPrizeName() {
    this.prizeName = null;
  }

  /** Returns true if field prizeName is set (has been assigned a value) and false otherwise */
  public boolean isSetPrizeName() {
    return this.prizeName != null;
  }

  public void setPrizeNameIsSet(boolean value) {
    if (!value) {
      this.prizeName = null;
    }
  }

  /**
   * 奖励
   */
  public PrizeInfo getPrizeInfos() {
    return this.prizeInfos;
  }

  /**
   * 奖励
   */
  public CardExchangePrizeInfo setPrizeInfos(PrizeInfo prizeInfos) {
    this.prizeInfos = prizeInfos;
    return this;
  }

  public void unsetPrizeInfos() {
    this.prizeInfos = null;
  }

  /** Returns true if field prizeInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetPrizeInfos() {
    return this.prizeInfos != null;
  }

  public void setPrizeInfosIsSet(boolean value) {
    if (!value) {
      this.prizeInfos = null;
    }
  }

  public int getCardListSize() {
    return (this.cardList == null) ? 0 : this.cardList.size();
  }

  public java.util.Iterator<CardItemInfo> getCardListIterator() {
    return (this.cardList == null) ? null : this.cardList.iterator();
  }

  public void addToCardList(CardItemInfo elem) {
    if (this.cardList == null) {
      this.cardList = new ArrayList<CardItemInfo>();
    }
    this.cardList.add(elem);
  }

  public List<CardItemInfo> getCardList() {
    return this.cardList;
  }

  public CardExchangePrizeInfo setCardList(List<CardItemInfo> cardList) {
    this.cardList = cardList;
    return this;
  }

  public void unsetCardList() {
    this.cardList = null;
  }

  /** Returns true if field cardList is set (has been assigned a value) and false otherwise */
  public boolean isSetCardList() {
    return this.cardList != null;
  }

  public void setCardListIsSet(boolean value) {
    if (!value) {
      this.cardList = null;
    }
  }

  public int getExchangedCount() {
    return this.exchangedCount;
  }

  public CardExchangePrizeInfo setExchangedCount(int exchangedCount) {
    this.exchangedCount = exchangedCount;
    setExchangedCountIsSet(true);
    return this;
  }

  public void unsetExchangedCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXCHANGEDCOUNT_ISSET_ID);
  }

  /** Returns true if field exchangedCount is set (has been assigned a value) and false otherwise */
  public boolean isSetExchangedCount() {
    return EncodingUtils.testBit(__isset_bitfield, __EXCHANGEDCOUNT_ISSET_ID);
  }

  public void setExchangedCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXCHANGEDCOUNT_ISSET_ID, value);
  }

  public int getExchangeTotalCount() {
    return this.exchangeTotalCount;
  }

  public CardExchangePrizeInfo setExchangeTotalCount(int exchangeTotalCount) {
    this.exchangeTotalCount = exchangeTotalCount;
    setExchangeTotalCountIsSet(true);
    return this;
  }

  public void unsetExchangeTotalCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXCHANGETOTALCOUNT_ISSET_ID);
  }

  /** Returns true if field exchangeTotalCount is set (has been assigned a value) and false otherwise */
  public boolean isSetExchangeTotalCount() {
    return EncodingUtils.testBit(__isset_bitfield, __EXCHANGETOTALCOUNT_ISSET_ID);
  }

  public void setExchangeTotalCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXCHANGETOTALCOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case INDEX:
      if (value == null) {
        unsetIndex();
      } else {
        setIndex((Byte)value);
      }
      break;

    case PRIZE_NAME:
      if (value == null) {
        unsetPrizeName();
      } else {
        setPrizeName((String)value);
      }
      break;

    case PRIZE_INFOS:
      if (value == null) {
        unsetPrizeInfos();
      } else {
        setPrizeInfos((PrizeInfo)value);
      }
      break;

    case CARD_LIST:
      if (value == null) {
        unsetCardList();
      } else {
        setCardList((List<CardItemInfo>)value);
      }
      break;

    case EXCHANGED_COUNT:
      if (value == null) {
        unsetExchangedCount();
      } else {
        setExchangedCount((Integer)value);
      }
      break;

    case EXCHANGE_TOTAL_COUNT:
      if (value == null) {
        unsetExchangeTotalCount();
      } else {
        setExchangeTotalCount((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TITLE:
      return getTitle();

    case CONTENT:
      return getContent();

    case INDEX:
      return Byte.valueOf(getIndex());

    case PRIZE_NAME:
      return getPrizeName();

    case PRIZE_INFOS:
      return getPrizeInfos();

    case CARD_LIST:
      return getCardList();

    case EXCHANGED_COUNT:
      return Integer.valueOf(getExchangedCount());

    case EXCHANGE_TOTAL_COUNT:
      return Integer.valueOf(getExchangeTotalCount());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TITLE:
      return isSetTitle();
    case CONTENT:
      return isSetContent();
    case INDEX:
      return isSetIndex();
    case PRIZE_NAME:
      return isSetPrizeName();
    case PRIZE_INFOS:
      return isSetPrizeInfos();
    case CARD_LIST:
      return isSetCardList();
    case EXCHANGED_COUNT:
      return isSetExchangedCount();
    case EXCHANGE_TOTAL_COUNT:
      return isSetExchangeTotalCount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CardExchangePrizeInfo)
      return this.equals((CardExchangePrizeInfo)that);
    return false;
  }

  public boolean equals(CardExchangePrizeInfo that) {
    if (that == null)
      return false;

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_index = true;
    boolean that_present_index = true;
    if (this_present_index || that_present_index) {
      if (!(this_present_index && that_present_index))
        return false;
      if (this.index != that.index)
        return false;
    }

    boolean this_present_prizeName = true && this.isSetPrizeName();
    boolean that_present_prizeName = true && that.isSetPrizeName();
    if (this_present_prizeName || that_present_prizeName) {
      if (!(this_present_prizeName && that_present_prizeName))
        return false;
      if (!this.prizeName.equals(that.prizeName))
        return false;
    }

    boolean this_present_prizeInfos = true && this.isSetPrizeInfos();
    boolean that_present_prizeInfos = true && that.isSetPrizeInfos();
    if (this_present_prizeInfos || that_present_prizeInfos) {
      if (!(this_present_prizeInfos && that_present_prizeInfos))
        return false;
      if (!this.prizeInfos.equals(that.prizeInfos))
        return false;
    }

    boolean this_present_cardList = true && this.isSetCardList();
    boolean that_present_cardList = true && that.isSetCardList();
    if (this_present_cardList || that_present_cardList) {
      if (!(this_present_cardList && that_present_cardList))
        return false;
      if (!this.cardList.equals(that.cardList))
        return false;
    }

    boolean this_present_exchangedCount = true;
    boolean that_present_exchangedCount = true;
    if (this_present_exchangedCount || that_present_exchangedCount) {
      if (!(this_present_exchangedCount && that_present_exchangedCount))
        return false;
      if (this.exchangedCount != that.exchangedCount)
        return false;
    }

    boolean this_present_exchangeTotalCount = true;
    boolean that_present_exchangeTotalCount = true;
    if (this_present_exchangeTotalCount || that_present_exchangeTotalCount) {
      if (!(this_present_exchangeTotalCount && that_present_exchangeTotalCount))
        return false;
      if (this.exchangeTotalCount != that.exchangeTotalCount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(CardExchangePrizeInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CardExchangePrizeInfo typedOther = (CardExchangePrizeInfo)other;

    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(typedOther.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, typedOther.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(typedOther.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, typedOther.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIndex()).compareTo(typedOther.isSetIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.index, typedOther.index);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrizeName()).compareTo(typedOther.isSetPrizeName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrizeName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prizeName, typedOther.prizeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrizeInfos()).compareTo(typedOther.isSetPrizeInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrizeInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prizeInfos, typedOther.prizeInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCardList()).compareTo(typedOther.isSetCardList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCardList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cardList, typedOther.cardList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchangedCount()).compareTo(typedOther.isSetExchangedCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchangedCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchangedCount, typedOther.exchangedCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchangeTotalCount()).compareTo(typedOther.isSetExchangeTotalCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchangeTotalCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchangeTotalCount, typedOther.exchangeTotalCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CardExchangePrizeInfo(");
    boolean first = true;

    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      sb.append(this.content);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("index:");
    sb.append(this.index);
    first = false;
    if (!first) sb.append(", ");
    sb.append("prizeName:");
    if (this.prizeName == null) {
      sb.append("null");
    } else {
      sb.append(this.prizeName);
    }
    first = false;
    if (isSetPrizeInfos()) {
      if (!first) sb.append(", ");
      sb.append("prizeInfos:");
      if (this.prizeInfos == null) {
        sb.append("null");
      } else {
        sb.append(this.prizeInfos);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("cardList:");
    if (this.cardList == null) {
      sb.append("null");
    } else {
      sb.append(this.cardList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("exchangedCount:");
    sb.append(this.exchangedCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("exchangeTotalCount:");
    sb.append(this.exchangeTotalCount);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (prizeInfos != null) {
      prizeInfos.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CardExchangePrizeInfoStandardSchemeFactory implements SchemeFactory {
    public CardExchangePrizeInfoStandardScheme getScheme() {
      return new CardExchangePrizeInfoStandardScheme();
    }
  }

  private static class CardExchangePrizeInfoStandardScheme extends StandardScheme<CardExchangePrizeInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CardExchangePrizeInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.index = iprot.readByte();
              struct.setIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PRIZE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.prizeName = iprot.readString();
              struct.setPrizeNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PRIZE_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.prizeInfos = new PrizeInfo();
              struct.prizeInfos.read(iprot);
              struct.setPrizeInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CARD_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list446 = iprot.readListBegin();
                struct.cardList = new ArrayList<CardItemInfo>(_list446.size);
                for (int _i447 = 0; _i447 < _list446.size; ++_i447)
                {
                  CardItemInfo _elem448; // required
                  _elem448 = new CardItemInfo();
                  _elem448.read(iprot);
                  struct.cardList.add(_elem448);
                }
                iprot.readListEnd();
              }
              struct.setCardListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // EXCHANGED_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.exchangedCount = iprot.readI32();
              struct.setExchangedCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // EXCHANGE_TOTAL_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.exchangeTotalCount = iprot.readI32();
              struct.setExchangeTotalCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CardExchangePrizeInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(struct.title);
        oprot.writeFieldEnd();
      }
      if (struct.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeString(struct.content);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INDEX_FIELD_DESC);
      oprot.writeByte(struct.index);
      oprot.writeFieldEnd();
      if (struct.prizeName != null) {
        oprot.writeFieldBegin(PRIZE_NAME_FIELD_DESC);
        oprot.writeString(struct.prizeName);
        oprot.writeFieldEnd();
      }
      if (struct.prizeInfos != null) {
        if (struct.isSetPrizeInfos()) {
          oprot.writeFieldBegin(PRIZE_INFOS_FIELD_DESC);
          struct.prizeInfos.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cardList != null) {
        oprot.writeFieldBegin(CARD_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.cardList.size()));
          for (CardItemInfo _iter449 : struct.cardList)
          {
            _iter449.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(EXCHANGED_COUNT_FIELD_DESC);
      oprot.writeI32(struct.exchangedCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXCHANGE_TOTAL_COUNT_FIELD_DESC);
      oprot.writeI32(struct.exchangeTotalCount);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CardExchangePrizeInfoTupleSchemeFactory implements SchemeFactory {
    public CardExchangePrizeInfoTupleScheme getScheme() {
      return new CardExchangePrizeInfoTupleScheme();
    }
  }

  private static class CardExchangePrizeInfoTupleScheme extends TupleScheme<CardExchangePrizeInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CardExchangePrizeInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTitle()) {
        optionals.set(0);
      }
      if (struct.isSetContent()) {
        optionals.set(1);
      }
      if (struct.isSetIndex()) {
        optionals.set(2);
      }
      if (struct.isSetPrizeName()) {
        optionals.set(3);
      }
      if (struct.isSetPrizeInfos()) {
        optionals.set(4);
      }
      if (struct.isSetCardList()) {
        optionals.set(5);
      }
      if (struct.isSetExchangedCount()) {
        optionals.set(6);
      }
      if (struct.isSetExchangeTotalCount()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
      if (struct.isSetIndex()) {
        oprot.writeByte(struct.index);
      }
      if (struct.isSetPrizeName()) {
        oprot.writeString(struct.prizeName);
      }
      if (struct.isSetPrizeInfos()) {
        struct.prizeInfos.write(oprot);
      }
      if (struct.isSetCardList()) {
        {
          oprot.writeI32(struct.cardList.size());
          for (CardItemInfo _iter450 : struct.cardList)
          {
            _iter450.write(oprot);
          }
        }
      }
      if (struct.isSetExchangedCount()) {
        oprot.writeI32(struct.exchangedCount);
      }
      if (struct.isSetExchangeTotalCount()) {
        oprot.writeI32(struct.exchangeTotalCount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CardExchangePrizeInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(1)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
      if (incoming.get(2)) {
        struct.index = iprot.readByte();
        struct.setIndexIsSet(true);
      }
      if (incoming.get(3)) {
        struct.prizeName = iprot.readString();
        struct.setPrizeNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.prizeInfos = new PrizeInfo();
        struct.prizeInfos.read(iprot);
        struct.setPrizeInfosIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list451 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.cardList = new ArrayList<CardItemInfo>(_list451.size);
          for (int _i452 = 0; _i452 < _list451.size; ++_i452)
          {
            CardItemInfo _elem453; // required
            _elem453 = new CardItemInfo();
            _elem453.read(iprot);
            struct.cardList.add(_elem453);
          }
        }
        struct.setCardListIsSet(true);
      }
      if (incoming.get(6)) {
        struct.exchangedCount = iprot.readI32();
        struct.setExchangedCountIsSet(true);
      }
      if (incoming.get(7)) {
        struct.exchangeTotalCount = iprot.readI32();
        struct.setExchangeTotalCountIsSet(true);
      }
    }
  }

}

