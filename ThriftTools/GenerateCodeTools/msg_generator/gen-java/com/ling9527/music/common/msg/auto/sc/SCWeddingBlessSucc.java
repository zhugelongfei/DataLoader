/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 婚礼祝福成功
 */
public class SCWeddingBlessSucc implements org.apache.thrift.TBase<SCWeddingBlessSucc, SCWeddingBlessSucc._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCWeddingBlessSucc");

  private static final org.apache.thrift.protocol.TField BLESS_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("blessVal", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField FROM_CHAR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fromCharName", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCWeddingBlessSuccStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCWeddingBlessSuccTupleSchemeFactory());
  }

  /**
   * 当前祝福值
   */
  public int blessVal; // required
  /**
   * 来自玩家名
   */
  public String fromCharName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 当前祝福值
     */
    BLESS_VAL((short)1, "blessVal"),
    /**
     * 来自玩家名
     */
    FROM_CHAR_NAME((short)2, "fromCharName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BLESS_VAL
          return BLESS_VAL;
        case 2: // FROM_CHAR_NAME
          return FROM_CHAR_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BLESSVAL_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BLESS_VAL, new org.apache.thrift.meta_data.FieldMetaData("blessVal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FROM_CHAR_NAME, new org.apache.thrift.meta_data.FieldMetaData("fromCharName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCWeddingBlessSucc.class, metaDataMap);
  }

  public SCWeddingBlessSucc() {
  }

  public SCWeddingBlessSucc(
    int blessVal,
    String fromCharName)
  {
    this();
    this.blessVal = blessVal;
    setBlessValIsSet(true);
    this.fromCharName = fromCharName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCWeddingBlessSucc(SCWeddingBlessSucc other) {
    __isset_bitfield = other.__isset_bitfield;
    this.blessVal = other.blessVal;
    if (other.isSetFromCharName()) {
      this.fromCharName = other.fromCharName;
    }
  }

  public SCWeddingBlessSucc deepCopy() {
    return new SCWeddingBlessSucc(this);
  }

  @Override
  public void clear() {
    setBlessValIsSet(false);
    this.blessVal = 0;
    this.fromCharName = null;
  }

  /**
   * 当前祝福值
   */
  public int getBlessVal() {
    return this.blessVal;
  }

  /**
   * 当前祝福值
   */
  public SCWeddingBlessSucc setBlessVal(int blessVal) {
    this.blessVal = blessVal;
    setBlessValIsSet(true);
    return this;
  }

  public void unsetBlessVal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BLESSVAL_ISSET_ID);
  }

  /** Returns true if field blessVal is set (has been assigned a value) and false otherwise */
  public boolean isSetBlessVal() {
    return EncodingUtils.testBit(__isset_bitfield, __BLESSVAL_ISSET_ID);
  }

  public void setBlessValIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BLESSVAL_ISSET_ID, value);
  }

  /**
   * 来自玩家名
   */
  public String getFromCharName() {
    return this.fromCharName;
  }

  /**
   * 来自玩家名
   */
  public SCWeddingBlessSucc setFromCharName(String fromCharName) {
    this.fromCharName = fromCharName;
    return this;
  }

  public void unsetFromCharName() {
    this.fromCharName = null;
  }

  /** Returns true if field fromCharName is set (has been assigned a value) and false otherwise */
  public boolean isSetFromCharName() {
    return this.fromCharName != null;
  }

  public void setFromCharNameIsSet(boolean value) {
    if (!value) {
      this.fromCharName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BLESS_VAL:
      if (value == null) {
        unsetBlessVal();
      } else {
        setBlessVal((Integer)value);
      }
      break;

    case FROM_CHAR_NAME:
      if (value == null) {
        unsetFromCharName();
      } else {
        setFromCharName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BLESS_VAL:
      return Integer.valueOf(getBlessVal());

    case FROM_CHAR_NAME:
      return getFromCharName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BLESS_VAL:
      return isSetBlessVal();
    case FROM_CHAR_NAME:
      return isSetFromCharName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCWeddingBlessSucc)
      return this.equals((SCWeddingBlessSucc)that);
    return false;
  }

  public boolean equals(SCWeddingBlessSucc that) {
    if (that == null)
      return false;

    boolean this_present_blessVal = true;
    boolean that_present_blessVal = true;
    if (this_present_blessVal || that_present_blessVal) {
      if (!(this_present_blessVal && that_present_blessVal))
        return false;
      if (this.blessVal != that.blessVal)
        return false;
    }

    boolean this_present_fromCharName = true && this.isSetFromCharName();
    boolean that_present_fromCharName = true && that.isSetFromCharName();
    if (this_present_fromCharName || that_present_fromCharName) {
      if (!(this_present_fromCharName && that_present_fromCharName))
        return false;
      if (!this.fromCharName.equals(that.fromCharName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCWeddingBlessSucc other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCWeddingBlessSucc typedOther = (SCWeddingBlessSucc)other;

    lastComparison = Boolean.valueOf(isSetBlessVal()).compareTo(typedOther.isSetBlessVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlessVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blessVal, typedOther.blessVal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFromCharName()).compareTo(typedOther.isSetFromCharName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromCharName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromCharName, typedOther.fromCharName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCWeddingBlessSucc(");
    boolean first = true;

    sb.append("blessVal:");
    sb.append(this.blessVal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fromCharName:");
    if (this.fromCharName == null) {
      sb.append("null");
    } else {
      sb.append(this.fromCharName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCWeddingBlessSuccStandardSchemeFactory implements SchemeFactory {
    public SCWeddingBlessSuccStandardScheme getScheme() {
      return new SCWeddingBlessSuccStandardScheme();
    }
  }

  private static class SCWeddingBlessSuccStandardScheme extends StandardScheme<SCWeddingBlessSucc> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCWeddingBlessSucc struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BLESS_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.blessVal = iprot.readI32();
              struct.setBlessValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FROM_CHAR_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fromCharName = iprot.readString();
              struct.setFromCharNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCWeddingBlessSucc struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(BLESS_VAL_FIELD_DESC);
      oprot.writeI32(struct.blessVal);
      oprot.writeFieldEnd();
      if (struct.fromCharName != null) {
        oprot.writeFieldBegin(FROM_CHAR_NAME_FIELD_DESC);
        oprot.writeString(struct.fromCharName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCWeddingBlessSuccTupleSchemeFactory implements SchemeFactory {
    public SCWeddingBlessSuccTupleScheme getScheme() {
      return new SCWeddingBlessSuccTupleScheme();
    }
  }

  private static class SCWeddingBlessSuccTupleScheme extends TupleScheme<SCWeddingBlessSucc> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCWeddingBlessSucc struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBlessVal()) {
        optionals.set(0);
      }
      if (struct.isSetFromCharName()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetBlessVal()) {
        oprot.writeI32(struct.blessVal);
      }
      if (struct.isSetFromCharName()) {
        oprot.writeString(struct.fromCharName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCWeddingBlessSucc struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.blessVal = iprot.readI32();
        struct.setBlessValIsSet(true);
      }
      if (incoming.get(1)) {
        struct.fromCharName = iprot.readString();
        struct.setFromCharNameIsSet(true);
      }
    }
  }

}

