/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SCBattleDancePartResultInfoMsg implements org.apache.thrift.TBase<SCBattleDancePartResultInfoMsg, SCBattleDancePartResultInfoMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCBattleDancePartResultInfoMsg");

  private static final org.apache.thrift.protocol.TField WIN_TEAM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("winTeamId", org.apache.thrift.protocol.TType.BYTE, (short)1);
  private static final org.apache.thrift.protocol.TField ACTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("actions", org.apache.thrift.protocol.TType.MAP, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCBattleDancePartResultInfoMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCBattleDancePartResultInfoMsgTupleSchemeFactory());
  }

  public byte winTeamId; // optional
  public Map<Long,Integer> actions; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    WIN_TEAM_ID((short)1, "winTeamId"),
    ACTIONS((short)2, "actions");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // WIN_TEAM_ID
          return WIN_TEAM_ID;
        case 2: // ACTIONS
          return ACTIONS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __WINTEAMID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.WIN_TEAM_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.WIN_TEAM_ID, new org.apache.thrift.meta_data.FieldMetaData("winTeamId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.ACTIONS, new org.apache.thrift.meta_data.FieldMetaData("actions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCBattleDancePartResultInfoMsg.class, metaDataMap);
  }

  public SCBattleDancePartResultInfoMsg() {
  }

  public SCBattleDancePartResultInfoMsg(
    Map<Long,Integer> actions)
  {
    this();
    this.actions = actions;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCBattleDancePartResultInfoMsg(SCBattleDancePartResultInfoMsg other) {
    __isset_bitfield = other.__isset_bitfield;
    this.winTeamId = other.winTeamId;
    if (other.isSetActions()) {
      Map<Long,Integer> __this__actions = new HashMap<Long,Integer>();
      for (Map.Entry<Long, Integer> other_element : other.actions.entrySet()) {

        Long other_element_key = other_element.getKey();
        Integer other_element_value = other_element.getValue();

        Long __this__actions_copy_key = other_element_key;

        Integer __this__actions_copy_value = other_element_value;

        __this__actions.put(__this__actions_copy_key, __this__actions_copy_value);
      }
      this.actions = __this__actions;
    }
  }

  public SCBattleDancePartResultInfoMsg deepCopy() {
    return new SCBattleDancePartResultInfoMsg(this);
  }

  @Override
  public void clear() {
    setWinTeamIdIsSet(false);
    this.winTeamId = 0;
    this.actions = null;
  }

  public byte getWinTeamId() {
    return this.winTeamId;
  }

  public SCBattleDancePartResultInfoMsg setWinTeamId(byte winTeamId) {
    this.winTeamId = winTeamId;
    setWinTeamIdIsSet(true);
    return this;
  }

  public void unsetWinTeamId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WINTEAMID_ISSET_ID);
  }

  /** Returns true if field winTeamId is set (has been assigned a value) and false otherwise */
  public boolean isSetWinTeamId() {
    return EncodingUtils.testBit(__isset_bitfield, __WINTEAMID_ISSET_ID);
  }

  public void setWinTeamIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WINTEAMID_ISSET_ID, value);
  }

  public int getActionsSize() {
    return (this.actions == null) ? 0 : this.actions.size();
  }

  public void putToActions(long key, int val) {
    if (this.actions == null) {
      this.actions = new HashMap<Long,Integer>();
    }
    this.actions.put(key, val);
  }

  public Map<Long,Integer> getActions() {
    return this.actions;
  }

  public SCBattleDancePartResultInfoMsg setActions(Map<Long,Integer> actions) {
    this.actions = actions;
    return this;
  }

  public void unsetActions() {
    this.actions = null;
  }

  /** Returns true if field actions is set (has been assigned a value) and false otherwise */
  public boolean isSetActions() {
    return this.actions != null;
  }

  public void setActionsIsSet(boolean value) {
    if (!value) {
      this.actions = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case WIN_TEAM_ID:
      if (value == null) {
        unsetWinTeamId();
      } else {
        setWinTeamId((Byte)value);
      }
      break;

    case ACTIONS:
      if (value == null) {
        unsetActions();
      } else {
        setActions((Map<Long,Integer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case WIN_TEAM_ID:
      return Byte.valueOf(getWinTeamId());

    case ACTIONS:
      return getActions();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case WIN_TEAM_ID:
      return isSetWinTeamId();
    case ACTIONS:
      return isSetActions();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCBattleDancePartResultInfoMsg)
      return this.equals((SCBattleDancePartResultInfoMsg)that);
    return false;
  }

  public boolean equals(SCBattleDancePartResultInfoMsg that) {
    if (that == null)
      return false;

    boolean this_present_winTeamId = true && this.isSetWinTeamId();
    boolean that_present_winTeamId = true && that.isSetWinTeamId();
    if (this_present_winTeamId || that_present_winTeamId) {
      if (!(this_present_winTeamId && that_present_winTeamId))
        return false;
      if (this.winTeamId != that.winTeamId)
        return false;
    }

    boolean this_present_actions = true && this.isSetActions();
    boolean that_present_actions = true && that.isSetActions();
    if (this_present_actions || that_present_actions) {
      if (!(this_present_actions && that_present_actions))
        return false;
      if (!this.actions.equals(that.actions))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCBattleDancePartResultInfoMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCBattleDancePartResultInfoMsg typedOther = (SCBattleDancePartResultInfoMsg)other;

    lastComparison = Boolean.valueOf(isSetWinTeamId()).compareTo(typedOther.isSetWinTeamId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWinTeamId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.winTeamId, typedOther.winTeamId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActions()).compareTo(typedOther.isSetActions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actions, typedOther.actions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCBattleDancePartResultInfoMsg(");
    boolean first = true;

    if (isSetWinTeamId()) {
      sb.append("winTeamId:");
      sb.append(this.winTeamId);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("actions:");
    if (this.actions == null) {
      sb.append("null");
    } else {
      sb.append(this.actions);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCBattleDancePartResultInfoMsgStandardSchemeFactory implements SchemeFactory {
    public SCBattleDancePartResultInfoMsgStandardScheme getScheme() {
      return new SCBattleDancePartResultInfoMsgStandardScheme();
    }
  }

  private static class SCBattleDancePartResultInfoMsgStandardScheme extends StandardScheme<SCBattleDancePartResultInfoMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCBattleDancePartResultInfoMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // WIN_TEAM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.winTeamId = iprot.readByte();
              struct.setWinTeamIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ACTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map16 = iprot.readMapBegin();
                struct.actions = new HashMap<Long,Integer>(2*_map16.size);
                for (int _i17 = 0; _i17 < _map16.size; ++_i17)
                {
                  long _key18; // required
                  int _val19; // required
                  _key18 = iprot.readI64();
                  _val19 = iprot.readI32();
                  struct.actions.put(_key18, _val19);
                }
                iprot.readMapEnd();
              }
              struct.setActionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCBattleDancePartResultInfoMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetWinTeamId()) {
        oprot.writeFieldBegin(WIN_TEAM_ID_FIELD_DESC);
        oprot.writeByte(struct.winTeamId);
        oprot.writeFieldEnd();
      }
      if (struct.actions != null) {
        oprot.writeFieldBegin(ACTIONS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.I32, struct.actions.size()));
          for (Map.Entry<Long, Integer> _iter20 : struct.actions.entrySet())
          {
            oprot.writeI64(_iter20.getKey());
            oprot.writeI32(_iter20.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCBattleDancePartResultInfoMsgTupleSchemeFactory implements SchemeFactory {
    public SCBattleDancePartResultInfoMsgTupleScheme getScheme() {
      return new SCBattleDancePartResultInfoMsgTupleScheme();
    }
  }

  private static class SCBattleDancePartResultInfoMsgTupleScheme extends TupleScheme<SCBattleDancePartResultInfoMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCBattleDancePartResultInfoMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetWinTeamId()) {
        optionals.set(0);
      }
      if (struct.isSetActions()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetWinTeamId()) {
        oprot.writeByte(struct.winTeamId);
      }
      if (struct.isSetActions()) {
        {
          oprot.writeI32(struct.actions.size());
          for (Map.Entry<Long, Integer> _iter21 : struct.actions.entrySet())
          {
            oprot.writeI64(_iter21.getKey());
            oprot.writeI32(_iter21.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCBattleDancePartResultInfoMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.winTeamId = iprot.readByte();
        struct.setWinTeamIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map22 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.actions = new HashMap<Long,Integer>(2*_map22.size);
          for (int _i23 = 0; _i23 < _map22.size; ++_i23)
          {
            long _key24; // required
            int _val25; // required
            _key24 = iprot.readI64();
            _val25 = iprot.readI32();
            struct.actions.put(_key24, _val25);
          }
        }
        struct.setActionsIsSet(true);
      }
    }
  }

}

