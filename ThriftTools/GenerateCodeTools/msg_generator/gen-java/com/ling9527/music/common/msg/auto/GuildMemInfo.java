/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class GuildMemInfo implements org.apache.thrift.TBase<GuildMemInfo, GuildMemInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GuildMemInfo");

  private static final org.apache.thrift.protocol.TField PLAY_BASE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("playBaseInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField MOOD_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("moodMessage", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DEGREE_FIELD_DESC = new org.apache.thrift.protocol.TField("degree", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField LONGITUDE_FIELD_DESC = new org.apache.thrift.protocol.TField("longitude", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField LATITUDE_FIELD_DESC = new org.apache.thrift.protocol.TField("latitude", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField ONLINE_FIELD_DESC = new org.apache.thrift.protocol.TField("online", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField LAST_SIGN_IN_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("lastSignInDate", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField DONATE_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("donateValue", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField OPEN_FIELD_DESC = new org.apache.thrift.protocol.TField("open", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("location", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField LAST_WEEK_DONATION_FIELD_DESC = new org.apache.thrift.protocol.TField("lastWeekDonation", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField SIGN_IN_DAYS_FIELD_DESC = new org.apache.thrift.protocol.TField("signInDays", org.apache.thrift.protocol.TType.I32, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GuildMemInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GuildMemInfoTupleSchemeFactory());
  }

  public PlayerBaseInfo playBaseInfo; // required
  public String moodMessage; // optional
  /**
   * 
   * @see GuildDegree
   */
  public GuildDegree degree; // required
  public double longitude; // required
  public double latitude; // required
  public boolean online; // required
  public int lastSignInDate; // required
  public int donateValue; // required
  public boolean open; // required
  public String location; // required
  public int lastWeekDonation; // required
  public int signInDays; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PLAY_BASE_INFO((short)1, "playBaseInfo"),
    MOOD_MESSAGE((short)2, "moodMessage"),
    /**
     * 
     * @see GuildDegree
     */
    DEGREE((short)3, "degree"),
    LONGITUDE((short)4, "longitude"),
    LATITUDE((short)5, "latitude"),
    ONLINE((short)6, "online"),
    LAST_SIGN_IN_DATE((short)7, "lastSignInDate"),
    DONATE_VALUE((short)8, "donateValue"),
    OPEN((short)9, "open"),
    LOCATION((short)10, "location"),
    LAST_WEEK_DONATION((short)11, "lastWeekDonation"),
    SIGN_IN_DAYS((short)12, "signInDays");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PLAY_BASE_INFO
          return PLAY_BASE_INFO;
        case 2: // MOOD_MESSAGE
          return MOOD_MESSAGE;
        case 3: // DEGREE
          return DEGREE;
        case 4: // LONGITUDE
          return LONGITUDE;
        case 5: // LATITUDE
          return LATITUDE;
        case 6: // ONLINE
          return ONLINE;
        case 7: // LAST_SIGN_IN_DATE
          return LAST_SIGN_IN_DATE;
        case 8: // DONATE_VALUE
          return DONATE_VALUE;
        case 9: // OPEN
          return OPEN;
        case 10: // LOCATION
          return LOCATION;
        case 11: // LAST_WEEK_DONATION
          return LAST_WEEK_DONATION;
        case 12: // SIGN_IN_DAYS
          return SIGN_IN_DAYS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LONGITUDE_ISSET_ID = 0;
  private static final int __LATITUDE_ISSET_ID = 1;
  private static final int __ONLINE_ISSET_ID = 2;
  private static final int __LASTSIGNINDATE_ISSET_ID = 3;
  private static final int __DONATEVALUE_ISSET_ID = 4;
  private static final int __OPEN_ISSET_ID = 5;
  private static final int __LASTWEEKDONATION_ISSET_ID = 6;
  private static final int __SIGNINDAYS_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.MOOD_MESSAGE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PLAY_BASE_INFO, new org.apache.thrift.meta_data.FieldMetaData("playBaseInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PlayerBaseInfo.class)));
    tmpMap.put(_Fields.MOOD_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("moodMessage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEGREE, new org.apache.thrift.meta_data.FieldMetaData("degree", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, GuildDegree.class)));
    tmpMap.put(_Fields.LONGITUDE, new org.apache.thrift.meta_data.FieldMetaData("longitude", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LATITUDE, new org.apache.thrift.meta_data.FieldMetaData("latitude", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ONLINE, new org.apache.thrift.meta_data.FieldMetaData("online", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.LAST_SIGN_IN_DATE, new org.apache.thrift.meta_data.FieldMetaData("lastSignInDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DONATE_VALUE, new org.apache.thrift.meta_data.FieldMetaData("donateValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OPEN, new org.apache.thrift.meta_data.FieldMetaData("open", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.LOCATION, new org.apache.thrift.meta_data.FieldMetaData("location", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_WEEK_DONATION, new org.apache.thrift.meta_data.FieldMetaData("lastWeekDonation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SIGN_IN_DAYS, new org.apache.thrift.meta_data.FieldMetaData("signInDays", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GuildMemInfo.class, metaDataMap);
  }

  public GuildMemInfo() {
  }

  public GuildMemInfo(
    PlayerBaseInfo playBaseInfo,
    GuildDegree degree,
    double longitude,
    double latitude,
    boolean online,
    int lastSignInDate,
    int donateValue,
    boolean open,
    String location,
    int lastWeekDonation,
    int signInDays)
  {
    this();
    this.playBaseInfo = playBaseInfo;
    this.degree = degree;
    this.longitude = longitude;
    setLongitudeIsSet(true);
    this.latitude = latitude;
    setLatitudeIsSet(true);
    this.online = online;
    setOnlineIsSet(true);
    this.lastSignInDate = lastSignInDate;
    setLastSignInDateIsSet(true);
    this.donateValue = donateValue;
    setDonateValueIsSet(true);
    this.open = open;
    setOpenIsSet(true);
    this.location = location;
    this.lastWeekDonation = lastWeekDonation;
    setLastWeekDonationIsSet(true);
    this.signInDays = signInDays;
    setSignInDaysIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GuildMemInfo(GuildMemInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPlayBaseInfo()) {
      this.playBaseInfo = new PlayerBaseInfo(other.playBaseInfo);
    }
    if (other.isSetMoodMessage()) {
      this.moodMessage = other.moodMessage;
    }
    if (other.isSetDegree()) {
      this.degree = other.degree;
    }
    this.longitude = other.longitude;
    this.latitude = other.latitude;
    this.online = other.online;
    this.lastSignInDate = other.lastSignInDate;
    this.donateValue = other.donateValue;
    this.open = other.open;
    if (other.isSetLocation()) {
      this.location = other.location;
    }
    this.lastWeekDonation = other.lastWeekDonation;
    this.signInDays = other.signInDays;
  }

  public GuildMemInfo deepCopy() {
    return new GuildMemInfo(this);
  }

  @Override
  public void clear() {
    this.playBaseInfo = null;
    this.moodMessage = null;
    this.degree = null;
    setLongitudeIsSet(false);
    this.longitude = 0.0;
    setLatitudeIsSet(false);
    this.latitude = 0.0;
    setOnlineIsSet(false);
    this.online = false;
    setLastSignInDateIsSet(false);
    this.lastSignInDate = 0;
    setDonateValueIsSet(false);
    this.donateValue = 0;
    setOpenIsSet(false);
    this.open = false;
    this.location = null;
    setLastWeekDonationIsSet(false);
    this.lastWeekDonation = 0;
    setSignInDaysIsSet(false);
    this.signInDays = 0;
  }

  public PlayerBaseInfo getPlayBaseInfo() {
    return this.playBaseInfo;
  }

  public GuildMemInfo setPlayBaseInfo(PlayerBaseInfo playBaseInfo) {
    this.playBaseInfo = playBaseInfo;
    return this;
  }

  public void unsetPlayBaseInfo() {
    this.playBaseInfo = null;
  }

  /** Returns true if field playBaseInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetPlayBaseInfo() {
    return this.playBaseInfo != null;
  }

  public void setPlayBaseInfoIsSet(boolean value) {
    if (!value) {
      this.playBaseInfo = null;
    }
  }

  public String getMoodMessage() {
    return this.moodMessage;
  }

  public GuildMemInfo setMoodMessage(String moodMessage) {
    this.moodMessage = moodMessage;
    return this;
  }

  public void unsetMoodMessage() {
    this.moodMessage = null;
  }

  /** Returns true if field moodMessage is set (has been assigned a value) and false otherwise */
  public boolean isSetMoodMessage() {
    return this.moodMessage != null;
  }

  public void setMoodMessageIsSet(boolean value) {
    if (!value) {
      this.moodMessage = null;
    }
  }

  /**
   * 
   * @see GuildDegree
   */
  public GuildDegree getDegree() {
    return this.degree;
  }

  /**
   * 
   * @see GuildDegree
   */
  public GuildMemInfo setDegree(GuildDegree degree) {
    this.degree = degree;
    return this;
  }

  public void unsetDegree() {
    this.degree = null;
  }

  /** Returns true if field degree is set (has been assigned a value) and false otherwise */
  public boolean isSetDegree() {
    return this.degree != null;
  }

  public void setDegreeIsSet(boolean value) {
    if (!value) {
      this.degree = null;
    }
  }

  public double getLongitude() {
    return this.longitude;
  }

  public GuildMemInfo setLongitude(double longitude) {
    this.longitude = longitude;
    setLongitudeIsSet(true);
    return this;
  }

  public void unsetLongitude() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LONGITUDE_ISSET_ID);
  }

  /** Returns true if field longitude is set (has been assigned a value) and false otherwise */
  public boolean isSetLongitude() {
    return EncodingUtils.testBit(__isset_bitfield, __LONGITUDE_ISSET_ID);
  }

  public void setLongitudeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LONGITUDE_ISSET_ID, value);
  }

  public double getLatitude() {
    return this.latitude;
  }

  public GuildMemInfo setLatitude(double latitude) {
    this.latitude = latitude;
    setLatitudeIsSet(true);
    return this;
  }

  public void unsetLatitude() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LATITUDE_ISSET_ID);
  }

  /** Returns true if field latitude is set (has been assigned a value) and false otherwise */
  public boolean isSetLatitude() {
    return EncodingUtils.testBit(__isset_bitfield, __LATITUDE_ISSET_ID);
  }

  public void setLatitudeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LATITUDE_ISSET_ID, value);
  }

  public boolean isOnline() {
    return this.online;
  }

  public GuildMemInfo setOnline(boolean online) {
    this.online = online;
    setOnlineIsSet(true);
    return this;
  }

  public void unsetOnline() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ONLINE_ISSET_ID);
  }

  /** Returns true if field online is set (has been assigned a value) and false otherwise */
  public boolean isSetOnline() {
    return EncodingUtils.testBit(__isset_bitfield, __ONLINE_ISSET_ID);
  }

  public void setOnlineIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ONLINE_ISSET_ID, value);
  }

  public int getLastSignInDate() {
    return this.lastSignInDate;
  }

  public GuildMemInfo setLastSignInDate(int lastSignInDate) {
    this.lastSignInDate = lastSignInDate;
    setLastSignInDateIsSet(true);
    return this;
  }

  public void unsetLastSignInDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTSIGNINDATE_ISSET_ID);
  }

  /** Returns true if field lastSignInDate is set (has been assigned a value) and false otherwise */
  public boolean isSetLastSignInDate() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTSIGNINDATE_ISSET_ID);
  }

  public void setLastSignInDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTSIGNINDATE_ISSET_ID, value);
  }

  public int getDonateValue() {
    return this.donateValue;
  }

  public GuildMemInfo setDonateValue(int donateValue) {
    this.donateValue = donateValue;
    setDonateValueIsSet(true);
    return this;
  }

  public void unsetDonateValue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DONATEVALUE_ISSET_ID);
  }

  /** Returns true if field donateValue is set (has been assigned a value) and false otherwise */
  public boolean isSetDonateValue() {
    return EncodingUtils.testBit(__isset_bitfield, __DONATEVALUE_ISSET_ID);
  }

  public void setDonateValueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DONATEVALUE_ISSET_ID, value);
  }

  public boolean isOpen() {
    return this.open;
  }

  public GuildMemInfo setOpen(boolean open) {
    this.open = open;
    setOpenIsSet(true);
    return this;
  }

  public void unsetOpen() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPEN_ISSET_ID);
  }

  /** Returns true if field open is set (has been assigned a value) and false otherwise */
  public boolean isSetOpen() {
    return EncodingUtils.testBit(__isset_bitfield, __OPEN_ISSET_ID);
  }

  public void setOpenIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPEN_ISSET_ID, value);
  }

  public String getLocation() {
    return this.location;
  }

  public GuildMemInfo setLocation(String location) {
    this.location = location;
    return this;
  }

  public void unsetLocation() {
    this.location = null;
  }

  /** Returns true if field location is set (has been assigned a value) and false otherwise */
  public boolean isSetLocation() {
    return this.location != null;
  }

  public void setLocationIsSet(boolean value) {
    if (!value) {
      this.location = null;
    }
  }

  public int getLastWeekDonation() {
    return this.lastWeekDonation;
  }

  public GuildMemInfo setLastWeekDonation(int lastWeekDonation) {
    this.lastWeekDonation = lastWeekDonation;
    setLastWeekDonationIsSet(true);
    return this;
  }

  public void unsetLastWeekDonation() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTWEEKDONATION_ISSET_ID);
  }

  /** Returns true if field lastWeekDonation is set (has been assigned a value) and false otherwise */
  public boolean isSetLastWeekDonation() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTWEEKDONATION_ISSET_ID);
  }

  public void setLastWeekDonationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTWEEKDONATION_ISSET_ID, value);
  }

  public int getSignInDays() {
    return this.signInDays;
  }

  public GuildMemInfo setSignInDays(int signInDays) {
    this.signInDays = signInDays;
    setSignInDaysIsSet(true);
    return this;
  }

  public void unsetSignInDays() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SIGNINDAYS_ISSET_ID);
  }

  /** Returns true if field signInDays is set (has been assigned a value) and false otherwise */
  public boolean isSetSignInDays() {
    return EncodingUtils.testBit(__isset_bitfield, __SIGNINDAYS_ISSET_ID);
  }

  public void setSignInDaysIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SIGNINDAYS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PLAY_BASE_INFO:
      if (value == null) {
        unsetPlayBaseInfo();
      } else {
        setPlayBaseInfo((PlayerBaseInfo)value);
      }
      break;

    case MOOD_MESSAGE:
      if (value == null) {
        unsetMoodMessage();
      } else {
        setMoodMessage((String)value);
      }
      break;

    case DEGREE:
      if (value == null) {
        unsetDegree();
      } else {
        setDegree((GuildDegree)value);
      }
      break;

    case LONGITUDE:
      if (value == null) {
        unsetLongitude();
      } else {
        setLongitude((Double)value);
      }
      break;

    case LATITUDE:
      if (value == null) {
        unsetLatitude();
      } else {
        setLatitude((Double)value);
      }
      break;

    case ONLINE:
      if (value == null) {
        unsetOnline();
      } else {
        setOnline((Boolean)value);
      }
      break;

    case LAST_SIGN_IN_DATE:
      if (value == null) {
        unsetLastSignInDate();
      } else {
        setLastSignInDate((Integer)value);
      }
      break;

    case DONATE_VALUE:
      if (value == null) {
        unsetDonateValue();
      } else {
        setDonateValue((Integer)value);
      }
      break;

    case OPEN:
      if (value == null) {
        unsetOpen();
      } else {
        setOpen((Boolean)value);
      }
      break;

    case LOCATION:
      if (value == null) {
        unsetLocation();
      } else {
        setLocation((String)value);
      }
      break;

    case LAST_WEEK_DONATION:
      if (value == null) {
        unsetLastWeekDonation();
      } else {
        setLastWeekDonation((Integer)value);
      }
      break;

    case SIGN_IN_DAYS:
      if (value == null) {
        unsetSignInDays();
      } else {
        setSignInDays((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PLAY_BASE_INFO:
      return getPlayBaseInfo();

    case MOOD_MESSAGE:
      return getMoodMessage();

    case DEGREE:
      return getDegree();

    case LONGITUDE:
      return Double.valueOf(getLongitude());

    case LATITUDE:
      return Double.valueOf(getLatitude());

    case ONLINE:
      return Boolean.valueOf(isOnline());

    case LAST_SIGN_IN_DATE:
      return Integer.valueOf(getLastSignInDate());

    case DONATE_VALUE:
      return Integer.valueOf(getDonateValue());

    case OPEN:
      return Boolean.valueOf(isOpen());

    case LOCATION:
      return getLocation();

    case LAST_WEEK_DONATION:
      return Integer.valueOf(getLastWeekDonation());

    case SIGN_IN_DAYS:
      return Integer.valueOf(getSignInDays());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PLAY_BASE_INFO:
      return isSetPlayBaseInfo();
    case MOOD_MESSAGE:
      return isSetMoodMessage();
    case DEGREE:
      return isSetDegree();
    case LONGITUDE:
      return isSetLongitude();
    case LATITUDE:
      return isSetLatitude();
    case ONLINE:
      return isSetOnline();
    case LAST_SIGN_IN_DATE:
      return isSetLastSignInDate();
    case DONATE_VALUE:
      return isSetDonateValue();
    case OPEN:
      return isSetOpen();
    case LOCATION:
      return isSetLocation();
    case LAST_WEEK_DONATION:
      return isSetLastWeekDonation();
    case SIGN_IN_DAYS:
      return isSetSignInDays();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GuildMemInfo)
      return this.equals((GuildMemInfo)that);
    return false;
  }

  public boolean equals(GuildMemInfo that) {
    if (that == null)
      return false;

    boolean this_present_playBaseInfo = true && this.isSetPlayBaseInfo();
    boolean that_present_playBaseInfo = true && that.isSetPlayBaseInfo();
    if (this_present_playBaseInfo || that_present_playBaseInfo) {
      if (!(this_present_playBaseInfo && that_present_playBaseInfo))
        return false;
      if (!this.playBaseInfo.equals(that.playBaseInfo))
        return false;
    }

    boolean this_present_moodMessage = true && this.isSetMoodMessage();
    boolean that_present_moodMessage = true && that.isSetMoodMessage();
    if (this_present_moodMessage || that_present_moodMessage) {
      if (!(this_present_moodMessage && that_present_moodMessage))
        return false;
      if (!this.moodMessage.equals(that.moodMessage))
        return false;
    }

    boolean this_present_degree = true && this.isSetDegree();
    boolean that_present_degree = true && that.isSetDegree();
    if (this_present_degree || that_present_degree) {
      if (!(this_present_degree && that_present_degree))
        return false;
      if (!this.degree.equals(that.degree))
        return false;
    }

    boolean this_present_longitude = true;
    boolean that_present_longitude = true;
    if (this_present_longitude || that_present_longitude) {
      if (!(this_present_longitude && that_present_longitude))
        return false;
      if (this.longitude != that.longitude)
        return false;
    }

    boolean this_present_latitude = true;
    boolean that_present_latitude = true;
    if (this_present_latitude || that_present_latitude) {
      if (!(this_present_latitude && that_present_latitude))
        return false;
      if (this.latitude != that.latitude)
        return false;
    }

    boolean this_present_online = true;
    boolean that_present_online = true;
    if (this_present_online || that_present_online) {
      if (!(this_present_online && that_present_online))
        return false;
      if (this.online != that.online)
        return false;
    }

    boolean this_present_lastSignInDate = true;
    boolean that_present_lastSignInDate = true;
    if (this_present_lastSignInDate || that_present_lastSignInDate) {
      if (!(this_present_lastSignInDate && that_present_lastSignInDate))
        return false;
      if (this.lastSignInDate != that.lastSignInDate)
        return false;
    }

    boolean this_present_donateValue = true;
    boolean that_present_donateValue = true;
    if (this_present_donateValue || that_present_donateValue) {
      if (!(this_present_donateValue && that_present_donateValue))
        return false;
      if (this.donateValue != that.donateValue)
        return false;
    }

    boolean this_present_open = true;
    boolean that_present_open = true;
    if (this_present_open || that_present_open) {
      if (!(this_present_open && that_present_open))
        return false;
      if (this.open != that.open)
        return false;
    }

    boolean this_present_location = true && this.isSetLocation();
    boolean that_present_location = true && that.isSetLocation();
    if (this_present_location || that_present_location) {
      if (!(this_present_location && that_present_location))
        return false;
      if (!this.location.equals(that.location))
        return false;
    }

    boolean this_present_lastWeekDonation = true;
    boolean that_present_lastWeekDonation = true;
    if (this_present_lastWeekDonation || that_present_lastWeekDonation) {
      if (!(this_present_lastWeekDonation && that_present_lastWeekDonation))
        return false;
      if (this.lastWeekDonation != that.lastWeekDonation)
        return false;
    }

    boolean this_present_signInDays = true;
    boolean that_present_signInDays = true;
    if (this_present_signInDays || that_present_signInDays) {
      if (!(this_present_signInDays && that_present_signInDays))
        return false;
      if (this.signInDays != that.signInDays)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(GuildMemInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    GuildMemInfo typedOther = (GuildMemInfo)other;

    lastComparison = Boolean.valueOf(isSetPlayBaseInfo()).compareTo(typedOther.isSetPlayBaseInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlayBaseInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.playBaseInfo, typedOther.playBaseInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMoodMessage()).compareTo(typedOther.isSetMoodMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMoodMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.moodMessage, typedOther.moodMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDegree()).compareTo(typedOther.isSetDegree());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDegree()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.degree, typedOther.degree);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLongitude()).compareTo(typedOther.isSetLongitude());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLongitude()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.longitude, typedOther.longitude);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLatitude()).compareTo(typedOther.isSetLatitude());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLatitude()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.latitude, typedOther.latitude);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOnline()).compareTo(typedOther.isSetOnline());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOnline()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.online, typedOther.online);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastSignInDate()).compareTo(typedOther.isSetLastSignInDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastSignInDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastSignInDate, typedOther.lastSignInDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDonateValue()).compareTo(typedOther.isSetDonateValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDonateValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.donateValue, typedOther.donateValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpen()).compareTo(typedOther.isSetOpen());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpen()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.open, typedOther.open);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocation()).compareTo(typedOther.isSetLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.location, typedOther.location);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastWeekDonation()).compareTo(typedOther.isSetLastWeekDonation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastWeekDonation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastWeekDonation, typedOther.lastWeekDonation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSignInDays()).compareTo(typedOther.isSetSignInDays());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSignInDays()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.signInDays, typedOther.signInDays);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GuildMemInfo(");
    boolean first = true;

    sb.append("playBaseInfo:");
    if (this.playBaseInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.playBaseInfo);
    }
    first = false;
    if (isSetMoodMessage()) {
      if (!first) sb.append(", ");
      sb.append("moodMessage:");
      if (this.moodMessage == null) {
        sb.append("null");
      } else {
        sb.append(this.moodMessage);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("degree:");
    if (this.degree == null) {
      sb.append("null");
    } else {
      sb.append(this.degree);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("longitude:");
    sb.append(this.longitude);
    first = false;
    if (!first) sb.append(", ");
    sb.append("latitude:");
    sb.append(this.latitude);
    first = false;
    if (!first) sb.append(", ");
    sb.append("online:");
    sb.append(this.online);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastSignInDate:");
    sb.append(this.lastSignInDate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("donateValue:");
    sb.append(this.donateValue);
    first = false;
    if (!first) sb.append(", ");
    sb.append("open:");
    sb.append(this.open);
    first = false;
    if (!first) sb.append(", ");
    sb.append("location:");
    if (this.location == null) {
      sb.append("null");
    } else {
      sb.append(this.location);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastWeekDonation:");
    sb.append(this.lastWeekDonation);
    first = false;
    if (!first) sb.append(", ");
    sb.append("signInDays:");
    sb.append(this.signInDays);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (playBaseInfo != null) {
      playBaseInfo.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GuildMemInfoStandardSchemeFactory implements SchemeFactory {
    public GuildMemInfoStandardScheme getScheme() {
      return new GuildMemInfoStandardScheme();
    }
  }

  private static class GuildMemInfoStandardScheme extends StandardScheme<GuildMemInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GuildMemInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PLAY_BASE_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.playBaseInfo = new PlayerBaseInfo();
              struct.playBaseInfo.read(iprot);
              struct.setPlayBaseInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MOOD_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.moodMessage = iprot.readString();
              struct.setMoodMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DEGREE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.degree = GuildDegree.findByValue(iprot.readI32());
              struct.setDegreeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LONGITUDE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.longitude = iprot.readDouble();
              struct.setLongitudeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LATITUDE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.latitude = iprot.readDouble();
              struct.setLatitudeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ONLINE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.online = iprot.readBool();
              struct.setOnlineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LAST_SIGN_IN_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lastSignInDate = iprot.readI32();
              struct.setLastSignInDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DONATE_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.donateValue = iprot.readI32();
              struct.setDonateValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // OPEN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.open = iprot.readBool();
              struct.setOpenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.location = iprot.readString();
              struct.setLocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // LAST_WEEK_DONATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lastWeekDonation = iprot.readI32();
              struct.setLastWeekDonationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SIGN_IN_DAYS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.signInDays = iprot.readI32();
              struct.setSignInDaysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GuildMemInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.playBaseInfo != null) {
        oprot.writeFieldBegin(PLAY_BASE_INFO_FIELD_DESC);
        struct.playBaseInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.moodMessage != null) {
        if (struct.isSetMoodMessage()) {
          oprot.writeFieldBegin(MOOD_MESSAGE_FIELD_DESC);
          oprot.writeString(struct.moodMessage);
          oprot.writeFieldEnd();
        }
      }
      if (struct.degree != null) {
        oprot.writeFieldBegin(DEGREE_FIELD_DESC);
        oprot.writeI32(struct.degree.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LONGITUDE_FIELD_DESC);
      oprot.writeDouble(struct.longitude);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LATITUDE_FIELD_DESC);
      oprot.writeDouble(struct.latitude);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ONLINE_FIELD_DESC);
      oprot.writeBool(struct.online);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LAST_SIGN_IN_DATE_FIELD_DESC);
      oprot.writeI32(struct.lastSignInDate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DONATE_VALUE_FIELD_DESC);
      oprot.writeI32(struct.donateValue);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OPEN_FIELD_DESC);
      oprot.writeBool(struct.open);
      oprot.writeFieldEnd();
      if (struct.location != null) {
        oprot.writeFieldBegin(LOCATION_FIELD_DESC);
        oprot.writeString(struct.location);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LAST_WEEK_DONATION_FIELD_DESC);
      oprot.writeI32(struct.lastWeekDonation);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SIGN_IN_DAYS_FIELD_DESC);
      oprot.writeI32(struct.signInDays);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GuildMemInfoTupleSchemeFactory implements SchemeFactory {
    public GuildMemInfoTupleScheme getScheme() {
      return new GuildMemInfoTupleScheme();
    }
  }

  private static class GuildMemInfoTupleScheme extends TupleScheme<GuildMemInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GuildMemInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPlayBaseInfo()) {
        optionals.set(0);
      }
      if (struct.isSetMoodMessage()) {
        optionals.set(1);
      }
      if (struct.isSetDegree()) {
        optionals.set(2);
      }
      if (struct.isSetLongitude()) {
        optionals.set(3);
      }
      if (struct.isSetLatitude()) {
        optionals.set(4);
      }
      if (struct.isSetOnline()) {
        optionals.set(5);
      }
      if (struct.isSetLastSignInDate()) {
        optionals.set(6);
      }
      if (struct.isSetDonateValue()) {
        optionals.set(7);
      }
      if (struct.isSetOpen()) {
        optionals.set(8);
      }
      if (struct.isSetLocation()) {
        optionals.set(9);
      }
      if (struct.isSetLastWeekDonation()) {
        optionals.set(10);
      }
      if (struct.isSetSignInDays()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetPlayBaseInfo()) {
        struct.playBaseInfo.write(oprot);
      }
      if (struct.isSetMoodMessage()) {
        oprot.writeString(struct.moodMessage);
      }
      if (struct.isSetDegree()) {
        oprot.writeI32(struct.degree.getValue());
      }
      if (struct.isSetLongitude()) {
        oprot.writeDouble(struct.longitude);
      }
      if (struct.isSetLatitude()) {
        oprot.writeDouble(struct.latitude);
      }
      if (struct.isSetOnline()) {
        oprot.writeBool(struct.online);
      }
      if (struct.isSetLastSignInDate()) {
        oprot.writeI32(struct.lastSignInDate);
      }
      if (struct.isSetDonateValue()) {
        oprot.writeI32(struct.donateValue);
      }
      if (struct.isSetOpen()) {
        oprot.writeBool(struct.open);
      }
      if (struct.isSetLocation()) {
        oprot.writeString(struct.location);
      }
      if (struct.isSetLastWeekDonation()) {
        oprot.writeI32(struct.lastWeekDonation);
      }
      if (struct.isSetSignInDays()) {
        oprot.writeI32(struct.signInDays);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GuildMemInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.playBaseInfo = new PlayerBaseInfo();
        struct.playBaseInfo.read(iprot);
        struct.setPlayBaseInfoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.moodMessage = iprot.readString();
        struct.setMoodMessageIsSet(true);
      }
      if (incoming.get(2)) {
        struct.degree = GuildDegree.findByValue(iprot.readI32());
        struct.setDegreeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.longitude = iprot.readDouble();
        struct.setLongitudeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.latitude = iprot.readDouble();
        struct.setLatitudeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.online = iprot.readBool();
        struct.setOnlineIsSet(true);
      }
      if (incoming.get(6)) {
        struct.lastSignInDate = iprot.readI32();
        struct.setLastSignInDateIsSet(true);
      }
      if (incoming.get(7)) {
        struct.donateValue = iprot.readI32();
        struct.setDonateValueIsSet(true);
      }
      if (incoming.get(8)) {
        struct.open = iprot.readBool();
        struct.setOpenIsSet(true);
      }
      if (incoming.get(9)) {
        struct.location = iprot.readString();
        struct.setLocationIsSet(true);
      }
      if (incoming.get(10)) {
        struct.lastWeekDonation = iprot.readI32();
        struct.setLastWeekDonationIsSet(true);
      }
      if (incoming.get(11)) {
        struct.signInDays = iprot.readI32();
        struct.setSignInDaysIsSet(true);
      }
    }
  }

}

