/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * vip登录提示
 */
public class SCVipEnterNotice implements org.apache.thrift.TBase<SCVipEnterNotice, SCVipEnterNotice._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCVipEnterNotice");

  private static final org.apache.thrift.protocol.TField SCOPE_FIELD_DESC = new org.apache.thrift.protocol.TField("scope", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField MESSAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("messageId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ARGV_FIELD_DESC = new org.apache.thrift.protocol.TField("argv", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCVipEnterNoticeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCVipEnterNoticeTupleSchemeFactory());
  }

  public int scope; // required
  public int messageId; // required
  public List<String> argv; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SCOPE((short)1, "scope"),
    MESSAGE_ID((short)2, "messageId"),
    ARGV((short)3, "argv");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SCOPE
          return SCOPE;
        case 2: // MESSAGE_ID
          return MESSAGE_ID;
        case 3: // ARGV
          return ARGV;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SCOPE_ISSET_ID = 0;
  private static final int __MESSAGEID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SCOPE, new org.apache.thrift.meta_data.FieldMetaData("scope", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MESSAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("messageId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ARGV, new org.apache.thrift.meta_data.FieldMetaData("argv", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCVipEnterNotice.class, metaDataMap);
  }

  public SCVipEnterNotice() {
  }

  public SCVipEnterNotice(
    int scope,
    int messageId,
    List<String> argv)
  {
    this();
    this.scope = scope;
    setScopeIsSet(true);
    this.messageId = messageId;
    setMessageIdIsSet(true);
    this.argv = argv;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCVipEnterNotice(SCVipEnterNotice other) {
    __isset_bitfield = other.__isset_bitfield;
    this.scope = other.scope;
    this.messageId = other.messageId;
    if (other.isSetArgv()) {
      List<String> __this__argv = new ArrayList<String>();
      for (String other_element : other.argv) {
        __this__argv.add(other_element);
      }
      this.argv = __this__argv;
    }
  }

  public SCVipEnterNotice deepCopy() {
    return new SCVipEnterNotice(this);
  }

  @Override
  public void clear() {
    setScopeIsSet(false);
    this.scope = 0;
    setMessageIdIsSet(false);
    this.messageId = 0;
    this.argv = null;
  }

  public int getScope() {
    return this.scope;
  }

  public SCVipEnterNotice setScope(int scope) {
    this.scope = scope;
    setScopeIsSet(true);
    return this;
  }

  public void unsetScope() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SCOPE_ISSET_ID);
  }

  /** Returns true if field scope is set (has been assigned a value) and false otherwise */
  public boolean isSetScope() {
    return EncodingUtils.testBit(__isset_bitfield, __SCOPE_ISSET_ID);
  }

  public void setScopeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SCOPE_ISSET_ID, value);
  }

  public int getMessageId() {
    return this.messageId;
  }

  public SCVipEnterNotice setMessageId(int messageId) {
    this.messageId = messageId;
    setMessageIdIsSet(true);
    return this;
  }

  public void unsetMessageId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MESSAGEID_ISSET_ID);
  }

  /** Returns true if field messageId is set (has been assigned a value) and false otherwise */
  public boolean isSetMessageId() {
    return EncodingUtils.testBit(__isset_bitfield, __MESSAGEID_ISSET_ID);
  }

  public void setMessageIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MESSAGEID_ISSET_ID, value);
  }

  public int getArgvSize() {
    return (this.argv == null) ? 0 : this.argv.size();
  }

  public java.util.Iterator<String> getArgvIterator() {
    return (this.argv == null) ? null : this.argv.iterator();
  }

  public void addToArgv(String elem) {
    if (this.argv == null) {
      this.argv = new ArrayList<String>();
    }
    this.argv.add(elem);
  }

  public List<String> getArgv() {
    return this.argv;
  }

  public SCVipEnterNotice setArgv(List<String> argv) {
    this.argv = argv;
    return this;
  }

  public void unsetArgv() {
    this.argv = null;
  }

  /** Returns true if field argv is set (has been assigned a value) and false otherwise */
  public boolean isSetArgv() {
    return this.argv != null;
  }

  public void setArgvIsSet(boolean value) {
    if (!value) {
      this.argv = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SCOPE:
      if (value == null) {
        unsetScope();
      } else {
        setScope((Integer)value);
      }
      break;

    case MESSAGE_ID:
      if (value == null) {
        unsetMessageId();
      } else {
        setMessageId((Integer)value);
      }
      break;

    case ARGV:
      if (value == null) {
        unsetArgv();
      } else {
        setArgv((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SCOPE:
      return Integer.valueOf(getScope());

    case MESSAGE_ID:
      return Integer.valueOf(getMessageId());

    case ARGV:
      return getArgv();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SCOPE:
      return isSetScope();
    case MESSAGE_ID:
      return isSetMessageId();
    case ARGV:
      return isSetArgv();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCVipEnterNotice)
      return this.equals((SCVipEnterNotice)that);
    return false;
  }

  public boolean equals(SCVipEnterNotice that) {
    if (that == null)
      return false;

    boolean this_present_scope = true;
    boolean that_present_scope = true;
    if (this_present_scope || that_present_scope) {
      if (!(this_present_scope && that_present_scope))
        return false;
      if (this.scope != that.scope)
        return false;
    }

    boolean this_present_messageId = true;
    boolean that_present_messageId = true;
    if (this_present_messageId || that_present_messageId) {
      if (!(this_present_messageId && that_present_messageId))
        return false;
      if (this.messageId != that.messageId)
        return false;
    }

    boolean this_present_argv = true && this.isSetArgv();
    boolean that_present_argv = true && that.isSetArgv();
    if (this_present_argv || that_present_argv) {
      if (!(this_present_argv && that_present_argv))
        return false;
      if (!this.argv.equals(that.argv))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCVipEnterNotice other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCVipEnterNotice typedOther = (SCVipEnterNotice)other;

    lastComparison = Boolean.valueOf(isSetScope()).compareTo(typedOther.isSetScope());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScope()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scope, typedOther.scope);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessageId()).compareTo(typedOther.isSetMessageId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessageId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageId, typedOther.messageId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArgv()).compareTo(typedOther.isSetArgv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArgv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.argv, typedOther.argv);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCVipEnterNotice(");
    boolean first = true;

    sb.append("scope:");
    sb.append(this.scope);
    first = false;
    if (!first) sb.append(", ");
    sb.append("messageId:");
    sb.append(this.messageId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("argv:");
    if (this.argv == null) {
      sb.append("null");
    } else {
      sb.append(this.argv);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCVipEnterNoticeStandardSchemeFactory implements SchemeFactory {
    public SCVipEnterNoticeStandardScheme getScheme() {
      return new SCVipEnterNoticeStandardScheme();
    }
  }

  private static class SCVipEnterNoticeStandardScheme extends StandardScheme<SCVipEnterNotice> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCVipEnterNotice struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SCOPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.scope = iprot.readI32();
              struct.setScopeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MESSAGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.messageId = iprot.readI32();
              struct.setMessageIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ARGV
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.argv = new ArrayList<String>(_list8.size);
                for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                {
                  String _elem10; // required
                  _elem10 = iprot.readString();
                  struct.argv.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setArgvIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCVipEnterNotice struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SCOPE_FIELD_DESC);
      oprot.writeI32(struct.scope);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MESSAGE_ID_FIELD_DESC);
      oprot.writeI32(struct.messageId);
      oprot.writeFieldEnd();
      if (struct.argv != null) {
        oprot.writeFieldBegin(ARGV_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.argv.size()));
          for (String _iter11 : struct.argv)
          {
            oprot.writeString(_iter11);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCVipEnterNoticeTupleSchemeFactory implements SchemeFactory {
    public SCVipEnterNoticeTupleScheme getScheme() {
      return new SCVipEnterNoticeTupleScheme();
    }
  }

  private static class SCVipEnterNoticeTupleScheme extends TupleScheme<SCVipEnterNotice> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCVipEnterNotice struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetScope()) {
        optionals.set(0);
      }
      if (struct.isSetMessageId()) {
        optionals.set(1);
      }
      if (struct.isSetArgv()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetScope()) {
        oprot.writeI32(struct.scope);
      }
      if (struct.isSetMessageId()) {
        oprot.writeI32(struct.messageId);
      }
      if (struct.isSetArgv()) {
        {
          oprot.writeI32(struct.argv.size());
          for (String _iter12 : struct.argv)
          {
            oprot.writeString(_iter12);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCVipEnterNotice struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.scope = iprot.readI32();
        struct.setScopeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.messageId = iprot.readI32();
        struct.setMessageIdIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.argv = new ArrayList<String>(_list13.size);
          for (int _i14 = 0; _i14 < _list13.size; ++_i14)
          {
            String _elem15; // required
            _elem15 = iprot.readString();
            struct.argv.add(_elem15);
          }
        }
        struct.setArgvIsSet(true);
      }
    }
  }

}

