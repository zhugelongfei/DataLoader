/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class LimitSaleItem implements org.apache.thrift.TBase<LimitSaleItem, LimitSaleItem._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LimitSaleItem");

  private static final org.apache.thrift.protocol.TField SORT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sortId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("itemId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField SEX_FIELD_DESC = new org.apache.thrift.protocol.TField("sex", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField REMAIN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("remainTime", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField BIND_FIELD_DESC = new org.apache.thrift.protocol.TField("bind", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField PRICE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("priceType", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("price", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField SALE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("saleCount", org.apache.thrift.protocol.TType.I32, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LimitSaleItemStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LimitSaleItemTupleSchemeFactory());
  }

  public int sortId; // required
  public int itemId; // required
  public int count; // required
  public int sex; // required
  public int remainTime; // required
  public int bind; // required
  public int priceType; // required
  public int price; // required
  public int saleCount; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SORT_ID((short)1, "sortId"),
    ITEM_ID((short)2, "itemId"),
    COUNT((short)3, "count"),
    SEX((short)4, "sex"),
    REMAIN_TIME((short)5, "remainTime"),
    BIND((short)6, "bind"),
    PRICE_TYPE((short)7, "priceType"),
    PRICE((short)8, "price"),
    SALE_COUNT((short)9, "saleCount");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SORT_ID
          return SORT_ID;
        case 2: // ITEM_ID
          return ITEM_ID;
        case 3: // COUNT
          return COUNT;
        case 4: // SEX
          return SEX;
        case 5: // REMAIN_TIME
          return REMAIN_TIME;
        case 6: // BIND
          return BIND;
        case 7: // PRICE_TYPE
          return PRICE_TYPE;
        case 8: // PRICE
          return PRICE;
        case 9: // SALE_COUNT
          return SALE_COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SORTID_ISSET_ID = 0;
  private static final int __ITEMID_ISSET_ID = 1;
  private static final int __COUNT_ISSET_ID = 2;
  private static final int __SEX_ISSET_ID = 3;
  private static final int __REMAINTIME_ISSET_ID = 4;
  private static final int __BIND_ISSET_ID = 5;
  private static final int __PRICETYPE_ISSET_ID = 6;
  private static final int __PRICE_ISSET_ID = 7;
  private static final int __SALECOUNT_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SORT_ID, new org.apache.thrift.meta_data.FieldMetaData("sortId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("itemId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SEX, new org.apache.thrift.meta_data.FieldMetaData("sex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REMAIN_TIME, new org.apache.thrift.meta_data.FieldMetaData("remainTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BIND, new org.apache.thrift.meta_data.FieldMetaData("bind", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRICE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("priceType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRICE, new org.apache.thrift.meta_data.FieldMetaData("price", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SALE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("saleCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LimitSaleItem.class, metaDataMap);
  }

  public LimitSaleItem() {
  }

  public LimitSaleItem(
    int sortId,
    int itemId,
    int count,
    int sex,
    int remainTime,
    int bind,
    int priceType,
    int price,
    int saleCount)
  {
    this();
    this.sortId = sortId;
    setSortIdIsSet(true);
    this.itemId = itemId;
    setItemIdIsSet(true);
    this.count = count;
    setCountIsSet(true);
    this.sex = sex;
    setSexIsSet(true);
    this.remainTime = remainTime;
    setRemainTimeIsSet(true);
    this.bind = bind;
    setBindIsSet(true);
    this.priceType = priceType;
    setPriceTypeIsSet(true);
    this.price = price;
    setPriceIsSet(true);
    this.saleCount = saleCount;
    setSaleCountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LimitSaleItem(LimitSaleItem other) {
    __isset_bitfield = other.__isset_bitfield;
    this.sortId = other.sortId;
    this.itemId = other.itemId;
    this.count = other.count;
    this.sex = other.sex;
    this.remainTime = other.remainTime;
    this.bind = other.bind;
    this.priceType = other.priceType;
    this.price = other.price;
    this.saleCount = other.saleCount;
  }

  public LimitSaleItem deepCopy() {
    return new LimitSaleItem(this);
  }

  @Override
  public void clear() {
    setSortIdIsSet(false);
    this.sortId = 0;
    setItemIdIsSet(false);
    this.itemId = 0;
    setCountIsSet(false);
    this.count = 0;
    setSexIsSet(false);
    this.sex = 0;
    setRemainTimeIsSet(false);
    this.remainTime = 0;
    setBindIsSet(false);
    this.bind = 0;
    setPriceTypeIsSet(false);
    this.priceType = 0;
    setPriceIsSet(false);
    this.price = 0;
    setSaleCountIsSet(false);
    this.saleCount = 0;
  }

  public int getSortId() {
    return this.sortId;
  }

  public LimitSaleItem setSortId(int sortId) {
    this.sortId = sortId;
    setSortIdIsSet(true);
    return this;
  }

  public void unsetSortId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SORTID_ISSET_ID);
  }

  /** Returns true if field sortId is set (has been assigned a value) and false otherwise */
  public boolean isSetSortId() {
    return EncodingUtils.testBit(__isset_bitfield, __SORTID_ISSET_ID);
  }

  public void setSortIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SORTID_ISSET_ID, value);
  }

  public int getItemId() {
    return this.itemId;
  }

  public LimitSaleItem setItemId(int itemId) {
    this.itemId = itemId;
    setItemIdIsSet(true);
    return this;
  }

  public void unsetItemId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ITEMID_ISSET_ID);
  }

  /** Returns true if field itemId is set (has been assigned a value) and false otherwise */
  public boolean isSetItemId() {
    return EncodingUtils.testBit(__isset_bitfield, __ITEMID_ISSET_ID);
  }

  public void setItemIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ITEMID_ISSET_ID, value);
  }

  public int getCount() {
    return this.count;
  }

  public LimitSaleItem setCount(int count) {
    this.count = count;
    setCountIsSet(true);
    return this;
  }

  public void unsetCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  /** Returns true if field count is set (has been assigned a value) and false otherwise */
  public boolean isSetCount() {
    return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  public void setCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
  }

  public int getSex() {
    return this.sex;
  }

  public LimitSaleItem setSex(int sex) {
    this.sex = sex;
    setSexIsSet(true);
    return this;
  }

  public void unsetSex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEX_ISSET_ID);
  }

  /** Returns true if field sex is set (has been assigned a value) and false otherwise */
  public boolean isSetSex() {
    return EncodingUtils.testBit(__isset_bitfield, __SEX_ISSET_ID);
  }

  public void setSexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEX_ISSET_ID, value);
  }

  public int getRemainTime() {
    return this.remainTime;
  }

  public LimitSaleItem setRemainTime(int remainTime) {
    this.remainTime = remainTime;
    setRemainTimeIsSet(true);
    return this;
  }

  public void unsetRemainTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REMAINTIME_ISSET_ID);
  }

  /** Returns true if field remainTime is set (has been assigned a value) and false otherwise */
  public boolean isSetRemainTime() {
    return EncodingUtils.testBit(__isset_bitfield, __REMAINTIME_ISSET_ID);
  }

  public void setRemainTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REMAINTIME_ISSET_ID, value);
  }

  public int getBind() {
    return this.bind;
  }

  public LimitSaleItem setBind(int bind) {
    this.bind = bind;
    setBindIsSet(true);
    return this;
  }

  public void unsetBind() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BIND_ISSET_ID);
  }

  /** Returns true if field bind is set (has been assigned a value) and false otherwise */
  public boolean isSetBind() {
    return EncodingUtils.testBit(__isset_bitfield, __BIND_ISSET_ID);
  }

  public void setBindIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BIND_ISSET_ID, value);
  }

  public int getPriceType() {
    return this.priceType;
  }

  public LimitSaleItem setPriceType(int priceType) {
    this.priceType = priceType;
    setPriceTypeIsSet(true);
    return this;
  }

  public void unsetPriceType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRICETYPE_ISSET_ID);
  }

  /** Returns true if field priceType is set (has been assigned a value) and false otherwise */
  public boolean isSetPriceType() {
    return EncodingUtils.testBit(__isset_bitfield, __PRICETYPE_ISSET_ID);
  }

  public void setPriceTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRICETYPE_ISSET_ID, value);
  }

  public int getPrice() {
    return this.price;
  }

  public LimitSaleItem setPrice(int price) {
    this.price = price;
    setPriceIsSet(true);
    return this;
  }

  public void unsetPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  /** Returns true if field price is set (has been assigned a value) and false otherwise */
  public boolean isSetPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  public void setPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRICE_ISSET_ID, value);
  }

  public int getSaleCount() {
    return this.saleCount;
  }

  public LimitSaleItem setSaleCount(int saleCount) {
    this.saleCount = saleCount;
    setSaleCountIsSet(true);
    return this;
  }

  public void unsetSaleCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SALECOUNT_ISSET_ID);
  }

  /** Returns true if field saleCount is set (has been assigned a value) and false otherwise */
  public boolean isSetSaleCount() {
    return EncodingUtils.testBit(__isset_bitfield, __SALECOUNT_ISSET_ID);
  }

  public void setSaleCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SALECOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SORT_ID:
      if (value == null) {
        unsetSortId();
      } else {
        setSortId((Integer)value);
      }
      break;

    case ITEM_ID:
      if (value == null) {
        unsetItemId();
      } else {
        setItemId((Integer)value);
      }
      break;

    case COUNT:
      if (value == null) {
        unsetCount();
      } else {
        setCount((Integer)value);
      }
      break;

    case SEX:
      if (value == null) {
        unsetSex();
      } else {
        setSex((Integer)value);
      }
      break;

    case REMAIN_TIME:
      if (value == null) {
        unsetRemainTime();
      } else {
        setRemainTime((Integer)value);
      }
      break;

    case BIND:
      if (value == null) {
        unsetBind();
      } else {
        setBind((Integer)value);
      }
      break;

    case PRICE_TYPE:
      if (value == null) {
        unsetPriceType();
      } else {
        setPriceType((Integer)value);
      }
      break;

    case PRICE:
      if (value == null) {
        unsetPrice();
      } else {
        setPrice((Integer)value);
      }
      break;

    case SALE_COUNT:
      if (value == null) {
        unsetSaleCount();
      } else {
        setSaleCount((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SORT_ID:
      return Integer.valueOf(getSortId());

    case ITEM_ID:
      return Integer.valueOf(getItemId());

    case COUNT:
      return Integer.valueOf(getCount());

    case SEX:
      return Integer.valueOf(getSex());

    case REMAIN_TIME:
      return Integer.valueOf(getRemainTime());

    case BIND:
      return Integer.valueOf(getBind());

    case PRICE_TYPE:
      return Integer.valueOf(getPriceType());

    case PRICE:
      return Integer.valueOf(getPrice());

    case SALE_COUNT:
      return Integer.valueOf(getSaleCount());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SORT_ID:
      return isSetSortId();
    case ITEM_ID:
      return isSetItemId();
    case COUNT:
      return isSetCount();
    case SEX:
      return isSetSex();
    case REMAIN_TIME:
      return isSetRemainTime();
    case BIND:
      return isSetBind();
    case PRICE_TYPE:
      return isSetPriceType();
    case PRICE:
      return isSetPrice();
    case SALE_COUNT:
      return isSetSaleCount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LimitSaleItem)
      return this.equals((LimitSaleItem)that);
    return false;
  }

  public boolean equals(LimitSaleItem that) {
    if (that == null)
      return false;

    boolean this_present_sortId = true;
    boolean that_present_sortId = true;
    if (this_present_sortId || that_present_sortId) {
      if (!(this_present_sortId && that_present_sortId))
        return false;
      if (this.sortId != that.sortId)
        return false;
    }

    boolean this_present_itemId = true;
    boolean that_present_itemId = true;
    if (this_present_itemId || that_present_itemId) {
      if (!(this_present_itemId && that_present_itemId))
        return false;
      if (this.itemId != that.itemId)
        return false;
    }

    boolean this_present_count = true;
    boolean that_present_count = true;
    if (this_present_count || that_present_count) {
      if (!(this_present_count && that_present_count))
        return false;
      if (this.count != that.count)
        return false;
    }

    boolean this_present_sex = true;
    boolean that_present_sex = true;
    if (this_present_sex || that_present_sex) {
      if (!(this_present_sex && that_present_sex))
        return false;
      if (this.sex != that.sex)
        return false;
    }

    boolean this_present_remainTime = true;
    boolean that_present_remainTime = true;
    if (this_present_remainTime || that_present_remainTime) {
      if (!(this_present_remainTime && that_present_remainTime))
        return false;
      if (this.remainTime != that.remainTime)
        return false;
    }

    boolean this_present_bind = true;
    boolean that_present_bind = true;
    if (this_present_bind || that_present_bind) {
      if (!(this_present_bind && that_present_bind))
        return false;
      if (this.bind != that.bind)
        return false;
    }

    boolean this_present_priceType = true;
    boolean that_present_priceType = true;
    if (this_present_priceType || that_present_priceType) {
      if (!(this_present_priceType && that_present_priceType))
        return false;
      if (this.priceType != that.priceType)
        return false;
    }

    boolean this_present_price = true;
    boolean that_present_price = true;
    if (this_present_price || that_present_price) {
      if (!(this_present_price && that_present_price))
        return false;
      if (this.price != that.price)
        return false;
    }

    boolean this_present_saleCount = true;
    boolean that_present_saleCount = true;
    if (this_present_saleCount || that_present_saleCount) {
      if (!(this_present_saleCount && that_present_saleCount))
        return false;
      if (this.saleCount != that.saleCount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(LimitSaleItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    LimitSaleItem typedOther = (LimitSaleItem)other;

    lastComparison = Boolean.valueOf(isSetSortId()).compareTo(typedOther.isSetSortId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSortId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortId, typedOther.sortId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItemId()).compareTo(typedOther.isSetItemId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemId, typedOther.itemId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSex()).compareTo(typedOther.isSetSex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sex, typedOther.sex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemainTime()).compareTo(typedOther.isSetRemainTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemainTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remainTime, typedOther.remainTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBind()).compareTo(typedOther.isSetBind());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBind()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bind, typedOther.bind);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPriceType()).compareTo(typedOther.isSetPriceType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriceType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priceType, typedOther.priceType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrice()).compareTo(typedOther.isSetPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.price, typedOther.price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSaleCount()).compareTo(typedOther.isSetSaleCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSaleCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.saleCount, typedOther.saleCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LimitSaleItem(");
    boolean first = true;

    sb.append("sortId:");
    sb.append(this.sortId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("itemId:");
    sb.append(this.itemId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("count:");
    sb.append(this.count);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sex:");
    sb.append(this.sex);
    first = false;
    if (!first) sb.append(", ");
    sb.append("remainTime:");
    sb.append(this.remainTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bind:");
    sb.append(this.bind);
    first = false;
    if (!first) sb.append(", ");
    sb.append("priceType:");
    sb.append(this.priceType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("price:");
    sb.append(this.price);
    first = false;
    if (!first) sb.append(", ");
    sb.append("saleCount:");
    sb.append(this.saleCount);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LimitSaleItemStandardSchemeFactory implements SchemeFactory {
    public LimitSaleItemStandardScheme getScheme() {
      return new LimitSaleItemStandardScheme();
    }
  }

  private static class LimitSaleItemStandardScheme extends StandardScheme<LimitSaleItem> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LimitSaleItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SORT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sortId = iprot.readI32();
              struct.setSortIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ITEM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.itemId = iprot.readI32();
              struct.setItemIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.count = iprot.readI32();
              struct.setCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sex = iprot.readI32();
              struct.setSexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REMAIN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.remainTime = iprot.readI32();
              struct.setRemainTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BIND
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bind = iprot.readI32();
              struct.setBindIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PRICE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.priceType = iprot.readI32();
              struct.setPriceTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.price = iprot.readI32();
              struct.setPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SALE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.saleCount = iprot.readI32();
              struct.setSaleCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LimitSaleItem struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SORT_ID_FIELD_DESC);
      oprot.writeI32(struct.sortId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
      oprot.writeI32(struct.itemId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COUNT_FIELD_DESC);
      oprot.writeI32(struct.count);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SEX_FIELD_DESC);
      oprot.writeI32(struct.sex);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REMAIN_TIME_FIELD_DESC);
      oprot.writeI32(struct.remainTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BIND_FIELD_DESC);
      oprot.writeI32(struct.bind);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRICE_TYPE_FIELD_DESC);
      oprot.writeI32(struct.priceType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRICE_FIELD_DESC);
      oprot.writeI32(struct.price);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SALE_COUNT_FIELD_DESC);
      oprot.writeI32(struct.saleCount);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LimitSaleItemTupleSchemeFactory implements SchemeFactory {
    public LimitSaleItemTupleScheme getScheme() {
      return new LimitSaleItemTupleScheme();
    }
  }

  private static class LimitSaleItemTupleScheme extends TupleScheme<LimitSaleItem> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LimitSaleItem struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSortId()) {
        optionals.set(0);
      }
      if (struct.isSetItemId()) {
        optionals.set(1);
      }
      if (struct.isSetCount()) {
        optionals.set(2);
      }
      if (struct.isSetSex()) {
        optionals.set(3);
      }
      if (struct.isSetRemainTime()) {
        optionals.set(4);
      }
      if (struct.isSetBind()) {
        optionals.set(5);
      }
      if (struct.isSetPriceType()) {
        optionals.set(6);
      }
      if (struct.isSetPrice()) {
        optionals.set(7);
      }
      if (struct.isSetSaleCount()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetSortId()) {
        oprot.writeI32(struct.sortId);
      }
      if (struct.isSetItemId()) {
        oprot.writeI32(struct.itemId);
      }
      if (struct.isSetCount()) {
        oprot.writeI32(struct.count);
      }
      if (struct.isSetSex()) {
        oprot.writeI32(struct.sex);
      }
      if (struct.isSetRemainTime()) {
        oprot.writeI32(struct.remainTime);
      }
      if (struct.isSetBind()) {
        oprot.writeI32(struct.bind);
      }
      if (struct.isSetPriceType()) {
        oprot.writeI32(struct.priceType);
      }
      if (struct.isSetPrice()) {
        oprot.writeI32(struct.price);
      }
      if (struct.isSetSaleCount()) {
        oprot.writeI32(struct.saleCount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LimitSaleItem struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.sortId = iprot.readI32();
        struct.setSortIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.itemId = iprot.readI32();
        struct.setItemIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.count = iprot.readI32();
        struct.setCountIsSet(true);
      }
      if (incoming.get(3)) {
        struct.sex = iprot.readI32();
        struct.setSexIsSet(true);
      }
      if (incoming.get(4)) {
        struct.remainTime = iprot.readI32();
        struct.setRemainTimeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.bind = iprot.readI32();
        struct.setBindIsSet(true);
      }
      if (incoming.get(6)) {
        struct.priceType = iprot.readI32();
        struct.setPriceTypeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.price = iprot.readI32();
        struct.setPriceIsSet(true);
      }
      if (incoming.get(8)) {
        struct.saleCount = iprot.readI32();
        struct.setSaleCountIsSet(true);
      }
    }
  }

}

