/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.cs;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 婚礼答谢
 */
public class CSWeddingThank implements org.apache.thrift.TBase<CSWeddingThank, CSWeddingThank._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CSWeddingThank");

  private static final org.apache.thrift.protocol.TField CANDY_BAG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("candyBagId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField THANK_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("thankContent", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CSWeddingThankStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CSWeddingThankTupleSchemeFactory());
  }

  /**
   * 每位答谢喜糖档位id
   */
  public int candyBagId; // required
  /**
   * 答谢词
   */
  public String thankContent; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 每位答谢喜糖档位id
     */
    CANDY_BAG_ID((short)1, "candyBagId"),
    /**
     * 答谢词
     */
    THANK_CONTENT((short)2, "thankContent");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CANDY_BAG_ID
          return CANDY_BAG_ID;
        case 2: // THANK_CONTENT
          return THANK_CONTENT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CANDYBAGID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CANDY_BAG_ID, new org.apache.thrift.meta_data.FieldMetaData("candyBagId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.THANK_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("thankContent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CSWeddingThank.class, metaDataMap);
  }

  public CSWeddingThank() {
  }

  public CSWeddingThank(
    int candyBagId,
    String thankContent)
  {
    this();
    this.candyBagId = candyBagId;
    setCandyBagIdIsSet(true);
    this.thankContent = thankContent;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CSWeddingThank(CSWeddingThank other) {
    __isset_bitfield = other.__isset_bitfield;
    this.candyBagId = other.candyBagId;
    if (other.isSetThankContent()) {
      this.thankContent = other.thankContent;
    }
  }

  public CSWeddingThank deepCopy() {
    return new CSWeddingThank(this);
  }

  @Override
  public void clear() {
    setCandyBagIdIsSet(false);
    this.candyBagId = 0;
    this.thankContent = null;
  }

  /**
   * 每位答谢喜糖档位id
   */
  public int getCandyBagId() {
    return this.candyBagId;
  }

  /**
   * 每位答谢喜糖档位id
   */
  public CSWeddingThank setCandyBagId(int candyBagId) {
    this.candyBagId = candyBagId;
    setCandyBagIdIsSet(true);
    return this;
  }

  public void unsetCandyBagId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CANDYBAGID_ISSET_ID);
  }

  /** Returns true if field candyBagId is set (has been assigned a value) and false otherwise */
  public boolean isSetCandyBagId() {
    return EncodingUtils.testBit(__isset_bitfield, __CANDYBAGID_ISSET_ID);
  }

  public void setCandyBagIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CANDYBAGID_ISSET_ID, value);
  }

  /**
   * 答谢词
   */
  public String getThankContent() {
    return this.thankContent;
  }

  /**
   * 答谢词
   */
  public CSWeddingThank setThankContent(String thankContent) {
    this.thankContent = thankContent;
    return this;
  }

  public void unsetThankContent() {
    this.thankContent = null;
  }

  /** Returns true if field thankContent is set (has been assigned a value) and false otherwise */
  public boolean isSetThankContent() {
    return this.thankContent != null;
  }

  public void setThankContentIsSet(boolean value) {
    if (!value) {
      this.thankContent = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CANDY_BAG_ID:
      if (value == null) {
        unsetCandyBagId();
      } else {
        setCandyBagId((Integer)value);
      }
      break;

    case THANK_CONTENT:
      if (value == null) {
        unsetThankContent();
      } else {
        setThankContent((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CANDY_BAG_ID:
      return Integer.valueOf(getCandyBagId());

    case THANK_CONTENT:
      return getThankContent();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CANDY_BAG_ID:
      return isSetCandyBagId();
    case THANK_CONTENT:
      return isSetThankContent();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CSWeddingThank)
      return this.equals((CSWeddingThank)that);
    return false;
  }

  public boolean equals(CSWeddingThank that) {
    if (that == null)
      return false;

    boolean this_present_candyBagId = true;
    boolean that_present_candyBagId = true;
    if (this_present_candyBagId || that_present_candyBagId) {
      if (!(this_present_candyBagId && that_present_candyBagId))
        return false;
      if (this.candyBagId != that.candyBagId)
        return false;
    }

    boolean this_present_thankContent = true && this.isSetThankContent();
    boolean that_present_thankContent = true && that.isSetThankContent();
    if (this_present_thankContent || that_present_thankContent) {
      if (!(this_present_thankContent && that_present_thankContent))
        return false;
      if (!this.thankContent.equals(that.thankContent))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(CSWeddingThank other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CSWeddingThank typedOther = (CSWeddingThank)other;

    lastComparison = Boolean.valueOf(isSetCandyBagId()).compareTo(typedOther.isSetCandyBagId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCandyBagId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.candyBagId, typedOther.candyBagId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThankContent()).compareTo(typedOther.isSetThankContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThankContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thankContent, typedOther.thankContent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CSWeddingThank(");
    boolean first = true;

    sb.append("candyBagId:");
    sb.append(this.candyBagId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("thankContent:");
    if (this.thankContent == null) {
      sb.append("null");
    } else {
      sb.append(this.thankContent);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CSWeddingThankStandardSchemeFactory implements SchemeFactory {
    public CSWeddingThankStandardScheme getScheme() {
      return new CSWeddingThankStandardScheme();
    }
  }

  private static class CSWeddingThankStandardScheme extends StandardScheme<CSWeddingThank> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CSWeddingThank struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CANDY_BAG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.candyBagId = iprot.readI32();
              struct.setCandyBagIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // THANK_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.thankContent = iprot.readString();
              struct.setThankContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CSWeddingThank struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CANDY_BAG_ID_FIELD_DESC);
      oprot.writeI32(struct.candyBagId);
      oprot.writeFieldEnd();
      if (struct.thankContent != null) {
        oprot.writeFieldBegin(THANK_CONTENT_FIELD_DESC);
        oprot.writeString(struct.thankContent);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CSWeddingThankTupleSchemeFactory implements SchemeFactory {
    public CSWeddingThankTupleScheme getScheme() {
      return new CSWeddingThankTupleScheme();
    }
  }

  private static class CSWeddingThankTupleScheme extends TupleScheme<CSWeddingThank> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CSWeddingThank struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCandyBagId()) {
        optionals.set(0);
      }
      if (struct.isSetThankContent()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetCandyBagId()) {
        oprot.writeI32(struct.candyBagId);
      }
      if (struct.isSetThankContent()) {
        oprot.writeString(struct.thankContent);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CSWeddingThank struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.candyBagId = iprot.readI32();
        struct.setCandyBagIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.thankContent = iprot.readString();
        struct.setThankContentIsSet(true);
      }
    }
  }

}

