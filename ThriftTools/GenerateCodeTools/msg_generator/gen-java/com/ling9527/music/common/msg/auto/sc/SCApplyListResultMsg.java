/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SCApplyListResultMsg implements org.apache.thrift.TBase<SCApplyListResultMsg, SCApplyListResultMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCApplyListResultMsg");

  private static final org.apache.thrift.protocol.TField START_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("startIndex", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I16, (short)2);
  private static final org.apache.thrift.protocol.TField MEM_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("memList", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField TOTAL_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalCount", org.apache.thrift.protocol.TType.I16, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCApplyListResultMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCApplyListResultMsgTupleSchemeFactory());
  }

  public int startIndex; // required
  public short count; // required
  public List<com.ling9527.music.common.msg.auto.GuildMemInfo> memList; // required
  public short totalCount; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    START_INDEX((short)1, "startIndex"),
    COUNT((short)2, "count"),
    MEM_LIST((short)3, "memList"),
    TOTAL_COUNT((short)4, "totalCount");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // START_INDEX
          return START_INDEX;
        case 2: // COUNT
          return COUNT;
        case 3: // MEM_LIST
          return MEM_LIST;
        case 4: // TOTAL_COUNT
          return TOTAL_COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STARTINDEX_ISSET_ID = 0;
  private static final int __COUNT_ISSET_ID = 1;
  private static final int __TOTALCOUNT_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.START_INDEX, new org.apache.thrift.meta_data.FieldMetaData("startIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.MEM_LIST, new org.apache.thrift.meta_data.FieldMetaData("memList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.GuildMemInfo.class))));
    tmpMap.put(_Fields.TOTAL_COUNT, new org.apache.thrift.meta_data.FieldMetaData("totalCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCApplyListResultMsg.class, metaDataMap);
  }

  public SCApplyListResultMsg() {
  }

  public SCApplyListResultMsg(
    int startIndex,
    short count,
    List<com.ling9527.music.common.msg.auto.GuildMemInfo> memList,
    short totalCount)
  {
    this();
    this.startIndex = startIndex;
    setStartIndexIsSet(true);
    this.count = count;
    setCountIsSet(true);
    this.memList = memList;
    this.totalCount = totalCount;
    setTotalCountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCApplyListResultMsg(SCApplyListResultMsg other) {
    __isset_bitfield = other.__isset_bitfield;
    this.startIndex = other.startIndex;
    this.count = other.count;
    if (other.isSetMemList()) {
      List<com.ling9527.music.common.msg.auto.GuildMemInfo> __this__memList = new ArrayList<com.ling9527.music.common.msg.auto.GuildMemInfo>();
      for (com.ling9527.music.common.msg.auto.GuildMemInfo other_element : other.memList) {
        __this__memList.add(new com.ling9527.music.common.msg.auto.GuildMemInfo(other_element));
      }
      this.memList = __this__memList;
    }
    this.totalCount = other.totalCount;
  }

  public SCApplyListResultMsg deepCopy() {
    return new SCApplyListResultMsg(this);
  }

  @Override
  public void clear() {
    setStartIndexIsSet(false);
    this.startIndex = 0;
    setCountIsSet(false);
    this.count = 0;
    this.memList = null;
    setTotalCountIsSet(false);
    this.totalCount = 0;
  }

  public int getStartIndex() {
    return this.startIndex;
  }

  public SCApplyListResultMsg setStartIndex(int startIndex) {
    this.startIndex = startIndex;
    setStartIndexIsSet(true);
    return this;
  }

  public void unsetStartIndex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTINDEX_ISSET_ID);
  }

  /** Returns true if field startIndex is set (has been assigned a value) and false otherwise */
  public boolean isSetStartIndex() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTINDEX_ISSET_ID);
  }

  public void setStartIndexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTINDEX_ISSET_ID, value);
  }

  public short getCount() {
    return this.count;
  }

  public SCApplyListResultMsg setCount(short count) {
    this.count = count;
    setCountIsSet(true);
    return this;
  }

  public void unsetCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  /** Returns true if field count is set (has been assigned a value) and false otherwise */
  public boolean isSetCount() {
    return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  public void setCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
  }

  public int getMemListSize() {
    return (this.memList == null) ? 0 : this.memList.size();
  }

  public java.util.Iterator<com.ling9527.music.common.msg.auto.GuildMemInfo> getMemListIterator() {
    return (this.memList == null) ? null : this.memList.iterator();
  }

  public void addToMemList(com.ling9527.music.common.msg.auto.GuildMemInfo elem) {
    if (this.memList == null) {
      this.memList = new ArrayList<com.ling9527.music.common.msg.auto.GuildMemInfo>();
    }
    this.memList.add(elem);
  }

  public List<com.ling9527.music.common.msg.auto.GuildMemInfo> getMemList() {
    return this.memList;
  }

  public SCApplyListResultMsg setMemList(List<com.ling9527.music.common.msg.auto.GuildMemInfo> memList) {
    this.memList = memList;
    return this;
  }

  public void unsetMemList() {
    this.memList = null;
  }

  /** Returns true if field memList is set (has been assigned a value) and false otherwise */
  public boolean isSetMemList() {
    return this.memList != null;
  }

  public void setMemListIsSet(boolean value) {
    if (!value) {
      this.memList = null;
    }
  }

  public short getTotalCount() {
    return this.totalCount;
  }

  public SCApplyListResultMsg setTotalCount(short totalCount) {
    this.totalCount = totalCount;
    setTotalCountIsSet(true);
    return this;
  }

  public void unsetTotalCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALCOUNT_ISSET_ID);
  }

  /** Returns true if field totalCount is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalCount() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALCOUNT_ISSET_ID);
  }

  public void setTotalCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALCOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case START_INDEX:
      if (value == null) {
        unsetStartIndex();
      } else {
        setStartIndex((Integer)value);
      }
      break;

    case COUNT:
      if (value == null) {
        unsetCount();
      } else {
        setCount((Short)value);
      }
      break;

    case MEM_LIST:
      if (value == null) {
        unsetMemList();
      } else {
        setMemList((List<com.ling9527.music.common.msg.auto.GuildMemInfo>)value);
      }
      break;

    case TOTAL_COUNT:
      if (value == null) {
        unsetTotalCount();
      } else {
        setTotalCount((Short)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case START_INDEX:
      return Integer.valueOf(getStartIndex());

    case COUNT:
      return Short.valueOf(getCount());

    case MEM_LIST:
      return getMemList();

    case TOTAL_COUNT:
      return Short.valueOf(getTotalCount());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case START_INDEX:
      return isSetStartIndex();
    case COUNT:
      return isSetCount();
    case MEM_LIST:
      return isSetMemList();
    case TOTAL_COUNT:
      return isSetTotalCount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCApplyListResultMsg)
      return this.equals((SCApplyListResultMsg)that);
    return false;
  }

  public boolean equals(SCApplyListResultMsg that) {
    if (that == null)
      return false;

    boolean this_present_startIndex = true;
    boolean that_present_startIndex = true;
    if (this_present_startIndex || that_present_startIndex) {
      if (!(this_present_startIndex && that_present_startIndex))
        return false;
      if (this.startIndex != that.startIndex)
        return false;
    }

    boolean this_present_count = true;
    boolean that_present_count = true;
    if (this_present_count || that_present_count) {
      if (!(this_present_count && that_present_count))
        return false;
      if (this.count != that.count)
        return false;
    }

    boolean this_present_memList = true && this.isSetMemList();
    boolean that_present_memList = true && that.isSetMemList();
    if (this_present_memList || that_present_memList) {
      if (!(this_present_memList && that_present_memList))
        return false;
      if (!this.memList.equals(that.memList))
        return false;
    }

    boolean this_present_totalCount = true;
    boolean that_present_totalCount = true;
    if (this_present_totalCount || that_present_totalCount) {
      if (!(this_present_totalCount && that_present_totalCount))
        return false;
      if (this.totalCount != that.totalCount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCApplyListResultMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCApplyListResultMsg typedOther = (SCApplyListResultMsg)other;

    lastComparison = Boolean.valueOf(isSetStartIndex()).compareTo(typedOther.isSetStartIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startIndex, typedOther.startIndex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemList()).compareTo(typedOther.isSetMemList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memList, typedOther.memList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalCount()).compareTo(typedOther.isSetTotalCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalCount, typedOther.totalCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCApplyListResultMsg(");
    boolean first = true;

    sb.append("startIndex:");
    sb.append(this.startIndex);
    first = false;
    if (!first) sb.append(", ");
    sb.append("count:");
    sb.append(this.count);
    first = false;
    if (!first) sb.append(", ");
    sb.append("memList:");
    if (this.memList == null) {
      sb.append("null");
    } else {
      sb.append(this.memList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalCount:");
    sb.append(this.totalCount);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCApplyListResultMsgStandardSchemeFactory implements SchemeFactory {
    public SCApplyListResultMsgStandardScheme getScheme() {
      return new SCApplyListResultMsgStandardScheme();
    }
  }

  private static class SCApplyListResultMsgStandardScheme extends StandardScheme<SCApplyListResultMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCApplyListResultMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // START_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.startIndex = iprot.readI32();
              struct.setStartIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.count = iprot.readI16();
              struct.setCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MEM_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.memList = new ArrayList<com.ling9527.music.common.msg.auto.GuildMemInfo>(_list16.size);
                for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                {
                  com.ling9527.music.common.msg.auto.GuildMemInfo _elem18; // required
                  _elem18 = new com.ling9527.music.common.msg.auto.GuildMemInfo();
                  _elem18.read(iprot);
                  struct.memList.add(_elem18);
                }
                iprot.readListEnd();
              }
              struct.setMemListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TOTAL_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.totalCount = iprot.readI16();
              struct.setTotalCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCApplyListResultMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(START_INDEX_FIELD_DESC);
      oprot.writeI32(struct.startIndex);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COUNT_FIELD_DESC);
      oprot.writeI16(struct.count);
      oprot.writeFieldEnd();
      if (struct.memList != null) {
        oprot.writeFieldBegin(MEM_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.memList.size()));
          for (com.ling9527.music.common.msg.auto.GuildMemInfo _iter19 : struct.memList)
          {
            _iter19.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TOTAL_COUNT_FIELD_DESC);
      oprot.writeI16(struct.totalCount);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCApplyListResultMsgTupleSchemeFactory implements SchemeFactory {
    public SCApplyListResultMsgTupleScheme getScheme() {
      return new SCApplyListResultMsgTupleScheme();
    }
  }

  private static class SCApplyListResultMsgTupleScheme extends TupleScheme<SCApplyListResultMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCApplyListResultMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetStartIndex()) {
        optionals.set(0);
      }
      if (struct.isSetCount()) {
        optionals.set(1);
      }
      if (struct.isSetMemList()) {
        optionals.set(2);
      }
      if (struct.isSetTotalCount()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetStartIndex()) {
        oprot.writeI32(struct.startIndex);
      }
      if (struct.isSetCount()) {
        oprot.writeI16(struct.count);
      }
      if (struct.isSetMemList()) {
        {
          oprot.writeI32(struct.memList.size());
          for (com.ling9527.music.common.msg.auto.GuildMemInfo _iter20 : struct.memList)
          {
            _iter20.write(oprot);
          }
        }
      }
      if (struct.isSetTotalCount()) {
        oprot.writeI16(struct.totalCount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCApplyListResultMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.startIndex = iprot.readI32();
        struct.setStartIndexIsSet(true);
      }
      if (incoming.get(1)) {
        struct.count = iprot.readI16();
        struct.setCountIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.memList = new ArrayList<com.ling9527.music.common.msg.auto.GuildMemInfo>(_list21.size);
          for (int _i22 = 0; _i22 < _list21.size; ++_i22)
          {
            com.ling9527.music.common.msg.auto.GuildMemInfo _elem23; // required
            _elem23 = new com.ling9527.music.common.msg.auto.GuildMemInfo();
            _elem23.read(iprot);
            struct.memList.add(_elem23);
          }
        }
        struct.setMemListIsSet(true);
      }
      if (incoming.get(3)) {
        struct.totalCount = iprot.readI16();
        struct.setTotalCountIsSet(true);
      }
    }
  }

}

