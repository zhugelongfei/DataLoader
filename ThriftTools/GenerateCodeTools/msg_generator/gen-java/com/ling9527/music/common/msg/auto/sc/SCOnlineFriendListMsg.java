/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 在线好友列表
 */
public class SCOnlineFriendListMsg implements org.apache.thrift.TBase<SCOnlineFriendListMsg, SCOnlineFriendListMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCOnlineFriendListMsg");

  private static final org.apache.thrift.protocol.TField TID_FIELD_DESC = new org.apache.thrift.protocol.TField("tid", org.apache.thrift.protocol.TType.BYTE, (short)1);
  private static final org.apache.thrift.protocol.TField ONLINE_FRIEND_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("onlineFriendInfos", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCOnlineFriendListMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCOnlineFriendListMsgTupleSchemeFactory());
  }

  public byte tid; // required
  /**
   * 在线好友房间id信息
   */
  public List<OnlineFriendInfo> onlineFriendInfos; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TID((short)1, "tid"),
    /**
     * 在线好友房间id信息
     */
    ONLINE_FRIEND_INFOS((short)2, "onlineFriendInfos");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TID
          return TID;
        case 2: // ONLINE_FRIEND_INFOS
          return ONLINE_FRIEND_INFOS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TID, new org.apache.thrift.meta_data.FieldMetaData("tid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.ONLINE_FRIEND_INFOS, new org.apache.thrift.meta_data.FieldMetaData("onlineFriendInfos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OnlineFriendInfo.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCOnlineFriendListMsg.class, metaDataMap);
  }

  public SCOnlineFriendListMsg() {
  }

  public SCOnlineFriendListMsg(
    byte tid,
    List<OnlineFriendInfo> onlineFriendInfos)
  {
    this();
    this.tid = tid;
    setTidIsSet(true);
    this.onlineFriendInfos = onlineFriendInfos;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCOnlineFriendListMsg(SCOnlineFriendListMsg other) {
    __isset_bitfield = other.__isset_bitfield;
    this.tid = other.tid;
    if (other.isSetOnlineFriendInfos()) {
      List<OnlineFriendInfo> __this__onlineFriendInfos = new ArrayList<OnlineFriendInfo>();
      for (OnlineFriendInfo other_element : other.onlineFriendInfos) {
        __this__onlineFriendInfos.add(new OnlineFriendInfo(other_element));
      }
      this.onlineFriendInfos = __this__onlineFriendInfos;
    }
  }

  public SCOnlineFriendListMsg deepCopy() {
    return new SCOnlineFriendListMsg(this);
  }

  @Override
  public void clear() {
    setTidIsSet(false);
    this.tid = 0;
    this.onlineFriendInfos = null;
  }

  public byte getTid() {
    return this.tid;
  }

  public SCOnlineFriendListMsg setTid(byte tid) {
    this.tid = tid;
    setTidIsSet(true);
    return this;
  }

  public void unsetTid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TID_ISSET_ID);
  }

  /** Returns true if field tid is set (has been assigned a value) and false otherwise */
  public boolean isSetTid() {
    return EncodingUtils.testBit(__isset_bitfield, __TID_ISSET_ID);
  }

  public void setTidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TID_ISSET_ID, value);
  }

  public int getOnlineFriendInfosSize() {
    return (this.onlineFriendInfos == null) ? 0 : this.onlineFriendInfos.size();
  }

  public java.util.Iterator<OnlineFriendInfo> getOnlineFriendInfosIterator() {
    return (this.onlineFriendInfos == null) ? null : this.onlineFriendInfos.iterator();
  }

  public void addToOnlineFriendInfos(OnlineFriendInfo elem) {
    if (this.onlineFriendInfos == null) {
      this.onlineFriendInfos = new ArrayList<OnlineFriendInfo>();
    }
    this.onlineFriendInfos.add(elem);
  }

  /**
   * 在线好友房间id信息
   */
  public List<OnlineFriendInfo> getOnlineFriendInfos() {
    return this.onlineFriendInfos;
  }

  /**
   * 在线好友房间id信息
   */
  public SCOnlineFriendListMsg setOnlineFriendInfos(List<OnlineFriendInfo> onlineFriendInfos) {
    this.onlineFriendInfos = onlineFriendInfos;
    return this;
  }

  public void unsetOnlineFriendInfos() {
    this.onlineFriendInfos = null;
  }

  /** Returns true if field onlineFriendInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetOnlineFriendInfos() {
    return this.onlineFriendInfos != null;
  }

  public void setOnlineFriendInfosIsSet(boolean value) {
    if (!value) {
      this.onlineFriendInfos = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TID:
      if (value == null) {
        unsetTid();
      } else {
        setTid((Byte)value);
      }
      break;

    case ONLINE_FRIEND_INFOS:
      if (value == null) {
        unsetOnlineFriendInfos();
      } else {
        setOnlineFriendInfos((List<OnlineFriendInfo>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TID:
      return Byte.valueOf(getTid());

    case ONLINE_FRIEND_INFOS:
      return getOnlineFriendInfos();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TID:
      return isSetTid();
    case ONLINE_FRIEND_INFOS:
      return isSetOnlineFriendInfos();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCOnlineFriendListMsg)
      return this.equals((SCOnlineFriendListMsg)that);
    return false;
  }

  public boolean equals(SCOnlineFriendListMsg that) {
    if (that == null)
      return false;

    boolean this_present_tid = true;
    boolean that_present_tid = true;
    if (this_present_tid || that_present_tid) {
      if (!(this_present_tid && that_present_tid))
        return false;
      if (this.tid != that.tid)
        return false;
    }

    boolean this_present_onlineFriendInfos = true && this.isSetOnlineFriendInfos();
    boolean that_present_onlineFriendInfos = true && that.isSetOnlineFriendInfos();
    if (this_present_onlineFriendInfos || that_present_onlineFriendInfos) {
      if (!(this_present_onlineFriendInfos && that_present_onlineFriendInfos))
        return false;
      if (!this.onlineFriendInfos.equals(that.onlineFriendInfos))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCOnlineFriendListMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCOnlineFriendListMsg typedOther = (SCOnlineFriendListMsg)other;

    lastComparison = Boolean.valueOf(isSetTid()).compareTo(typedOther.isSetTid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tid, typedOther.tid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOnlineFriendInfos()).compareTo(typedOther.isSetOnlineFriendInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOnlineFriendInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.onlineFriendInfos, typedOther.onlineFriendInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCOnlineFriendListMsg(");
    boolean first = true;

    sb.append("tid:");
    sb.append(this.tid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("onlineFriendInfos:");
    if (this.onlineFriendInfos == null) {
      sb.append("null");
    } else {
      sb.append(this.onlineFriendInfos);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCOnlineFriendListMsgStandardSchemeFactory implements SchemeFactory {
    public SCOnlineFriendListMsgStandardScheme getScheme() {
      return new SCOnlineFriendListMsgStandardScheme();
    }
  }

  private static class SCOnlineFriendListMsgStandardScheme extends StandardScheme<SCOnlineFriendListMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCOnlineFriendListMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TID
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.tid = iprot.readByte();
              struct.setTidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ONLINE_FRIEND_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.onlineFriendInfos = new ArrayList<OnlineFriendInfo>(_list16.size);
                for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                {
                  OnlineFriendInfo _elem18; // required
                  _elem18 = new OnlineFriendInfo();
                  _elem18.read(iprot);
                  struct.onlineFriendInfos.add(_elem18);
                }
                iprot.readListEnd();
              }
              struct.setOnlineFriendInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCOnlineFriendListMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TID_FIELD_DESC);
      oprot.writeByte(struct.tid);
      oprot.writeFieldEnd();
      if (struct.onlineFriendInfos != null) {
        oprot.writeFieldBegin(ONLINE_FRIEND_INFOS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.onlineFriendInfos.size()));
          for (OnlineFriendInfo _iter19 : struct.onlineFriendInfos)
          {
            _iter19.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCOnlineFriendListMsgTupleSchemeFactory implements SchemeFactory {
    public SCOnlineFriendListMsgTupleScheme getScheme() {
      return new SCOnlineFriendListMsgTupleScheme();
    }
  }

  private static class SCOnlineFriendListMsgTupleScheme extends TupleScheme<SCOnlineFriendListMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCOnlineFriendListMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTid()) {
        optionals.set(0);
      }
      if (struct.isSetOnlineFriendInfos()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetTid()) {
        oprot.writeByte(struct.tid);
      }
      if (struct.isSetOnlineFriendInfos()) {
        {
          oprot.writeI32(struct.onlineFriendInfos.size());
          for (OnlineFriendInfo _iter20 : struct.onlineFriendInfos)
          {
            _iter20.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCOnlineFriendListMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.tid = iprot.readByte();
        struct.setTidIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.onlineFriendInfos = new ArrayList<OnlineFriendInfo>(_list21.size);
          for (int _i22 = 0; _i22 < _list21.size; ++_i22)
          {
            OnlineFriendInfo _elem23; // required
            _elem23 = new OnlineFriendInfo();
            _elem23.read(iprot);
            struct.onlineFriendInfos.add(_elem23);
          }
        }
        struct.setOnlineFriendInfosIsSet(true);
      }
    }
  }

}

