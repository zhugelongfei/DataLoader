/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 收到红包的基本信息
 */
public class ReceiveLuckyMoneyBasicInfo implements org.apache.thrift.TBase<ReceiveLuckyMoneyBasicInfo, ReceiveLuckyMoneyBasicInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReceiveLuckyMoneyBasicInfo");

  private static final org.apache.thrift.protocol.TField LUCKY_MONEY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("luckyMoneyId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField SENDER_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("senderInfo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField RECEIVE_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("receiveAmount", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField IS_BEST_LUCK_FIELD_DESC = new org.apache.thrift.protocol.TField("isBestLuck", org.apache.thrift.protocol.TType.BOOL, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ReceiveLuckyMoneyBasicInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ReceiveLuckyMoneyBasicInfoTupleSchemeFactory());
  }

  /**
   * 红包ID
   */
  public long luckyMoneyId; // required
  /**
   * 发送者信息
   */
  public com.ling9527.music.common.msg.auto.PlayerBaseInfo senderInfo; // required
  /**
   * 日期
   */
  public long date; // required
  /**
   * 红包类型
   * 
   * @see com.ling9527.music.common.msg.auto.LuckyMoneyType
   */
  public com.ling9527.music.common.msg.auto.LuckyMoneyType type; // required
  /**
   * 收到金额
   */
  public int receiveAmount; // required
  /**
   * 是否手气最佳
   */
  public boolean isBestLuck; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 红包ID
     */
    LUCKY_MONEY_ID((short)1, "luckyMoneyId"),
    /**
     * 发送者信息
     */
    SENDER_INFO((short)2, "senderInfo"),
    /**
     * 日期
     */
    DATE((short)3, "date"),
    /**
     * 红包类型
     * 
     * @see com.ling9527.music.common.msg.auto.LuckyMoneyType
     */
    TYPE((short)4, "type"),
    /**
     * 收到金额
     */
    RECEIVE_AMOUNT((short)5, "receiveAmount"),
    /**
     * 是否手气最佳
     */
    IS_BEST_LUCK((short)6, "isBestLuck");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LUCKY_MONEY_ID
          return LUCKY_MONEY_ID;
        case 2: // SENDER_INFO
          return SENDER_INFO;
        case 3: // DATE
          return DATE;
        case 4: // TYPE
          return TYPE;
        case 5: // RECEIVE_AMOUNT
          return RECEIVE_AMOUNT;
        case 6: // IS_BEST_LUCK
          return IS_BEST_LUCK;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LUCKYMONEYID_ISSET_ID = 0;
  private static final int __DATE_ISSET_ID = 1;
  private static final int __RECEIVEAMOUNT_ISSET_ID = 2;
  private static final int __ISBESTLUCK_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.IS_BEST_LUCK};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LUCKY_MONEY_ID, new org.apache.thrift.meta_data.FieldMetaData("luckyMoneyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SENDER_INFO, new org.apache.thrift.meta_data.FieldMetaData("senderInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.PlayerBaseInfo.class)));
    tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.ling9527.music.common.msg.auto.LuckyMoneyType.class)));
    tmpMap.put(_Fields.RECEIVE_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("receiveAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_BEST_LUCK, new org.apache.thrift.meta_data.FieldMetaData("isBestLuck", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReceiveLuckyMoneyBasicInfo.class, metaDataMap);
  }

  public ReceiveLuckyMoneyBasicInfo() {
  }

  public ReceiveLuckyMoneyBasicInfo(
    long luckyMoneyId,
    com.ling9527.music.common.msg.auto.PlayerBaseInfo senderInfo,
    long date,
    com.ling9527.music.common.msg.auto.LuckyMoneyType type,
    int receiveAmount)
  {
    this();
    this.luckyMoneyId = luckyMoneyId;
    setLuckyMoneyIdIsSet(true);
    this.senderInfo = senderInfo;
    this.date = date;
    setDateIsSet(true);
    this.type = type;
    this.receiveAmount = receiveAmount;
    setReceiveAmountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReceiveLuckyMoneyBasicInfo(ReceiveLuckyMoneyBasicInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.luckyMoneyId = other.luckyMoneyId;
    if (other.isSetSenderInfo()) {
      this.senderInfo = new com.ling9527.music.common.msg.auto.PlayerBaseInfo(other.senderInfo);
    }
    this.date = other.date;
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.receiveAmount = other.receiveAmount;
    this.isBestLuck = other.isBestLuck;
  }

  public ReceiveLuckyMoneyBasicInfo deepCopy() {
    return new ReceiveLuckyMoneyBasicInfo(this);
  }

  @Override
  public void clear() {
    setLuckyMoneyIdIsSet(false);
    this.luckyMoneyId = 0;
    this.senderInfo = null;
    setDateIsSet(false);
    this.date = 0;
    this.type = null;
    setReceiveAmountIsSet(false);
    this.receiveAmount = 0;
    setIsBestLuckIsSet(false);
    this.isBestLuck = false;
  }

  /**
   * 红包ID
   */
  public long getLuckyMoneyId() {
    return this.luckyMoneyId;
  }

  /**
   * 红包ID
   */
  public ReceiveLuckyMoneyBasicInfo setLuckyMoneyId(long luckyMoneyId) {
    this.luckyMoneyId = luckyMoneyId;
    setLuckyMoneyIdIsSet(true);
    return this;
  }

  public void unsetLuckyMoneyId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LUCKYMONEYID_ISSET_ID);
  }

  /** Returns true if field luckyMoneyId is set (has been assigned a value) and false otherwise */
  public boolean isSetLuckyMoneyId() {
    return EncodingUtils.testBit(__isset_bitfield, __LUCKYMONEYID_ISSET_ID);
  }

  public void setLuckyMoneyIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LUCKYMONEYID_ISSET_ID, value);
  }

  /**
   * 发送者信息
   */
  public com.ling9527.music.common.msg.auto.PlayerBaseInfo getSenderInfo() {
    return this.senderInfo;
  }

  /**
   * 发送者信息
   */
  public ReceiveLuckyMoneyBasicInfo setSenderInfo(com.ling9527.music.common.msg.auto.PlayerBaseInfo senderInfo) {
    this.senderInfo = senderInfo;
    return this;
  }

  public void unsetSenderInfo() {
    this.senderInfo = null;
  }

  /** Returns true if field senderInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetSenderInfo() {
    return this.senderInfo != null;
  }

  public void setSenderInfoIsSet(boolean value) {
    if (!value) {
      this.senderInfo = null;
    }
  }

  /**
   * 日期
   */
  public long getDate() {
    return this.date;
  }

  /**
   * 日期
   */
  public ReceiveLuckyMoneyBasicInfo setDate(long date) {
    this.date = date;
    setDateIsSet(true);
    return this;
  }

  public void unsetDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATE_ISSET_ID);
  }

  /** Returns true if field date is set (has been assigned a value) and false otherwise */
  public boolean isSetDate() {
    return EncodingUtils.testBit(__isset_bitfield, __DATE_ISSET_ID);
  }

  public void setDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATE_ISSET_ID, value);
  }

  /**
   * 红包类型
   * 
   * @see com.ling9527.music.common.msg.auto.LuckyMoneyType
   */
  public com.ling9527.music.common.msg.auto.LuckyMoneyType getType() {
    return this.type;
  }

  /**
   * 红包类型
   * 
   * @see com.ling9527.music.common.msg.auto.LuckyMoneyType
   */
  public ReceiveLuckyMoneyBasicInfo setType(com.ling9527.music.common.msg.auto.LuckyMoneyType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  /**
   * 收到金额
   */
  public int getReceiveAmount() {
    return this.receiveAmount;
  }

  /**
   * 收到金额
   */
  public ReceiveLuckyMoneyBasicInfo setReceiveAmount(int receiveAmount) {
    this.receiveAmount = receiveAmount;
    setReceiveAmountIsSet(true);
    return this;
  }

  public void unsetReceiveAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECEIVEAMOUNT_ISSET_ID);
  }

  /** Returns true if field receiveAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetReceiveAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __RECEIVEAMOUNT_ISSET_ID);
  }

  public void setReceiveAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECEIVEAMOUNT_ISSET_ID, value);
  }

  /**
   * 是否手气最佳
   */
  public boolean isIsBestLuck() {
    return this.isBestLuck;
  }

  /**
   * 是否手气最佳
   */
  public ReceiveLuckyMoneyBasicInfo setIsBestLuck(boolean isBestLuck) {
    this.isBestLuck = isBestLuck;
    setIsBestLuckIsSet(true);
    return this;
  }

  public void unsetIsBestLuck() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISBESTLUCK_ISSET_ID);
  }

  /** Returns true if field isBestLuck is set (has been assigned a value) and false otherwise */
  public boolean isSetIsBestLuck() {
    return EncodingUtils.testBit(__isset_bitfield, __ISBESTLUCK_ISSET_ID);
  }

  public void setIsBestLuckIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISBESTLUCK_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LUCKY_MONEY_ID:
      if (value == null) {
        unsetLuckyMoneyId();
      } else {
        setLuckyMoneyId((Long)value);
      }
      break;

    case SENDER_INFO:
      if (value == null) {
        unsetSenderInfo();
      } else {
        setSenderInfo((com.ling9527.music.common.msg.auto.PlayerBaseInfo)value);
      }
      break;

    case DATE:
      if (value == null) {
        unsetDate();
      } else {
        setDate((Long)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((com.ling9527.music.common.msg.auto.LuckyMoneyType)value);
      }
      break;

    case RECEIVE_AMOUNT:
      if (value == null) {
        unsetReceiveAmount();
      } else {
        setReceiveAmount((Integer)value);
      }
      break;

    case IS_BEST_LUCK:
      if (value == null) {
        unsetIsBestLuck();
      } else {
        setIsBestLuck((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LUCKY_MONEY_ID:
      return Long.valueOf(getLuckyMoneyId());

    case SENDER_INFO:
      return getSenderInfo();

    case DATE:
      return Long.valueOf(getDate());

    case TYPE:
      return getType();

    case RECEIVE_AMOUNT:
      return Integer.valueOf(getReceiveAmount());

    case IS_BEST_LUCK:
      return Boolean.valueOf(isIsBestLuck());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LUCKY_MONEY_ID:
      return isSetLuckyMoneyId();
    case SENDER_INFO:
      return isSetSenderInfo();
    case DATE:
      return isSetDate();
    case TYPE:
      return isSetType();
    case RECEIVE_AMOUNT:
      return isSetReceiveAmount();
    case IS_BEST_LUCK:
      return isSetIsBestLuck();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ReceiveLuckyMoneyBasicInfo)
      return this.equals((ReceiveLuckyMoneyBasicInfo)that);
    return false;
  }

  public boolean equals(ReceiveLuckyMoneyBasicInfo that) {
    if (that == null)
      return false;

    boolean this_present_luckyMoneyId = true;
    boolean that_present_luckyMoneyId = true;
    if (this_present_luckyMoneyId || that_present_luckyMoneyId) {
      if (!(this_present_luckyMoneyId && that_present_luckyMoneyId))
        return false;
      if (this.luckyMoneyId != that.luckyMoneyId)
        return false;
    }

    boolean this_present_senderInfo = true && this.isSetSenderInfo();
    boolean that_present_senderInfo = true && that.isSetSenderInfo();
    if (this_present_senderInfo || that_present_senderInfo) {
      if (!(this_present_senderInfo && that_present_senderInfo))
        return false;
      if (!this.senderInfo.equals(that.senderInfo))
        return false;
    }

    boolean this_present_date = true;
    boolean that_present_date = true;
    if (this_present_date || that_present_date) {
      if (!(this_present_date && that_present_date))
        return false;
      if (this.date != that.date)
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_receiveAmount = true;
    boolean that_present_receiveAmount = true;
    if (this_present_receiveAmount || that_present_receiveAmount) {
      if (!(this_present_receiveAmount && that_present_receiveAmount))
        return false;
      if (this.receiveAmount != that.receiveAmount)
        return false;
    }

    boolean this_present_isBestLuck = true && this.isSetIsBestLuck();
    boolean that_present_isBestLuck = true && that.isSetIsBestLuck();
    if (this_present_isBestLuck || that_present_isBestLuck) {
      if (!(this_present_isBestLuck && that_present_isBestLuck))
        return false;
      if (this.isBestLuck != that.isBestLuck)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ReceiveLuckyMoneyBasicInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ReceiveLuckyMoneyBasicInfo typedOther = (ReceiveLuckyMoneyBasicInfo)other;

    lastComparison = Boolean.valueOf(isSetLuckyMoneyId()).compareTo(typedOther.isSetLuckyMoneyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLuckyMoneyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.luckyMoneyId, typedOther.luckyMoneyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSenderInfo()).compareTo(typedOther.isSetSenderInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSenderInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.senderInfo, typedOther.senderInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDate()).compareTo(typedOther.isSetDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, typedOther.date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, typedOther.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReceiveAmount()).compareTo(typedOther.isSetReceiveAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceiveAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receiveAmount, typedOther.receiveAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsBestLuck()).compareTo(typedOther.isSetIsBestLuck());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsBestLuck()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isBestLuck, typedOther.isBestLuck);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ReceiveLuckyMoneyBasicInfo(");
    boolean first = true;

    sb.append("luckyMoneyId:");
    sb.append(this.luckyMoneyId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("senderInfo:");
    if (this.senderInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.senderInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("date:");
    sb.append(this.date);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("receiveAmount:");
    sb.append(this.receiveAmount);
    first = false;
    if (isSetIsBestLuck()) {
      if (!first) sb.append(", ");
      sb.append("isBestLuck:");
      sb.append(this.isBestLuck);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (senderInfo != null) {
      senderInfo.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReceiveLuckyMoneyBasicInfoStandardSchemeFactory implements SchemeFactory {
    public ReceiveLuckyMoneyBasicInfoStandardScheme getScheme() {
      return new ReceiveLuckyMoneyBasicInfoStandardScheme();
    }
  }

  private static class ReceiveLuckyMoneyBasicInfoStandardScheme extends StandardScheme<ReceiveLuckyMoneyBasicInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReceiveLuckyMoneyBasicInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LUCKY_MONEY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.luckyMoneyId = iprot.readI64();
              struct.setLuckyMoneyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SENDER_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.senderInfo = new com.ling9527.music.common.msg.auto.PlayerBaseInfo();
              struct.senderInfo.read(iprot);
              struct.setSenderInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.date = iprot.readI64();
              struct.setDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = com.ling9527.music.common.msg.auto.LuckyMoneyType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RECEIVE_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.receiveAmount = iprot.readI32();
              struct.setReceiveAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IS_BEST_LUCK
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isBestLuck = iprot.readBool();
              struct.setIsBestLuckIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReceiveLuckyMoneyBasicInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(LUCKY_MONEY_ID_FIELD_DESC);
      oprot.writeI64(struct.luckyMoneyId);
      oprot.writeFieldEnd();
      if (struct.senderInfo != null) {
        oprot.writeFieldBegin(SENDER_INFO_FIELD_DESC);
        struct.senderInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DATE_FIELD_DESC);
      oprot.writeI64(struct.date);
      oprot.writeFieldEnd();
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RECEIVE_AMOUNT_FIELD_DESC);
      oprot.writeI32(struct.receiveAmount);
      oprot.writeFieldEnd();
      if (struct.isSetIsBestLuck()) {
        oprot.writeFieldBegin(IS_BEST_LUCK_FIELD_DESC);
        oprot.writeBool(struct.isBestLuck);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReceiveLuckyMoneyBasicInfoTupleSchemeFactory implements SchemeFactory {
    public ReceiveLuckyMoneyBasicInfoTupleScheme getScheme() {
      return new ReceiveLuckyMoneyBasicInfoTupleScheme();
    }
  }

  private static class ReceiveLuckyMoneyBasicInfoTupleScheme extends TupleScheme<ReceiveLuckyMoneyBasicInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReceiveLuckyMoneyBasicInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetLuckyMoneyId()) {
        optionals.set(0);
      }
      if (struct.isSetSenderInfo()) {
        optionals.set(1);
      }
      if (struct.isSetDate()) {
        optionals.set(2);
      }
      if (struct.isSetType()) {
        optionals.set(3);
      }
      if (struct.isSetReceiveAmount()) {
        optionals.set(4);
      }
      if (struct.isSetIsBestLuck()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetLuckyMoneyId()) {
        oprot.writeI64(struct.luckyMoneyId);
      }
      if (struct.isSetSenderInfo()) {
        struct.senderInfo.write(oprot);
      }
      if (struct.isSetDate()) {
        oprot.writeI64(struct.date);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetReceiveAmount()) {
        oprot.writeI32(struct.receiveAmount);
      }
      if (struct.isSetIsBestLuck()) {
        oprot.writeBool(struct.isBestLuck);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReceiveLuckyMoneyBasicInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.luckyMoneyId = iprot.readI64();
        struct.setLuckyMoneyIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.senderInfo = new com.ling9527.music.common.msg.auto.PlayerBaseInfo();
        struct.senderInfo.read(iprot);
        struct.setSenderInfoIsSet(true);
      }
      if (incoming.get(2)) {
        struct.date = iprot.readI64();
        struct.setDateIsSet(true);
      }
      if (incoming.get(3)) {
        struct.type = com.ling9527.music.common.msg.auto.LuckyMoneyType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.receiveAmount = iprot.readI32();
        struct.setReceiveAmountIsSet(true);
      }
      if (incoming.get(5)) {
        struct.isBestLuck = iprot.readBool();
        struct.setIsBestLuckIsSet(true);
      }
    }
  }

}

