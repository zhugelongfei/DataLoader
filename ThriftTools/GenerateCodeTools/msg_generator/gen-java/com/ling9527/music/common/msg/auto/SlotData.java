/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SlotData implements org.apache.thrift.TBase<SlotData, SlotData._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SlotData");

  private static final org.apache.thrift.protocol.TField FIXED_PRIZE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("fixedPrizeTime", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField DIAMOND_POOL_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("diamondPoolSize", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField BIND_DIAMOND_POOL_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("bindDiamondPoolSize", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField GOLD_POOL_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("goldPoolSize", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SlotDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SlotDataTupleSchemeFactory());
  }

  public Map<Long,Integer> fixedPrizeTime; // required
  public int diamondPoolSize; // required
  public int bindDiamondPoolSize; // required
  public int goldPoolSize; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FIXED_PRIZE_TIME((short)1, "fixedPrizeTime"),
    DIAMOND_POOL_SIZE((short)2, "diamondPoolSize"),
    BIND_DIAMOND_POOL_SIZE((short)3, "bindDiamondPoolSize"),
    GOLD_POOL_SIZE((short)4, "goldPoolSize");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FIXED_PRIZE_TIME
          return FIXED_PRIZE_TIME;
        case 2: // DIAMOND_POOL_SIZE
          return DIAMOND_POOL_SIZE;
        case 3: // BIND_DIAMOND_POOL_SIZE
          return BIND_DIAMOND_POOL_SIZE;
        case 4: // GOLD_POOL_SIZE
          return GOLD_POOL_SIZE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DIAMONDPOOLSIZE_ISSET_ID = 0;
  private static final int __BINDDIAMONDPOOLSIZE_ISSET_ID = 1;
  private static final int __GOLDPOOLSIZE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FIXED_PRIZE_TIME, new org.apache.thrift.meta_data.FieldMetaData("fixedPrizeTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.DIAMOND_POOL_SIZE, new org.apache.thrift.meta_data.FieldMetaData("diamondPoolSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BIND_DIAMOND_POOL_SIZE, new org.apache.thrift.meta_data.FieldMetaData("bindDiamondPoolSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GOLD_POOL_SIZE, new org.apache.thrift.meta_data.FieldMetaData("goldPoolSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SlotData.class, metaDataMap);
  }

  public SlotData() {
  }

  public SlotData(
    Map<Long,Integer> fixedPrizeTime,
    int diamondPoolSize,
    int bindDiamondPoolSize,
    int goldPoolSize)
  {
    this();
    this.fixedPrizeTime = fixedPrizeTime;
    this.diamondPoolSize = diamondPoolSize;
    setDiamondPoolSizeIsSet(true);
    this.bindDiamondPoolSize = bindDiamondPoolSize;
    setBindDiamondPoolSizeIsSet(true);
    this.goldPoolSize = goldPoolSize;
    setGoldPoolSizeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SlotData(SlotData other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetFixedPrizeTime()) {
      Map<Long,Integer> __this__fixedPrizeTime = new HashMap<Long,Integer>();
      for (Map.Entry<Long, Integer> other_element : other.fixedPrizeTime.entrySet()) {

        Long other_element_key = other_element.getKey();
        Integer other_element_value = other_element.getValue();

        Long __this__fixedPrizeTime_copy_key = other_element_key;

        Integer __this__fixedPrizeTime_copy_value = other_element_value;

        __this__fixedPrizeTime.put(__this__fixedPrizeTime_copy_key, __this__fixedPrizeTime_copy_value);
      }
      this.fixedPrizeTime = __this__fixedPrizeTime;
    }
    this.diamondPoolSize = other.diamondPoolSize;
    this.bindDiamondPoolSize = other.bindDiamondPoolSize;
    this.goldPoolSize = other.goldPoolSize;
  }

  public SlotData deepCopy() {
    return new SlotData(this);
  }

  @Override
  public void clear() {
    this.fixedPrizeTime = null;
    setDiamondPoolSizeIsSet(false);
    this.diamondPoolSize = 0;
    setBindDiamondPoolSizeIsSet(false);
    this.bindDiamondPoolSize = 0;
    setGoldPoolSizeIsSet(false);
    this.goldPoolSize = 0;
  }

  public int getFixedPrizeTimeSize() {
    return (this.fixedPrizeTime == null) ? 0 : this.fixedPrizeTime.size();
  }

  public void putToFixedPrizeTime(long key, int val) {
    if (this.fixedPrizeTime == null) {
      this.fixedPrizeTime = new HashMap<Long,Integer>();
    }
    this.fixedPrizeTime.put(key, val);
  }

  public Map<Long,Integer> getFixedPrizeTime() {
    return this.fixedPrizeTime;
  }

  public SlotData setFixedPrizeTime(Map<Long,Integer> fixedPrizeTime) {
    this.fixedPrizeTime = fixedPrizeTime;
    return this;
  }

  public void unsetFixedPrizeTime() {
    this.fixedPrizeTime = null;
  }

  /** Returns true if field fixedPrizeTime is set (has been assigned a value) and false otherwise */
  public boolean isSetFixedPrizeTime() {
    return this.fixedPrizeTime != null;
  }

  public void setFixedPrizeTimeIsSet(boolean value) {
    if (!value) {
      this.fixedPrizeTime = null;
    }
  }

  public int getDiamondPoolSize() {
    return this.diamondPoolSize;
  }

  public SlotData setDiamondPoolSize(int diamondPoolSize) {
    this.diamondPoolSize = diamondPoolSize;
    setDiamondPoolSizeIsSet(true);
    return this;
  }

  public void unsetDiamondPoolSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DIAMONDPOOLSIZE_ISSET_ID);
  }

  /** Returns true if field diamondPoolSize is set (has been assigned a value) and false otherwise */
  public boolean isSetDiamondPoolSize() {
    return EncodingUtils.testBit(__isset_bitfield, __DIAMONDPOOLSIZE_ISSET_ID);
  }

  public void setDiamondPoolSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DIAMONDPOOLSIZE_ISSET_ID, value);
  }

  public int getBindDiamondPoolSize() {
    return this.bindDiamondPoolSize;
  }

  public SlotData setBindDiamondPoolSize(int bindDiamondPoolSize) {
    this.bindDiamondPoolSize = bindDiamondPoolSize;
    setBindDiamondPoolSizeIsSet(true);
    return this;
  }

  public void unsetBindDiamondPoolSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BINDDIAMONDPOOLSIZE_ISSET_ID);
  }

  /** Returns true if field bindDiamondPoolSize is set (has been assigned a value) and false otherwise */
  public boolean isSetBindDiamondPoolSize() {
    return EncodingUtils.testBit(__isset_bitfield, __BINDDIAMONDPOOLSIZE_ISSET_ID);
  }

  public void setBindDiamondPoolSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BINDDIAMONDPOOLSIZE_ISSET_ID, value);
  }

  public int getGoldPoolSize() {
    return this.goldPoolSize;
  }

  public SlotData setGoldPoolSize(int goldPoolSize) {
    this.goldPoolSize = goldPoolSize;
    setGoldPoolSizeIsSet(true);
    return this;
  }

  public void unsetGoldPoolSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GOLDPOOLSIZE_ISSET_ID);
  }

  /** Returns true if field goldPoolSize is set (has been assigned a value) and false otherwise */
  public boolean isSetGoldPoolSize() {
    return EncodingUtils.testBit(__isset_bitfield, __GOLDPOOLSIZE_ISSET_ID);
  }

  public void setGoldPoolSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GOLDPOOLSIZE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FIXED_PRIZE_TIME:
      if (value == null) {
        unsetFixedPrizeTime();
      } else {
        setFixedPrizeTime((Map<Long,Integer>)value);
      }
      break;

    case DIAMOND_POOL_SIZE:
      if (value == null) {
        unsetDiamondPoolSize();
      } else {
        setDiamondPoolSize((Integer)value);
      }
      break;

    case BIND_DIAMOND_POOL_SIZE:
      if (value == null) {
        unsetBindDiamondPoolSize();
      } else {
        setBindDiamondPoolSize((Integer)value);
      }
      break;

    case GOLD_POOL_SIZE:
      if (value == null) {
        unsetGoldPoolSize();
      } else {
        setGoldPoolSize((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FIXED_PRIZE_TIME:
      return getFixedPrizeTime();

    case DIAMOND_POOL_SIZE:
      return Integer.valueOf(getDiamondPoolSize());

    case BIND_DIAMOND_POOL_SIZE:
      return Integer.valueOf(getBindDiamondPoolSize());

    case GOLD_POOL_SIZE:
      return Integer.valueOf(getGoldPoolSize());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FIXED_PRIZE_TIME:
      return isSetFixedPrizeTime();
    case DIAMOND_POOL_SIZE:
      return isSetDiamondPoolSize();
    case BIND_DIAMOND_POOL_SIZE:
      return isSetBindDiamondPoolSize();
    case GOLD_POOL_SIZE:
      return isSetGoldPoolSize();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SlotData)
      return this.equals((SlotData)that);
    return false;
  }

  public boolean equals(SlotData that) {
    if (that == null)
      return false;

    boolean this_present_fixedPrizeTime = true && this.isSetFixedPrizeTime();
    boolean that_present_fixedPrizeTime = true && that.isSetFixedPrizeTime();
    if (this_present_fixedPrizeTime || that_present_fixedPrizeTime) {
      if (!(this_present_fixedPrizeTime && that_present_fixedPrizeTime))
        return false;
      if (!this.fixedPrizeTime.equals(that.fixedPrizeTime))
        return false;
    }

    boolean this_present_diamondPoolSize = true;
    boolean that_present_diamondPoolSize = true;
    if (this_present_diamondPoolSize || that_present_diamondPoolSize) {
      if (!(this_present_diamondPoolSize && that_present_diamondPoolSize))
        return false;
      if (this.diamondPoolSize != that.diamondPoolSize)
        return false;
    }

    boolean this_present_bindDiamondPoolSize = true;
    boolean that_present_bindDiamondPoolSize = true;
    if (this_present_bindDiamondPoolSize || that_present_bindDiamondPoolSize) {
      if (!(this_present_bindDiamondPoolSize && that_present_bindDiamondPoolSize))
        return false;
      if (this.bindDiamondPoolSize != that.bindDiamondPoolSize)
        return false;
    }

    boolean this_present_goldPoolSize = true;
    boolean that_present_goldPoolSize = true;
    if (this_present_goldPoolSize || that_present_goldPoolSize) {
      if (!(this_present_goldPoolSize && that_present_goldPoolSize))
        return false;
      if (this.goldPoolSize != that.goldPoolSize)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SlotData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SlotData typedOther = (SlotData)other;

    lastComparison = Boolean.valueOf(isSetFixedPrizeTime()).compareTo(typedOther.isSetFixedPrizeTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFixedPrizeTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fixedPrizeTime, typedOther.fixedPrizeTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDiamondPoolSize()).compareTo(typedOther.isSetDiamondPoolSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDiamondPoolSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.diamondPoolSize, typedOther.diamondPoolSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBindDiamondPoolSize()).compareTo(typedOther.isSetBindDiamondPoolSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBindDiamondPoolSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bindDiamondPoolSize, typedOther.bindDiamondPoolSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGoldPoolSize()).compareTo(typedOther.isSetGoldPoolSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGoldPoolSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.goldPoolSize, typedOther.goldPoolSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SlotData(");
    boolean first = true;

    sb.append("fixedPrizeTime:");
    if (this.fixedPrizeTime == null) {
      sb.append("null");
    } else {
      sb.append(this.fixedPrizeTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("diamondPoolSize:");
    sb.append(this.diamondPoolSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bindDiamondPoolSize:");
    sb.append(this.bindDiamondPoolSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("goldPoolSize:");
    sb.append(this.goldPoolSize);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SlotDataStandardSchemeFactory implements SchemeFactory {
    public SlotDataStandardScheme getScheme() {
      return new SlotDataStandardScheme();
    }
  }

  private static class SlotDataStandardScheme extends StandardScheme<SlotData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SlotData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FIXED_PRIZE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map578 = iprot.readMapBegin();
                struct.fixedPrizeTime = new HashMap<Long,Integer>(2*_map578.size);
                for (int _i579 = 0; _i579 < _map578.size; ++_i579)
                {
                  long _key580; // required
                  int _val581; // required
                  _key580 = iprot.readI64();
                  _val581 = iprot.readI32();
                  struct.fixedPrizeTime.put(_key580, _val581);
                }
                iprot.readMapEnd();
              }
              struct.setFixedPrizeTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DIAMOND_POOL_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.diamondPoolSize = iprot.readI32();
              struct.setDiamondPoolSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BIND_DIAMOND_POOL_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bindDiamondPoolSize = iprot.readI32();
              struct.setBindDiamondPoolSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // GOLD_POOL_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.goldPoolSize = iprot.readI32();
              struct.setGoldPoolSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SlotData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.fixedPrizeTime != null) {
        oprot.writeFieldBegin(FIXED_PRIZE_TIME_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.I32, struct.fixedPrizeTime.size()));
          for (Map.Entry<Long, Integer> _iter582 : struct.fixedPrizeTime.entrySet())
          {
            oprot.writeI64(_iter582.getKey());
            oprot.writeI32(_iter582.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DIAMOND_POOL_SIZE_FIELD_DESC);
      oprot.writeI32(struct.diamondPoolSize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BIND_DIAMOND_POOL_SIZE_FIELD_DESC);
      oprot.writeI32(struct.bindDiamondPoolSize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GOLD_POOL_SIZE_FIELD_DESC);
      oprot.writeI32(struct.goldPoolSize);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SlotDataTupleSchemeFactory implements SchemeFactory {
    public SlotDataTupleScheme getScheme() {
      return new SlotDataTupleScheme();
    }
  }

  private static class SlotDataTupleScheme extends TupleScheme<SlotData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SlotData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetFixedPrizeTime()) {
        optionals.set(0);
      }
      if (struct.isSetDiamondPoolSize()) {
        optionals.set(1);
      }
      if (struct.isSetBindDiamondPoolSize()) {
        optionals.set(2);
      }
      if (struct.isSetGoldPoolSize()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetFixedPrizeTime()) {
        {
          oprot.writeI32(struct.fixedPrizeTime.size());
          for (Map.Entry<Long, Integer> _iter583 : struct.fixedPrizeTime.entrySet())
          {
            oprot.writeI64(_iter583.getKey());
            oprot.writeI32(_iter583.getValue());
          }
        }
      }
      if (struct.isSetDiamondPoolSize()) {
        oprot.writeI32(struct.diamondPoolSize);
      }
      if (struct.isSetBindDiamondPoolSize()) {
        oprot.writeI32(struct.bindDiamondPoolSize);
      }
      if (struct.isSetGoldPoolSize()) {
        oprot.writeI32(struct.goldPoolSize);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SlotData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map584 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.fixedPrizeTime = new HashMap<Long,Integer>(2*_map584.size);
          for (int _i585 = 0; _i585 < _map584.size; ++_i585)
          {
            long _key586; // required
            int _val587; // required
            _key586 = iprot.readI64();
            _val587 = iprot.readI32();
            struct.fixedPrizeTime.put(_key586, _val587);
          }
        }
        struct.setFixedPrizeTimeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.diamondPoolSize = iprot.readI32();
        struct.setDiamondPoolSizeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.bindDiamondPoolSize = iprot.readI32();
        struct.setBindDiamondPoolSizeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.goldPoolSize = iprot.readI32();
        struct.setGoldPoolSizeIsSet(true);
      }
    }
  }

}

