/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SimpleMallItem implements org.apache.thrift.TBase<SimpleMallItem, SimpleMallItem._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SimpleMallItem");

  private static final org.apache.thrift.protocol.TField ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("itemId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("price", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField CURRENCY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("currencyType", org.apache.thrift.protocol.TType.BYTE, (short)3);
  private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField VALID_TIME_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("validTimeType", org.apache.thrift.protocol.TType.BYTE, (short)5);
  private static final org.apache.thrift.protocol.TField REMAIN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("remainTime", org.apache.thrift.protocol.TType.I32, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SimpleMallItemStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SimpleMallItemTupleSchemeFactory());
  }

  public int itemId; // required
  public int price; // required
  public byte currencyType; // required
  public int count; // required
  public byte validTimeType; // required
  public int remainTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ITEM_ID((short)1, "itemId"),
    PRICE((short)2, "price"),
    CURRENCY_TYPE((short)3, "currencyType"),
    COUNT((short)4, "count"),
    VALID_TIME_TYPE((short)5, "validTimeType"),
    REMAIN_TIME((short)6, "remainTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ITEM_ID
          return ITEM_ID;
        case 2: // PRICE
          return PRICE;
        case 3: // CURRENCY_TYPE
          return CURRENCY_TYPE;
        case 4: // COUNT
          return COUNT;
        case 5: // VALID_TIME_TYPE
          return VALID_TIME_TYPE;
        case 6: // REMAIN_TIME
          return REMAIN_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ITEMID_ISSET_ID = 0;
  private static final int __PRICE_ISSET_ID = 1;
  private static final int __CURRENCYTYPE_ISSET_ID = 2;
  private static final int __COUNT_ISSET_ID = 3;
  private static final int __VALIDTIMETYPE_ISSET_ID = 4;
  private static final int __REMAINTIME_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("itemId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRICE, new org.apache.thrift.meta_data.FieldMetaData("price", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CURRENCY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("currencyType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VALID_TIME_TYPE, new org.apache.thrift.meta_data.FieldMetaData("validTimeType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.REMAIN_TIME, new org.apache.thrift.meta_data.FieldMetaData("remainTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SimpleMallItem.class, metaDataMap);
  }

  public SimpleMallItem() {
  }

  public SimpleMallItem(
    int itemId,
    int price,
    byte currencyType,
    int count,
    byte validTimeType,
    int remainTime)
  {
    this();
    this.itemId = itemId;
    setItemIdIsSet(true);
    this.price = price;
    setPriceIsSet(true);
    this.currencyType = currencyType;
    setCurrencyTypeIsSet(true);
    this.count = count;
    setCountIsSet(true);
    this.validTimeType = validTimeType;
    setValidTimeTypeIsSet(true);
    this.remainTime = remainTime;
    setRemainTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SimpleMallItem(SimpleMallItem other) {
    __isset_bitfield = other.__isset_bitfield;
    this.itemId = other.itemId;
    this.price = other.price;
    this.currencyType = other.currencyType;
    this.count = other.count;
    this.validTimeType = other.validTimeType;
    this.remainTime = other.remainTime;
  }

  public SimpleMallItem deepCopy() {
    return new SimpleMallItem(this);
  }

  @Override
  public void clear() {
    setItemIdIsSet(false);
    this.itemId = 0;
    setPriceIsSet(false);
    this.price = 0;
    setCurrencyTypeIsSet(false);
    this.currencyType = 0;
    setCountIsSet(false);
    this.count = 0;
    setValidTimeTypeIsSet(false);
    this.validTimeType = 0;
    setRemainTimeIsSet(false);
    this.remainTime = 0;
  }

  public int getItemId() {
    return this.itemId;
  }

  public SimpleMallItem setItemId(int itemId) {
    this.itemId = itemId;
    setItemIdIsSet(true);
    return this;
  }

  public void unsetItemId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ITEMID_ISSET_ID);
  }

  /** Returns true if field itemId is set (has been assigned a value) and false otherwise */
  public boolean isSetItemId() {
    return EncodingUtils.testBit(__isset_bitfield, __ITEMID_ISSET_ID);
  }

  public void setItemIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ITEMID_ISSET_ID, value);
  }

  public int getPrice() {
    return this.price;
  }

  public SimpleMallItem setPrice(int price) {
    this.price = price;
    setPriceIsSet(true);
    return this;
  }

  public void unsetPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  /** Returns true if field price is set (has been assigned a value) and false otherwise */
  public boolean isSetPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  public void setPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRICE_ISSET_ID, value);
  }

  public byte getCurrencyType() {
    return this.currencyType;
  }

  public SimpleMallItem setCurrencyType(byte currencyType) {
    this.currencyType = currencyType;
    setCurrencyTypeIsSet(true);
    return this;
  }

  public void unsetCurrencyType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRENCYTYPE_ISSET_ID);
  }

  /** Returns true if field currencyType is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrencyType() {
    return EncodingUtils.testBit(__isset_bitfield, __CURRENCYTYPE_ISSET_ID);
  }

  public void setCurrencyTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRENCYTYPE_ISSET_ID, value);
  }

  public int getCount() {
    return this.count;
  }

  public SimpleMallItem setCount(int count) {
    this.count = count;
    setCountIsSet(true);
    return this;
  }

  public void unsetCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  /** Returns true if field count is set (has been assigned a value) and false otherwise */
  public boolean isSetCount() {
    return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  public void setCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
  }

  public byte getValidTimeType() {
    return this.validTimeType;
  }

  public SimpleMallItem setValidTimeType(byte validTimeType) {
    this.validTimeType = validTimeType;
    setValidTimeTypeIsSet(true);
    return this;
  }

  public void unsetValidTimeType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VALIDTIMETYPE_ISSET_ID);
  }

  /** Returns true if field validTimeType is set (has been assigned a value) and false otherwise */
  public boolean isSetValidTimeType() {
    return EncodingUtils.testBit(__isset_bitfield, __VALIDTIMETYPE_ISSET_ID);
  }

  public void setValidTimeTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VALIDTIMETYPE_ISSET_ID, value);
  }

  public int getRemainTime() {
    return this.remainTime;
  }

  public SimpleMallItem setRemainTime(int remainTime) {
    this.remainTime = remainTime;
    setRemainTimeIsSet(true);
    return this;
  }

  public void unsetRemainTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REMAINTIME_ISSET_ID);
  }

  /** Returns true if field remainTime is set (has been assigned a value) and false otherwise */
  public boolean isSetRemainTime() {
    return EncodingUtils.testBit(__isset_bitfield, __REMAINTIME_ISSET_ID);
  }

  public void setRemainTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REMAINTIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ITEM_ID:
      if (value == null) {
        unsetItemId();
      } else {
        setItemId((Integer)value);
      }
      break;

    case PRICE:
      if (value == null) {
        unsetPrice();
      } else {
        setPrice((Integer)value);
      }
      break;

    case CURRENCY_TYPE:
      if (value == null) {
        unsetCurrencyType();
      } else {
        setCurrencyType((Byte)value);
      }
      break;

    case COUNT:
      if (value == null) {
        unsetCount();
      } else {
        setCount((Integer)value);
      }
      break;

    case VALID_TIME_TYPE:
      if (value == null) {
        unsetValidTimeType();
      } else {
        setValidTimeType((Byte)value);
      }
      break;

    case REMAIN_TIME:
      if (value == null) {
        unsetRemainTime();
      } else {
        setRemainTime((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ITEM_ID:
      return Integer.valueOf(getItemId());

    case PRICE:
      return Integer.valueOf(getPrice());

    case CURRENCY_TYPE:
      return Byte.valueOf(getCurrencyType());

    case COUNT:
      return Integer.valueOf(getCount());

    case VALID_TIME_TYPE:
      return Byte.valueOf(getValidTimeType());

    case REMAIN_TIME:
      return Integer.valueOf(getRemainTime());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ITEM_ID:
      return isSetItemId();
    case PRICE:
      return isSetPrice();
    case CURRENCY_TYPE:
      return isSetCurrencyType();
    case COUNT:
      return isSetCount();
    case VALID_TIME_TYPE:
      return isSetValidTimeType();
    case REMAIN_TIME:
      return isSetRemainTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SimpleMallItem)
      return this.equals((SimpleMallItem)that);
    return false;
  }

  public boolean equals(SimpleMallItem that) {
    if (that == null)
      return false;

    boolean this_present_itemId = true;
    boolean that_present_itemId = true;
    if (this_present_itemId || that_present_itemId) {
      if (!(this_present_itemId && that_present_itemId))
        return false;
      if (this.itemId != that.itemId)
        return false;
    }

    boolean this_present_price = true;
    boolean that_present_price = true;
    if (this_present_price || that_present_price) {
      if (!(this_present_price && that_present_price))
        return false;
      if (this.price != that.price)
        return false;
    }

    boolean this_present_currencyType = true;
    boolean that_present_currencyType = true;
    if (this_present_currencyType || that_present_currencyType) {
      if (!(this_present_currencyType && that_present_currencyType))
        return false;
      if (this.currencyType != that.currencyType)
        return false;
    }

    boolean this_present_count = true;
    boolean that_present_count = true;
    if (this_present_count || that_present_count) {
      if (!(this_present_count && that_present_count))
        return false;
      if (this.count != that.count)
        return false;
    }

    boolean this_present_validTimeType = true;
    boolean that_present_validTimeType = true;
    if (this_present_validTimeType || that_present_validTimeType) {
      if (!(this_present_validTimeType && that_present_validTimeType))
        return false;
      if (this.validTimeType != that.validTimeType)
        return false;
    }

    boolean this_present_remainTime = true;
    boolean that_present_remainTime = true;
    if (this_present_remainTime || that_present_remainTime) {
      if (!(this_present_remainTime && that_present_remainTime))
        return false;
      if (this.remainTime != that.remainTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SimpleMallItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SimpleMallItem typedOther = (SimpleMallItem)other;

    lastComparison = Boolean.valueOf(isSetItemId()).compareTo(typedOther.isSetItemId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemId, typedOther.itemId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrice()).compareTo(typedOther.isSetPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.price, typedOther.price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrencyType()).compareTo(typedOther.isSetCurrencyType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrencyType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currencyType, typedOther.currencyType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValidTimeType()).compareTo(typedOther.isSetValidTimeType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValidTimeType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validTimeType, typedOther.validTimeType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemainTime()).compareTo(typedOther.isSetRemainTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemainTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remainTime, typedOther.remainTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SimpleMallItem(");
    boolean first = true;

    sb.append("itemId:");
    sb.append(this.itemId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("price:");
    sb.append(this.price);
    first = false;
    if (!first) sb.append(", ");
    sb.append("currencyType:");
    sb.append(this.currencyType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("count:");
    sb.append(this.count);
    first = false;
    if (!first) sb.append(", ");
    sb.append("validTimeType:");
    sb.append(this.validTimeType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("remainTime:");
    sb.append(this.remainTime);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SimpleMallItemStandardSchemeFactory implements SchemeFactory {
    public SimpleMallItemStandardScheme getScheme() {
      return new SimpleMallItemStandardScheme();
    }
  }

  private static class SimpleMallItemStandardScheme extends StandardScheme<SimpleMallItem> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SimpleMallItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ITEM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.itemId = iprot.readI32();
              struct.setItemIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.price = iprot.readI32();
              struct.setPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CURRENCY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.currencyType = iprot.readByte();
              struct.setCurrencyTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.count = iprot.readI32();
              struct.setCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // VALID_TIME_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.validTimeType = iprot.readByte();
              struct.setValidTimeTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REMAIN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.remainTime = iprot.readI32();
              struct.setRemainTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SimpleMallItem struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
      oprot.writeI32(struct.itemId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRICE_FIELD_DESC);
      oprot.writeI32(struct.price);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CURRENCY_TYPE_FIELD_DESC);
      oprot.writeByte(struct.currencyType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COUNT_FIELD_DESC);
      oprot.writeI32(struct.count);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VALID_TIME_TYPE_FIELD_DESC);
      oprot.writeByte(struct.validTimeType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REMAIN_TIME_FIELD_DESC);
      oprot.writeI32(struct.remainTime);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SimpleMallItemTupleSchemeFactory implements SchemeFactory {
    public SimpleMallItemTupleScheme getScheme() {
      return new SimpleMallItemTupleScheme();
    }
  }

  private static class SimpleMallItemTupleScheme extends TupleScheme<SimpleMallItem> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SimpleMallItem struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetItemId()) {
        optionals.set(0);
      }
      if (struct.isSetPrice()) {
        optionals.set(1);
      }
      if (struct.isSetCurrencyType()) {
        optionals.set(2);
      }
      if (struct.isSetCount()) {
        optionals.set(3);
      }
      if (struct.isSetValidTimeType()) {
        optionals.set(4);
      }
      if (struct.isSetRemainTime()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetItemId()) {
        oprot.writeI32(struct.itemId);
      }
      if (struct.isSetPrice()) {
        oprot.writeI32(struct.price);
      }
      if (struct.isSetCurrencyType()) {
        oprot.writeByte(struct.currencyType);
      }
      if (struct.isSetCount()) {
        oprot.writeI32(struct.count);
      }
      if (struct.isSetValidTimeType()) {
        oprot.writeByte(struct.validTimeType);
      }
      if (struct.isSetRemainTime()) {
        oprot.writeI32(struct.remainTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SimpleMallItem struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.itemId = iprot.readI32();
        struct.setItemIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.price = iprot.readI32();
        struct.setPriceIsSet(true);
      }
      if (incoming.get(2)) {
        struct.currencyType = iprot.readByte();
        struct.setCurrencyTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.count = iprot.readI32();
        struct.setCountIsSet(true);
      }
      if (incoming.get(4)) {
        struct.validTimeType = iprot.readByte();
        struct.setValidTimeTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.remainTime = iprot.readI32();
        struct.setRemainTimeIsSet(true);
      }
    }
  }

}

