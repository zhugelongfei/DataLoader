/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 签到信息
 */
public class SCSignInInfoMsg implements org.apache.thrift.TBase<SCSignInInfoMsg, SCSignInInfoMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCSignInInfoMsg");

  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField MONTH_FIELD_DESC = new org.apache.thrift.protocol.TField("month", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField SIGN_IN_DAYS_FIELD_DESC = new org.apache.thrift.protocol.TField("signInDays", org.apache.thrift.protocol.TType.BYTE, (short)3);
  private static final org.apache.thrift.protocol.TField IS_SIGNED_TODAY_FIELD_DESC = new org.apache.thrift.protocol.TField("isSignedToday", org.apache.thrift.protocol.TType.BOOL, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCSignInInfoMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCSignInInfoMsgTupleSchemeFactory());
  }

  /**
   * 签到信息版本号
   */
  public int version; // required
  /**
   * 签到月份
   */
  public byte month; // required
  /**
   * 累计签到天数
   */
  public byte signInDays; // required
  /**
   * 今天是否签到
   */
  public boolean isSignedToday; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 签到信息版本号
     */
    VERSION((short)1, "version"),
    /**
     * 签到月份
     */
    MONTH((short)2, "month"),
    /**
     * 累计签到天数
     */
    SIGN_IN_DAYS((short)3, "signInDays"),
    /**
     * 今天是否签到
     */
    IS_SIGNED_TODAY((short)4, "isSignedToday");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VERSION
          return VERSION;
        case 2: // MONTH
          return MONTH;
        case 3: // SIGN_IN_DAYS
          return SIGN_IN_DAYS;
        case 4: // IS_SIGNED_TODAY
          return IS_SIGNED_TODAY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VERSION_ISSET_ID = 0;
  private static final int __MONTH_ISSET_ID = 1;
  private static final int __SIGNINDAYS_ISSET_ID = 2;
  private static final int __ISSIGNEDTODAY_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MONTH, new org.apache.thrift.meta_data.FieldMetaData("month", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.SIGN_IN_DAYS, new org.apache.thrift.meta_data.FieldMetaData("signInDays", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.IS_SIGNED_TODAY, new org.apache.thrift.meta_data.FieldMetaData("isSignedToday", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCSignInInfoMsg.class, metaDataMap);
  }

  public SCSignInInfoMsg() {
  }

  public SCSignInInfoMsg(
    int version,
    byte month,
    byte signInDays,
    boolean isSignedToday)
  {
    this();
    this.version = version;
    setVersionIsSet(true);
    this.month = month;
    setMonthIsSet(true);
    this.signInDays = signInDays;
    setSignInDaysIsSet(true);
    this.isSignedToday = isSignedToday;
    setIsSignedTodayIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCSignInInfoMsg(SCSignInInfoMsg other) {
    __isset_bitfield = other.__isset_bitfield;
    this.version = other.version;
    this.month = other.month;
    this.signInDays = other.signInDays;
    this.isSignedToday = other.isSignedToday;
  }

  public SCSignInInfoMsg deepCopy() {
    return new SCSignInInfoMsg(this);
  }

  @Override
  public void clear() {
    setVersionIsSet(false);
    this.version = 0;
    setMonthIsSet(false);
    this.month = 0;
    setSignInDaysIsSet(false);
    this.signInDays = 0;
    setIsSignedTodayIsSet(false);
    this.isSignedToday = false;
  }

  /**
   * 签到信息版本号
   */
  public int getVersion() {
    return this.version;
  }

  /**
   * 签到信息版本号
   */
  public SCSignInInfoMsg setVersion(int version) {
    this.version = version;
    setVersionIsSet(true);
    return this;
  }

  public void unsetVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
  }

  /**
   * 签到月份
   */
  public byte getMonth() {
    return this.month;
  }

  /**
   * 签到月份
   */
  public SCSignInInfoMsg setMonth(byte month) {
    this.month = month;
    setMonthIsSet(true);
    return this;
  }

  public void unsetMonth() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONTH_ISSET_ID);
  }

  /** Returns true if field month is set (has been assigned a value) and false otherwise */
  public boolean isSetMonth() {
    return EncodingUtils.testBit(__isset_bitfield, __MONTH_ISSET_ID);
  }

  public void setMonthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONTH_ISSET_ID, value);
  }

  /**
   * 累计签到天数
   */
  public byte getSignInDays() {
    return this.signInDays;
  }

  /**
   * 累计签到天数
   */
  public SCSignInInfoMsg setSignInDays(byte signInDays) {
    this.signInDays = signInDays;
    setSignInDaysIsSet(true);
    return this;
  }

  public void unsetSignInDays() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SIGNINDAYS_ISSET_ID);
  }

  /** Returns true if field signInDays is set (has been assigned a value) and false otherwise */
  public boolean isSetSignInDays() {
    return EncodingUtils.testBit(__isset_bitfield, __SIGNINDAYS_ISSET_ID);
  }

  public void setSignInDaysIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SIGNINDAYS_ISSET_ID, value);
  }

  /**
   * 今天是否签到
   */
  public boolean isIsSignedToday() {
    return this.isSignedToday;
  }

  /**
   * 今天是否签到
   */
  public SCSignInInfoMsg setIsSignedToday(boolean isSignedToday) {
    this.isSignedToday = isSignedToday;
    setIsSignedTodayIsSet(true);
    return this;
  }

  public void unsetIsSignedToday() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISSIGNEDTODAY_ISSET_ID);
  }

  /** Returns true if field isSignedToday is set (has been assigned a value) and false otherwise */
  public boolean isSetIsSignedToday() {
    return EncodingUtils.testBit(__isset_bitfield, __ISSIGNEDTODAY_ISSET_ID);
  }

  public void setIsSignedTodayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISSIGNEDTODAY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((Integer)value);
      }
      break;

    case MONTH:
      if (value == null) {
        unsetMonth();
      } else {
        setMonth((Byte)value);
      }
      break;

    case SIGN_IN_DAYS:
      if (value == null) {
        unsetSignInDays();
      } else {
        setSignInDays((Byte)value);
      }
      break;

    case IS_SIGNED_TODAY:
      if (value == null) {
        unsetIsSignedToday();
      } else {
        setIsSignedToday((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case VERSION:
      return Integer.valueOf(getVersion());

    case MONTH:
      return Byte.valueOf(getMonth());

    case SIGN_IN_DAYS:
      return Byte.valueOf(getSignInDays());

    case IS_SIGNED_TODAY:
      return Boolean.valueOf(isIsSignedToday());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case VERSION:
      return isSetVersion();
    case MONTH:
      return isSetMonth();
    case SIGN_IN_DAYS:
      return isSetSignInDays();
    case IS_SIGNED_TODAY:
      return isSetIsSignedToday();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCSignInInfoMsg)
      return this.equals((SCSignInInfoMsg)that);
    return false;
  }

  public boolean equals(SCSignInInfoMsg that) {
    if (that == null)
      return false;

    boolean this_present_version = true;
    boolean that_present_version = true;
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    boolean this_present_month = true;
    boolean that_present_month = true;
    if (this_present_month || that_present_month) {
      if (!(this_present_month && that_present_month))
        return false;
      if (this.month != that.month)
        return false;
    }

    boolean this_present_signInDays = true;
    boolean that_present_signInDays = true;
    if (this_present_signInDays || that_present_signInDays) {
      if (!(this_present_signInDays && that_present_signInDays))
        return false;
      if (this.signInDays != that.signInDays)
        return false;
    }

    boolean this_present_isSignedToday = true;
    boolean that_present_isSignedToday = true;
    if (this_present_isSignedToday || that_present_isSignedToday) {
      if (!(this_present_isSignedToday && that_present_isSignedToday))
        return false;
      if (this.isSignedToday != that.isSignedToday)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCSignInInfoMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCSignInInfoMsg typedOther = (SCSignInInfoMsg)other;

    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(typedOther.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, typedOther.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonth()).compareTo(typedOther.isSetMonth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.month, typedOther.month);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSignInDays()).compareTo(typedOther.isSetSignInDays());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSignInDays()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.signInDays, typedOther.signInDays);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsSignedToday()).compareTo(typedOther.isSetIsSignedToday());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsSignedToday()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isSignedToday, typedOther.isSignedToday);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCSignInInfoMsg(");
    boolean first = true;

    sb.append("version:");
    sb.append(this.version);
    first = false;
    if (!first) sb.append(", ");
    sb.append("month:");
    sb.append(this.month);
    first = false;
    if (!first) sb.append(", ");
    sb.append("signInDays:");
    sb.append(this.signInDays);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isSignedToday:");
    sb.append(this.isSignedToday);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCSignInInfoMsgStandardSchemeFactory implements SchemeFactory {
    public SCSignInInfoMsgStandardScheme getScheme() {
      return new SCSignInInfoMsgStandardScheme();
    }
  }

  private static class SCSignInInfoMsgStandardScheme extends StandardScheme<SCSignInInfoMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCSignInInfoMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.version = iprot.readI32();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MONTH
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.month = iprot.readByte();
              struct.setMonthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SIGN_IN_DAYS
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.signInDays = iprot.readByte();
              struct.setSignInDaysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IS_SIGNED_TODAY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isSignedToday = iprot.readBool();
              struct.setIsSignedTodayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCSignInInfoMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(VERSION_FIELD_DESC);
      oprot.writeI32(struct.version);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MONTH_FIELD_DESC);
      oprot.writeByte(struct.month);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SIGN_IN_DAYS_FIELD_DESC);
      oprot.writeByte(struct.signInDays);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_SIGNED_TODAY_FIELD_DESC);
      oprot.writeBool(struct.isSignedToday);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCSignInInfoMsgTupleSchemeFactory implements SchemeFactory {
    public SCSignInInfoMsgTupleScheme getScheme() {
      return new SCSignInInfoMsgTupleScheme();
    }
  }

  private static class SCSignInInfoMsgTupleScheme extends TupleScheme<SCSignInInfoMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCSignInInfoMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetVersion()) {
        optionals.set(0);
      }
      if (struct.isSetMonth()) {
        optionals.set(1);
      }
      if (struct.isSetSignInDays()) {
        optionals.set(2);
      }
      if (struct.isSetIsSignedToday()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetVersion()) {
        oprot.writeI32(struct.version);
      }
      if (struct.isSetMonth()) {
        oprot.writeByte(struct.month);
      }
      if (struct.isSetSignInDays()) {
        oprot.writeByte(struct.signInDays);
      }
      if (struct.isSetIsSignedToday()) {
        oprot.writeBool(struct.isSignedToday);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCSignInInfoMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.version = iprot.readI32();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(1)) {
        struct.month = iprot.readByte();
        struct.setMonthIsSet(true);
      }
      if (incoming.get(2)) {
        struct.signInDays = iprot.readByte();
        struct.setSignInDaysIsSet(true);
      }
      if (incoming.get(3)) {
        struct.isSignedToday = iprot.readBool();
        struct.setIsSignedTodayIsSet(true);
      }
    }
  }

}

