/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SCBattleDanceTeamInfoMsg implements org.apache.thrift.TBase<SCBattleDanceTeamInfoMsg, SCBattleDanceTeamInfoMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCBattleDanceTeamInfoMsg");

  private static final org.apache.thrift.protocol.TField TEAM_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("teamInfo", org.apache.thrift.protocol.TType.LIST, (short)1);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCBattleDanceTeamInfoMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCBattleDanceTeamInfoMsgTupleSchemeFactory());
  }

  public List<com.ling9527.music.common.msg.auto.BattleDanceTeamInfo> teamInfo; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TEAM_INFO((short)1, "teamInfo");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TEAM_INFO
          return TEAM_INFO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TEAM_INFO, new org.apache.thrift.meta_data.FieldMetaData("teamInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.BattleDanceTeamInfo.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCBattleDanceTeamInfoMsg.class, metaDataMap);
  }

  public SCBattleDanceTeamInfoMsg() {
  }

  public SCBattleDanceTeamInfoMsg(
    List<com.ling9527.music.common.msg.auto.BattleDanceTeamInfo> teamInfo)
  {
    this();
    this.teamInfo = teamInfo;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCBattleDanceTeamInfoMsg(SCBattleDanceTeamInfoMsg other) {
    if (other.isSetTeamInfo()) {
      List<com.ling9527.music.common.msg.auto.BattleDanceTeamInfo> __this__teamInfo = new ArrayList<com.ling9527.music.common.msg.auto.BattleDanceTeamInfo>();
      for (com.ling9527.music.common.msg.auto.BattleDanceTeamInfo other_element : other.teamInfo) {
        __this__teamInfo.add(new com.ling9527.music.common.msg.auto.BattleDanceTeamInfo(other_element));
      }
      this.teamInfo = __this__teamInfo;
    }
  }

  public SCBattleDanceTeamInfoMsg deepCopy() {
    return new SCBattleDanceTeamInfoMsg(this);
  }

  @Override
  public void clear() {
    this.teamInfo = null;
  }

  public int getTeamInfoSize() {
    return (this.teamInfo == null) ? 0 : this.teamInfo.size();
  }

  public java.util.Iterator<com.ling9527.music.common.msg.auto.BattleDanceTeamInfo> getTeamInfoIterator() {
    return (this.teamInfo == null) ? null : this.teamInfo.iterator();
  }

  public void addToTeamInfo(com.ling9527.music.common.msg.auto.BattleDanceTeamInfo elem) {
    if (this.teamInfo == null) {
      this.teamInfo = new ArrayList<com.ling9527.music.common.msg.auto.BattleDanceTeamInfo>();
    }
    this.teamInfo.add(elem);
  }

  public List<com.ling9527.music.common.msg.auto.BattleDanceTeamInfo> getTeamInfo() {
    return this.teamInfo;
  }

  public SCBattleDanceTeamInfoMsg setTeamInfo(List<com.ling9527.music.common.msg.auto.BattleDanceTeamInfo> teamInfo) {
    this.teamInfo = teamInfo;
    return this;
  }

  public void unsetTeamInfo() {
    this.teamInfo = null;
  }

  /** Returns true if field teamInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetTeamInfo() {
    return this.teamInfo != null;
  }

  public void setTeamInfoIsSet(boolean value) {
    if (!value) {
      this.teamInfo = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TEAM_INFO:
      if (value == null) {
        unsetTeamInfo();
      } else {
        setTeamInfo((List<com.ling9527.music.common.msg.auto.BattleDanceTeamInfo>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TEAM_INFO:
      return getTeamInfo();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TEAM_INFO:
      return isSetTeamInfo();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCBattleDanceTeamInfoMsg)
      return this.equals((SCBattleDanceTeamInfoMsg)that);
    return false;
  }

  public boolean equals(SCBattleDanceTeamInfoMsg that) {
    if (that == null)
      return false;

    boolean this_present_teamInfo = true && this.isSetTeamInfo();
    boolean that_present_teamInfo = true && that.isSetTeamInfo();
    if (this_present_teamInfo || that_present_teamInfo) {
      if (!(this_present_teamInfo && that_present_teamInfo))
        return false;
      if (!this.teamInfo.equals(that.teamInfo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCBattleDanceTeamInfoMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCBattleDanceTeamInfoMsg typedOther = (SCBattleDanceTeamInfoMsg)other;

    lastComparison = Boolean.valueOf(isSetTeamInfo()).compareTo(typedOther.isSetTeamInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeamInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teamInfo, typedOther.teamInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCBattleDanceTeamInfoMsg(");
    boolean first = true;

    sb.append("teamInfo:");
    if (this.teamInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.teamInfo);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCBattleDanceTeamInfoMsgStandardSchemeFactory implements SchemeFactory {
    public SCBattleDanceTeamInfoMsgStandardScheme getScheme() {
      return new SCBattleDanceTeamInfoMsgStandardScheme();
    }
  }

  private static class SCBattleDanceTeamInfoMsgStandardScheme extends StandardScheme<SCBattleDanceTeamInfoMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCBattleDanceTeamInfoMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TEAM_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.teamInfo = new ArrayList<com.ling9527.music.common.msg.auto.BattleDanceTeamInfo>(_list8.size);
                for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                {
                  com.ling9527.music.common.msg.auto.BattleDanceTeamInfo _elem10; // required
                  _elem10 = new com.ling9527.music.common.msg.auto.BattleDanceTeamInfo();
                  _elem10.read(iprot);
                  struct.teamInfo.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setTeamInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCBattleDanceTeamInfoMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.teamInfo != null) {
        oprot.writeFieldBegin(TEAM_INFO_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.teamInfo.size()));
          for (com.ling9527.music.common.msg.auto.BattleDanceTeamInfo _iter11 : struct.teamInfo)
          {
            _iter11.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCBattleDanceTeamInfoMsgTupleSchemeFactory implements SchemeFactory {
    public SCBattleDanceTeamInfoMsgTupleScheme getScheme() {
      return new SCBattleDanceTeamInfoMsgTupleScheme();
    }
  }

  private static class SCBattleDanceTeamInfoMsgTupleScheme extends TupleScheme<SCBattleDanceTeamInfoMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCBattleDanceTeamInfoMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTeamInfo()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetTeamInfo()) {
        {
          oprot.writeI32(struct.teamInfo.size());
          for (com.ling9527.music.common.msg.auto.BattleDanceTeamInfo _iter12 : struct.teamInfo)
          {
            _iter12.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCBattleDanceTeamInfoMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.teamInfo = new ArrayList<com.ling9527.music.common.msg.auto.BattleDanceTeamInfo>(_list13.size);
          for (int _i14 = 0; _i14 < _list13.size; ++_i14)
          {
            com.ling9527.music.common.msg.auto.BattleDanceTeamInfo _elem15; // required
            _elem15 = new com.ling9527.music.common.msg.auto.BattleDanceTeamInfo();
            _elem15.read(iprot);
            struct.teamInfo.add(_elem15);
          }
        }
        struct.setTeamInfoIsSet(true);
      }
    }
  }

}

