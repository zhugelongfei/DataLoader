/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CourseTaskData implements org.apache.thrift.TBase<CourseTaskData, CourseTaskData._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CourseTaskData");

  private static final org.apache.thrift.protocol.TField COURSE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("courseId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField COUTER_PROCESS_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("couterProcessList", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField OTHER_PROCESS_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("otherProcessList", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField PRIZE_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("prizeInfos", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField COURSE_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("courseVersion", org.apache.thrift.protocol.TType.BYTE, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CourseTaskDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CourseTaskDataTupleSchemeFactory());
  }

  public int courseId; // required
  /**
   * 
   * @see CourseTaskState
   */
  public CourseTaskState state; // required
  public List<CourseTaskProcess> couterProcessList; // required
  public List<CourseTaskProcess> otherProcessList; // required
  /**
   * 奖励
   */
  public PrizeInfo prizeInfos; // required
  public byte courseVersion; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COURSE_ID((short)1, "courseId"),
    /**
     * 
     * @see CourseTaskState
     */
    STATE((short)2, "state"),
    COUTER_PROCESS_LIST((short)3, "couterProcessList"),
    OTHER_PROCESS_LIST((short)4, "otherProcessList"),
    /**
     * 奖励
     */
    PRIZE_INFOS((short)5, "prizeInfos"),
    COURSE_VERSION((short)6, "courseVersion");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COURSE_ID
          return COURSE_ID;
        case 2: // STATE
          return STATE;
        case 3: // COUTER_PROCESS_LIST
          return COUTER_PROCESS_LIST;
        case 4: // OTHER_PROCESS_LIST
          return OTHER_PROCESS_LIST;
        case 5: // PRIZE_INFOS
          return PRIZE_INFOS;
        case 6: // COURSE_VERSION
          return COURSE_VERSION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COURSEID_ISSET_ID = 0;
  private static final int __COURSEVERSION_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COURSE_ID, new org.apache.thrift.meta_data.FieldMetaData("courseId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CourseTaskState.class)));
    tmpMap.put(_Fields.COUTER_PROCESS_LIST, new org.apache.thrift.meta_data.FieldMetaData("couterProcessList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CourseTaskProcess.class))));
    tmpMap.put(_Fields.OTHER_PROCESS_LIST, new org.apache.thrift.meta_data.FieldMetaData("otherProcessList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CourseTaskProcess.class))));
    tmpMap.put(_Fields.PRIZE_INFOS, new org.apache.thrift.meta_data.FieldMetaData("prizeInfos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrizeInfo.class)));
    tmpMap.put(_Fields.COURSE_VERSION, new org.apache.thrift.meta_data.FieldMetaData("courseVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CourseTaskData.class, metaDataMap);
  }

  public CourseTaskData() {
  }

  public CourseTaskData(
    int courseId,
    CourseTaskState state,
    List<CourseTaskProcess> couterProcessList,
    List<CourseTaskProcess> otherProcessList,
    PrizeInfo prizeInfos,
    byte courseVersion)
  {
    this();
    this.courseId = courseId;
    setCourseIdIsSet(true);
    this.state = state;
    this.couterProcessList = couterProcessList;
    this.otherProcessList = otherProcessList;
    this.prizeInfos = prizeInfos;
    this.courseVersion = courseVersion;
    setCourseVersionIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CourseTaskData(CourseTaskData other) {
    __isset_bitfield = other.__isset_bitfield;
    this.courseId = other.courseId;
    if (other.isSetState()) {
      this.state = other.state;
    }
    if (other.isSetCouterProcessList()) {
      List<CourseTaskProcess> __this__couterProcessList = new ArrayList<CourseTaskProcess>();
      for (CourseTaskProcess other_element : other.couterProcessList) {
        __this__couterProcessList.add(new CourseTaskProcess(other_element));
      }
      this.couterProcessList = __this__couterProcessList;
    }
    if (other.isSetOtherProcessList()) {
      List<CourseTaskProcess> __this__otherProcessList = new ArrayList<CourseTaskProcess>();
      for (CourseTaskProcess other_element : other.otherProcessList) {
        __this__otherProcessList.add(new CourseTaskProcess(other_element));
      }
      this.otherProcessList = __this__otherProcessList;
    }
    if (other.isSetPrizeInfos()) {
      this.prizeInfos = new PrizeInfo(other.prizeInfos);
    }
    this.courseVersion = other.courseVersion;
  }

  public CourseTaskData deepCopy() {
    return new CourseTaskData(this);
  }

  @Override
  public void clear() {
    setCourseIdIsSet(false);
    this.courseId = 0;
    this.state = null;
    this.couterProcessList = null;
    this.otherProcessList = null;
    this.prizeInfos = null;
    setCourseVersionIsSet(false);
    this.courseVersion = 0;
  }

  public int getCourseId() {
    return this.courseId;
  }

  public CourseTaskData setCourseId(int courseId) {
    this.courseId = courseId;
    setCourseIdIsSet(true);
    return this;
  }

  public void unsetCourseId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COURSEID_ISSET_ID);
  }

  /** Returns true if field courseId is set (has been assigned a value) and false otherwise */
  public boolean isSetCourseId() {
    return EncodingUtils.testBit(__isset_bitfield, __COURSEID_ISSET_ID);
  }

  public void setCourseIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COURSEID_ISSET_ID, value);
  }

  /**
   * 
   * @see CourseTaskState
   */
  public CourseTaskState getState() {
    return this.state;
  }

  /**
   * 
   * @see CourseTaskState
   */
  public CourseTaskData setState(CourseTaskState state) {
    this.state = state;
    return this;
  }

  public void unsetState() {
    this.state = null;
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return this.state != null;
  }

  public void setStateIsSet(boolean value) {
    if (!value) {
      this.state = null;
    }
  }

  public int getCouterProcessListSize() {
    return (this.couterProcessList == null) ? 0 : this.couterProcessList.size();
  }

  public java.util.Iterator<CourseTaskProcess> getCouterProcessListIterator() {
    return (this.couterProcessList == null) ? null : this.couterProcessList.iterator();
  }

  public void addToCouterProcessList(CourseTaskProcess elem) {
    if (this.couterProcessList == null) {
      this.couterProcessList = new ArrayList<CourseTaskProcess>();
    }
    this.couterProcessList.add(elem);
  }

  public List<CourseTaskProcess> getCouterProcessList() {
    return this.couterProcessList;
  }

  public CourseTaskData setCouterProcessList(List<CourseTaskProcess> couterProcessList) {
    this.couterProcessList = couterProcessList;
    return this;
  }

  public void unsetCouterProcessList() {
    this.couterProcessList = null;
  }

  /** Returns true if field couterProcessList is set (has been assigned a value) and false otherwise */
  public boolean isSetCouterProcessList() {
    return this.couterProcessList != null;
  }

  public void setCouterProcessListIsSet(boolean value) {
    if (!value) {
      this.couterProcessList = null;
    }
  }

  public int getOtherProcessListSize() {
    return (this.otherProcessList == null) ? 0 : this.otherProcessList.size();
  }

  public java.util.Iterator<CourseTaskProcess> getOtherProcessListIterator() {
    return (this.otherProcessList == null) ? null : this.otherProcessList.iterator();
  }

  public void addToOtherProcessList(CourseTaskProcess elem) {
    if (this.otherProcessList == null) {
      this.otherProcessList = new ArrayList<CourseTaskProcess>();
    }
    this.otherProcessList.add(elem);
  }

  public List<CourseTaskProcess> getOtherProcessList() {
    return this.otherProcessList;
  }

  public CourseTaskData setOtherProcessList(List<CourseTaskProcess> otherProcessList) {
    this.otherProcessList = otherProcessList;
    return this;
  }

  public void unsetOtherProcessList() {
    this.otherProcessList = null;
  }

  /** Returns true if field otherProcessList is set (has been assigned a value) and false otherwise */
  public boolean isSetOtherProcessList() {
    return this.otherProcessList != null;
  }

  public void setOtherProcessListIsSet(boolean value) {
    if (!value) {
      this.otherProcessList = null;
    }
  }

  /**
   * 奖励
   */
  public PrizeInfo getPrizeInfos() {
    return this.prizeInfos;
  }

  /**
   * 奖励
   */
  public CourseTaskData setPrizeInfos(PrizeInfo prizeInfos) {
    this.prizeInfos = prizeInfos;
    return this;
  }

  public void unsetPrizeInfos() {
    this.prizeInfos = null;
  }

  /** Returns true if field prizeInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetPrizeInfos() {
    return this.prizeInfos != null;
  }

  public void setPrizeInfosIsSet(boolean value) {
    if (!value) {
      this.prizeInfos = null;
    }
  }

  public byte getCourseVersion() {
    return this.courseVersion;
  }

  public CourseTaskData setCourseVersion(byte courseVersion) {
    this.courseVersion = courseVersion;
    setCourseVersionIsSet(true);
    return this;
  }

  public void unsetCourseVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COURSEVERSION_ISSET_ID);
  }

  /** Returns true if field courseVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetCourseVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __COURSEVERSION_ISSET_ID);
  }

  public void setCourseVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COURSEVERSION_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COURSE_ID:
      if (value == null) {
        unsetCourseId();
      } else {
        setCourseId((Integer)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((CourseTaskState)value);
      }
      break;

    case COUTER_PROCESS_LIST:
      if (value == null) {
        unsetCouterProcessList();
      } else {
        setCouterProcessList((List<CourseTaskProcess>)value);
      }
      break;

    case OTHER_PROCESS_LIST:
      if (value == null) {
        unsetOtherProcessList();
      } else {
        setOtherProcessList((List<CourseTaskProcess>)value);
      }
      break;

    case PRIZE_INFOS:
      if (value == null) {
        unsetPrizeInfos();
      } else {
        setPrizeInfos((PrizeInfo)value);
      }
      break;

    case COURSE_VERSION:
      if (value == null) {
        unsetCourseVersion();
      } else {
        setCourseVersion((Byte)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COURSE_ID:
      return Integer.valueOf(getCourseId());

    case STATE:
      return getState();

    case COUTER_PROCESS_LIST:
      return getCouterProcessList();

    case OTHER_PROCESS_LIST:
      return getOtherProcessList();

    case PRIZE_INFOS:
      return getPrizeInfos();

    case COURSE_VERSION:
      return Byte.valueOf(getCourseVersion());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COURSE_ID:
      return isSetCourseId();
    case STATE:
      return isSetState();
    case COUTER_PROCESS_LIST:
      return isSetCouterProcessList();
    case OTHER_PROCESS_LIST:
      return isSetOtherProcessList();
    case PRIZE_INFOS:
      return isSetPrizeInfos();
    case COURSE_VERSION:
      return isSetCourseVersion();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CourseTaskData)
      return this.equals((CourseTaskData)that);
    return false;
  }

  public boolean equals(CourseTaskData that) {
    if (that == null)
      return false;

    boolean this_present_courseId = true;
    boolean that_present_courseId = true;
    if (this_present_courseId || that_present_courseId) {
      if (!(this_present_courseId && that_present_courseId))
        return false;
      if (this.courseId != that.courseId)
        return false;
    }

    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (!this.state.equals(that.state))
        return false;
    }

    boolean this_present_couterProcessList = true && this.isSetCouterProcessList();
    boolean that_present_couterProcessList = true && that.isSetCouterProcessList();
    if (this_present_couterProcessList || that_present_couterProcessList) {
      if (!(this_present_couterProcessList && that_present_couterProcessList))
        return false;
      if (!this.couterProcessList.equals(that.couterProcessList))
        return false;
    }

    boolean this_present_otherProcessList = true && this.isSetOtherProcessList();
    boolean that_present_otherProcessList = true && that.isSetOtherProcessList();
    if (this_present_otherProcessList || that_present_otherProcessList) {
      if (!(this_present_otherProcessList && that_present_otherProcessList))
        return false;
      if (!this.otherProcessList.equals(that.otherProcessList))
        return false;
    }

    boolean this_present_prizeInfos = true && this.isSetPrizeInfos();
    boolean that_present_prizeInfos = true && that.isSetPrizeInfos();
    if (this_present_prizeInfos || that_present_prizeInfos) {
      if (!(this_present_prizeInfos && that_present_prizeInfos))
        return false;
      if (!this.prizeInfos.equals(that.prizeInfos))
        return false;
    }

    boolean this_present_courseVersion = true;
    boolean that_present_courseVersion = true;
    if (this_present_courseVersion || that_present_courseVersion) {
      if (!(this_present_courseVersion && that_present_courseVersion))
        return false;
      if (this.courseVersion != that.courseVersion)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(CourseTaskData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CourseTaskData typedOther = (CourseTaskData)other;

    lastComparison = Boolean.valueOf(isSetCourseId()).compareTo(typedOther.isSetCourseId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCourseId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courseId, typedOther.courseId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetState()).compareTo(typedOther.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, typedOther.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCouterProcessList()).compareTo(typedOther.isSetCouterProcessList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCouterProcessList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.couterProcessList, typedOther.couterProcessList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOtherProcessList()).compareTo(typedOther.isSetOtherProcessList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOtherProcessList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.otherProcessList, typedOther.otherProcessList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrizeInfos()).compareTo(typedOther.isSetPrizeInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrizeInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prizeInfos, typedOther.prizeInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCourseVersion()).compareTo(typedOther.isSetCourseVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCourseVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courseVersion, typedOther.courseVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CourseTaskData(");
    boolean first = true;

    sb.append("courseId:");
    sb.append(this.courseId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("state:");
    if (this.state == null) {
      sb.append("null");
    } else {
      sb.append(this.state);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("couterProcessList:");
    if (this.couterProcessList == null) {
      sb.append("null");
    } else {
      sb.append(this.couterProcessList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("otherProcessList:");
    if (this.otherProcessList == null) {
      sb.append("null");
    } else {
      sb.append(this.otherProcessList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("prizeInfos:");
    if (this.prizeInfos == null) {
      sb.append("null");
    } else {
      sb.append(this.prizeInfos);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("courseVersion:");
    sb.append(this.courseVersion);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (prizeInfos != null) {
      prizeInfos.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CourseTaskDataStandardSchemeFactory implements SchemeFactory {
    public CourseTaskDataStandardScheme getScheme() {
      return new CourseTaskDataStandardScheme();
    }
  }

  private static class CourseTaskDataStandardScheme extends StandardScheme<CourseTaskData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CourseTaskData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COURSE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.courseId = iprot.readI32();
              struct.setCourseIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.state = CourseTaskState.findByValue(iprot.readI32());
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COUTER_PROCESS_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list390 = iprot.readListBegin();
                struct.couterProcessList = new ArrayList<CourseTaskProcess>(_list390.size);
                for (int _i391 = 0; _i391 < _list390.size; ++_i391)
                {
                  CourseTaskProcess _elem392; // required
                  _elem392 = new CourseTaskProcess();
                  _elem392.read(iprot);
                  struct.couterProcessList.add(_elem392);
                }
                iprot.readListEnd();
              }
              struct.setCouterProcessListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OTHER_PROCESS_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list393 = iprot.readListBegin();
                struct.otherProcessList = new ArrayList<CourseTaskProcess>(_list393.size);
                for (int _i394 = 0; _i394 < _list393.size; ++_i394)
                {
                  CourseTaskProcess _elem395; // required
                  _elem395 = new CourseTaskProcess();
                  _elem395.read(iprot);
                  struct.otherProcessList.add(_elem395);
                }
                iprot.readListEnd();
              }
              struct.setOtherProcessListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PRIZE_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.prizeInfos = new PrizeInfo();
              struct.prizeInfos.read(iprot);
              struct.setPrizeInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COURSE_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.courseVersion = iprot.readByte();
              struct.setCourseVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CourseTaskData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(COURSE_ID_FIELD_DESC);
      oprot.writeI32(struct.courseId);
      oprot.writeFieldEnd();
      if (struct.state != null) {
        oprot.writeFieldBegin(STATE_FIELD_DESC);
        oprot.writeI32(struct.state.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.couterProcessList != null) {
        oprot.writeFieldBegin(COUTER_PROCESS_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.couterProcessList.size()));
          for (CourseTaskProcess _iter396 : struct.couterProcessList)
          {
            _iter396.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.otherProcessList != null) {
        oprot.writeFieldBegin(OTHER_PROCESS_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.otherProcessList.size()));
          for (CourseTaskProcess _iter397 : struct.otherProcessList)
          {
            _iter397.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.prizeInfos != null) {
        oprot.writeFieldBegin(PRIZE_INFOS_FIELD_DESC);
        struct.prizeInfos.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(COURSE_VERSION_FIELD_DESC);
      oprot.writeByte(struct.courseVersion);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CourseTaskDataTupleSchemeFactory implements SchemeFactory {
    public CourseTaskDataTupleScheme getScheme() {
      return new CourseTaskDataTupleScheme();
    }
  }

  private static class CourseTaskDataTupleScheme extends TupleScheme<CourseTaskData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CourseTaskData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCourseId()) {
        optionals.set(0);
      }
      if (struct.isSetState()) {
        optionals.set(1);
      }
      if (struct.isSetCouterProcessList()) {
        optionals.set(2);
      }
      if (struct.isSetOtherProcessList()) {
        optionals.set(3);
      }
      if (struct.isSetPrizeInfos()) {
        optionals.set(4);
      }
      if (struct.isSetCourseVersion()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetCourseId()) {
        oprot.writeI32(struct.courseId);
      }
      if (struct.isSetState()) {
        oprot.writeI32(struct.state.getValue());
      }
      if (struct.isSetCouterProcessList()) {
        {
          oprot.writeI32(struct.couterProcessList.size());
          for (CourseTaskProcess _iter398 : struct.couterProcessList)
          {
            _iter398.write(oprot);
          }
        }
      }
      if (struct.isSetOtherProcessList()) {
        {
          oprot.writeI32(struct.otherProcessList.size());
          for (CourseTaskProcess _iter399 : struct.otherProcessList)
          {
            _iter399.write(oprot);
          }
        }
      }
      if (struct.isSetPrizeInfos()) {
        struct.prizeInfos.write(oprot);
      }
      if (struct.isSetCourseVersion()) {
        oprot.writeByte(struct.courseVersion);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CourseTaskData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.courseId = iprot.readI32();
        struct.setCourseIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.state = CourseTaskState.findByValue(iprot.readI32());
        struct.setStateIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list400 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.couterProcessList = new ArrayList<CourseTaskProcess>(_list400.size);
          for (int _i401 = 0; _i401 < _list400.size; ++_i401)
          {
            CourseTaskProcess _elem402; // required
            _elem402 = new CourseTaskProcess();
            _elem402.read(iprot);
            struct.couterProcessList.add(_elem402);
          }
        }
        struct.setCouterProcessListIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list403 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.otherProcessList = new ArrayList<CourseTaskProcess>(_list403.size);
          for (int _i404 = 0; _i404 < _list403.size; ++_i404)
          {
            CourseTaskProcess _elem405; // required
            _elem405 = new CourseTaskProcess();
            _elem405.read(iprot);
            struct.otherProcessList.add(_elem405);
          }
        }
        struct.setOtherProcessListIsSet(true);
      }
      if (incoming.get(4)) {
        struct.prizeInfos = new PrizeInfo();
        struct.prizeInfos.read(iprot);
        struct.setPrizeInfosIsSet(true);
      }
      if (incoming.get(5)) {
        struct.courseVersion = iprot.readByte();
        struct.setCourseVersionIsSet(true);
      }
    }
  }

}

