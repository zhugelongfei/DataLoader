/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 名片详细信息，用做缓存使用，方便有人查询好友时快速读取
 */
public class BusinessCardInfo implements org.apache.thrift.TBase<BusinessCardInfo, BusinessCardInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BusinessCardInfo");

  private static final org.apache.thrift.protocol.TField CHAR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("charId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField BIRTHDAY_FIELD_DESC = new org.apache.thrift.protocol.TField("birthday", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SEX_FIELD_DESC = new org.apache.thrift.protocol.TField("sex", org.apache.thrift.protocol.TType.BYTE, (short)4);
  private static final org.apache.thrift.protocol.TField HEAD_ICON_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("headIconId", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CONSTELLATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("constellationId", org.apache.thrift.protocol.TType.BYTE, (short)6);
  private static final org.apache.thrift.protocol.TField LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("location", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField POPULARITY_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("popularityTotal", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField CHARM_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("charmTotal", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField MOOD_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("moodMessage", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField AVATAR_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("avatarList", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField VIP_DIAMOND_FIELD_DESC = new org.apache.thrift.protocol.TField("vipDiamond", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("level", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField DYNAMIC_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("dynamicCount", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField DYNAMIC_WIN_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("dynamicWinCount", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField TRADITIONAL_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("traditionalCount", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField TRADITIONAL_WIN_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("traditionalWinCount", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField BATTLE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("battleCount", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField BATTLE_WIN_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("battleWinCount", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField MOOD_MESSAGE_BY_VOICE_FIELD_DESC = new org.apache.thrift.protocol.TField("moodMessageByVoice", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField POINT_FIELD_DESC = new org.apache.thrift.protocol.TField("point", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField LONGITUDE_FIELD_DESC = new org.apache.thrift.protocol.TField("longitude", org.apache.thrift.protocol.TType.DOUBLE, (short)24);
  private static final org.apache.thrift.protocol.TField LATITUDE_FIELD_DESC = new org.apache.thrift.protocol.TField("latitude", org.apache.thrift.protocol.TType.DOUBLE, (short)25);
  private static final org.apache.thrift.protocol.TField MODEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("modelId", org.apache.thrift.protocol.TType.BYTE, (short)28);
  private static final org.apache.thrift.protocol.TField OPEN_FIELD_DESC = new org.apache.thrift.protocol.TField("open", org.apache.thrift.protocol.TType.BOOL, (short)29);
  private static final org.apache.thrift.protocol.TField STATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("stature", org.apache.thrift.protocol.TType.BYTE, (short)31);
  private static final org.apache.thrift.protocol.TField HEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("height", org.apache.thrift.protocol.TType.I32, (short)32);
  private static final org.apache.thrift.protocol.TField WEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("weight", org.apache.thrift.protocol.TType.I32, (short)33);
  private static final org.apache.thrift.protocol.TField FINANCIAL_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("financialTotal", org.apache.thrift.protocol.TType.I32, (short)34);
  private static final org.apache.thrift.protocol.TField GIFT_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("giftTotal", org.apache.thrift.protocol.TType.I32, (short)35);
  private static final org.apache.thrift.protocol.TField PRAISE_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("praiseTotal", org.apache.thrift.protocol.TType.I32, (short)36);
  private static final org.apache.thrift.protocol.TField CUP_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("cupTotal", org.apache.thrift.protocol.TType.I32, (short)37);
  private static final org.apache.thrift.protocol.TField POPULARITY_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("popularityLevel", org.apache.thrift.protocol.TType.I16, (short)38);
  private static final org.apache.thrift.protocol.TField LARGESSE_FIELD_DESC = new org.apache.thrift.protocol.TField("largesse", org.apache.thrift.protocol.TType.I32, (short)42);
  private static final org.apache.thrift.protocol.TField CHARM_FIELD_DESC = new org.apache.thrift.protocol.TField("charm", org.apache.thrift.protocol.TType.I32, (short)43);
  private static final org.apache.thrift.protocol.TField TAG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tagId", org.apache.thrift.protocol.TType.I16, (short)44);
  private static final org.apache.thrift.protocol.TField GS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("gsId", org.apache.thrift.protocol.TType.STRING, (short)45);
  private static final org.apache.thrift.protocol.TField VIP_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("vipLevel", org.apache.thrift.protocol.TType.BYTE, (short)46);
  private static final org.apache.thrift.protocol.TField GUILD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("guildId", org.apache.thrift.protocol.TType.I64, (short)47);
  private static final org.apache.thrift.protocol.TField GUILD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("guildName", org.apache.thrift.protocol.TType.STRING, (short)48);
  private static final org.apache.thrift.protocol.TField VIP_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("vipExp", org.apache.thrift.protocol.TType.I32, (short)49);
  private static final org.apache.thrift.protocol.TField SKIN_COLOR_FIELD_DESC = new org.apache.thrift.protocol.TField("skinColor", org.apache.thrift.protocol.TType.I32, (short)50);
  private static final org.apache.thrift.protocol.TField STAR_LIGHTS_FIELD_DESC = new org.apache.thrift.protocol.TField("starLights", org.apache.thrift.protocol.TType.I32, (short)51);
  private static final org.apache.thrift.protocol.TField STAR_LIGHT_LVL_FIELD_DESC = new org.apache.thrift.protocol.TField("starLightLvl", org.apache.thrift.protocol.TType.I32, (short)52);
  private static final org.apache.thrift.protocol.TField EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("exp", org.apache.thrift.protocol.TType.I32, (short)53);
  private static final org.apache.thrift.protocol.TField POPULARITY_LVL_FIELD_DESC = new org.apache.thrift.protocol.TField("popularityLvl", org.apache.thrift.protocol.TType.I64, (short)54);
  private static final org.apache.thrift.protocol.TField JEWELRY_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("jewelryInfos", org.apache.thrift.protocol.TType.LIST, (short)55);
  private static final org.apache.thrift.protocol.TField BE_ADDED_FRIENDS_FIELD_DESC = new org.apache.thrift.protocol.TField("beAddedFriends", org.apache.thrift.protocol.TType.I32, (short)56);
  private static final org.apache.thrift.protocol.TField RELATION_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("relationInfos", org.apache.thrift.protocol.TType.LIST, (short)57);
  private static final org.apache.thrift.protocol.TField ONLINE_FIELD_DESC = new org.apache.thrift.protocol.TField("online", org.apache.thrift.protocol.TType.BOOL, (short)58);
  private static final org.apache.thrift.protocol.TField CARD_FASHION_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("cardFashionIds", org.apache.thrift.protocol.TType.MAP, (short)59);
  private static final org.apache.thrift.protocol.TField PUT_ON_BADGES_FIELD_DESC = new org.apache.thrift.protocol.TField("putOnBadges", org.apache.thrift.protocol.TType.LIST, (short)60);
  private static final org.apache.thrift.protocol.TField FASHION_FIELD_DESC = new org.apache.thrift.protocol.TField("fashion", org.apache.thrift.protocol.TType.I32, (short)61);
  private static final org.apache.thrift.protocol.TField THE_ONE_CHAR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("theOneCharId", org.apache.thrift.protocol.TType.I64, (short)62);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)63);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BusinessCardInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BusinessCardInfoTupleSchemeFactory());
  }

  public long charId; // required
  public String name; // required
  /**
   * format yyyy-MM-dd HH:mm:ss timestamp accurate to the second. (1981-06-01 00:00:00)
   */
  public String birthday; // required
  public byte sex; // required
  public String headIconId; // required
  /**
   * 星座索引
   */
  public byte constellationId; // optional
  public String location; // optional
  public long popularityTotal; // required
  public long charmTotal; // required
  public String moodMessage; // optional
  public List<AvatarInfo> avatarList; // required
  public int vipDiamond; // required
  public int level; // required
  public int dynamicCount; // required
  public int dynamicWinCount; // required
  public int traditionalCount; // required
  public int traditionalWinCount; // required
  public int battleCount; // required
  public int battleWinCount; // required
  public String moodMessageByVoice; // optional
  public int point; // optional
  public double longitude; // optional
  public double latitude; // optional
  public byte modelId; // optional
  public boolean open; // optional
  public byte stature; // optional
  public int height; // optional
  public int weight; // optional
  public int financialTotal; // required
  public int giftTotal; // required
  public int praiseTotal; // required
  public int cupTotal; // required
  public short popularityLevel; // required
  public int largesse; // required
  public int charm; // required
  public short tagId; // optional
  public String gsId; // required
  public byte vipLevel; // required
  public long guildId; // required
  public String guildName; // required
  public int vipExp; // required
  public int skinColor; // required
  public int starLights; // required
  public int starLightLvl; // required
  public int exp; // required
  public long popularityLvl; // required
  /**
   * 首饰盒简要信息
   */
  public List<JewelryInfo> jewelryInfos; // required
  /**
   * 被关注数量
   */
  public int beAddedFriends; // required
  /**
   * 社交关系简要信息
   */
  public List<SimpleBusinessCardInfo> relationInfos; // required
  public boolean online; // required
  /**
   * 使用中的名片时尚id, key:style val:高32位id | 低32位有效期
   */
  public Map<Byte,Long> cardFashionIds; // optional
  /**
   * 佩戴的徽章
   */
  public List<BadgeInfo> putOnBadges; // optional
  public int fashion; // required
  public long theOneCharId; // required
  /**
   * 用户id, 显示用
   */
  public long userId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CHAR_ID((short)1, "charId"),
    NAME((short)2, "name"),
    /**
     * format yyyy-MM-dd HH:mm:ss timestamp accurate to the second. (1981-06-01 00:00:00)
     */
    BIRTHDAY((short)3, "birthday"),
    SEX((short)4, "sex"),
    HEAD_ICON_ID((short)5, "headIconId"),
    /**
     * 星座索引
     */
    CONSTELLATION_ID((short)6, "constellationId"),
    LOCATION((short)7, "location"),
    POPULARITY_TOTAL((short)8, "popularityTotal"),
    CHARM_TOTAL((short)9, "charmTotal"),
    MOOD_MESSAGE((short)10, "moodMessage"),
    AVATAR_LIST((short)11, "avatarList"),
    VIP_DIAMOND((short)12, "vipDiamond"),
    LEVEL((short)13, "level"),
    DYNAMIC_COUNT((short)16, "dynamicCount"),
    DYNAMIC_WIN_COUNT((short)17, "dynamicWinCount"),
    TRADITIONAL_COUNT((short)18, "traditionalCount"),
    TRADITIONAL_WIN_COUNT((short)19, "traditionalWinCount"),
    BATTLE_COUNT((short)20, "battleCount"),
    BATTLE_WIN_COUNT((short)21, "battleWinCount"),
    MOOD_MESSAGE_BY_VOICE((short)22, "moodMessageByVoice"),
    POINT((short)23, "point"),
    LONGITUDE((short)24, "longitude"),
    LATITUDE((short)25, "latitude"),
    MODEL_ID((short)28, "modelId"),
    OPEN((short)29, "open"),
    STATURE((short)31, "stature"),
    HEIGHT((short)32, "height"),
    WEIGHT((short)33, "weight"),
    FINANCIAL_TOTAL((short)34, "financialTotal"),
    GIFT_TOTAL((short)35, "giftTotal"),
    PRAISE_TOTAL((short)36, "praiseTotal"),
    CUP_TOTAL((short)37, "cupTotal"),
    POPULARITY_LEVEL((short)38, "popularityLevel"),
    LARGESSE((short)42, "largesse"),
    CHARM((short)43, "charm"),
    TAG_ID((short)44, "tagId"),
    GS_ID((short)45, "gsId"),
    VIP_LEVEL((short)46, "vipLevel"),
    GUILD_ID((short)47, "guildId"),
    GUILD_NAME((short)48, "guildName"),
    VIP_EXP((short)49, "vipExp"),
    SKIN_COLOR((short)50, "skinColor"),
    STAR_LIGHTS((short)51, "starLights"),
    STAR_LIGHT_LVL((short)52, "starLightLvl"),
    EXP((short)53, "exp"),
    POPULARITY_LVL((short)54, "popularityLvl"),
    /**
     * 首饰盒简要信息
     */
    JEWELRY_INFOS((short)55, "jewelryInfos"),
    /**
     * 被关注数量
     */
    BE_ADDED_FRIENDS((short)56, "beAddedFriends"),
    /**
     * 社交关系简要信息
     */
    RELATION_INFOS((short)57, "relationInfos"),
    ONLINE((short)58, "online"),
    /**
     * 使用中的名片时尚id, key:style val:高32位id | 低32位有效期
     */
    CARD_FASHION_IDS((short)59, "cardFashionIds"),
    /**
     * 佩戴的徽章
     */
    PUT_ON_BADGES((short)60, "putOnBadges"),
    FASHION((short)61, "fashion"),
    THE_ONE_CHAR_ID((short)62, "theOneCharId"),
    /**
     * 用户id, 显示用
     */
    USER_ID((short)63, "userId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CHAR_ID
          return CHAR_ID;
        case 2: // NAME
          return NAME;
        case 3: // BIRTHDAY
          return BIRTHDAY;
        case 4: // SEX
          return SEX;
        case 5: // HEAD_ICON_ID
          return HEAD_ICON_ID;
        case 6: // CONSTELLATION_ID
          return CONSTELLATION_ID;
        case 7: // LOCATION
          return LOCATION;
        case 8: // POPULARITY_TOTAL
          return POPULARITY_TOTAL;
        case 9: // CHARM_TOTAL
          return CHARM_TOTAL;
        case 10: // MOOD_MESSAGE
          return MOOD_MESSAGE;
        case 11: // AVATAR_LIST
          return AVATAR_LIST;
        case 12: // VIP_DIAMOND
          return VIP_DIAMOND;
        case 13: // LEVEL
          return LEVEL;
        case 16: // DYNAMIC_COUNT
          return DYNAMIC_COUNT;
        case 17: // DYNAMIC_WIN_COUNT
          return DYNAMIC_WIN_COUNT;
        case 18: // TRADITIONAL_COUNT
          return TRADITIONAL_COUNT;
        case 19: // TRADITIONAL_WIN_COUNT
          return TRADITIONAL_WIN_COUNT;
        case 20: // BATTLE_COUNT
          return BATTLE_COUNT;
        case 21: // BATTLE_WIN_COUNT
          return BATTLE_WIN_COUNT;
        case 22: // MOOD_MESSAGE_BY_VOICE
          return MOOD_MESSAGE_BY_VOICE;
        case 23: // POINT
          return POINT;
        case 24: // LONGITUDE
          return LONGITUDE;
        case 25: // LATITUDE
          return LATITUDE;
        case 28: // MODEL_ID
          return MODEL_ID;
        case 29: // OPEN
          return OPEN;
        case 31: // STATURE
          return STATURE;
        case 32: // HEIGHT
          return HEIGHT;
        case 33: // WEIGHT
          return WEIGHT;
        case 34: // FINANCIAL_TOTAL
          return FINANCIAL_TOTAL;
        case 35: // GIFT_TOTAL
          return GIFT_TOTAL;
        case 36: // PRAISE_TOTAL
          return PRAISE_TOTAL;
        case 37: // CUP_TOTAL
          return CUP_TOTAL;
        case 38: // POPULARITY_LEVEL
          return POPULARITY_LEVEL;
        case 42: // LARGESSE
          return LARGESSE;
        case 43: // CHARM
          return CHARM;
        case 44: // TAG_ID
          return TAG_ID;
        case 45: // GS_ID
          return GS_ID;
        case 46: // VIP_LEVEL
          return VIP_LEVEL;
        case 47: // GUILD_ID
          return GUILD_ID;
        case 48: // GUILD_NAME
          return GUILD_NAME;
        case 49: // VIP_EXP
          return VIP_EXP;
        case 50: // SKIN_COLOR
          return SKIN_COLOR;
        case 51: // STAR_LIGHTS
          return STAR_LIGHTS;
        case 52: // STAR_LIGHT_LVL
          return STAR_LIGHT_LVL;
        case 53: // EXP
          return EXP;
        case 54: // POPULARITY_LVL
          return POPULARITY_LVL;
        case 55: // JEWELRY_INFOS
          return JEWELRY_INFOS;
        case 56: // BE_ADDED_FRIENDS
          return BE_ADDED_FRIENDS;
        case 57: // RELATION_INFOS
          return RELATION_INFOS;
        case 58: // ONLINE
          return ONLINE;
        case 59: // CARD_FASHION_IDS
          return CARD_FASHION_IDS;
        case 60: // PUT_ON_BADGES
          return PUT_ON_BADGES;
        case 61: // FASHION
          return FASHION;
        case 62: // THE_ONE_CHAR_ID
          return THE_ONE_CHAR_ID;
        case 63: // USER_ID
          return USER_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CHARID_ISSET_ID = 0;
  private static final int __SEX_ISSET_ID = 1;
  private static final int __CONSTELLATIONID_ISSET_ID = 2;
  private static final int __POPULARITYTOTAL_ISSET_ID = 3;
  private static final int __CHARMTOTAL_ISSET_ID = 4;
  private static final int __VIPDIAMOND_ISSET_ID = 5;
  private static final int __LEVEL_ISSET_ID = 6;
  private static final int __DYNAMICCOUNT_ISSET_ID = 7;
  private static final int __DYNAMICWINCOUNT_ISSET_ID = 8;
  private static final int __TRADITIONALCOUNT_ISSET_ID = 9;
  private static final int __TRADITIONALWINCOUNT_ISSET_ID = 10;
  private static final int __BATTLECOUNT_ISSET_ID = 11;
  private static final int __BATTLEWINCOUNT_ISSET_ID = 12;
  private static final int __POINT_ISSET_ID = 13;
  private static final int __LONGITUDE_ISSET_ID = 14;
  private static final int __LATITUDE_ISSET_ID = 15;
  private static final int __MODELID_ISSET_ID = 16;
  private static final int __OPEN_ISSET_ID = 17;
  private static final int __STATURE_ISSET_ID = 18;
  private static final int __HEIGHT_ISSET_ID = 19;
  private static final int __WEIGHT_ISSET_ID = 20;
  private static final int __FINANCIALTOTAL_ISSET_ID = 21;
  private static final int __GIFTTOTAL_ISSET_ID = 22;
  private static final int __PRAISETOTAL_ISSET_ID = 23;
  private static final int __CUPTOTAL_ISSET_ID = 24;
  private static final int __POPULARITYLEVEL_ISSET_ID = 25;
  private static final int __LARGESSE_ISSET_ID = 26;
  private static final int __CHARM_ISSET_ID = 27;
  private static final int __TAGID_ISSET_ID = 28;
  private static final int __VIPLEVEL_ISSET_ID = 29;
  private static final int __GUILDID_ISSET_ID = 30;
  private static final int __VIPEXP_ISSET_ID = 31;
  private static final int __SKINCOLOR_ISSET_ID = 32;
  private static final int __STARLIGHTS_ISSET_ID = 33;
  private static final int __STARLIGHTLVL_ISSET_ID = 34;
  private static final int __EXP_ISSET_ID = 35;
  private static final int __POPULARITYLVL_ISSET_ID = 36;
  private static final int __BEADDEDFRIENDS_ISSET_ID = 37;
  private static final int __ONLINE_ISSET_ID = 38;
  private static final int __FASHION_ISSET_ID = 39;
  private static final int __THEONECHARID_ISSET_ID = 40;
  private static final int __USERID_ISSET_ID = 41;
  private long __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.CONSTELLATION_ID,_Fields.LOCATION,_Fields.MOOD_MESSAGE,_Fields.MOOD_MESSAGE_BY_VOICE,_Fields.POINT,_Fields.LONGITUDE,_Fields.LATITUDE,_Fields.MODEL_ID,_Fields.OPEN,_Fields.STATURE,_Fields.HEIGHT,_Fields.WEIGHT,_Fields.TAG_ID,_Fields.CARD_FASHION_IDS,_Fields.PUT_ON_BADGES,_Fields.USER_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CHAR_ID, new org.apache.thrift.meta_data.FieldMetaData("charId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BIRTHDAY, new org.apache.thrift.meta_data.FieldMetaData("birthday", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEX, new org.apache.thrift.meta_data.FieldMetaData("sex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.HEAD_ICON_ID, new org.apache.thrift.meta_data.FieldMetaData("headIconId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONSTELLATION_ID, new org.apache.thrift.meta_data.FieldMetaData("constellationId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.LOCATION, new org.apache.thrift.meta_data.FieldMetaData("location", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POPULARITY_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("popularityTotal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CHARM_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("charmTotal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MOOD_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("moodMessage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AVATAR_LIST, new org.apache.thrift.meta_data.FieldMetaData("avatarList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AvatarInfo.class))));
    tmpMap.put(_Fields.VIP_DIAMOND, new org.apache.thrift.meta_data.FieldMetaData("vipDiamond", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LEVEL, new org.apache.thrift.meta_data.FieldMetaData("level", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DYNAMIC_COUNT, new org.apache.thrift.meta_data.FieldMetaData("dynamicCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DYNAMIC_WIN_COUNT, new org.apache.thrift.meta_data.FieldMetaData("dynamicWinCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TRADITIONAL_COUNT, new org.apache.thrift.meta_data.FieldMetaData("traditionalCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TRADITIONAL_WIN_COUNT, new org.apache.thrift.meta_data.FieldMetaData("traditionalWinCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BATTLE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("battleCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BATTLE_WIN_COUNT, new org.apache.thrift.meta_data.FieldMetaData("battleWinCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MOOD_MESSAGE_BY_VOICE, new org.apache.thrift.meta_data.FieldMetaData("moodMessageByVoice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POINT, new org.apache.thrift.meta_data.FieldMetaData("point", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LONGITUDE, new org.apache.thrift.meta_data.FieldMetaData("longitude", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LATITUDE, new org.apache.thrift.meta_data.FieldMetaData("latitude", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MODEL_ID, new org.apache.thrift.meta_data.FieldMetaData("modelId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.OPEN, new org.apache.thrift.meta_data.FieldMetaData("open", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.STATURE, new org.apache.thrift.meta_data.FieldMetaData("stature", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.HEIGHT, new org.apache.thrift.meta_data.FieldMetaData("height", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WEIGHT, new org.apache.thrift.meta_data.FieldMetaData("weight", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FINANCIAL_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("financialTotal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GIFT_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("giftTotal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRAISE_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("praiseTotal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CUP_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("cupTotal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POPULARITY_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("popularityLevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.LARGESSE, new org.apache.thrift.meta_data.FieldMetaData("largesse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CHARM, new org.apache.thrift.meta_data.FieldMetaData("charm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TAG_ID, new org.apache.thrift.meta_data.FieldMetaData("tagId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.GS_ID, new org.apache.thrift.meta_data.FieldMetaData("gsId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VIP_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("vipLevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.GUILD_ID, new org.apache.thrift.meta_data.FieldMetaData("guildId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.GUILD_NAME, new org.apache.thrift.meta_data.FieldMetaData("guildName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VIP_EXP, new org.apache.thrift.meta_data.FieldMetaData("vipExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SKIN_COLOR, new org.apache.thrift.meta_data.FieldMetaData("skinColor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STAR_LIGHTS, new org.apache.thrift.meta_data.FieldMetaData("starLights", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STAR_LIGHT_LVL, new org.apache.thrift.meta_data.FieldMetaData("starLightLvl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXP, new org.apache.thrift.meta_data.FieldMetaData("exp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POPULARITY_LVL, new org.apache.thrift.meta_data.FieldMetaData("popularityLvl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.JEWELRY_INFOS, new org.apache.thrift.meta_data.FieldMetaData("jewelryInfos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JewelryInfo.class))));
    tmpMap.put(_Fields.BE_ADDED_FRIENDS, new org.apache.thrift.meta_data.FieldMetaData("beAddedFriends", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RELATION_INFOS, new org.apache.thrift.meta_data.FieldMetaData("relationInfos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SimpleBusinessCardInfo.class))));
    tmpMap.put(_Fields.ONLINE, new org.apache.thrift.meta_data.FieldMetaData("online", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CARD_FASHION_IDS, new org.apache.thrift.meta_data.FieldMetaData("cardFashionIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.PUT_ON_BADGES, new org.apache.thrift.meta_data.FieldMetaData("putOnBadges", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BadgeInfo.class))));
    tmpMap.put(_Fields.FASHION, new org.apache.thrift.meta_data.FieldMetaData("fashion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.THE_ONE_CHAR_ID, new org.apache.thrift.meta_data.FieldMetaData("theOneCharId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BusinessCardInfo.class, metaDataMap);
  }

  public BusinessCardInfo() {
  }

  public BusinessCardInfo(
    long charId,
    String name,
    String birthday,
    byte sex,
    String headIconId,
    long popularityTotal,
    long charmTotal,
    List<AvatarInfo> avatarList,
    int vipDiamond,
    int level,
    int dynamicCount,
    int dynamicWinCount,
    int traditionalCount,
    int traditionalWinCount,
    int battleCount,
    int battleWinCount,
    int financialTotal,
    int giftTotal,
    int praiseTotal,
    int cupTotal,
    short popularityLevel,
    int largesse,
    int charm,
    String gsId,
    byte vipLevel,
    long guildId,
    String guildName,
    int vipExp,
    int skinColor,
    int starLights,
    int starLightLvl,
    int exp,
    long popularityLvl,
    List<JewelryInfo> jewelryInfos,
    int beAddedFriends,
    List<SimpleBusinessCardInfo> relationInfos,
    boolean online,
    int fashion,
    long theOneCharId)
  {
    this();
    this.charId = charId;
    setCharIdIsSet(true);
    this.name = name;
    this.birthday = birthday;
    this.sex = sex;
    setSexIsSet(true);
    this.headIconId = headIconId;
    this.popularityTotal = popularityTotal;
    setPopularityTotalIsSet(true);
    this.charmTotal = charmTotal;
    setCharmTotalIsSet(true);
    this.avatarList = avatarList;
    this.vipDiamond = vipDiamond;
    setVipDiamondIsSet(true);
    this.level = level;
    setLevelIsSet(true);
    this.dynamicCount = dynamicCount;
    setDynamicCountIsSet(true);
    this.dynamicWinCount = dynamicWinCount;
    setDynamicWinCountIsSet(true);
    this.traditionalCount = traditionalCount;
    setTraditionalCountIsSet(true);
    this.traditionalWinCount = traditionalWinCount;
    setTraditionalWinCountIsSet(true);
    this.battleCount = battleCount;
    setBattleCountIsSet(true);
    this.battleWinCount = battleWinCount;
    setBattleWinCountIsSet(true);
    this.financialTotal = financialTotal;
    setFinancialTotalIsSet(true);
    this.giftTotal = giftTotal;
    setGiftTotalIsSet(true);
    this.praiseTotal = praiseTotal;
    setPraiseTotalIsSet(true);
    this.cupTotal = cupTotal;
    setCupTotalIsSet(true);
    this.popularityLevel = popularityLevel;
    setPopularityLevelIsSet(true);
    this.largesse = largesse;
    setLargesseIsSet(true);
    this.charm = charm;
    setCharmIsSet(true);
    this.gsId = gsId;
    this.vipLevel = vipLevel;
    setVipLevelIsSet(true);
    this.guildId = guildId;
    setGuildIdIsSet(true);
    this.guildName = guildName;
    this.vipExp = vipExp;
    setVipExpIsSet(true);
    this.skinColor = skinColor;
    setSkinColorIsSet(true);
    this.starLights = starLights;
    setStarLightsIsSet(true);
    this.starLightLvl = starLightLvl;
    setStarLightLvlIsSet(true);
    this.exp = exp;
    setExpIsSet(true);
    this.popularityLvl = popularityLvl;
    setPopularityLvlIsSet(true);
    this.jewelryInfos = jewelryInfos;
    this.beAddedFriends = beAddedFriends;
    setBeAddedFriendsIsSet(true);
    this.relationInfos = relationInfos;
    this.online = online;
    setOnlineIsSet(true);
    this.fashion = fashion;
    setFashionIsSet(true);
    this.theOneCharId = theOneCharId;
    setTheOneCharIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BusinessCardInfo(BusinessCardInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.charId = other.charId;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetBirthday()) {
      this.birthday = other.birthday;
    }
    this.sex = other.sex;
    if (other.isSetHeadIconId()) {
      this.headIconId = other.headIconId;
    }
    this.constellationId = other.constellationId;
    if (other.isSetLocation()) {
      this.location = other.location;
    }
    this.popularityTotal = other.popularityTotal;
    this.charmTotal = other.charmTotal;
    if (other.isSetMoodMessage()) {
      this.moodMessage = other.moodMessage;
    }
    if (other.isSetAvatarList()) {
      List<AvatarInfo> __this__avatarList = new ArrayList<AvatarInfo>();
      for (AvatarInfo other_element : other.avatarList) {
        __this__avatarList.add(new AvatarInfo(other_element));
      }
      this.avatarList = __this__avatarList;
    }
    this.vipDiamond = other.vipDiamond;
    this.level = other.level;
    this.dynamicCount = other.dynamicCount;
    this.dynamicWinCount = other.dynamicWinCount;
    this.traditionalCount = other.traditionalCount;
    this.traditionalWinCount = other.traditionalWinCount;
    this.battleCount = other.battleCount;
    this.battleWinCount = other.battleWinCount;
    if (other.isSetMoodMessageByVoice()) {
      this.moodMessageByVoice = other.moodMessageByVoice;
    }
    this.point = other.point;
    this.longitude = other.longitude;
    this.latitude = other.latitude;
    this.modelId = other.modelId;
    this.open = other.open;
    this.stature = other.stature;
    this.height = other.height;
    this.weight = other.weight;
    this.financialTotal = other.financialTotal;
    this.giftTotal = other.giftTotal;
    this.praiseTotal = other.praiseTotal;
    this.cupTotal = other.cupTotal;
    this.popularityLevel = other.popularityLevel;
    this.largesse = other.largesse;
    this.charm = other.charm;
    this.tagId = other.tagId;
    if (other.isSetGsId()) {
      this.gsId = other.gsId;
    }
    this.vipLevel = other.vipLevel;
    this.guildId = other.guildId;
    if (other.isSetGuildName()) {
      this.guildName = other.guildName;
    }
    this.vipExp = other.vipExp;
    this.skinColor = other.skinColor;
    this.starLights = other.starLights;
    this.starLightLvl = other.starLightLvl;
    this.exp = other.exp;
    this.popularityLvl = other.popularityLvl;
    if (other.isSetJewelryInfos()) {
      List<JewelryInfo> __this__jewelryInfos = new ArrayList<JewelryInfo>();
      for (JewelryInfo other_element : other.jewelryInfos) {
        __this__jewelryInfos.add(new JewelryInfo(other_element));
      }
      this.jewelryInfos = __this__jewelryInfos;
    }
    this.beAddedFriends = other.beAddedFriends;
    if (other.isSetRelationInfos()) {
      List<SimpleBusinessCardInfo> __this__relationInfos = new ArrayList<SimpleBusinessCardInfo>();
      for (SimpleBusinessCardInfo other_element : other.relationInfos) {
        __this__relationInfos.add(new SimpleBusinessCardInfo(other_element));
      }
      this.relationInfos = __this__relationInfos;
    }
    this.online = other.online;
    if (other.isSetCardFashionIds()) {
      Map<Byte,Long> __this__cardFashionIds = new HashMap<Byte,Long>();
      for (Map.Entry<Byte, Long> other_element : other.cardFashionIds.entrySet()) {

        Byte other_element_key = other_element.getKey();
        Long other_element_value = other_element.getValue();

        Byte __this__cardFashionIds_copy_key = other_element_key;

        Long __this__cardFashionIds_copy_value = other_element_value;

        __this__cardFashionIds.put(__this__cardFashionIds_copy_key, __this__cardFashionIds_copy_value);
      }
      this.cardFashionIds = __this__cardFashionIds;
    }
    if (other.isSetPutOnBadges()) {
      List<BadgeInfo> __this__putOnBadges = new ArrayList<BadgeInfo>();
      for (BadgeInfo other_element : other.putOnBadges) {
        __this__putOnBadges.add(new BadgeInfo(other_element));
      }
      this.putOnBadges = __this__putOnBadges;
    }
    this.fashion = other.fashion;
    this.theOneCharId = other.theOneCharId;
    this.userId = other.userId;
  }

  public BusinessCardInfo deepCopy() {
    return new BusinessCardInfo(this);
  }

  @Override
  public void clear() {
    setCharIdIsSet(false);
    this.charId = 0;
    this.name = null;
    this.birthday = null;
    setSexIsSet(false);
    this.sex = 0;
    this.headIconId = null;
    setConstellationIdIsSet(false);
    this.constellationId = 0;
    this.location = null;
    setPopularityTotalIsSet(false);
    this.popularityTotal = 0;
    setCharmTotalIsSet(false);
    this.charmTotal = 0;
    this.moodMessage = null;
    this.avatarList = null;
    setVipDiamondIsSet(false);
    this.vipDiamond = 0;
    setLevelIsSet(false);
    this.level = 0;
    setDynamicCountIsSet(false);
    this.dynamicCount = 0;
    setDynamicWinCountIsSet(false);
    this.dynamicWinCount = 0;
    setTraditionalCountIsSet(false);
    this.traditionalCount = 0;
    setTraditionalWinCountIsSet(false);
    this.traditionalWinCount = 0;
    setBattleCountIsSet(false);
    this.battleCount = 0;
    setBattleWinCountIsSet(false);
    this.battleWinCount = 0;
    this.moodMessageByVoice = null;
    setPointIsSet(false);
    this.point = 0;
    setLongitudeIsSet(false);
    this.longitude = 0.0;
    setLatitudeIsSet(false);
    this.latitude = 0.0;
    setModelIdIsSet(false);
    this.modelId = 0;
    setOpenIsSet(false);
    this.open = false;
    setStatureIsSet(false);
    this.stature = 0;
    setHeightIsSet(false);
    this.height = 0;
    setWeightIsSet(false);
    this.weight = 0;
    setFinancialTotalIsSet(false);
    this.financialTotal = 0;
    setGiftTotalIsSet(false);
    this.giftTotal = 0;
    setPraiseTotalIsSet(false);
    this.praiseTotal = 0;
    setCupTotalIsSet(false);
    this.cupTotal = 0;
    setPopularityLevelIsSet(false);
    this.popularityLevel = 0;
    setLargesseIsSet(false);
    this.largesse = 0;
    setCharmIsSet(false);
    this.charm = 0;
    setTagIdIsSet(false);
    this.tagId = 0;
    this.gsId = null;
    setVipLevelIsSet(false);
    this.vipLevel = 0;
    setGuildIdIsSet(false);
    this.guildId = 0;
    this.guildName = null;
    setVipExpIsSet(false);
    this.vipExp = 0;
    setSkinColorIsSet(false);
    this.skinColor = 0;
    setStarLightsIsSet(false);
    this.starLights = 0;
    setStarLightLvlIsSet(false);
    this.starLightLvl = 0;
    setExpIsSet(false);
    this.exp = 0;
    setPopularityLvlIsSet(false);
    this.popularityLvl = 0;
    this.jewelryInfos = null;
    setBeAddedFriendsIsSet(false);
    this.beAddedFriends = 0;
    this.relationInfos = null;
    setOnlineIsSet(false);
    this.online = false;
    this.cardFashionIds = null;
    this.putOnBadges = null;
    setFashionIsSet(false);
    this.fashion = 0;
    setTheOneCharIdIsSet(false);
    this.theOneCharId = 0;
    setUserIdIsSet(false);
    this.userId = 0;
  }

  public long getCharId() {
    return this.charId;
  }

  public BusinessCardInfo setCharId(long charId) {
    this.charId = charId;
    setCharIdIsSet(true);
    return this;
  }

  public void unsetCharId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHARID_ISSET_ID);
  }

  /** Returns true if field charId is set (has been assigned a value) and false otherwise */
  public boolean isSetCharId() {
    return EncodingUtils.testBit(__isset_bitfield, __CHARID_ISSET_ID);
  }

  public void setCharIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHARID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public BusinessCardInfo setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  /**
   * format yyyy-MM-dd HH:mm:ss timestamp accurate to the second. (1981-06-01 00:00:00)
   */
  public String getBirthday() {
    return this.birthday;
  }

  /**
   * format yyyy-MM-dd HH:mm:ss timestamp accurate to the second. (1981-06-01 00:00:00)
   */
  public BusinessCardInfo setBirthday(String birthday) {
    this.birthday = birthday;
    return this;
  }

  public void unsetBirthday() {
    this.birthday = null;
  }

  /** Returns true if field birthday is set (has been assigned a value) and false otherwise */
  public boolean isSetBirthday() {
    return this.birthday != null;
  }

  public void setBirthdayIsSet(boolean value) {
    if (!value) {
      this.birthday = null;
    }
  }

  public byte getSex() {
    return this.sex;
  }

  public BusinessCardInfo setSex(byte sex) {
    this.sex = sex;
    setSexIsSet(true);
    return this;
  }

  public void unsetSex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEX_ISSET_ID);
  }

  /** Returns true if field sex is set (has been assigned a value) and false otherwise */
  public boolean isSetSex() {
    return EncodingUtils.testBit(__isset_bitfield, __SEX_ISSET_ID);
  }

  public void setSexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEX_ISSET_ID, value);
  }

  public String getHeadIconId() {
    return this.headIconId;
  }

  public BusinessCardInfo setHeadIconId(String headIconId) {
    this.headIconId = headIconId;
    return this;
  }

  public void unsetHeadIconId() {
    this.headIconId = null;
  }

  /** Returns true if field headIconId is set (has been assigned a value) and false otherwise */
  public boolean isSetHeadIconId() {
    return this.headIconId != null;
  }

  public void setHeadIconIdIsSet(boolean value) {
    if (!value) {
      this.headIconId = null;
    }
  }

  /**
   * 星座索引
   */
  public byte getConstellationId() {
    return this.constellationId;
  }

  /**
   * 星座索引
   */
  public BusinessCardInfo setConstellationId(byte constellationId) {
    this.constellationId = constellationId;
    setConstellationIdIsSet(true);
    return this;
  }

  public void unsetConstellationId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONSTELLATIONID_ISSET_ID);
  }

  /** Returns true if field constellationId is set (has been assigned a value) and false otherwise */
  public boolean isSetConstellationId() {
    return EncodingUtils.testBit(__isset_bitfield, __CONSTELLATIONID_ISSET_ID);
  }

  public void setConstellationIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONSTELLATIONID_ISSET_ID, value);
  }

  public String getLocation() {
    return this.location;
  }

  public BusinessCardInfo setLocation(String location) {
    this.location = location;
    return this;
  }

  public void unsetLocation() {
    this.location = null;
  }

  /** Returns true if field location is set (has been assigned a value) and false otherwise */
  public boolean isSetLocation() {
    return this.location != null;
  }

  public void setLocationIsSet(boolean value) {
    if (!value) {
      this.location = null;
    }
  }

  public long getPopularityTotal() {
    return this.popularityTotal;
  }

  public BusinessCardInfo setPopularityTotal(long popularityTotal) {
    this.popularityTotal = popularityTotal;
    setPopularityTotalIsSet(true);
    return this;
  }

  public void unsetPopularityTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POPULARITYTOTAL_ISSET_ID);
  }

  /** Returns true if field popularityTotal is set (has been assigned a value) and false otherwise */
  public boolean isSetPopularityTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __POPULARITYTOTAL_ISSET_ID);
  }

  public void setPopularityTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POPULARITYTOTAL_ISSET_ID, value);
  }

  public long getCharmTotal() {
    return this.charmTotal;
  }

  public BusinessCardInfo setCharmTotal(long charmTotal) {
    this.charmTotal = charmTotal;
    setCharmTotalIsSet(true);
    return this;
  }

  public void unsetCharmTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHARMTOTAL_ISSET_ID);
  }

  /** Returns true if field charmTotal is set (has been assigned a value) and false otherwise */
  public boolean isSetCharmTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __CHARMTOTAL_ISSET_ID);
  }

  public void setCharmTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHARMTOTAL_ISSET_ID, value);
  }

  public String getMoodMessage() {
    return this.moodMessage;
  }

  public BusinessCardInfo setMoodMessage(String moodMessage) {
    this.moodMessage = moodMessage;
    return this;
  }

  public void unsetMoodMessage() {
    this.moodMessage = null;
  }

  /** Returns true if field moodMessage is set (has been assigned a value) and false otherwise */
  public boolean isSetMoodMessage() {
    return this.moodMessage != null;
  }

  public void setMoodMessageIsSet(boolean value) {
    if (!value) {
      this.moodMessage = null;
    }
  }

  public int getAvatarListSize() {
    return (this.avatarList == null) ? 0 : this.avatarList.size();
  }

  public java.util.Iterator<AvatarInfo> getAvatarListIterator() {
    return (this.avatarList == null) ? null : this.avatarList.iterator();
  }

  public void addToAvatarList(AvatarInfo elem) {
    if (this.avatarList == null) {
      this.avatarList = new ArrayList<AvatarInfo>();
    }
    this.avatarList.add(elem);
  }

  public List<AvatarInfo> getAvatarList() {
    return this.avatarList;
  }

  public BusinessCardInfo setAvatarList(List<AvatarInfo> avatarList) {
    this.avatarList = avatarList;
    return this;
  }

  public void unsetAvatarList() {
    this.avatarList = null;
  }

  /** Returns true if field avatarList is set (has been assigned a value) and false otherwise */
  public boolean isSetAvatarList() {
    return this.avatarList != null;
  }

  public void setAvatarListIsSet(boolean value) {
    if (!value) {
      this.avatarList = null;
    }
  }

  public int getVipDiamond() {
    return this.vipDiamond;
  }

  public BusinessCardInfo setVipDiamond(int vipDiamond) {
    this.vipDiamond = vipDiamond;
    setVipDiamondIsSet(true);
    return this;
  }

  public void unsetVipDiamond() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIPDIAMOND_ISSET_ID);
  }

  /** Returns true if field vipDiamond is set (has been assigned a value) and false otherwise */
  public boolean isSetVipDiamond() {
    return EncodingUtils.testBit(__isset_bitfield, __VIPDIAMOND_ISSET_ID);
  }

  public void setVipDiamondIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIPDIAMOND_ISSET_ID, value);
  }

  public int getLevel() {
    return this.level;
  }

  public BusinessCardInfo setLevel(int level) {
    this.level = level;
    setLevelIsSet(true);
    return this;
  }

  public void unsetLevel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEVEL_ISSET_ID);
  }

  /** Returns true if field level is set (has been assigned a value) and false otherwise */
  public boolean isSetLevel() {
    return EncodingUtils.testBit(__isset_bitfield, __LEVEL_ISSET_ID);
  }

  public void setLevelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEVEL_ISSET_ID, value);
  }

  public int getDynamicCount() {
    return this.dynamicCount;
  }

  public BusinessCardInfo setDynamicCount(int dynamicCount) {
    this.dynamicCount = dynamicCount;
    setDynamicCountIsSet(true);
    return this;
  }

  public void unsetDynamicCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DYNAMICCOUNT_ISSET_ID);
  }

  /** Returns true if field dynamicCount is set (has been assigned a value) and false otherwise */
  public boolean isSetDynamicCount() {
    return EncodingUtils.testBit(__isset_bitfield, __DYNAMICCOUNT_ISSET_ID);
  }

  public void setDynamicCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DYNAMICCOUNT_ISSET_ID, value);
  }

  public int getDynamicWinCount() {
    return this.dynamicWinCount;
  }

  public BusinessCardInfo setDynamicWinCount(int dynamicWinCount) {
    this.dynamicWinCount = dynamicWinCount;
    setDynamicWinCountIsSet(true);
    return this;
  }

  public void unsetDynamicWinCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DYNAMICWINCOUNT_ISSET_ID);
  }

  /** Returns true if field dynamicWinCount is set (has been assigned a value) and false otherwise */
  public boolean isSetDynamicWinCount() {
    return EncodingUtils.testBit(__isset_bitfield, __DYNAMICWINCOUNT_ISSET_ID);
  }

  public void setDynamicWinCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DYNAMICWINCOUNT_ISSET_ID, value);
  }

  public int getTraditionalCount() {
    return this.traditionalCount;
  }

  public BusinessCardInfo setTraditionalCount(int traditionalCount) {
    this.traditionalCount = traditionalCount;
    setTraditionalCountIsSet(true);
    return this;
  }

  public void unsetTraditionalCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRADITIONALCOUNT_ISSET_ID);
  }

  /** Returns true if field traditionalCount is set (has been assigned a value) and false otherwise */
  public boolean isSetTraditionalCount() {
    return EncodingUtils.testBit(__isset_bitfield, __TRADITIONALCOUNT_ISSET_ID);
  }

  public void setTraditionalCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRADITIONALCOUNT_ISSET_ID, value);
  }

  public int getTraditionalWinCount() {
    return this.traditionalWinCount;
  }

  public BusinessCardInfo setTraditionalWinCount(int traditionalWinCount) {
    this.traditionalWinCount = traditionalWinCount;
    setTraditionalWinCountIsSet(true);
    return this;
  }

  public void unsetTraditionalWinCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRADITIONALWINCOUNT_ISSET_ID);
  }

  /** Returns true if field traditionalWinCount is set (has been assigned a value) and false otherwise */
  public boolean isSetTraditionalWinCount() {
    return EncodingUtils.testBit(__isset_bitfield, __TRADITIONALWINCOUNT_ISSET_ID);
  }

  public void setTraditionalWinCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRADITIONALWINCOUNT_ISSET_ID, value);
  }

  public int getBattleCount() {
    return this.battleCount;
  }

  public BusinessCardInfo setBattleCount(int battleCount) {
    this.battleCount = battleCount;
    setBattleCountIsSet(true);
    return this;
  }

  public void unsetBattleCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BATTLECOUNT_ISSET_ID);
  }

  /** Returns true if field battleCount is set (has been assigned a value) and false otherwise */
  public boolean isSetBattleCount() {
    return EncodingUtils.testBit(__isset_bitfield, __BATTLECOUNT_ISSET_ID);
  }

  public void setBattleCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BATTLECOUNT_ISSET_ID, value);
  }

  public int getBattleWinCount() {
    return this.battleWinCount;
  }

  public BusinessCardInfo setBattleWinCount(int battleWinCount) {
    this.battleWinCount = battleWinCount;
    setBattleWinCountIsSet(true);
    return this;
  }

  public void unsetBattleWinCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BATTLEWINCOUNT_ISSET_ID);
  }

  /** Returns true if field battleWinCount is set (has been assigned a value) and false otherwise */
  public boolean isSetBattleWinCount() {
    return EncodingUtils.testBit(__isset_bitfield, __BATTLEWINCOUNT_ISSET_ID);
  }

  public void setBattleWinCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BATTLEWINCOUNT_ISSET_ID, value);
  }

  public String getMoodMessageByVoice() {
    return this.moodMessageByVoice;
  }

  public BusinessCardInfo setMoodMessageByVoice(String moodMessageByVoice) {
    this.moodMessageByVoice = moodMessageByVoice;
    return this;
  }

  public void unsetMoodMessageByVoice() {
    this.moodMessageByVoice = null;
  }

  /** Returns true if field moodMessageByVoice is set (has been assigned a value) and false otherwise */
  public boolean isSetMoodMessageByVoice() {
    return this.moodMessageByVoice != null;
  }

  public void setMoodMessageByVoiceIsSet(boolean value) {
    if (!value) {
      this.moodMessageByVoice = null;
    }
  }

  public int getPoint() {
    return this.point;
  }

  public BusinessCardInfo setPoint(int point) {
    this.point = point;
    setPointIsSet(true);
    return this;
  }

  public void unsetPoint() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POINT_ISSET_ID);
  }

  /** Returns true if field point is set (has been assigned a value) and false otherwise */
  public boolean isSetPoint() {
    return EncodingUtils.testBit(__isset_bitfield, __POINT_ISSET_ID);
  }

  public void setPointIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POINT_ISSET_ID, value);
  }

  public double getLongitude() {
    return this.longitude;
  }

  public BusinessCardInfo setLongitude(double longitude) {
    this.longitude = longitude;
    setLongitudeIsSet(true);
    return this;
  }

  public void unsetLongitude() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LONGITUDE_ISSET_ID);
  }

  /** Returns true if field longitude is set (has been assigned a value) and false otherwise */
  public boolean isSetLongitude() {
    return EncodingUtils.testBit(__isset_bitfield, __LONGITUDE_ISSET_ID);
  }

  public void setLongitudeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LONGITUDE_ISSET_ID, value);
  }

  public double getLatitude() {
    return this.latitude;
  }

  public BusinessCardInfo setLatitude(double latitude) {
    this.latitude = latitude;
    setLatitudeIsSet(true);
    return this;
  }

  public void unsetLatitude() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LATITUDE_ISSET_ID);
  }

  /** Returns true if field latitude is set (has been assigned a value) and false otherwise */
  public boolean isSetLatitude() {
    return EncodingUtils.testBit(__isset_bitfield, __LATITUDE_ISSET_ID);
  }

  public void setLatitudeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LATITUDE_ISSET_ID, value);
  }

  public byte getModelId() {
    return this.modelId;
  }

  public BusinessCardInfo setModelId(byte modelId) {
    this.modelId = modelId;
    setModelIdIsSet(true);
    return this;
  }

  public void unsetModelId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MODELID_ISSET_ID);
  }

  /** Returns true if field modelId is set (has been assigned a value) and false otherwise */
  public boolean isSetModelId() {
    return EncodingUtils.testBit(__isset_bitfield, __MODELID_ISSET_ID);
  }

  public void setModelIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MODELID_ISSET_ID, value);
  }

  public boolean isOpen() {
    return this.open;
  }

  public BusinessCardInfo setOpen(boolean open) {
    this.open = open;
    setOpenIsSet(true);
    return this;
  }

  public void unsetOpen() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPEN_ISSET_ID);
  }

  /** Returns true if field open is set (has been assigned a value) and false otherwise */
  public boolean isSetOpen() {
    return EncodingUtils.testBit(__isset_bitfield, __OPEN_ISSET_ID);
  }

  public void setOpenIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPEN_ISSET_ID, value);
  }

  public byte getStature() {
    return this.stature;
  }

  public BusinessCardInfo setStature(byte stature) {
    this.stature = stature;
    setStatureIsSet(true);
    return this;
  }

  public void unsetStature() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATURE_ISSET_ID);
  }

  /** Returns true if field stature is set (has been assigned a value) and false otherwise */
  public boolean isSetStature() {
    return EncodingUtils.testBit(__isset_bitfield, __STATURE_ISSET_ID);
  }

  public void setStatureIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATURE_ISSET_ID, value);
  }

  public int getHeight() {
    return this.height;
  }

  public BusinessCardInfo setHeight(int height) {
    this.height = height;
    setHeightIsSet(true);
    return this;
  }

  public void unsetHeight() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HEIGHT_ISSET_ID);
  }

  /** Returns true if field height is set (has been assigned a value) and false otherwise */
  public boolean isSetHeight() {
    return EncodingUtils.testBit(__isset_bitfield, __HEIGHT_ISSET_ID);
  }

  public void setHeightIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HEIGHT_ISSET_ID, value);
  }

  public int getWeight() {
    return this.weight;
  }

  public BusinessCardInfo setWeight(int weight) {
    this.weight = weight;
    setWeightIsSet(true);
    return this;
  }

  public void unsetWeight() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WEIGHT_ISSET_ID);
  }

  /** Returns true if field weight is set (has been assigned a value) and false otherwise */
  public boolean isSetWeight() {
    return EncodingUtils.testBit(__isset_bitfield, __WEIGHT_ISSET_ID);
  }

  public void setWeightIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WEIGHT_ISSET_ID, value);
  }

  public int getFinancialTotal() {
    return this.financialTotal;
  }

  public BusinessCardInfo setFinancialTotal(int financialTotal) {
    this.financialTotal = financialTotal;
    setFinancialTotalIsSet(true);
    return this;
  }

  public void unsetFinancialTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FINANCIALTOTAL_ISSET_ID);
  }

  /** Returns true if field financialTotal is set (has been assigned a value) and false otherwise */
  public boolean isSetFinancialTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __FINANCIALTOTAL_ISSET_ID);
  }

  public void setFinancialTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FINANCIALTOTAL_ISSET_ID, value);
  }

  public int getGiftTotal() {
    return this.giftTotal;
  }

  public BusinessCardInfo setGiftTotal(int giftTotal) {
    this.giftTotal = giftTotal;
    setGiftTotalIsSet(true);
    return this;
  }

  public void unsetGiftTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GIFTTOTAL_ISSET_ID);
  }

  /** Returns true if field giftTotal is set (has been assigned a value) and false otherwise */
  public boolean isSetGiftTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __GIFTTOTAL_ISSET_ID);
  }

  public void setGiftTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GIFTTOTAL_ISSET_ID, value);
  }

  public int getPraiseTotal() {
    return this.praiseTotal;
  }

  public BusinessCardInfo setPraiseTotal(int praiseTotal) {
    this.praiseTotal = praiseTotal;
    setPraiseTotalIsSet(true);
    return this;
  }

  public void unsetPraiseTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRAISETOTAL_ISSET_ID);
  }

  /** Returns true if field praiseTotal is set (has been assigned a value) and false otherwise */
  public boolean isSetPraiseTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __PRAISETOTAL_ISSET_ID);
  }

  public void setPraiseTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRAISETOTAL_ISSET_ID, value);
  }

  public int getCupTotal() {
    return this.cupTotal;
  }

  public BusinessCardInfo setCupTotal(int cupTotal) {
    this.cupTotal = cupTotal;
    setCupTotalIsSet(true);
    return this;
  }

  public void unsetCupTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CUPTOTAL_ISSET_ID);
  }

  /** Returns true if field cupTotal is set (has been assigned a value) and false otherwise */
  public boolean isSetCupTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __CUPTOTAL_ISSET_ID);
  }

  public void setCupTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CUPTOTAL_ISSET_ID, value);
  }

  public short getPopularityLevel() {
    return this.popularityLevel;
  }

  public BusinessCardInfo setPopularityLevel(short popularityLevel) {
    this.popularityLevel = popularityLevel;
    setPopularityLevelIsSet(true);
    return this;
  }

  public void unsetPopularityLevel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POPULARITYLEVEL_ISSET_ID);
  }

  /** Returns true if field popularityLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetPopularityLevel() {
    return EncodingUtils.testBit(__isset_bitfield, __POPULARITYLEVEL_ISSET_ID);
  }

  public void setPopularityLevelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POPULARITYLEVEL_ISSET_ID, value);
  }

  public int getLargesse() {
    return this.largesse;
  }

  public BusinessCardInfo setLargesse(int largesse) {
    this.largesse = largesse;
    setLargesseIsSet(true);
    return this;
  }

  public void unsetLargesse() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LARGESSE_ISSET_ID);
  }

  /** Returns true if field largesse is set (has been assigned a value) and false otherwise */
  public boolean isSetLargesse() {
    return EncodingUtils.testBit(__isset_bitfield, __LARGESSE_ISSET_ID);
  }

  public void setLargesseIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LARGESSE_ISSET_ID, value);
  }

  public int getCharm() {
    return this.charm;
  }

  public BusinessCardInfo setCharm(int charm) {
    this.charm = charm;
    setCharmIsSet(true);
    return this;
  }

  public void unsetCharm() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHARM_ISSET_ID);
  }

  /** Returns true if field charm is set (has been assigned a value) and false otherwise */
  public boolean isSetCharm() {
    return EncodingUtils.testBit(__isset_bitfield, __CHARM_ISSET_ID);
  }

  public void setCharmIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHARM_ISSET_ID, value);
  }

  public short getTagId() {
    return this.tagId;
  }

  public BusinessCardInfo setTagId(short tagId) {
    this.tagId = tagId;
    setTagIdIsSet(true);
    return this;
  }

  public void unsetTagId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TAGID_ISSET_ID);
  }

  /** Returns true if field tagId is set (has been assigned a value) and false otherwise */
  public boolean isSetTagId() {
    return EncodingUtils.testBit(__isset_bitfield, __TAGID_ISSET_ID);
  }

  public void setTagIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TAGID_ISSET_ID, value);
  }

  public String getGsId() {
    return this.gsId;
  }

  public BusinessCardInfo setGsId(String gsId) {
    this.gsId = gsId;
    return this;
  }

  public void unsetGsId() {
    this.gsId = null;
  }

  /** Returns true if field gsId is set (has been assigned a value) and false otherwise */
  public boolean isSetGsId() {
    return this.gsId != null;
  }

  public void setGsIdIsSet(boolean value) {
    if (!value) {
      this.gsId = null;
    }
  }

  public byte getVipLevel() {
    return this.vipLevel;
  }

  public BusinessCardInfo setVipLevel(byte vipLevel) {
    this.vipLevel = vipLevel;
    setVipLevelIsSet(true);
    return this;
  }

  public void unsetVipLevel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIPLEVEL_ISSET_ID);
  }

  /** Returns true if field vipLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetVipLevel() {
    return EncodingUtils.testBit(__isset_bitfield, __VIPLEVEL_ISSET_ID);
  }

  public void setVipLevelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIPLEVEL_ISSET_ID, value);
  }

  public long getGuildId() {
    return this.guildId;
  }

  public BusinessCardInfo setGuildId(long guildId) {
    this.guildId = guildId;
    setGuildIdIsSet(true);
    return this;
  }

  public void unsetGuildId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GUILDID_ISSET_ID);
  }

  /** Returns true if field guildId is set (has been assigned a value) and false otherwise */
  public boolean isSetGuildId() {
    return EncodingUtils.testBit(__isset_bitfield, __GUILDID_ISSET_ID);
  }

  public void setGuildIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GUILDID_ISSET_ID, value);
  }

  public String getGuildName() {
    return this.guildName;
  }

  public BusinessCardInfo setGuildName(String guildName) {
    this.guildName = guildName;
    return this;
  }

  public void unsetGuildName() {
    this.guildName = null;
  }

  /** Returns true if field guildName is set (has been assigned a value) and false otherwise */
  public boolean isSetGuildName() {
    return this.guildName != null;
  }

  public void setGuildNameIsSet(boolean value) {
    if (!value) {
      this.guildName = null;
    }
  }

  public int getVipExp() {
    return this.vipExp;
  }

  public BusinessCardInfo setVipExp(int vipExp) {
    this.vipExp = vipExp;
    setVipExpIsSet(true);
    return this;
  }

  public void unsetVipExp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIPEXP_ISSET_ID);
  }

  /** Returns true if field vipExp is set (has been assigned a value) and false otherwise */
  public boolean isSetVipExp() {
    return EncodingUtils.testBit(__isset_bitfield, __VIPEXP_ISSET_ID);
  }

  public void setVipExpIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIPEXP_ISSET_ID, value);
  }

  public int getSkinColor() {
    return this.skinColor;
  }

  public BusinessCardInfo setSkinColor(int skinColor) {
    this.skinColor = skinColor;
    setSkinColorIsSet(true);
    return this;
  }

  public void unsetSkinColor() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SKINCOLOR_ISSET_ID);
  }

  /** Returns true if field skinColor is set (has been assigned a value) and false otherwise */
  public boolean isSetSkinColor() {
    return EncodingUtils.testBit(__isset_bitfield, __SKINCOLOR_ISSET_ID);
  }

  public void setSkinColorIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SKINCOLOR_ISSET_ID, value);
  }

  public int getStarLights() {
    return this.starLights;
  }

  public BusinessCardInfo setStarLights(int starLights) {
    this.starLights = starLights;
    setStarLightsIsSet(true);
    return this;
  }

  public void unsetStarLights() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARLIGHTS_ISSET_ID);
  }

  /** Returns true if field starLights is set (has been assigned a value) and false otherwise */
  public boolean isSetStarLights() {
    return EncodingUtils.testBit(__isset_bitfield, __STARLIGHTS_ISSET_ID);
  }

  public void setStarLightsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARLIGHTS_ISSET_ID, value);
  }

  public int getStarLightLvl() {
    return this.starLightLvl;
  }

  public BusinessCardInfo setStarLightLvl(int starLightLvl) {
    this.starLightLvl = starLightLvl;
    setStarLightLvlIsSet(true);
    return this;
  }

  public void unsetStarLightLvl() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARLIGHTLVL_ISSET_ID);
  }

  /** Returns true if field starLightLvl is set (has been assigned a value) and false otherwise */
  public boolean isSetStarLightLvl() {
    return EncodingUtils.testBit(__isset_bitfield, __STARLIGHTLVL_ISSET_ID);
  }

  public void setStarLightLvlIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARLIGHTLVL_ISSET_ID, value);
  }

  public int getExp() {
    return this.exp;
  }

  public BusinessCardInfo setExp(int exp) {
    this.exp = exp;
    setExpIsSet(true);
    return this;
  }

  public void unsetExp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXP_ISSET_ID);
  }

  /** Returns true if field exp is set (has been assigned a value) and false otherwise */
  public boolean isSetExp() {
    return EncodingUtils.testBit(__isset_bitfield, __EXP_ISSET_ID);
  }

  public void setExpIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXP_ISSET_ID, value);
  }

  public long getPopularityLvl() {
    return this.popularityLvl;
  }

  public BusinessCardInfo setPopularityLvl(long popularityLvl) {
    this.popularityLvl = popularityLvl;
    setPopularityLvlIsSet(true);
    return this;
  }

  public void unsetPopularityLvl() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POPULARITYLVL_ISSET_ID);
  }

  /** Returns true if field popularityLvl is set (has been assigned a value) and false otherwise */
  public boolean isSetPopularityLvl() {
    return EncodingUtils.testBit(__isset_bitfield, __POPULARITYLVL_ISSET_ID);
  }

  public void setPopularityLvlIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POPULARITYLVL_ISSET_ID, value);
  }

  public int getJewelryInfosSize() {
    return (this.jewelryInfos == null) ? 0 : this.jewelryInfos.size();
  }

  public java.util.Iterator<JewelryInfo> getJewelryInfosIterator() {
    return (this.jewelryInfos == null) ? null : this.jewelryInfos.iterator();
  }

  public void addToJewelryInfos(JewelryInfo elem) {
    if (this.jewelryInfos == null) {
      this.jewelryInfos = new ArrayList<JewelryInfo>();
    }
    this.jewelryInfos.add(elem);
  }

  /**
   * 首饰盒简要信息
   */
  public List<JewelryInfo> getJewelryInfos() {
    return this.jewelryInfos;
  }

  /**
   * 首饰盒简要信息
   */
  public BusinessCardInfo setJewelryInfos(List<JewelryInfo> jewelryInfos) {
    this.jewelryInfos = jewelryInfos;
    return this;
  }

  public void unsetJewelryInfos() {
    this.jewelryInfos = null;
  }

  /** Returns true if field jewelryInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetJewelryInfos() {
    return this.jewelryInfos != null;
  }

  public void setJewelryInfosIsSet(boolean value) {
    if (!value) {
      this.jewelryInfos = null;
    }
  }

  /**
   * 被关注数量
   */
  public int getBeAddedFriends() {
    return this.beAddedFriends;
  }

  /**
   * 被关注数量
   */
  public BusinessCardInfo setBeAddedFriends(int beAddedFriends) {
    this.beAddedFriends = beAddedFriends;
    setBeAddedFriendsIsSet(true);
    return this;
  }

  public void unsetBeAddedFriends() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BEADDEDFRIENDS_ISSET_ID);
  }

  /** Returns true if field beAddedFriends is set (has been assigned a value) and false otherwise */
  public boolean isSetBeAddedFriends() {
    return EncodingUtils.testBit(__isset_bitfield, __BEADDEDFRIENDS_ISSET_ID);
  }

  public void setBeAddedFriendsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BEADDEDFRIENDS_ISSET_ID, value);
  }

  public int getRelationInfosSize() {
    return (this.relationInfos == null) ? 0 : this.relationInfos.size();
  }

  public java.util.Iterator<SimpleBusinessCardInfo> getRelationInfosIterator() {
    return (this.relationInfos == null) ? null : this.relationInfos.iterator();
  }

  public void addToRelationInfos(SimpleBusinessCardInfo elem) {
    if (this.relationInfos == null) {
      this.relationInfos = new ArrayList<SimpleBusinessCardInfo>();
    }
    this.relationInfos.add(elem);
  }

  /**
   * 社交关系简要信息
   */
  public List<SimpleBusinessCardInfo> getRelationInfos() {
    return this.relationInfos;
  }

  /**
   * 社交关系简要信息
   */
  public BusinessCardInfo setRelationInfos(List<SimpleBusinessCardInfo> relationInfos) {
    this.relationInfos = relationInfos;
    return this;
  }

  public void unsetRelationInfos() {
    this.relationInfos = null;
  }

  /** Returns true if field relationInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetRelationInfos() {
    return this.relationInfos != null;
  }

  public void setRelationInfosIsSet(boolean value) {
    if (!value) {
      this.relationInfos = null;
    }
  }

  public boolean isOnline() {
    return this.online;
  }

  public BusinessCardInfo setOnline(boolean online) {
    this.online = online;
    setOnlineIsSet(true);
    return this;
  }

  public void unsetOnline() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ONLINE_ISSET_ID);
  }

  /** Returns true if field online is set (has been assigned a value) and false otherwise */
  public boolean isSetOnline() {
    return EncodingUtils.testBit(__isset_bitfield, __ONLINE_ISSET_ID);
  }

  public void setOnlineIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ONLINE_ISSET_ID, value);
  }

  public int getCardFashionIdsSize() {
    return (this.cardFashionIds == null) ? 0 : this.cardFashionIds.size();
  }

  public void putToCardFashionIds(byte key, long val) {
    if (this.cardFashionIds == null) {
      this.cardFashionIds = new HashMap<Byte,Long>();
    }
    this.cardFashionIds.put(key, val);
  }

  /**
   * 使用中的名片时尚id, key:style val:高32位id | 低32位有效期
   */
  public Map<Byte,Long> getCardFashionIds() {
    return this.cardFashionIds;
  }

  /**
   * 使用中的名片时尚id, key:style val:高32位id | 低32位有效期
   */
  public BusinessCardInfo setCardFashionIds(Map<Byte,Long> cardFashionIds) {
    this.cardFashionIds = cardFashionIds;
    return this;
  }

  public void unsetCardFashionIds() {
    this.cardFashionIds = null;
  }

  /** Returns true if field cardFashionIds is set (has been assigned a value) and false otherwise */
  public boolean isSetCardFashionIds() {
    return this.cardFashionIds != null;
  }

  public void setCardFashionIdsIsSet(boolean value) {
    if (!value) {
      this.cardFashionIds = null;
    }
  }

  public int getPutOnBadgesSize() {
    return (this.putOnBadges == null) ? 0 : this.putOnBadges.size();
  }

  public java.util.Iterator<BadgeInfo> getPutOnBadgesIterator() {
    return (this.putOnBadges == null) ? null : this.putOnBadges.iterator();
  }

  public void addToPutOnBadges(BadgeInfo elem) {
    if (this.putOnBadges == null) {
      this.putOnBadges = new ArrayList<BadgeInfo>();
    }
    this.putOnBadges.add(elem);
  }

  /**
   * 佩戴的徽章
   */
  public List<BadgeInfo> getPutOnBadges() {
    return this.putOnBadges;
  }

  /**
   * 佩戴的徽章
   */
  public BusinessCardInfo setPutOnBadges(List<BadgeInfo> putOnBadges) {
    this.putOnBadges = putOnBadges;
    return this;
  }

  public void unsetPutOnBadges() {
    this.putOnBadges = null;
  }

  /** Returns true if field putOnBadges is set (has been assigned a value) and false otherwise */
  public boolean isSetPutOnBadges() {
    return this.putOnBadges != null;
  }

  public void setPutOnBadgesIsSet(boolean value) {
    if (!value) {
      this.putOnBadges = null;
    }
  }

  public int getFashion() {
    return this.fashion;
  }

  public BusinessCardInfo setFashion(int fashion) {
    this.fashion = fashion;
    setFashionIsSet(true);
    return this;
  }

  public void unsetFashion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FASHION_ISSET_ID);
  }

  /** Returns true if field fashion is set (has been assigned a value) and false otherwise */
  public boolean isSetFashion() {
    return EncodingUtils.testBit(__isset_bitfield, __FASHION_ISSET_ID);
  }

  public void setFashionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FASHION_ISSET_ID, value);
  }

  public long getTheOneCharId() {
    return this.theOneCharId;
  }

  public BusinessCardInfo setTheOneCharId(long theOneCharId) {
    this.theOneCharId = theOneCharId;
    setTheOneCharIdIsSet(true);
    return this;
  }

  public void unsetTheOneCharId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __THEONECHARID_ISSET_ID);
  }

  /** Returns true if field theOneCharId is set (has been assigned a value) and false otherwise */
  public boolean isSetTheOneCharId() {
    return EncodingUtils.testBit(__isset_bitfield, __THEONECHARID_ISSET_ID);
  }

  public void setTheOneCharIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __THEONECHARID_ISSET_ID, value);
  }

  /**
   * 用户id, 显示用
   */
  public long getUserId() {
    return this.userId;
  }

  /**
   * 用户id, 显示用
   */
  public BusinessCardInfo setUserId(long userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CHAR_ID:
      if (value == null) {
        unsetCharId();
      } else {
        setCharId((Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case BIRTHDAY:
      if (value == null) {
        unsetBirthday();
      } else {
        setBirthday((String)value);
      }
      break;

    case SEX:
      if (value == null) {
        unsetSex();
      } else {
        setSex((Byte)value);
      }
      break;

    case HEAD_ICON_ID:
      if (value == null) {
        unsetHeadIconId();
      } else {
        setHeadIconId((String)value);
      }
      break;

    case CONSTELLATION_ID:
      if (value == null) {
        unsetConstellationId();
      } else {
        setConstellationId((Byte)value);
      }
      break;

    case LOCATION:
      if (value == null) {
        unsetLocation();
      } else {
        setLocation((String)value);
      }
      break;

    case POPULARITY_TOTAL:
      if (value == null) {
        unsetPopularityTotal();
      } else {
        setPopularityTotal((Long)value);
      }
      break;

    case CHARM_TOTAL:
      if (value == null) {
        unsetCharmTotal();
      } else {
        setCharmTotal((Long)value);
      }
      break;

    case MOOD_MESSAGE:
      if (value == null) {
        unsetMoodMessage();
      } else {
        setMoodMessage((String)value);
      }
      break;

    case AVATAR_LIST:
      if (value == null) {
        unsetAvatarList();
      } else {
        setAvatarList((List<AvatarInfo>)value);
      }
      break;

    case VIP_DIAMOND:
      if (value == null) {
        unsetVipDiamond();
      } else {
        setVipDiamond((Integer)value);
      }
      break;

    case LEVEL:
      if (value == null) {
        unsetLevel();
      } else {
        setLevel((Integer)value);
      }
      break;

    case DYNAMIC_COUNT:
      if (value == null) {
        unsetDynamicCount();
      } else {
        setDynamicCount((Integer)value);
      }
      break;

    case DYNAMIC_WIN_COUNT:
      if (value == null) {
        unsetDynamicWinCount();
      } else {
        setDynamicWinCount((Integer)value);
      }
      break;

    case TRADITIONAL_COUNT:
      if (value == null) {
        unsetTraditionalCount();
      } else {
        setTraditionalCount((Integer)value);
      }
      break;

    case TRADITIONAL_WIN_COUNT:
      if (value == null) {
        unsetTraditionalWinCount();
      } else {
        setTraditionalWinCount((Integer)value);
      }
      break;

    case BATTLE_COUNT:
      if (value == null) {
        unsetBattleCount();
      } else {
        setBattleCount((Integer)value);
      }
      break;

    case BATTLE_WIN_COUNT:
      if (value == null) {
        unsetBattleWinCount();
      } else {
        setBattleWinCount((Integer)value);
      }
      break;

    case MOOD_MESSAGE_BY_VOICE:
      if (value == null) {
        unsetMoodMessageByVoice();
      } else {
        setMoodMessageByVoice((String)value);
      }
      break;

    case POINT:
      if (value == null) {
        unsetPoint();
      } else {
        setPoint((Integer)value);
      }
      break;

    case LONGITUDE:
      if (value == null) {
        unsetLongitude();
      } else {
        setLongitude((Double)value);
      }
      break;

    case LATITUDE:
      if (value == null) {
        unsetLatitude();
      } else {
        setLatitude((Double)value);
      }
      break;

    case MODEL_ID:
      if (value == null) {
        unsetModelId();
      } else {
        setModelId((Byte)value);
      }
      break;

    case OPEN:
      if (value == null) {
        unsetOpen();
      } else {
        setOpen((Boolean)value);
      }
      break;

    case STATURE:
      if (value == null) {
        unsetStature();
      } else {
        setStature((Byte)value);
      }
      break;

    case HEIGHT:
      if (value == null) {
        unsetHeight();
      } else {
        setHeight((Integer)value);
      }
      break;

    case WEIGHT:
      if (value == null) {
        unsetWeight();
      } else {
        setWeight((Integer)value);
      }
      break;

    case FINANCIAL_TOTAL:
      if (value == null) {
        unsetFinancialTotal();
      } else {
        setFinancialTotal((Integer)value);
      }
      break;

    case GIFT_TOTAL:
      if (value == null) {
        unsetGiftTotal();
      } else {
        setGiftTotal((Integer)value);
      }
      break;

    case PRAISE_TOTAL:
      if (value == null) {
        unsetPraiseTotal();
      } else {
        setPraiseTotal((Integer)value);
      }
      break;

    case CUP_TOTAL:
      if (value == null) {
        unsetCupTotal();
      } else {
        setCupTotal((Integer)value);
      }
      break;

    case POPULARITY_LEVEL:
      if (value == null) {
        unsetPopularityLevel();
      } else {
        setPopularityLevel((Short)value);
      }
      break;

    case LARGESSE:
      if (value == null) {
        unsetLargesse();
      } else {
        setLargesse((Integer)value);
      }
      break;

    case CHARM:
      if (value == null) {
        unsetCharm();
      } else {
        setCharm((Integer)value);
      }
      break;

    case TAG_ID:
      if (value == null) {
        unsetTagId();
      } else {
        setTagId((Short)value);
      }
      break;

    case GS_ID:
      if (value == null) {
        unsetGsId();
      } else {
        setGsId((String)value);
      }
      break;

    case VIP_LEVEL:
      if (value == null) {
        unsetVipLevel();
      } else {
        setVipLevel((Byte)value);
      }
      break;

    case GUILD_ID:
      if (value == null) {
        unsetGuildId();
      } else {
        setGuildId((Long)value);
      }
      break;

    case GUILD_NAME:
      if (value == null) {
        unsetGuildName();
      } else {
        setGuildName((String)value);
      }
      break;

    case VIP_EXP:
      if (value == null) {
        unsetVipExp();
      } else {
        setVipExp((Integer)value);
      }
      break;

    case SKIN_COLOR:
      if (value == null) {
        unsetSkinColor();
      } else {
        setSkinColor((Integer)value);
      }
      break;

    case STAR_LIGHTS:
      if (value == null) {
        unsetStarLights();
      } else {
        setStarLights((Integer)value);
      }
      break;

    case STAR_LIGHT_LVL:
      if (value == null) {
        unsetStarLightLvl();
      } else {
        setStarLightLvl((Integer)value);
      }
      break;

    case EXP:
      if (value == null) {
        unsetExp();
      } else {
        setExp((Integer)value);
      }
      break;

    case POPULARITY_LVL:
      if (value == null) {
        unsetPopularityLvl();
      } else {
        setPopularityLvl((Long)value);
      }
      break;

    case JEWELRY_INFOS:
      if (value == null) {
        unsetJewelryInfos();
      } else {
        setJewelryInfos((List<JewelryInfo>)value);
      }
      break;

    case BE_ADDED_FRIENDS:
      if (value == null) {
        unsetBeAddedFriends();
      } else {
        setBeAddedFriends((Integer)value);
      }
      break;

    case RELATION_INFOS:
      if (value == null) {
        unsetRelationInfos();
      } else {
        setRelationInfos((List<SimpleBusinessCardInfo>)value);
      }
      break;

    case ONLINE:
      if (value == null) {
        unsetOnline();
      } else {
        setOnline((Boolean)value);
      }
      break;

    case CARD_FASHION_IDS:
      if (value == null) {
        unsetCardFashionIds();
      } else {
        setCardFashionIds((Map<Byte,Long>)value);
      }
      break;

    case PUT_ON_BADGES:
      if (value == null) {
        unsetPutOnBadges();
      } else {
        setPutOnBadges((List<BadgeInfo>)value);
      }
      break;

    case FASHION:
      if (value == null) {
        unsetFashion();
      } else {
        setFashion((Integer)value);
      }
      break;

    case THE_ONE_CHAR_ID:
      if (value == null) {
        unsetTheOneCharId();
      } else {
        setTheOneCharId((Long)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CHAR_ID:
      return Long.valueOf(getCharId());

    case NAME:
      return getName();

    case BIRTHDAY:
      return getBirthday();

    case SEX:
      return Byte.valueOf(getSex());

    case HEAD_ICON_ID:
      return getHeadIconId();

    case CONSTELLATION_ID:
      return Byte.valueOf(getConstellationId());

    case LOCATION:
      return getLocation();

    case POPULARITY_TOTAL:
      return Long.valueOf(getPopularityTotal());

    case CHARM_TOTAL:
      return Long.valueOf(getCharmTotal());

    case MOOD_MESSAGE:
      return getMoodMessage();

    case AVATAR_LIST:
      return getAvatarList();

    case VIP_DIAMOND:
      return Integer.valueOf(getVipDiamond());

    case LEVEL:
      return Integer.valueOf(getLevel());

    case DYNAMIC_COUNT:
      return Integer.valueOf(getDynamicCount());

    case DYNAMIC_WIN_COUNT:
      return Integer.valueOf(getDynamicWinCount());

    case TRADITIONAL_COUNT:
      return Integer.valueOf(getTraditionalCount());

    case TRADITIONAL_WIN_COUNT:
      return Integer.valueOf(getTraditionalWinCount());

    case BATTLE_COUNT:
      return Integer.valueOf(getBattleCount());

    case BATTLE_WIN_COUNT:
      return Integer.valueOf(getBattleWinCount());

    case MOOD_MESSAGE_BY_VOICE:
      return getMoodMessageByVoice();

    case POINT:
      return Integer.valueOf(getPoint());

    case LONGITUDE:
      return Double.valueOf(getLongitude());

    case LATITUDE:
      return Double.valueOf(getLatitude());

    case MODEL_ID:
      return Byte.valueOf(getModelId());

    case OPEN:
      return Boolean.valueOf(isOpen());

    case STATURE:
      return Byte.valueOf(getStature());

    case HEIGHT:
      return Integer.valueOf(getHeight());

    case WEIGHT:
      return Integer.valueOf(getWeight());

    case FINANCIAL_TOTAL:
      return Integer.valueOf(getFinancialTotal());

    case GIFT_TOTAL:
      return Integer.valueOf(getGiftTotal());

    case PRAISE_TOTAL:
      return Integer.valueOf(getPraiseTotal());

    case CUP_TOTAL:
      return Integer.valueOf(getCupTotal());

    case POPULARITY_LEVEL:
      return Short.valueOf(getPopularityLevel());

    case LARGESSE:
      return Integer.valueOf(getLargesse());

    case CHARM:
      return Integer.valueOf(getCharm());

    case TAG_ID:
      return Short.valueOf(getTagId());

    case GS_ID:
      return getGsId();

    case VIP_LEVEL:
      return Byte.valueOf(getVipLevel());

    case GUILD_ID:
      return Long.valueOf(getGuildId());

    case GUILD_NAME:
      return getGuildName();

    case VIP_EXP:
      return Integer.valueOf(getVipExp());

    case SKIN_COLOR:
      return Integer.valueOf(getSkinColor());

    case STAR_LIGHTS:
      return Integer.valueOf(getStarLights());

    case STAR_LIGHT_LVL:
      return Integer.valueOf(getStarLightLvl());

    case EXP:
      return Integer.valueOf(getExp());

    case POPULARITY_LVL:
      return Long.valueOf(getPopularityLvl());

    case JEWELRY_INFOS:
      return getJewelryInfos();

    case BE_ADDED_FRIENDS:
      return Integer.valueOf(getBeAddedFriends());

    case RELATION_INFOS:
      return getRelationInfos();

    case ONLINE:
      return Boolean.valueOf(isOnline());

    case CARD_FASHION_IDS:
      return getCardFashionIds();

    case PUT_ON_BADGES:
      return getPutOnBadges();

    case FASHION:
      return Integer.valueOf(getFashion());

    case THE_ONE_CHAR_ID:
      return Long.valueOf(getTheOneCharId());

    case USER_ID:
      return Long.valueOf(getUserId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CHAR_ID:
      return isSetCharId();
    case NAME:
      return isSetName();
    case BIRTHDAY:
      return isSetBirthday();
    case SEX:
      return isSetSex();
    case HEAD_ICON_ID:
      return isSetHeadIconId();
    case CONSTELLATION_ID:
      return isSetConstellationId();
    case LOCATION:
      return isSetLocation();
    case POPULARITY_TOTAL:
      return isSetPopularityTotal();
    case CHARM_TOTAL:
      return isSetCharmTotal();
    case MOOD_MESSAGE:
      return isSetMoodMessage();
    case AVATAR_LIST:
      return isSetAvatarList();
    case VIP_DIAMOND:
      return isSetVipDiamond();
    case LEVEL:
      return isSetLevel();
    case DYNAMIC_COUNT:
      return isSetDynamicCount();
    case DYNAMIC_WIN_COUNT:
      return isSetDynamicWinCount();
    case TRADITIONAL_COUNT:
      return isSetTraditionalCount();
    case TRADITIONAL_WIN_COUNT:
      return isSetTraditionalWinCount();
    case BATTLE_COUNT:
      return isSetBattleCount();
    case BATTLE_WIN_COUNT:
      return isSetBattleWinCount();
    case MOOD_MESSAGE_BY_VOICE:
      return isSetMoodMessageByVoice();
    case POINT:
      return isSetPoint();
    case LONGITUDE:
      return isSetLongitude();
    case LATITUDE:
      return isSetLatitude();
    case MODEL_ID:
      return isSetModelId();
    case OPEN:
      return isSetOpen();
    case STATURE:
      return isSetStature();
    case HEIGHT:
      return isSetHeight();
    case WEIGHT:
      return isSetWeight();
    case FINANCIAL_TOTAL:
      return isSetFinancialTotal();
    case GIFT_TOTAL:
      return isSetGiftTotal();
    case PRAISE_TOTAL:
      return isSetPraiseTotal();
    case CUP_TOTAL:
      return isSetCupTotal();
    case POPULARITY_LEVEL:
      return isSetPopularityLevel();
    case LARGESSE:
      return isSetLargesse();
    case CHARM:
      return isSetCharm();
    case TAG_ID:
      return isSetTagId();
    case GS_ID:
      return isSetGsId();
    case VIP_LEVEL:
      return isSetVipLevel();
    case GUILD_ID:
      return isSetGuildId();
    case GUILD_NAME:
      return isSetGuildName();
    case VIP_EXP:
      return isSetVipExp();
    case SKIN_COLOR:
      return isSetSkinColor();
    case STAR_LIGHTS:
      return isSetStarLights();
    case STAR_LIGHT_LVL:
      return isSetStarLightLvl();
    case EXP:
      return isSetExp();
    case POPULARITY_LVL:
      return isSetPopularityLvl();
    case JEWELRY_INFOS:
      return isSetJewelryInfos();
    case BE_ADDED_FRIENDS:
      return isSetBeAddedFriends();
    case RELATION_INFOS:
      return isSetRelationInfos();
    case ONLINE:
      return isSetOnline();
    case CARD_FASHION_IDS:
      return isSetCardFashionIds();
    case PUT_ON_BADGES:
      return isSetPutOnBadges();
    case FASHION:
      return isSetFashion();
    case THE_ONE_CHAR_ID:
      return isSetTheOneCharId();
    case USER_ID:
      return isSetUserId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BusinessCardInfo)
      return this.equals((BusinessCardInfo)that);
    return false;
  }

  public boolean equals(BusinessCardInfo that) {
    if (that == null)
      return false;

    boolean this_present_charId = true;
    boolean that_present_charId = true;
    if (this_present_charId || that_present_charId) {
      if (!(this_present_charId && that_present_charId))
        return false;
      if (this.charId != that.charId)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_birthday = true && this.isSetBirthday();
    boolean that_present_birthday = true && that.isSetBirthday();
    if (this_present_birthday || that_present_birthday) {
      if (!(this_present_birthday && that_present_birthday))
        return false;
      if (!this.birthday.equals(that.birthday))
        return false;
    }

    boolean this_present_sex = true;
    boolean that_present_sex = true;
    if (this_present_sex || that_present_sex) {
      if (!(this_present_sex && that_present_sex))
        return false;
      if (this.sex != that.sex)
        return false;
    }

    boolean this_present_headIconId = true && this.isSetHeadIconId();
    boolean that_present_headIconId = true && that.isSetHeadIconId();
    if (this_present_headIconId || that_present_headIconId) {
      if (!(this_present_headIconId && that_present_headIconId))
        return false;
      if (!this.headIconId.equals(that.headIconId))
        return false;
    }

    boolean this_present_constellationId = true && this.isSetConstellationId();
    boolean that_present_constellationId = true && that.isSetConstellationId();
    if (this_present_constellationId || that_present_constellationId) {
      if (!(this_present_constellationId && that_present_constellationId))
        return false;
      if (this.constellationId != that.constellationId)
        return false;
    }

    boolean this_present_location = true && this.isSetLocation();
    boolean that_present_location = true && that.isSetLocation();
    if (this_present_location || that_present_location) {
      if (!(this_present_location && that_present_location))
        return false;
      if (!this.location.equals(that.location))
        return false;
    }

    boolean this_present_popularityTotal = true;
    boolean that_present_popularityTotal = true;
    if (this_present_popularityTotal || that_present_popularityTotal) {
      if (!(this_present_popularityTotal && that_present_popularityTotal))
        return false;
      if (this.popularityTotal != that.popularityTotal)
        return false;
    }

    boolean this_present_charmTotal = true;
    boolean that_present_charmTotal = true;
    if (this_present_charmTotal || that_present_charmTotal) {
      if (!(this_present_charmTotal && that_present_charmTotal))
        return false;
      if (this.charmTotal != that.charmTotal)
        return false;
    }

    boolean this_present_moodMessage = true && this.isSetMoodMessage();
    boolean that_present_moodMessage = true && that.isSetMoodMessage();
    if (this_present_moodMessage || that_present_moodMessage) {
      if (!(this_present_moodMessage && that_present_moodMessage))
        return false;
      if (!this.moodMessage.equals(that.moodMessage))
        return false;
    }

    boolean this_present_avatarList = true && this.isSetAvatarList();
    boolean that_present_avatarList = true && that.isSetAvatarList();
    if (this_present_avatarList || that_present_avatarList) {
      if (!(this_present_avatarList && that_present_avatarList))
        return false;
      if (!this.avatarList.equals(that.avatarList))
        return false;
    }

    boolean this_present_vipDiamond = true;
    boolean that_present_vipDiamond = true;
    if (this_present_vipDiamond || that_present_vipDiamond) {
      if (!(this_present_vipDiamond && that_present_vipDiamond))
        return false;
      if (this.vipDiamond != that.vipDiamond)
        return false;
    }

    boolean this_present_level = true;
    boolean that_present_level = true;
    if (this_present_level || that_present_level) {
      if (!(this_present_level && that_present_level))
        return false;
      if (this.level != that.level)
        return false;
    }

    boolean this_present_dynamicCount = true;
    boolean that_present_dynamicCount = true;
    if (this_present_dynamicCount || that_present_dynamicCount) {
      if (!(this_present_dynamicCount && that_present_dynamicCount))
        return false;
      if (this.dynamicCount != that.dynamicCount)
        return false;
    }

    boolean this_present_dynamicWinCount = true;
    boolean that_present_dynamicWinCount = true;
    if (this_present_dynamicWinCount || that_present_dynamicWinCount) {
      if (!(this_present_dynamicWinCount && that_present_dynamicWinCount))
        return false;
      if (this.dynamicWinCount != that.dynamicWinCount)
        return false;
    }

    boolean this_present_traditionalCount = true;
    boolean that_present_traditionalCount = true;
    if (this_present_traditionalCount || that_present_traditionalCount) {
      if (!(this_present_traditionalCount && that_present_traditionalCount))
        return false;
      if (this.traditionalCount != that.traditionalCount)
        return false;
    }

    boolean this_present_traditionalWinCount = true;
    boolean that_present_traditionalWinCount = true;
    if (this_present_traditionalWinCount || that_present_traditionalWinCount) {
      if (!(this_present_traditionalWinCount && that_present_traditionalWinCount))
        return false;
      if (this.traditionalWinCount != that.traditionalWinCount)
        return false;
    }

    boolean this_present_battleCount = true;
    boolean that_present_battleCount = true;
    if (this_present_battleCount || that_present_battleCount) {
      if (!(this_present_battleCount && that_present_battleCount))
        return false;
      if (this.battleCount != that.battleCount)
        return false;
    }

    boolean this_present_battleWinCount = true;
    boolean that_present_battleWinCount = true;
    if (this_present_battleWinCount || that_present_battleWinCount) {
      if (!(this_present_battleWinCount && that_present_battleWinCount))
        return false;
      if (this.battleWinCount != that.battleWinCount)
        return false;
    }

    boolean this_present_moodMessageByVoice = true && this.isSetMoodMessageByVoice();
    boolean that_present_moodMessageByVoice = true && that.isSetMoodMessageByVoice();
    if (this_present_moodMessageByVoice || that_present_moodMessageByVoice) {
      if (!(this_present_moodMessageByVoice && that_present_moodMessageByVoice))
        return false;
      if (!this.moodMessageByVoice.equals(that.moodMessageByVoice))
        return false;
    }

    boolean this_present_point = true && this.isSetPoint();
    boolean that_present_point = true && that.isSetPoint();
    if (this_present_point || that_present_point) {
      if (!(this_present_point && that_present_point))
        return false;
      if (this.point != that.point)
        return false;
    }

    boolean this_present_longitude = true && this.isSetLongitude();
    boolean that_present_longitude = true && that.isSetLongitude();
    if (this_present_longitude || that_present_longitude) {
      if (!(this_present_longitude && that_present_longitude))
        return false;
      if (this.longitude != that.longitude)
        return false;
    }

    boolean this_present_latitude = true && this.isSetLatitude();
    boolean that_present_latitude = true && that.isSetLatitude();
    if (this_present_latitude || that_present_latitude) {
      if (!(this_present_latitude && that_present_latitude))
        return false;
      if (this.latitude != that.latitude)
        return false;
    }

    boolean this_present_modelId = true && this.isSetModelId();
    boolean that_present_modelId = true && that.isSetModelId();
    if (this_present_modelId || that_present_modelId) {
      if (!(this_present_modelId && that_present_modelId))
        return false;
      if (this.modelId != that.modelId)
        return false;
    }

    boolean this_present_open = true && this.isSetOpen();
    boolean that_present_open = true && that.isSetOpen();
    if (this_present_open || that_present_open) {
      if (!(this_present_open && that_present_open))
        return false;
      if (this.open != that.open)
        return false;
    }

    boolean this_present_stature = true && this.isSetStature();
    boolean that_present_stature = true && that.isSetStature();
    if (this_present_stature || that_present_stature) {
      if (!(this_present_stature && that_present_stature))
        return false;
      if (this.stature != that.stature)
        return false;
    }

    boolean this_present_height = true && this.isSetHeight();
    boolean that_present_height = true && that.isSetHeight();
    if (this_present_height || that_present_height) {
      if (!(this_present_height && that_present_height))
        return false;
      if (this.height != that.height)
        return false;
    }

    boolean this_present_weight = true && this.isSetWeight();
    boolean that_present_weight = true && that.isSetWeight();
    if (this_present_weight || that_present_weight) {
      if (!(this_present_weight && that_present_weight))
        return false;
      if (this.weight != that.weight)
        return false;
    }

    boolean this_present_financialTotal = true;
    boolean that_present_financialTotal = true;
    if (this_present_financialTotal || that_present_financialTotal) {
      if (!(this_present_financialTotal && that_present_financialTotal))
        return false;
      if (this.financialTotal != that.financialTotal)
        return false;
    }

    boolean this_present_giftTotal = true;
    boolean that_present_giftTotal = true;
    if (this_present_giftTotal || that_present_giftTotal) {
      if (!(this_present_giftTotal && that_present_giftTotal))
        return false;
      if (this.giftTotal != that.giftTotal)
        return false;
    }

    boolean this_present_praiseTotal = true;
    boolean that_present_praiseTotal = true;
    if (this_present_praiseTotal || that_present_praiseTotal) {
      if (!(this_present_praiseTotal && that_present_praiseTotal))
        return false;
      if (this.praiseTotal != that.praiseTotal)
        return false;
    }

    boolean this_present_cupTotal = true;
    boolean that_present_cupTotal = true;
    if (this_present_cupTotal || that_present_cupTotal) {
      if (!(this_present_cupTotal && that_present_cupTotal))
        return false;
      if (this.cupTotal != that.cupTotal)
        return false;
    }

    boolean this_present_popularityLevel = true;
    boolean that_present_popularityLevel = true;
    if (this_present_popularityLevel || that_present_popularityLevel) {
      if (!(this_present_popularityLevel && that_present_popularityLevel))
        return false;
      if (this.popularityLevel != that.popularityLevel)
        return false;
    }

    boolean this_present_largesse = true;
    boolean that_present_largesse = true;
    if (this_present_largesse || that_present_largesse) {
      if (!(this_present_largesse && that_present_largesse))
        return false;
      if (this.largesse != that.largesse)
        return false;
    }

    boolean this_present_charm = true;
    boolean that_present_charm = true;
    if (this_present_charm || that_present_charm) {
      if (!(this_present_charm && that_present_charm))
        return false;
      if (this.charm != that.charm)
        return false;
    }

    boolean this_present_tagId = true && this.isSetTagId();
    boolean that_present_tagId = true && that.isSetTagId();
    if (this_present_tagId || that_present_tagId) {
      if (!(this_present_tagId && that_present_tagId))
        return false;
      if (this.tagId != that.tagId)
        return false;
    }

    boolean this_present_gsId = true && this.isSetGsId();
    boolean that_present_gsId = true && that.isSetGsId();
    if (this_present_gsId || that_present_gsId) {
      if (!(this_present_gsId && that_present_gsId))
        return false;
      if (!this.gsId.equals(that.gsId))
        return false;
    }

    boolean this_present_vipLevel = true;
    boolean that_present_vipLevel = true;
    if (this_present_vipLevel || that_present_vipLevel) {
      if (!(this_present_vipLevel && that_present_vipLevel))
        return false;
      if (this.vipLevel != that.vipLevel)
        return false;
    }

    boolean this_present_guildId = true;
    boolean that_present_guildId = true;
    if (this_present_guildId || that_present_guildId) {
      if (!(this_present_guildId && that_present_guildId))
        return false;
      if (this.guildId != that.guildId)
        return false;
    }

    boolean this_present_guildName = true && this.isSetGuildName();
    boolean that_present_guildName = true && that.isSetGuildName();
    if (this_present_guildName || that_present_guildName) {
      if (!(this_present_guildName && that_present_guildName))
        return false;
      if (!this.guildName.equals(that.guildName))
        return false;
    }

    boolean this_present_vipExp = true;
    boolean that_present_vipExp = true;
    if (this_present_vipExp || that_present_vipExp) {
      if (!(this_present_vipExp && that_present_vipExp))
        return false;
      if (this.vipExp != that.vipExp)
        return false;
    }

    boolean this_present_skinColor = true;
    boolean that_present_skinColor = true;
    if (this_present_skinColor || that_present_skinColor) {
      if (!(this_present_skinColor && that_present_skinColor))
        return false;
      if (this.skinColor != that.skinColor)
        return false;
    }

    boolean this_present_starLights = true;
    boolean that_present_starLights = true;
    if (this_present_starLights || that_present_starLights) {
      if (!(this_present_starLights && that_present_starLights))
        return false;
      if (this.starLights != that.starLights)
        return false;
    }

    boolean this_present_starLightLvl = true;
    boolean that_present_starLightLvl = true;
    if (this_present_starLightLvl || that_present_starLightLvl) {
      if (!(this_present_starLightLvl && that_present_starLightLvl))
        return false;
      if (this.starLightLvl != that.starLightLvl)
        return false;
    }

    boolean this_present_exp = true;
    boolean that_present_exp = true;
    if (this_present_exp || that_present_exp) {
      if (!(this_present_exp && that_present_exp))
        return false;
      if (this.exp != that.exp)
        return false;
    }

    boolean this_present_popularityLvl = true;
    boolean that_present_popularityLvl = true;
    if (this_present_popularityLvl || that_present_popularityLvl) {
      if (!(this_present_popularityLvl && that_present_popularityLvl))
        return false;
      if (this.popularityLvl != that.popularityLvl)
        return false;
    }

    boolean this_present_jewelryInfos = true && this.isSetJewelryInfos();
    boolean that_present_jewelryInfos = true && that.isSetJewelryInfos();
    if (this_present_jewelryInfos || that_present_jewelryInfos) {
      if (!(this_present_jewelryInfos && that_present_jewelryInfos))
        return false;
      if (!this.jewelryInfos.equals(that.jewelryInfos))
        return false;
    }

    boolean this_present_beAddedFriends = true;
    boolean that_present_beAddedFriends = true;
    if (this_present_beAddedFriends || that_present_beAddedFriends) {
      if (!(this_present_beAddedFriends && that_present_beAddedFriends))
        return false;
      if (this.beAddedFriends != that.beAddedFriends)
        return false;
    }

    boolean this_present_relationInfos = true && this.isSetRelationInfos();
    boolean that_present_relationInfos = true && that.isSetRelationInfos();
    if (this_present_relationInfos || that_present_relationInfos) {
      if (!(this_present_relationInfos && that_present_relationInfos))
        return false;
      if (!this.relationInfos.equals(that.relationInfos))
        return false;
    }

    boolean this_present_online = true;
    boolean that_present_online = true;
    if (this_present_online || that_present_online) {
      if (!(this_present_online && that_present_online))
        return false;
      if (this.online != that.online)
        return false;
    }

    boolean this_present_cardFashionIds = true && this.isSetCardFashionIds();
    boolean that_present_cardFashionIds = true && that.isSetCardFashionIds();
    if (this_present_cardFashionIds || that_present_cardFashionIds) {
      if (!(this_present_cardFashionIds && that_present_cardFashionIds))
        return false;
      if (!this.cardFashionIds.equals(that.cardFashionIds))
        return false;
    }

    boolean this_present_putOnBadges = true && this.isSetPutOnBadges();
    boolean that_present_putOnBadges = true && that.isSetPutOnBadges();
    if (this_present_putOnBadges || that_present_putOnBadges) {
      if (!(this_present_putOnBadges && that_present_putOnBadges))
        return false;
      if (!this.putOnBadges.equals(that.putOnBadges))
        return false;
    }

    boolean this_present_fashion = true;
    boolean that_present_fashion = true;
    if (this_present_fashion || that_present_fashion) {
      if (!(this_present_fashion && that_present_fashion))
        return false;
      if (this.fashion != that.fashion)
        return false;
    }

    boolean this_present_theOneCharId = true;
    boolean that_present_theOneCharId = true;
    if (this_present_theOneCharId || that_present_theOneCharId) {
      if (!(this_present_theOneCharId && that_present_theOneCharId))
        return false;
      if (this.theOneCharId != that.theOneCharId)
        return false;
    }

    boolean this_present_userId = true && this.isSetUserId();
    boolean that_present_userId = true && that.isSetUserId();
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(BusinessCardInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    BusinessCardInfo typedOther = (BusinessCardInfo)other;

    lastComparison = Boolean.valueOf(isSetCharId()).compareTo(typedOther.isSetCharId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCharId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.charId, typedOther.charId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBirthday()).compareTo(typedOther.isSetBirthday());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBirthday()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.birthday, typedOther.birthday);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSex()).compareTo(typedOther.isSetSex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sex, typedOther.sex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeadIconId()).compareTo(typedOther.isSetHeadIconId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeadIconId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.headIconId, typedOther.headIconId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConstellationId()).compareTo(typedOther.isSetConstellationId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConstellationId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.constellationId, typedOther.constellationId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocation()).compareTo(typedOther.isSetLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.location, typedOther.location);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPopularityTotal()).compareTo(typedOther.isSetPopularityTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPopularityTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.popularityTotal, typedOther.popularityTotal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCharmTotal()).compareTo(typedOther.isSetCharmTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCharmTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.charmTotal, typedOther.charmTotal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMoodMessage()).compareTo(typedOther.isSetMoodMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMoodMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.moodMessage, typedOther.moodMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAvatarList()).compareTo(typedOther.isSetAvatarList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvatarList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.avatarList, typedOther.avatarList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVipDiamond()).compareTo(typedOther.isSetVipDiamond());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVipDiamond()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vipDiamond, typedOther.vipDiamond);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLevel()).compareTo(typedOther.isSetLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.level, typedOther.level);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDynamicCount()).compareTo(typedOther.isSetDynamicCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDynamicCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dynamicCount, typedOther.dynamicCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDynamicWinCount()).compareTo(typedOther.isSetDynamicWinCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDynamicWinCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dynamicWinCount, typedOther.dynamicWinCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTraditionalCount()).compareTo(typedOther.isSetTraditionalCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTraditionalCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.traditionalCount, typedOther.traditionalCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTraditionalWinCount()).compareTo(typedOther.isSetTraditionalWinCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTraditionalWinCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.traditionalWinCount, typedOther.traditionalWinCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBattleCount()).compareTo(typedOther.isSetBattleCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBattleCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.battleCount, typedOther.battleCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBattleWinCount()).compareTo(typedOther.isSetBattleWinCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBattleWinCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.battleWinCount, typedOther.battleWinCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMoodMessageByVoice()).compareTo(typedOther.isSetMoodMessageByVoice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMoodMessageByVoice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.moodMessageByVoice, typedOther.moodMessageByVoice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoint()).compareTo(typedOther.isSetPoint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.point, typedOther.point);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLongitude()).compareTo(typedOther.isSetLongitude());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLongitude()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.longitude, typedOther.longitude);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLatitude()).compareTo(typedOther.isSetLatitude());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLatitude()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.latitude, typedOther.latitude);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetModelId()).compareTo(typedOther.isSetModelId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModelId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelId, typedOther.modelId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpen()).compareTo(typedOther.isSetOpen());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpen()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.open, typedOther.open);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStature()).compareTo(typedOther.isSetStature());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStature()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stature, typedOther.stature);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeight()).compareTo(typedOther.isSetHeight());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeight()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.height, typedOther.height);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWeight()).compareTo(typedOther.isSetWeight());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWeight()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.weight, typedOther.weight);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFinancialTotal()).compareTo(typedOther.isSetFinancialTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFinancialTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.financialTotal, typedOther.financialTotal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGiftTotal()).compareTo(typedOther.isSetGiftTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGiftTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.giftTotal, typedOther.giftTotal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPraiseTotal()).compareTo(typedOther.isSetPraiseTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPraiseTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.praiseTotal, typedOther.praiseTotal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCupTotal()).compareTo(typedOther.isSetCupTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCupTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cupTotal, typedOther.cupTotal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPopularityLevel()).compareTo(typedOther.isSetPopularityLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPopularityLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.popularityLevel, typedOther.popularityLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLargesse()).compareTo(typedOther.isSetLargesse());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLargesse()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.largesse, typedOther.largesse);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCharm()).compareTo(typedOther.isSetCharm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCharm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.charm, typedOther.charm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTagId()).compareTo(typedOther.isSetTagId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTagId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagId, typedOther.tagId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGsId()).compareTo(typedOther.isSetGsId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGsId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gsId, typedOther.gsId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVipLevel()).compareTo(typedOther.isSetVipLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVipLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vipLevel, typedOther.vipLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGuildId()).compareTo(typedOther.isSetGuildId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGuildId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.guildId, typedOther.guildId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGuildName()).compareTo(typedOther.isSetGuildName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGuildName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.guildName, typedOther.guildName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVipExp()).compareTo(typedOther.isSetVipExp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVipExp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vipExp, typedOther.vipExp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSkinColor()).compareTo(typedOther.isSetSkinColor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSkinColor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.skinColor, typedOther.skinColor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStarLights()).compareTo(typedOther.isSetStarLights());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStarLights()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.starLights, typedOther.starLights);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStarLightLvl()).compareTo(typedOther.isSetStarLightLvl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStarLightLvl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.starLightLvl, typedOther.starLightLvl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExp()).compareTo(typedOther.isSetExp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exp, typedOther.exp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPopularityLvl()).compareTo(typedOther.isSetPopularityLvl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPopularityLvl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.popularityLvl, typedOther.popularityLvl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJewelryInfos()).compareTo(typedOther.isSetJewelryInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJewelryInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jewelryInfos, typedOther.jewelryInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBeAddedFriends()).compareTo(typedOther.isSetBeAddedFriends());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBeAddedFriends()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.beAddedFriends, typedOther.beAddedFriends);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRelationInfos()).compareTo(typedOther.isSetRelationInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelationInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relationInfos, typedOther.relationInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOnline()).compareTo(typedOther.isSetOnline());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOnline()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.online, typedOther.online);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCardFashionIds()).compareTo(typedOther.isSetCardFashionIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCardFashionIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cardFashionIds, typedOther.cardFashionIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPutOnBadges()).compareTo(typedOther.isSetPutOnBadges());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPutOnBadges()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.putOnBadges, typedOther.putOnBadges);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFashion()).compareTo(typedOther.isSetFashion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFashion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fashion, typedOther.fashion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTheOneCharId()).compareTo(typedOther.isSetTheOneCharId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTheOneCharId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.theOneCharId, typedOther.theOneCharId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, typedOther.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BusinessCardInfo(");
    boolean first = true;

    sb.append("charId:");
    sb.append(this.charId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("birthday:");
    if (this.birthday == null) {
      sb.append("null");
    } else {
      sb.append(this.birthday);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sex:");
    sb.append(this.sex);
    first = false;
    if (!first) sb.append(", ");
    sb.append("headIconId:");
    if (this.headIconId == null) {
      sb.append("null");
    } else {
      sb.append(this.headIconId);
    }
    first = false;
    if (isSetConstellationId()) {
      if (!first) sb.append(", ");
      sb.append("constellationId:");
      sb.append(this.constellationId);
      first = false;
    }
    if (isSetLocation()) {
      if (!first) sb.append(", ");
      sb.append("location:");
      if (this.location == null) {
        sb.append("null");
      } else {
        sb.append(this.location);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("popularityTotal:");
    sb.append(this.popularityTotal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("charmTotal:");
    sb.append(this.charmTotal);
    first = false;
    if (isSetMoodMessage()) {
      if (!first) sb.append(", ");
      sb.append("moodMessage:");
      if (this.moodMessage == null) {
        sb.append("null");
      } else {
        sb.append(this.moodMessage);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("avatarList:");
    if (this.avatarList == null) {
      sb.append("null");
    } else {
      sb.append(this.avatarList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("vipDiamond:");
    sb.append(this.vipDiamond);
    first = false;
    if (!first) sb.append(", ");
    sb.append("level:");
    sb.append(this.level);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dynamicCount:");
    sb.append(this.dynamicCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dynamicWinCount:");
    sb.append(this.dynamicWinCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("traditionalCount:");
    sb.append(this.traditionalCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("traditionalWinCount:");
    sb.append(this.traditionalWinCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("battleCount:");
    sb.append(this.battleCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("battleWinCount:");
    sb.append(this.battleWinCount);
    first = false;
    if (isSetMoodMessageByVoice()) {
      if (!first) sb.append(", ");
      sb.append("moodMessageByVoice:");
      if (this.moodMessageByVoice == null) {
        sb.append("null");
      } else {
        sb.append(this.moodMessageByVoice);
      }
      first = false;
    }
    if (isSetPoint()) {
      if (!first) sb.append(", ");
      sb.append("point:");
      sb.append(this.point);
      first = false;
    }
    if (isSetLongitude()) {
      if (!first) sb.append(", ");
      sb.append("longitude:");
      sb.append(this.longitude);
      first = false;
    }
    if (isSetLatitude()) {
      if (!first) sb.append(", ");
      sb.append("latitude:");
      sb.append(this.latitude);
      first = false;
    }
    if (isSetModelId()) {
      if (!first) sb.append(", ");
      sb.append("modelId:");
      sb.append(this.modelId);
      first = false;
    }
    if (isSetOpen()) {
      if (!first) sb.append(", ");
      sb.append("open:");
      sb.append(this.open);
      first = false;
    }
    if (isSetStature()) {
      if (!first) sb.append(", ");
      sb.append("stature:");
      sb.append(this.stature);
      first = false;
    }
    if (isSetHeight()) {
      if (!first) sb.append(", ");
      sb.append("height:");
      sb.append(this.height);
      first = false;
    }
    if (isSetWeight()) {
      if (!first) sb.append(", ");
      sb.append("weight:");
      sb.append(this.weight);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("financialTotal:");
    sb.append(this.financialTotal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("giftTotal:");
    sb.append(this.giftTotal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("praiseTotal:");
    sb.append(this.praiseTotal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cupTotal:");
    sb.append(this.cupTotal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("popularityLevel:");
    sb.append(this.popularityLevel);
    first = false;
    if (!first) sb.append(", ");
    sb.append("largesse:");
    sb.append(this.largesse);
    first = false;
    if (!first) sb.append(", ");
    sb.append("charm:");
    sb.append(this.charm);
    first = false;
    if (isSetTagId()) {
      if (!first) sb.append(", ");
      sb.append("tagId:");
      sb.append(this.tagId);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("gsId:");
    if (this.gsId == null) {
      sb.append("null");
    } else {
      sb.append(this.gsId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("vipLevel:");
    sb.append(this.vipLevel);
    first = false;
    if (!first) sb.append(", ");
    sb.append("guildId:");
    sb.append(this.guildId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("guildName:");
    if (this.guildName == null) {
      sb.append("null");
    } else {
      sb.append(this.guildName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("vipExp:");
    sb.append(this.vipExp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("skinColor:");
    sb.append(this.skinColor);
    first = false;
    if (!first) sb.append(", ");
    sb.append("starLights:");
    sb.append(this.starLights);
    first = false;
    if (!first) sb.append(", ");
    sb.append("starLightLvl:");
    sb.append(this.starLightLvl);
    first = false;
    if (!first) sb.append(", ");
    sb.append("exp:");
    sb.append(this.exp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("popularityLvl:");
    sb.append(this.popularityLvl);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jewelryInfos:");
    if (this.jewelryInfos == null) {
      sb.append("null");
    } else {
      sb.append(this.jewelryInfos);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("beAddedFriends:");
    sb.append(this.beAddedFriends);
    first = false;
    if (!first) sb.append(", ");
    sb.append("relationInfos:");
    if (this.relationInfos == null) {
      sb.append("null");
    } else {
      sb.append(this.relationInfos);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("online:");
    sb.append(this.online);
    first = false;
    if (isSetCardFashionIds()) {
      if (!first) sb.append(", ");
      sb.append("cardFashionIds:");
      if (this.cardFashionIds == null) {
        sb.append("null");
      } else {
        sb.append(this.cardFashionIds);
      }
      first = false;
    }
    if (isSetPutOnBadges()) {
      if (!first) sb.append(", ");
      sb.append("putOnBadges:");
      if (this.putOnBadges == null) {
        sb.append("null");
      } else {
        sb.append(this.putOnBadges);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("fashion:");
    sb.append(this.fashion);
    first = false;
    if (!first) sb.append(", ");
    sb.append("theOneCharId:");
    sb.append(this.theOneCharId);
    first = false;
    if (isSetUserId()) {
      if (!first) sb.append(", ");
      sb.append("userId:");
      sb.append(this.userId);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BusinessCardInfoStandardSchemeFactory implements SchemeFactory {
    public BusinessCardInfoStandardScheme getScheme() {
      return new BusinessCardInfoStandardScheme();
    }
  }

  private static class BusinessCardInfoStandardScheme extends StandardScheme<BusinessCardInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BusinessCardInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CHAR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.charId = iprot.readI64();
              struct.setCharIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BIRTHDAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.birthday = iprot.readString();
              struct.setBirthdayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SEX
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.sex = iprot.readByte();
              struct.setSexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // HEAD_ICON_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.headIconId = iprot.readString();
              struct.setHeadIconIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CONSTELLATION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.constellationId = iprot.readByte();
              struct.setConstellationIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.location = iprot.readString();
              struct.setLocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // POPULARITY_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.popularityTotal = iprot.readI64();
              struct.setPopularityTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CHARM_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.charmTotal = iprot.readI64();
              struct.setCharmTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MOOD_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.moodMessage = iprot.readString();
              struct.setMoodMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // AVATAR_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list214 = iprot.readListBegin();
                struct.avatarList = new ArrayList<AvatarInfo>(_list214.size);
                for (int _i215 = 0; _i215 < _list214.size; ++_i215)
                {
                  AvatarInfo _elem216; // required
                  _elem216 = new AvatarInfo();
                  _elem216.read(iprot);
                  struct.avatarList.add(_elem216);
                }
                iprot.readListEnd();
              }
              struct.setAvatarListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // VIP_DIAMOND
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.vipDiamond = iprot.readI32();
              struct.setVipDiamondIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.level = iprot.readI32();
              struct.setLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // DYNAMIC_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dynamicCount = iprot.readI32();
              struct.setDynamicCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // DYNAMIC_WIN_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dynamicWinCount = iprot.readI32();
              struct.setDynamicWinCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // TRADITIONAL_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.traditionalCount = iprot.readI32();
              struct.setTraditionalCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // TRADITIONAL_WIN_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.traditionalWinCount = iprot.readI32();
              struct.setTraditionalWinCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // BATTLE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.battleCount = iprot.readI32();
              struct.setBattleCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // BATTLE_WIN_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.battleWinCount = iprot.readI32();
              struct.setBattleWinCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // MOOD_MESSAGE_BY_VOICE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.moodMessageByVoice = iprot.readString();
              struct.setMoodMessageByVoiceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // POINT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.point = iprot.readI32();
              struct.setPointIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // LONGITUDE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.longitude = iprot.readDouble();
              struct.setLongitudeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // LATITUDE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.latitude = iprot.readDouble();
              struct.setLatitudeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // MODEL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.modelId = iprot.readByte();
              struct.setModelIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // OPEN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.open = iprot.readBool();
              struct.setOpenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // STATURE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.stature = iprot.readByte();
              struct.setStatureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // HEIGHT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.height = iprot.readI32();
              struct.setHeightIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // WEIGHT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.weight = iprot.readI32();
              struct.setWeightIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // FINANCIAL_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.financialTotal = iprot.readI32();
              struct.setFinancialTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // GIFT_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.giftTotal = iprot.readI32();
              struct.setGiftTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // PRAISE_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.praiseTotal = iprot.readI32();
              struct.setPraiseTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // CUP_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cupTotal = iprot.readI32();
              struct.setCupTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // POPULARITY_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.popularityLevel = iprot.readI16();
              struct.setPopularityLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 42: // LARGESSE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.largesse = iprot.readI32();
              struct.setLargesseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 43: // CHARM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.charm = iprot.readI32();
              struct.setCharmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 44: // TAG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.tagId = iprot.readI16();
              struct.setTagIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 45: // GS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.gsId = iprot.readString();
              struct.setGsIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 46: // VIP_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.vipLevel = iprot.readByte();
              struct.setVipLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 47: // GUILD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.guildId = iprot.readI64();
              struct.setGuildIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 48: // GUILD_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.guildName = iprot.readString();
              struct.setGuildNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 49: // VIP_EXP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.vipExp = iprot.readI32();
              struct.setVipExpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 50: // SKIN_COLOR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.skinColor = iprot.readI32();
              struct.setSkinColorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 51: // STAR_LIGHTS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.starLights = iprot.readI32();
              struct.setStarLightsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 52: // STAR_LIGHT_LVL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.starLightLvl = iprot.readI32();
              struct.setStarLightLvlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 53: // EXP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.exp = iprot.readI32();
              struct.setExpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 54: // POPULARITY_LVL
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.popularityLvl = iprot.readI64();
              struct.setPopularityLvlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 55: // JEWELRY_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list217 = iprot.readListBegin();
                struct.jewelryInfos = new ArrayList<JewelryInfo>(_list217.size);
                for (int _i218 = 0; _i218 < _list217.size; ++_i218)
                {
                  JewelryInfo _elem219; // required
                  _elem219 = new JewelryInfo();
                  _elem219.read(iprot);
                  struct.jewelryInfos.add(_elem219);
                }
                iprot.readListEnd();
              }
              struct.setJewelryInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 56: // BE_ADDED_FRIENDS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.beAddedFriends = iprot.readI32();
              struct.setBeAddedFriendsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 57: // RELATION_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list220 = iprot.readListBegin();
                struct.relationInfos = new ArrayList<SimpleBusinessCardInfo>(_list220.size);
                for (int _i221 = 0; _i221 < _list220.size; ++_i221)
                {
                  SimpleBusinessCardInfo _elem222; // required
                  _elem222 = new SimpleBusinessCardInfo();
                  _elem222.read(iprot);
                  struct.relationInfos.add(_elem222);
                }
                iprot.readListEnd();
              }
              struct.setRelationInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 58: // ONLINE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.online = iprot.readBool();
              struct.setOnlineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 59: // CARD_FASHION_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map223 = iprot.readMapBegin();
                struct.cardFashionIds = new HashMap<Byte,Long>(2*_map223.size);
                for (int _i224 = 0; _i224 < _map223.size; ++_i224)
                {
                  byte _key225; // required
                  long _val226; // required
                  _key225 = iprot.readByte();
                  _val226 = iprot.readI64();
                  struct.cardFashionIds.put(_key225, _val226);
                }
                iprot.readMapEnd();
              }
              struct.setCardFashionIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 60: // PUT_ON_BADGES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list227 = iprot.readListBegin();
                struct.putOnBadges = new ArrayList<BadgeInfo>(_list227.size);
                for (int _i228 = 0; _i228 < _list227.size; ++_i228)
                {
                  BadgeInfo _elem229; // required
                  _elem229 = new BadgeInfo();
                  _elem229.read(iprot);
                  struct.putOnBadges.add(_elem229);
                }
                iprot.readListEnd();
              }
              struct.setPutOnBadgesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 61: // FASHION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fashion = iprot.readI32();
              struct.setFashionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 62: // THE_ONE_CHAR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.theOneCharId = iprot.readI64();
              struct.setTheOneCharIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 63: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.userId = iprot.readI64();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BusinessCardInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CHAR_ID_FIELD_DESC);
      oprot.writeI64(struct.charId);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.birthday != null) {
        oprot.writeFieldBegin(BIRTHDAY_FIELD_DESC);
        oprot.writeString(struct.birthday);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SEX_FIELD_DESC);
      oprot.writeByte(struct.sex);
      oprot.writeFieldEnd();
      if (struct.headIconId != null) {
        oprot.writeFieldBegin(HEAD_ICON_ID_FIELD_DESC);
        oprot.writeString(struct.headIconId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetConstellationId()) {
        oprot.writeFieldBegin(CONSTELLATION_ID_FIELD_DESC);
        oprot.writeByte(struct.constellationId);
        oprot.writeFieldEnd();
      }
      if (struct.location != null) {
        if (struct.isSetLocation()) {
          oprot.writeFieldBegin(LOCATION_FIELD_DESC);
          oprot.writeString(struct.location);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(POPULARITY_TOTAL_FIELD_DESC);
      oprot.writeI64(struct.popularityTotal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CHARM_TOTAL_FIELD_DESC);
      oprot.writeI64(struct.charmTotal);
      oprot.writeFieldEnd();
      if (struct.moodMessage != null) {
        if (struct.isSetMoodMessage()) {
          oprot.writeFieldBegin(MOOD_MESSAGE_FIELD_DESC);
          oprot.writeString(struct.moodMessage);
          oprot.writeFieldEnd();
        }
      }
      if (struct.avatarList != null) {
        oprot.writeFieldBegin(AVATAR_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.avatarList.size()));
          for (AvatarInfo _iter230 : struct.avatarList)
          {
            _iter230.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(VIP_DIAMOND_FIELD_DESC);
      oprot.writeI32(struct.vipDiamond);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LEVEL_FIELD_DESC);
      oprot.writeI32(struct.level);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DYNAMIC_COUNT_FIELD_DESC);
      oprot.writeI32(struct.dynamicCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DYNAMIC_WIN_COUNT_FIELD_DESC);
      oprot.writeI32(struct.dynamicWinCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TRADITIONAL_COUNT_FIELD_DESC);
      oprot.writeI32(struct.traditionalCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TRADITIONAL_WIN_COUNT_FIELD_DESC);
      oprot.writeI32(struct.traditionalWinCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BATTLE_COUNT_FIELD_DESC);
      oprot.writeI32(struct.battleCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BATTLE_WIN_COUNT_FIELD_DESC);
      oprot.writeI32(struct.battleWinCount);
      oprot.writeFieldEnd();
      if (struct.moodMessageByVoice != null) {
        if (struct.isSetMoodMessageByVoice()) {
          oprot.writeFieldBegin(MOOD_MESSAGE_BY_VOICE_FIELD_DESC);
          oprot.writeString(struct.moodMessageByVoice);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPoint()) {
        oprot.writeFieldBegin(POINT_FIELD_DESC);
        oprot.writeI32(struct.point);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLongitude()) {
        oprot.writeFieldBegin(LONGITUDE_FIELD_DESC);
        oprot.writeDouble(struct.longitude);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLatitude()) {
        oprot.writeFieldBegin(LATITUDE_FIELD_DESC);
        oprot.writeDouble(struct.latitude);
        oprot.writeFieldEnd();
      }
      if (struct.isSetModelId()) {
        oprot.writeFieldBegin(MODEL_ID_FIELD_DESC);
        oprot.writeByte(struct.modelId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOpen()) {
        oprot.writeFieldBegin(OPEN_FIELD_DESC);
        oprot.writeBool(struct.open);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStature()) {
        oprot.writeFieldBegin(STATURE_FIELD_DESC);
        oprot.writeByte(struct.stature);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHeight()) {
        oprot.writeFieldBegin(HEIGHT_FIELD_DESC);
        oprot.writeI32(struct.height);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWeight()) {
        oprot.writeFieldBegin(WEIGHT_FIELD_DESC);
        oprot.writeI32(struct.weight);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FINANCIAL_TOTAL_FIELD_DESC);
      oprot.writeI32(struct.financialTotal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GIFT_TOTAL_FIELD_DESC);
      oprot.writeI32(struct.giftTotal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRAISE_TOTAL_FIELD_DESC);
      oprot.writeI32(struct.praiseTotal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CUP_TOTAL_FIELD_DESC);
      oprot.writeI32(struct.cupTotal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POPULARITY_LEVEL_FIELD_DESC);
      oprot.writeI16(struct.popularityLevel);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LARGESSE_FIELD_DESC);
      oprot.writeI32(struct.largesse);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CHARM_FIELD_DESC);
      oprot.writeI32(struct.charm);
      oprot.writeFieldEnd();
      if (struct.isSetTagId()) {
        oprot.writeFieldBegin(TAG_ID_FIELD_DESC);
        oprot.writeI16(struct.tagId);
        oprot.writeFieldEnd();
      }
      if (struct.gsId != null) {
        oprot.writeFieldBegin(GS_ID_FIELD_DESC);
        oprot.writeString(struct.gsId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(VIP_LEVEL_FIELD_DESC);
      oprot.writeByte(struct.vipLevel);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GUILD_ID_FIELD_DESC);
      oprot.writeI64(struct.guildId);
      oprot.writeFieldEnd();
      if (struct.guildName != null) {
        oprot.writeFieldBegin(GUILD_NAME_FIELD_DESC);
        oprot.writeString(struct.guildName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(VIP_EXP_FIELD_DESC);
      oprot.writeI32(struct.vipExp);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SKIN_COLOR_FIELD_DESC);
      oprot.writeI32(struct.skinColor);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STAR_LIGHTS_FIELD_DESC);
      oprot.writeI32(struct.starLights);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STAR_LIGHT_LVL_FIELD_DESC);
      oprot.writeI32(struct.starLightLvl);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXP_FIELD_DESC);
      oprot.writeI32(struct.exp);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POPULARITY_LVL_FIELD_DESC);
      oprot.writeI64(struct.popularityLvl);
      oprot.writeFieldEnd();
      if (struct.jewelryInfos != null) {
        oprot.writeFieldBegin(JEWELRY_INFOS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.jewelryInfos.size()));
          for (JewelryInfo _iter231 : struct.jewelryInfos)
          {
            _iter231.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BE_ADDED_FRIENDS_FIELD_DESC);
      oprot.writeI32(struct.beAddedFriends);
      oprot.writeFieldEnd();
      if (struct.relationInfos != null) {
        oprot.writeFieldBegin(RELATION_INFOS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.relationInfos.size()));
          for (SimpleBusinessCardInfo _iter232 : struct.relationInfos)
          {
            _iter232.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ONLINE_FIELD_DESC);
      oprot.writeBool(struct.online);
      oprot.writeFieldEnd();
      if (struct.cardFashionIds != null) {
        if (struct.isSetCardFashionIds()) {
          oprot.writeFieldBegin(CARD_FASHION_IDS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.BYTE, org.apache.thrift.protocol.TType.I64, struct.cardFashionIds.size()));
            for (Map.Entry<Byte, Long> _iter233 : struct.cardFashionIds.entrySet())
            {
              oprot.writeByte(_iter233.getKey());
              oprot.writeI64(_iter233.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.putOnBadges != null) {
        if (struct.isSetPutOnBadges()) {
          oprot.writeFieldBegin(PUT_ON_BADGES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.putOnBadges.size()));
            for (BadgeInfo _iter234 : struct.putOnBadges)
            {
              _iter234.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(FASHION_FIELD_DESC);
      oprot.writeI32(struct.fashion);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(THE_ONE_CHAR_ID_FIELD_DESC);
      oprot.writeI64(struct.theOneCharId);
      oprot.writeFieldEnd();
      if (struct.isSetUserId()) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI64(struct.userId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BusinessCardInfoTupleSchemeFactory implements SchemeFactory {
    public BusinessCardInfoTupleScheme getScheme() {
      return new BusinessCardInfoTupleScheme();
    }
  }

  private static class BusinessCardInfoTupleScheme extends TupleScheme<BusinessCardInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BusinessCardInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCharId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetBirthday()) {
        optionals.set(2);
      }
      if (struct.isSetSex()) {
        optionals.set(3);
      }
      if (struct.isSetHeadIconId()) {
        optionals.set(4);
      }
      if (struct.isSetConstellationId()) {
        optionals.set(5);
      }
      if (struct.isSetLocation()) {
        optionals.set(6);
      }
      if (struct.isSetPopularityTotal()) {
        optionals.set(7);
      }
      if (struct.isSetCharmTotal()) {
        optionals.set(8);
      }
      if (struct.isSetMoodMessage()) {
        optionals.set(9);
      }
      if (struct.isSetAvatarList()) {
        optionals.set(10);
      }
      if (struct.isSetVipDiamond()) {
        optionals.set(11);
      }
      if (struct.isSetLevel()) {
        optionals.set(12);
      }
      if (struct.isSetDynamicCount()) {
        optionals.set(13);
      }
      if (struct.isSetDynamicWinCount()) {
        optionals.set(14);
      }
      if (struct.isSetTraditionalCount()) {
        optionals.set(15);
      }
      if (struct.isSetTraditionalWinCount()) {
        optionals.set(16);
      }
      if (struct.isSetBattleCount()) {
        optionals.set(17);
      }
      if (struct.isSetBattleWinCount()) {
        optionals.set(18);
      }
      if (struct.isSetMoodMessageByVoice()) {
        optionals.set(19);
      }
      if (struct.isSetPoint()) {
        optionals.set(20);
      }
      if (struct.isSetLongitude()) {
        optionals.set(21);
      }
      if (struct.isSetLatitude()) {
        optionals.set(22);
      }
      if (struct.isSetModelId()) {
        optionals.set(23);
      }
      if (struct.isSetOpen()) {
        optionals.set(24);
      }
      if (struct.isSetStature()) {
        optionals.set(25);
      }
      if (struct.isSetHeight()) {
        optionals.set(26);
      }
      if (struct.isSetWeight()) {
        optionals.set(27);
      }
      if (struct.isSetFinancialTotal()) {
        optionals.set(28);
      }
      if (struct.isSetGiftTotal()) {
        optionals.set(29);
      }
      if (struct.isSetPraiseTotal()) {
        optionals.set(30);
      }
      if (struct.isSetCupTotal()) {
        optionals.set(31);
      }
      if (struct.isSetPopularityLevel()) {
        optionals.set(32);
      }
      if (struct.isSetLargesse()) {
        optionals.set(33);
      }
      if (struct.isSetCharm()) {
        optionals.set(34);
      }
      if (struct.isSetTagId()) {
        optionals.set(35);
      }
      if (struct.isSetGsId()) {
        optionals.set(36);
      }
      if (struct.isSetVipLevel()) {
        optionals.set(37);
      }
      if (struct.isSetGuildId()) {
        optionals.set(38);
      }
      if (struct.isSetGuildName()) {
        optionals.set(39);
      }
      if (struct.isSetVipExp()) {
        optionals.set(40);
      }
      if (struct.isSetSkinColor()) {
        optionals.set(41);
      }
      if (struct.isSetStarLights()) {
        optionals.set(42);
      }
      if (struct.isSetStarLightLvl()) {
        optionals.set(43);
      }
      if (struct.isSetExp()) {
        optionals.set(44);
      }
      if (struct.isSetPopularityLvl()) {
        optionals.set(45);
      }
      if (struct.isSetJewelryInfos()) {
        optionals.set(46);
      }
      if (struct.isSetBeAddedFriends()) {
        optionals.set(47);
      }
      if (struct.isSetRelationInfos()) {
        optionals.set(48);
      }
      if (struct.isSetOnline()) {
        optionals.set(49);
      }
      if (struct.isSetCardFashionIds()) {
        optionals.set(50);
      }
      if (struct.isSetPutOnBadges()) {
        optionals.set(51);
      }
      if (struct.isSetFashion()) {
        optionals.set(52);
      }
      if (struct.isSetTheOneCharId()) {
        optionals.set(53);
      }
      if (struct.isSetUserId()) {
        optionals.set(54);
      }
      oprot.writeBitSet(optionals, 55);
      if (struct.isSetCharId()) {
        oprot.writeI64(struct.charId);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetBirthday()) {
        oprot.writeString(struct.birthday);
      }
      if (struct.isSetSex()) {
        oprot.writeByte(struct.sex);
      }
      if (struct.isSetHeadIconId()) {
        oprot.writeString(struct.headIconId);
      }
      if (struct.isSetConstellationId()) {
        oprot.writeByte(struct.constellationId);
      }
      if (struct.isSetLocation()) {
        oprot.writeString(struct.location);
      }
      if (struct.isSetPopularityTotal()) {
        oprot.writeI64(struct.popularityTotal);
      }
      if (struct.isSetCharmTotal()) {
        oprot.writeI64(struct.charmTotal);
      }
      if (struct.isSetMoodMessage()) {
        oprot.writeString(struct.moodMessage);
      }
      if (struct.isSetAvatarList()) {
        {
          oprot.writeI32(struct.avatarList.size());
          for (AvatarInfo _iter235 : struct.avatarList)
          {
            _iter235.write(oprot);
          }
        }
      }
      if (struct.isSetVipDiamond()) {
        oprot.writeI32(struct.vipDiamond);
      }
      if (struct.isSetLevel()) {
        oprot.writeI32(struct.level);
      }
      if (struct.isSetDynamicCount()) {
        oprot.writeI32(struct.dynamicCount);
      }
      if (struct.isSetDynamicWinCount()) {
        oprot.writeI32(struct.dynamicWinCount);
      }
      if (struct.isSetTraditionalCount()) {
        oprot.writeI32(struct.traditionalCount);
      }
      if (struct.isSetTraditionalWinCount()) {
        oprot.writeI32(struct.traditionalWinCount);
      }
      if (struct.isSetBattleCount()) {
        oprot.writeI32(struct.battleCount);
      }
      if (struct.isSetBattleWinCount()) {
        oprot.writeI32(struct.battleWinCount);
      }
      if (struct.isSetMoodMessageByVoice()) {
        oprot.writeString(struct.moodMessageByVoice);
      }
      if (struct.isSetPoint()) {
        oprot.writeI32(struct.point);
      }
      if (struct.isSetLongitude()) {
        oprot.writeDouble(struct.longitude);
      }
      if (struct.isSetLatitude()) {
        oprot.writeDouble(struct.latitude);
      }
      if (struct.isSetModelId()) {
        oprot.writeByte(struct.modelId);
      }
      if (struct.isSetOpen()) {
        oprot.writeBool(struct.open);
      }
      if (struct.isSetStature()) {
        oprot.writeByte(struct.stature);
      }
      if (struct.isSetHeight()) {
        oprot.writeI32(struct.height);
      }
      if (struct.isSetWeight()) {
        oprot.writeI32(struct.weight);
      }
      if (struct.isSetFinancialTotal()) {
        oprot.writeI32(struct.financialTotal);
      }
      if (struct.isSetGiftTotal()) {
        oprot.writeI32(struct.giftTotal);
      }
      if (struct.isSetPraiseTotal()) {
        oprot.writeI32(struct.praiseTotal);
      }
      if (struct.isSetCupTotal()) {
        oprot.writeI32(struct.cupTotal);
      }
      if (struct.isSetPopularityLevel()) {
        oprot.writeI16(struct.popularityLevel);
      }
      if (struct.isSetLargesse()) {
        oprot.writeI32(struct.largesse);
      }
      if (struct.isSetCharm()) {
        oprot.writeI32(struct.charm);
      }
      if (struct.isSetTagId()) {
        oprot.writeI16(struct.tagId);
      }
      if (struct.isSetGsId()) {
        oprot.writeString(struct.gsId);
      }
      if (struct.isSetVipLevel()) {
        oprot.writeByte(struct.vipLevel);
      }
      if (struct.isSetGuildId()) {
        oprot.writeI64(struct.guildId);
      }
      if (struct.isSetGuildName()) {
        oprot.writeString(struct.guildName);
      }
      if (struct.isSetVipExp()) {
        oprot.writeI32(struct.vipExp);
      }
      if (struct.isSetSkinColor()) {
        oprot.writeI32(struct.skinColor);
      }
      if (struct.isSetStarLights()) {
        oprot.writeI32(struct.starLights);
      }
      if (struct.isSetStarLightLvl()) {
        oprot.writeI32(struct.starLightLvl);
      }
      if (struct.isSetExp()) {
        oprot.writeI32(struct.exp);
      }
      if (struct.isSetPopularityLvl()) {
        oprot.writeI64(struct.popularityLvl);
      }
      if (struct.isSetJewelryInfos()) {
        {
          oprot.writeI32(struct.jewelryInfos.size());
          for (JewelryInfo _iter236 : struct.jewelryInfos)
          {
            _iter236.write(oprot);
          }
        }
      }
      if (struct.isSetBeAddedFriends()) {
        oprot.writeI32(struct.beAddedFriends);
      }
      if (struct.isSetRelationInfos()) {
        {
          oprot.writeI32(struct.relationInfos.size());
          for (SimpleBusinessCardInfo _iter237 : struct.relationInfos)
          {
            _iter237.write(oprot);
          }
        }
      }
      if (struct.isSetOnline()) {
        oprot.writeBool(struct.online);
      }
      if (struct.isSetCardFashionIds()) {
        {
          oprot.writeI32(struct.cardFashionIds.size());
          for (Map.Entry<Byte, Long> _iter238 : struct.cardFashionIds.entrySet())
          {
            oprot.writeByte(_iter238.getKey());
            oprot.writeI64(_iter238.getValue());
          }
        }
      }
      if (struct.isSetPutOnBadges()) {
        {
          oprot.writeI32(struct.putOnBadges.size());
          for (BadgeInfo _iter239 : struct.putOnBadges)
          {
            _iter239.write(oprot);
          }
        }
      }
      if (struct.isSetFashion()) {
        oprot.writeI32(struct.fashion);
      }
      if (struct.isSetTheOneCharId()) {
        oprot.writeI64(struct.theOneCharId);
      }
      if (struct.isSetUserId()) {
        oprot.writeI64(struct.userId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BusinessCardInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(55);
      if (incoming.get(0)) {
        struct.charId = iprot.readI64();
        struct.setCharIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.birthday = iprot.readString();
        struct.setBirthdayIsSet(true);
      }
      if (incoming.get(3)) {
        struct.sex = iprot.readByte();
        struct.setSexIsSet(true);
      }
      if (incoming.get(4)) {
        struct.headIconId = iprot.readString();
        struct.setHeadIconIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.constellationId = iprot.readByte();
        struct.setConstellationIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.location = iprot.readString();
        struct.setLocationIsSet(true);
      }
      if (incoming.get(7)) {
        struct.popularityTotal = iprot.readI64();
        struct.setPopularityTotalIsSet(true);
      }
      if (incoming.get(8)) {
        struct.charmTotal = iprot.readI64();
        struct.setCharmTotalIsSet(true);
      }
      if (incoming.get(9)) {
        struct.moodMessage = iprot.readString();
        struct.setMoodMessageIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list240 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.avatarList = new ArrayList<AvatarInfo>(_list240.size);
          for (int _i241 = 0; _i241 < _list240.size; ++_i241)
          {
            AvatarInfo _elem242; // required
            _elem242 = new AvatarInfo();
            _elem242.read(iprot);
            struct.avatarList.add(_elem242);
          }
        }
        struct.setAvatarListIsSet(true);
      }
      if (incoming.get(11)) {
        struct.vipDiamond = iprot.readI32();
        struct.setVipDiamondIsSet(true);
      }
      if (incoming.get(12)) {
        struct.level = iprot.readI32();
        struct.setLevelIsSet(true);
      }
      if (incoming.get(13)) {
        struct.dynamicCount = iprot.readI32();
        struct.setDynamicCountIsSet(true);
      }
      if (incoming.get(14)) {
        struct.dynamicWinCount = iprot.readI32();
        struct.setDynamicWinCountIsSet(true);
      }
      if (incoming.get(15)) {
        struct.traditionalCount = iprot.readI32();
        struct.setTraditionalCountIsSet(true);
      }
      if (incoming.get(16)) {
        struct.traditionalWinCount = iprot.readI32();
        struct.setTraditionalWinCountIsSet(true);
      }
      if (incoming.get(17)) {
        struct.battleCount = iprot.readI32();
        struct.setBattleCountIsSet(true);
      }
      if (incoming.get(18)) {
        struct.battleWinCount = iprot.readI32();
        struct.setBattleWinCountIsSet(true);
      }
      if (incoming.get(19)) {
        struct.moodMessageByVoice = iprot.readString();
        struct.setMoodMessageByVoiceIsSet(true);
      }
      if (incoming.get(20)) {
        struct.point = iprot.readI32();
        struct.setPointIsSet(true);
      }
      if (incoming.get(21)) {
        struct.longitude = iprot.readDouble();
        struct.setLongitudeIsSet(true);
      }
      if (incoming.get(22)) {
        struct.latitude = iprot.readDouble();
        struct.setLatitudeIsSet(true);
      }
      if (incoming.get(23)) {
        struct.modelId = iprot.readByte();
        struct.setModelIdIsSet(true);
      }
      if (incoming.get(24)) {
        struct.open = iprot.readBool();
        struct.setOpenIsSet(true);
      }
      if (incoming.get(25)) {
        struct.stature = iprot.readByte();
        struct.setStatureIsSet(true);
      }
      if (incoming.get(26)) {
        struct.height = iprot.readI32();
        struct.setHeightIsSet(true);
      }
      if (incoming.get(27)) {
        struct.weight = iprot.readI32();
        struct.setWeightIsSet(true);
      }
      if (incoming.get(28)) {
        struct.financialTotal = iprot.readI32();
        struct.setFinancialTotalIsSet(true);
      }
      if (incoming.get(29)) {
        struct.giftTotal = iprot.readI32();
        struct.setGiftTotalIsSet(true);
      }
      if (incoming.get(30)) {
        struct.praiseTotal = iprot.readI32();
        struct.setPraiseTotalIsSet(true);
      }
      if (incoming.get(31)) {
        struct.cupTotal = iprot.readI32();
        struct.setCupTotalIsSet(true);
      }
      if (incoming.get(32)) {
        struct.popularityLevel = iprot.readI16();
        struct.setPopularityLevelIsSet(true);
      }
      if (incoming.get(33)) {
        struct.largesse = iprot.readI32();
        struct.setLargesseIsSet(true);
      }
      if (incoming.get(34)) {
        struct.charm = iprot.readI32();
        struct.setCharmIsSet(true);
      }
      if (incoming.get(35)) {
        struct.tagId = iprot.readI16();
        struct.setTagIdIsSet(true);
      }
      if (incoming.get(36)) {
        struct.gsId = iprot.readString();
        struct.setGsIdIsSet(true);
      }
      if (incoming.get(37)) {
        struct.vipLevel = iprot.readByte();
        struct.setVipLevelIsSet(true);
      }
      if (incoming.get(38)) {
        struct.guildId = iprot.readI64();
        struct.setGuildIdIsSet(true);
      }
      if (incoming.get(39)) {
        struct.guildName = iprot.readString();
        struct.setGuildNameIsSet(true);
      }
      if (incoming.get(40)) {
        struct.vipExp = iprot.readI32();
        struct.setVipExpIsSet(true);
      }
      if (incoming.get(41)) {
        struct.skinColor = iprot.readI32();
        struct.setSkinColorIsSet(true);
      }
      if (incoming.get(42)) {
        struct.starLights = iprot.readI32();
        struct.setStarLightsIsSet(true);
      }
      if (incoming.get(43)) {
        struct.starLightLvl = iprot.readI32();
        struct.setStarLightLvlIsSet(true);
      }
      if (incoming.get(44)) {
        struct.exp = iprot.readI32();
        struct.setExpIsSet(true);
      }
      if (incoming.get(45)) {
        struct.popularityLvl = iprot.readI64();
        struct.setPopularityLvlIsSet(true);
      }
      if (incoming.get(46)) {
        {
          org.apache.thrift.protocol.TList _list243 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.jewelryInfos = new ArrayList<JewelryInfo>(_list243.size);
          for (int _i244 = 0; _i244 < _list243.size; ++_i244)
          {
            JewelryInfo _elem245; // required
            _elem245 = new JewelryInfo();
            _elem245.read(iprot);
            struct.jewelryInfos.add(_elem245);
          }
        }
        struct.setJewelryInfosIsSet(true);
      }
      if (incoming.get(47)) {
        struct.beAddedFriends = iprot.readI32();
        struct.setBeAddedFriendsIsSet(true);
      }
      if (incoming.get(48)) {
        {
          org.apache.thrift.protocol.TList _list246 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.relationInfos = new ArrayList<SimpleBusinessCardInfo>(_list246.size);
          for (int _i247 = 0; _i247 < _list246.size; ++_i247)
          {
            SimpleBusinessCardInfo _elem248; // required
            _elem248 = new SimpleBusinessCardInfo();
            _elem248.read(iprot);
            struct.relationInfos.add(_elem248);
          }
        }
        struct.setRelationInfosIsSet(true);
      }
      if (incoming.get(49)) {
        struct.online = iprot.readBool();
        struct.setOnlineIsSet(true);
      }
      if (incoming.get(50)) {
        {
          org.apache.thrift.protocol.TMap _map249 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.BYTE, org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.cardFashionIds = new HashMap<Byte,Long>(2*_map249.size);
          for (int _i250 = 0; _i250 < _map249.size; ++_i250)
          {
            byte _key251; // required
            long _val252; // required
            _key251 = iprot.readByte();
            _val252 = iprot.readI64();
            struct.cardFashionIds.put(_key251, _val252);
          }
        }
        struct.setCardFashionIdsIsSet(true);
      }
      if (incoming.get(51)) {
        {
          org.apache.thrift.protocol.TList _list253 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.putOnBadges = new ArrayList<BadgeInfo>(_list253.size);
          for (int _i254 = 0; _i254 < _list253.size; ++_i254)
          {
            BadgeInfo _elem255; // required
            _elem255 = new BadgeInfo();
            _elem255.read(iprot);
            struct.putOnBadges.add(_elem255);
          }
        }
        struct.setPutOnBadgesIsSet(true);
      }
      if (incoming.get(52)) {
        struct.fashion = iprot.readI32();
        struct.setFashionIsSet(true);
      }
      if (incoming.get(53)) {
        struct.theOneCharId = iprot.readI64();
        struct.setTheOneCharIdIsSet(true);
      }
      if (incoming.get(54)) {
        struct.userId = iprot.readI64();
        struct.setUserIdIsSet(true);
      }
    }
  }

}

