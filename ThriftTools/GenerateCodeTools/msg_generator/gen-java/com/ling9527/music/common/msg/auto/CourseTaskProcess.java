/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CourseTaskProcess implements org.apache.thrift.TBase<CourseTaskProcess, CourseTaskProcess._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CourseTaskProcess");

  private static final org.apache.thrift.protocol.TField MESSAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("messageId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField INT_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("intCount", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField MAX_INT_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("maxIntCount", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField DOUBLE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("doubleCount", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField MAX_DOUBLE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("maxDoubleCount", org.apache.thrift.protocol.TType.DOUBLE, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CourseTaskProcessStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CourseTaskProcessTupleSchemeFactory());
  }

  public int messageId; // required
  public int intCount; // required
  public int maxIntCount; // required
  public double doubleCount; // required
  public double maxDoubleCount; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MESSAGE_ID((short)1, "messageId"),
    INT_COUNT((short)2, "intCount"),
    MAX_INT_COUNT((short)3, "maxIntCount"),
    DOUBLE_COUNT((short)4, "doubleCount"),
    MAX_DOUBLE_COUNT((short)5, "maxDoubleCount");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MESSAGE_ID
          return MESSAGE_ID;
        case 2: // INT_COUNT
          return INT_COUNT;
        case 3: // MAX_INT_COUNT
          return MAX_INT_COUNT;
        case 4: // DOUBLE_COUNT
          return DOUBLE_COUNT;
        case 5: // MAX_DOUBLE_COUNT
          return MAX_DOUBLE_COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MESSAGEID_ISSET_ID = 0;
  private static final int __INTCOUNT_ISSET_ID = 1;
  private static final int __MAXINTCOUNT_ISSET_ID = 2;
  private static final int __DOUBLECOUNT_ISSET_ID = 3;
  private static final int __MAXDOUBLECOUNT_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MESSAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("messageId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INT_COUNT, new org.apache.thrift.meta_data.FieldMetaData("intCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_INT_COUNT, new org.apache.thrift.meta_data.FieldMetaData("maxIntCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DOUBLE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("doubleCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MAX_DOUBLE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("maxDoubleCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CourseTaskProcess.class, metaDataMap);
  }

  public CourseTaskProcess() {
  }

  public CourseTaskProcess(
    int messageId,
    int intCount,
    int maxIntCount,
    double doubleCount,
    double maxDoubleCount)
  {
    this();
    this.messageId = messageId;
    setMessageIdIsSet(true);
    this.intCount = intCount;
    setIntCountIsSet(true);
    this.maxIntCount = maxIntCount;
    setMaxIntCountIsSet(true);
    this.doubleCount = doubleCount;
    setDoubleCountIsSet(true);
    this.maxDoubleCount = maxDoubleCount;
    setMaxDoubleCountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CourseTaskProcess(CourseTaskProcess other) {
    __isset_bitfield = other.__isset_bitfield;
    this.messageId = other.messageId;
    this.intCount = other.intCount;
    this.maxIntCount = other.maxIntCount;
    this.doubleCount = other.doubleCount;
    this.maxDoubleCount = other.maxDoubleCount;
  }

  public CourseTaskProcess deepCopy() {
    return new CourseTaskProcess(this);
  }

  @Override
  public void clear() {
    setMessageIdIsSet(false);
    this.messageId = 0;
    setIntCountIsSet(false);
    this.intCount = 0;
    setMaxIntCountIsSet(false);
    this.maxIntCount = 0;
    setDoubleCountIsSet(false);
    this.doubleCount = 0.0;
    setMaxDoubleCountIsSet(false);
    this.maxDoubleCount = 0.0;
  }

  public int getMessageId() {
    return this.messageId;
  }

  public CourseTaskProcess setMessageId(int messageId) {
    this.messageId = messageId;
    setMessageIdIsSet(true);
    return this;
  }

  public void unsetMessageId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MESSAGEID_ISSET_ID);
  }

  /** Returns true if field messageId is set (has been assigned a value) and false otherwise */
  public boolean isSetMessageId() {
    return EncodingUtils.testBit(__isset_bitfield, __MESSAGEID_ISSET_ID);
  }

  public void setMessageIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MESSAGEID_ISSET_ID, value);
  }

  public int getIntCount() {
    return this.intCount;
  }

  public CourseTaskProcess setIntCount(int intCount) {
    this.intCount = intCount;
    setIntCountIsSet(true);
    return this;
  }

  public void unsetIntCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTCOUNT_ISSET_ID);
  }

  /** Returns true if field intCount is set (has been assigned a value) and false otherwise */
  public boolean isSetIntCount() {
    return EncodingUtils.testBit(__isset_bitfield, __INTCOUNT_ISSET_ID);
  }

  public void setIntCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTCOUNT_ISSET_ID, value);
  }

  public int getMaxIntCount() {
    return this.maxIntCount;
  }

  public CourseTaskProcess setMaxIntCount(int maxIntCount) {
    this.maxIntCount = maxIntCount;
    setMaxIntCountIsSet(true);
    return this;
  }

  public void unsetMaxIntCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXINTCOUNT_ISSET_ID);
  }

  /** Returns true if field maxIntCount is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxIntCount() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXINTCOUNT_ISSET_ID);
  }

  public void setMaxIntCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXINTCOUNT_ISSET_ID, value);
  }

  public double getDoubleCount() {
    return this.doubleCount;
  }

  public CourseTaskProcess setDoubleCount(double doubleCount) {
    this.doubleCount = doubleCount;
    setDoubleCountIsSet(true);
    return this;
  }

  public void unsetDoubleCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DOUBLECOUNT_ISSET_ID);
  }

  /** Returns true if field doubleCount is set (has been assigned a value) and false otherwise */
  public boolean isSetDoubleCount() {
    return EncodingUtils.testBit(__isset_bitfield, __DOUBLECOUNT_ISSET_ID);
  }

  public void setDoubleCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DOUBLECOUNT_ISSET_ID, value);
  }

  public double getMaxDoubleCount() {
    return this.maxDoubleCount;
  }

  public CourseTaskProcess setMaxDoubleCount(double maxDoubleCount) {
    this.maxDoubleCount = maxDoubleCount;
    setMaxDoubleCountIsSet(true);
    return this;
  }

  public void unsetMaxDoubleCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXDOUBLECOUNT_ISSET_ID);
  }

  /** Returns true if field maxDoubleCount is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxDoubleCount() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXDOUBLECOUNT_ISSET_ID);
  }

  public void setMaxDoubleCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXDOUBLECOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MESSAGE_ID:
      if (value == null) {
        unsetMessageId();
      } else {
        setMessageId((Integer)value);
      }
      break;

    case INT_COUNT:
      if (value == null) {
        unsetIntCount();
      } else {
        setIntCount((Integer)value);
      }
      break;

    case MAX_INT_COUNT:
      if (value == null) {
        unsetMaxIntCount();
      } else {
        setMaxIntCount((Integer)value);
      }
      break;

    case DOUBLE_COUNT:
      if (value == null) {
        unsetDoubleCount();
      } else {
        setDoubleCount((Double)value);
      }
      break;

    case MAX_DOUBLE_COUNT:
      if (value == null) {
        unsetMaxDoubleCount();
      } else {
        setMaxDoubleCount((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MESSAGE_ID:
      return Integer.valueOf(getMessageId());

    case INT_COUNT:
      return Integer.valueOf(getIntCount());

    case MAX_INT_COUNT:
      return Integer.valueOf(getMaxIntCount());

    case DOUBLE_COUNT:
      return Double.valueOf(getDoubleCount());

    case MAX_DOUBLE_COUNT:
      return Double.valueOf(getMaxDoubleCount());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MESSAGE_ID:
      return isSetMessageId();
    case INT_COUNT:
      return isSetIntCount();
    case MAX_INT_COUNT:
      return isSetMaxIntCount();
    case DOUBLE_COUNT:
      return isSetDoubleCount();
    case MAX_DOUBLE_COUNT:
      return isSetMaxDoubleCount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CourseTaskProcess)
      return this.equals((CourseTaskProcess)that);
    return false;
  }

  public boolean equals(CourseTaskProcess that) {
    if (that == null)
      return false;

    boolean this_present_messageId = true;
    boolean that_present_messageId = true;
    if (this_present_messageId || that_present_messageId) {
      if (!(this_present_messageId && that_present_messageId))
        return false;
      if (this.messageId != that.messageId)
        return false;
    }

    boolean this_present_intCount = true;
    boolean that_present_intCount = true;
    if (this_present_intCount || that_present_intCount) {
      if (!(this_present_intCount && that_present_intCount))
        return false;
      if (this.intCount != that.intCount)
        return false;
    }

    boolean this_present_maxIntCount = true;
    boolean that_present_maxIntCount = true;
    if (this_present_maxIntCount || that_present_maxIntCount) {
      if (!(this_present_maxIntCount && that_present_maxIntCount))
        return false;
      if (this.maxIntCount != that.maxIntCount)
        return false;
    }

    boolean this_present_doubleCount = true;
    boolean that_present_doubleCount = true;
    if (this_present_doubleCount || that_present_doubleCount) {
      if (!(this_present_doubleCount && that_present_doubleCount))
        return false;
      if (this.doubleCount != that.doubleCount)
        return false;
    }

    boolean this_present_maxDoubleCount = true;
    boolean that_present_maxDoubleCount = true;
    if (this_present_maxDoubleCount || that_present_maxDoubleCount) {
      if (!(this_present_maxDoubleCount && that_present_maxDoubleCount))
        return false;
      if (this.maxDoubleCount != that.maxDoubleCount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(CourseTaskProcess other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CourseTaskProcess typedOther = (CourseTaskProcess)other;

    lastComparison = Boolean.valueOf(isSetMessageId()).compareTo(typedOther.isSetMessageId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessageId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageId, typedOther.messageId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIntCount()).compareTo(typedOther.isSetIntCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intCount, typedOther.intCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxIntCount()).compareTo(typedOther.isSetMaxIntCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxIntCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxIntCount, typedOther.maxIntCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDoubleCount()).compareTo(typedOther.isSetDoubleCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDoubleCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doubleCount, typedOther.doubleCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxDoubleCount()).compareTo(typedOther.isSetMaxDoubleCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxDoubleCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxDoubleCount, typedOther.maxDoubleCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CourseTaskProcess(");
    boolean first = true;

    sb.append("messageId:");
    sb.append(this.messageId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("intCount:");
    sb.append(this.intCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxIntCount:");
    sb.append(this.maxIntCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("doubleCount:");
    sb.append(this.doubleCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxDoubleCount:");
    sb.append(this.maxDoubleCount);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CourseTaskProcessStandardSchemeFactory implements SchemeFactory {
    public CourseTaskProcessStandardScheme getScheme() {
      return new CourseTaskProcessStandardScheme();
    }
  }

  private static class CourseTaskProcessStandardScheme extends StandardScheme<CourseTaskProcess> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CourseTaskProcess struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MESSAGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.messageId = iprot.readI32();
              struct.setMessageIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INT_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.intCount = iprot.readI32();
              struct.setIntCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MAX_INT_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxIntCount = iprot.readI32();
              struct.setMaxIntCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DOUBLE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.doubleCount = iprot.readDouble();
              struct.setDoubleCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MAX_DOUBLE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.maxDoubleCount = iprot.readDouble();
              struct.setMaxDoubleCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CourseTaskProcess struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MESSAGE_ID_FIELD_DESC);
      oprot.writeI32(struct.messageId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INT_COUNT_FIELD_DESC);
      oprot.writeI32(struct.intCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_INT_COUNT_FIELD_DESC);
      oprot.writeI32(struct.maxIntCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DOUBLE_COUNT_FIELD_DESC);
      oprot.writeDouble(struct.doubleCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_DOUBLE_COUNT_FIELD_DESC);
      oprot.writeDouble(struct.maxDoubleCount);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CourseTaskProcessTupleSchemeFactory implements SchemeFactory {
    public CourseTaskProcessTupleScheme getScheme() {
      return new CourseTaskProcessTupleScheme();
    }
  }

  private static class CourseTaskProcessTupleScheme extends TupleScheme<CourseTaskProcess> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CourseTaskProcess struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMessageId()) {
        optionals.set(0);
      }
      if (struct.isSetIntCount()) {
        optionals.set(1);
      }
      if (struct.isSetMaxIntCount()) {
        optionals.set(2);
      }
      if (struct.isSetDoubleCount()) {
        optionals.set(3);
      }
      if (struct.isSetMaxDoubleCount()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetMessageId()) {
        oprot.writeI32(struct.messageId);
      }
      if (struct.isSetIntCount()) {
        oprot.writeI32(struct.intCount);
      }
      if (struct.isSetMaxIntCount()) {
        oprot.writeI32(struct.maxIntCount);
      }
      if (struct.isSetDoubleCount()) {
        oprot.writeDouble(struct.doubleCount);
      }
      if (struct.isSetMaxDoubleCount()) {
        oprot.writeDouble(struct.maxDoubleCount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CourseTaskProcess struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.messageId = iprot.readI32();
        struct.setMessageIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.intCount = iprot.readI32();
        struct.setIntCountIsSet(true);
      }
      if (incoming.get(2)) {
        struct.maxIntCount = iprot.readI32();
        struct.setMaxIntCountIsSet(true);
      }
      if (incoming.get(3)) {
        struct.doubleCount = iprot.readDouble();
        struct.setDoubleCountIsSet(true);
      }
      if (incoming.get(4)) {
        struct.maxDoubleCount = iprot.readDouble();
        struct.setMaxDoubleCountIsSet(true);
      }
    }
  }

}

