/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PlayerBaseInfo implements org.apache.thrift.TBase<PlayerBaseInfo, PlayerBaseInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PlayerBaseInfo");

  private static final org.apache.thrift.protocol.TField CHAR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("charId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SEX_FIELD_DESC = new org.apache.thrift.protocol.TField("sex", org.apache.thrift.protocol.TType.BYTE, (short)3);
  private static final org.apache.thrift.protocol.TField HEAD_ICON_FIELD_DESC = new org.apache.thrift.protocol.TField("headIcon", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("level", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField POP_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("popLevel", org.apache.thrift.protocol.TType.I16, (short)6);
  private static final org.apache.thrift.protocol.TField VIP_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("vipLevel", org.apache.thrift.protocol.TType.BYTE, (short)7);
  private static final org.apache.thrift.protocol.TField TAG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tagId", org.apache.thrift.protocol.TType.I16, (short)8);
  private static final org.apache.thrift.protocol.TField GUILD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("guildId", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField GUILD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("guildName", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField BASE_FASHION_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("baseFashionIds", org.apache.thrift.protocol.TType.MAP, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PlayerBaseInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PlayerBaseInfoTupleSchemeFactory());
  }

  public long charId; // required
  public String name; // optional
  public byte sex; // optional
  public String headIcon; // optional
  public int level; // optional
  public short popLevel; // optional
  public byte vipLevel; // optional
  public short tagId; // optional
  public long guildId; // optional
  public String guildName; // optional
  /**
   * 时尚特权效果及头像框key:style val:id
   */
  public Map<Byte,Integer> baseFashionIds; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CHAR_ID((short)1, "charId"),
    NAME((short)2, "name"),
    SEX((short)3, "sex"),
    HEAD_ICON((short)4, "headIcon"),
    LEVEL((short)5, "level"),
    POP_LEVEL((short)6, "popLevel"),
    VIP_LEVEL((short)7, "vipLevel"),
    TAG_ID((short)8, "tagId"),
    GUILD_ID((short)9, "guildId"),
    GUILD_NAME((short)10, "guildName"),
    /**
     * 时尚特权效果及头像框key:style val:id
     */
    BASE_FASHION_IDS((short)11, "baseFashionIds");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CHAR_ID
          return CHAR_ID;
        case 2: // NAME
          return NAME;
        case 3: // SEX
          return SEX;
        case 4: // HEAD_ICON
          return HEAD_ICON;
        case 5: // LEVEL
          return LEVEL;
        case 6: // POP_LEVEL
          return POP_LEVEL;
        case 7: // VIP_LEVEL
          return VIP_LEVEL;
        case 8: // TAG_ID
          return TAG_ID;
        case 9: // GUILD_ID
          return GUILD_ID;
        case 10: // GUILD_NAME
          return GUILD_NAME;
        case 11: // BASE_FASHION_IDS
          return BASE_FASHION_IDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CHARID_ISSET_ID = 0;
  private static final int __SEX_ISSET_ID = 1;
  private static final int __LEVEL_ISSET_ID = 2;
  private static final int __POPLEVEL_ISSET_ID = 3;
  private static final int __VIPLEVEL_ISSET_ID = 4;
  private static final int __TAGID_ISSET_ID = 5;
  private static final int __GUILDID_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.NAME,_Fields.SEX,_Fields.HEAD_ICON,_Fields.LEVEL,_Fields.POP_LEVEL,_Fields.VIP_LEVEL,_Fields.TAG_ID,_Fields.GUILD_ID,_Fields.GUILD_NAME,_Fields.BASE_FASHION_IDS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CHAR_ID, new org.apache.thrift.meta_data.FieldMetaData("charId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEX, new org.apache.thrift.meta_data.FieldMetaData("sex", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.HEAD_ICON, new org.apache.thrift.meta_data.FieldMetaData("headIcon", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LEVEL, new org.apache.thrift.meta_data.FieldMetaData("level", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POP_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("popLevel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.VIP_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("vipLevel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.TAG_ID, new org.apache.thrift.meta_data.FieldMetaData("tagId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.GUILD_ID, new org.apache.thrift.meta_data.FieldMetaData("guildId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.GUILD_NAME, new org.apache.thrift.meta_data.FieldMetaData("guildName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BASE_FASHION_IDS, new org.apache.thrift.meta_data.FieldMetaData("baseFashionIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PlayerBaseInfo.class, metaDataMap);
  }

  public PlayerBaseInfo() {
  }

  public PlayerBaseInfo(
    long charId)
  {
    this();
    this.charId = charId;
    setCharIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PlayerBaseInfo(PlayerBaseInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.charId = other.charId;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.sex = other.sex;
    if (other.isSetHeadIcon()) {
      this.headIcon = other.headIcon;
    }
    this.level = other.level;
    this.popLevel = other.popLevel;
    this.vipLevel = other.vipLevel;
    this.tagId = other.tagId;
    this.guildId = other.guildId;
    if (other.isSetGuildName()) {
      this.guildName = other.guildName;
    }
    if (other.isSetBaseFashionIds()) {
      Map<Byte,Integer> __this__baseFashionIds = new HashMap<Byte,Integer>();
      for (Map.Entry<Byte, Integer> other_element : other.baseFashionIds.entrySet()) {

        Byte other_element_key = other_element.getKey();
        Integer other_element_value = other_element.getValue();

        Byte __this__baseFashionIds_copy_key = other_element_key;

        Integer __this__baseFashionIds_copy_value = other_element_value;

        __this__baseFashionIds.put(__this__baseFashionIds_copy_key, __this__baseFashionIds_copy_value);
      }
      this.baseFashionIds = __this__baseFashionIds;
    }
  }

  public PlayerBaseInfo deepCopy() {
    return new PlayerBaseInfo(this);
  }

  @Override
  public void clear() {
    setCharIdIsSet(false);
    this.charId = 0;
    this.name = null;
    setSexIsSet(false);
    this.sex = 0;
    this.headIcon = null;
    setLevelIsSet(false);
    this.level = 0;
    setPopLevelIsSet(false);
    this.popLevel = 0;
    setVipLevelIsSet(false);
    this.vipLevel = 0;
    setTagIdIsSet(false);
    this.tagId = 0;
    setGuildIdIsSet(false);
    this.guildId = 0;
    this.guildName = null;
    this.baseFashionIds = null;
  }

  public long getCharId() {
    return this.charId;
  }

  public PlayerBaseInfo setCharId(long charId) {
    this.charId = charId;
    setCharIdIsSet(true);
    return this;
  }

  public void unsetCharId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHARID_ISSET_ID);
  }

  /** Returns true if field charId is set (has been assigned a value) and false otherwise */
  public boolean isSetCharId() {
    return EncodingUtils.testBit(__isset_bitfield, __CHARID_ISSET_ID);
  }

  public void setCharIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHARID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public PlayerBaseInfo setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public byte getSex() {
    return this.sex;
  }

  public PlayerBaseInfo setSex(byte sex) {
    this.sex = sex;
    setSexIsSet(true);
    return this;
  }

  public void unsetSex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEX_ISSET_ID);
  }

  /** Returns true if field sex is set (has been assigned a value) and false otherwise */
  public boolean isSetSex() {
    return EncodingUtils.testBit(__isset_bitfield, __SEX_ISSET_ID);
  }

  public void setSexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEX_ISSET_ID, value);
  }

  public String getHeadIcon() {
    return this.headIcon;
  }

  public PlayerBaseInfo setHeadIcon(String headIcon) {
    this.headIcon = headIcon;
    return this;
  }

  public void unsetHeadIcon() {
    this.headIcon = null;
  }

  /** Returns true if field headIcon is set (has been assigned a value) and false otherwise */
  public boolean isSetHeadIcon() {
    return this.headIcon != null;
  }

  public void setHeadIconIsSet(boolean value) {
    if (!value) {
      this.headIcon = null;
    }
  }

  public int getLevel() {
    return this.level;
  }

  public PlayerBaseInfo setLevel(int level) {
    this.level = level;
    setLevelIsSet(true);
    return this;
  }

  public void unsetLevel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEVEL_ISSET_ID);
  }

  /** Returns true if field level is set (has been assigned a value) and false otherwise */
  public boolean isSetLevel() {
    return EncodingUtils.testBit(__isset_bitfield, __LEVEL_ISSET_ID);
  }

  public void setLevelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEVEL_ISSET_ID, value);
  }

  public short getPopLevel() {
    return this.popLevel;
  }

  public PlayerBaseInfo setPopLevel(short popLevel) {
    this.popLevel = popLevel;
    setPopLevelIsSet(true);
    return this;
  }

  public void unsetPopLevel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POPLEVEL_ISSET_ID);
  }

  /** Returns true if field popLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetPopLevel() {
    return EncodingUtils.testBit(__isset_bitfield, __POPLEVEL_ISSET_ID);
  }

  public void setPopLevelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POPLEVEL_ISSET_ID, value);
  }

  public byte getVipLevel() {
    return this.vipLevel;
  }

  public PlayerBaseInfo setVipLevel(byte vipLevel) {
    this.vipLevel = vipLevel;
    setVipLevelIsSet(true);
    return this;
  }

  public void unsetVipLevel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIPLEVEL_ISSET_ID);
  }

  /** Returns true if field vipLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetVipLevel() {
    return EncodingUtils.testBit(__isset_bitfield, __VIPLEVEL_ISSET_ID);
  }

  public void setVipLevelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIPLEVEL_ISSET_ID, value);
  }

  public short getTagId() {
    return this.tagId;
  }

  public PlayerBaseInfo setTagId(short tagId) {
    this.tagId = tagId;
    setTagIdIsSet(true);
    return this;
  }

  public void unsetTagId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TAGID_ISSET_ID);
  }

  /** Returns true if field tagId is set (has been assigned a value) and false otherwise */
  public boolean isSetTagId() {
    return EncodingUtils.testBit(__isset_bitfield, __TAGID_ISSET_ID);
  }

  public void setTagIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TAGID_ISSET_ID, value);
  }

  public long getGuildId() {
    return this.guildId;
  }

  public PlayerBaseInfo setGuildId(long guildId) {
    this.guildId = guildId;
    setGuildIdIsSet(true);
    return this;
  }

  public void unsetGuildId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GUILDID_ISSET_ID);
  }

  /** Returns true if field guildId is set (has been assigned a value) and false otherwise */
  public boolean isSetGuildId() {
    return EncodingUtils.testBit(__isset_bitfield, __GUILDID_ISSET_ID);
  }

  public void setGuildIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GUILDID_ISSET_ID, value);
  }

  public String getGuildName() {
    return this.guildName;
  }

  public PlayerBaseInfo setGuildName(String guildName) {
    this.guildName = guildName;
    return this;
  }

  public void unsetGuildName() {
    this.guildName = null;
  }

  /** Returns true if field guildName is set (has been assigned a value) and false otherwise */
  public boolean isSetGuildName() {
    return this.guildName != null;
  }

  public void setGuildNameIsSet(boolean value) {
    if (!value) {
      this.guildName = null;
    }
  }

  public int getBaseFashionIdsSize() {
    return (this.baseFashionIds == null) ? 0 : this.baseFashionIds.size();
  }

  public void putToBaseFashionIds(byte key, int val) {
    if (this.baseFashionIds == null) {
      this.baseFashionIds = new HashMap<Byte,Integer>();
    }
    this.baseFashionIds.put(key, val);
  }

  /**
   * 时尚特权效果及头像框key:style val:id
   */
  public Map<Byte,Integer> getBaseFashionIds() {
    return this.baseFashionIds;
  }

  /**
   * 时尚特权效果及头像框key:style val:id
   */
  public PlayerBaseInfo setBaseFashionIds(Map<Byte,Integer> baseFashionIds) {
    this.baseFashionIds = baseFashionIds;
    return this;
  }

  public void unsetBaseFashionIds() {
    this.baseFashionIds = null;
  }

  /** Returns true if field baseFashionIds is set (has been assigned a value) and false otherwise */
  public boolean isSetBaseFashionIds() {
    return this.baseFashionIds != null;
  }

  public void setBaseFashionIdsIsSet(boolean value) {
    if (!value) {
      this.baseFashionIds = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CHAR_ID:
      if (value == null) {
        unsetCharId();
      } else {
        setCharId((Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case SEX:
      if (value == null) {
        unsetSex();
      } else {
        setSex((Byte)value);
      }
      break;

    case HEAD_ICON:
      if (value == null) {
        unsetHeadIcon();
      } else {
        setHeadIcon((String)value);
      }
      break;

    case LEVEL:
      if (value == null) {
        unsetLevel();
      } else {
        setLevel((Integer)value);
      }
      break;

    case POP_LEVEL:
      if (value == null) {
        unsetPopLevel();
      } else {
        setPopLevel((Short)value);
      }
      break;

    case VIP_LEVEL:
      if (value == null) {
        unsetVipLevel();
      } else {
        setVipLevel((Byte)value);
      }
      break;

    case TAG_ID:
      if (value == null) {
        unsetTagId();
      } else {
        setTagId((Short)value);
      }
      break;

    case GUILD_ID:
      if (value == null) {
        unsetGuildId();
      } else {
        setGuildId((Long)value);
      }
      break;

    case GUILD_NAME:
      if (value == null) {
        unsetGuildName();
      } else {
        setGuildName((String)value);
      }
      break;

    case BASE_FASHION_IDS:
      if (value == null) {
        unsetBaseFashionIds();
      } else {
        setBaseFashionIds((Map<Byte,Integer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CHAR_ID:
      return Long.valueOf(getCharId());

    case NAME:
      return getName();

    case SEX:
      return Byte.valueOf(getSex());

    case HEAD_ICON:
      return getHeadIcon();

    case LEVEL:
      return Integer.valueOf(getLevel());

    case POP_LEVEL:
      return Short.valueOf(getPopLevel());

    case VIP_LEVEL:
      return Byte.valueOf(getVipLevel());

    case TAG_ID:
      return Short.valueOf(getTagId());

    case GUILD_ID:
      return Long.valueOf(getGuildId());

    case GUILD_NAME:
      return getGuildName();

    case BASE_FASHION_IDS:
      return getBaseFashionIds();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CHAR_ID:
      return isSetCharId();
    case NAME:
      return isSetName();
    case SEX:
      return isSetSex();
    case HEAD_ICON:
      return isSetHeadIcon();
    case LEVEL:
      return isSetLevel();
    case POP_LEVEL:
      return isSetPopLevel();
    case VIP_LEVEL:
      return isSetVipLevel();
    case TAG_ID:
      return isSetTagId();
    case GUILD_ID:
      return isSetGuildId();
    case GUILD_NAME:
      return isSetGuildName();
    case BASE_FASHION_IDS:
      return isSetBaseFashionIds();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PlayerBaseInfo)
      return this.equals((PlayerBaseInfo)that);
    return false;
  }

  public boolean equals(PlayerBaseInfo that) {
    if (that == null)
      return false;

    boolean this_present_charId = true;
    boolean that_present_charId = true;
    if (this_present_charId || that_present_charId) {
      if (!(this_present_charId && that_present_charId))
        return false;
      if (this.charId != that.charId)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_sex = true && this.isSetSex();
    boolean that_present_sex = true && that.isSetSex();
    if (this_present_sex || that_present_sex) {
      if (!(this_present_sex && that_present_sex))
        return false;
      if (this.sex != that.sex)
        return false;
    }

    boolean this_present_headIcon = true && this.isSetHeadIcon();
    boolean that_present_headIcon = true && that.isSetHeadIcon();
    if (this_present_headIcon || that_present_headIcon) {
      if (!(this_present_headIcon && that_present_headIcon))
        return false;
      if (!this.headIcon.equals(that.headIcon))
        return false;
    }

    boolean this_present_level = true && this.isSetLevel();
    boolean that_present_level = true && that.isSetLevel();
    if (this_present_level || that_present_level) {
      if (!(this_present_level && that_present_level))
        return false;
      if (this.level != that.level)
        return false;
    }

    boolean this_present_popLevel = true && this.isSetPopLevel();
    boolean that_present_popLevel = true && that.isSetPopLevel();
    if (this_present_popLevel || that_present_popLevel) {
      if (!(this_present_popLevel && that_present_popLevel))
        return false;
      if (this.popLevel != that.popLevel)
        return false;
    }

    boolean this_present_vipLevel = true && this.isSetVipLevel();
    boolean that_present_vipLevel = true && that.isSetVipLevel();
    if (this_present_vipLevel || that_present_vipLevel) {
      if (!(this_present_vipLevel && that_present_vipLevel))
        return false;
      if (this.vipLevel != that.vipLevel)
        return false;
    }

    boolean this_present_tagId = true && this.isSetTagId();
    boolean that_present_tagId = true && that.isSetTagId();
    if (this_present_tagId || that_present_tagId) {
      if (!(this_present_tagId && that_present_tagId))
        return false;
      if (this.tagId != that.tagId)
        return false;
    }

    boolean this_present_guildId = true && this.isSetGuildId();
    boolean that_present_guildId = true && that.isSetGuildId();
    if (this_present_guildId || that_present_guildId) {
      if (!(this_present_guildId && that_present_guildId))
        return false;
      if (this.guildId != that.guildId)
        return false;
    }

    boolean this_present_guildName = true && this.isSetGuildName();
    boolean that_present_guildName = true && that.isSetGuildName();
    if (this_present_guildName || that_present_guildName) {
      if (!(this_present_guildName && that_present_guildName))
        return false;
      if (!this.guildName.equals(that.guildName))
        return false;
    }

    boolean this_present_baseFashionIds = true && this.isSetBaseFashionIds();
    boolean that_present_baseFashionIds = true && that.isSetBaseFashionIds();
    if (this_present_baseFashionIds || that_present_baseFashionIds) {
      if (!(this_present_baseFashionIds && that_present_baseFashionIds))
        return false;
      if (!this.baseFashionIds.equals(that.baseFashionIds))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(PlayerBaseInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    PlayerBaseInfo typedOther = (PlayerBaseInfo)other;

    lastComparison = Boolean.valueOf(isSetCharId()).compareTo(typedOther.isSetCharId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCharId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.charId, typedOther.charId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSex()).compareTo(typedOther.isSetSex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sex, typedOther.sex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeadIcon()).compareTo(typedOther.isSetHeadIcon());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeadIcon()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.headIcon, typedOther.headIcon);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLevel()).compareTo(typedOther.isSetLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.level, typedOther.level);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPopLevel()).compareTo(typedOther.isSetPopLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPopLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.popLevel, typedOther.popLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVipLevel()).compareTo(typedOther.isSetVipLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVipLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vipLevel, typedOther.vipLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTagId()).compareTo(typedOther.isSetTagId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTagId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagId, typedOther.tagId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGuildId()).compareTo(typedOther.isSetGuildId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGuildId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.guildId, typedOther.guildId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGuildName()).compareTo(typedOther.isSetGuildName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGuildName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.guildName, typedOther.guildName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBaseFashionIds()).compareTo(typedOther.isSetBaseFashionIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBaseFashionIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.baseFashionIds, typedOther.baseFashionIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PlayerBaseInfo(");
    boolean first = true;

    sb.append("charId:");
    sb.append(this.charId);
    first = false;
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetSex()) {
      if (!first) sb.append(", ");
      sb.append("sex:");
      sb.append(this.sex);
      first = false;
    }
    if (isSetHeadIcon()) {
      if (!first) sb.append(", ");
      sb.append("headIcon:");
      if (this.headIcon == null) {
        sb.append("null");
      } else {
        sb.append(this.headIcon);
      }
      first = false;
    }
    if (isSetLevel()) {
      if (!first) sb.append(", ");
      sb.append("level:");
      sb.append(this.level);
      first = false;
    }
    if (isSetPopLevel()) {
      if (!first) sb.append(", ");
      sb.append("popLevel:");
      sb.append(this.popLevel);
      first = false;
    }
    if (isSetVipLevel()) {
      if (!first) sb.append(", ");
      sb.append("vipLevel:");
      sb.append(this.vipLevel);
      first = false;
    }
    if (isSetTagId()) {
      if (!first) sb.append(", ");
      sb.append("tagId:");
      sb.append(this.tagId);
      first = false;
    }
    if (isSetGuildId()) {
      if (!first) sb.append(", ");
      sb.append("guildId:");
      sb.append(this.guildId);
      first = false;
    }
    if (isSetGuildName()) {
      if (!first) sb.append(", ");
      sb.append("guildName:");
      if (this.guildName == null) {
        sb.append("null");
      } else {
        sb.append(this.guildName);
      }
      first = false;
    }
    if (isSetBaseFashionIds()) {
      if (!first) sb.append(", ");
      sb.append("baseFashionIds:");
      if (this.baseFashionIds == null) {
        sb.append("null");
      } else {
        sb.append(this.baseFashionIds);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PlayerBaseInfoStandardSchemeFactory implements SchemeFactory {
    public PlayerBaseInfoStandardScheme getScheme() {
      return new PlayerBaseInfoStandardScheme();
    }
  }

  private static class PlayerBaseInfoStandardScheme extends StandardScheme<PlayerBaseInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PlayerBaseInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CHAR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.charId = iprot.readI64();
              struct.setCharIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SEX
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.sex = iprot.readByte();
              struct.setSexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // HEAD_ICON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.headIcon = iprot.readString();
              struct.setHeadIconIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.level = iprot.readI32();
              struct.setLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // POP_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.popLevel = iprot.readI16();
              struct.setPopLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // VIP_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.vipLevel = iprot.readByte();
              struct.setVipLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TAG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.tagId = iprot.readI16();
              struct.setTagIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // GUILD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.guildId = iprot.readI64();
              struct.setGuildIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // GUILD_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.guildName = iprot.readString();
              struct.setGuildNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // BASE_FASHION_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map40 = iprot.readMapBegin();
                struct.baseFashionIds = new HashMap<Byte,Integer>(2*_map40.size);
                for (int _i41 = 0; _i41 < _map40.size; ++_i41)
                {
                  byte _key42; // required
                  int _val43; // required
                  _key42 = iprot.readByte();
                  _val43 = iprot.readI32();
                  struct.baseFashionIds.put(_key42, _val43);
                }
                iprot.readMapEnd();
              }
              struct.setBaseFashionIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PlayerBaseInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CHAR_ID_FIELD_DESC);
      oprot.writeI64(struct.charId);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSex()) {
        oprot.writeFieldBegin(SEX_FIELD_DESC);
        oprot.writeByte(struct.sex);
        oprot.writeFieldEnd();
      }
      if (struct.headIcon != null) {
        if (struct.isSetHeadIcon()) {
          oprot.writeFieldBegin(HEAD_ICON_FIELD_DESC);
          oprot.writeString(struct.headIcon);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLevel()) {
        oprot.writeFieldBegin(LEVEL_FIELD_DESC);
        oprot.writeI32(struct.level);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPopLevel()) {
        oprot.writeFieldBegin(POP_LEVEL_FIELD_DESC);
        oprot.writeI16(struct.popLevel);
        oprot.writeFieldEnd();
      }
      if (struct.isSetVipLevel()) {
        oprot.writeFieldBegin(VIP_LEVEL_FIELD_DESC);
        oprot.writeByte(struct.vipLevel);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTagId()) {
        oprot.writeFieldBegin(TAG_ID_FIELD_DESC);
        oprot.writeI16(struct.tagId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetGuildId()) {
        oprot.writeFieldBegin(GUILD_ID_FIELD_DESC);
        oprot.writeI64(struct.guildId);
        oprot.writeFieldEnd();
      }
      if (struct.guildName != null) {
        if (struct.isSetGuildName()) {
          oprot.writeFieldBegin(GUILD_NAME_FIELD_DESC);
          oprot.writeString(struct.guildName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.baseFashionIds != null) {
        if (struct.isSetBaseFashionIds()) {
          oprot.writeFieldBegin(BASE_FASHION_IDS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.BYTE, org.apache.thrift.protocol.TType.I32, struct.baseFashionIds.size()));
            for (Map.Entry<Byte, Integer> _iter44 : struct.baseFashionIds.entrySet())
            {
              oprot.writeByte(_iter44.getKey());
              oprot.writeI32(_iter44.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PlayerBaseInfoTupleSchemeFactory implements SchemeFactory {
    public PlayerBaseInfoTupleScheme getScheme() {
      return new PlayerBaseInfoTupleScheme();
    }
  }

  private static class PlayerBaseInfoTupleScheme extends TupleScheme<PlayerBaseInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PlayerBaseInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCharId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetSex()) {
        optionals.set(2);
      }
      if (struct.isSetHeadIcon()) {
        optionals.set(3);
      }
      if (struct.isSetLevel()) {
        optionals.set(4);
      }
      if (struct.isSetPopLevel()) {
        optionals.set(5);
      }
      if (struct.isSetVipLevel()) {
        optionals.set(6);
      }
      if (struct.isSetTagId()) {
        optionals.set(7);
      }
      if (struct.isSetGuildId()) {
        optionals.set(8);
      }
      if (struct.isSetGuildName()) {
        optionals.set(9);
      }
      if (struct.isSetBaseFashionIds()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetCharId()) {
        oprot.writeI64(struct.charId);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetSex()) {
        oprot.writeByte(struct.sex);
      }
      if (struct.isSetHeadIcon()) {
        oprot.writeString(struct.headIcon);
      }
      if (struct.isSetLevel()) {
        oprot.writeI32(struct.level);
      }
      if (struct.isSetPopLevel()) {
        oprot.writeI16(struct.popLevel);
      }
      if (struct.isSetVipLevel()) {
        oprot.writeByte(struct.vipLevel);
      }
      if (struct.isSetTagId()) {
        oprot.writeI16(struct.tagId);
      }
      if (struct.isSetGuildId()) {
        oprot.writeI64(struct.guildId);
      }
      if (struct.isSetGuildName()) {
        oprot.writeString(struct.guildName);
      }
      if (struct.isSetBaseFashionIds()) {
        {
          oprot.writeI32(struct.baseFashionIds.size());
          for (Map.Entry<Byte, Integer> _iter45 : struct.baseFashionIds.entrySet())
          {
            oprot.writeByte(_iter45.getKey());
            oprot.writeI32(_iter45.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PlayerBaseInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.charId = iprot.readI64();
        struct.setCharIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.sex = iprot.readByte();
        struct.setSexIsSet(true);
      }
      if (incoming.get(3)) {
        struct.headIcon = iprot.readString();
        struct.setHeadIconIsSet(true);
      }
      if (incoming.get(4)) {
        struct.level = iprot.readI32();
        struct.setLevelIsSet(true);
      }
      if (incoming.get(5)) {
        struct.popLevel = iprot.readI16();
        struct.setPopLevelIsSet(true);
      }
      if (incoming.get(6)) {
        struct.vipLevel = iprot.readByte();
        struct.setVipLevelIsSet(true);
      }
      if (incoming.get(7)) {
        struct.tagId = iprot.readI16();
        struct.setTagIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.guildId = iprot.readI64();
        struct.setGuildIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.guildName = iprot.readString();
        struct.setGuildNameIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TMap _map46 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.BYTE, org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.baseFashionIds = new HashMap<Byte,Integer>(2*_map46.size);
          for (int _i47 = 0; _i47 < _map46.size; ++_i47)
          {
            byte _key48; // required
            int _val49; // required
            _key48 = iprot.readByte();
            _val49 = iprot.readI32();
            struct.baseFashionIds.put(_key48, _val49);
          }
        }
        struct.setBaseFashionIdsIsSet(true);
      }
    }
  }

}

