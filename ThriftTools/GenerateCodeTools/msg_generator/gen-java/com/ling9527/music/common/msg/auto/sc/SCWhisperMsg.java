/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SCWhisperMsg implements org.apache.thrift.TBase<SCWhisperMsg, SCWhisperMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCWhisperMsg");

  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.BYTE, (short)1);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SOUND_NAME_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("soundNameKey", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField FROM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fromName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField FROM_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fromAccountId", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField FROM_CHAR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fromCharId", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField FROM_SEX_FIELD_DESC = new org.apache.thrift.protocol.TField("fromSex", org.apache.thrift.protocol.TType.BYTE, (short)7);
  private static final org.apache.thrift.protocol.TField FROM_HEADER_ICON_FIELD_DESC = new org.apache.thrift.protocol.TField("fromHeaderIcon", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField FROM_VIP_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("fromVipLevel", org.apache.thrift.protocol.TType.BYTE, (short)9);
  private static final org.apache.thrift.protocol.TField FROM_PLAYER_FIELD_DESC = new org.apache.thrift.protocol.TField("fromPlayer", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField FROM_CHAT_FASHION_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("fromChatFashionIds", org.apache.thrift.protocol.TType.MAP, (short)11);
  private static final org.apache.thrift.protocol.TField IS_IN_ROOM_FIELD_DESC = new org.apache.thrift.protocol.TField("isInRoom", org.apache.thrift.protocol.TType.BOOL, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCWhisperMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCWhisperMsgTupleSchemeFactory());
  }

  public byte status; // required
  public String content; // required
  public String soundNameKey; // required
  public String fromName; // required
  public long fromAccountId; // required
  public long fromCharId; // required
  public byte fromSex; // required
  public String fromHeaderIcon; // required
  public byte fromVipLevel; // required
  public com.ling9527.music.common.msg.auto.PlayerBaseInfo fromPlayer; // required
  /**
   * 文字聊天时尚效果key:style val:id
   */
  public Map<Byte,Integer> fromChatFashionIds; // optional
  /**
   * 当前是否在房间中
   */
  public boolean isInRoom; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STATUS((short)1, "status"),
    CONTENT((short)2, "content"),
    SOUND_NAME_KEY((short)3, "soundNameKey"),
    FROM_NAME((short)4, "fromName"),
    FROM_ACCOUNT_ID((short)5, "fromAccountId"),
    FROM_CHAR_ID((short)6, "fromCharId"),
    FROM_SEX((short)7, "fromSex"),
    FROM_HEADER_ICON((short)8, "fromHeaderIcon"),
    FROM_VIP_LEVEL((short)9, "fromVipLevel"),
    FROM_PLAYER((short)10, "fromPlayer"),
    /**
     * 文字聊天时尚效果key:style val:id
     */
    FROM_CHAT_FASHION_IDS((short)11, "fromChatFashionIds"),
    /**
     * 当前是否在房间中
     */
    IS_IN_ROOM((short)12, "isInRoom");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATUS
          return STATUS;
        case 2: // CONTENT
          return CONTENT;
        case 3: // SOUND_NAME_KEY
          return SOUND_NAME_KEY;
        case 4: // FROM_NAME
          return FROM_NAME;
        case 5: // FROM_ACCOUNT_ID
          return FROM_ACCOUNT_ID;
        case 6: // FROM_CHAR_ID
          return FROM_CHAR_ID;
        case 7: // FROM_SEX
          return FROM_SEX;
        case 8: // FROM_HEADER_ICON
          return FROM_HEADER_ICON;
        case 9: // FROM_VIP_LEVEL
          return FROM_VIP_LEVEL;
        case 10: // FROM_PLAYER
          return FROM_PLAYER;
        case 11: // FROM_CHAT_FASHION_IDS
          return FROM_CHAT_FASHION_IDS;
        case 12: // IS_IN_ROOM
          return IS_IN_ROOM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STATUS_ISSET_ID = 0;
  private static final int __FROMACCOUNTID_ISSET_ID = 1;
  private static final int __FROMCHARID_ISSET_ID = 2;
  private static final int __FROMSEX_ISSET_ID = 3;
  private static final int __FROMVIPLEVEL_ISSET_ID = 4;
  private static final int __ISINROOM_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.FROM_CHAT_FASHION_IDS,_Fields.IS_IN_ROOM};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SOUND_NAME_KEY, new org.apache.thrift.meta_data.FieldMetaData("soundNameKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FROM_NAME, new org.apache.thrift.meta_data.FieldMetaData("fromName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FROM_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("fromAccountId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FROM_CHAR_ID, new org.apache.thrift.meta_data.FieldMetaData("fromCharId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FROM_SEX, new org.apache.thrift.meta_data.FieldMetaData("fromSex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.FROM_HEADER_ICON, new org.apache.thrift.meta_data.FieldMetaData("fromHeaderIcon", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FROM_VIP_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("fromVipLevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.FROM_PLAYER, new org.apache.thrift.meta_data.FieldMetaData("fromPlayer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.PlayerBaseInfo.class)));
    tmpMap.put(_Fields.FROM_CHAT_FASHION_IDS, new org.apache.thrift.meta_data.FieldMetaData("fromChatFashionIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.IS_IN_ROOM, new org.apache.thrift.meta_data.FieldMetaData("isInRoom", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCWhisperMsg.class, metaDataMap);
  }

  public SCWhisperMsg() {
  }

  public SCWhisperMsg(
    byte status,
    String content,
    String soundNameKey,
    String fromName,
    long fromAccountId,
    long fromCharId,
    byte fromSex,
    String fromHeaderIcon,
    byte fromVipLevel,
    com.ling9527.music.common.msg.auto.PlayerBaseInfo fromPlayer)
  {
    this();
    this.status = status;
    setStatusIsSet(true);
    this.content = content;
    this.soundNameKey = soundNameKey;
    this.fromName = fromName;
    this.fromAccountId = fromAccountId;
    setFromAccountIdIsSet(true);
    this.fromCharId = fromCharId;
    setFromCharIdIsSet(true);
    this.fromSex = fromSex;
    setFromSexIsSet(true);
    this.fromHeaderIcon = fromHeaderIcon;
    this.fromVipLevel = fromVipLevel;
    setFromVipLevelIsSet(true);
    this.fromPlayer = fromPlayer;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCWhisperMsg(SCWhisperMsg other) {
    __isset_bitfield = other.__isset_bitfield;
    this.status = other.status;
    if (other.isSetContent()) {
      this.content = other.content;
    }
    if (other.isSetSoundNameKey()) {
      this.soundNameKey = other.soundNameKey;
    }
    if (other.isSetFromName()) {
      this.fromName = other.fromName;
    }
    this.fromAccountId = other.fromAccountId;
    this.fromCharId = other.fromCharId;
    this.fromSex = other.fromSex;
    if (other.isSetFromHeaderIcon()) {
      this.fromHeaderIcon = other.fromHeaderIcon;
    }
    this.fromVipLevel = other.fromVipLevel;
    if (other.isSetFromPlayer()) {
      this.fromPlayer = new com.ling9527.music.common.msg.auto.PlayerBaseInfo(other.fromPlayer);
    }
    if (other.isSetFromChatFashionIds()) {
      Map<Byte,Integer> __this__fromChatFashionIds = new HashMap<Byte,Integer>();
      for (Map.Entry<Byte, Integer> other_element : other.fromChatFashionIds.entrySet()) {

        Byte other_element_key = other_element.getKey();
        Integer other_element_value = other_element.getValue();

        Byte __this__fromChatFashionIds_copy_key = other_element_key;

        Integer __this__fromChatFashionIds_copy_value = other_element_value;

        __this__fromChatFashionIds.put(__this__fromChatFashionIds_copy_key, __this__fromChatFashionIds_copy_value);
      }
      this.fromChatFashionIds = __this__fromChatFashionIds;
    }
    this.isInRoom = other.isInRoom;
  }

  public SCWhisperMsg deepCopy() {
    return new SCWhisperMsg(this);
  }

  @Override
  public void clear() {
    setStatusIsSet(false);
    this.status = 0;
    this.content = null;
    this.soundNameKey = null;
    this.fromName = null;
    setFromAccountIdIsSet(false);
    this.fromAccountId = 0;
    setFromCharIdIsSet(false);
    this.fromCharId = 0;
    setFromSexIsSet(false);
    this.fromSex = 0;
    this.fromHeaderIcon = null;
    setFromVipLevelIsSet(false);
    this.fromVipLevel = 0;
    this.fromPlayer = null;
    this.fromChatFashionIds = null;
    setIsInRoomIsSet(false);
    this.isInRoom = false;
  }

  public byte getStatus() {
    return this.status;
  }

  public SCWhisperMsg setStatus(byte status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getContent() {
    return this.content;
  }

  public SCWhisperMsg setContent(String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public String getSoundNameKey() {
    return this.soundNameKey;
  }

  public SCWhisperMsg setSoundNameKey(String soundNameKey) {
    this.soundNameKey = soundNameKey;
    return this;
  }

  public void unsetSoundNameKey() {
    this.soundNameKey = null;
  }

  /** Returns true if field soundNameKey is set (has been assigned a value) and false otherwise */
  public boolean isSetSoundNameKey() {
    return this.soundNameKey != null;
  }

  public void setSoundNameKeyIsSet(boolean value) {
    if (!value) {
      this.soundNameKey = null;
    }
  }

  public String getFromName() {
    return this.fromName;
  }

  public SCWhisperMsg setFromName(String fromName) {
    this.fromName = fromName;
    return this;
  }

  public void unsetFromName() {
    this.fromName = null;
  }

  /** Returns true if field fromName is set (has been assigned a value) and false otherwise */
  public boolean isSetFromName() {
    return this.fromName != null;
  }

  public void setFromNameIsSet(boolean value) {
    if (!value) {
      this.fromName = null;
    }
  }

  public long getFromAccountId() {
    return this.fromAccountId;
  }

  public SCWhisperMsg setFromAccountId(long fromAccountId) {
    this.fromAccountId = fromAccountId;
    setFromAccountIdIsSet(true);
    return this;
  }

  public void unsetFromAccountId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FROMACCOUNTID_ISSET_ID);
  }

  /** Returns true if field fromAccountId is set (has been assigned a value) and false otherwise */
  public boolean isSetFromAccountId() {
    return EncodingUtils.testBit(__isset_bitfield, __FROMACCOUNTID_ISSET_ID);
  }

  public void setFromAccountIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FROMACCOUNTID_ISSET_ID, value);
  }

  public long getFromCharId() {
    return this.fromCharId;
  }

  public SCWhisperMsg setFromCharId(long fromCharId) {
    this.fromCharId = fromCharId;
    setFromCharIdIsSet(true);
    return this;
  }

  public void unsetFromCharId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FROMCHARID_ISSET_ID);
  }

  /** Returns true if field fromCharId is set (has been assigned a value) and false otherwise */
  public boolean isSetFromCharId() {
    return EncodingUtils.testBit(__isset_bitfield, __FROMCHARID_ISSET_ID);
  }

  public void setFromCharIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FROMCHARID_ISSET_ID, value);
  }

  public byte getFromSex() {
    return this.fromSex;
  }

  public SCWhisperMsg setFromSex(byte fromSex) {
    this.fromSex = fromSex;
    setFromSexIsSet(true);
    return this;
  }

  public void unsetFromSex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FROMSEX_ISSET_ID);
  }

  /** Returns true if field fromSex is set (has been assigned a value) and false otherwise */
  public boolean isSetFromSex() {
    return EncodingUtils.testBit(__isset_bitfield, __FROMSEX_ISSET_ID);
  }

  public void setFromSexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FROMSEX_ISSET_ID, value);
  }

  public String getFromHeaderIcon() {
    return this.fromHeaderIcon;
  }

  public SCWhisperMsg setFromHeaderIcon(String fromHeaderIcon) {
    this.fromHeaderIcon = fromHeaderIcon;
    return this;
  }

  public void unsetFromHeaderIcon() {
    this.fromHeaderIcon = null;
  }

  /** Returns true if field fromHeaderIcon is set (has been assigned a value) and false otherwise */
  public boolean isSetFromHeaderIcon() {
    return this.fromHeaderIcon != null;
  }

  public void setFromHeaderIconIsSet(boolean value) {
    if (!value) {
      this.fromHeaderIcon = null;
    }
  }

  public byte getFromVipLevel() {
    return this.fromVipLevel;
  }

  public SCWhisperMsg setFromVipLevel(byte fromVipLevel) {
    this.fromVipLevel = fromVipLevel;
    setFromVipLevelIsSet(true);
    return this;
  }

  public void unsetFromVipLevel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FROMVIPLEVEL_ISSET_ID);
  }

  /** Returns true if field fromVipLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetFromVipLevel() {
    return EncodingUtils.testBit(__isset_bitfield, __FROMVIPLEVEL_ISSET_ID);
  }

  public void setFromVipLevelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FROMVIPLEVEL_ISSET_ID, value);
  }

  public com.ling9527.music.common.msg.auto.PlayerBaseInfo getFromPlayer() {
    return this.fromPlayer;
  }

  public SCWhisperMsg setFromPlayer(com.ling9527.music.common.msg.auto.PlayerBaseInfo fromPlayer) {
    this.fromPlayer = fromPlayer;
    return this;
  }

  public void unsetFromPlayer() {
    this.fromPlayer = null;
  }

  /** Returns true if field fromPlayer is set (has been assigned a value) and false otherwise */
  public boolean isSetFromPlayer() {
    return this.fromPlayer != null;
  }

  public void setFromPlayerIsSet(boolean value) {
    if (!value) {
      this.fromPlayer = null;
    }
  }

  public int getFromChatFashionIdsSize() {
    return (this.fromChatFashionIds == null) ? 0 : this.fromChatFashionIds.size();
  }

  public void putToFromChatFashionIds(byte key, int val) {
    if (this.fromChatFashionIds == null) {
      this.fromChatFashionIds = new HashMap<Byte,Integer>();
    }
    this.fromChatFashionIds.put(key, val);
  }

  /**
   * 文字聊天时尚效果key:style val:id
   */
  public Map<Byte,Integer> getFromChatFashionIds() {
    return this.fromChatFashionIds;
  }

  /**
   * 文字聊天时尚效果key:style val:id
   */
  public SCWhisperMsg setFromChatFashionIds(Map<Byte,Integer> fromChatFashionIds) {
    this.fromChatFashionIds = fromChatFashionIds;
    return this;
  }

  public void unsetFromChatFashionIds() {
    this.fromChatFashionIds = null;
  }

  /** Returns true if field fromChatFashionIds is set (has been assigned a value) and false otherwise */
  public boolean isSetFromChatFashionIds() {
    return this.fromChatFashionIds != null;
  }

  public void setFromChatFashionIdsIsSet(boolean value) {
    if (!value) {
      this.fromChatFashionIds = null;
    }
  }

  /**
   * 当前是否在房间中
   */
  public boolean isIsInRoom() {
    return this.isInRoom;
  }

  /**
   * 当前是否在房间中
   */
  public SCWhisperMsg setIsInRoom(boolean isInRoom) {
    this.isInRoom = isInRoom;
    setIsInRoomIsSet(true);
    return this;
  }

  public void unsetIsInRoom() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISINROOM_ISSET_ID);
  }

  /** Returns true if field isInRoom is set (has been assigned a value) and false otherwise */
  public boolean isSetIsInRoom() {
    return EncodingUtils.testBit(__isset_bitfield, __ISINROOM_ISSET_ID);
  }

  public void setIsInRoomIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISINROOM_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Byte)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case SOUND_NAME_KEY:
      if (value == null) {
        unsetSoundNameKey();
      } else {
        setSoundNameKey((String)value);
      }
      break;

    case FROM_NAME:
      if (value == null) {
        unsetFromName();
      } else {
        setFromName((String)value);
      }
      break;

    case FROM_ACCOUNT_ID:
      if (value == null) {
        unsetFromAccountId();
      } else {
        setFromAccountId((Long)value);
      }
      break;

    case FROM_CHAR_ID:
      if (value == null) {
        unsetFromCharId();
      } else {
        setFromCharId((Long)value);
      }
      break;

    case FROM_SEX:
      if (value == null) {
        unsetFromSex();
      } else {
        setFromSex((Byte)value);
      }
      break;

    case FROM_HEADER_ICON:
      if (value == null) {
        unsetFromHeaderIcon();
      } else {
        setFromHeaderIcon((String)value);
      }
      break;

    case FROM_VIP_LEVEL:
      if (value == null) {
        unsetFromVipLevel();
      } else {
        setFromVipLevel((Byte)value);
      }
      break;

    case FROM_PLAYER:
      if (value == null) {
        unsetFromPlayer();
      } else {
        setFromPlayer((com.ling9527.music.common.msg.auto.PlayerBaseInfo)value);
      }
      break;

    case FROM_CHAT_FASHION_IDS:
      if (value == null) {
        unsetFromChatFashionIds();
      } else {
        setFromChatFashionIds((Map<Byte,Integer>)value);
      }
      break;

    case IS_IN_ROOM:
      if (value == null) {
        unsetIsInRoom();
      } else {
        setIsInRoom((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STATUS:
      return Byte.valueOf(getStatus());

    case CONTENT:
      return getContent();

    case SOUND_NAME_KEY:
      return getSoundNameKey();

    case FROM_NAME:
      return getFromName();

    case FROM_ACCOUNT_ID:
      return Long.valueOf(getFromAccountId());

    case FROM_CHAR_ID:
      return Long.valueOf(getFromCharId());

    case FROM_SEX:
      return Byte.valueOf(getFromSex());

    case FROM_HEADER_ICON:
      return getFromHeaderIcon();

    case FROM_VIP_LEVEL:
      return Byte.valueOf(getFromVipLevel());

    case FROM_PLAYER:
      return getFromPlayer();

    case FROM_CHAT_FASHION_IDS:
      return getFromChatFashionIds();

    case IS_IN_ROOM:
      return Boolean.valueOf(isIsInRoom());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STATUS:
      return isSetStatus();
    case CONTENT:
      return isSetContent();
    case SOUND_NAME_KEY:
      return isSetSoundNameKey();
    case FROM_NAME:
      return isSetFromName();
    case FROM_ACCOUNT_ID:
      return isSetFromAccountId();
    case FROM_CHAR_ID:
      return isSetFromCharId();
    case FROM_SEX:
      return isSetFromSex();
    case FROM_HEADER_ICON:
      return isSetFromHeaderIcon();
    case FROM_VIP_LEVEL:
      return isSetFromVipLevel();
    case FROM_PLAYER:
      return isSetFromPlayer();
    case FROM_CHAT_FASHION_IDS:
      return isSetFromChatFashionIds();
    case IS_IN_ROOM:
      return isSetIsInRoom();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCWhisperMsg)
      return this.equals((SCWhisperMsg)that);
    return false;
  }

  public boolean equals(SCWhisperMsg that) {
    if (that == null)
      return false;

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_soundNameKey = true && this.isSetSoundNameKey();
    boolean that_present_soundNameKey = true && that.isSetSoundNameKey();
    if (this_present_soundNameKey || that_present_soundNameKey) {
      if (!(this_present_soundNameKey && that_present_soundNameKey))
        return false;
      if (!this.soundNameKey.equals(that.soundNameKey))
        return false;
    }

    boolean this_present_fromName = true && this.isSetFromName();
    boolean that_present_fromName = true && that.isSetFromName();
    if (this_present_fromName || that_present_fromName) {
      if (!(this_present_fromName && that_present_fromName))
        return false;
      if (!this.fromName.equals(that.fromName))
        return false;
    }

    boolean this_present_fromAccountId = true;
    boolean that_present_fromAccountId = true;
    if (this_present_fromAccountId || that_present_fromAccountId) {
      if (!(this_present_fromAccountId && that_present_fromAccountId))
        return false;
      if (this.fromAccountId != that.fromAccountId)
        return false;
    }

    boolean this_present_fromCharId = true;
    boolean that_present_fromCharId = true;
    if (this_present_fromCharId || that_present_fromCharId) {
      if (!(this_present_fromCharId && that_present_fromCharId))
        return false;
      if (this.fromCharId != that.fromCharId)
        return false;
    }

    boolean this_present_fromSex = true;
    boolean that_present_fromSex = true;
    if (this_present_fromSex || that_present_fromSex) {
      if (!(this_present_fromSex && that_present_fromSex))
        return false;
      if (this.fromSex != that.fromSex)
        return false;
    }

    boolean this_present_fromHeaderIcon = true && this.isSetFromHeaderIcon();
    boolean that_present_fromHeaderIcon = true && that.isSetFromHeaderIcon();
    if (this_present_fromHeaderIcon || that_present_fromHeaderIcon) {
      if (!(this_present_fromHeaderIcon && that_present_fromHeaderIcon))
        return false;
      if (!this.fromHeaderIcon.equals(that.fromHeaderIcon))
        return false;
    }

    boolean this_present_fromVipLevel = true;
    boolean that_present_fromVipLevel = true;
    if (this_present_fromVipLevel || that_present_fromVipLevel) {
      if (!(this_present_fromVipLevel && that_present_fromVipLevel))
        return false;
      if (this.fromVipLevel != that.fromVipLevel)
        return false;
    }

    boolean this_present_fromPlayer = true && this.isSetFromPlayer();
    boolean that_present_fromPlayer = true && that.isSetFromPlayer();
    if (this_present_fromPlayer || that_present_fromPlayer) {
      if (!(this_present_fromPlayer && that_present_fromPlayer))
        return false;
      if (!this.fromPlayer.equals(that.fromPlayer))
        return false;
    }

    boolean this_present_fromChatFashionIds = true && this.isSetFromChatFashionIds();
    boolean that_present_fromChatFashionIds = true && that.isSetFromChatFashionIds();
    if (this_present_fromChatFashionIds || that_present_fromChatFashionIds) {
      if (!(this_present_fromChatFashionIds && that_present_fromChatFashionIds))
        return false;
      if (!this.fromChatFashionIds.equals(that.fromChatFashionIds))
        return false;
    }

    boolean this_present_isInRoom = true && this.isSetIsInRoom();
    boolean that_present_isInRoom = true && that.isSetIsInRoom();
    if (this_present_isInRoom || that_present_isInRoom) {
      if (!(this_present_isInRoom && that_present_isInRoom))
        return false;
      if (this.isInRoom != that.isInRoom)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCWhisperMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCWhisperMsg typedOther = (SCWhisperMsg)other;

    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(typedOther.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, typedOther.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSoundNameKey()).compareTo(typedOther.isSetSoundNameKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSoundNameKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.soundNameKey, typedOther.soundNameKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFromName()).compareTo(typedOther.isSetFromName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromName, typedOther.fromName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFromAccountId()).compareTo(typedOther.isSetFromAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromAccountId, typedOther.fromAccountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFromCharId()).compareTo(typedOther.isSetFromCharId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromCharId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromCharId, typedOther.fromCharId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFromSex()).compareTo(typedOther.isSetFromSex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromSex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromSex, typedOther.fromSex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFromHeaderIcon()).compareTo(typedOther.isSetFromHeaderIcon());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromHeaderIcon()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromHeaderIcon, typedOther.fromHeaderIcon);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFromVipLevel()).compareTo(typedOther.isSetFromVipLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromVipLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromVipLevel, typedOther.fromVipLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFromPlayer()).compareTo(typedOther.isSetFromPlayer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromPlayer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromPlayer, typedOther.fromPlayer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFromChatFashionIds()).compareTo(typedOther.isSetFromChatFashionIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromChatFashionIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromChatFashionIds, typedOther.fromChatFashionIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsInRoom()).compareTo(typedOther.isSetIsInRoom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsInRoom()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isInRoom, typedOther.isInRoom);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCWhisperMsg(");
    boolean first = true;

    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      sb.append(this.content);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("soundNameKey:");
    if (this.soundNameKey == null) {
      sb.append("null");
    } else {
      sb.append(this.soundNameKey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fromName:");
    if (this.fromName == null) {
      sb.append("null");
    } else {
      sb.append(this.fromName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fromAccountId:");
    sb.append(this.fromAccountId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fromCharId:");
    sb.append(this.fromCharId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fromSex:");
    sb.append(this.fromSex);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fromHeaderIcon:");
    if (this.fromHeaderIcon == null) {
      sb.append("null");
    } else {
      sb.append(this.fromHeaderIcon);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fromVipLevel:");
    sb.append(this.fromVipLevel);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fromPlayer:");
    if (this.fromPlayer == null) {
      sb.append("null");
    } else {
      sb.append(this.fromPlayer);
    }
    first = false;
    if (isSetFromChatFashionIds()) {
      if (!first) sb.append(", ");
      sb.append("fromChatFashionIds:");
      if (this.fromChatFashionIds == null) {
        sb.append("null");
      } else {
        sb.append(this.fromChatFashionIds);
      }
      first = false;
    }
    if (isSetIsInRoom()) {
      if (!first) sb.append(", ");
      sb.append("isInRoom:");
      sb.append(this.isInRoom);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (fromPlayer != null) {
      fromPlayer.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCWhisperMsgStandardSchemeFactory implements SchemeFactory {
    public SCWhisperMsgStandardScheme getScheme() {
      return new SCWhisperMsgStandardScheme();
    }
  }

  private static class SCWhisperMsgStandardScheme extends StandardScheme<SCWhisperMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCWhisperMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.status = iprot.readByte();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SOUND_NAME_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.soundNameKey = iprot.readString();
              struct.setSoundNameKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FROM_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fromName = iprot.readString();
              struct.setFromNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FROM_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.fromAccountId = iprot.readI64();
              struct.setFromAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FROM_CHAR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.fromCharId = iprot.readI64();
              struct.setFromCharIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FROM_SEX
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.fromSex = iprot.readByte();
              struct.setFromSexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FROM_HEADER_ICON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fromHeaderIcon = iprot.readString();
              struct.setFromHeaderIconIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // FROM_VIP_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.fromVipLevel = iprot.readByte();
              struct.setFromVipLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // FROM_PLAYER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.fromPlayer = new com.ling9527.music.common.msg.auto.PlayerBaseInfo();
              struct.fromPlayer.read(iprot);
              struct.setFromPlayerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // FROM_CHAT_FASHION_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map34 = iprot.readMapBegin();
                struct.fromChatFashionIds = new HashMap<Byte,Integer>(2*_map34.size);
                for (int _i35 = 0; _i35 < _map34.size; ++_i35)
                {
                  byte _key36; // required
                  int _val37; // required
                  _key36 = iprot.readByte();
                  _val37 = iprot.readI32();
                  struct.fromChatFashionIds.put(_key36, _val37);
                }
                iprot.readMapEnd();
              }
              struct.setFromChatFashionIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // IS_IN_ROOM
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isInRoom = iprot.readBool();
              struct.setIsInRoomIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCWhisperMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeByte(struct.status);
      oprot.writeFieldEnd();
      if (struct.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeString(struct.content);
        oprot.writeFieldEnd();
      }
      if (struct.soundNameKey != null) {
        oprot.writeFieldBegin(SOUND_NAME_KEY_FIELD_DESC);
        oprot.writeString(struct.soundNameKey);
        oprot.writeFieldEnd();
      }
      if (struct.fromName != null) {
        oprot.writeFieldBegin(FROM_NAME_FIELD_DESC);
        oprot.writeString(struct.fromName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FROM_ACCOUNT_ID_FIELD_DESC);
      oprot.writeI64(struct.fromAccountId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FROM_CHAR_ID_FIELD_DESC);
      oprot.writeI64(struct.fromCharId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FROM_SEX_FIELD_DESC);
      oprot.writeByte(struct.fromSex);
      oprot.writeFieldEnd();
      if (struct.fromHeaderIcon != null) {
        oprot.writeFieldBegin(FROM_HEADER_ICON_FIELD_DESC);
        oprot.writeString(struct.fromHeaderIcon);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FROM_VIP_LEVEL_FIELD_DESC);
      oprot.writeByte(struct.fromVipLevel);
      oprot.writeFieldEnd();
      if (struct.fromPlayer != null) {
        oprot.writeFieldBegin(FROM_PLAYER_FIELD_DESC);
        struct.fromPlayer.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.fromChatFashionIds != null) {
        if (struct.isSetFromChatFashionIds()) {
          oprot.writeFieldBegin(FROM_CHAT_FASHION_IDS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.BYTE, org.apache.thrift.protocol.TType.I32, struct.fromChatFashionIds.size()));
            for (Map.Entry<Byte, Integer> _iter38 : struct.fromChatFashionIds.entrySet())
            {
              oprot.writeByte(_iter38.getKey());
              oprot.writeI32(_iter38.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsInRoom()) {
        oprot.writeFieldBegin(IS_IN_ROOM_FIELD_DESC);
        oprot.writeBool(struct.isInRoom);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCWhisperMsgTupleSchemeFactory implements SchemeFactory {
    public SCWhisperMsgTupleScheme getScheme() {
      return new SCWhisperMsgTupleScheme();
    }
  }

  private static class SCWhisperMsgTupleScheme extends TupleScheme<SCWhisperMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCWhisperMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetStatus()) {
        optionals.set(0);
      }
      if (struct.isSetContent()) {
        optionals.set(1);
      }
      if (struct.isSetSoundNameKey()) {
        optionals.set(2);
      }
      if (struct.isSetFromName()) {
        optionals.set(3);
      }
      if (struct.isSetFromAccountId()) {
        optionals.set(4);
      }
      if (struct.isSetFromCharId()) {
        optionals.set(5);
      }
      if (struct.isSetFromSex()) {
        optionals.set(6);
      }
      if (struct.isSetFromHeaderIcon()) {
        optionals.set(7);
      }
      if (struct.isSetFromVipLevel()) {
        optionals.set(8);
      }
      if (struct.isSetFromPlayer()) {
        optionals.set(9);
      }
      if (struct.isSetFromChatFashionIds()) {
        optionals.set(10);
      }
      if (struct.isSetIsInRoom()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetStatus()) {
        oprot.writeByte(struct.status);
      }
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
      if (struct.isSetSoundNameKey()) {
        oprot.writeString(struct.soundNameKey);
      }
      if (struct.isSetFromName()) {
        oprot.writeString(struct.fromName);
      }
      if (struct.isSetFromAccountId()) {
        oprot.writeI64(struct.fromAccountId);
      }
      if (struct.isSetFromCharId()) {
        oprot.writeI64(struct.fromCharId);
      }
      if (struct.isSetFromSex()) {
        oprot.writeByte(struct.fromSex);
      }
      if (struct.isSetFromHeaderIcon()) {
        oprot.writeString(struct.fromHeaderIcon);
      }
      if (struct.isSetFromVipLevel()) {
        oprot.writeByte(struct.fromVipLevel);
      }
      if (struct.isSetFromPlayer()) {
        struct.fromPlayer.write(oprot);
      }
      if (struct.isSetFromChatFashionIds()) {
        {
          oprot.writeI32(struct.fromChatFashionIds.size());
          for (Map.Entry<Byte, Integer> _iter39 : struct.fromChatFashionIds.entrySet())
          {
            oprot.writeByte(_iter39.getKey());
            oprot.writeI32(_iter39.getValue());
          }
        }
      }
      if (struct.isSetIsInRoom()) {
        oprot.writeBool(struct.isInRoom);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCWhisperMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.status = iprot.readByte();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(1)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
      if (incoming.get(2)) {
        struct.soundNameKey = iprot.readString();
        struct.setSoundNameKeyIsSet(true);
      }
      if (incoming.get(3)) {
        struct.fromName = iprot.readString();
        struct.setFromNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.fromAccountId = iprot.readI64();
        struct.setFromAccountIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.fromCharId = iprot.readI64();
        struct.setFromCharIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.fromSex = iprot.readByte();
        struct.setFromSexIsSet(true);
      }
      if (incoming.get(7)) {
        struct.fromHeaderIcon = iprot.readString();
        struct.setFromHeaderIconIsSet(true);
      }
      if (incoming.get(8)) {
        struct.fromVipLevel = iprot.readByte();
        struct.setFromVipLevelIsSet(true);
      }
      if (incoming.get(9)) {
        struct.fromPlayer = new com.ling9527.music.common.msg.auto.PlayerBaseInfo();
        struct.fromPlayer.read(iprot);
        struct.setFromPlayerIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TMap _map40 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.BYTE, org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.fromChatFashionIds = new HashMap<Byte,Integer>(2*_map40.size);
          for (int _i41 = 0; _i41 < _map40.size; ++_i41)
          {
            byte _key42; // required
            int _val43; // required
            _key42 = iprot.readByte();
            _val43 = iprot.readI32();
            struct.fromChatFashionIds.put(_key42, _val43);
          }
        }
        struct.setFromChatFashionIdsIsSet(true);
      }
      if (incoming.get(11)) {
        struct.isInRoom = iprot.readBool();
        struct.setIsInRoomIsSet(true);
      }
    }
  }

}

