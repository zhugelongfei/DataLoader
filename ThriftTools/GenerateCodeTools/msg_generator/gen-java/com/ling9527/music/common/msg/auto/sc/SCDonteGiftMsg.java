/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SCDonteGiftMsg implements org.apache.thrift.TBase<SCDonteGiftMsg, SCDonteGiftMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCDonteGiftMsg");

  private static final org.apache.thrift.protocol.TField ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("itemId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SEND_CHAR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sendCharId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField RECV_CHAR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("recvCharId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField FUNC_RESP_PARAM_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("funcRespParamList", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCDonteGiftMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCDonteGiftMsgTupleSchemeFactory());
  }

  public int itemId; // required
  public long sendCharId; // required
  public long recvCharId; // required
  public List<com.ling9527.music.common.msg.auto.FuncParam> funcRespParamList; // required
  public String content; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ITEM_ID((short)1, "itemId"),
    SEND_CHAR_ID((short)2, "sendCharId"),
    RECV_CHAR_ID((short)3, "recvCharId"),
    FUNC_RESP_PARAM_LIST((short)4, "funcRespParamList"),
    CONTENT((short)5, "content");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ITEM_ID
          return ITEM_ID;
        case 2: // SEND_CHAR_ID
          return SEND_CHAR_ID;
        case 3: // RECV_CHAR_ID
          return RECV_CHAR_ID;
        case 4: // FUNC_RESP_PARAM_LIST
          return FUNC_RESP_PARAM_LIST;
        case 5: // CONTENT
          return CONTENT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ITEMID_ISSET_ID = 0;
  private static final int __SENDCHARID_ISSET_ID = 1;
  private static final int __RECVCHARID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("itemId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SEND_CHAR_ID, new org.apache.thrift.meta_data.FieldMetaData("sendCharId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RECV_CHAR_ID, new org.apache.thrift.meta_data.FieldMetaData("recvCharId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FUNC_RESP_PARAM_LIST, new org.apache.thrift.meta_data.FieldMetaData("funcRespParamList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.FuncParam.class))));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCDonteGiftMsg.class, metaDataMap);
  }

  public SCDonteGiftMsg() {
  }

  public SCDonteGiftMsg(
    int itemId,
    long sendCharId,
    long recvCharId,
    List<com.ling9527.music.common.msg.auto.FuncParam> funcRespParamList,
    String content)
  {
    this();
    this.itemId = itemId;
    setItemIdIsSet(true);
    this.sendCharId = sendCharId;
    setSendCharIdIsSet(true);
    this.recvCharId = recvCharId;
    setRecvCharIdIsSet(true);
    this.funcRespParamList = funcRespParamList;
    this.content = content;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCDonteGiftMsg(SCDonteGiftMsg other) {
    __isset_bitfield = other.__isset_bitfield;
    this.itemId = other.itemId;
    this.sendCharId = other.sendCharId;
    this.recvCharId = other.recvCharId;
    if (other.isSetFuncRespParamList()) {
      List<com.ling9527.music.common.msg.auto.FuncParam> __this__funcRespParamList = new ArrayList<com.ling9527.music.common.msg.auto.FuncParam>();
      for (com.ling9527.music.common.msg.auto.FuncParam other_element : other.funcRespParamList) {
        __this__funcRespParamList.add(new com.ling9527.music.common.msg.auto.FuncParam(other_element));
      }
      this.funcRespParamList = __this__funcRespParamList;
    }
    if (other.isSetContent()) {
      this.content = other.content;
    }
  }

  public SCDonteGiftMsg deepCopy() {
    return new SCDonteGiftMsg(this);
  }

  @Override
  public void clear() {
    setItemIdIsSet(false);
    this.itemId = 0;
    setSendCharIdIsSet(false);
    this.sendCharId = 0;
    setRecvCharIdIsSet(false);
    this.recvCharId = 0;
    this.funcRespParamList = null;
    this.content = null;
  }

  public int getItemId() {
    return this.itemId;
  }

  public SCDonteGiftMsg setItemId(int itemId) {
    this.itemId = itemId;
    setItemIdIsSet(true);
    return this;
  }

  public void unsetItemId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ITEMID_ISSET_ID);
  }

  /** Returns true if field itemId is set (has been assigned a value) and false otherwise */
  public boolean isSetItemId() {
    return EncodingUtils.testBit(__isset_bitfield, __ITEMID_ISSET_ID);
  }

  public void setItemIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ITEMID_ISSET_ID, value);
  }

  public long getSendCharId() {
    return this.sendCharId;
  }

  public SCDonteGiftMsg setSendCharId(long sendCharId) {
    this.sendCharId = sendCharId;
    setSendCharIdIsSet(true);
    return this;
  }

  public void unsetSendCharId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SENDCHARID_ISSET_ID);
  }

  /** Returns true if field sendCharId is set (has been assigned a value) and false otherwise */
  public boolean isSetSendCharId() {
    return EncodingUtils.testBit(__isset_bitfield, __SENDCHARID_ISSET_ID);
  }

  public void setSendCharIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SENDCHARID_ISSET_ID, value);
  }

  public long getRecvCharId() {
    return this.recvCharId;
  }

  public SCDonteGiftMsg setRecvCharId(long recvCharId) {
    this.recvCharId = recvCharId;
    setRecvCharIdIsSet(true);
    return this;
  }

  public void unsetRecvCharId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECVCHARID_ISSET_ID);
  }

  /** Returns true if field recvCharId is set (has been assigned a value) and false otherwise */
  public boolean isSetRecvCharId() {
    return EncodingUtils.testBit(__isset_bitfield, __RECVCHARID_ISSET_ID);
  }

  public void setRecvCharIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECVCHARID_ISSET_ID, value);
  }

  public int getFuncRespParamListSize() {
    return (this.funcRespParamList == null) ? 0 : this.funcRespParamList.size();
  }

  public java.util.Iterator<com.ling9527.music.common.msg.auto.FuncParam> getFuncRespParamListIterator() {
    return (this.funcRespParamList == null) ? null : this.funcRespParamList.iterator();
  }

  public void addToFuncRespParamList(com.ling9527.music.common.msg.auto.FuncParam elem) {
    if (this.funcRespParamList == null) {
      this.funcRespParamList = new ArrayList<com.ling9527.music.common.msg.auto.FuncParam>();
    }
    this.funcRespParamList.add(elem);
  }

  public List<com.ling9527.music.common.msg.auto.FuncParam> getFuncRespParamList() {
    return this.funcRespParamList;
  }

  public SCDonteGiftMsg setFuncRespParamList(List<com.ling9527.music.common.msg.auto.FuncParam> funcRespParamList) {
    this.funcRespParamList = funcRespParamList;
    return this;
  }

  public void unsetFuncRespParamList() {
    this.funcRespParamList = null;
  }

  /** Returns true if field funcRespParamList is set (has been assigned a value) and false otherwise */
  public boolean isSetFuncRespParamList() {
    return this.funcRespParamList != null;
  }

  public void setFuncRespParamListIsSet(boolean value) {
    if (!value) {
      this.funcRespParamList = null;
    }
  }

  public String getContent() {
    return this.content;
  }

  public SCDonteGiftMsg setContent(String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ITEM_ID:
      if (value == null) {
        unsetItemId();
      } else {
        setItemId((Integer)value);
      }
      break;

    case SEND_CHAR_ID:
      if (value == null) {
        unsetSendCharId();
      } else {
        setSendCharId((Long)value);
      }
      break;

    case RECV_CHAR_ID:
      if (value == null) {
        unsetRecvCharId();
      } else {
        setRecvCharId((Long)value);
      }
      break;

    case FUNC_RESP_PARAM_LIST:
      if (value == null) {
        unsetFuncRespParamList();
      } else {
        setFuncRespParamList((List<com.ling9527.music.common.msg.auto.FuncParam>)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ITEM_ID:
      return Integer.valueOf(getItemId());

    case SEND_CHAR_ID:
      return Long.valueOf(getSendCharId());

    case RECV_CHAR_ID:
      return Long.valueOf(getRecvCharId());

    case FUNC_RESP_PARAM_LIST:
      return getFuncRespParamList();

    case CONTENT:
      return getContent();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ITEM_ID:
      return isSetItemId();
    case SEND_CHAR_ID:
      return isSetSendCharId();
    case RECV_CHAR_ID:
      return isSetRecvCharId();
    case FUNC_RESP_PARAM_LIST:
      return isSetFuncRespParamList();
    case CONTENT:
      return isSetContent();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCDonteGiftMsg)
      return this.equals((SCDonteGiftMsg)that);
    return false;
  }

  public boolean equals(SCDonteGiftMsg that) {
    if (that == null)
      return false;

    boolean this_present_itemId = true;
    boolean that_present_itemId = true;
    if (this_present_itemId || that_present_itemId) {
      if (!(this_present_itemId && that_present_itemId))
        return false;
      if (this.itemId != that.itemId)
        return false;
    }

    boolean this_present_sendCharId = true;
    boolean that_present_sendCharId = true;
    if (this_present_sendCharId || that_present_sendCharId) {
      if (!(this_present_sendCharId && that_present_sendCharId))
        return false;
      if (this.sendCharId != that.sendCharId)
        return false;
    }

    boolean this_present_recvCharId = true;
    boolean that_present_recvCharId = true;
    if (this_present_recvCharId || that_present_recvCharId) {
      if (!(this_present_recvCharId && that_present_recvCharId))
        return false;
      if (this.recvCharId != that.recvCharId)
        return false;
    }

    boolean this_present_funcRespParamList = true && this.isSetFuncRespParamList();
    boolean that_present_funcRespParamList = true && that.isSetFuncRespParamList();
    if (this_present_funcRespParamList || that_present_funcRespParamList) {
      if (!(this_present_funcRespParamList && that_present_funcRespParamList))
        return false;
      if (!this.funcRespParamList.equals(that.funcRespParamList))
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCDonteGiftMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCDonteGiftMsg typedOther = (SCDonteGiftMsg)other;

    lastComparison = Boolean.valueOf(isSetItemId()).compareTo(typedOther.isSetItemId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemId, typedOther.itemId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSendCharId()).compareTo(typedOther.isSetSendCharId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSendCharId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sendCharId, typedOther.sendCharId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecvCharId()).compareTo(typedOther.isSetRecvCharId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecvCharId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recvCharId, typedOther.recvCharId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFuncRespParamList()).compareTo(typedOther.isSetFuncRespParamList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFuncRespParamList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.funcRespParamList, typedOther.funcRespParamList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(typedOther.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, typedOther.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCDonteGiftMsg(");
    boolean first = true;

    sb.append("itemId:");
    sb.append(this.itemId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sendCharId:");
    sb.append(this.sendCharId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recvCharId:");
    sb.append(this.recvCharId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("funcRespParamList:");
    if (this.funcRespParamList == null) {
      sb.append("null");
    } else {
      sb.append(this.funcRespParamList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      sb.append(this.content);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCDonteGiftMsgStandardSchemeFactory implements SchemeFactory {
    public SCDonteGiftMsgStandardScheme getScheme() {
      return new SCDonteGiftMsgStandardScheme();
    }
  }

  private static class SCDonteGiftMsgStandardScheme extends StandardScheme<SCDonteGiftMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCDonteGiftMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ITEM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.itemId = iprot.readI32();
              struct.setItemIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SEND_CHAR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sendCharId = iprot.readI64();
              struct.setSendCharIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RECV_CHAR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.recvCharId = iprot.readI64();
              struct.setRecvCharIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FUNC_RESP_PARAM_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                struct.funcRespParamList = new ArrayList<com.ling9527.music.common.msg.auto.FuncParam>(_list40.size);
                for (int _i41 = 0; _i41 < _list40.size; ++_i41)
                {
                  com.ling9527.music.common.msg.auto.FuncParam _elem42; // required
                  _elem42 = new com.ling9527.music.common.msg.auto.FuncParam();
                  _elem42.read(iprot);
                  struct.funcRespParamList.add(_elem42);
                }
                iprot.readListEnd();
              }
              struct.setFuncRespParamListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCDonteGiftMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
      oprot.writeI32(struct.itemId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SEND_CHAR_ID_FIELD_DESC);
      oprot.writeI64(struct.sendCharId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECV_CHAR_ID_FIELD_DESC);
      oprot.writeI64(struct.recvCharId);
      oprot.writeFieldEnd();
      if (struct.funcRespParamList != null) {
        oprot.writeFieldBegin(FUNC_RESP_PARAM_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.funcRespParamList.size()));
          for (com.ling9527.music.common.msg.auto.FuncParam _iter43 : struct.funcRespParamList)
          {
            _iter43.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeString(struct.content);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCDonteGiftMsgTupleSchemeFactory implements SchemeFactory {
    public SCDonteGiftMsgTupleScheme getScheme() {
      return new SCDonteGiftMsgTupleScheme();
    }
  }

  private static class SCDonteGiftMsgTupleScheme extends TupleScheme<SCDonteGiftMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCDonteGiftMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetItemId()) {
        optionals.set(0);
      }
      if (struct.isSetSendCharId()) {
        optionals.set(1);
      }
      if (struct.isSetRecvCharId()) {
        optionals.set(2);
      }
      if (struct.isSetFuncRespParamList()) {
        optionals.set(3);
      }
      if (struct.isSetContent()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetItemId()) {
        oprot.writeI32(struct.itemId);
      }
      if (struct.isSetSendCharId()) {
        oprot.writeI64(struct.sendCharId);
      }
      if (struct.isSetRecvCharId()) {
        oprot.writeI64(struct.recvCharId);
      }
      if (struct.isSetFuncRespParamList()) {
        {
          oprot.writeI32(struct.funcRespParamList.size());
          for (com.ling9527.music.common.msg.auto.FuncParam _iter44 : struct.funcRespParamList)
          {
            _iter44.write(oprot);
          }
        }
      }
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCDonteGiftMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.itemId = iprot.readI32();
        struct.setItemIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sendCharId = iprot.readI64();
        struct.setSendCharIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.recvCharId = iprot.readI64();
        struct.setRecvCharIdIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.funcRespParamList = new ArrayList<com.ling9527.music.common.msg.auto.FuncParam>(_list45.size);
          for (int _i46 = 0; _i46 < _list45.size; ++_i46)
          {
            com.ling9527.music.common.msg.auto.FuncParam _elem47; // required
            _elem47 = new com.ling9527.music.common.msg.auto.FuncParam();
            _elem47.read(iprot);
            struct.funcRespParamList.add(_elem47);
          }
        }
        struct.setFuncRespParamListIsSet(true);
      }
      if (incoming.get(4)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
    }
  }

}

