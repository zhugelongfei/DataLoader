/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 返回赠送礼品数量
 */
public class SCDonateItemCountMsg implements org.apache.thrift.TBase<SCDonateItemCountMsg, SCDonateItemCountMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCDonateItemCountMsg");

  private static final org.apache.thrift.protocol.TField TARGET_CHAR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("targetCharId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("itemId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField GIFT_TIMES_FIELD_DESC = new org.apache.thrift.protocol.TField("giftTimes", org.apache.thrift.protocol.TType.BYTE, (short)3);
  private static final org.apache.thrift.protocol.TField MAX_GIFT_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("maxGiftCount", org.apache.thrift.protocol.TType.BYTE, (short)4);
  private static final org.apache.thrift.protocol.TField ADD_RELATION_VAL_LANG_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("addRelationValLangType", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCDonateItemCountMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCDonateItemCountMsgTupleSchemeFactory());
  }

  public long targetCharId; // required
  public int itemId; // required
  /**
   * 已赠送数量
   */
  public byte giftTimes; // required
  /**
   * 最大可赠送礼品数量
   */
  public byte maxGiftCount; // required
  /**
   * 增加关系值类型
   */
  public int addRelationValLangType; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TARGET_CHAR_ID((short)1, "targetCharId"),
    ITEM_ID((short)2, "itemId"),
    /**
     * 已赠送数量
     */
    GIFT_TIMES((short)3, "giftTimes"),
    /**
     * 最大可赠送礼品数量
     */
    MAX_GIFT_COUNT((short)4, "maxGiftCount"),
    /**
     * 增加关系值类型
     */
    ADD_RELATION_VAL_LANG_TYPE((short)5, "addRelationValLangType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TARGET_CHAR_ID
          return TARGET_CHAR_ID;
        case 2: // ITEM_ID
          return ITEM_ID;
        case 3: // GIFT_TIMES
          return GIFT_TIMES;
        case 4: // MAX_GIFT_COUNT
          return MAX_GIFT_COUNT;
        case 5: // ADD_RELATION_VAL_LANG_TYPE
          return ADD_RELATION_VAL_LANG_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TARGETCHARID_ISSET_ID = 0;
  private static final int __ITEMID_ISSET_ID = 1;
  private static final int __GIFTTIMES_ISSET_ID = 2;
  private static final int __MAXGIFTCOUNT_ISSET_ID = 3;
  private static final int __ADDRELATIONVALLANGTYPE_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.ADD_RELATION_VAL_LANG_TYPE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TARGET_CHAR_ID, new org.apache.thrift.meta_data.FieldMetaData("targetCharId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("itemId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GIFT_TIMES, new org.apache.thrift.meta_data.FieldMetaData("giftTimes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.MAX_GIFT_COUNT, new org.apache.thrift.meta_data.FieldMetaData("maxGiftCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.ADD_RELATION_VAL_LANG_TYPE, new org.apache.thrift.meta_data.FieldMetaData("addRelationValLangType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCDonateItemCountMsg.class, metaDataMap);
  }

  public SCDonateItemCountMsg() {
  }

  public SCDonateItemCountMsg(
    long targetCharId,
    int itemId,
    byte giftTimes,
    byte maxGiftCount)
  {
    this();
    this.targetCharId = targetCharId;
    setTargetCharIdIsSet(true);
    this.itemId = itemId;
    setItemIdIsSet(true);
    this.giftTimes = giftTimes;
    setGiftTimesIsSet(true);
    this.maxGiftCount = maxGiftCount;
    setMaxGiftCountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCDonateItemCountMsg(SCDonateItemCountMsg other) {
    __isset_bitfield = other.__isset_bitfield;
    this.targetCharId = other.targetCharId;
    this.itemId = other.itemId;
    this.giftTimes = other.giftTimes;
    this.maxGiftCount = other.maxGiftCount;
    this.addRelationValLangType = other.addRelationValLangType;
  }

  public SCDonateItemCountMsg deepCopy() {
    return new SCDonateItemCountMsg(this);
  }

  @Override
  public void clear() {
    setTargetCharIdIsSet(false);
    this.targetCharId = 0;
    setItemIdIsSet(false);
    this.itemId = 0;
    setGiftTimesIsSet(false);
    this.giftTimes = 0;
    setMaxGiftCountIsSet(false);
    this.maxGiftCount = 0;
    setAddRelationValLangTypeIsSet(false);
    this.addRelationValLangType = 0;
  }

  public long getTargetCharId() {
    return this.targetCharId;
  }

  public SCDonateItemCountMsg setTargetCharId(long targetCharId) {
    this.targetCharId = targetCharId;
    setTargetCharIdIsSet(true);
    return this;
  }

  public void unsetTargetCharId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TARGETCHARID_ISSET_ID);
  }

  /** Returns true if field targetCharId is set (has been assigned a value) and false otherwise */
  public boolean isSetTargetCharId() {
    return EncodingUtils.testBit(__isset_bitfield, __TARGETCHARID_ISSET_ID);
  }

  public void setTargetCharIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TARGETCHARID_ISSET_ID, value);
  }

  public int getItemId() {
    return this.itemId;
  }

  public SCDonateItemCountMsg setItemId(int itemId) {
    this.itemId = itemId;
    setItemIdIsSet(true);
    return this;
  }

  public void unsetItemId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ITEMID_ISSET_ID);
  }

  /** Returns true if field itemId is set (has been assigned a value) and false otherwise */
  public boolean isSetItemId() {
    return EncodingUtils.testBit(__isset_bitfield, __ITEMID_ISSET_ID);
  }

  public void setItemIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ITEMID_ISSET_ID, value);
  }

  /**
   * 已赠送数量
   */
  public byte getGiftTimes() {
    return this.giftTimes;
  }

  /**
   * 已赠送数量
   */
  public SCDonateItemCountMsg setGiftTimes(byte giftTimes) {
    this.giftTimes = giftTimes;
    setGiftTimesIsSet(true);
    return this;
  }

  public void unsetGiftTimes() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GIFTTIMES_ISSET_ID);
  }

  /** Returns true if field giftTimes is set (has been assigned a value) and false otherwise */
  public boolean isSetGiftTimes() {
    return EncodingUtils.testBit(__isset_bitfield, __GIFTTIMES_ISSET_ID);
  }

  public void setGiftTimesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GIFTTIMES_ISSET_ID, value);
  }

  /**
   * 最大可赠送礼品数量
   */
  public byte getMaxGiftCount() {
    return this.maxGiftCount;
  }

  /**
   * 最大可赠送礼品数量
   */
  public SCDonateItemCountMsg setMaxGiftCount(byte maxGiftCount) {
    this.maxGiftCount = maxGiftCount;
    setMaxGiftCountIsSet(true);
    return this;
  }

  public void unsetMaxGiftCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXGIFTCOUNT_ISSET_ID);
  }

  /** Returns true if field maxGiftCount is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxGiftCount() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXGIFTCOUNT_ISSET_ID);
  }

  public void setMaxGiftCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXGIFTCOUNT_ISSET_ID, value);
  }

  /**
   * 增加关系值类型
   */
  public int getAddRelationValLangType() {
    return this.addRelationValLangType;
  }

  /**
   * 增加关系值类型
   */
  public SCDonateItemCountMsg setAddRelationValLangType(int addRelationValLangType) {
    this.addRelationValLangType = addRelationValLangType;
    setAddRelationValLangTypeIsSet(true);
    return this;
  }

  public void unsetAddRelationValLangType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ADDRELATIONVALLANGTYPE_ISSET_ID);
  }

  /** Returns true if field addRelationValLangType is set (has been assigned a value) and false otherwise */
  public boolean isSetAddRelationValLangType() {
    return EncodingUtils.testBit(__isset_bitfield, __ADDRELATIONVALLANGTYPE_ISSET_ID);
  }

  public void setAddRelationValLangTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ADDRELATIONVALLANGTYPE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TARGET_CHAR_ID:
      if (value == null) {
        unsetTargetCharId();
      } else {
        setTargetCharId((Long)value);
      }
      break;

    case ITEM_ID:
      if (value == null) {
        unsetItemId();
      } else {
        setItemId((Integer)value);
      }
      break;

    case GIFT_TIMES:
      if (value == null) {
        unsetGiftTimes();
      } else {
        setGiftTimes((Byte)value);
      }
      break;

    case MAX_GIFT_COUNT:
      if (value == null) {
        unsetMaxGiftCount();
      } else {
        setMaxGiftCount((Byte)value);
      }
      break;

    case ADD_RELATION_VAL_LANG_TYPE:
      if (value == null) {
        unsetAddRelationValLangType();
      } else {
        setAddRelationValLangType((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TARGET_CHAR_ID:
      return Long.valueOf(getTargetCharId());

    case ITEM_ID:
      return Integer.valueOf(getItemId());

    case GIFT_TIMES:
      return Byte.valueOf(getGiftTimes());

    case MAX_GIFT_COUNT:
      return Byte.valueOf(getMaxGiftCount());

    case ADD_RELATION_VAL_LANG_TYPE:
      return Integer.valueOf(getAddRelationValLangType());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TARGET_CHAR_ID:
      return isSetTargetCharId();
    case ITEM_ID:
      return isSetItemId();
    case GIFT_TIMES:
      return isSetGiftTimes();
    case MAX_GIFT_COUNT:
      return isSetMaxGiftCount();
    case ADD_RELATION_VAL_LANG_TYPE:
      return isSetAddRelationValLangType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCDonateItemCountMsg)
      return this.equals((SCDonateItemCountMsg)that);
    return false;
  }

  public boolean equals(SCDonateItemCountMsg that) {
    if (that == null)
      return false;

    boolean this_present_targetCharId = true;
    boolean that_present_targetCharId = true;
    if (this_present_targetCharId || that_present_targetCharId) {
      if (!(this_present_targetCharId && that_present_targetCharId))
        return false;
      if (this.targetCharId != that.targetCharId)
        return false;
    }

    boolean this_present_itemId = true;
    boolean that_present_itemId = true;
    if (this_present_itemId || that_present_itemId) {
      if (!(this_present_itemId && that_present_itemId))
        return false;
      if (this.itemId != that.itemId)
        return false;
    }

    boolean this_present_giftTimes = true;
    boolean that_present_giftTimes = true;
    if (this_present_giftTimes || that_present_giftTimes) {
      if (!(this_present_giftTimes && that_present_giftTimes))
        return false;
      if (this.giftTimes != that.giftTimes)
        return false;
    }

    boolean this_present_maxGiftCount = true;
    boolean that_present_maxGiftCount = true;
    if (this_present_maxGiftCount || that_present_maxGiftCount) {
      if (!(this_present_maxGiftCount && that_present_maxGiftCount))
        return false;
      if (this.maxGiftCount != that.maxGiftCount)
        return false;
    }

    boolean this_present_addRelationValLangType = true && this.isSetAddRelationValLangType();
    boolean that_present_addRelationValLangType = true && that.isSetAddRelationValLangType();
    if (this_present_addRelationValLangType || that_present_addRelationValLangType) {
      if (!(this_present_addRelationValLangType && that_present_addRelationValLangType))
        return false;
      if (this.addRelationValLangType != that.addRelationValLangType)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCDonateItemCountMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCDonateItemCountMsg typedOther = (SCDonateItemCountMsg)other;

    lastComparison = Boolean.valueOf(isSetTargetCharId()).compareTo(typedOther.isSetTargetCharId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTargetCharId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targetCharId, typedOther.targetCharId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItemId()).compareTo(typedOther.isSetItemId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemId, typedOther.itemId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGiftTimes()).compareTo(typedOther.isSetGiftTimes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGiftTimes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.giftTimes, typedOther.giftTimes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxGiftCount()).compareTo(typedOther.isSetMaxGiftCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxGiftCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxGiftCount, typedOther.maxGiftCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddRelationValLangType()).compareTo(typedOther.isSetAddRelationValLangType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddRelationValLangType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addRelationValLangType, typedOther.addRelationValLangType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCDonateItemCountMsg(");
    boolean first = true;

    sb.append("targetCharId:");
    sb.append(this.targetCharId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("itemId:");
    sb.append(this.itemId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("giftTimes:");
    sb.append(this.giftTimes);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxGiftCount:");
    sb.append(this.maxGiftCount);
    first = false;
    if (isSetAddRelationValLangType()) {
      if (!first) sb.append(", ");
      sb.append("addRelationValLangType:");
      sb.append(this.addRelationValLangType);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCDonateItemCountMsgStandardSchemeFactory implements SchemeFactory {
    public SCDonateItemCountMsgStandardScheme getScheme() {
      return new SCDonateItemCountMsgStandardScheme();
    }
  }

  private static class SCDonateItemCountMsgStandardScheme extends StandardScheme<SCDonateItemCountMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCDonateItemCountMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TARGET_CHAR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.targetCharId = iprot.readI64();
              struct.setTargetCharIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ITEM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.itemId = iprot.readI32();
              struct.setItemIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // GIFT_TIMES
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.giftTimes = iprot.readByte();
              struct.setGiftTimesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MAX_GIFT_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.maxGiftCount = iprot.readByte();
              struct.setMaxGiftCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ADD_RELATION_VAL_LANG_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.addRelationValLangType = iprot.readI32();
              struct.setAddRelationValLangTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCDonateItemCountMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TARGET_CHAR_ID_FIELD_DESC);
      oprot.writeI64(struct.targetCharId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
      oprot.writeI32(struct.itemId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GIFT_TIMES_FIELD_DESC);
      oprot.writeByte(struct.giftTimes);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_GIFT_COUNT_FIELD_DESC);
      oprot.writeByte(struct.maxGiftCount);
      oprot.writeFieldEnd();
      if (struct.isSetAddRelationValLangType()) {
        oprot.writeFieldBegin(ADD_RELATION_VAL_LANG_TYPE_FIELD_DESC);
        oprot.writeI32(struct.addRelationValLangType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCDonateItemCountMsgTupleSchemeFactory implements SchemeFactory {
    public SCDonateItemCountMsgTupleScheme getScheme() {
      return new SCDonateItemCountMsgTupleScheme();
    }
  }

  private static class SCDonateItemCountMsgTupleScheme extends TupleScheme<SCDonateItemCountMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCDonateItemCountMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTargetCharId()) {
        optionals.set(0);
      }
      if (struct.isSetItemId()) {
        optionals.set(1);
      }
      if (struct.isSetGiftTimes()) {
        optionals.set(2);
      }
      if (struct.isSetMaxGiftCount()) {
        optionals.set(3);
      }
      if (struct.isSetAddRelationValLangType()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetTargetCharId()) {
        oprot.writeI64(struct.targetCharId);
      }
      if (struct.isSetItemId()) {
        oprot.writeI32(struct.itemId);
      }
      if (struct.isSetGiftTimes()) {
        oprot.writeByte(struct.giftTimes);
      }
      if (struct.isSetMaxGiftCount()) {
        oprot.writeByte(struct.maxGiftCount);
      }
      if (struct.isSetAddRelationValLangType()) {
        oprot.writeI32(struct.addRelationValLangType);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCDonateItemCountMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.targetCharId = iprot.readI64();
        struct.setTargetCharIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.itemId = iprot.readI32();
        struct.setItemIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.giftTimes = iprot.readByte();
        struct.setGiftTimesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.maxGiftCount = iprot.readByte();
        struct.setMaxGiftCountIsSet(true);
      }
      if (incoming.get(4)) {
        struct.addRelationValLangType = iprot.readI32();
        struct.setAddRelationValLangTypeIsSet(true);
      }
    }
  }

}

