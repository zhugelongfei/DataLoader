/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.cs;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CSClickMoveMsg implements org.apache.thrift.TBase<CSClickMoveMsg, CSClickMoveMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CSClickMoveMsg");

  private static final org.apache.thrift.protocol.TField START_X_FIELD_DESC = new org.apache.thrift.protocol.TField("startX", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField START_Y_FIELD_DESC = new org.apache.thrift.protocol.TField("startY", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField START_Z_FIELD_DESC = new org.apache.thrift.protocol.TField("startZ", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField END_X_FIELD_DESC = new org.apache.thrift.protocol.TField("endX", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField END_Y_FIELD_DESC = new org.apache.thrift.protocol.TField("endY", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField END_Z_FIELD_DESC = new org.apache.thrift.protocol.TField("endZ", org.apache.thrift.protocol.TType.DOUBLE, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CSClickMoveMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CSClickMoveMsgTupleSchemeFactory());
  }

  public double startX; // required
  public double startY; // required
  public double startZ; // required
  public double endX; // required
  public double endY; // required
  public double endZ; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    START_X((short)1, "startX"),
    START_Y((short)2, "startY"),
    START_Z((short)3, "startZ"),
    END_X((short)4, "endX"),
    END_Y((short)5, "endY"),
    END_Z((short)6, "endZ");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // START_X
          return START_X;
        case 2: // START_Y
          return START_Y;
        case 3: // START_Z
          return START_Z;
        case 4: // END_X
          return END_X;
        case 5: // END_Y
          return END_Y;
        case 6: // END_Z
          return END_Z;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STARTX_ISSET_ID = 0;
  private static final int __STARTY_ISSET_ID = 1;
  private static final int __STARTZ_ISSET_ID = 2;
  private static final int __ENDX_ISSET_ID = 3;
  private static final int __ENDY_ISSET_ID = 4;
  private static final int __ENDZ_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.START_X, new org.apache.thrift.meta_data.FieldMetaData("startX", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.START_Y, new org.apache.thrift.meta_data.FieldMetaData("startY", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.START_Z, new org.apache.thrift.meta_data.FieldMetaData("startZ", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.END_X, new org.apache.thrift.meta_data.FieldMetaData("endX", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.END_Y, new org.apache.thrift.meta_data.FieldMetaData("endY", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.END_Z, new org.apache.thrift.meta_data.FieldMetaData("endZ", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CSClickMoveMsg.class, metaDataMap);
  }

  public CSClickMoveMsg() {
  }

  public CSClickMoveMsg(
    double startX,
    double startY,
    double startZ,
    double endX,
    double endY,
    double endZ)
  {
    this();
    this.startX = startX;
    setStartXIsSet(true);
    this.startY = startY;
    setStartYIsSet(true);
    this.startZ = startZ;
    setStartZIsSet(true);
    this.endX = endX;
    setEndXIsSet(true);
    this.endY = endY;
    setEndYIsSet(true);
    this.endZ = endZ;
    setEndZIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CSClickMoveMsg(CSClickMoveMsg other) {
    __isset_bitfield = other.__isset_bitfield;
    this.startX = other.startX;
    this.startY = other.startY;
    this.startZ = other.startZ;
    this.endX = other.endX;
    this.endY = other.endY;
    this.endZ = other.endZ;
  }

  public CSClickMoveMsg deepCopy() {
    return new CSClickMoveMsg(this);
  }

  @Override
  public void clear() {
    setStartXIsSet(false);
    this.startX = 0.0;
    setStartYIsSet(false);
    this.startY = 0.0;
    setStartZIsSet(false);
    this.startZ = 0.0;
    setEndXIsSet(false);
    this.endX = 0.0;
    setEndYIsSet(false);
    this.endY = 0.0;
    setEndZIsSet(false);
    this.endZ = 0.0;
  }

  public double getStartX() {
    return this.startX;
  }

  public CSClickMoveMsg setStartX(double startX) {
    this.startX = startX;
    setStartXIsSet(true);
    return this;
  }

  public void unsetStartX() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTX_ISSET_ID);
  }

  /** Returns true if field startX is set (has been assigned a value) and false otherwise */
  public boolean isSetStartX() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTX_ISSET_ID);
  }

  public void setStartXIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTX_ISSET_ID, value);
  }

  public double getStartY() {
    return this.startY;
  }

  public CSClickMoveMsg setStartY(double startY) {
    this.startY = startY;
    setStartYIsSet(true);
    return this;
  }

  public void unsetStartY() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTY_ISSET_ID);
  }

  /** Returns true if field startY is set (has been assigned a value) and false otherwise */
  public boolean isSetStartY() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTY_ISSET_ID);
  }

  public void setStartYIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTY_ISSET_ID, value);
  }

  public double getStartZ() {
    return this.startZ;
  }

  public CSClickMoveMsg setStartZ(double startZ) {
    this.startZ = startZ;
    setStartZIsSet(true);
    return this;
  }

  public void unsetStartZ() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTZ_ISSET_ID);
  }

  /** Returns true if field startZ is set (has been assigned a value) and false otherwise */
  public boolean isSetStartZ() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTZ_ISSET_ID);
  }

  public void setStartZIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTZ_ISSET_ID, value);
  }

  public double getEndX() {
    return this.endX;
  }

  public CSClickMoveMsg setEndX(double endX) {
    this.endX = endX;
    setEndXIsSet(true);
    return this;
  }

  public void unsetEndX() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDX_ISSET_ID);
  }

  /** Returns true if field endX is set (has been assigned a value) and false otherwise */
  public boolean isSetEndX() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDX_ISSET_ID);
  }

  public void setEndXIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDX_ISSET_ID, value);
  }

  public double getEndY() {
    return this.endY;
  }

  public CSClickMoveMsg setEndY(double endY) {
    this.endY = endY;
    setEndYIsSet(true);
    return this;
  }

  public void unsetEndY() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDY_ISSET_ID);
  }

  /** Returns true if field endY is set (has been assigned a value) and false otherwise */
  public boolean isSetEndY() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDY_ISSET_ID);
  }

  public void setEndYIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDY_ISSET_ID, value);
  }

  public double getEndZ() {
    return this.endZ;
  }

  public CSClickMoveMsg setEndZ(double endZ) {
    this.endZ = endZ;
    setEndZIsSet(true);
    return this;
  }

  public void unsetEndZ() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDZ_ISSET_ID);
  }

  /** Returns true if field endZ is set (has been assigned a value) and false otherwise */
  public boolean isSetEndZ() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDZ_ISSET_ID);
  }

  public void setEndZIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDZ_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case START_X:
      if (value == null) {
        unsetStartX();
      } else {
        setStartX((Double)value);
      }
      break;

    case START_Y:
      if (value == null) {
        unsetStartY();
      } else {
        setStartY((Double)value);
      }
      break;

    case START_Z:
      if (value == null) {
        unsetStartZ();
      } else {
        setStartZ((Double)value);
      }
      break;

    case END_X:
      if (value == null) {
        unsetEndX();
      } else {
        setEndX((Double)value);
      }
      break;

    case END_Y:
      if (value == null) {
        unsetEndY();
      } else {
        setEndY((Double)value);
      }
      break;

    case END_Z:
      if (value == null) {
        unsetEndZ();
      } else {
        setEndZ((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case START_X:
      return Double.valueOf(getStartX());

    case START_Y:
      return Double.valueOf(getStartY());

    case START_Z:
      return Double.valueOf(getStartZ());

    case END_X:
      return Double.valueOf(getEndX());

    case END_Y:
      return Double.valueOf(getEndY());

    case END_Z:
      return Double.valueOf(getEndZ());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case START_X:
      return isSetStartX();
    case START_Y:
      return isSetStartY();
    case START_Z:
      return isSetStartZ();
    case END_X:
      return isSetEndX();
    case END_Y:
      return isSetEndY();
    case END_Z:
      return isSetEndZ();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CSClickMoveMsg)
      return this.equals((CSClickMoveMsg)that);
    return false;
  }

  public boolean equals(CSClickMoveMsg that) {
    if (that == null)
      return false;

    boolean this_present_startX = true;
    boolean that_present_startX = true;
    if (this_present_startX || that_present_startX) {
      if (!(this_present_startX && that_present_startX))
        return false;
      if (this.startX != that.startX)
        return false;
    }

    boolean this_present_startY = true;
    boolean that_present_startY = true;
    if (this_present_startY || that_present_startY) {
      if (!(this_present_startY && that_present_startY))
        return false;
      if (this.startY != that.startY)
        return false;
    }

    boolean this_present_startZ = true;
    boolean that_present_startZ = true;
    if (this_present_startZ || that_present_startZ) {
      if (!(this_present_startZ && that_present_startZ))
        return false;
      if (this.startZ != that.startZ)
        return false;
    }

    boolean this_present_endX = true;
    boolean that_present_endX = true;
    if (this_present_endX || that_present_endX) {
      if (!(this_present_endX && that_present_endX))
        return false;
      if (this.endX != that.endX)
        return false;
    }

    boolean this_present_endY = true;
    boolean that_present_endY = true;
    if (this_present_endY || that_present_endY) {
      if (!(this_present_endY && that_present_endY))
        return false;
      if (this.endY != that.endY)
        return false;
    }

    boolean this_present_endZ = true;
    boolean that_present_endZ = true;
    if (this_present_endZ || that_present_endZ) {
      if (!(this_present_endZ && that_present_endZ))
        return false;
      if (this.endZ != that.endZ)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(CSClickMoveMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CSClickMoveMsg typedOther = (CSClickMoveMsg)other;

    lastComparison = Boolean.valueOf(isSetStartX()).compareTo(typedOther.isSetStartX());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartX()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startX, typedOther.startX);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartY()).compareTo(typedOther.isSetStartY());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartY()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startY, typedOther.startY);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartZ()).compareTo(typedOther.isSetStartZ());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartZ()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startZ, typedOther.startZ);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndX()).compareTo(typedOther.isSetEndX());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndX()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endX, typedOther.endX);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndY()).compareTo(typedOther.isSetEndY());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndY()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endY, typedOther.endY);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndZ()).compareTo(typedOther.isSetEndZ());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndZ()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endZ, typedOther.endZ);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CSClickMoveMsg(");
    boolean first = true;

    sb.append("startX:");
    sb.append(this.startX);
    first = false;
    if (!first) sb.append(", ");
    sb.append("startY:");
    sb.append(this.startY);
    first = false;
    if (!first) sb.append(", ");
    sb.append("startZ:");
    sb.append(this.startZ);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endX:");
    sb.append(this.endX);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endY:");
    sb.append(this.endY);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endZ:");
    sb.append(this.endZ);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CSClickMoveMsgStandardSchemeFactory implements SchemeFactory {
    public CSClickMoveMsgStandardScheme getScheme() {
      return new CSClickMoveMsgStandardScheme();
    }
  }

  private static class CSClickMoveMsgStandardScheme extends StandardScheme<CSClickMoveMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CSClickMoveMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // START_X
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.startX = iprot.readDouble();
              struct.setStartXIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // START_Y
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.startY = iprot.readDouble();
              struct.setStartYIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // START_Z
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.startZ = iprot.readDouble();
              struct.setStartZIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // END_X
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.endX = iprot.readDouble();
              struct.setEndXIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // END_Y
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.endY = iprot.readDouble();
              struct.setEndYIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // END_Z
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.endZ = iprot.readDouble();
              struct.setEndZIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CSClickMoveMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(START_X_FIELD_DESC);
      oprot.writeDouble(struct.startX);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(START_Y_FIELD_DESC);
      oprot.writeDouble(struct.startY);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(START_Z_FIELD_DESC);
      oprot.writeDouble(struct.startZ);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(END_X_FIELD_DESC);
      oprot.writeDouble(struct.endX);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(END_Y_FIELD_DESC);
      oprot.writeDouble(struct.endY);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(END_Z_FIELD_DESC);
      oprot.writeDouble(struct.endZ);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CSClickMoveMsgTupleSchemeFactory implements SchemeFactory {
    public CSClickMoveMsgTupleScheme getScheme() {
      return new CSClickMoveMsgTupleScheme();
    }
  }

  private static class CSClickMoveMsgTupleScheme extends TupleScheme<CSClickMoveMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CSClickMoveMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetStartX()) {
        optionals.set(0);
      }
      if (struct.isSetStartY()) {
        optionals.set(1);
      }
      if (struct.isSetStartZ()) {
        optionals.set(2);
      }
      if (struct.isSetEndX()) {
        optionals.set(3);
      }
      if (struct.isSetEndY()) {
        optionals.set(4);
      }
      if (struct.isSetEndZ()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetStartX()) {
        oprot.writeDouble(struct.startX);
      }
      if (struct.isSetStartY()) {
        oprot.writeDouble(struct.startY);
      }
      if (struct.isSetStartZ()) {
        oprot.writeDouble(struct.startZ);
      }
      if (struct.isSetEndX()) {
        oprot.writeDouble(struct.endX);
      }
      if (struct.isSetEndY()) {
        oprot.writeDouble(struct.endY);
      }
      if (struct.isSetEndZ()) {
        oprot.writeDouble(struct.endZ);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CSClickMoveMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.startX = iprot.readDouble();
        struct.setStartXIsSet(true);
      }
      if (incoming.get(1)) {
        struct.startY = iprot.readDouble();
        struct.setStartYIsSet(true);
      }
      if (incoming.get(2)) {
        struct.startZ = iprot.readDouble();
        struct.setStartZIsSet(true);
      }
      if (incoming.get(3)) {
        struct.endX = iprot.readDouble();
        struct.setEndXIsSet(true);
      }
      if (incoming.get(4)) {
        struct.endY = iprot.readDouble();
        struct.setEndYIsSet(true);
      }
      if (incoming.get(5)) {
        struct.endZ = iprot.readDouble();
        struct.setEndZIsSet(true);
      }
    }
  }

}

