/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SCComposeActivityMsg implements org.apache.thrift.TBase<SCComposeActivityMsg, SCComposeActivityMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCComposeActivityMsg");

  private static final org.apache.thrift.protocol.TField ACTIVITY_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("activityList", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField ACTIVITY_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("activityCount", org.apache.thrift.protocol.TType.I16, (short)2);
  private static final org.apache.thrift.protocol.TField ACTIVITY_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("activityVersion", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("index", org.apache.thrift.protocol.TType.BYTE, (short)4);
  private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I16, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCComposeActivityMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCComposeActivityMsgTupleSchemeFactory());
  }

  public List<com.ling9527.music.common.msg.auto.ComposeActivity> activityList; // required
  public short activityCount; // required
  public int activityVersion; // required
  public byte index; // required
  public short count; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ACTIVITY_LIST((short)1, "activityList"),
    ACTIVITY_COUNT((short)2, "activityCount"),
    ACTIVITY_VERSION((short)3, "activityVersion"),
    INDEX((short)4, "index"),
    COUNT((short)5, "count");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACTIVITY_LIST
          return ACTIVITY_LIST;
        case 2: // ACTIVITY_COUNT
          return ACTIVITY_COUNT;
        case 3: // ACTIVITY_VERSION
          return ACTIVITY_VERSION;
        case 4: // INDEX
          return INDEX;
        case 5: // COUNT
          return COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ACTIVITYCOUNT_ISSET_ID = 0;
  private static final int __ACTIVITYVERSION_ISSET_ID = 1;
  private static final int __INDEX_ISSET_ID = 2;
  private static final int __COUNT_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACTIVITY_LIST, new org.apache.thrift.meta_data.FieldMetaData("activityList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.ComposeActivity.class))));
    tmpMap.put(_Fields.ACTIVITY_COUNT, new org.apache.thrift.meta_data.FieldMetaData("activityCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.ACTIVITY_VERSION, new org.apache.thrift.meta_data.FieldMetaData("activityVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INDEX, new org.apache.thrift.meta_data.FieldMetaData("index", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCComposeActivityMsg.class, metaDataMap);
  }

  public SCComposeActivityMsg() {
  }

  public SCComposeActivityMsg(
    List<com.ling9527.music.common.msg.auto.ComposeActivity> activityList,
    short activityCount,
    int activityVersion,
    byte index,
    short count)
  {
    this();
    this.activityList = activityList;
    this.activityCount = activityCount;
    setActivityCountIsSet(true);
    this.activityVersion = activityVersion;
    setActivityVersionIsSet(true);
    this.index = index;
    setIndexIsSet(true);
    this.count = count;
    setCountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCComposeActivityMsg(SCComposeActivityMsg other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetActivityList()) {
      List<com.ling9527.music.common.msg.auto.ComposeActivity> __this__activityList = new ArrayList<com.ling9527.music.common.msg.auto.ComposeActivity>();
      for (com.ling9527.music.common.msg.auto.ComposeActivity other_element : other.activityList) {
        __this__activityList.add(new com.ling9527.music.common.msg.auto.ComposeActivity(other_element));
      }
      this.activityList = __this__activityList;
    }
    this.activityCount = other.activityCount;
    this.activityVersion = other.activityVersion;
    this.index = other.index;
    this.count = other.count;
  }

  public SCComposeActivityMsg deepCopy() {
    return new SCComposeActivityMsg(this);
  }

  @Override
  public void clear() {
    this.activityList = null;
    setActivityCountIsSet(false);
    this.activityCount = 0;
    setActivityVersionIsSet(false);
    this.activityVersion = 0;
    setIndexIsSet(false);
    this.index = 0;
    setCountIsSet(false);
    this.count = 0;
  }

  public int getActivityListSize() {
    return (this.activityList == null) ? 0 : this.activityList.size();
  }

  public java.util.Iterator<com.ling9527.music.common.msg.auto.ComposeActivity> getActivityListIterator() {
    return (this.activityList == null) ? null : this.activityList.iterator();
  }

  public void addToActivityList(com.ling9527.music.common.msg.auto.ComposeActivity elem) {
    if (this.activityList == null) {
      this.activityList = new ArrayList<com.ling9527.music.common.msg.auto.ComposeActivity>();
    }
    this.activityList.add(elem);
  }

  public List<com.ling9527.music.common.msg.auto.ComposeActivity> getActivityList() {
    return this.activityList;
  }

  public SCComposeActivityMsg setActivityList(List<com.ling9527.music.common.msg.auto.ComposeActivity> activityList) {
    this.activityList = activityList;
    return this;
  }

  public void unsetActivityList() {
    this.activityList = null;
  }

  /** Returns true if field activityList is set (has been assigned a value) and false otherwise */
  public boolean isSetActivityList() {
    return this.activityList != null;
  }

  public void setActivityListIsSet(boolean value) {
    if (!value) {
      this.activityList = null;
    }
  }

  public short getActivityCount() {
    return this.activityCount;
  }

  public SCComposeActivityMsg setActivityCount(short activityCount) {
    this.activityCount = activityCount;
    setActivityCountIsSet(true);
    return this;
  }

  public void unsetActivityCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIVITYCOUNT_ISSET_ID);
  }

  /** Returns true if field activityCount is set (has been assigned a value) and false otherwise */
  public boolean isSetActivityCount() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTIVITYCOUNT_ISSET_ID);
  }

  public void setActivityCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIVITYCOUNT_ISSET_ID, value);
  }

  public int getActivityVersion() {
    return this.activityVersion;
  }

  public SCComposeActivityMsg setActivityVersion(int activityVersion) {
    this.activityVersion = activityVersion;
    setActivityVersionIsSet(true);
    return this;
  }

  public void unsetActivityVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIVITYVERSION_ISSET_ID);
  }

  /** Returns true if field activityVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetActivityVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTIVITYVERSION_ISSET_ID);
  }

  public void setActivityVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIVITYVERSION_ISSET_ID, value);
  }

  public byte getIndex() {
    return this.index;
  }

  public SCComposeActivityMsg setIndex(byte index) {
    this.index = index;
    setIndexIsSet(true);
    return this;
  }

  public void unsetIndex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INDEX_ISSET_ID);
  }

  /** Returns true if field index is set (has been assigned a value) and false otherwise */
  public boolean isSetIndex() {
    return EncodingUtils.testBit(__isset_bitfield, __INDEX_ISSET_ID);
  }

  public void setIndexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INDEX_ISSET_ID, value);
  }

  public short getCount() {
    return this.count;
  }

  public SCComposeActivityMsg setCount(short count) {
    this.count = count;
    setCountIsSet(true);
    return this;
  }

  public void unsetCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  /** Returns true if field count is set (has been assigned a value) and false otherwise */
  public boolean isSetCount() {
    return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  public void setCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ACTIVITY_LIST:
      if (value == null) {
        unsetActivityList();
      } else {
        setActivityList((List<com.ling9527.music.common.msg.auto.ComposeActivity>)value);
      }
      break;

    case ACTIVITY_COUNT:
      if (value == null) {
        unsetActivityCount();
      } else {
        setActivityCount((Short)value);
      }
      break;

    case ACTIVITY_VERSION:
      if (value == null) {
        unsetActivityVersion();
      } else {
        setActivityVersion((Integer)value);
      }
      break;

    case INDEX:
      if (value == null) {
        unsetIndex();
      } else {
        setIndex((Byte)value);
      }
      break;

    case COUNT:
      if (value == null) {
        unsetCount();
      } else {
        setCount((Short)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ACTIVITY_LIST:
      return getActivityList();

    case ACTIVITY_COUNT:
      return Short.valueOf(getActivityCount());

    case ACTIVITY_VERSION:
      return Integer.valueOf(getActivityVersion());

    case INDEX:
      return Byte.valueOf(getIndex());

    case COUNT:
      return Short.valueOf(getCount());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ACTIVITY_LIST:
      return isSetActivityList();
    case ACTIVITY_COUNT:
      return isSetActivityCount();
    case ACTIVITY_VERSION:
      return isSetActivityVersion();
    case INDEX:
      return isSetIndex();
    case COUNT:
      return isSetCount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCComposeActivityMsg)
      return this.equals((SCComposeActivityMsg)that);
    return false;
  }

  public boolean equals(SCComposeActivityMsg that) {
    if (that == null)
      return false;

    boolean this_present_activityList = true && this.isSetActivityList();
    boolean that_present_activityList = true && that.isSetActivityList();
    if (this_present_activityList || that_present_activityList) {
      if (!(this_present_activityList && that_present_activityList))
        return false;
      if (!this.activityList.equals(that.activityList))
        return false;
    }

    boolean this_present_activityCount = true;
    boolean that_present_activityCount = true;
    if (this_present_activityCount || that_present_activityCount) {
      if (!(this_present_activityCount && that_present_activityCount))
        return false;
      if (this.activityCount != that.activityCount)
        return false;
    }

    boolean this_present_activityVersion = true;
    boolean that_present_activityVersion = true;
    if (this_present_activityVersion || that_present_activityVersion) {
      if (!(this_present_activityVersion && that_present_activityVersion))
        return false;
      if (this.activityVersion != that.activityVersion)
        return false;
    }

    boolean this_present_index = true;
    boolean that_present_index = true;
    if (this_present_index || that_present_index) {
      if (!(this_present_index && that_present_index))
        return false;
      if (this.index != that.index)
        return false;
    }

    boolean this_present_count = true;
    boolean that_present_count = true;
    if (this_present_count || that_present_count) {
      if (!(this_present_count && that_present_count))
        return false;
      if (this.count != that.count)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCComposeActivityMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCComposeActivityMsg typedOther = (SCComposeActivityMsg)other;

    lastComparison = Boolean.valueOf(isSetActivityList()).compareTo(typedOther.isSetActivityList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActivityList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activityList, typedOther.activityList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActivityCount()).compareTo(typedOther.isSetActivityCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActivityCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activityCount, typedOther.activityCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActivityVersion()).compareTo(typedOther.isSetActivityVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActivityVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activityVersion, typedOther.activityVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIndex()).compareTo(typedOther.isSetIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.index, typedOther.index);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCComposeActivityMsg(");
    boolean first = true;

    sb.append("activityList:");
    if (this.activityList == null) {
      sb.append("null");
    } else {
      sb.append(this.activityList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("activityCount:");
    sb.append(this.activityCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("activityVersion:");
    sb.append(this.activityVersion);
    first = false;
    if (!first) sb.append(", ");
    sb.append("index:");
    sb.append(this.index);
    first = false;
    if (!first) sb.append(", ");
    sb.append("count:");
    sb.append(this.count);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCComposeActivityMsgStandardSchemeFactory implements SchemeFactory {
    public SCComposeActivityMsgStandardScheme getScheme() {
      return new SCComposeActivityMsgStandardScheme();
    }
  }

  private static class SCComposeActivityMsgStandardScheme extends StandardScheme<SCComposeActivityMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCComposeActivityMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ACTIVITY_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                struct.activityList = new ArrayList<com.ling9527.music.common.msg.auto.ComposeActivity>(_list48.size);
                for (int _i49 = 0; _i49 < _list48.size; ++_i49)
                {
                  com.ling9527.music.common.msg.auto.ComposeActivity _elem50; // required
                  _elem50 = new com.ling9527.music.common.msg.auto.ComposeActivity();
                  _elem50.read(iprot);
                  struct.activityList.add(_elem50);
                }
                iprot.readListEnd();
              }
              struct.setActivityListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ACTIVITY_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.activityCount = iprot.readI16();
              struct.setActivityCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ACTIVITY_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.activityVersion = iprot.readI32();
              struct.setActivityVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.index = iprot.readByte();
              struct.setIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.count = iprot.readI16();
              struct.setCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCComposeActivityMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.activityList != null) {
        oprot.writeFieldBegin(ACTIVITY_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.activityList.size()));
          for (com.ling9527.music.common.msg.auto.ComposeActivity _iter51 : struct.activityList)
          {
            _iter51.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ACTIVITY_COUNT_FIELD_DESC);
      oprot.writeI16(struct.activityCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACTIVITY_VERSION_FIELD_DESC);
      oprot.writeI32(struct.activityVersion);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INDEX_FIELD_DESC);
      oprot.writeByte(struct.index);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COUNT_FIELD_DESC);
      oprot.writeI16(struct.count);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCComposeActivityMsgTupleSchemeFactory implements SchemeFactory {
    public SCComposeActivityMsgTupleScheme getScheme() {
      return new SCComposeActivityMsgTupleScheme();
    }
  }

  private static class SCComposeActivityMsgTupleScheme extends TupleScheme<SCComposeActivityMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCComposeActivityMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetActivityList()) {
        optionals.set(0);
      }
      if (struct.isSetActivityCount()) {
        optionals.set(1);
      }
      if (struct.isSetActivityVersion()) {
        optionals.set(2);
      }
      if (struct.isSetIndex()) {
        optionals.set(3);
      }
      if (struct.isSetCount()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetActivityList()) {
        {
          oprot.writeI32(struct.activityList.size());
          for (com.ling9527.music.common.msg.auto.ComposeActivity _iter52 : struct.activityList)
          {
            _iter52.write(oprot);
          }
        }
      }
      if (struct.isSetActivityCount()) {
        oprot.writeI16(struct.activityCount);
      }
      if (struct.isSetActivityVersion()) {
        oprot.writeI32(struct.activityVersion);
      }
      if (struct.isSetIndex()) {
        oprot.writeByte(struct.index);
      }
      if (struct.isSetCount()) {
        oprot.writeI16(struct.count);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCComposeActivityMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.activityList = new ArrayList<com.ling9527.music.common.msg.auto.ComposeActivity>(_list53.size);
          for (int _i54 = 0; _i54 < _list53.size; ++_i54)
          {
            com.ling9527.music.common.msg.auto.ComposeActivity _elem55; // required
            _elem55 = new com.ling9527.music.common.msg.auto.ComposeActivity();
            _elem55.read(iprot);
            struct.activityList.add(_elem55);
          }
        }
        struct.setActivityListIsSet(true);
      }
      if (incoming.get(1)) {
        struct.activityCount = iprot.readI16();
        struct.setActivityCountIsSet(true);
      }
      if (incoming.get(2)) {
        struct.activityVersion = iprot.readI32();
        struct.setActivityVersionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.index = iprot.readByte();
        struct.setIndexIsSet(true);
      }
      if (incoming.get(4)) {
        struct.count = iprot.readI16();
        struct.setCountIsSet(true);
      }
    }
  }

}

