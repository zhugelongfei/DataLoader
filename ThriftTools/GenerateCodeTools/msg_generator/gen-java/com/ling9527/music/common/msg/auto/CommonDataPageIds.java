/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 游戏数据每页id信息
 */
public class CommonDataPageIds implements org.apache.thrift.TBase<CommonDataPageIds, CommonDataPageIds._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CommonDataPageIds");

  private static final org.apache.thrift.protocol.TField START_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("startIndex", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CACHE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("cacheIds", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CommonDataPageIdsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CommonDataPageIdsTupleSchemeFactory());
  }

  public int startIndex; // required
  public List<Long> cacheIds; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    START_INDEX((short)1, "startIndex"),
    CACHE_IDS((short)2, "cacheIds");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // START_INDEX
          return START_INDEX;
        case 2: // CACHE_IDS
          return CACHE_IDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STARTINDEX_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.START_INDEX, new org.apache.thrift.meta_data.FieldMetaData("startIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CACHE_IDS, new org.apache.thrift.meta_data.FieldMetaData("cacheIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CommonDataPageIds.class, metaDataMap);
  }

  public CommonDataPageIds() {
  }

  public CommonDataPageIds(
    int startIndex,
    List<Long> cacheIds)
  {
    this();
    this.startIndex = startIndex;
    setStartIndexIsSet(true);
    this.cacheIds = cacheIds;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CommonDataPageIds(CommonDataPageIds other) {
    __isset_bitfield = other.__isset_bitfield;
    this.startIndex = other.startIndex;
    if (other.isSetCacheIds()) {
      List<Long> __this__cacheIds = new ArrayList<Long>();
      for (Long other_element : other.cacheIds) {
        __this__cacheIds.add(other_element);
      }
      this.cacheIds = __this__cacheIds;
    }
  }

  public CommonDataPageIds deepCopy() {
    return new CommonDataPageIds(this);
  }

  @Override
  public void clear() {
    setStartIndexIsSet(false);
    this.startIndex = 0;
    this.cacheIds = null;
  }

  public int getStartIndex() {
    return this.startIndex;
  }

  public CommonDataPageIds setStartIndex(int startIndex) {
    this.startIndex = startIndex;
    setStartIndexIsSet(true);
    return this;
  }

  public void unsetStartIndex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTINDEX_ISSET_ID);
  }

  /** Returns true if field startIndex is set (has been assigned a value) and false otherwise */
  public boolean isSetStartIndex() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTINDEX_ISSET_ID);
  }

  public void setStartIndexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTINDEX_ISSET_ID, value);
  }

  public int getCacheIdsSize() {
    return (this.cacheIds == null) ? 0 : this.cacheIds.size();
  }

  public java.util.Iterator<Long> getCacheIdsIterator() {
    return (this.cacheIds == null) ? null : this.cacheIds.iterator();
  }

  public void addToCacheIds(long elem) {
    if (this.cacheIds == null) {
      this.cacheIds = new ArrayList<Long>();
    }
    this.cacheIds.add(elem);
  }

  public List<Long> getCacheIds() {
    return this.cacheIds;
  }

  public CommonDataPageIds setCacheIds(List<Long> cacheIds) {
    this.cacheIds = cacheIds;
    return this;
  }

  public void unsetCacheIds() {
    this.cacheIds = null;
  }

  /** Returns true if field cacheIds is set (has been assigned a value) and false otherwise */
  public boolean isSetCacheIds() {
    return this.cacheIds != null;
  }

  public void setCacheIdsIsSet(boolean value) {
    if (!value) {
      this.cacheIds = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case START_INDEX:
      if (value == null) {
        unsetStartIndex();
      } else {
        setStartIndex((Integer)value);
      }
      break;

    case CACHE_IDS:
      if (value == null) {
        unsetCacheIds();
      } else {
        setCacheIds((List<Long>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case START_INDEX:
      return Integer.valueOf(getStartIndex());

    case CACHE_IDS:
      return getCacheIds();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case START_INDEX:
      return isSetStartIndex();
    case CACHE_IDS:
      return isSetCacheIds();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CommonDataPageIds)
      return this.equals((CommonDataPageIds)that);
    return false;
  }

  public boolean equals(CommonDataPageIds that) {
    if (that == null)
      return false;

    boolean this_present_startIndex = true;
    boolean that_present_startIndex = true;
    if (this_present_startIndex || that_present_startIndex) {
      if (!(this_present_startIndex && that_present_startIndex))
        return false;
      if (this.startIndex != that.startIndex)
        return false;
    }

    boolean this_present_cacheIds = true && this.isSetCacheIds();
    boolean that_present_cacheIds = true && that.isSetCacheIds();
    if (this_present_cacheIds || that_present_cacheIds) {
      if (!(this_present_cacheIds && that_present_cacheIds))
        return false;
      if (!this.cacheIds.equals(that.cacheIds))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(CommonDataPageIds other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CommonDataPageIds typedOther = (CommonDataPageIds)other;

    lastComparison = Boolean.valueOf(isSetStartIndex()).compareTo(typedOther.isSetStartIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startIndex, typedOther.startIndex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCacheIds()).compareTo(typedOther.isSetCacheIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCacheIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cacheIds, typedOther.cacheIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CommonDataPageIds(");
    boolean first = true;

    sb.append("startIndex:");
    sb.append(this.startIndex);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cacheIds:");
    if (this.cacheIds == null) {
      sb.append("null");
    } else {
      sb.append(this.cacheIds);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CommonDataPageIdsStandardSchemeFactory implements SchemeFactory {
    public CommonDataPageIdsStandardScheme getScheme() {
      return new CommonDataPageIdsStandardScheme();
    }
  }

  private static class CommonDataPageIdsStandardScheme extends StandardScheme<CommonDataPageIds> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CommonDataPageIds struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // START_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.startIndex = iprot.readI32();
              struct.setStartIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CACHE_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list636 = iprot.readListBegin();
                struct.cacheIds = new ArrayList<Long>(_list636.size);
                for (int _i637 = 0; _i637 < _list636.size; ++_i637)
                {
                  long _elem638; // required
                  _elem638 = iprot.readI64();
                  struct.cacheIds.add(_elem638);
                }
                iprot.readListEnd();
              }
              struct.setCacheIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CommonDataPageIds struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(START_INDEX_FIELD_DESC);
      oprot.writeI32(struct.startIndex);
      oprot.writeFieldEnd();
      if (struct.cacheIds != null) {
        oprot.writeFieldBegin(CACHE_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.cacheIds.size()));
          for (long _iter639 : struct.cacheIds)
          {
            oprot.writeI64(_iter639);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CommonDataPageIdsTupleSchemeFactory implements SchemeFactory {
    public CommonDataPageIdsTupleScheme getScheme() {
      return new CommonDataPageIdsTupleScheme();
    }
  }

  private static class CommonDataPageIdsTupleScheme extends TupleScheme<CommonDataPageIds> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CommonDataPageIds struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetStartIndex()) {
        optionals.set(0);
      }
      if (struct.isSetCacheIds()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetStartIndex()) {
        oprot.writeI32(struct.startIndex);
      }
      if (struct.isSetCacheIds()) {
        {
          oprot.writeI32(struct.cacheIds.size());
          for (long _iter640 : struct.cacheIds)
          {
            oprot.writeI64(_iter640);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CommonDataPageIds struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.startIndex = iprot.readI32();
        struct.setStartIndexIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list641 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.cacheIds = new ArrayList<Long>(_list641.size);
          for (int _i642 = 0; _i642 < _list641.size; ++_i642)
          {
            long _elem643; // required
            _elem643 = iprot.readI64();
            struct.cacheIds.add(_elem643);
          }
        }
        struct.setCacheIdsIsSet(true);
      }
    }
  }

}

