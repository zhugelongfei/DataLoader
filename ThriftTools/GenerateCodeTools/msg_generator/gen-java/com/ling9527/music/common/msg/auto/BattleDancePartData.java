/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class BattleDancePartData implements org.apache.thrift.TBase<BattleDancePartData, BattleDancePartData._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BattleDancePartData");

  private static final org.apache.thrift.protocol.TField GROUPS_FIELD_DESC = new org.apache.thrift.protocol.TField("groups", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField PART_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("partIndex", org.apache.thrift.protocol.TType.BYTE, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BattleDancePartDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BattleDancePartDataTupleSchemeFactory());
  }

  public List<BattleDanceGroupData> groups; // required
  public byte partIndex; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GROUPS((short)1, "groups"),
    PART_INDEX((short)2, "partIndex");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GROUPS
          return GROUPS;
        case 2: // PART_INDEX
          return PART_INDEX;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PARTINDEX_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GROUPS, new org.apache.thrift.meta_data.FieldMetaData("groups", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BattleDanceGroupData.class))));
    tmpMap.put(_Fields.PART_INDEX, new org.apache.thrift.meta_data.FieldMetaData("partIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BattleDancePartData.class, metaDataMap);
  }

  public BattleDancePartData() {
  }

  public BattleDancePartData(
    List<BattleDanceGroupData> groups,
    byte partIndex)
  {
    this();
    this.groups = groups;
    this.partIndex = partIndex;
    setPartIndexIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BattleDancePartData(BattleDancePartData other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetGroups()) {
      List<BattleDanceGroupData> __this__groups = new ArrayList<BattleDanceGroupData>();
      for (BattleDanceGroupData other_element : other.groups) {
        __this__groups.add(new BattleDanceGroupData(other_element));
      }
      this.groups = __this__groups;
    }
    this.partIndex = other.partIndex;
  }

  public BattleDancePartData deepCopy() {
    return new BattleDancePartData(this);
  }

  @Override
  public void clear() {
    this.groups = null;
    setPartIndexIsSet(false);
    this.partIndex = 0;
  }

  public int getGroupsSize() {
    return (this.groups == null) ? 0 : this.groups.size();
  }

  public java.util.Iterator<BattleDanceGroupData> getGroupsIterator() {
    return (this.groups == null) ? null : this.groups.iterator();
  }

  public void addToGroups(BattleDanceGroupData elem) {
    if (this.groups == null) {
      this.groups = new ArrayList<BattleDanceGroupData>();
    }
    this.groups.add(elem);
  }

  public List<BattleDanceGroupData> getGroups() {
    return this.groups;
  }

  public BattleDancePartData setGroups(List<BattleDanceGroupData> groups) {
    this.groups = groups;
    return this;
  }

  public void unsetGroups() {
    this.groups = null;
  }

  /** Returns true if field groups is set (has been assigned a value) and false otherwise */
  public boolean isSetGroups() {
    return this.groups != null;
  }

  public void setGroupsIsSet(boolean value) {
    if (!value) {
      this.groups = null;
    }
  }

  public byte getPartIndex() {
    return this.partIndex;
  }

  public BattleDancePartData setPartIndex(byte partIndex) {
    this.partIndex = partIndex;
    setPartIndexIsSet(true);
    return this;
  }

  public void unsetPartIndex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARTINDEX_ISSET_ID);
  }

  /** Returns true if field partIndex is set (has been assigned a value) and false otherwise */
  public boolean isSetPartIndex() {
    return EncodingUtils.testBit(__isset_bitfield, __PARTINDEX_ISSET_ID);
  }

  public void setPartIndexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARTINDEX_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case GROUPS:
      if (value == null) {
        unsetGroups();
      } else {
        setGroups((List<BattleDanceGroupData>)value);
      }
      break;

    case PART_INDEX:
      if (value == null) {
        unsetPartIndex();
      } else {
        setPartIndex((Byte)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case GROUPS:
      return getGroups();

    case PART_INDEX:
      return Byte.valueOf(getPartIndex());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case GROUPS:
      return isSetGroups();
    case PART_INDEX:
      return isSetPartIndex();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BattleDancePartData)
      return this.equals((BattleDancePartData)that);
    return false;
  }

  public boolean equals(BattleDancePartData that) {
    if (that == null)
      return false;

    boolean this_present_groups = true && this.isSetGroups();
    boolean that_present_groups = true && that.isSetGroups();
    if (this_present_groups || that_present_groups) {
      if (!(this_present_groups && that_present_groups))
        return false;
      if (!this.groups.equals(that.groups))
        return false;
    }

    boolean this_present_partIndex = true;
    boolean that_present_partIndex = true;
    if (this_present_partIndex || that_present_partIndex) {
      if (!(this_present_partIndex && that_present_partIndex))
        return false;
      if (this.partIndex != that.partIndex)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(BattleDancePartData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    BattleDancePartData typedOther = (BattleDancePartData)other;

    lastComparison = Boolean.valueOf(isSetGroups()).compareTo(typedOther.isSetGroups());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroups()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groups, typedOther.groups);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartIndex()).compareTo(typedOther.isSetPartIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partIndex, typedOther.partIndex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BattleDancePartData(");
    boolean first = true;

    sb.append("groups:");
    if (this.groups == null) {
      sb.append("null");
    } else {
      sb.append(this.groups);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("partIndex:");
    sb.append(this.partIndex);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BattleDancePartDataStandardSchemeFactory implements SchemeFactory {
    public BattleDancePartDataStandardScheme getScheme() {
      return new BattleDancePartDataStandardScheme();
    }
  }

  private static class BattleDancePartDataStandardScheme extends StandardScheme<BattleDancePartData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BattleDancePartData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GROUPS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list372 = iprot.readListBegin();
                struct.groups = new ArrayList<BattleDanceGroupData>(_list372.size);
                for (int _i373 = 0; _i373 < _list372.size; ++_i373)
                {
                  BattleDanceGroupData _elem374; // required
                  _elem374 = new BattleDanceGroupData();
                  _elem374.read(iprot);
                  struct.groups.add(_elem374);
                }
                iprot.readListEnd();
              }
              struct.setGroupsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PART_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.partIndex = iprot.readByte();
              struct.setPartIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BattleDancePartData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.groups != null) {
        oprot.writeFieldBegin(GROUPS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.groups.size()));
          for (BattleDanceGroupData _iter375 : struct.groups)
          {
            _iter375.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PART_INDEX_FIELD_DESC);
      oprot.writeByte(struct.partIndex);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BattleDancePartDataTupleSchemeFactory implements SchemeFactory {
    public BattleDancePartDataTupleScheme getScheme() {
      return new BattleDancePartDataTupleScheme();
    }
  }

  private static class BattleDancePartDataTupleScheme extends TupleScheme<BattleDancePartData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BattleDancePartData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetGroups()) {
        optionals.set(0);
      }
      if (struct.isSetPartIndex()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetGroups()) {
        {
          oprot.writeI32(struct.groups.size());
          for (BattleDanceGroupData _iter376 : struct.groups)
          {
            _iter376.write(oprot);
          }
        }
      }
      if (struct.isSetPartIndex()) {
        oprot.writeByte(struct.partIndex);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BattleDancePartData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list377 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.groups = new ArrayList<BattleDanceGroupData>(_list377.size);
          for (int _i378 = 0; _i378 < _list377.size; ++_i378)
          {
            BattleDanceGroupData _elem379; // required
            _elem379 = new BattleDanceGroupData();
            _elem379.read(iprot);
            struct.groups.add(_elem379);
          }
        }
        struct.setGroupsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.partIndex = iprot.readByte();
        struct.setPartIndexIsSet(true);
      }
    }
  }

}

