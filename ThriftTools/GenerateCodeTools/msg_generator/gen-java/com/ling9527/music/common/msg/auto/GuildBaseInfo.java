/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class GuildBaseInfo implements org.apache.thrift.TBase<GuildBaseInfo, GuildBaseInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GuildBaseInfo");

  private static final org.apache.thrift.protocol.TField GUILD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("guildId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField GUILD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("guildName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LEADER_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("leaderInfo", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField GUILD_ICON_FIELD_DESC = new org.apache.thrift.protocol.TField("guildIcon", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField NOTICE_BOARD_FIELD_DESC = new org.apache.thrift.protocol.TField("noticeBoard", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField MEMBER_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("memberCount", org.apache.thrift.protocol.TType.I16, (short)6);
  private static final org.apache.thrift.protocol.TField AVERAGE_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("averageLevel", org.apache.thrift.protocol.TType.I16, (short)7);
  private static final org.apache.thrift.protocol.TField POPULARITY_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("popularityCount", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField VIP_EXP_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("vipExpCount", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField APPLY_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("applyFlag", org.apache.thrift.protocol.TType.BYTE, (short)10);
  private static final org.apache.thrift.protocol.TField LIMIT_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("limitCount", org.apache.thrift.protocol.TType.I16, (short)11);
  private static final org.apache.thrift.protocol.TField HONOR_FIELD_DESC = new org.apache.thrift.protocol.TField("honor", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("level", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField ASSISTANT_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("assistantCount", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField ASSISTANT_MAX_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("assistantMaxCount", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField FLAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("flags", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField BYTE_DAY_LOOP_COUNTER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("byteDayLoopCounterList", org.apache.thrift.protocol.TType.LIST, (short)17);
  private static final org.apache.thrift.protocol.TField SHORT_DAY_LOOP_COUNTER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("shortDayLoopCounterList", org.apache.thrift.protocol.TType.LIST, (short)18);
  private static final org.apache.thrift.protocol.TField INT_DAY_LOOP_COUNTER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("intDayLoopCounterList", org.apache.thrift.protocol.TType.LIST, (short)19);
  private static final org.apache.thrift.protocol.TField INT_COUNTER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("intCounterList", org.apache.thrift.protocol.TType.LIST, (short)20);
  private static final org.apache.thrift.protocol.TField GUILD_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("guildExp", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField HONOR_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("honorLevel", org.apache.thrift.protocol.TType.I32, (short)22);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GuildBaseInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GuildBaseInfoTupleSchemeFactory());
  }

  public long guildId; // required
  public String guildName; // required
  public GuildMemInfo leaderInfo; // required
  public String guildIcon; // required
  public String noticeBoard; // required
  public short memberCount; // required
  public short averageLevel; // required
  public long popularityCount; // required
  public int vipExpCount; // required
  public byte applyFlag; // required
  public short limitCount; // required
  public int honor; // required
  public int level; // required
  public int assistantCount; // required
  public int assistantMaxCount; // required
  public ByteBuffer flags; // optional
  public List<Byte> byteDayLoopCounterList; // optional
  public List<Short> shortDayLoopCounterList; // optional
  public List<Integer> intDayLoopCounterList; // optional
  public List<Integer> intCounterList; // optional
  public int guildExp; // optional
  public int honorLevel; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GUILD_ID((short)1, "guildId"),
    GUILD_NAME((short)2, "guildName"),
    LEADER_INFO((short)3, "leaderInfo"),
    GUILD_ICON((short)4, "guildIcon"),
    NOTICE_BOARD((short)5, "noticeBoard"),
    MEMBER_COUNT((short)6, "memberCount"),
    AVERAGE_LEVEL((short)7, "averageLevel"),
    POPULARITY_COUNT((short)8, "popularityCount"),
    VIP_EXP_COUNT((short)9, "vipExpCount"),
    APPLY_FLAG((short)10, "applyFlag"),
    LIMIT_COUNT((short)11, "limitCount"),
    HONOR((short)12, "honor"),
    LEVEL((short)13, "level"),
    ASSISTANT_COUNT((short)14, "assistantCount"),
    ASSISTANT_MAX_COUNT((short)15, "assistantMaxCount"),
    FLAGS((short)16, "flags"),
    BYTE_DAY_LOOP_COUNTER_LIST((short)17, "byteDayLoopCounterList"),
    SHORT_DAY_LOOP_COUNTER_LIST((short)18, "shortDayLoopCounterList"),
    INT_DAY_LOOP_COUNTER_LIST((short)19, "intDayLoopCounterList"),
    INT_COUNTER_LIST((short)20, "intCounterList"),
    GUILD_EXP((short)21, "guildExp"),
    HONOR_LEVEL((short)22, "honorLevel");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GUILD_ID
          return GUILD_ID;
        case 2: // GUILD_NAME
          return GUILD_NAME;
        case 3: // LEADER_INFO
          return LEADER_INFO;
        case 4: // GUILD_ICON
          return GUILD_ICON;
        case 5: // NOTICE_BOARD
          return NOTICE_BOARD;
        case 6: // MEMBER_COUNT
          return MEMBER_COUNT;
        case 7: // AVERAGE_LEVEL
          return AVERAGE_LEVEL;
        case 8: // POPULARITY_COUNT
          return POPULARITY_COUNT;
        case 9: // VIP_EXP_COUNT
          return VIP_EXP_COUNT;
        case 10: // APPLY_FLAG
          return APPLY_FLAG;
        case 11: // LIMIT_COUNT
          return LIMIT_COUNT;
        case 12: // HONOR
          return HONOR;
        case 13: // LEVEL
          return LEVEL;
        case 14: // ASSISTANT_COUNT
          return ASSISTANT_COUNT;
        case 15: // ASSISTANT_MAX_COUNT
          return ASSISTANT_MAX_COUNT;
        case 16: // FLAGS
          return FLAGS;
        case 17: // BYTE_DAY_LOOP_COUNTER_LIST
          return BYTE_DAY_LOOP_COUNTER_LIST;
        case 18: // SHORT_DAY_LOOP_COUNTER_LIST
          return SHORT_DAY_LOOP_COUNTER_LIST;
        case 19: // INT_DAY_LOOP_COUNTER_LIST
          return INT_DAY_LOOP_COUNTER_LIST;
        case 20: // INT_COUNTER_LIST
          return INT_COUNTER_LIST;
        case 21: // GUILD_EXP
          return GUILD_EXP;
        case 22: // HONOR_LEVEL
          return HONOR_LEVEL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __GUILDID_ISSET_ID = 0;
  private static final int __MEMBERCOUNT_ISSET_ID = 1;
  private static final int __AVERAGELEVEL_ISSET_ID = 2;
  private static final int __POPULARITYCOUNT_ISSET_ID = 3;
  private static final int __VIPEXPCOUNT_ISSET_ID = 4;
  private static final int __APPLYFLAG_ISSET_ID = 5;
  private static final int __LIMITCOUNT_ISSET_ID = 6;
  private static final int __HONOR_ISSET_ID = 7;
  private static final int __LEVEL_ISSET_ID = 8;
  private static final int __ASSISTANTCOUNT_ISSET_ID = 9;
  private static final int __ASSISTANTMAXCOUNT_ISSET_ID = 10;
  private static final int __GUILDEXP_ISSET_ID = 11;
  private static final int __HONORLEVEL_ISSET_ID = 12;
  private short __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.FLAGS,_Fields.BYTE_DAY_LOOP_COUNTER_LIST,_Fields.SHORT_DAY_LOOP_COUNTER_LIST,_Fields.INT_DAY_LOOP_COUNTER_LIST,_Fields.INT_COUNTER_LIST,_Fields.GUILD_EXP,_Fields.HONOR_LEVEL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GUILD_ID, new org.apache.thrift.meta_data.FieldMetaData("guildId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.GUILD_NAME, new org.apache.thrift.meta_data.FieldMetaData("guildName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LEADER_INFO, new org.apache.thrift.meta_data.FieldMetaData("leaderInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GuildMemInfo.class)));
    tmpMap.put(_Fields.GUILD_ICON, new org.apache.thrift.meta_data.FieldMetaData("guildIcon", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NOTICE_BOARD, new org.apache.thrift.meta_data.FieldMetaData("noticeBoard", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEMBER_COUNT, new org.apache.thrift.meta_data.FieldMetaData("memberCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.AVERAGE_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("averageLevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.POPULARITY_COUNT, new org.apache.thrift.meta_data.FieldMetaData("popularityCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VIP_EXP_COUNT, new org.apache.thrift.meta_data.FieldMetaData("vipExpCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.APPLY_FLAG, new org.apache.thrift.meta_data.FieldMetaData("applyFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.LIMIT_COUNT, new org.apache.thrift.meta_data.FieldMetaData("limitCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.HONOR, new org.apache.thrift.meta_data.FieldMetaData("honor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LEVEL, new org.apache.thrift.meta_data.FieldMetaData("level", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ASSISTANT_COUNT, new org.apache.thrift.meta_data.FieldMetaData("assistantCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ASSISTANT_MAX_COUNT, new org.apache.thrift.meta_data.FieldMetaData("assistantMaxCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FLAGS, new org.apache.thrift.meta_data.FieldMetaData("flags", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.BYTE_DAY_LOOP_COUNTER_LIST, new org.apache.thrift.meta_data.FieldMetaData("byteDayLoopCounterList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE))));
    tmpMap.put(_Fields.SHORT_DAY_LOOP_COUNTER_LIST, new org.apache.thrift.meta_data.FieldMetaData("shortDayLoopCounterList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16))));
    tmpMap.put(_Fields.INT_DAY_LOOP_COUNTER_LIST, new org.apache.thrift.meta_data.FieldMetaData("intDayLoopCounterList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.INT_COUNTER_LIST, new org.apache.thrift.meta_data.FieldMetaData("intCounterList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.GUILD_EXP, new org.apache.thrift.meta_data.FieldMetaData("guildExp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HONOR_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("honorLevel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GuildBaseInfo.class, metaDataMap);
  }

  public GuildBaseInfo() {
  }

  public GuildBaseInfo(
    long guildId,
    String guildName,
    GuildMemInfo leaderInfo,
    String guildIcon,
    String noticeBoard,
    short memberCount,
    short averageLevel,
    long popularityCount,
    int vipExpCount,
    byte applyFlag,
    short limitCount,
    int honor,
    int level,
    int assistantCount,
    int assistantMaxCount)
  {
    this();
    this.guildId = guildId;
    setGuildIdIsSet(true);
    this.guildName = guildName;
    this.leaderInfo = leaderInfo;
    this.guildIcon = guildIcon;
    this.noticeBoard = noticeBoard;
    this.memberCount = memberCount;
    setMemberCountIsSet(true);
    this.averageLevel = averageLevel;
    setAverageLevelIsSet(true);
    this.popularityCount = popularityCount;
    setPopularityCountIsSet(true);
    this.vipExpCount = vipExpCount;
    setVipExpCountIsSet(true);
    this.applyFlag = applyFlag;
    setApplyFlagIsSet(true);
    this.limitCount = limitCount;
    setLimitCountIsSet(true);
    this.honor = honor;
    setHonorIsSet(true);
    this.level = level;
    setLevelIsSet(true);
    this.assistantCount = assistantCount;
    setAssistantCountIsSet(true);
    this.assistantMaxCount = assistantMaxCount;
    setAssistantMaxCountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GuildBaseInfo(GuildBaseInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.guildId = other.guildId;
    if (other.isSetGuildName()) {
      this.guildName = other.guildName;
    }
    if (other.isSetLeaderInfo()) {
      this.leaderInfo = new GuildMemInfo(other.leaderInfo);
    }
    if (other.isSetGuildIcon()) {
      this.guildIcon = other.guildIcon;
    }
    if (other.isSetNoticeBoard()) {
      this.noticeBoard = other.noticeBoard;
    }
    this.memberCount = other.memberCount;
    this.averageLevel = other.averageLevel;
    this.popularityCount = other.popularityCount;
    this.vipExpCount = other.vipExpCount;
    this.applyFlag = other.applyFlag;
    this.limitCount = other.limitCount;
    this.honor = other.honor;
    this.level = other.level;
    this.assistantCount = other.assistantCount;
    this.assistantMaxCount = other.assistantMaxCount;
    if (other.isSetFlags()) {
      this.flags = org.apache.thrift.TBaseHelper.copyBinary(other.flags);
;
    }
    if (other.isSetByteDayLoopCounterList()) {
      List<Byte> __this__byteDayLoopCounterList = new ArrayList<Byte>();
      for (Byte other_element : other.byteDayLoopCounterList) {
        __this__byteDayLoopCounterList.add(other_element);
      }
      this.byteDayLoopCounterList = __this__byteDayLoopCounterList;
    }
    if (other.isSetShortDayLoopCounterList()) {
      List<Short> __this__shortDayLoopCounterList = new ArrayList<Short>();
      for (Short other_element : other.shortDayLoopCounterList) {
        __this__shortDayLoopCounterList.add(other_element);
      }
      this.shortDayLoopCounterList = __this__shortDayLoopCounterList;
    }
    if (other.isSetIntDayLoopCounterList()) {
      List<Integer> __this__intDayLoopCounterList = new ArrayList<Integer>();
      for (Integer other_element : other.intDayLoopCounterList) {
        __this__intDayLoopCounterList.add(other_element);
      }
      this.intDayLoopCounterList = __this__intDayLoopCounterList;
    }
    if (other.isSetIntCounterList()) {
      List<Integer> __this__intCounterList = new ArrayList<Integer>();
      for (Integer other_element : other.intCounterList) {
        __this__intCounterList.add(other_element);
      }
      this.intCounterList = __this__intCounterList;
    }
    this.guildExp = other.guildExp;
    this.honorLevel = other.honorLevel;
  }

  public GuildBaseInfo deepCopy() {
    return new GuildBaseInfo(this);
  }

  @Override
  public void clear() {
    setGuildIdIsSet(false);
    this.guildId = 0;
    this.guildName = null;
    this.leaderInfo = null;
    this.guildIcon = null;
    this.noticeBoard = null;
    setMemberCountIsSet(false);
    this.memberCount = 0;
    setAverageLevelIsSet(false);
    this.averageLevel = 0;
    setPopularityCountIsSet(false);
    this.popularityCount = 0;
    setVipExpCountIsSet(false);
    this.vipExpCount = 0;
    setApplyFlagIsSet(false);
    this.applyFlag = 0;
    setLimitCountIsSet(false);
    this.limitCount = 0;
    setHonorIsSet(false);
    this.honor = 0;
    setLevelIsSet(false);
    this.level = 0;
    setAssistantCountIsSet(false);
    this.assistantCount = 0;
    setAssistantMaxCountIsSet(false);
    this.assistantMaxCount = 0;
    this.flags = null;
    this.byteDayLoopCounterList = null;
    this.shortDayLoopCounterList = null;
    this.intDayLoopCounterList = null;
    this.intCounterList = null;
    setGuildExpIsSet(false);
    this.guildExp = 0;
    setHonorLevelIsSet(false);
    this.honorLevel = 0;
  }

  public long getGuildId() {
    return this.guildId;
  }

  public GuildBaseInfo setGuildId(long guildId) {
    this.guildId = guildId;
    setGuildIdIsSet(true);
    return this;
  }

  public void unsetGuildId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GUILDID_ISSET_ID);
  }

  /** Returns true if field guildId is set (has been assigned a value) and false otherwise */
  public boolean isSetGuildId() {
    return EncodingUtils.testBit(__isset_bitfield, __GUILDID_ISSET_ID);
  }

  public void setGuildIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GUILDID_ISSET_ID, value);
  }

  public String getGuildName() {
    return this.guildName;
  }

  public GuildBaseInfo setGuildName(String guildName) {
    this.guildName = guildName;
    return this;
  }

  public void unsetGuildName() {
    this.guildName = null;
  }

  /** Returns true if field guildName is set (has been assigned a value) and false otherwise */
  public boolean isSetGuildName() {
    return this.guildName != null;
  }

  public void setGuildNameIsSet(boolean value) {
    if (!value) {
      this.guildName = null;
    }
  }

  public GuildMemInfo getLeaderInfo() {
    return this.leaderInfo;
  }

  public GuildBaseInfo setLeaderInfo(GuildMemInfo leaderInfo) {
    this.leaderInfo = leaderInfo;
    return this;
  }

  public void unsetLeaderInfo() {
    this.leaderInfo = null;
  }

  /** Returns true if field leaderInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetLeaderInfo() {
    return this.leaderInfo != null;
  }

  public void setLeaderInfoIsSet(boolean value) {
    if (!value) {
      this.leaderInfo = null;
    }
  }

  public String getGuildIcon() {
    return this.guildIcon;
  }

  public GuildBaseInfo setGuildIcon(String guildIcon) {
    this.guildIcon = guildIcon;
    return this;
  }

  public void unsetGuildIcon() {
    this.guildIcon = null;
  }

  /** Returns true if field guildIcon is set (has been assigned a value) and false otherwise */
  public boolean isSetGuildIcon() {
    return this.guildIcon != null;
  }

  public void setGuildIconIsSet(boolean value) {
    if (!value) {
      this.guildIcon = null;
    }
  }

  public String getNoticeBoard() {
    return this.noticeBoard;
  }

  public GuildBaseInfo setNoticeBoard(String noticeBoard) {
    this.noticeBoard = noticeBoard;
    return this;
  }

  public void unsetNoticeBoard() {
    this.noticeBoard = null;
  }

  /** Returns true if field noticeBoard is set (has been assigned a value) and false otherwise */
  public boolean isSetNoticeBoard() {
    return this.noticeBoard != null;
  }

  public void setNoticeBoardIsSet(boolean value) {
    if (!value) {
      this.noticeBoard = null;
    }
  }

  public short getMemberCount() {
    return this.memberCount;
  }

  public GuildBaseInfo setMemberCount(short memberCount) {
    this.memberCount = memberCount;
    setMemberCountIsSet(true);
    return this;
  }

  public void unsetMemberCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMBERCOUNT_ISSET_ID);
  }

  /** Returns true if field memberCount is set (has been assigned a value) and false otherwise */
  public boolean isSetMemberCount() {
    return EncodingUtils.testBit(__isset_bitfield, __MEMBERCOUNT_ISSET_ID);
  }

  public void setMemberCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMBERCOUNT_ISSET_ID, value);
  }

  public short getAverageLevel() {
    return this.averageLevel;
  }

  public GuildBaseInfo setAverageLevel(short averageLevel) {
    this.averageLevel = averageLevel;
    setAverageLevelIsSet(true);
    return this;
  }

  public void unsetAverageLevel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AVERAGELEVEL_ISSET_ID);
  }

  /** Returns true if field averageLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetAverageLevel() {
    return EncodingUtils.testBit(__isset_bitfield, __AVERAGELEVEL_ISSET_ID);
  }

  public void setAverageLevelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AVERAGELEVEL_ISSET_ID, value);
  }

  public long getPopularityCount() {
    return this.popularityCount;
  }

  public GuildBaseInfo setPopularityCount(long popularityCount) {
    this.popularityCount = popularityCount;
    setPopularityCountIsSet(true);
    return this;
  }

  public void unsetPopularityCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POPULARITYCOUNT_ISSET_ID);
  }

  /** Returns true if field popularityCount is set (has been assigned a value) and false otherwise */
  public boolean isSetPopularityCount() {
    return EncodingUtils.testBit(__isset_bitfield, __POPULARITYCOUNT_ISSET_ID);
  }

  public void setPopularityCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POPULARITYCOUNT_ISSET_ID, value);
  }

  public int getVipExpCount() {
    return this.vipExpCount;
  }

  public GuildBaseInfo setVipExpCount(int vipExpCount) {
    this.vipExpCount = vipExpCount;
    setVipExpCountIsSet(true);
    return this;
  }

  public void unsetVipExpCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIPEXPCOUNT_ISSET_ID);
  }

  /** Returns true if field vipExpCount is set (has been assigned a value) and false otherwise */
  public boolean isSetVipExpCount() {
    return EncodingUtils.testBit(__isset_bitfield, __VIPEXPCOUNT_ISSET_ID);
  }

  public void setVipExpCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIPEXPCOUNT_ISSET_ID, value);
  }

  public byte getApplyFlag() {
    return this.applyFlag;
  }

  public GuildBaseInfo setApplyFlag(byte applyFlag) {
    this.applyFlag = applyFlag;
    setApplyFlagIsSet(true);
    return this;
  }

  public void unsetApplyFlag() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPLYFLAG_ISSET_ID);
  }

  /** Returns true if field applyFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetApplyFlag() {
    return EncodingUtils.testBit(__isset_bitfield, __APPLYFLAG_ISSET_ID);
  }

  public void setApplyFlagIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPLYFLAG_ISSET_ID, value);
  }

  public short getLimitCount() {
    return this.limitCount;
  }

  public GuildBaseInfo setLimitCount(short limitCount) {
    this.limitCount = limitCount;
    setLimitCountIsSet(true);
    return this;
  }

  public void unsetLimitCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMITCOUNT_ISSET_ID);
  }

  /** Returns true if field limitCount is set (has been assigned a value) and false otherwise */
  public boolean isSetLimitCount() {
    return EncodingUtils.testBit(__isset_bitfield, __LIMITCOUNT_ISSET_ID);
  }

  public void setLimitCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMITCOUNT_ISSET_ID, value);
  }

  public int getHonor() {
    return this.honor;
  }

  public GuildBaseInfo setHonor(int honor) {
    this.honor = honor;
    setHonorIsSet(true);
    return this;
  }

  public void unsetHonor() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HONOR_ISSET_ID);
  }

  /** Returns true if field honor is set (has been assigned a value) and false otherwise */
  public boolean isSetHonor() {
    return EncodingUtils.testBit(__isset_bitfield, __HONOR_ISSET_ID);
  }

  public void setHonorIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HONOR_ISSET_ID, value);
  }

  public int getLevel() {
    return this.level;
  }

  public GuildBaseInfo setLevel(int level) {
    this.level = level;
    setLevelIsSet(true);
    return this;
  }

  public void unsetLevel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEVEL_ISSET_ID);
  }

  /** Returns true if field level is set (has been assigned a value) and false otherwise */
  public boolean isSetLevel() {
    return EncodingUtils.testBit(__isset_bitfield, __LEVEL_ISSET_ID);
  }

  public void setLevelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEVEL_ISSET_ID, value);
  }

  public int getAssistantCount() {
    return this.assistantCount;
  }

  public GuildBaseInfo setAssistantCount(int assistantCount) {
    this.assistantCount = assistantCount;
    setAssistantCountIsSet(true);
    return this;
  }

  public void unsetAssistantCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ASSISTANTCOUNT_ISSET_ID);
  }

  /** Returns true if field assistantCount is set (has been assigned a value) and false otherwise */
  public boolean isSetAssistantCount() {
    return EncodingUtils.testBit(__isset_bitfield, __ASSISTANTCOUNT_ISSET_ID);
  }

  public void setAssistantCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ASSISTANTCOUNT_ISSET_ID, value);
  }

  public int getAssistantMaxCount() {
    return this.assistantMaxCount;
  }

  public GuildBaseInfo setAssistantMaxCount(int assistantMaxCount) {
    this.assistantMaxCount = assistantMaxCount;
    setAssistantMaxCountIsSet(true);
    return this;
  }

  public void unsetAssistantMaxCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ASSISTANTMAXCOUNT_ISSET_ID);
  }

  /** Returns true if field assistantMaxCount is set (has been assigned a value) and false otherwise */
  public boolean isSetAssistantMaxCount() {
    return EncodingUtils.testBit(__isset_bitfield, __ASSISTANTMAXCOUNT_ISSET_ID);
  }

  public void setAssistantMaxCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ASSISTANTMAXCOUNT_ISSET_ID, value);
  }

  public byte[] getFlags() {
    setFlags(org.apache.thrift.TBaseHelper.rightSize(flags));
    return flags == null ? null : flags.array();
  }

  public ByteBuffer bufferForFlags() {
    return flags;
  }

  public GuildBaseInfo setFlags(byte[] flags) {
    setFlags(flags == null ? (ByteBuffer)null : ByteBuffer.wrap(flags));
    return this;
  }

  public GuildBaseInfo setFlags(ByteBuffer flags) {
    this.flags = flags;
    return this;
  }

  public void unsetFlags() {
    this.flags = null;
  }

  /** Returns true if field flags is set (has been assigned a value) and false otherwise */
  public boolean isSetFlags() {
    return this.flags != null;
  }

  public void setFlagsIsSet(boolean value) {
    if (!value) {
      this.flags = null;
    }
  }

  public int getByteDayLoopCounterListSize() {
    return (this.byteDayLoopCounterList == null) ? 0 : this.byteDayLoopCounterList.size();
  }

  public java.util.Iterator<Byte> getByteDayLoopCounterListIterator() {
    return (this.byteDayLoopCounterList == null) ? null : this.byteDayLoopCounterList.iterator();
  }

  public void addToByteDayLoopCounterList(byte elem) {
    if (this.byteDayLoopCounterList == null) {
      this.byteDayLoopCounterList = new ArrayList<Byte>();
    }
    this.byteDayLoopCounterList.add(elem);
  }

  public List<Byte> getByteDayLoopCounterList() {
    return this.byteDayLoopCounterList;
  }

  public GuildBaseInfo setByteDayLoopCounterList(List<Byte> byteDayLoopCounterList) {
    this.byteDayLoopCounterList = byteDayLoopCounterList;
    return this;
  }

  public void unsetByteDayLoopCounterList() {
    this.byteDayLoopCounterList = null;
  }

  /** Returns true if field byteDayLoopCounterList is set (has been assigned a value) and false otherwise */
  public boolean isSetByteDayLoopCounterList() {
    return this.byteDayLoopCounterList != null;
  }

  public void setByteDayLoopCounterListIsSet(boolean value) {
    if (!value) {
      this.byteDayLoopCounterList = null;
    }
  }

  public int getShortDayLoopCounterListSize() {
    return (this.shortDayLoopCounterList == null) ? 0 : this.shortDayLoopCounterList.size();
  }

  public java.util.Iterator<Short> getShortDayLoopCounterListIterator() {
    return (this.shortDayLoopCounterList == null) ? null : this.shortDayLoopCounterList.iterator();
  }

  public void addToShortDayLoopCounterList(short elem) {
    if (this.shortDayLoopCounterList == null) {
      this.shortDayLoopCounterList = new ArrayList<Short>();
    }
    this.shortDayLoopCounterList.add(elem);
  }

  public List<Short> getShortDayLoopCounterList() {
    return this.shortDayLoopCounterList;
  }

  public GuildBaseInfo setShortDayLoopCounterList(List<Short> shortDayLoopCounterList) {
    this.shortDayLoopCounterList = shortDayLoopCounterList;
    return this;
  }

  public void unsetShortDayLoopCounterList() {
    this.shortDayLoopCounterList = null;
  }

  /** Returns true if field shortDayLoopCounterList is set (has been assigned a value) and false otherwise */
  public boolean isSetShortDayLoopCounterList() {
    return this.shortDayLoopCounterList != null;
  }

  public void setShortDayLoopCounterListIsSet(boolean value) {
    if (!value) {
      this.shortDayLoopCounterList = null;
    }
  }

  public int getIntDayLoopCounterListSize() {
    return (this.intDayLoopCounterList == null) ? 0 : this.intDayLoopCounterList.size();
  }

  public java.util.Iterator<Integer> getIntDayLoopCounterListIterator() {
    return (this.intDayLoopCounterList == null) ? null : this.intDayLoopCounterList.iterator();
  }

  public void addToIntDayLoopCounterList(int elem) {
    if (this.intDayLoopCounterList == null) {
      this.intDayLoopCounterList = new ArrayList<Integer>();
    }
    this.intDayLoopCounterList.add(elem);
  }

  public List<Integer> getIntDayLoopCounterList() {
    return this.intDayLoopCounterList;
  }

  public GuildBaseInfo setIntDayLoopCounterList(List<Integer> intDayLoopCounterList) {
    this.intDayLoopCounterList = intDayLoopCounterList;
    return this;
  }

  public void unsetIntDayLoopCounterList() {
    this.intDayLoopCounterList = null;
  }

  /** Returns true if field intDayLoopCounterList is set (has been assigned a value) and false otherwise */
  public boolean isSetIntDayLoopCounterList() {
    return this.intDayLoopCounterList != null;
  }

  public void setIntDayLoopCounterListIsSet(boolean value) {
    if (!value) {
      this.intDayLoopCounterList = null;
    }
  }

  public int getIntCounterListSize() {
    return (this.intCounterList == null) ? 0 : this.intCounterList.size();
  }

  public java.util.Iterator<Integer> getIntCounterListIterator() {
    return (this.intCounterList == null) ? null : this.intCounterList.iterator();
  }

  public void addToIntCounterList(int elem) {
    if (this.intCounterList == null) {
      this.intCounterList = new ArrayList<Integer>();
    }
    this.intCounterList.add(elem);
  }

  public List<Integer> getIntCounterList() {
    return this.intCounterList;
  }

  public GuildBaseInfo setIntCounterList(List<Integer> intCounterList) {
    this.intCounterList = intCounterList;
    return this;
  }

  public void unsetIntCounterList() {
    this.intCounterList = null;
  }

  /** Returns true if field intCounterList is set (has been assigned a value) and false otherwise */
  public boolean isSetIntCounterList() {
    return this.intCounterList != null;
  }

  public void setIntCounterListIsSet(boolean value) {
    if (!value) {
      this.intCounterList = null;
    }
  }

  public int getGuildExp() {
    return this.guildExp;
  }

  public GuildBaseInfo setGuildExp(int guildExp) {
    this.guildExp = guildExp;
    setGuildExpIsSet(true);
    return this;
  }

  public void unsetGuildExp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GUILDEXP_ISSET_ID);
  }

  /** Returns true if field guildExp is set (has been assigned a value) and false otherwise */
  public boolean isSetGuildExp() {
    return EncodingUtils.testBit(__isset_bitfield, __GUILDEXP_ISSET_ID);
  }

  public void setGuildExpIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GUILDEXP_ISSET_ID, value);
  }

  public int getHonorLevel() {
    return this.honorLevel;
  }

  public GuildBaseInfo setHonorLevel(int honorLevel) {
    this.honorLevel = honorLevel;
    setHonorLevelIsSet(true);
    return this;
  }

  public void unsetHonorLevel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HONORLEVEL_ISSET_ID);
  }

  /** Returns true if field honorLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetHonorLevel() {
    return EncodingUtils.testBit(__isset_bitfield, __HONORLEVEL_ISSET_ID);
  }

  public void setHonorLevelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HONORLEVEL_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case GUILD_ID:
      if (value == null) {
        unsetGuildId();
      } else {
        setGuildId((Long)value);
      }
      break;

    case GUILD_NAME:
      if (value == null) {
        unsetGuildName();
      } else {
        setGuildName((String)value);
      }
      break;

    case LEADER_INFO:
      if (value == null) {
        unsetLeaderInfo();
      } else {
        setLeaderInfo((GuildMemInfo)value);
      }
      break;

    case GUILD_ICON:
      if (value == null) {
        unsetGuildIcon();
      } else {
        setGuildIcon((String)value);
      }
      break;

    case NOTICE_BOARD:
      if (value == null) {
        unsetNoticeBoard();
      } else {
        setNoticeBoard((String)value);
      }
      break;

    case MEMBER_COUNT:
      if (value == null) {
        unsetMemberCount();
      } else {
        setMemberCount((Short)value);
      }
      break;

    case AVERAGE_LEVEL:
      if (value == null) {
        unsetAverageLevel();
      } else {
        setAverageLevel((Short)value);
      }
      break;

    case POPULARITY_COUNT:
      if (value == null) {
        unsetPopularityCount();
      } else {
        setPopularityCount((Long)value);
      }
      break;

    case VIP_EXP_COUNT:
      if (value == null) {
        unsetVipExpCount();
      } else {
        setVipExpCount((Integer)value);
      }
      break;

    case APPLY_FLAG:
      if (value == null) {
        unsetApplyFlag();
      } else {
        setApplyFlag((Byte)value);
      }
      break;

    case LIMIT_COUNT:
      if (value == null) {
        unsetLimitCount();
      } else {
        setLimitCount((Short)value);
      }
      break;

    case HONOR:
      if (value == null) {
        unsetHonor();
      } else {
        setHonor((Integer)value);
      }
      break;

    case LEVEL:
      if (value == null) {
        unsetLevel();
      } else {
        setLevel((Integer)value);
      }
      break;

    case ASSISTANT_COUNT:
      if (value == null) {
        unsetAssistantCount();
      } else {
        setAssistantCount((Integer)value);
      }
      break;

    case ASSISTANT_MAX_COUNT:
      if (value == null) {
        unsetAssistantMaxCount();
      } else {
        setAssistantMaxCount((Integer)value);
      }
      break;

    case FLAGS:
      if (value == null) {
        unsetFlags();
      } else {
        setFlags((ByteBuffer)value);
      }
      break;

    case BYTE_DAY_LOOP_COUNTER_LIST:
      if (value == null) {
        unsetByteDayLoopCounterList();
      } else {
        setByteDayLoopCounterList((List<Byte>)value);
      }
      break;

    case SHORT_DAY_LOOP_COUNTER_LIST:
      if (value == null) {
        unsetShortDayLoopCounterList();
      } else {
        setShortDayLoopCounterList((List<Short>)value);
      }
      break;

    case INT_DAY_LOOP_COUNTER_LIST:
      if (value == null) {
        unsetIntDayLoopCounterList();
      } else {
        setIntDayLoopCounterList((List<Integer>)value);
      }
      break;

    case INT_COUNTER_LIST:
      if (value == null) {
        unsetIntCounterList();
      } else {
        setIntCounterList((List<Integer>)value);
      }
      break;

    case GUILD_EXP:
      if (value == null) {
        unsetGuildExp();
      } else {
        setGuildExp((Integer)value);
      }
      break;

    case HONOR_LEVEL:
      if (value == null) {
        unsetHonorLevel();
      } else {
        setHonorLevel((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case GUILD_ID:
      return Long.valueOf(getGuildId());

    case GUILD_NAME:
      return getGuildName();

    case LEADER_INFO:
      return getLeaderInfo();

    case GUILD_ICON:
      return getGuildIcon();

    case NOTICE_BOARD:
      return getNoticeBoard();

    case MEMBER_COUNT:
      return Short.valueOf(getMemberCount());

    case AVERAGE_LEVEL:
      return Short.valueOf(getAverageLevel());

    case POPULARITY_COUNT:
      return Long.valueOf(getPopularityCount());

    case VIP_EXP_COUNT:
      return Integer.valueOf(getVipExpCount());

    case APPLY_FLAG:
      return Byte.valueOf(getApplyFlag());

    case LIMIT_COUNT:
      return Short.valueOf(getLimitCount());

    case HONOR:
      return Integer.valueOf(getHonor());

    case LEVEL:
      return Integer.valueOf(getLevel());

    case ASSISTANT_COUNT:
      return Integer.valueOf(getAssistantCount());

    case ASSISTANT_MAX_COUNT:
      return Integer.valueOf(getAssistantMaxCount());

    case FLAGS:
      return getFlags();

    case BYTE_DAY_LOOP_COUNTER_LIST:
      return getByteDayLoopCounterList();

    case SHORT_DAY_LOOP_COUNTER_LIST:
      return getShortDayLoopCounterList();

    case INT_DAY_LOOP_COUNTER_LIST:
      return getIntDayLoopCounterList();

    case INT_COUNTER_LIST:
      return getIntCounterList();

    case GUILD_EXP:
      return Integer.valueOf(getGuildExp());

    case HONOR_LEVEL:
      return Integer.valueOf(getHonorLevel());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case GUILD_ID:
      return isSetGuildId();
    case GUILD_NAME:
      return isSetGuildName();
    case LEADER_INFO:
      return isSetLeaderInfo();
    case GUILD_ICON:
      return isSetGuildIcon();
    case NOTICE_BOARD:
      return isSetNoticeBoard();
    case MEMBER_COUNT:
      return isSetMemberCount();
    case AVERAGE_LEVEL:
      return isSetAverageLevel();
    case POPULARITY_COUNT:
      return isSetPopularityCount();
    case VIP_EXP_COUNT:
      return isSetVipExpCount();
    case APPLY_FLAG:
      return isSetApplyFlag();
    case LIMIT_COUNT:
      return isSetLimitCount();
    case HONOR:
      return isSetHonor();
    case LEVEL:
      return isSetLevel();
    case ASSISTANT_COUNT:
      return isSetAssistantCount();
    case ASSISTANT_MAX_COUNT:
      return isSetAssistantMaxCount();
    case FLAGS:
      return isSetFlags();
    case BYTE_DAY_LOOP_COUNTER_LIST:
      return isSetByteDayLoopCounterList();
    case SHORT_DAY_LOOP_COUNTER_LIST:
      return isSetShortDayLoopCounterList();
    case INT_DAY_LOOP_COUNTER_LIST:
      return isSetIntDayLoopCounterList();
    case INT_COUNTER_LIST:
      return isSetIntCounterList();
    case GUILD_EXP:
      return isSetGuildExp();
    case HONOR_LEVEL:
      return isSetHonorLevel();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GuildBaseInfo)
      return this.equals((GuildBaseInfo)that);
    return false;
  }

  public boolean equals(GuildBaseInfo that) {
    if (that == null)
      return false;

    boolean this_present_guildId = true;
    boolean that_present_guildId = true;
    if (this_present_guildId || that_present_guildId) {
      if (!(this_present_guildId && that_present_guildId))
        return false;
      if (this.guildId != that.guildId)
        return false;
    }

    boolean this_present_guildName = true && this.isSetGuildName();
    boolean that_present_guildName = true && that.isSetGuildName();
    if (this_present_guildName || that_present_guildName) {
      if (!(this_present_guildName && that_present_guildName))
        return false;
      if (!this.guildName.equals(that.guildName))
        return false;
    }

    boolean this_present_leaderInfo = true && this.isSetLeaderInfo();
    boolean that_present_leaderInfo = true && that.isSetLeaderInfo();
    if (this_present_leaderInfo || that_present_leaderInfo) {
      if (!(this_present_leaderInfo && that_present_leaderInfo))
        return false;
      if (!this.leaderInfo.equals(that.leaderInfo))
        return false;
    }

    boolean this_present_guildIcon = true && this.isSetGuildIcon();
    boolean that_present_guildIcon = true && that.isSetGuildIcon();
    if (this_present_guildIcon || that_present_guildIcon) {
      if (!(this_present_guildIcon && that_present_guildIcon))
        return false;
      if (!this.guildIcon.equals(that.guildIcon))
        return false;
    }

    boolean this_present_noticeBoard = true && this.isSetNoticeBoard();
    boolean that_present_noticeBoard = true && that.isSetNoticeBoard();
    if (this_present_noticeBoard || that_present_noticeBoard) {
      if (!(this_present_noticeBoard && that_present_noticeBoard))
        return false;
      if (!this.noticeBoard.equals(that.noticeBoard))
        return false;
    }

    boolean this_present_memberCount = true;
    boolean that_present_memberCount = true;
    if (this_present_memberCount || that_present_memberCount) {
      if (!(this_present_memberCount && that_present_memberCount))
        return false;
      if (this.memberCount != that.memberCount)
        return false;
    }

    boolean this_present_averageLevel = true;
    boolean that_present_averageLevel = true;
    if (this_present_averageLevel || that_present_averageLevel) {
      if (!(this_present_averageLevel && that_present_averageLevel))
        return false;
      if (this.averageLevel != that.averageLevel)
        return false;
    }

    boolean this_present_popularityCount = true;
    boolean that_present_popularityCount = true;
    if (this_present_popularityCount || that_present_popularityCount) {
      if (!(this_present_popularityCount && that_present_popularityCount))
        return false;
      if (this.popularityCount != that.popularityCount)
        return false;
    }

    boolean this_present_vipExpCount = true;
    boolean that_present_vipExpCount = true;
    if (this_present_vipExpCount || that_present_vipExpCount) {
      if (!(this_present_vipExpCount && that_present_vipExpCount))
        return false;
      if (this.vipExpCount != that.vipExpCount)
        return false;
    }

    boolean this_present_applyFlag = true;
    boolean that_present_applyFlag = true;
    if (this_present_applyFlag || that_present_applyFlag) {
      if (!(this_present_applyFlag && that_present_applyFlag))
        return false;
      if (this.applyFlag != that.applyFlag)
        return false;
    }

    boolean this_present_limitCount = true;
    boolean that_present_limitCount = true;
    if (this_present_limitCount || that_present_limitCount) {
      if (!(this_present_limitCount && that_present_limitCount))
        return false;
      if (this.limitCount != that.limitCount)
        return false;
    }

    boolean this_present_honor = true;
    boolean that_present_honor = true;
    if (this_present_honor || that_present_honor) {
      if (!(this_present_honor && that_present_honor))
        return false;
      if (this.honor != that.honor)
        return false;
    }

    boolean this_present_level = true;
    boolean that_present_level = true;
    if (this_present_level || that_present_level) {
      if (!(this_present_level && that_present_level))
        return false;
      if (this.level != that.level)
        return false;
    }

    boolean this_present_assistantCount = true;
    boolean that_present_assistantCount = true;
    if (this_present_assistantCount || that_present_assistantCount) {
      if (!(this_present_assistantCount && that_present_assistantCount))
        return false;
      if (this.assistantCount != that.assistantCount)
        return false;
    }

    boolean this_present_assistantMaxCount = true;
    boolean that_present_assistantMaxCount = true;
    if (this_present_assistantMaxCount || that_present_assistantMaxCount) {
      if (!(this_present_assistantMaxCount && that_present_assistantMaxCount))
        return false;
      if (this.assistantMaxCount != that.assistantMaxCount)
        return false;
    }

    boolean this_present_flags = true && this.isSetFlags();
    boolean that_present_flags = true && that.isSetFlags();
    if (this_present_flags || that_present_flags) {
      if (!(this_present_flags && that_present_flags))
        return false;
      if (!this.flags.equals(that.flags))
        return false;
    }

    boolean this_present_byteDayLoopCounterList = true && this.isSetByteDayLoopCounterList();
    boolean that_present_byteDayLoopCounterList = true && that.isSetByteDayLoopCounterList();
    if (this_present_byteDayLoopCounterList || that_present_byteDayLoopCounterList) {
      if (!(this_present_byteDayLoopCounterList && that_present_byteDayLoopCounterList))
        return false;
      if (!this.byteDayLoopCounterList.equals(that.byteDayLoopCounterList))
        return false;
    }

    boolean this_present_shortDayLoopCounterList = true && this.isSetShortDayLoopCounterList();
    boolean that_present_shortDayLoopCounterList = true && that.isSetShortDayLoopCounterList();
    if (this_present_shortDayLoopCounterList || that_present_shortDayLoopCounterList) {
      if (!(this_present_shortDayLoopCounterList && that_present_shortDayLoopCounterList))
        return false;
      if (!this.shortDayLoopCounterList.equals(that.shortDayLoopCounterList))
        return false;
    }

    boolean this_present_intDayLoopCounterList = true && this.isSetIntDayLoopCounterList();
    boolean that_present_intDayLoopCounterList = true && that.isSetIntDayLoopCounterList();
    if (this_present_intDayLoopCounterList || that_present_intDayLoopCounterList) {
      if (!(this_present_intDayLoopCounterList && that_present_intDayLoopCounterList))
        return false;
      if (!this.intDayLoopCounterList.equals(that.intDayLoopCounterList))
        return false;
    }

    boolean this_present_intCounterList = true && this.isSetIntCounterList();
    boolean that_present_intCounterList = true && that.isSetIntCounterList();
    if (this_present_intCounterList || that_present_intCounterList) {
      if (!(this_present_intCounterList && that_present_intCounterList))
        return false;
      if (!this.intCounterList.equals(that.intCounterList))
        return false;
    }

    boolean this_present_guildExp = true && this.isSetGuildExp();
    boolean that_present_guildExp = true && that.isSetGuildExp();
    if (this_present_guildExp || that_present_guildExp) {
      if (!(this_present_guildExp && that_present_guildExp))
        return false;
      if (this.guildExp != that.guildExp)
        return false;
    }

    boolean this_present_honorLevel = true && this.isSetHonorLevel();
    boolean that_present_honorLevel = true && that.isSetHonorLevel();
    if (this_present_honorLevel || that_present_honorLevel) {
      if (!(this_present_honorLevel && that_present_honorLevel))
        return false;
      if (this.honorLevel != that.honorLevel)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(GuildBaseInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    GuildBaseInfo typedOther = (GuildBaseInfo)other;

    lastComparison = Boolean.valueOf(isSetGuildId()).compareTo(typedOther.isSetGuildId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGuildId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.guildId, typedOther.guildId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGuildName()).compareTo(typedOther.isSetGuildName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGuildName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.guildName, typedOther.guildName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLeaderInfo()).compareTo(typedOther.isSetLeaderInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeaderInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leaderInfo, typedOther.leaderInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGuildIcon()).compareTo(typedOther.isSetGuildIcon());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGuildIcon()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.guildIcon, typedOther.guildIcon);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNoticeBoard()).compareTo(typedOther.isSetNoticeBoard());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNoticeBoard()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noticeBoard, typedOther.noticeBoard);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemberCount()).compareTo(typedOther.isSetMemberCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemberCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberCount, typedOther.memberCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAverageLevel()).compareTo(typedOther.isSetAverageLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAverageLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.averageLevel, typedOther.averageLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPopularityCount()).compareTo(typedOther.isSetPopularityCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPopularityCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.popularityCount, typedOther.popularityCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVipExpCount()).compareTo(typedOther.isSetVipExpCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVipExpCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vipExpCount, typedOther.vipExpCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplyFlag()).compareTo(typedOther.isSetApplyFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplyFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyFlag, typedOther.applyFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLimitCount()).compareTo(typedOther.isSetLimitCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimitCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limitCount, typedOther.limitCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHonor()).compareTo(typedOther.isSetHonor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHonor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.honor, typedOther.honor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLevel()).compareTo(typedOther.isSetLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.level, typedOther.level);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssistantCount()).compareTo(typedOther.isSetAssistantCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssistantCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assistantCount, typedOther.assistantCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssistantMaxCount()).compareTo(typedOther.isSetAssistantMaxCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssistantMaxCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assistantMaxCount, typedOther.assistantMaxCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlags()).compareTo(typedOther.isSetFlags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flags, typedOther.flags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetByteDayLoopCounterList()).compareTo(typedOther.isSetByteDayLoopCounterList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetByteDayLoopCounterList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.byteDayLoopCounterList, typedOther.byteDayLoopCounterList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShortDayLoopCounterList()).compareTo(typedOther.isSetShortDayLoopCounterList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShortDayLoopCounterList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shortDayLoopCounterList, typedOther.shortDayLoopCounterList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIntDayLoopCounterList()).compareTo(typedOther.isSetIntDayLoopCounterList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntDayLoopCounterList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intDayLoopCounterList, typedOther.intDayLoopCounterList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIntCounterList()).compareTo(typedOther.isSetIntCounterList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntCounterList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intCounterList, typedOther.intCounterList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGuildExp()).compareTo(typedOther.isSetGuildExp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGuildExp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.guildExp, typedOther.guildExp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHonorLevel()).compareTo(typedOther.isSetHonorLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHonorLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.honorLevel, typedOther.honorLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GuildBaseInfo(");
    boolean first = true;

    sb.append("guildId:");
    sb.append(this.guildId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("guildName:");
    if (this.guildName == null) {
      sb.append("null");
    } else {
      sb.append(this.guildName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("leaderInfo:");
    if (this.leaderInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.leaderInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("guildIcon:");
    if (this.guildIcon == null) {
      sb.append("null");
    } else {
      sb.append(this.guildIcon);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("noticeBoard:");
    if (this.noticeBoard == null) {
      sb.append("null");
    } else {
      sb.append(this.noticeBoard);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("memberCount:");
    sb.append(this.memberCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("averageLevel:");
    sb.append(this.averageLevel);
    first = false;
    if (!first) sb.append(", ");
    sb.append("popularityCount:");
    sb.append(this.popularityCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vipExpCount:");
    sb.append(this.vipExpCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("applyFlag:");
    sb.append(this.applyFlag);
    first = false;
    if (!first) sb.append(", ");
    sb.append("limitCount:");
    sb.append(this.limitCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("honor:");
    sb.append(this.honor);
    first = false;
    if (!first) sb.append(", ");
    sb.append("level:");
    sb.append(this.level);
    first = false;
    if (!first) sb.append(", ");
    sb.append("assistantCount:");
    sb.append(this.assistantCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("assistantMaxCount:");
    sb.append(this.assistantMaxCount);
    first = false;
    if (isSetFlags()) {
      if (!first) sb.append(", ");
      sb.append("flags:");
      if (this.flags == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.flags, sb);
      }
      first = false;
    }
    if (isSetByteDayLoopCounterList()) {
      if (!first) sb.append(", ");
      sb.append("byteDayLoopCounterList:");
      if (this.byteDayLoopCounterList == null) {
        sb.append("null");
      } else {
        sb.append(this.byteDayLoopCounterList);
      }
      first = false;
    }
    if (isSetShortDayLoopCounterList()) {
      if (!first) sb.append(", ");
      sb.append("shortDayLoopCounterList:");
      if (this.shortDayLoopCounterList == null) {
        sb.append("null");
      } else {
        sb.append(this.shortDayLoopCounterList);
      }
      first = false;
    }
    if (isSetIntDayLoopCounterList()) {
      if (!first) sb.append(", ");
      sb.append("intDayLoopCounterList:");
      if (this.intDayLoopCounterList == null) {
        sb.append("null");
      } else {
        sb.append(this.intDayLoopCounterList);
      }
      first = false;
    }
    if (isSetIntCounterList()) {
      if (!first) sb.append(", ");
      sb.append("intCounterList:");
      if (this.intCounterList == null) {
        sb.append("null");
      } else {
        sb.append(this.intCounterList);
      }
      first = false;
    }
    if (isSetGuildExp()) {
      if (!first) sb.append(", ");
      sb.append("guildExp:");
      sb.append(this.guildExp);
      first = false;
    }
    if (isSetHonorLevel()) {
      if (!first) sb.append(", ");
      sb.append("honorLevel:");
      sb.append(this.honorLevel);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (leaderInfo != null) {
      leaderInfo.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GuildBaseInfoStandardSchemeFactory implements SchemeFactory {
    public GuildBaseInfoStandardScheme getScheme() {
      return new GuildBaseInfoStandardScheme();
    }
  }

  private static class GuildBaseInfoStandardScheme extends StandardScheme<GuildBaseInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GuildBaseInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GUILD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.guildId = iprot.readI64();
              struct.setGuildIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GUILD_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.guildName = iprot.readString();
              struct.setGuildNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LEADER_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.leaderInfo = new GuildMemInfo();
              struct.leaderInfo.read(iprot);
              struct.setLeaderInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // GUILD_ICON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.guildIcon = iprot.readString();
              struct.setGuildIconIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NOTICE_BOARD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.noticeBoard = iprot.readString();
              struct.setNoticeBoardIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MEMBER_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.memberCount = iprot.readI16();
              struct.setMemberCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // AVERAGE_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.averageLevel = iprot.readI16();
              struct.setAverageLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // POPULARITY_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.popularityCount = iprot.readI64();
              struct.setPopularityCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // VIP_EXP_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.vipExpCount = iprot.readI32();
              struct.setVipExpCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // APPLY_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.applyFlag = iprot.readByte();
              struct.setApplyFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // LIMIT_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.limitCount = iprot.readI16();
              struct.setLimitCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // HONOR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.honor = iprot.readI32();
              struct.setHonorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.level = iprot.readI32();
              struct.setLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // ASSISTANT_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.assistantCount = iprot.readI32();
              struct.setAssistantCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // ASSISTANT_MAX_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.assistantMaxCount = iprot.readI32();
              struct.setAssistantMaxCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // FLAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.flags = iprot.readBinary();
              struct.setFlagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // BYTE_DAY_LOOP_COUNTER_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list414 = iprot.readListBegin();
                struct.byteDayLoopCounterList = new ArrayList<Byte>(_list414.size);
                for (int _i415 = 0; _i415 < _list414.size; ++_i415)
                {
                  byte _elem416; // required
                  _elem416 = iprot.readByte();
                  struct.byteDayLoopCounterList.add(_elem416);
                }
                iprot.readListEnd();
              }
              struct.setByteDayLoopCounterListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // SHORT_DAY_LOOP_COUNTER_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list417 = iprot.readListBegin();
                struct.shortDayLoopCounterList = new ArrayList<Short>(_list417.size);
                for (int _i418 = 0; _i418 < _list417.size; ++_i418)
                {
                  short _elem419; // required
                  _elem419 = iprot.readI16();
                  struct.shortDayLoopCounterList.add(_elem419);
                }
                iprot.readListEnd();
              }
              struct.setShortDayLoopCounterListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // INT_DAY_LOOP_COUNTER_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list420 = iprot.readListBegin();
                struct.intDayLoopCounterList = new ArrayList<Integer>(_list420.size);
                for (int _i421 = 0; _i421 < _list420.size; ++_i421)
                {
                  int _elem422; // required
                  _elem422 = iprot.readI32();
                  struct.intDayLoopCounterList.add(_elem422);
                }
                iprot.readListEnd();
              }
              struct.setIntDayLoopCounterListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // INT_COUNTER_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list423 = iprot.readListBegin();
                struct.intCounterList = new ArrayList<Integer>(_list423.size);
                for (int _i424 = 0; _i424 < _list423.size; ++_i424)
                {
                  int _elem425; // required
                  _elem425 = iprot.readI32();
                  struct.intCounterList.add(_elem425);
                }
                iprot.readListEnd();
              }
              struct.setIntCounterListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // GUILD_EXP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.guildExp = iprot.readI32();
              struct.setGuildExpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // HONOR_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.honorLevel = iprot.readI32();
              struct.setHonorLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GuildBaseInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(GUILD_ID_FIELD_DESC);
      oprot.writeI64(struct.guildId);
      oprot.writeFieldEnd();
      if (struct.guildName != null) {
        oprot.writeFieldBegin(GUILD_NAME_FIELD_DESC);
        oprot.writeString(struct.guildName);
        oprot.writeFieldEnd();
      }
      if (struct.leaderInfo != null) {
        oprot.writeFieldBegin(LEADER_INFO_FIELD_DESC);
        struct.leaderInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.guildIcon != null) {
        oprot.writeFieldBegin(GUILD_ICON_FIELD_DESC);
        oprot.writeString(struct.guildIcon);
        oprot.writeFieldEnd();
      }
      if (struct.noticeBoard != null) {
        oprot.writeFieldBegin(NOTICE_BOARD_FIELD_DESC);
        oprot.writeString(struct.noticeBoard);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MEMBER_COUNT_FIELD_DESC);
      oprot.writeI16(struct.memberCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AVERAGE_LEVEL_FIELD_DESC);
      oprot.writeI16(struct.averageLevel);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POPULARITY_COUNT_FIELD_DESC);
      oprot.writeI64(struct.popularityCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VIP_EXP_COUNT_FIELD_DESC);
      oprot.writeI32(struct.vipExpCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(APPLY_FLAG_FIELD_DESC);
      oprot.writeByte(struct.applyFlag);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LIMIT_COUNT_FIELD_DESC);
      oprot.writeI16(struct.limitCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HONOR_FIELD_DESC);
      oprot.writeI32(struct.honor);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LEVEL_FIELD_DESC);
      oprot.writeI32(struct.level);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ASSISTANT_COUNT_FIELD_DESC);
      oprot.writeI32(struct.assistantCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ASSISTANT_MAX_COUNT_FIELD_DESC);
      oprot.writeI32(struct.assistantMaxCount);
      oprot.writeFieldEnd();
      if (struct.flags != null) {
        if (struct.isSetFlags()) {
          oprot.writeFieldBegin(FLAGS_FIELD_DESC);
          oprot.writeBinary(struct.flags);
          oprot.writeFieldEnd();
        }
      }
      if (struct.byteDayLoopCounterList != null) {
        if (struct.isSetByteDayLoopCounterList()) {
          oprot.writeFieldBegin(BYTE_DAY_LOOP_COUNTER_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BYTE, struct.byteDayLoopCounterList.size()));
            for (byte _iter426 : struct.byteDayLoopCounterList)
            {
              oprot.writeByte(_iter426);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.shortDayLoopCounterList != null) {
        if (struct.isSetShortDayLoopCounterList()) {
          oprot.writeFieldBegin(SHORT_DAY_LOOP_COUNTER_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, struct.shortDayLoopCounterList.size()));
            for (short _iter427 : struct.shortDayLoopCounterList)
            {
              oprot.writeI16(_iter427);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.intDayLoopCounterList != null) {
        if (struct.isSetIntDayLoopCounterList()) {
          oprot.writeFieldBegin(INT_DAY_LOOP_COUNTER_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.intDayLoopCounterList.size()));
            for (int _iter428 : struct.intDayLoopCounterList)
            {
              oprot.writeI32(_iter428);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.intCounterList != null) {
        if (struct.isSetIntCounterList()) {
          oprot.writeFieldBegin(INT_COUNTER_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.intCounterList.size()));
            for (int _iter429 : struct.intCounterList)
            {
              oprot.writeI32(_iter429);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetGuildExp()) {
        oprot.writeFieldBegin(GUILD_EXP_FIELD_DESC);
        oprot.writeI32(struct.guildExp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHonorLevel()) {
        oprot.writeFieldBegin(HONOR_LEVEL_FIELD_DESC);
        oprot.writeI32(struct.honorLevel);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GuildBaseInfoTupleSchemeFactory implements SchemeFactory {
    public GuildBaseInfoTupleScheme getScheme() {
      return new GuildBaseInfoTupleScheme();
    }
  }

  private static class GuildBaseInfoTupleScheme extends TupleScheme<GuildBaseInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GuildBaseInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetGuildId()) {
        optionals.set(0);
      }
      if (struct.isSetGuildName()) {
        optionals.set(1);
      }
      if (struct.isSetLeaderInfo()) {
        optionals.set(2);
      }
      if (struct.isSetGuildIcon()) {
        optionals.set(3);
      }
      if (struct.isSetNoticeBoard()) {
        optionals.set(4);
      }
      if (struct.isSetMemberCount()) {
        optionals.set(5);
      }
      if (struct.isSetAverageLevel()) {
        optionals.set(6);
      }
      if (struct.isSetPopularityCount()) {
        optionals.set(7);
      }
      if (struct.isSetVipExpCount()) {
        optionals.set(8);
      }
      if (struct.isSetApplyFlag()) {
        optionals.set(9);
      }
      if (struct.isSetLimitCount()) {
        optionals.set(10);
      }
      if (struct.isSetHonor()) {
        optionals.set(11);
      }
      if (struct.isSetLevel()) {
        optionals.set(12);
      }
      if (struct.isSetAssistantCount()) {
        optionals.set(13);
      }
      if (struct.isSetAssistantMaxCount()) {
        optionals.set(14);
      }
      if (struct.isSetFlags()) {
        optionals.set(15);
      }
      if (struct.isSetByteDayLoopCounterList()) {
        optionals.set(16);
      }
      if (struct.isSetShortDayLoopCounterList()) {
        optionals.set(17);
      }
      if (struct.isSetIntDayLoopCounterList()) {
        optionals.set(18);
      }
      if (struct.isSetIntCounterList()) {
        optionals.set(19);
      }
      if (struct.isSetGuildExp()) {
        optionals.set(20);
      }
      if (struct.isSetHonorLevel()) {
        optionals.set(21);
      }
      oprot.writeBitSet(optionals, 22);
      if (struct.isSetGuildId()) {
        oprot.writeI64(struct.guildId);
      }
      if (struct.isSetGuildName()) {
        oprot.writeString(struct.guildName);
      }
      if (struct.isSetLeaderInfo()) {
        struct.leaderInfo.write(oprot);
      }
      if (struct.isSetGuildIcon()) {
        oprot.writeString(struct.guildIcon);
      }
      if (struct.isSetNoticeBoard()) {
        oprot.writeString(struct.noticeBoard);
      }
      if (struct.isSetMemberCount()) {
        oprot.writeI16(struct.memberCount);
      }
      if (struct.isSetAverageLevel()) {
        oprot.writeI16(struct.averageLevel);
      }
      if (struct.isSetPopularityCount()) {
        oprot.writeI64(struct.popularityCount);
      }
      if (struct.isSetVipExpCount()) {
        oprot.writeI32(struct.vipExpCount);
      }
      if (struct.isSetApplyFlag()) {
        oprot.writeByte(struct.applyFlag);
      }
      if (struct.isSetLimitCount()) {
        oprot.writeI16(struct.limitCount);
      }
      if (struct.isSetHonor()) {
        oprot.writeI32(struct.honor);
      }
      if (struct.isSetLevel()) {
        oprot.writeI32(struct.level);
      }
      if (struct.isSetAssistantCount()) {
        oprot.writeI32(struct.assistantCount);
      }
      if (struct.isSetAssistantMaxCount()) {
        oprot.writeI32(struct.assistantMaxCount);
      }
      if (struct.isSetFlags()) {
        oprot.writeBinary(struct.flags);
      }
      if (struct.isSetByteDayLoopCounterList()) {
        {
          oprot.writeI32(struct.byteDayLoopCounterList.size());
          for (byte _iter430 : struct.byteDayLoopCounterList)
          {
            oprot.writeByte(_iter430);
          }
        }
      }
      if (struct.isSetShortDayLoopCounterList()) {
        {
          oprot.writeI32(struct.shortDayLoopCounterList.size());
          for (short _iter431 : struct.shortDayLoopCounterList)
          {
            oprot.writeI16(_iter431);
          }
        }
      }
      if (struct.isSetIntDayLoopCounterList()) {
        {
          oprot.writeI32(struct.intDayLoopCounterList.size());
          for (int _iter432 : struct.intDayLoopCounterList)
          {
            oprot.writeI32(_iter432);
          }
        }
      }
      if (struct.isSetIntCounterList()) {
        {
          oprot.writeI32(struct.intCounterList.size());
          for (int _iter433 : struct.intCounterList)
          {
            oprot.writeI32(_iter433);
          }
        }
      }
      if (struct.isSetGuildExp()) {
        oprot.writeI32(struct.guildExp);
      }
      if (struct.isSetHonorLevel()) {
        oprot.writeI32(struct.honorLevel);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GuildBaseInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(22);
      if (incoming.get(0)) {
        struct.guildId = iprot.readI64();
        struct.setGuildIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.guildName = iprot.readString();
        struct.setGuildNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.leaderInfo = new GuildMemInfo();
        struct.leaderInfo.read(iprot);
        struct.setLeaderInfoIsSet(true);
      }
      if (incoming.get(3)) {
        struct.guildIcon = iprot.readString();
        struct.setGuildIconIsSet(true);
      }
      if (incoming.get(4)) {
        struct.noticeBoard = iprot.readString();
        struct.setNoticeBoardIsSet(true);
      }
      if (incoming.get(5)) {
        struct.memberCount = iprot.readI16();
        struct.setMemberCountIsSet(true);
      }
      if (incoming.get(6)) {
        struct.averageLevel = iprot.readI16();
        struct.setAverageLevelIsSet(true);
      }
      if (incoming.get(7)) {
        struct.popularityCount = iprot.readI64();
        struct.setPopularityCountIsSet(true);
      }
      if (incoming.get(8)) {
        struct.vipExpCount = iprot.readI32();
        struct.setVipExpCountIsSet(true);
      }
      if (incoming.get(9)) {
        struct.applyFlag = iprot.readByte();
        struct.setApplyFlagIsSet(true);
      }
      if (incoming.get(10)) {
        struct.limitCount = iprot.readI16();
        struct.setLimitCountIsSet(true);
      }
      if (incoming.get(11)) {
        struct.honor = iprot.readI32();
        struct.setHonorIsSet(true);
      }
      if (incoming.get(12)) {
        struct.level = iprot.readI32();
        struct.setLevelIsSet(true);
      }
      if (incoming.get(13)) {
        struct.assistantCount = iprot.readI32();
        struct.setAssistantCountIsSet(true);
      }
      if (incoming.get(14)) {
        struct.assistantMaxCount = iprot.readI32();
        struct.setAssistantMaxCountIsSet(true);
      }
      if (incoming.get(15)) {
        struct.flags = iprot.readBinary();
        struct.setFlagsIsSet(true);
      }
      if (incoming.get(16)) {
        {
          org.apache.thrift.protocol.TList _list434 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BYTE, iprot.readI32());
          struct.byteDayLoopCounterList = new ArrayList<Byte>(_list434.size);
          for (int _i435 = 0; _i435 < _list434.size; ++_i435)
          {
            byte _elem436; // required
            _elem436 = iprot.readByte();
            struct.byteDayLoopCounterList.add(_elem436);
          }
        }
        struct.setByteDayLoopCounterListIsSet(true);
      }
      if (incoming.get(17)) {
        {
          org.apache.thrift.protocol.TList _list437 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, iprot.readI32());
          struct.shortDayLoopCounterList = new ArrayList<Short>(_list437.size);
          for (int _i438 = 0; _i438 < _list437.size; ++_i438)
          {
            short _elem439; // required
            _elem439 = iprot.readI16();
            struct.shortDayLoopCounterList.add(_elem439);
          }
        }
        struct.setShortDayLoopCounterListIsSet(true);
      }
      if (incoming.get(18)) {
        {
          org.apache.thrift.protocol.TList _list440 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.intDayLoopCounterList = new ArrayList<Integer>(_list440.size);
          for (int _i441 = 0; _i441 < _list440.size; ++_i441)
          {
            int _elem442; // required
            _elem442 = iprot.readI32();
            struct.intDayLoopCounterList.add(_elem442);
          }
        }
        struct.setIntDayLoopCounterListIsSet(true);
      }
      if (incoming.get(19)) {
        {
          org.apache.thrift.protocol.TList _list443 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.intCounterList = new ArrayList<Integer>(_list443.size);
          for (int _i444 = 0; _i444 < _list443.size; ++_i444)
          {
            int _elem445; // required
            _elem445 = iprot.readI32();
            struct.intCounterList.add(_elem445);
          }
        }
        struct.setIntCounterListIsSet(true);
      }
      if (incoming.get(20)) {
        struct.guildExp = iprot.readI32();
        struct.setGuildExpIsSet(true);
      }
      if (incoming.get(21)) {
        struct.honorLevel = iprot.readI32();
        struct.setHonorLevelIsSet(true);
      }
    }
  }

}

