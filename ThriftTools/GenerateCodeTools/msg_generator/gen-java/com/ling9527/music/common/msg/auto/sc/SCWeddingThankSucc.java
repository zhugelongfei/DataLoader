/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 婚礼答谢成功
 */
public class SCWeddingThankSucc implements org.apache.thrift.TBase<SCWeddingThankSucc, SCWeddingThankSucc._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCWeddingThankSucc");

  private static final org.apache.thrift.protocol.TField ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("itemId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ITEM_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("itemCount", org.apache.thrift.protocol.TType.I16, (short)2);
  private static final org.apache.thrift.protocol.TField CHAR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("charId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField FUNC_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("funcParams", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCWeddingThankSuccStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCWeddingThankSuccTupleSchemeFactory());
  }

  public int itemId; // required
  public short itemCount; // required
  public long charId; // required
  /**
   * 执行的特效参数
   */
  public List<com.ling9527.music.common.msg.auto.FuncParam> funcParams; // required
  public String content; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ITEM_ID((short)1, "itemId"),
    ITEM_COUNT((short)2, "itemCount"),
    CHAR_ID((short)3, "charId"),
    /**
     * 执行的特效参数
     */
    FUNC_PARAMS((short)4, "funcParams"),
    CONTENT((short)5, "content");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ITEM_ID
          return ITEM_ID;
        case 2: // ITEM_COUNT
          return ITEM_COUNT;
        case 3: // CHAR_ID
          return CHAR_ID;
        case 4: // FUNC_PARAMS
          return FUNC_PARAMS;
        case 5: // CONTENT
          return CONTENT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ITEMID_ISSET_ID = 0;
  private static final int __ITEMCOUNT_ISSET_ID = 1;
  private static final int __CHARID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("itemId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ITEM_COUNT, new org.apache.thrift.meta_data.FieldMetaData("itemCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.CHAR_ID, new org.apache.thrift.meta_data.FieldMetaData("charId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FUNC_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("funcParams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.FuncParam.class))));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCWeddingThankSucc.class, metaDataMap);
  }

  public SCWeddingThankSucc() {
  }

  public SCWeddingThankSucc(
    int itemId,
    short itemCount,
    long charId,
    List<com.ling9527.music.common.msg.auto.FuncParam> funcParams,
    String content)
  {
    this();
    this.itemId = itemId;
    setItemIdIsSet(true);
    this.itemCount = itemCount;
    setItemCountIsSet(true);
    this.charId = charId;
    setCharIdIsSet(true);
    this.funcParams = funcParams;
    this.content = content;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCWeddingThankSucc(SCWeddingThankSucc other) {
    __isset_bitfield = other.__isset_bitfield;
    this.itemId = other.itemId;
    this.itemCount = other.itemCount;
    this.charId = other.charId;
    if (other.isSetFuncParams()) {
      List<com.ling9527.music.common.msg.auto.FuncParam> __this__funcParams = new ArrayList<com.ling9527.music.common.msg.auto.FuncParam>();
      for (com.ling9527.music.common.msg.auto.FuncParam other_element : other.funcParams) {
        __this__funcParams.add(new com.ling9527.music.common.msg.auto.FuncParam(other_element));
      }
      this.funcParams = __this__funcParams;
    }
    if (other.isSetContent()) {
      this.content = other.content;
    }
  }

  public SCWeddingThankSucc deepCopy() {
    return new SCWeddingThankSucc(this);
  }

  @Override
  public void clear() {
    setItemIdIsSet(false);
    this.itemId = 0;
    setItemCountIsSet(false);
    this.itemCount = 0;
    setCharIdIsSet(false);
    this.charId = 0;
    this.funcParams = null;
    this.content = null;
  }

  public int getItemId() {
    return this.itemId;
  }

  public SCWeddingThankSucc setItemId(int itemId) {
    this.itemId = itemId;
    setItemIdIsSet(true);
    return this;
  }

  public void unsetItemId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ITEMID_ISSET_ID);
  }

  /** Returns true if field itemId is set (has been assigned a value) and false otherwise */
  public boolean isSetItemId() {
    return EncodingUtils.testBit(__isset_bitfield, __ITEMID_ISSET_ID);
  }

  public void setItemIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ITEMID_ISSET_ID, value);
  }

  public short getItemCount() {
    return this.itemCount;
  }

  public SCWeddingThankSucc setItemCount(short itemCount) {
    this.itemCount = itemCount;
    setItemCountIsSet(true);
    return this;
  }

  public void unsetItemCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ITEMCOUNT_ISSET_ID);
  }

  /** Returns true if field itemCount is set (has been assigned a value) and false otherwise */
  public boolean isSetItemCount() {
    return EncodingUtils.testBit(__isset_bitfield, __ITEMCOUNT_ISSET_ID);
  }

  public void setItemCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ITEMCOUNT_ISSET_ID, value);
  }

  public long getCharId() {
    return this.charId;
  }

  public SCWeddingThankSucc setCharId(long charId) {
    this.charId = charId;
    setCharIdIsSet(true);
    return this;
  }

  public void unsetCharId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHARID_ISSET_ID);
  }

  /** Returns true if field charId is set (has been assigned a value) and false otherwise */
  public boolean isSetCharId() {
    return EncodingUtils.testBit(__isset_bitfield, __CHARID_ISSET_ID);
  }

  public void setCharIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHARID_ISSET_ID, value);
  }

  public int getFuncParamsSize() {
    return (this.funcParams == null) ? 0 : this.funcParams.size();
  }

  public java.util.Iterator<com.ling9527.music.common.msg.auto.FuncParam> getFuncParamsIterator() {
    return (this.funcParams == null) ? null : this.funcParams.iterator();
  }

  public void addToFuncParams(com.ling9527.music.common.msg.auto.FuncParam elem) {
    if (this.funcParams == null) {
      this.funcParams = new ArrayList<com.ling9527.music.common.msg.auto.FuncParam>();
    }
    this.funcParams.add(elem);
  }

  /**
   * 执行的特效参数
   */
  public List<com.ling9527.music.common.msg.auto.FuncParam> getFuncParams() {
    return this.funcParams;
  }

  /**
   * 执行的特效参数
   */
  public SCWeddingThankSucc setFuncParams(List<com.ling9527.music.common.msg.auto.FuncParam> funcParams) {
    this.funcParams = funcParams;
    return this;
  }

  public void unsetFuncParams() {
    this.funcParams = null;
  }

  /** Returns true if field funcParams is set (has been assigned a value) and false otherwise */
  public boolean isSetFuncParams() {
    return this.funcParams != null;
  }

  public void setFuncParamsIsSet(boolean value) {
    if (!value) {
      this.funcParams = null;
    }
  }

  public String getContent() {
    return this.content;
  }

  public SCWeddingThankSucc setContent(String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ITEM_ID:
      if (value == null) {
        unsetItemId();
      } else {
        setItemId((Integer)value);
      }
      break;

    case ITEM_COUNT:
      if (value == null) {
        unsetItemCount();
      } else {
        setItemCount((Short)value);
      }
      break;

    case CHAR_ID:
      if (value == null) {
        unsetCharId();
      } else {
        setCharId((Long)value);
      }
      break;

    case FUNC_PARAMS:
      if (value == null) {
        unsetFuncParams();
      } else {
        setFuncParams((List<com.ling9527.music.common.msg.auto.FuncParam>)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ITEM_ID:
      return Integer.valueOf(getItemId());

    case ITEM_COUNT:
      return Short.valueOf(getItemCount());

    case CHAR_ID:
      return Long.valueOf(getCharId());

    case FUNC_PARAMS:
      return getFuncParams();

    case CONTENT:
      return getContent();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ITEM_ID:
      return isSetItemId();
    case ITEM_COUNT:
      return isSetItemCount();
    case CHAR_ID:
      return isSetCharId();
    case FUNC_PARAMS:
      return isSetFuncParams();
    case CONTENT:
      return isSetContent();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCWeddingThankSucc)
      return this.equals((SCWeddingThankSucc)that);
    return false;
  }

  public boolean equals(SCWeddingThankSucc that) {
    if (that == null)
      return false;

    boolean this_present_itemId = true;
    boolean that_present_itemId = true;
    if (this_present_itemId || that_present_itemId) {
      if (!(this_present_itemId && that_present_itemId))
        return false;
      if (this.itemId != that.itemId)
        return false;
    }

    boolean this_present_itemCount = true;
    boolean that_present_itemCount = true;
    if (this_present_itemCount || that_present_itemCount) {
      if (!(this_present_itemCount && that_present_itemCount))
        return false;
      if (this.itemCount != that.itemCount)
        return false;
    }

    boolean this_present_charId = true;
    boolean that_present_charId = true;
    if (this_present_charId || that_present_charId) {
      if (!(this_present_charId && that_present_charId))
        return false;
      if (this.charId != that.charId)
        return false;
    }

    boolean this_present_funcParams = true && this.isSetFuncParams();
    boolean that_present_funcParams = true && that.isSetFuncParams();
    if (this_present_funcParams || that_present_funcParams) {
      if (!(this_present_funcParams && that_present_funcParams))
        return false;
      if (!this.funcParams.equals(that.funcParams))
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCWeddingThankSucc other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCWeddingThankSucc typedOther = (SCWeddingThankSucc)other;

    lastComparison = Boolean.valueOf(isSetItemId()).compareTo(typedOther.isSetItemId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemId, typedOther.itemId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItemCount()).compareTo(typedOther.isSetItemCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemCount, typedOther.itemCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCharId()).compareTo(typedOther.isSetCharId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCharId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.charId, typedOther.charId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFuncParams()).compareTo(typedOther.isSetFuncParams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFuncParams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.funcParams, typedOther.funcParams);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(typedOther.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, typedOther.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCWeddingThankSucc(");
    boolean first = true;

    sb.append("itemId:");
    sb.append(this.itemId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("itemCount:");
    sb.append(this.itemCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("charId:");
    sb.append(this.charId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("funcParams:");
    if (this.funcParams == null) {
      sb.append("null");
    } else {
      sb.append(this.funcParams);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      sb.append(this.content);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCWeddingThankSuccStandardSchemeFactory implements SchemeFactory {
    public SCWeddingThankSuccStandardScheme getScheme() {
      return new SCWeddingThankSuccStandardScheme();
    }
  }

  private static class SCWeddingThankSuccStandardScheme extends StandardScheme<SCWeddingThankSucc> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCWeddingThankSucc struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ITEM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.itemId = iprot.readI32();
              struct.setItemIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ITEM_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.itemCount = iprot.readI16();
              struct.setItemCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CHAR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.charId = iprot.readI64();
              struct.setCharIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FUNC_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.funcParams = new ArrayList<com.ling9527.music.common.msg.auto.FuncParam>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  com.ling9527.music.common.msg.auto.FuncParam _elem2; // required
                  _elem2 = new com.ling9527.music.common.msg.auto.FuncParam();
                  _elem2.read(iprot);
                  struct.funcParams.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setFuncParamsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCWeddingThankSucc struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
      oprot.writeI32(struct.itemId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ITEM_COUNT_FIELD_DESC);
      oprot.writeI16(struct.itemCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CHAR_ID_FIELD_DESC);
      oprot.writeI64(struct.charId);
      oprot.writeFieldEnd();
      if (struct.funcParams != null) {
        oprot.writeFieldBegin(FUNC_PARAMS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.funcParams.size()));
          for (com.ling9527.music.common.msg.auto.FuncParam _iter3 : struct.funcParams)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeString(struct.content);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCWeddingThankSuccTupleSchemeFactory implements SchemeFactory {
    public SCWeddingThankSuccTupleScheme getScheme() {
      return new SCWeddingThankSuccTupleScheme();
    }
  }

  private static class SCWeddingThankSuccTupleScheme extends TupleScheme<SCWeddingThankSucc> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCWeddingThankSucc struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetItemId()) {
        optionals.set(0);
      }
      if (struct.isSetItemCount()) {
        optionals.set(1);
      }
      if (struct.isSetCharId()) {
        optionals.set(2);
      }
      if (struct.isSetFuncParams()) {
        optionals.set(3);
      }
      if (struct.isSetContent()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetItemId()) {
        oprot.writeI32(struct.itemId);
      }
      if (struct.isSetItemCount()) {
        oprot.writeI16(struct.itemCount);
      }
      if (struct.isSetCharId()) {
        oprot.writeI64(struct.charId);
      }
      if (struct.isSetFuncParams()) {
        {
          oprot.writeI32(struct.funcParams.size());
          for (com.ling9527.music.common.msg.auto.FuncParam _iter4 : struct.funcParams)
          {
            _iter4.write(oprot);
          }
        }
      }
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCWeddingThankSucc struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.itemId = iprot.readI32();
        struct.setItemIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.itemCount = iprot.readI16();
        struct.setItemCountIsSet(true);
      }
      if (incoming.get(2)) {
        struct.charId = iprot.readI64();
        struct.setCharIdIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.funcParams = new ArrayList<com.ling9527.music.common.msg.auto.FuncParam>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            com.ling9527.music.common.msg.auto.FuncParam _elem7; // required
            _elem7 = new com.ling9527.music.common.msg.auto.FuncParam();
            _elem7.read(iprot);
            struct.funcParams.add(_elem7);
          }
        }
        struct.setFuncParamsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
    }
  }

}

