/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 活动合成信息
 */
public class ActivityComposeInfo implements org.apache.thrift.TBase<ActivityComposeInfo, ActivityComposeInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ActivityComposeInfo");

  private static final org.apache.thrift.protocol.TField ACTIVITY_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("activityDesc", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField COND_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("condInfo", org.apache.thrift.protocol.TType.STRUCT, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ActivityComposeInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ActivityComposeInfoTupleSchemeFactory());
  }

  /**
   * 活动说明
   */
  public String activityDesc; // required
  /**
   * 活动开始时间
   */
  public int startTime; // required
  /**
   * 活动结束时间
   */
  public int endTime; // required
  /**
   * 是否满足条件
   */
  public ComposeCondInfo condInfo; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 活动说明
     */
    ACTIVITY_DESC((short)1, "activityDesc"),
    /**
     * 活动开始时间
     */
    START_TIME((short)2, "startTime"),
    /**
     * 活动结束时间
     */
    END_TIME((short)3, "endTime"),
    /**
     * 是否满足条件
     */
    COND_INFO((short)4, "condInfo");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACTIVITY_DESC
          return ACTIVITY_DESC;
        case 2: // START_TIME
          return START_TIME;
        case 3: // END_TIME
          return END_TIME;
        case 4: // COND_INFO
          return COND_INFO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STARTTIME_ISSET_ID = 0;
  private static final int __ENDTIME_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACTIVITY_DESC, new org.apache.thrift.meta_data.FieldMetaData("activityDesc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COND_INFO, new org.apache.thrift.meta_data.FieldMetaData("condInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ComposeCondInfo.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ActivityComposeInfo.class, metaDataMap);
  }

  public ActivityComposeInfo() {
  }

  public ActivityComposeInfo(
    String activityDesc,
    int startTime,
    int endTime,
    ComposeCondInfo condInfo)
  {
    this();
    this.activityDesc = activityDesc;
    this.startTime = startTime;
    setStartTimeIsSet(true);
    this.endTime = endTime;
    setEndTimeIsSet(true);
    this.condInfo = condInfo;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ActivityComposeInfo(ActivityComposeInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetActivityDesc()) {
      this.activityDesc = other.activityDesc;
    }
    this.startTime = other.startTime;
    this.endTime = other.endTime;
    if (other.isSetCondInfo()) {
      this.condInfo = new ComposeCondInfo(other.condInfo);
    }
  }

  public ActivityComposeInfo deepCopy() {
    return new ActivityComposeInfo(this);
  }

  @Override
  public void clear() {
    this.activityDesc = null;
    setStartTimeIsSet(false);
    this.startTime = 0;
    setEndTimeIsSet(false);
    this.endTime = 0;
    this.condInfo = null;
  }

  /**
   * 活动说明
   */
  public String getActivityDesc() {
    return this.activityDesc;
  }

  /**
   * 活动说明
   */
  public ActivityComposeInfo setActivityDesc(String activityDesc) {
    this.activityDesc = activityDesc;
    return this;
  }

  public void unsetActivityDesc() {
    this.activityDesc = null;
  }

  /** Returns true if field activityDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetActivityDesc() {
    return this.activityDesc != null;
  }

  public void setActivityDescIsSet(boolean value) {
    if (!value) {
      this.activityDesc = null;
    }
  }

  /**
   * 活动开始时间
   */
  public int getStartTime() {
    return this.startTime;
  }

  /**
   * 活动开始时间
   */
  public ActivityComposeInfo setStartTime(int startTime) {
    this.startTime = startTime;
    setStartTimeIsSet(true);
    return this;
  }

  public void unsetStartTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  public void setStartTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
  }

  /**
   * 活动结束时间
   */
  public int getEndTime() {
    return this.endTime;
  }

  /**
   * 活动结束时间
   */
  public ActivityComposeInfo setEndTime(int endTime) {
    this.endTime = endTime;
    setEndTimeIsSet(true);
    return this;
  }

  public void unsetEndTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  public void setEndTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
  }

  /**
   * 是否满足条件
   */
  public ComposeCondInfo getCondInfo() {
    return this.condInfo;
  }

  /**
   * 是否满足条件
   */
  public ActivityComposeInfo setCondInfo(ComposeCondInfo condInfo) {
    this.condInfo = condInfo;
    return this;
  }

  public void unsetCondInfo() {
    this.condInfo = null;
  }

  /** Returns true if field condInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetCondInfo() {
    return this.condInfo != null;
  }

  public void setCondInfoIsSet(boolean value) {
    if (!value) {
      this.condInfo = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ACTIVITY_DESC:
      if (value == null) {
        unsetActivityDesc();
      } else {
        setActivityDesc((String)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((Integer)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((Integer)value);
      }
      break;

    case COND_INFO:
      if (value == null) {
        unsetCondInfo();
      } else {
        setCondInfo((ComposeCondInfo)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ACTIVITY_DESC:
      return getActivityDesc();

    case START_TIME:
      return Integer.valueOf(getStartTime());

    case END_TIME:
      return Integer.valueOf(getEndTime());

    case COND_INFO:
      return getCondInfo();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ACTIVITY_DESC:
      return isSetActivityDesc();
    case START_TIME:
      return isSetStartTime();
    case END_TIME:
      return isSetEndTime();
    case COND_INFO:
      return isSetCondInfo();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ActivityComposeInfo)
      return this.equals((ActivityComposeInfo)that);
    return false;
  }

  public boolean equals(ActivityComposeInfo that) {
    if (that == null)
      return false;

    boolean this_present_activityDesc = true && this.isSetActivityDesc();
    boolean that_present_activityDesc = true && that.isSetActivityDesc();
    if (this_present_activityDesc || that_present_activityDesc) {
      if (!(this_present_activityDesc && that_present_activityDesc))
        return false;
      if (!this.activityDesc.equals(that.activityDesc))
        return false;
    }

    boolean this_present_startTime = true;
    boolean that_present_startTime = true;
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (this.startTime != that.startTime)
        return false;
    }

    boolean this_present_endTime = true;
    boolean that_present_endTime = true;
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (this.endTime != that.endTime)
        return false;
    }

    boolean this_present_condInfo = true && this.isSetCondInfo();
    boolean that_present_condInfo = true && that.isSetCondInfo();
    if (this_present_condInfo || that_present_condInfo) {
      if (!(this_present_condInfo && that_present_condInfo))
        return false;
      if (!this.condInfo.equals(that.condInfo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ActivityComposeInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ActivityComposeInfo typedOther = (ActivityComposeInfo)other;

    lastComparison = Boolean.valueOf(isSetActivityDesc()).compareTo(typedOther.isSetActivityDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActivityDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activityDesc, typedOther.activityDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(typedOther.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, typedOther.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(typedOther.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, typedOther.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCondInfo()).compareTo(typedOther.isSetCondInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCondInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.condInfo, typedOther.condInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ActivityComposeInfo(");
    boolean first = true;

    sb.append("activityDesc:");
    if (this.activityDesc == null) {
      sb.append("null");
    } else {
      sb.append(this.activityDesc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("startTime:");
    sb.append(this.startTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endTime:");
    sb.append(this.endTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("condInfo:");
    if (this.condInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.condInfo);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (condInfo != null) {
      condInfo.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ActivityComposeInfoStandardSchemeFactory implements SchemeFactory {
    public ActivityComposeInfoStandardScheme getScheme() {
      return new ActivityComposeInfoStandardScheme();
    }
  }

  private static class ActivityComposeInfoStandardScheme extends StandardScheme<ActivityComposeInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ActivityComposeInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ACTIVITY_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.activityDesc = iprot.readString();
              struct.setActivityDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.startTime = iprot.readI32();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.endTime = iprot.readI32();
              struct.setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COND_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.condInfo = new ComposeCondInfo();
              struct.condInfo.read(iprot);
              struct.setCondInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ActivityComposeInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.activityDesc != null) {
        oprot.writeFieldBegin(ACTIVITY_DESC_FIELD_DESC);
        oprot.writeString(struct.activityDesc);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(START_TIME_FIELD_DESC);
      oprot.writeI32(struct.startTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(END_TIME_FIELD_DESC);
      oprot.writeI32(struct.endTime);
      oprot.writeFieldEnd();
      if (struct.condInfo != null) {
        oprot.writeFieldBegin(COND_INFO_FIELD_DESC);
        struct.condInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ActivityComposeInfoTupleSchemeFactory implements SchemeFactory {
    public ActivityComposeInfoTupleScheme getScheme() {
      return new ActivityComposeInfoTupleScheme();
    }
  }

  private static class ActivityComposeInfoTupleScheme extends TupleScheme<ActivityComposeInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ActivityComposeInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetActivityDesc()) {
        optionals.set(0);
      }
      if (struct.isSetStartTime()) {
        optionals.set(1);
      }
      if (struct.isSetEndTime()) {
        optionals.set(2);
      }
      if (struct.isSetCondInfo()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetActivityDesc()) {
        oprot.writeString(struct.activityDesc);
      }
      if (struct.isSetStartTime()) {
        oprot.writeI32(struct.startTime);
      }
      if (struct.isSetEndTime()) {
        oprot.writeI32(struct.endTime);
      }
      if (struct.isSetCondInfo()) {
        struct.condInfo.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ActivityComposeInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.activityDesc = iprot.readString();
        struct.setActivityDescIsSet(true);
      }
      if (incoming.get(1)) {
        struct.startTime = iprot.readI32();
        struct.setStartTimeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.endTime = iprot.readI32();
        struct.setEndTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.condInfo = new ComposeCondInfo();
        struct.condInfo.read(iprot);
        struct.setCondInfoIsSet(true);
      }
    }
  }

}

