/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.cs;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CSQueryBind3rdInfoMsg implements org.apache.thrift.TBase<CSQueryBind3rdInfoMsg, CSQueryBind3rdInfoMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CSQueryBind3rdInfoMsg");

  private static final org.apache.thrift.protocol.TField BIND_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("bindType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ACCOUNT_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("accountIds", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("index", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CSQueryBind3rdInfoMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CSQueryBind3rdInfoMsgTupleSchemeFactory());
  }

  /**
   * 
   * @see com.ling9527.music.common.msg.auto.BindAccountType
   */
  public com.ling9527.music.common.msg.auto.BindAccountType bindType; // required
  /**
   * 3rd account
   */
  public List<Long> accountIds; // required
  public int index; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see com.ling9527.music.common.msg.auto.BindAccountType
     */
    BIND_TYPE((short)1, "bindType"),
    /**
     * 3rd account
     */
    ACCOUNT_IDS((short)2, "accountIds"),
    INDEX((short)3, "index");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BIND_TYPE
          return BIND_TYPE;
        case 2: // ACCOUNT_IDS
          return ACCOUNT_IDS;
        case 3: // INDEX
          return INDEX;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INDEX_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BIND_TYPE, new org.apache.thrift.meta_data.FieldMetaData("bindType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.ling9527.music.common.msg.auto.BindAccountType.class)));
    tmpMap.put(_Fields.ACCOUNT_IDS, new org.apache.thrift.meta_data.FieldMetaData("accountIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.INDEX, new org.apache.thrift.meta_data.FieldMetaData("index", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CSQueryBind3rdInfoMsg.class, metaDataMap);
  }

  public CSQueryBind3rdInfoMsg() {
  }

  public CSQueryBind3rdInfoMsg(
    com.ling9527.music.common.msg.auto.BindAccountType bindType,
    List<Long> accountIds,
    int index)
  {
    this();
    this.bindType = bindType;
    this.accountIds = accountIds;
    this.index = index;
    setIndexIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CSQueryBind3rdInfoMsg(CSQueryBind3rdInfoMsg other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetBindType()) {
      this.bindType = other.bindType;
    }
    if (other.isSetAccountIds()) {
      List<Long> __this__accountIds = new ArrayList<Long>();
      for (Long other_element : other.accountIds) {
        __this__accountIds.add(other_element);
      }
      this.accountIds = __this__accountIds;
    }
    this.index = other.index;
  }

  public CSQueryBind3rdInfoMsg deepCopy() {
    return new CSQueryBind3rdInfoMsg(this);
  }

  @Override
  public void clear() {
    this.bindType = null;
    this.accountIds = null;
    setIndexIsSet(false);
    this.index = 0;
  }

  /**
   * 
   * @see com.ling9527.music.common.msg.auto.BindAccountType
   */
  public com.ling9527.music.common.msg.auto.BindAccountType getBindType() {
    return this.bindType;
  }

  /**
   * 
   * @see com.ling9527.music.common.msg.auto.BindAccountType
   */
  public CSQueryBind3rdInfoMsg setBindType(com.ling9527.music.common.msg.auto.BindAccountType bindType) {
    this.bindType = bindType;
    return this;
  }

  public void unsetBindType() {
    this.bindType = null;
  }

  /** Returns true if field bindType is set (has been assigned a value) and false otherwise */
  public boolean isSetBindType() {
    return this.bindType != null;
  }

  public void setBindTypeIsSet(boolean value) {
    if (!value) {
      this.bindType = null;
    }
  }

  public int getAccountIdsSize() {
    return (this.accountIds == null) ? 0 : this.accountIds.size();
  }

  public java.util.Iterator<Long> getAccountIdsIterator() {
    return (this.accountIds == null) ? null : this.accountIds.iterator();
  }

  public void addToAccountIds(long elem) {
    if (this.accountIds == null) {
      this.accountIds = new ArrayList<Long>();
    }
    this.accountIds.add(elem);
  }

  /**
   * 3rd account
   */
  public List<Long> getAccountIds() {
    return this.accountIds;
  }

  /**
   * 3rd account
   */
  public CSQueryBind3rdInfoMsg setAccountIds(List<Long> accountIds) {
    this.accountIds = accountIds;
    return this;
  }

  public void unsetAccountIds() {
    this.accountIds = null;
  }

  /** Returns true if field accountIds is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountIds() {
    return this.accountIds != null;
  }

  public void setAccountIdsIsSet(boolean value) {
    if (!value) {
      this.accountIds = null;
    }
  }

  public int getIndex() {
    return this.index;
  }

  public CSQueryBind3rdInfoMsg setIndex(int index) {
    this.index = index;
    setIndexIsSet(true);
    return this;
  }

  public void unsetIndex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INDEX_ISSET_ID);
  }

  /** Returns true if field index is set (has been assigned a value) and false otherwise */
  public boolean isSetIndex() {
    return EncodingUtils.testBit(__isset_bitfield, __INDEX_ISSET_ID);
  }

  public void setIndexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INDEX_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BIND_TYPE:
      if (value == null) {
        unsetBindType();
      } else {
        setBindType((com.ling9527.music.common.msg.auto.BindAccountType)value);
      }
      break;

    case ACCOUNT_IDS:
      if (value == null) {
        unsetAccountIds();
      } else {
        setAccountIds((List<Long>)value);
      }
      break;

    case INDEX:
      if (value == null) {
        unsetIndex();
      } else {
        setIndex((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BIND_TYPE:
      return getBindType();

    case ACCOUNT_IDS:
      return getAccountIds();

    case INDEX:
      return Integer.valueOf(getIndex());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BIND_TYPE:
      return isSetBindType();
    case ACCOUNT_IDS:
      return isSetAccountIds();
    case INDEX:
      return isSetIndex();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CSQueryBind3rdInfoMsg)
      return this.equals((CSQueryBind3rdInfoMsg)that);
    return false;
  }

  public boolean equals(CSQueryBind3rdInfoMsg that) {
    if (that == null)
      return false;

    boolean this_present_bindType = true && this.isSetBindType();
    boolean that_present_bindType = true && that.isSetBindType();
    if (this_present_bindType || that_present_bindType) {
      if (!(this_present_bindType && that_present_bindType))
        return false;
      if (!this.bindType.equals(that.bindType))
        return false;
    }

    boolean this_present_accountIds = true && this.isSetAccountIds();
    boolean that_present_accountIds = true && that.isSetAccountIds();
    if (this_present_accountIds || that_present_accountIds) {
      if (!(this_present_accountIds && that_present_accountIds))
        return false;
      if (!this.accountIds.equals(that.accountIds))
        return false;
    }

    boolean this_present_index = true;
    boolean that_present_index = true;
    if (this_present_index || that_present_index) {
      if (!(this_present_index && that_present_index))
        return false;
      if (this.index != that.index)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(CSQueryBind3rdInfoMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CSQueryBind3rdInfoMsg typedOther = (CSQueryBind3rdInfoMsg)other;

    lastComparison = Boolean.valueOf(isSetBindType()).compareTo(typedOther.isSetBindType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBindType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bindType, typedOther.bindType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccountIds()).compareTo(typedOther.isSetAccountIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountIds, typedOther.accountIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIndex()).compareTo(typedOther.isSetIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.index, typedOther.index);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CSQueryBind3rdInfoMsg(");
    boolean first = true;

    sb.append("bindType:");
    if (this.bindType == null) {
      sb.append("null");
    } else {
      sb.append(this.bindType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("accountIds:");
    if (this.accountIds == null) {
      sb.append("null");
    } else {
      sb.append(this.accountIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("index:");
    sb.append(this.index);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CSQueryBind3rdInfoMsgStandardSchemeFactory implements SchemeFactory {
    public CSQueryBind3rdInfoMsgStandardScheme getScheme() {
      return new CSQueryBind3rdInfoMsgStandardScheme();
    }
  }

  private static class CSQueryBind3rdInfoMsgStandardScheme extends StandardScheme<CSQueryBind3rdInfoMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CSQueryBind3rdInfoMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BIND_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bindType = com.ling9527.music.common.msg.auto.BindAccountType.findByValue(iprot.readI32());
              struct.setBindTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ACCOUNT_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.accountIds = new ArrayList<Long>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  long _elem2; // required
                  _elem2 = iprot.readI64();
                  struct.accountIds.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setAccountIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.index = iprot.readI32();
              struct.setIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CSQueryBind3rdInfoMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.bindType != null) {
        oprot.writeFieldBegin(BIND_TYPE_FIELD_DESC);
        oprot.writeI32(struct.bindType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.accountIds != null) {
        oprot.writeFieldBegin(ACCOUNT_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.accountIds.size()));
          for (long _iter3 : struct.accountIds)
          {
            oprot.writeI64(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INDEX_FIELD_DESC);
      oprot.writeI32(struct.index);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CSQueryBind3rdInfoMsgTupleSchemeFactory implements SchemeFactory {
    public CSQueryBind3rdInfoMsgTupleScheme getScheme() {
      return new CSQueryBind3rdInfoMsgTupleScheme();
    }
  }

  private static class CSQueryBind3rdInfoMsgTupleScheme extends TupleScheme<CSQueryBind3rdInfoMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CSQueryBind3rdInfoMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBindType()) {
        optionals.set(0);
      }
      if (struct.isSetAccountIds()) {
        optionals.set(1);
      }
      if (struct.isSetIndex()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetBindType()) {
        oprot.writeI32(struct.bindType.getValue());
      }
      if (struct.isSetAccountIds()) {
        {
          oprot.writeI32(struct.accountIds.size());
          for (long _iter4 : struct.accountIds)
          {
            oprot.writeI64(_iter4);
          }
        }
      }
      if (struct.isSetIndex()) {
        oprot.writeI32(struct.index);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CSQueryBind3rdInfoMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.bindType = com.ling9527.music.common.msg.auto.BindAccountType.findByValue(iprot.readI32());
        struct.setBindTypeIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.accountIds = new ArrayList<Long>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            long _elem7; // required
            _elem7 = iprot.readI64();
            struct.accountIds.add(_elem7);
          }
        }
        struct.setAccountIdsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.index = iprot.readI32();
        struct.setIndexIsSet(true);
      }
    }
  }

}

