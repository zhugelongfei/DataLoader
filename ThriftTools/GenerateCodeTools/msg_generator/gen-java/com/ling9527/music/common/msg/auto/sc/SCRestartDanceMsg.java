/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SCRestartDanceMsg implements org.apache.thrift.TBase<SCRestartDanceMsg, SCRestartDanceMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCRestartDanceMsg");

  private static final org.apache.thrift.protocol.TField RAND_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("randParam", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField START_ACTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("startActionId", org.apache.thrift.protocol.TType.I16, (short)2);
  private static final org.apache.thrift.protocol.TField FINISH_ACTION_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("finishActionIds", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField STAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("stageId", org.apache.thrift.protocol.TType.BYTE, (short)4);
  private static final org.apache.thrift.protocol.TField LIGHT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lightId", org.apache.thrift.protocol.TType.BYTE, (short)5);
  private static final org.apache.thrift.protocol.TField SIMPLE_PARTNER_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("simplePartnerInfos", org.apache.thrift.protocol.TType.LIST, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCRestartDanceMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCRestartDanceMsgTupleSchemeFactory());
  }

  public int randParam; // required
  public short startActionId; // required
  public List<Short> finishActionIds; // required
  public byte stageId; // required
  public byte lightId; // required
  public List<com.ling9527.music.common.msg.auto.SimplePartnerInfo> simplePartnerInfos; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RAND_PARAM((short)1, "randParam"),
    START_ACTION_ID((short)2, "startActionId"),
    FINISH_ACTION_IDS((short)3, "finishActionIds"),
    STAGE_ID((short)4, "stageId"),
    LIGHT_ID((short)5, "lightId"),
    SIMPLE_PARTNER_INFOS((short)6, "simplePartnerInfos");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RAND_PARAM
          return RAND_PARAM;
        case 2: // START_ACTION_ID
          return START_ACTION_ID;
        case 3: // FINISH_ACTION_IDS
          return FINISH_ACTION_IDS;
        case 4: // STAGE_ID
          return STAGE_ID;
        case 5: // LIGHT_ID
          return LIGHT_ID;
        case 6: // SIMPLE_PARTNER_INFOS
          return SIMPLE_PARTNER_INFOS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RANDPARAM_ISSET_ID = 0;
  private static final int __STARTACTIONID_ISSET_ID = 1;
  private static final int __STAGEID_ISSET_ID = 2;
  private static final int __LIGHTID_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RAND_PARAM, new org.apache.thrift.meta_data.FieldMetaData("randParam", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.START_ACTION_ID, new org.apache.thrift.meta_data.FieldMetaData("startActionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.FINISH_ACTION_IDS, new org.apache.thrift.meta_data.FieldMetaData("finishActionIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16))));
    tmpMap.put(_Fields.STAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("stageId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.LIGHT_ID, new org.apache.thrift.meta_data.FieldMetaData("lightId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.SIMPLE_PARTNER_INFOS, new org.apache.thrift.meta_data.FieldMetaData("simplePartnerInfos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.SimplePartnerInfo.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCRestartDanceMsg.class, metaDataMap);
  }

  public SCRestartDanceMsg() {
  }

  public SCRestartDanceMsg(
    int randParam,
    short startActionId,
    List<Short> finishActionIds,
    byte stageId,
    byte lightId,
    List<com.ling9527.music.common.msg.auto.SimplePartnerInfo> simplePartnerInfos)
  {
    this();
    this.randParam = randParam;
    setRandParamIsSet(true);
    this.startActionId = startActionId;
    setStartActionIdIsSet(true);
    this.finishActionIds = finishActionIds;
    this.stageId = stageId;
    setStageIdIsSet(true);
    this.lightId = lightId;
    setLightIdIsSet(true);
    this.simplePartnerInfos = simplePartnerInfos;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCRestartDanceMsg(SCRestartDanceMsg other) {
    __isset_bitfield = other.__isset_bitfield;
    this.randParam = other.randParam;
    this.startActionId = other.startActionId;
    if (other.isSetFinishActionIds()) {
      List<Short> __this__finishActionIds = new ArrayList<Short>();
      for (Short other_element : other.finishActionIds) {
        __this__finishActionIds.add(other_element);
      }
      this.finishActionIds = __this__finishActionIds;
    }
    this.stageId = other.stageId;
    this.lightId = other.lightId;
    if (other.isSetSimplePartnerInfos()) {
      List<com.ling9527.music.common.msg.auto.SimplePartnerInfo> __this__simplePartnerInfos = new ArrayList<com.ling9527.music.common.msg.auto.SimplePartnerInfo>();
      for (com.ling9527.music.common.msg.auto.SimplePartnerInfo other_element : other.simplePartnerInfos) {
        __this__simplePartnerInfos.add(new com.ling9527.music.common.msg.auto.SimplePartnerInfo(other_element));
      }
      this.simplePartnerInfos = __this__simplePartnerInfos;
    }
  }

  public SCRestartDanceMsg deepCopy() {
    return new SCRestartDanceMsg(this);
  }

  @Override
  public void clear() {
    setRandParamIsSet(false);
    this.randParam = 0;
    setStartActionIdIsSet(false);
    this.startActionId = 0;
    this.finishActionIds = null;
    setStageIdIsSet(false);
    this.stageId = 0;
    setLightIdIsSet(false);
    this.lightId = 0;
    this.simplePartnerInfos = null;
  }

  public int getRandParam() {
    return this.randParam;
  }

  public SCRestartDanceMsg setRandParam(int randParam) {
    this.randParam = randParam;
    setRandParamIsSet(true);
    return this;
  }

  public void unsetRandParam() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RANDPARAM_ISSET_ID);
  }

  /** Returns true if field randParam is set (has been assigned a value) and false otherwise */
  public boolean isSetRandParam() {
    return EncodingUtils.testBit(__isset_bitfield, __RANDPARAM_ISSET_ID);
  }

  public void setRandParamIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RANDPARAM_ISSET_ID, value);
  }

  public short getStartActionId() {
    return this.startActionId;
  }

  public SCRestartDanceMsg setStartActionId(short startActionId) {
    this.startActionId = startActionId;
    setStartActionIdIsSet(true);
    return this;
  }

  public void unsetStartActionId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTACTIONID_ISSET_ID);
  }

  /** Returns true if field startActionId is set (has been assigned a value) and false otherwise */
  public boolean isSetStartActionId() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTACTIONID_ISSET_ID);
  }

  public void setStartActionIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTACTIONID_ISSET_ID, value);
  }

  public int getFinishActionIdsSize() {
    return (this.finishActionIds == null) ? 0 : this.finishActionIds.size();
  }

  public java.util.Iterator<Short> getFinishActionIdsIterator() {
    return (this.finishActionIds == null) ? null : this.finishActionIds.iterator();
  }

  public void addToFinishActionIds(short elem) {
    if (this.finishActionIds == null) {
      this.finishActionIds = new ArrayList<Short>();
    }
    this.finishActionIds.add(elem);
  }

  public List<Short> getFinishActionIds() {
    return this.finishActionIds;
  }

  public SCRestartDanceMsg setFinishActionIds(List<Short> finishActionIds) {
    this.finishActionIds = finishActionIds;
    return this;
  }

  public void unsetFinishActionIds() {
    this.finishActionIds = null;
  }

  /** Returns true if field finishActionIds is set (has been assigned a value) and false otherwise */
  public boolean isSetFinishActionIds() {
    return this.finishActionIds != null;
  }

  public void setFinishActionIdsIsSet(boolean value) {
    if (!value) {
      this.finishActionIds = null;
    }
  }

  public byte getStageId() {
    return this.stageId;
  }

  public SCRestartDanceMsg setStageId(byte stageId) {
    this.stageId = stageId;
    setStageIdIsSet(true);
    return this;
  }

  public void unsetStageId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STAGEID_ISSET_ID);
  }

  /** Returns true if field stageId is set (has been assigned a value) and false otherwise */
  public boolean isSetStageId() {
    return EncodingUtils.testBit(__isset_bitfield, __STAGEID_ISSET_ID);
  }

  public void setStageIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STAGEID_ISSET_ID, value);
  }

  public byte getLightId() {
    return this.lightId;
  }

  public SCRestartDanceMsg setLightId(byte lightId) {
    this.lightId = lightId;
    setLightIdIsSet(true);
    return this;
  }

  public void unsetLightId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIGHTID_ISSET_ID);
  }

  /** Returns true if field lightId is set (has been assigned a value) and false otherwise */
  public boolean isSetLightId() {
    return EncodingUtils.testBit(__isset_bitfield, __LIGHTID_ISSET_ID);
  }

  public void setLightIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIGHTID_ISSET_ID, value);
  }

  public int getSimplePartnerInfosSize() {
    return (this.simplePartnerInfos == null) ? 0 : this.simplePartnerInfos.size();
  }

  public java.util.Iterator<com.ling9527.music.common.msg.auto.SimplePartnerInfo> getSimplePartnerInfosIterator() {
    return (this.simplePartnerInfos == null) ? null : this.simplePartnerInfos.iterator();
  }

  public void addToSimplePartnerInfos(com.ling9527.music.common.msg.auto.SimplePartnerInfo elem) {
    if (this.simplePartnerInfos == null) {
      this.simplePartnerInfos = new ArrayList<com.ling9527.music.common.msg.auto.SimplePartnerInfo>();
    }
    this.simplePartnerInfos.add(elem);
  }

  public List<com.ling9527.music.common.msg.auto.SimplePartnerInfo> getSimplePartnerInfos() {
    return this.simplePartnerInfos;
  }

  public SCRestartDanceMsg setSimplePartnerInfos(List<com.ling9527.music.common.msg.auto.SimplePartnerInfo> simplePartnerInfos) {
    this.simplePartnerInfos = simplePartnerInfos;
    return this;
  }

  public void unsetSimplePartnerInfos() {
    this.simplePartnerInfos = null;
  }

  /** Returns true if field simplePartnerInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetSimplePartnerInfos() {
    return this.simplePartnerInfos != null;
  }

  public void setSimplePartnerInfosIsSet(boolean value) {
    if (!value) {
      this.simplePartnerInfos = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RAND_PARAM:
      if (value == null) {
        unsetRandParam();
      } else {
        setRandParam((Integer)value);
      }
      break;

    case START_ACTION_ID:
      if (value == null) {
        unsetStartActionId();
      } else {
        setStartActionId((Short)value);
      }
      break;

    case FINISH_ACTION_IDS:
      if (value == null) {
        unsetFinishActionIds();
      } else {
        setFinishActionIds((List<Short>)value);
      }
      break;

    case STAGE_ID:
      if (value == null) {
        unsetStageId();
      } else {
        setStageId((Byte)value);
      }
      break;

    case LIGHT_ID:
      if (value == null) {
        unsetLightId();
      } else {
        setLightId((Byte)value);
      }
      break;

    case SIMPLE_PARTNER_INFOS:
      if (value == null) {
        unsetSimplePartnerInfos();
      } else {
        setSimplePartnerInfos((List<com.ling9527.music.common.msg.auto.SimplePartnerInfo>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RAND_PARAM:
      return Integer.valueOf(getRandParam());

    case START_ACTION_ID:
      return Short.valueOf(getStartActionId());

    case FINISH_ACTION_IDS:
      return getFinishActionIds();

    case STAGE_ID:
      return Byte.valueOf(getStageId());

    case LIGHT_ID:
      return Byte.valueOf(getLightId());

    case SIMPLE_PARTNER_INFOS:
      return getSimplePartnerInfos();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RAND_PARAM:
      return isSetRandParam();
    case START_ACTION_ID:
      return isSetStartActionId();
    case FINISH_ACTION_IDS:
      return isSetFinishActionIds();
    case STAGE_ID:
      return isSetStageId();
    case LIGHT_ID:
      return isSetLightId();
    case SIMPLE_PARTNER_INFOS:
      return isSetSimplePartnerInfos();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCRestartDanceMsg)
      return this.equals((SCRestartDanceMsg)that);
    return false;
  }

  public boolean equals(SCRestartDanceMsg that) {
    if (that == null)
      return false;

    boolean this_present_randParam = true;
    boolean that_present_randParam = true;
    if (this_present_randParam || that_present_randParam) {
      if (!(this_present_randParam && that_present_randParam))
        return false;
      if (this.randParam != that.randParam)
        return false;
    }

    boolean this_present_startActionId = true;
    boolean that_present_startActionId = true;
    if (this_present_startActionId || that_present_startActionId) {
      if (!(this_present_startActionId && that_present_startActionId))
        return false;
      if (this.startActionId != that.startActionId)
        return false;
    }

    boolean this_present_finishActionIds = true && this.isSetFinishActionIds();
    boolean that_present_finishActionIds = true && that.isSetFinishActionIds();
    if (this_present_finishActionIds || that_present_finishActionIds) {
      if (!(this_present_finishActionIds && that_present_finishActionIds))
        return false;
      if (!this.finishActionIds.equals(that.finishActionIds))
        return false;
    }

    boolean this_present_stageId = true;
    boolean that_present_stageId = true;
    if (this_present_stageId || that_present_stageId) {
      if (!(this_present_stageId && that_present_stageId))
        return false;
      if (this.stageId != that.stageId)
        return false;
    }

    boolean this_present_lightId = true;
    boolean that_present_lightId = true;
    if (this_present_lightId || that_present_lightId) {
      if (!(this_present_lightId && that_present_lightId))
        return false;
      if (this.lightId != that.lightId)
        return false;
    }

    boolean this_present_simplePartnerInfos = true && this.isSetSimplePartnerInfos();
    boolean that_present_simplePartnerInfos = true && that.isSetSimplePartnerInfos();
    if (this_present_simplePartnerInfos || that_present_simplePartnerInfos) {
      if (!(this_present_simplePartnerInfos && that_present_simplePartnerInfos))
        return false;
      if (!this.simplePartnerInfos.equals(that.simplePartnerInfos))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCRestartDanceMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCRestartDanceMsg typedOther = (SCRestartDanceMsg)other;

    lastComparison = Boolean.valueOf(isSetRandParam()).compareTo(typedOther.isSetRandParam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRandParam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.randParam, typedOther.randParam);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartActionId()).compareTo(typedOther.isSetStartActionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartActionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startActionId, typedOther.startActionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFinishActionIds()).compareTo(typedOther.isSetFinishActionIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFinishActionIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.finishActionIds, typedOther.finishActionIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStageId()).compareTo(typedOther.isSetStageId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStageId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stageId, typedOther.stageId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLightId()).compareTo(typedOther.isSetLightId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLightId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lightId, typedOther.lightId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSimplePartnerInfos()).compareTo(typedOther.isSetSimplePartnerInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSimplePartnerInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.simplePartnerInfos, typedOther.simplePartnerInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCRestartDanceMsg(");
    boolean first = true;

    sb.append("randParam:");
    sb.append(this.randParam);
    first = false;
    if (!first) sb.append(", ");
    sb.append("startActionId:");
    sb.append(this.startActionId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("finishActionIds:");
    if (this.finishActionIds == null) {
      sb.append("null");
    } else {
      sb.append(this.finishActionIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stageId:");
    sb.append(this.stageId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lightId:");
    sb.append(this.lightId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("simplePartnerInfos:");
    if (this.simplePartnerInfos == null) {
      sb.append("null");
    } else {
      sb.append(this.simplePartnerInfos);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCRestartDanceMsgStandardSchemeFactory implements SchemeFactory {
    public SCRestartDanceMsgStandardScheme getScheme() {
      return new SCRestartDanceMsgStandardScheme();
    }
  }

  private static class SCRestartDanceMsgStandardScheme extends StandardScheme<SCRestartDanceMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCRestartDanceMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RAND_PARAM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.randParam = iprot.readI32();
              struct.setRandParamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // START_ACTION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.startActionId = iprot.readI16();
              struct.setStartActionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FINISH_ACTION_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.finishActionIds = new ArrayList<Short>(_list8.size);
                for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                {
                  short _elem10; // required
                  _elem10 = iprot.readI16();
                  struct.finishActionIds.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setFinishActionIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STAGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.stageId = iprot.readByte();
              struct.setStageIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LIGHT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.lightId = iprot.readByte();
              struct.setLightIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SIMPLE_PARTNER_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list11 = iprot.readListBegin();
                struct.simplePartnerInfos = new ArrayList<com.ling9527.music.common.msg.auto.SimplePartnerInfo>(_list11.size);
                for (int _i12 = 0; _i12 < _list11.size; ++_i12)
                {
                  com.ling9527.music.common.msg.auto.SimplePartnerInfo _elem13; // required
                  _elem13 = new com.ling9527.music.common.msg.auto.SimplePartnerInfo();
                  _elem13.read(iprot);
                  struct.simplePartnerInfos.add(_elem13);
                }
                iprot.readListEnd();
              }
              struct.setSimplePartnerInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCRestartDanceMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(RAND_PARAM_FIELD_DESC);
      oprot.writeI32(struct.randParam);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(START_ACTION_ID_FIELD_DESC);
      oprot.writeI16(struct.startActionId);
      oprot.writeFieldEnd();
      if (struct.finishActionIds != null) {
        oprot.writeFieldBegin(FINISH_ACTION_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, struct.finishActionIds.size()));
          for (short _iter14 : struct.finishActionIds)
          {
            oprot.writeI16(_iter14);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STAGE_ID_FIELD_DESC);
      oprot.writeByte(struct.stageId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LIGHT_ID_FIELD_DESC);
      oprot.writeByte(struct.lightId);
      oprot.writeFieldEnd();
      if (struct.simplePartnerInfos != null) {
        oprot.writeFieldBegin(SIMPLE_PARTNER_INFOS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.simplePartnerInfos.size()));
          for (com.ling9527.music.common.msg.auto.SimplePartnerInfo _iter15 : struct.simplePartnerInfos)
          {
            _iter15.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCRestartDanceMsgTupleSchemeFactory implements SchemeFactory {
    public SCRestartDanceMsgTupleScheme getScheme() {
      return new SCRestartDanceMsgTupleScheme();
    }
  }

  private static class SCRestartDanceMsgTupleScheme extends TupleScheme<SCRestartDanceMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCRestartDanceMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRandParam()) {
        optionals.set(0);
      }
      if (struct.isSetStartActionId()) {
        optionals.set(1);
      }
      if (struct.isSetFinishActionIds()) {
        optionals.set(2);
      }
      if (struct.isSetStageId()) {
        optionals.set(3);
      }
      if (struct.isSetLightId()) {
        optionals.set(4);
      }
      if (struct.isSetSimplePartnerInfos()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetRandParam()) {
        oprot.writeI32(struct.randParam);
      }
      if (struct.isSetStartActionId()) {
        oprot.writeI16(struct.startActionId);
      }
      if (struct.isSetFinishActionIds()) {
        {
          oprot.writeI32(struct.finishActionIds.size());
          for (short _iter16 : struct.finishActionIds)
          {
            oprot.writeI16(_iter16);
          }
        }
      }
      if (struct.isSetStageId()) {
        oprot.writeByte(struct.stageId);
      }
      if (struct.isSetLightId()) {
        oprot.writeByte(struct.lightId);
      }
      if (struct.isSetSimplePartnerInfos()) {
        {
          oprot.writeI32(struct.simplePartnerInfos.size());
          for (com.ling9527.music.common.msg.auto.SimplePartnerInfo _iter17 : struct.simplePartnerInfos)
          {
            _iter17.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCRestartDanceMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.randParam = iprot.readI32();
        struct.setRandParamIsSet(true);
      }
      if (incoming.get(1)) {
        struct.startActionId = iprot.readI16();
        struct.setStartActionIdIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list18 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, iprot.readI32());
          struct.finishActionIds = new ArrayList<Short>(_list18.size);
          for (int _i19 = 0; _i19 < _list18.size; ++_i19)
          {
            short _elem20; // required
            _elem20 = iprot.readI16();
            struct.finishActionIds.add(_elem20);
          }
        }
        struct.setFinishActionIdsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.stageId = iprot.readByte();
        struct.setStageIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.lightId = iprot.readByte();
        struct.setLightIdIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.simplePartnerInfos = new ArrayList<com.ling9527.music.common.msg.auto.SimplePartnerInfo>(_list21.size);
          for (int _i22 = 0; _i22 < _list21.size; ++_i22)
          {
            com.ling9527.music.common.msg.auto.SimplePartnerInfo _elem23; // required
            _elem23 = new com.ling9527.music.common.msg.auto.SimplePartnerInfo();
            _elem23.read(iprot);
            struct.simplePartnerInfos.add(_elem23);
          }
        }
        struct.setSimplePartnerInfosIsSet(true);
      }
    }
  }

}

