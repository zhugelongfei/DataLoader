/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 成就详细信息
 */
public class AchieveDetailInfo implements org.apache.thrift.TBase<AchieveDetailInfo, AchieveDetailInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AchieveDetailInfo");

  private static final org.apache.thrift.protocol.TField ACHIEVE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("achieveId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CUR_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("curNum", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField MAX_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("maxNum", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField HAS_GET_PRIZED_FIELD_DESC = new org.apache.thrift.protocol.TField("hasGetPrized", org.apache.thrift.protocol.TType.BOOL, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AchieveDetailInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AchieveDetailInfoTupleSchemeFactory());
  }

  /**
   * 成就id
   */
  public int achieveId; // required
  /**
   * 当前进度
   */
  public long curNum; // required
  /**
   * 最大进度
   */
  public long maxNum; // required
  /**
   * 是否已经领取过奖励
   */
  public boolean hasGetPrized; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 成就id
     */
    ACHIEVE_ID((short)1, "achieveId"),
    /**
     * 当前进度
     */
    CUR_NUM((short)2, "curNum"),
    /**
     * 最大进度
     */
    MAX_NUM((short)3, "maxNum"),
    /**
     * 是否已经领取过奖励
     */
    HAS_GET_PRIZED((short)4, "hasGetPrized");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACHIEVE_ID
          return ACHIEVE_ID;
        case 2: // CUR_NUM
          return CUR_NUM;
        case 3: // MAX_NUM
          return MAX_NUM;
        case 4: // HAS_GET_PRIZED
          return HAS_GET_PRIZED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ACHIEVEID_ISSET_ID = 0;
  private static final int __CURNUM_ISSET_ID = 1;
  private static final int __MAXNUM_ISSET_ID = 2;
  private static final int __HASGETPRIZED_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACHIEVE_ID, new org.apache.thrift.meta_data.FieldMetaData("achieveId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CUR_NUM, new org.apache.thrift.meta_data.FieldMetaData("curNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MAX_NUM, new org.apache.thrift.meta_data.FieldMetaData("maxNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.HAS_GET_PRIZED, new org.apache.thrift.meta_data.FieldMetaData("hasGetPrized", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AchieveDetailInfo.class, metaDataMap);
  }

  public AchieveDetailInfo() {
  }

  public AchieveDetailInfo(
    int achieveId,
    long curNum,
    long maxNum,
    boolean hasGetPrized)
  {
    this();
    this.achieveId = achieveId;
    setAchieveIdIsSet(true);
    this.curNum = curNum;
    setCurNumIsSet(true);
    this.maxNum = maxNum;
    setMaxNumIsSet(true);
    this.hasGetPrized = hasGetPrized;
    setHasGetPrizedIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AchieveDetailInfo(AchieveDetailInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.achieveId = other.achieveId;
    this.curNum = other.curNum;
    this.maxNum = other.maxNum;
    this.hasGetPrized = other.hasGetPrized;
  }

  public AchieveDetailInfo deepCopy() {
    return new AchieveDetailInfo(this);
  }

  @Override
  public void clear() {
    setAchieveIdIsSet(false);
    this.achieveId = 0;
    setCurNumIsSet(false);
    this.curNum = 0;
    setMaxNumIsSet(false);
    this.maxNum = 0;
    setHasGetPrizedIsSet(false);
    this.hasGetPrized = false;
  }

  /**
   * 成就id
   */
  public int getAchieveId() {
    return this.achieveId;
  }

  /**
   * 成就id
   */
  public AchieveDetailInfo setAchieveId(int achieveId) {
    this.achieveId = achieveId;
    setAchieveIdIsSet(true);
    return this;
  }

  public void unsetAchieveId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACHIEVEID_ISSET_ID);
  }

  /** Returns true if field achieveId is set (has been assigned a value) and false otherwise */
  public boolean isSetAchieveId() {
    return EncodingUtils.testBit(__isset_bitfield, __ACHIEVEID_ISSET_ID);
  }

  public void setAchieveIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACHIEVEID_ISSET_ID, value);
  }

  /**
   * 当前进度
   */
  public long getCurNum() {
    return this.curNum;
  }

  /**
   * 当前进度
   */
  public AchieveDetailInfo setCurNum(long curNum) {
    this.curNum = curNum;
    setCurNumIsSet(true);
    return this;
  }

  public void unsetCurNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURNUM_ISSET_ID);
  }

  /** Returns true if field curNum is set (has been assigned a value) and false otherwise */
  public boolean isSetCurNum() {
    return EncodingUtils.testBit(__isset_bitfield, __CURNUM_ISSET_ID);
  }

  public void setCurNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURNUM_ISSET_ID, value);
  }

  /**
   * 最大进度
   */
  public long getMaxNum() {
    return this.maxNum;
  }

  /**
   * 最大进度
   */
  public AchieveDetailInfo setMaxNum(long maxNum) {
    this.maxNum = maxNum;
    setMaxNumIsSet(true);
    return this;
  }

  public void unsetMaxNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXNUM_ISSET_ID);
  }

  /** Returns true if field maxNum is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxNum() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXNUM_ISSET_ID);
  }

  public void setMaxNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXNUM_ISSET_ID, value);
  }

  /**
   * 是否已经领取过奖励
   */
  public boolean isHasGetPrized() {
    return this.hasGetPrized;
  }

  /**
   * 是否已经领取过奖励
   */
  public AchieveDetailInfo setHasGetPrized(boolean hasGetPrized) {
    this.hasGetPrized = hasGetPrized;
    setHasGetPrizedIsSet(true);
    return this;
  }

  public void unsetHasGetPrized() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HASGETPRIZED_ISSET_ID);
  }

  /** Returns true if field hasGetPrized is set (has been assigned a value) and false otherwise */
  public boolean isSetHasGetPrized() {
    return EncodingUtils.testBit(__isset_bitfield, __HASGETPRIZED_ISSET_ID);
  }

  public void setHasGetPrizedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HASGETPRIZED_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ACHIEVE_ID:
      if (value == null) {
        unsetAchieveId();
      } else {
        setAchieveId((Integer)value);
      }
      break;

    case CUR_NUM:
      if (value == null) {
        unsetCurNum();
      } else {
        setCurNum((Long)value);
      }
      break;

    case MAX_NUM:
      if (value == null) {
        unsetMaxNum();
      } else {
        setMaxNum((Long)value);
      }
      break;

    case HAS_GET_PRIZED:
      if (value == null) {
        unsetHasGetPrized();
      } else {
        setHasGetPrized((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ACHIEVE_ID:
      return Integer.valueOf(getAchieveId());

    case CUR_NUM:
      return Long.valueOf(getCurNum());

    case MAX_NUM:
      return Long.valueOf(getMaxNum());

    case HAS_GET_PRIZED:
      return Boolean.valueOf(isHasGetPrized());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ACHIEVE_ID:
      return isSetAchieveId();
    case CUR_NUM:
      return isSetCurNum();
    case MAX_NUM:
      return isSetMaxNum();
    case HAS_GET_PRIZED:
      return isSetHasGetPrized();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AchieveDetailInfo)
      return this.equals((AchieveDetailInfo)that);
    return false;
  }

  public boolean equals(AchieveDetailInfo that) {
    if (that == null)
      return false;

    boolean this_present_achieveId = true;
    boolean that_present_achieveId = true;
    if (this_present_achieveId || that_present_achieveId) {
      if (!(this_present_achieveId && that_present_achieveId))
        return false;
      if (this.achieveId != that.achieveId)
        return false;
    }

    boolean this_present_curNum = true;
    boolean that_present_curNum = true;
    if (this_present_curNum || that_present_curNum) {
      if (!(this_present_curNum && that_present_curNum))
        return false;
      if (this.curNum != that.curNum)
        return false;
    }

    boolean this_present_maxNum = true;
    boolean that_present_maxNum = true;
    if (this_present_maxNum || that_present_maxNum) {
      if (!(this_present_maxNum && that_present_maxNum))
        return false;
      if (this.maxNum != that.maxNum)
        return false;
    }

    boolean this_present_hasGetPrized = true;
    boolean that_present_hasGetPrized = true;
    if (this_present_hasGetPrized || that_present_hasGetPrized) {
      if (!(this_present_hasGetPrized && that_present_hasGetPrized))
        return false;
      if (this.hasGetPrized != that.hasGetPrized)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(AchieveDetailInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    AchieveDetailInfo typedOther = (AchieveDetailInfo)other;

    lastComparison = Boolean.valueOf(isSetAchieveId()).compareTo(typedOther.isSetAchieveId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAchieveId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.achieveId, typedOther.achieveId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurNum()).compareTo(typedOther.isSetCurNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.curNum, typedOther.curNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxNum()).compareTo(typedOther.isSetMaxNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxNum, typedOther.maxNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHasGetPrized()).compareTo(typedOther.isSetHasGetPrized());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHasGetPrized()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasGetPrized, typedOther.hasGetPrized);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AchieveDetailInfo(");
    boolean first = true;

    sb.append("achieveId:");
    sb.append(this.achieveId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("curNum:");
    sb.append(this.curNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxNum:");
    sb.append(this.maxNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hasGetPrized:");
    sb.append(this.hasGetPrized);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AchieveDetailInfoStandardSchemeFactory implements SchemeFactory {
    public AchieveDetailInfoStandardScheme getScheme() {
      return new AchieveDetailInfoStandardScheme();
    }
  }

  private static class AchieveDetailInfoStandardScheme extends StandardScheme<AchieveDetailInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AchieveDetailInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ACHIEVE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.achieveId = iprot.readI32();
              struct.setAchieveIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CUR_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.curNum = iprot.readI64();
              struct.setCurNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MAX_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.maxNum = iprot.readI64();
              struct.setMaxNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // HAS_GET_PRIZED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.hasGetPrized = iprot.readBool();
              struct.setHasGetPrizedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AchieveDetailInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ACHIEVE_ID_FIELD_DESC);
      oprot.writeI32(struct.achieveId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CUR_NUM_FIELD_DESC);
      oprot.writeI64(struct.curNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_NUM_FIELD_DESC);
      oprot.writeI64(struct.maxNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HAS_GET_PRIZED_FIELD_DESC);
      oprot.writeBool(struct.hasGetPrized);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AchieveDetailInfoTupleSchemeFactory implements SchemeFactory {
    public AchieveDetailInfoTupleScheme getScheme() {
      return new AchieveDetailInfoTupleScheme();
    }
  }

  private static class AchieveDetailInfoTupleScheme extends TupleScheme<AchieveDetailInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AchieveDetailInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAchieveId()) {
        optionals.set(0);
      }
      if (struct.isSetCurNum()) {
        optionals.set(1);
      }
      if (struct.isSetMaxNum()) {
        optionals.set(2);
      }
      if (struct.isSetHasGetPrized()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetAchieveId()) {
        oprot.writeI32(struct.achieveId);
      }
      if (struct.isSetCurNum()) {
        oprot.writeI64(struct.curNum);
      }
      if (struct.isSetMaxNum()) {
        oprot.writeI64(struct.maxNum);
      }
      if (struct.isSetHasGetPrized()) {
        oprot.writeBool(struct.hasGetPrized);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AchieveDetailInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.achieveId = iprot.readI32();
        struct.setAchieveIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.curNum = iprot.readI64();
        struct.setCurNumIsSet(true);
      }
      if (incoming.get(2)) {
        struct.maxNum = iprot.readI64();
        struct.setMaxNumIsSet(true);
      }
      if (incoming.get(3)) {
        struct.hasGetPrized = iprot.readBool();
        struct.setHasGetPrizedIsSet(true);
      }
    }
  }

}

