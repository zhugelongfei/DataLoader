/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 成就进度信息
 */
public class AchieveProcessInfo implements org.apache.thrift.TBase<AchieveProcessInfo, AchieveProcessInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AchieveProcessInfo");

  private static final org.apache.thrift.protocol.TField ACHIEVE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("achieveType", org.apache.thrift.protocol.TType.BYTE, (short)1);
  private static final org.apache.thrift.protocol.TField PROCESS_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("processRate", org.apache.thrift.protocol.TType.I16, (short)2);
  private static final org.apache.thrift.protocol.TField HAS_FINISH_ACHIEVE_FIELD_DESC = new org.apache.thrift.protocol.TField("hasFinishAchieve", org.apache.thrift.protocol.TType.BOOL, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AchieveProcessInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AchieveProcessInfoTupleSchemeFactory());
  }

  /**
   * 成就类型EAchieveType
   */
  public byte achieveType; // required
  /**
   * 成就进度(0-10000)
   */
  public short processRate; // required
  public boolean hasFinishAchieve; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 成就类型EAchieveType
     */
    ACHIEVE_TYPE((short)1, "achieveType"),
    /**
     * 成就进度(0-10000)
     */
    PROCESS_RATE((short)2, "processRate"),
    HAS_FINISH_ACHIEVE((short)3, "hasFinishAchieve");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACHIEVE_TYPE
          return ACHIEVE_TYPE;
        case 2: // PROCESS_RATE
          return PROCESS_RATE;
        case 3: // HAS_FINISH_ACHIEVE
          return HAS_FINISH_ACHIEVE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ACHIEVETYPE_ISSET_ID = 0;
  private static final int __PROCESSRATE_ISSET_ID = 1;
  private static final int __HASFINISHACHIEVE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACHIEVE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("achieveType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.PROCESS_RATE, new org.apache.thrift.meta_data.FieldMetaData("processRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.HAS_FINISH_ACHIEVE, new org.apache.thrift.meta_data.FieldMetaData("hasFinishAchieve", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AchieveProcessInfo.class, metaDataMap);
  }

  public AchieveProcessInfo() {
  }

  public AchieveProcessInfo(
    byte achieveType,
    short processRate,
    boolean hasFinishAchieve)
  {
    this();
    this.achieveType = achieveType;
    setAchieveTypeIsSet(true);
    this.processRate = processRate;
    setProcessRateIsSet(true);
    this.hasFinishAchieve = hasFinishAchieve;
    setHasFinishAchieveIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AchieveProcessInfo(AchieveProcessInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.achieveType = other.achieveType;
    this.processRate = other.processRate;
    this.hasFinishAchieve = other.hasFinishAchieve;
  }

  public AchieveProcessInfo deepCopy() {
    return new AchieveProcessInfo(this);
  }

  @Override
  public void clear() {
    setAchieveTypeIsSet(false);
    this.achieveType = 0;
    setProcessRateIsSet(false);
    this.processRate = 0;
    setHasFinishAchieveIsSet(false);
    this.hasFinishAchieve = false;
  }

  /**
   * 成就类型EAchieveType
   */
  public byte getAchieveType() {
    return this.achieveType;
  }

  /**
   * 成就类型EAchieveType
   */
  public AchieveProcessInfo setAchieveType(byte achieveType) {
    this.achieveType = achieveType;
    setAchieveTypeIsSet(true);
    return this;
  }

  public void unsetAchieveType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACHIEVETYPE_ISSET_ID);
  }

  /** Returns true if field achieveType is set (has been assigned a value) and false otherwise */
  public boolean isSetAchieveType() {
    return EncodingUtils.testBit(__isset_bitfield, __ACHIEVETYPE_ISSET_ID);
  }

  public void setAchieveTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACHIEVETYPE_ISSET_ID, value);
  }

  /**
   * 成就进度(0-10000)
   */
  public short getProcessRate() {
    return this.processRate;
  }

  /**
   * 成就进度(0-10000)
   */
  public AchieveProcessInfo setProcessRate(short processRate) {
    this.processRate = processRate;
    setProcessRateIsSet(true);
    return this;
  }

  public void unsetProcessRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROCESSRATE_ISSET_ID);
  }

  /** Returns true if field processRate is set (has been assigned a value) and false otherwise */
  public boolean isSetProcessRate() {
    return EncodingUtils.testBit(__isset_bitfield, __PROCESSRATE_ISSET_ID);
  }

  public void setProcessRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROCESSRATE_ISSET_ID, value);
  }

  public boolean isHasFinishAchieve() {
    return this.hasFinishAchieve;
  }

  public AchieveProcessInfo setHasFinishAchieve(boolean hasFinishAchieve) {
    this.hasFinishAchieve = hasFinishAchieve;
    setHasFinishAchieveIsSet(true);
    return this;
  }

  public void unsetHasFinishAchieve() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HASFINISHACHIEVE_ISSET_ID);
  }

  /** Returns true if field hasFinishAchieve is set (has been assigned a value) and false otherwise */
  public boolean isSetHasFinishAchieve() {
    return EncodingUtils.testBit(__isset_bitfield, __HASFINISHACHIEVE_ISSET_ID);
  }

  public void setHasFinishAchieveIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HASFINISHACHIEVE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ACHIEVE_TYPE:
      if (value == null) {
        unsetAchieveType();
      } else {
        setAchieveType((Byte)value);
      }
      break;

    case PROCESS_RATE:
      if (value == null) {
        unsetProcessRate();
      } else {
        setProcessRate((Short)value);
      }
      break;

    case HAS_FINISH_ACHIEVE:
      if (value == null) {
        unsetHasFinishAchieve();
      } else {
        setHasFinishAchieve((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ACHIEVE_TYPE:
      return Byte.valueOf(getAchieveType());

    case PROCESS_RATE:
      return Short.valueOf(getProcessRate());

    case HAS_FINISH_ACHIEVE:
      return Boolean.valueOf(isHasFinishAchieve());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ACHIEVE_TYPE:
      return isSetAchieveType();
    case PROCESS_RATE:
      return isSetProcessRate();
    case HAS_FINISH_ACHIEVE:
      return isSetHasFinishAchieve();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AchieveProcessInfo)
      return this.equals((AchieveProcessInfo)that);
    return false;
  }

  public boolean equals(AchieveProcessInfo that) {
    if (that == null)
      return false;

    boolean this_present_achieveType = true;
    boolean that_present_achieveType = true;
    if (this_present_achieveType || that_present_achieveType) {
      if (!(this_present_achieveType && that_present_achieveType))
        return false;
      if (this.achieveType != that.achieveType)
        return false;
    }

    boolean this_present_processRate = true;
    boolean that_present_processRate = true;
    if (this_present_processRate || that_present_processRate) {
      if (!(this_present_processRate && that_present_processRate))
        return false;
      if (this.processRate != that.processRate)
        return false;
    }

    boolean this_present_hasFinishAchieve = true;
    boolean that_present_hasFinishAchieve = true;
    if (this_present_hasFinishAchieve || that_present_hasFinishAchieve) {
      if (!(this_present_hasFinishAchieve && that_present_hasFinishAchieve))
        return false;
      if (this.hasFinishAchieve != that.hasFinishAchieve)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(AchieveProcessInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    AchieveProcessInfo typedOther = (AchieveProcessInfo)other;

    lastComparison = Boolean.valueOf(isSetAchieveType()).compareTo(typedOther.isSetAchieveType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAchieveType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.achieveType, typedOther.achieveType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProcessRate()).compareTo(typedOther.isSetProcessRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProcessRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.processRate, typedOther.processRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHasFinishAchieve()).compareTo(typedOther.isSetHasFinishAchieve());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHasFinishAchieve()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasFinishAchieve, typedOther.hasFinishAchieve);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AchieveProcessInfo(");
    boolean first = true;

    sb.append("achieveType:");
    sb.append(this.achieveType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("processRate:");
    sb.append(this.processRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hasFinishAchieve:");
    sb.append(this.hasFinishAchieve);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AchieveProcessInfoStandardSchemeFactory implements SchemeFactory {
    public AchieveProcessInfoStandardScheme getScheme() {
      return new AchieveProcessInfoStandardScheme();
    }
  }

  private static class AchieveProcessInfoStandardScheme extends StandardScheme<AchieveProcessInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AchieveProcessInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ACHIEVE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.achieveType = iprot.readByte();
              struct.setAchieveTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROCESS_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.processRate = iprot.readI16();
              struct.setProcessRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // HAS_FINISH_ACHIEVE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.hasFinishAchieve = iprot.readBool();
              struct.setHasFinishAchieveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AchieveProcessInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ACHIEVE_TYPE_FIELD_DESC);
      oprot.writeByte(struct.achieveType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROCESS_RATE_FIELD_DESC);
      oprot.writeI16(struct.processRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HAS_FINISH_ACHIEVE_FIELD_DESC);
      oprot.writeBool(struct.hasFinishAchieve);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AchieveProcessInfoTupleSchemeFactory implements SchemeFactory {
    public AchieveProcessInfoTupleScheme getScheme() {
      return new AchieveProcessInfoTupleScheme();
    }
  }

  private static class AchieveProcessInfoTupleScheme extends TupleScheme<AchieveProcessInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AchieveProcessInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAchieveType()) {
        optionals.set(0);
      }
      if (struct.isSetProcessRate()) {
        optionals.set(1);
      }
      if (struct.isSetHasFinishAchieve()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetAchieveType()) {
        oprot.writeByte(struct.achieveType);
      }
      if (struct.isSetProcessRate()) {
        oprot.writeI16(struct.processRate);
      }
      if (struct.isSetHasFinishAchieve()) {
        oprot.writeBool(struct.hasFinishAchieve);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AchieveProcessInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.achieveType = iprot.readByte();
        struct.setAchieveTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.processRate = iprot.readI16();
        struct.setProcessRateIsSet(true);
      }
      if (incoming.get(2)) {
        struct.hasFinishAchieve = iprot.readBool();
        struct.setHasFinishAchieveIsSet(true);
      }
    }
  }

}

