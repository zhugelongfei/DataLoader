/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 欢呼值通关条件结果
 */
public class PassCheerCondResult implements org.apache.thrift.TBase<PassCheerCondResult, PassCheerCondResult._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PassCheerCondResult");

  private static final org.apache.thrift.protocol.TField CONDS_FIELD_DESC = new org.apache.thrift.protocol.TField("conds", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField PASS_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("passStatus", org.apache.thrift.protocol.TType.BYTE, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PassCheerCondResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PassCheerCondResultTupleSchemeFactory());
  }

  public List<PassCond> conds; // required
  /**
   * 0-未满足 1-满足
   */
  public byte passStatus; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CONDS((short)1, "conds"),
    /**
     * 0-未满足 1-满足
     */
    PASS_STATUS((short)2, "passStatus");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CONDS
          return CONDS;
        case 2: // PASS_STATUS
          return PASS_STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PASSSTATUS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CONDS, new org.apache.thrift.meta_data.FieldMetaData("conds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PassCond.class))));
    tmpMap.put(_Fields.PASS_STATUS, new org.apache.thrift.meta_data.FieldMetaData("passStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PassCheerCondResult.class, metaDataMap);
  }

  public PassCheerCondResult() {
  }

  public PassCheerCondResult(
    List<PassCond> conds,
    byte passStatus)
  {
    this();
    this.conds = conds;
    this.passStatus = passStatus;
    setPassStatusIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PassCheerCondResult(PassCheerCondResult other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetConds()) {
      List<PassCond> __this__conds = new ArrayList<PassCond>();
      for (PassCond other_element : other.conds) {
        __this__conds.add(new PassCond(other_element));
      }
      this.conds = __this__conds;
    }
    this.passStatus = other.passStatus;
  }

  public PassCheerCondResult deepCopy() {
    return new PassCheerCondResult(this);
  }

  @Override
  public void clear() {
    this.conds = null;
    setPassStatusIsSet(false);
    this.passStatus = 0;
  }

  public int getCondsSize() {
    return (this.conds == null) ? 0 : this.conds.size();
  }

  public java.util.Iterator<PassCond> getCondsIterator() {
    return (this.conds == null) ? null : this.conds.iterator();
  }

  public void addToConds(PassCond elem) {
    if (this.conds == null) {
      this.conds = new ArrayList<PassCond>();
    }
    this.conds.add(elem);
  }

  public List<PassCond> getConds() {
    return this.conds;
  }

  public PassCheerCondResult setConds(List<PassCond> conds) {
    this.conds = conds;
    return this;
  }

  public void unsetConds() {
    this.conds = null;
  }

  /** Returns true if field conds is set (has been assigned a value) and false otherwise */
  public boolean isSetConds() {
    return this.conds != null;
  }

  public void setCondsIsSet(boolean value) {
    if (!value) {
      this.conds = null;
    }
  }

  /**
   * 0-未满足 1-满足
   */
  public byte getPassStatus() {
    return this.passStatus;
  }

  /**
   * 0-未满足 1-满足
   */
  public PassCheerCondResult setPassStatus(byte passStatus) {
    this.passStatus = passStatus;
    setPassStatusIsSet(true);
    return this;
  }

  public void unsetPassStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PASSSTATUS_ISSET_ID);
  }

  /** Returns true if field passStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetPassStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __PASSSTATUS_ISSET_ID);
  }

  public void setPassStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PASSSTATUS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CONDS:
      if (value == null) {
        unsetConds();
      } else {
        setConds((List<PassCond>)value);
      }
      break;

    case PASS_STATUS:
      if (value == null) {
        unsetPassStatus();
      } else {
        setPassStatus((Byte)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CONDS:
      return getConds();

    case PASS_STATUS:
      return Byte.valueOf(getPassStatus());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CONDS:
      return isSetConds();
    case PASS_STATUS:
      return isSetPassStatus();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PassCheerCondResult)
      return this.equals((PassCheerCondResult)that);
    return false;
  }

  public boolean equals(PassCheerCondResult that) {
    if (that == null)
      return false;

    boolean this_present_conds = true && this.isSetConds();
    boolean that_present_conds = true && that.isSetConds();
    if (this_present_conds || that_present_conds) {
      if (!(this_present_conds && that_present_conds))
        return false;
      if (!this.conds.equals(that.conds))
        return false;
    }

    boolean this_present_passStatus = true;
    boolean that_present_passStatus = true;
    if (this_present_passStatus || that_present_passStatus) {
      if (!(this_present_passStatus && that_present_passStatus))
        return false;
      if (this.passStatus != that.passStatus)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(PassCheerCondResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    PassCheerCondResult typedOther = (PassCheerCondResult)other;

    lastComparison = Boolean.valueOf(isSetConds()).compareTo(typedOther.isSetConds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.conds, typedOther.conds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPassStatus()).compareTo(typedOther.isSetPassStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.passStatus, typedOther.passStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PassCheerCondResult(");
    boolean first = true;

    sb.append("conds:");
    if (this.conds == null) {
      sb.append("null");
    } else {
      sb.append(this.conds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("passStatus:");
    sb.append(this.passStatus);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PassCheerCondResultStandardSchemeFactory implements SchemeFactory {
    public PassCheerCondResultStandardScheme getScheme() {
      return new PassCheerCondResultStandardScheme();
    }
  }

  private static class PassCheerCondResultStandardScheme extends StandardScheme<PassCheerCondResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PassCheerCondResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CONDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list620 = iprot.readListBegin();
                struct.conds = new ArrayList<PassCond>(_list620.size);
                for (int _i621 = 0; _i621 < _list620.size; ++_i621)
                {
                  PassCond _elem622; // required
                  _elem622 = new PassCond();
                  _elem622.read(iprot);
                  struct.conds.add(_elem622);
                }
                iprot.readListEnd();
              }
              struct.setCondsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PASS_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.passStatus = iprot.readByte();
              struct.setPassStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PassCheerCondResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.conds != null) {
        oprot.writeFieldBegin(CONDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.conds.size()));
          for (PassCond _iter623 : struct.conds)
          {
            _iter623.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PASS_STATUS_FIELD_DESC);
      oprot.writeByte(struct.passStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PassCheerCondResultTupleSchemeFactory implements SchemeFactory {
    public PassCheerCondResultTupleScheme getScheme() {
      return new PassCheerCondResultTupleScheme();
    }
  }

  private static class PassCheerCondResultTupleScheme extends TupleScheme<PassCheerCondResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PassCheerCondResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetConds()) {
        optionals.set(0);
      }
      if (struct.isSetPassStatus()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetConds()) {
        {
          oprot.writeI32(struct.conds.size());
          for (PassCond _iter624 : struct.conds)
          {
            _iter624.write(oprot);
          }
        }
      }
      if (struct.isSetPassStatus()) {
        oprot.writeByte(struct.passStatus);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PassCheerCondResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list625 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.conds = new ArrayList<PassCond>(_list625.size);
          for (int _i626 = 0; _i626 < _list625.size; ++_i626)
          {
            PassCond _elem627; // required
            _elem627 = new PassCond();
            _elem627.read(iprot);
            struct.conds.add(_elem627);
          }
        }
        struct.setCondsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.passStatus = iprot.readByte();
        struct.setPassStatusIsSet(true);
      }
    }
  }

}

