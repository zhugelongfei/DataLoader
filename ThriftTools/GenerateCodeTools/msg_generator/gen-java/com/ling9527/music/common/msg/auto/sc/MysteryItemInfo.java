/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MysteryItemInfo implements org.apache.thrift.TBase<MysteryItemInfo, MysteryItemInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MysteryItemInfo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("itemId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField WEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("weight", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PRICE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("priceType", org.apache.thrift.protocol.TType.BYTE, (short)4);
  private static final org.apache.thrift.protocol.TField PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("price", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField TIME_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("timeType", org.apache.thrift.protocol.TType.BYTE, (short)6);
  private static final org.apache.thrift.protocol.TField BIND_FIELD_DESC = new org.apache.thrift.protocol.TField("bind", org.apache.thrift.protocol.TType.BYTE, (short)7);
  private static final org.apache.thrift.protocol.TField SEX_FIELD_DESC = new org.apache.thrift.protocol.TField("sex", org.apache.thrift.protocol.TType.BYTE, (short)8);
  private static final org.apache.thrift.protocol.TField ITEM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("itemType", org.apache.thrift.protocol.TType.BYTE, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MysteryItemInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MysteryItemInfoTupleSchemeFactory());
  }

  public int id; // required
  public int itemId; // required
  public int weight; // required
  public byte priceType; // required
  public int price; // required
  public byte timeType; // required
  public byte bind; // required
  public byte sex; // required
  public byte itemType; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    ITEM_ID((short)2, "itemId"),
    WEIGHT((short)3, "weight"),
    PRICE_TYPE((short)4, "priceType"),
    PRICE((short)5, "price"),
    TIME_TYPE((short)6, "timeType"),
    BIND((short)7, "bind"),
    SEX((short)8, "sex"),
    ITEM_TYPE((short)9, "itemType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // ITEM_ID
          return ITEM_ID;
        case 3: // WEIGHT
          return WEIGHT;
        case 4: // PRICE_TYPE
          return PRICE_TYPE;
        case 5: // PRICE
          return PRICE;
        case 6: // TIME_TYPE
          return TIME_TYPE;
        case 7: // BIND
          return BIND;
        case 8: // SEX
          return SEX;
        case 9: // ITEM_TYPE
          return ITEM_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __ITEMID_ISSET_ID = 1;
  private static final int __WEIGHT_ISSET_ID = 2;
  private static final int __PRICETYPE_ISSET_ID = 3;
  private static final int __PRICE_ISSET_ID = 4;
  private static final int __TIMETYPE_ISSET_ID = 5;
  private static final int __BIND_ISSET_ID = 6;
  private static final int __SEX_ISSET_ID = 7;
  private static final int __ITEMTYPE_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("itemId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WEIGHT, new org.apache.thrift.meta_data.FieldMetaData("weight", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRICE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("priceType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.PRICE, new org.apache.thrift.meta_data.FieldMetaData("price", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TIME_TYPE, new org.apache.thrift.meta_data.FieldMetaData("timeType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.BIND, new org.apache.thrift.meta_data.FieldMetaData("bind", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.SEX, new org.apache.thrift.meta_data.FieldMetaData("sex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.ITEM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("itemType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MysteryItemInfo.class, metaDataMap);
  }

  public MysteryItemInfo() {
  }

  public MysteryItemInfo(
    int id,
    int itemId,
    int weight,
    byte priceType,
    int price,
    byte timeType,
    byte bind,
    byte sex,
    byte itemType)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.itemId = itemId;
    setItemIdIsSet(true);
    this.weight = weight;
    setWeightIsSet(true);
    this.priceType = priceType;
    setPriceTypeIsSet(true);
    this.price = price;
    setPriceIsSet(true);
    this.timeType = timeType;
    setTimeTypeIsSet(true);
    this.bind = bind;
    setBindIsSet(true);
    this.sex = sex;
    setSexIsSet(true);
    this.itemType = itemType;
    setItemTypeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MysteryItemInfo(MysteryItemInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.itemId = other.itemId;
    this.weight = other.weight;
    this.priceType = other.priceType;
    this.price = other.price;
    this.timeType = other.timeType;
    this.bind = other.bind;
    this.sex = other.sex;
    this.itemType = other.itemType;
  }

  public MysteryItemInfo deepCopy() {
    return new MysteryItemInfo(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setItemIdIsSet(false);
    this.itemId = 0;
    setWeightIsSet(false);
    this.weight = 0;
    setPriceTypeIsSet(false);
    this.priceType = 0;
    setPriceIsSet(false);
    this.price = 0;
    setTimeTypeIsSet(false);
    this.timeType = 0;
    setBindIsSet(false);
    this.bind = 0;
    setSexIsSet(false);
    this.sex = 0;
    setItemTypeIsSet(false);
    this.itemType = 0;
  }

  public int getId() {
    return this.id;
  }

  public MysteryItemInfo setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getItemId() {
    return this.itemId;
  }

  public MysteryItemInfo setItemId(int itemId) {
    this.itemId = itemId;
    setItemIdIsSet(true);
    return this;
  }

  public void unsetItemId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ITEMID_ISSET_ID);
  }

  /** Returns true if field itemId is set (has been assigned a value) and false otherwise */
  public boolean isSetItemId() {
    return EncodingUtils.testBit(__isset_bitfield, __ITEMID_ISSET_ID);
  }

  public void setItemIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ITEMID_ISSET_ID, value);
  }

  public int getWeight() {
    return this.weight;
  }

  public MysteryItemInfo setWeight(int weight) {
    this.weight = weight;
    setWeightIsSet(true);
    return this;
  }

  public void unsetWeight() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WEIGHT_ISSET_ID);
  }

  /** Returns true if field weight is set (has been assigned a value) and false otherwise */
  public boolean isSetWeight() {
    return EncodingUtils.testBit(__isset_bitfield, __WEIGHT_ISSET_ID);
  }

  public void setWeightIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WEIGHT_ISSET_ID, value);
  }

  public byte getPriceType() {
    return this.priceType;
  }

  public MysteryItemInfo setPriceType(byte priceType) {
    this.priceType = priceType;
    setPriceTypeIsSet(true);
    return this;
  }

  public void unsetPriceType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRICETYPE_ISSET_ID);
  }

  /** Returns true if field priceType is set (has been assigned a value) and false otherwise */
  public boolean isSetPriceType() {
    return EncodingUtils.testBit(__isset_bitfield, __PRICETYPE_ISSET_ID);
  }

  public void setPriceTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRICETYPE_ISSET_ID, value);
  }

  public int getPrice() {
    return this.price;
  }

  public MysteryItemInfo setPrice(int price) {
    this.price = price;
    setPriceIsSet(true);
    return this;
  }

  public void unsetPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  /** Returns true if field price is set (has been assigned a value) and false otherwise */
  public boolean isSetPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  public void setPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRICE_ISSET_ID, value);
  }

  public byte getTimeType() {
    return this.timeType;
  }

  public MysteryItemInfo setTimeType(byte timeType) {
    this.timeType = timeType;
    setTimeTypeIsSet(true);
    return this;
  }

  public void unsetTimeType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMETYPE_ISSET_ID);
  }

  /** Returns true if field timeType is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeType() {
    return EncodingUtils.testBit(__isset_bitfield, __TIMETYPE_ISSET_ID);
  }

  public void setTimeTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMETYPE_ISSET_ID, value);
  }

  public byte getBind() {
    return this.bind;
  }

  public MysteryItemInfo setBind(byte bind) {
    this.bind = bind;
    setBindIsSet(true);
    return this;
  }

  public void unsetBind() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BIND_ISSET_ID);
  }

  /** Returns true if field bind is set (has been assigned a value) and false otherwise */
  public boolean isSetBind() {
    return EncodingUtils.testBit(__isset_bitfield, __BIND_ISSET_ID);
  }

  public void setBindIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BIND_ISSET_ID, value);
  }

  public byte getSex() {
    return this.sex;
  }

  public MysteryItemInfo setSex(byte sex) {
    this.sex = sex;
    setSexIsSet(true);
    return this;
  }

  public void unsetSex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEX_ISSET_ID);
  }

  /** Returns true if field sex is set (has been assigned a value) and false otherwise */
  public boolean isSetSex() {
    return EncodingUtils.testBit(__isset_bitfield, __SEX_ISSET_ID);
  }

  public void setSexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEX_ISSET_ID, value);
  }

  public byte getItemType() {
    return this.itemType;
  }

  public MysteryItemInfo setItemType(byte itemType) {
    this.itemType = itemType;
    setItemTypeIsSet(true);
    return this;
  }

  public void unsetItemType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ITEMTYPE_ISSET_ID);
  }

  /** Returns true if field itemType is set (has been assigned a value) and false otherwise */
  public boolean isSetItemType() {
    return EncodingUtils.testBit(__isset_bitfield, __ITEMTYPE_ISSET_ID);
  }

  public void setItemTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ITEMTYPE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case ITEM_ID:
      if (value == null) {
        unsetItemId();
      } else {
        setItemId((Integer)value);
      }
      break;

    case WEIGHT:
      if (value == null) {
        unsetWeight();
      } else {
        setWeight((Integer)value);
      }
      break;

    case PRICE_TYPE:
      if (value == null) {
        unsetPriceType();
      } else {
        setPriceType((Byte)value);
      }
      break;

    case PRICE:
      if (value == null) {
        unsetPrice();
      } else {
        setPrice((Integer)value);
      }
      break;

    case TIME_TYPE:
      if (value == null) {
        unsetTimeType();
      } else {
        setTimeType((Byte)value);
      }
      break;

    case BIND:
      if (value == null) {
        unsetBind();
      } else {
        setBind((Byte)value);
      }
      break;

    case SEX:
      if (value == null) {
        unsetSex();
      } else {
        setSex((Byte)value);
      }
      break;

    case ITEM_TYPE:
      if (value == null) {
        unsetItemType();
      } else {
        setItemType((Byte)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case ITEM_ID:
      return Integer.valueOf(getItemId());

    case WEIGHT:
      return Integer.valueOf(getWeight());

    case PRICE_TYPE:
      return Byte.valueOf(getPriceType());

    case PRICE:
      return Integer.valueOf(getPrice());

    case TIME_TYPE:
      return Byte.valueOf(getTimeType());

    case BIND:
      return Byte.valueOf(getBind());

    case SEX:
      return Byte.valueOf(getSex());

    case ITEM_TYPE:
      return Byte.valueOf(getItemType());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case ITEM_ID:
      return isSetItemId();
    case WEIGHT:
      return isSetWeight();
    case PRICE_TYPE:
      return isSetPriceType();
    case PRICE:
      return isSetPrice();
    case TIME_TYPE:
      return isSetTimeType();
    case BIND:
      return isSetBind();
    case SEX:
      return isSetSex();
    case ITEM_TYPE:
      return isSetItemType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MysteryItemInfo)
      return this.equals((MysteryItemInfo)that);
    return false;
  }

  public boolean equals(MysteryItemInfo that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_itemId = true;
    boolean that_present_itemId = true;
    if (this_present_itemId || that_present_itemId) {
      if (!(this_present_itemId && that_present_itemId))
        return false;
      if (this.itemId != that.itemId)
        return false;
    }

    boolean this_present_weight = true;
    boolean that_present_weight = true;
    if (this_present_weight || that_present_weight) {
      if (!(this_present_weight && that_present_weight))
        return false;
      if (this.weight != that.weight)
        return false;
    }

    boolean this_present_priceType = true;
    boolean that_present_priceType = true;
    if (this_present_priceType || that_present_priceType) {
      if (!(this_present_priceType && that_present_priceType))
        return false;
      if (this.priceType != that.priceType)
        return false;
    }

    boolean this_present_price = true;
    boolean that_present_price = true;
    if (this_present_price || that_present_price) {
      if (!(this_present_price && that_present_price))
        return false;
      if (this.price != that.price)
        return false;
    }

    boolean this_present_timeType = true;
    boolean that_present_timeType = true;
    if (this_present_timeType || that_present_timeType) {
      if (!(this_present_timeType && that_present_timeType))
        return false;
      if (this.timeType != that.timeType)
        return false;
    }

    boolean this_present_bind = true;
    boolean that_present_bind = true;
    if (this_present_bind || that_present_bind) {
      if (!(this_present_bind && that_present_bind))
        return false;
      if (this.bind != that.bind)
        return false;
    }

    boolean this_present_sex = true;
    boolean that_present_sex = true;
    if (this_present_sex || that_present_sex) {
      if (!(this_present_sex && that_present_sex))
        return false;
      if (this.sex != that.sex)
        return false;
    }

    boolean this_present_itemType = true;
    boolean that_present_itemType = true;
    if (this_present_itemType || that_present_itemType) {
      if (!(this_present_itemType && that_present_itemType))
        return false;
      if (this.itemType != that.itemType)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(MysteryItemInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    MysteryItemInfo typedOther = (MysteryItemInfo)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItemId()).compareTo(typedOther.isSetItemId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemId, typedOther.itemId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWeight()).compareTo(typedOther.isSetWeight());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWeight()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.weight, typedOther.weight);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPriceType()).compareTo(typedOther.isSetPriceType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriceType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priceType, typedOther.priceType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrice()).compareTo(typedOther.isSetPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.price, typedOther.price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeType()).compareTo(typedOther.isSetTimeType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeType, typedOther.timeType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBind()).compareTo(typedOther.isSetBind());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBind()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bind, typedOther.bind);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSex()).compareTo(typedOther.isSetSex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sex, typedOther.sex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItemType()).compareTo(typedOther.isSetItemType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemType, typedOther.itemType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MysteryItemInfo(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("itemId:");
    sb.append(this.itemId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("weight:");
    sb.append(this.weight);
    first = false;
    if (!first) sb.append(", ");
    sb.append("priceType:");
    sb.append(this.priceType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("price:");
    sb.append(this.price);
    first = false;
    if (!first) sb.append(", ");
    sb.append("timeType:");
    sb.append(this.timeType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bind:");
    sb.append(this.bind);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sex:");
    sb.append(this.sex);
    first = false;
    if (!first) sb.append(", ");
    sb.append("itemType:");
    sb.append(this.itemType);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MysteryItemInfoStandardSchemeFactory implements SchemeFactory {
    public MysteryItemInfoStandardScheme getScheme() {
      return new MysteryItemInfoStandardScheme();
    }
  }

  private static class MysteryItemInfoStandardScheme extends StandardScheme<MysteryItemInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MysteryItemInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ITEM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.itemId = iprot.readI32();
              struct.setItemIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // WEIGHT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.weight = iprot.readI32();
              struct.setWeightIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PRICE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.priceType = iprot.readByte();
              struct.setPriceTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.price = iprot.readI32();
              struct.setPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TIME_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.timeType = iprot.readByte();
              struct.setTimeTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BIND
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.bind = iprot.readByte();
              struct.setBindIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SEX
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.sex = iprot.readByte();
              struct.setSexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ITEM_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.itemType = iprot.readByte();
              struct.setItemTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MysteryItemInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
      oprot.writeI32(struct.itemId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WEIGHT_FIELD_DESC);
      oprot.writeI32(struct.weight);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRICE_TYPE_FIELD_DESC);
      oprot.writeByte(struct.priceType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRICE_FIELD_DESC);
      oprot.writeI32(struct.price);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TIME_TYPE_FIELD_DESC);
      oprot.writeByte(struct.timeType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BIND_FIELD_DESC);
      oprot.writeByte(struct.bind);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SEX_FIELD_DESC);
      oprot.writeByte(struct.sex);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ITEM_TYPE_FIELD_DESC);
      oprot.writeByte(struct.itemType);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MysteryItemInfoTupleSchemeFactory implements SchemeFactory {
    public MysteryItemInfoTupleScheme getScheme() {
      return new MysteryItemInfoTupleScheme();
    }
  }

  private static class MysteryItemInfoTupleScheme extends TupleScheme<MysteryItemInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MysteryItemInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetItemId()) {
        optionals.set(1);
      }
      if (struct.isSetWeight()) {
        optionals.set(2);
      }
      if (struct.isSetPriceType()) {
        optionals.set(3);
      }
      if (struct.isSetPrice()) {
        optionals.set(4);
      }
      if (struct.isSetTimeType()) {
        optionals.set(5);
      }
      if (struct.isSetBind()) {
        optionals.set(6);
      }
      if (struct.isSetSex()) {
        optionals.set(7);
      }
      if (struct.isSetItemType()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetItemId()) {
        oprot.writeI32(struct.itemId);
      }
      if (struct.isSetWeight()) {
        oprot.writeI32(struct.weight);
      }
      if (struct.isSetPriceType()) {
        oprot.writeByte(struct.priceType);
      }
      if (struct.isSetPrice()) {
        oprot.writeI32(struct.price);
      }
      if (struct.isSetTimeType()) {
        oprot.writeByte(struct.timeType);
      }
      if (struct.isSetBind()) {
        oprot.writeByte(struct.bind);
      }
      if (struct.isSetSex()) {
        oprot.writeByte(struct.sex);
      }
      if (struct.isSetItemType()) {
        oprot.writeByte(struct.itemType);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MysteryItemInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.itemId = iprot.readI32();
        struct.setItemIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.weight = iprot.readI32();
        struct.setWeightIsSet(true);
      }
      if (incoming.get(3)) {
        struct.priceType = iprot.readByte();
        struct.setPriceTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.price = iprot.readI32();
        struct.setPriceIsSet(true);
      }
      if (incoming.get(5)) {
        struct.timeType = iprot.readByte();
        struct.setTimeTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.bind = iprot.readByte();
        struct.setBindIsSet(true);
      }
      if (incoming.get(7)) {
        struct.sex = iprot.readByte();
        struct.setSexIsSet(true);
      }
      if (incoming.get(8)) {
        struct.itemType = iprot.readByte();
        struct.setItemTypeIsSet(true);
      }
    }
  }

}

