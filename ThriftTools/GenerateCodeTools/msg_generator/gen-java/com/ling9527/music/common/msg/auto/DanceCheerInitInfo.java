/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 舞蹈欢呼值初始信息
 */
public class DanceCheerInitInfo implements org.apache.thrift.TBase<DanceCheerInitInfo, DanceCheerInitInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DanceCheerInitInfo");

  private static final org.apache.thrift.protocol.TField RANK_CHEER_VALS_FIELD_DESC = new org.apache.thrift.protocol.TField("rankCheerVals", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField INIT_CHEER_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("initCheerVal", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField EXTRA_PASS_CONDS_FIELD_DESC = new org.apache.thrift.protocol.TField("extraPassConds", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField NPC_INIT_CHEER_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("npcInitCheerVal", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField NPC_SKILL_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("npcSkillIds", org.apache.thrift.protocol.TType.LIST, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DanceCheerInitInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DanceCheerInitInfoTupleSchemeFactory());
  }

  /**
   * s,ss,sss对应欢呼值
   */
  public List<Integer> rankCheerVals; // required
  /**
   * 初始欢呼值
   */
  public int initCheerVal; // required
  /**
   * 额外通关条件信息
   */
  public List<PassCond> extraPassConds; // required
  /**
   * npc初始欢呼值
   */
  public int npcInitCheerVal; // optional
  /**
   * npc释放技能序列
   */
  public List<Integer> npcSkillIds; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * s,ss,sss对应欢呼值
     */
    RANK_CHEER_VALS((short)1, "rankCheerVals"),
    /**
     * 初始欢呼值
     */
    INIT_CHEER_VAL((short)2, "initCheerVal"),
    /**
     * 额外通关条件信息
     */
    EXTRA_PASS_CONDS((short)3, "extraPassConds"),
    /**
     * npc初始欢呼值
     */
    NPC_INIT_CHEER_VAL((short)4, "npcInitCheerVal"),
    /**
     * npc释放技能序列
     */
    NPC_SKILL_IDS((short)5, "npcSkillIds");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RANK_CHEER_VALS
          return RANK_CHEER_VALS;
        case 2: // INIT_CHEER_VAL
          return INIT_CHEER_VAL;
        case 3: // EXTRA_PASS_CONDS
          return EXTRA_PASS_CONDS;
        case 4: // NPC_INIT_CHEER_VAL
          return NPC_INIT_CHEER_VAL;
        case 5: // NPC_SKILL_IDS
          return NPC_SKILL_IDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INITCHEERVAL_ISSET_ID = 0;
  private static final int __NPCINITCHEERVAL_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.NPC_INIT_CHEER_VAL,_Fields.NPC_SKILL_IDS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RANK_CHEER_VALS, new org.apache.thrift.meta_data.FieldMetaData("rankCheerVals", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.INIT_CHEER_VAL, new org.apache.thrift.meta_data.FieldMetaData("initCheerVal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXTRA_PASS_CONDS, new org.apache.thrift.meta_data.FieldMetaData("extraPassConds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PassCond.class))));
    tmpMap.put(_Fields.NPC_INIT_CHEER_VAL, new org.apache.thrift.meta_data.FieldMetaData("npcInitCheerVal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NPC_SKILL_IDS, new org.apache.thrift.meta_data.FieldMetaData("npcSkillIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DanceCheerInitInfo.class, metaDataMap);
  }

  public DanceCheerInitInfo() {
  }

  public DanceCheerInitInfo(
    List<Integer> rankCheerVals,
    int initCheerVal,
    List<PassCond> extraPassConds)
  {
    this();
    this.rankCheerVals = rankCheerVals;
    this.initCheerVal = initCheerVal;
    setInitCheerValIsSet(true);
    this.extraPassConds = extraPassConds;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DanceCheerInitInfo(DanceCheerInitInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetRankCheerVals()) {
      List<Integer> __this__rankCheerVals = new ArrayList<Integer>();
      for (Integer other_element : other.rankCheerVals) {
        __this__rankCheerVals.add(other_element);
      }
      this.rankCheerVals = __this__rankCheerVals;
    }
    this.initCheerVal = other.initCheerVal;
    if (other.isSetExtraPassConds()) {
      List<PassCond> __this__extraPassConds = new ArrayList<PassCond>();
      for (PassCond other_element : other.extraPassConds) {
        __this__extraPassConds.add(new PassCond(other_element));
      }
      this.extraPassConds = __this__extraPassConds;
    }
    this.npcInitCheerVal = other.npcInitCheerVal;
    if (other.isSetNpcSkillIds()) {
      List<Integer> __this__npcSkillIds = new ArrayList<Integer>();
      for (Integer other_element : other.npcSkillIds) {
        __this__npcSkillIds.add(other_element);
      }
      this.npcSkillIds = __this__npcSkillIds;
    }
  }

  public DanceCheerInitInfo deepCopy() {
    return new DanceCheerInitInfo(this);
  }

  @Override
  public void clear() {
    this.rankCheerVals = null;
    setInitCheerValIsSet(false);
    this.initCheerVal = 0;
    this.extraPassConds = null;
    setNpcInitCheerValIsSet(false);
    this.npcInitCheerVal = 0;
    this.npcSkillIds = null;
  }

  public int getRankCheerValsSize() {
    return (this.rankCheerVals == null) ? 0 : this.rankCheerVals.size();
  }

  public java.util.Iterator<Integer> getRankCheerValsIterator() {
    return (this.rankCheerVals == null) ? null : this.rankCheerVals.iterator();
  }

  public void addToRankCheerVals(int elem) {
    if (this.rankCheerVals == null) {
      this.rankCheerVals = new ArrayList<Integer>();
    }
    this.rankCheerVals.add(elem);
  }

  /**
   * s,ss,sss对应欢呼值
   */
  public List<Integer> getRankCheerVals() {
    return this.rankCheerVals;
  }

  /**
   * s,ss,sss对应欢呼值
   */
  public DanceCheerInitInfo setRankCheerVals(List<Integer> rankCheerVals) {
    this.rankCheerVals = rankCheerVals;
    return this;
  }

  public void unsetRankCheerVals() {
    this.rankCheerVals = null;
  }

  /** Returns true if field rankCheerVals is set (has been assigned a value) and false otherwise */
  public boolean isSetRankCheerVals() {
    return this.rankCheerVals != null;
  }

  public void setRankCheerValsIsSet(boolean value) {
    if (!value) {
      this.rankCheerVals = null;
    }
  }

  /**
   * 初始欢呼值
   */
  public int getInitCheerVal() {
    return this.initCheerVal;
  }

  /**
   * 初始欢呼值
   */
  public DanceCheerInitInfo setInitCheerVal(int initCheerVal) {
    this.initCheerVal = initCheerVal;
    setInitCheerValIsSet(true);
    return this;
  }

  public void unsetInitCheerVal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INITCHEERVAL_ISSET_ID);
  }

  /** Returns true if field initCheerVal is set (has been assigned a value) and false otherwise */
  public boolean isSetInitCheerVal() {
    return EncodingUtils.testBit(__isset_bitfield, __INITCHEERVAL_ISSET_ID);
  }

  public void setInitCheerValIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INITCHEERVAL_ISSET_ID, value);
  }

  public int getExtraPassCondsSize() {
    return (this.extraPassConds == null) ? 0 : this.extraPassConds.size();
  }

  public java.util.Iterator<PassCond> getExtraPassCondsIterator() {
    return (this.extraPassConds == null) ? null : this.extraPassConds.iterator();
  }

  public void addToExtraPassConds(PassCond elem) {
    if (this.extraPassConds == null) {
      this.extraPassConds = new ArrayList<PassCond>();
    }
    this.extraPassConds.add(elem);
  }

  /**
   * 额外通关条件信息
   */
  public List<PassCond> getExtraPassConds() {
    return this.extraPassConds;
  }

  /**
   * 额外通关条件信息
   */
  public DanceCheerInitInfo setExtraPassConds(List<PassCond> extraPassConds) {
    this.extraPassConds = extraPassConds;
    return this;
  }

  public void unsetExtraPassConds() {
    this.extraPassConds = null;
  }

  /** Returns true if field extraPassConds is set (has been assigned a value) and false otherwise */
  public boolean isSetExtraPassConds() {
    return this.extraPassConds != null;
  }

  public void setExtraPassCondsIsSet(boolean value) {
    if (!value) {
      this.extraPassConds = null;
    }
  }

  /**
   * npc初始欢呼值
   */
  public int getNpcInitCheerVal() {
    return this.npcInitCheerVal;
  }

  /**
   * npc初始欢呼值
   */
  public DanceCheerInitInfo setNpcInitCheerVal(int npcInitCheerVal) {
    this.npcInitCheerVal = npcInitCheerVal;
    setNpcInitCheerValIsSet(true);
    return this;
  }

  public void unsetNpcInitCheerVal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NPCINITCHEERVAL_ISSET_ID);
  }

  /** Returns true if field npcInitCheerVal is set (has been assigned a value) and false otherwise */
  public boolean isSetNpcInitCheerVal() {
    return EncodingUtils.testBit(__isset_bitfield, __NPCINITCHEERVAL_ISSET_ID);
  }

  public void setNpcInitCheerValIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NPCINITCHEERVAL_ISSET_ID, value);
  }

  public int getNpcSkillIdsSize() {
    return (this.npcSkillIds == null) ? 0 : this.npcSkillIds.size();
  }

  public java.util.Iterator<Integer> getNpcSkillIdsIterator() {
    return (this.npcSkillIds == null) ? null : this.npcSkillIds.iterator();
  }

  public void addToNpcSkillIds(int elem) {
    if (this.npcSkillIds == null) {
      this.npcSkillIds = new ArrayList<Integer>();
    }
    this.npcSkillIds.add(elem);
  }

  /**
   * npc释放技能序列
   */
  public List<Integer> getNpcSkillIds() {
    return this.npcSkillIds;
  }

  /**
   * npc释放技能序列
   */
  public DanceCheerInitInfo setNpcSkillIds(List<Integer> npcSkillIds) {
    this.npcSkillIds = npcSkillIds;
    return this;
  }

  public void unsetNpcSkillIds() {
    this.npcSkillIds = null;
  }

  /** Returns true if field npcSkillIds is set (has been assigned a value) and false otherwise */
  public boolean isSetNpcSkillIds() {
    return this.npcSkillIds != null;
  }

  public void setNpcSkillIdsIsSet(boolean value) {
    if (!value) {
      this.npcSkillIds = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RANK_CHEER_VALS:
      if (value == null) {
        unsetRankCheerVals();
      } else {
        setRankCheerVals((List<Integer>)value);
      }
      break;

    case INIT_CHEER_VAL:
      if (value == null) {
        unsetInitCheerVal();
      } else {
        setInitCheerVal((Integer)value);
      }
      break;

    case EXTRA_PASS_CONDS:
      if (value == null) {
        unsetExtraPassConds();
      } else {
        setExtraPassConds((List<PassCond>)value);
      }
      break;

    case NPC_INIT_CHEER_VAL:
      if (value == null) {
        unsetNpcInitCheerVal();
      } else {
        setNpcInitCheerVal((Integer)value);
      }
      break;

    case NPC_SKILL_IDS:
      if (value == null) {
        unsetNpcSkillIds();
      } else {
        setNpcSkillIds((List<Integer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RANK_CHEER_VALS:
      return getRankCheerVals();

    case INIT_CHEER_VAL:
      return Integer.valueOf(getInitCheerVal());

    case EXTRA_PASS_CONDS:
      return getExtraPassConds();

    case NPC_INIT_CHEER_VAL:
      return Integer.valueOf(getNpcInitCheerVal());

    case NPC_SKILL_IDS:
      return getNpcSkillIds();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RANK_CHEER_VALS:
      return isSetRankCheerVals();
    case INIT_CHEER_VAL:
      return isSetInitCheerVal();
    case EXTRA_PASS_CONDS:
      return isSetExtraPassConds();
    case NPC_INIT_CHEER_VAL:
      return isSetNpcInitCheerVal();
    case NPC_SKILL_IDS:
      return isSetNpcSkillIds();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DanceCheerInitInfo)
      return this.equals((DanceCheerInitInfo)that);
    return false;
  }

  public boolean equals(DanceCheerInitInfo that) {
    if (that == null)
      return false;

    boolean this_present_rankCheerVals = true && this.isSetRankCheerVals();
    boolean that_present_rankCheerVals = true && that.isSetRankCheerVals();
    if (this_present_rankCheerVals || that_present_rankCheerVals) {
      if (!(this_present_rankCheerVals && that_present_rankCheerVals))
        return false;
      if (!this.rankCheerVals.equals(that.rankCheerVals))
        return false;
    }

    boolean this_present_initCheerVal = true;
    boolean that_present_initCheerVal = true;
    if (this_present_initCheerVal || that_present_initCheerVal) {
      if (!(this_present_initCheerVal && that_present_initCheerVal))
        return false;
      if (this.initCheerVal != that.initCheerVal)
        return false;
    }

    boolean this_present_extraPassConds = true && this.isSetExtraPassConds();
    boolean that_present_extraPassConds = true && that.isSetExtraPassConds();
    if (this_present_extraPassConds || that_present_extraPassConds) {
      if (!(this_present_extraPassConds && that_present_extraPassConds))
        return false;
      if (!this.extraPassConds.equals(that.extraPassConds))
        return false;
    }

    boolean this_present_npcInitCheerVal = true && this.isSetNpcInitCheerVal();
    boolean that_present_npcInitCheerVal = true && that.isSetNpcInitCheerVal();
    if (this_present_npcInitCheerVal || that_present_npcInitCheerVal) {
      if (!(this_present_npcInitCheerVal && that_present_npcInitCheerVal))
        return false;
      if (this.npcInitCheerVal != that.npcInitCheerVal)
        return false;
    }

    boolean this_present_npcSkillIds = true && this.isSetNpcSkillIds();
    boolean that_present_npcSkillIds = true && that.isSetNpcSkillIds();
    if (this_present_npcSkillIds || that_present_npcSkillIds) {
      if (!(this_present_npcSkillIds && that_present_npcSkillIds))
        return false;
      if (!this.npcSkillIds.equals(that.npcSkillIds))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(DanceCheerInitInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    DanceCheerInitInfo typedOther = (DanceCheerInitInfo)other;

    lastComparison = Boolean.valueOf(isSetRankCheerVals()).compareTo(typedOther.isSetRankCheerVals());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRankCheerVals()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rankCheerVals, typedOther.rankCheerVals);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInitCheerVal()).compareTo(typedOther.isSetInitCheerVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInitCheerVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.initCheerVal, typedOther.initCheerVal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtraPassConds()).compareTo(typedOther.isSetExtraPassConds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtraPassConds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extraPassConds, typedOther.extraPassConds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNpcInitCheerVal()).compareTo(typedOther.isSetNpcInitCheerVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNpcInitCheerVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.npcInitCheerVal, typedOther.npcInitCheerVal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNpcSkillIds()).compareTo(typedOther.isSetNpcSkillIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNpcSkillIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.npcSkillIds, typedOther.npcSkillIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DanceCheerInitInfo(");
    boolean first = true;

    sb.append("rankCheerVals:");
    if (this.rankCheerVals == null) {
      sb.append("null");
    } else {
      sb.append(this.rankCheerVals);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("initCheerVal:");
    sb.append(this.initCheerVal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("extraPassConds:");
    if (this.extraPassConds == null) {
      sb.append("null");
    } else {
      sb.append(this.extraPassConds);
    }
    first = false;
    if (isSetNpcInitCheerVal()) {
      if (!first) sb.append(", ");
      sb.append("npcInitCheerVal:");
      sb.append(this.npcInitCheerVal);
      first = false;
    }
    if (isSetNpcSkillIds()) {
      if (!first) sb.append(", ");
      sb.append("npcSkillIds:");
      if (this.npcSkillIds == null) {
        sb.append("null");
      } else {
        sb.append(this.npcSkillIds);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DanceCheerInitInfoStandardSchemeFactory implements SchemeFactory {
    public DanceCheerInitInfoStandardScheme getScheme() {
      return new DanceCheerInitInfoStandardScheme();
    }
  }

  private static class DanceCheerInitInfoStandardScheme extends StandardScheme<DanceCheerInitInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DanceCheerInitInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RANK_CHEER_VALS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list596 = iprot.readListBegin();
                struct.rankCheerVals = new ArrayList<Integer>(_list596.size);
                for (int _i597 = 0; _i597 < _list596.size; ++_i597)
                {
                  int _elem598; // required
                  _elem598 = iprot.readI32();
                  struct.rankCheerVals.add(_elem598);
                }
                iprot.readListEnd();
              }
              struct.setRankCheerValsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INIT_CHEER_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.initCheerVal = iprot.readI32();
              struct.setInitCheerValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EXTRA_PASS_CONDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list599 = iprot.readListBegin();
                struct.extraPassConds = new ArrayList<PassCond>(_list599.size);
                for (int _i600 = 0; _i600 < _list599.size; ++_i600)
                {
                  PassCond _elem601; // required
                  _elem601 = new PassCond();
                  _elem601.read(iprot);
                  struct.extraPassConds.add(_elem601);
                }
                iprot.readListEnd();
              }
              struct.setExtraPassCondsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NPC_INIT_CHEER_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.npcInitCheerVal = iprot.readI32();
              struct.setNpcInitCheerValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NPC_SKILL_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list602 = iprot.readListBegin();
                struct.npcSkillIds = new ArrayList<Integer>(_list602.size);
                for (int _i603 = 0; _i603 < _list602.size; ++_i603)
                {
                  int _elem604; // required
                  _elem604 = iprot.readI32();
                  struct.npcSkillIds.add(_elem604);
                }
                iprot.readListEnd();
              }
              struct.setNpcSkillIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DanceCheerInitInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.rankCheerVals != null) {
        oprot.writeFieldBegin(RANK_CHEER_VALS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.rankCheerVals.size()));
          for (int _iter605 : struct.rankCheerVals)
          {
            oprot.writeI32(_iter605);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INIT_CHEER_VAL_FIELD_DESC);
      oprot.writeI32(struct.initCheerVal);
      oprot.writeFieldEnd();
      if (struct.extraPassConds != null) {
        oprot.writeFieldBegin(EXTRA_PASS_CONDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.extraPassConds.size()));
          for (PassCond _iter606 : struct.extraPassConds)
          {
            _iter606.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.isSetNpcInitCheerVal()) {
        oprot.writeFieldBegin(NPC_INIT_CHEER_VAL_FIELD_DESC);
        oprot.writeI32(struct.npcInitCheerVal);
        oprot.writeFieldEnd();
      }
      if (struct.npcSkillIds != null) {
        if (struct.isSetNpcSkillIds()) {
          oprot.writeFieldBegin(NPC_SKILL_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.npcSkillIds.size()));
            for (int _iter607 : struct.npcSkillIds)
            {
              oprot.writeI32(_iter607);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DanceCheerInitInfoTupleSchemeFactory implements SchemeFactory {
    public DanceCheerInitInfoTupleScheme getScheme() {
      return new DanceCheerInitInfoTupleScheme();
    }
  }

  private static class DanceCheerInitInfoTupleScheme extends TupleScheme<DanceCheerInitInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DanceCheerInitInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRankCheerVals()) {
        optionals.set(0);
      }
      if (struct.isSetInitCheerVal()) {
        optionals.set(1);
      }
      if (struct.isSetExtraPassConds()) {
        optionals.set(2);
      }
      if (struct.isSetNpcInitCheerVal()) {
        optionals.set(3);
      }
      if (struct.isSetNpcSkillIds()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetRankCheerVals()) {
        {
          oprot.writeI32(struct.rankCheerVals.size());
          for (int _iter608 : struct.rankCheerVals)
          {
            oprot.writeI32(_iter608);
          }
        }
      }
      if (struct.isSetInitCheerVal()) {
        oprot.writeI32(struct.initCheerVal);
      }
      if (struct.isSetExtraPassConds()) {
        {
          oprot.writeI32(struct.extraPassConds.size());
          for (PassCond _iter609 : struct.extraPassConds)
          {
            _iter609.write(oprot);
          }
        }
      }
      if (struct.isSetNpcInitCheerVal()) {
        oprot.writeI32(struct.npcInitCheerVal);
      }
      if (struct.isSetNpcSkillIds()) {
        {
          oprot.writeI32(struct.npcSkillIds.size());
          for (int _iter610 : struct.npcSkillIds)
          {
            oprot.writeI32(_iter610);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DanceCheerInitInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list611 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.rankCheerVals = new ArrayList<Integer>(_list611.size);
          for (int _i612 = 0; _i612 < _list611.size; ++_i612)
          {
            int _elem613; // required
            _elem613 = iprot.readI32();
            struct.rankCheerVals.add(_elem613);
          }
        }
        struct.setRankCheerValsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.initCheerVal = iprot.readI32();
        struct.setInitCheerValIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list614 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.extraPassConds = new ArrayList<PassCond>(_list614.size);
          for (int _i615 = 0; _i615 < _list614.size; ++_i615)
          {
            PassCond _elem616; // required
            _elem616 = new PassCond();
            _elem616.read(iprot);
            struct.extraPassConds.add(_elem616);
          }
        }
        struct.setExtraPassCondsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.npcInitCheerVal = iprot.readI32();
        struct.setNpcInitCheerValIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list617 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.npcSkillIds = new ArrayList<Integer>(_list617.size);
          for (int _i618 = 0; _i618 < _list617.size; ++_i618)
          {
            int _elem619; // required
            _elem619 = iprot.readI32();
            struct.npcSkillIds.add(_elem619);
          }
        }
        struct.setNpcSkillIdsIsSet(true);
      }
    }
  }

}

