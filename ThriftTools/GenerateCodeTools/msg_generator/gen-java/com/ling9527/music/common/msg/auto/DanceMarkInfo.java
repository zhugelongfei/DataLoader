/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DanceMarkInfo implements org.apache.thrift.TBase<DanceMarkInfo, DanceMarkInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DanceMarkInfo");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MARK_FIELD_DESC = new org.apache.thrift.protocol.TField("mark", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField GRADE_FIELD_DESC = new org.apache.thrift.protocol.TField("grade", org.apache.thrift.protocol.TType.BYTE, (short)3);
  private static final org.apache.thrift.protocol.TField LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("location", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField LONGITUDE_FIELD_DESC = new org.apache.thrift.protocol.TField("longitude", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField LATITUDE_FIELD_DESC = new org.apache.thrift.protocol.TField("latitude", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField PERFECT_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("perfectCount", org.apache.thrift.protocol.TType.I16, (short)7);
  private static final org.apache.thrift.protocol.TField GREAT_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("greatCount", org.apache.thrift.protocol.TType.I16, (short)8);
  private static final org.apache.thrift.protocol.TField GOOD_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("goodCount", org.apache.thrift.protocol.TType.I16, (short)9);
  private static final org.apache.thrift.protocol.TField MISS_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("missCount", org.apache.thrift.protocol.TType.I16, (short)10);
  private static final org.apache.thrift.protocol.TField MAX_COMBO_FIELD_DESC = new org.apache.thrift.protocol.TField("maxCombo", org.apache.thrift.protocol.TType.I16, (short)11);
  private static final org.apache.thrift.protocol.TField MAX_PERFECT_COMBO_FIELD_DESC = new org.apache.thrift.protocol.TField("maxPerfectCombo", org.apache.thrift.protocol.TType.I16, (short)12);
  private static final org.apache.thrift.protocol.TField MASTER_PERFECT_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("masterPerfectCount", org.apache.thrift.protocol.TType.I16, (short)13);
  private static final org.apache.thrift.protocol.TField APPEND_MASTER_PERFECT_MARK_FIELD_DESC = new org.apache.thrift.protocol.TField("appendMasterPerfectMark", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField PLAYER_BASE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("playerBaseInfo", org.apache.thrift.protocol.TType.STRUCT, (short)15);
  private static final org.apache.thrift.protocol.TField RANK_FIELD_DESC = new org.apache.thrift.protocol.TField("rank", org.apache.thrift.protocol.TType.BYTE, (short)16);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DanceMarkInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DanceMarkInfoTupleSchemeFactory());
  }

  public String name; // required
  public int mark; // required
  public byte grade; // required
  public String location; // required
  public double longitude; // required
  public double latitude; // required
  public short perfectCount; // optional
  public short greatCount; // optional
  public short goodCount; // optional
  public short missCount; // optional
  public short maxCombo; // optional
  public short maxPerfectCombo; // optional
  public short masterPerfectCount; // required
  public int appendMasterPerfectMark; // required
  public PlayerBaseInfo playerBaseInfo; // required
  public byte rank; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    MARK((short)2, "mark"),
    GRADE((short)3, "grade"),
    LOCATION((short)4, "location"),
    LONGITUDE((short)5, "longitude"),
    LATITUDE((short)6, "latitude"),
    PERFECT_COUNT((short)7, "perfectCount"),
    GREAT_COUNT((short)8, "greatCount"),
    GOOD_COUNT((short)9, "goodCount"),
    MISS_COUNT((short)10, "missCount"),
    MAX_COMBO((short)11, "maxCombo"),
    MAX_PERFECT_COMBO((short)12, "maxPerfectCombo"),
    MASTER_PERFECT_COUNT((short)13, "masterPerfectCount"),
    APPEND_MASTER_PERFECT_MARK((short)14, "appendMasterPerfectMark"),
    PLAYER_BASE_INFO((short)15, "playerBaseInfo"),
    RANK((short)16, "rank");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // MARK
          return MARK;
        case 3: // GRADE
          return GRADE;
        case 4: // LOCATION
          return LOCATION;
        case 5: // LONGITUDE
          return LONGITUDE;
        case 6: // LATITUDE
          return LATITUDE;
        case 7: // PERFECT_COUNT
          return PERFECT_COUNT;
        case 8: // GREAT_COUNT
          return GREAT_COUNT;
        case 9: // GOOD_COUNT
          return GOOD_COUNT;
        case 10: // MISS_COUNT
          return MISS_COUNT;
        case 11: // MAX_COMBO
          return MAX_COMBO;
        case 12: // MAX_PERFECT_COMBO
          return MAX_PERFECT_COMBO;
        case 13: // MASTER_PERFECT_COUNT
          return MASTER_PERFECT_COUNT;
        case 14: // APPEND_MASTER_PERFECT_MARK
          return APPEND_MASTER_PERFECT_MARK;
        case 15: // PLAYER_BASE_INFO
          return PLAYER_BASE_INFO;
        case 16: // RANK
          return RANK;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MARK_ISSET_ID = 0;
  private static final int __GRADE_ISSET_ID = 1;
  private static final int __LONGITUDE_ISSET_ID = 2;
  private static final int __LATITUDE_ISSET_ID = 3;
  private static final int __PERFECTCOUNT_ISSET_ID = 4;
  private static final int __GREATCOUNT_ISSET_ID = 5;
  private static final int __GOODCOUNT_ISSET_ID = 6;
  private static final int __MISSCOUNT_ISSET_ID = 7;
  private static final int __MAXCOMBO_ISSET_ID = 8;
  private static final int __MAXPERFECTCOMBO_ISSET_ID = 9;
  private static final int __MASTERPERFECTCOUNT_ISSET_ID = 10;
  private static final int __APPENDMASTERPERFECTMARK_ISSET_ID = 11;
  private static final int __RANK_ISSET_ID = 12;
  private short __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.PERFECT_COUNT,_Fields.GREAT_COUNT,_Fields.GOOD_COUNT,_Fields.MISS_COUNT,_Fields.MAX_COMBO,_Fields.MAX_PERFECT_COMBO};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MARK, new org.apache.thrift.meta_data.FieldMetaData("mark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GRADE, new org.apache.thrift.meta_data.FieldMetaData("grade", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.LOCATION, new org.apache.thrift.meta_data.FieldMetaData("location", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LONGITUDE, new org.apache.thrift.meta_data.FieldMetaData("longitude", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LATITUDE, new org.apache.thrift.meta_data.FieldMetaData("latitude", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PERFECT_COUNT, new org.apache.thrift.meta_data.FieldMetaData("perfectCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.GREAT_COUNT, new org.apache.thrift.meta_data.FieldMetaData("greatCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.GOOD_COUNT, new org.apache.thrift.meta_data.FieldMetaData("goodCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.MISS_COUNT, new org.apache.thrift.meta_data.FieldMetaData("missCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.MAX_COMBO, new org.apache.thrift.meta_data.FieldMetaData("maxCombo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.MAX_PERFECT_COMBO, new org.apache.thrift.meta_data.FieldMetaData("maxPerfectCombo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.MASTER_PERFECT_COUNT, new org.apache.thrift.meta_data.FieldMetaData("masterPerfectCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.APPEND_MASTER_PERFECT_MARK, new org.apache.thrift.meta_data.FieldMetaData("appendMasterPerfectMark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PLAYER_BASE_INFO, new org.apache.thrift.meta_data.FieldMetaData("playerBaseInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PlayerBaseInfo.class)));
    tmpMap.put(_Fields.RANK, new org.apache.thrift.meta_data.FieldMetaData("rank", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DanceMarkInfo.class, metaDataMap);
  }

  public DanceMarkInfo() {
  }

  public DanceMarkInfo(
    String name,
    int mark,
    byte grade,
    String location,
    double longitude,
    double latitude,
    short masterPerfectCount,
    int appendMasterPerfectMark,
    PlayerBaseInfo playerBaseInfo,
    byte rank)
  {
    this();
    this.name = name;
    this.mark = mark;
    setMarkIsSet(true);
    this.grade = grade;
    setGradeIsSet(true);
    this.location = location;
    this.longitude = longitude;
    setLongitudeIsSet(true);
    this.latitude = latitude;
    setLatitudeIsSet(true);
    this.masterPerfectCount = masterPerfectCount;
    setMasterPerfectCountIsSet(true);
    this.appendMasterPerfectMark = appendMasterPerfectMark;
    setAppendMasterPerfectMarkIsSet(true);
    this.playerBaseInfo = playerBaseInfo;
    this.rank = rank;
    setRankIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DanceMarkInfo(DanceMarkInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.mark = other.mark;
    this.grade = other.grade;
    if (other.isSetLocation()) {
      this.location = other.location;
    }
    this.longitude = other.longitude;
    this.latitude = other.latitude;
    this.perfectCount = other.perfectCount;
    this.greatCount = other.greatCount;
    this.goodCount = other.goodCount;
    this.missCount = other.missCount;
    this.maxCombo = other.maxCombo;
    this.maxPerfectCombo = other.maxPerfectCombo;
    this.masterPerfectCount = other.masterPerfectCount;
    this.appendMasterPerfectMark = other.appendMasterPerfectMark;
    if (other.isSetPlayerBaseInfo()) {
      this.playerBaseInfo = new PlayerBaseInfo(other.playerBaseInfo);
    }
    this.rank = other.rank;
  }

  public DanceMarkInfo deepCopy() {
    return new DanceMarkInfo(this);
  }

  @Override
  public void clear() {
    this.name = null;
    setMarkIsSet(false);
    this.mark = 0;
    setGradeIsSet(false);
    this.grade = 0;
    this.location = null;
    setLongitudeIsSet(false);
    this.longitude = 0.0;
    setLatitudeIsSet(false);
    this.latitude = 0.0;
    setPerfectCountIsSet(false);
    this.perfectCount = 0;
    setGreatCountIsSet(false);
    this.greatCount = 0;
    setGoodCountIsSet(false);
    this.goodCount = 0;
    setMissCountIsSet(false);
    this.missCount = 0;
    setMaxComboIsSet(false);
    this.maxCombo = 0;
    setMaxPerfectComboIsSet(false);
    this.maxPerfectCombo = 0;
    setMasterPerfectCountIsSet(false);
    this.masterPerfectCount = 0;
    setAppendMasterPerfectMarkIsSet(false);
    this.appendMasterPerfectMark = 0;
    this.playerBaseInfo = null;
    setRankIsSet(false);
    this.rank = 0;
  }

  public String getName() {
    return this.name;
  }

  public DanceMarkInfo setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getMark() {
    return this.mark;
  }

  public DanceMarkInfo setMark(int mark) {
    this.mark = mark;
    setMarkIsSet(true);
    return this;
  }

  public void unsetMark() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MARK_ISSET_ID);
  }

  /** Returns true if field mark is set (has been assigned a value) and false otherwise */
  public boolean isSetMark() {
    return EncodingUtils.testBit(__isset_bitfield, __MARK_ISSET_ID);
  }

  public void setMarkIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MARK_ISSET_ID, value);
  }

  public byte getGrade() {
    return this.grade;
  }

  public DanceMarkInfo setGrade(byte grade) {
    this.grade = grade;
    setGradeIsSet(true);
    return this;
  }

  public void unsetGrade() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GRADE_ISSET_ID);
  }

  /** Returns true if field grade is set (has been assigned a value) and false otherwise */
  public boolean isSetGrade() {
    return EncodingUtils.testBit(__isset_bitfield, __GRADE_ISSET_ID);
  }

  public void setGradeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GRADE_ISSET_ID, value);
  }

  public String getLocation() {
    return this.location;
  }

  public DanceMarkInfo setLocation(String location) {
    this.location = location;
    return this;
  }

  public void unsetLocation() {
    this.location = null;
  }

  /** Returns true if field location is set (has been assigned a value) and false otherwise */
  public boolean isSetLocation() {
    return this.location != null;
  }

  public void setLocationIsSet(boolean value) {
    if (!value) {
      this.location = null;
    }
  }

  public double getLongitude() {
    return this.longitude;
  }

  public DanceMarkInfo setLongitude(double longitude) {
    this.longitude = longitude;
    setLongitudeIsSet(true);
    return this;
  }

  public void unsetLongitude() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LONGITUDE_ISSET_ID);
  }

  /** Returns true if field longitude is set (has been assigned a value) and false otherwise */
  public boolean isSetLongitude() {
    return EncodingUtils.testBit(__isset_bitfield, __LONGITUDE_ISSET_ID);
  }

  public void setLongitudeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LONGITUDE_ISSET_ID, value);
  }

  public double getLatitude() {
    return this.latitude;
  }

  public DanceMarkInfo setLatitude(double latitude) {
    this.latitude = latitude;
    setLatitudeIsSet(true);
    return this;
  }

  public void unsetLatitude() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LATITUDE_ISSET_ID);
  }

  /** Returns true if field latitude is set (has been assigned a value) and false otherwise */
  public boolean isSetLatitude() {
    return EncodingUtils.testBit(__isset_bitfield, __LATITUDE_ISSET_ID);
  }

  public void setLatitudeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LATITUDE_ISSET_ID, value);
  }

  public short getPerfectCount() {
    return this.perfectCount;
  }

  public DanceMarkInfo setPerfectCount(short perfectCount) {
    this.perfectCount = perfectCount;
    setPerfectCountIsSet(true);
    return this;
  }

  public void unsetPerfectCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PERFECTCOUNT_ISSET_ID);
  }

  /** Returns true if field perfectCount is set (has been assigned a value) and false otherwise */
  public boolean isSetPerfectCount() {
    return EncodingUtils.testBit(__isset_bitfield, __PERFECTCOUNT_ISSET_ID);
  }

  public void setPerfectCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PERFECTCOUNT_ISSET_ID, value);
  }

  public short getGreatCount() {
    return this.greatCount;
  }

  public DanceMarkInfo setGreatCount(short greatCount) {
    this.greatCount = greatCount;
    setGreatCountIsSet(true);
    return this;
  }

  public void unsetGreatCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GREATCOUNT_ISSET_ID);
  }

  /** Returns true if field greatCount is set (has been assigned a value) and false otherwise */
  public boolean isSetGreatCount() {
    return EncodingUtils.testBit(__isset_bitfield, __GREATCOUNT_ISSET_ID);
  }

  public void setGreatCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GREATCOUNT_ISSET_ID, value);
  }

  public short getGoodCount() {
    return this.goodCount;
  }

  public DanceMarkInfo setGoodCount(short goodCount) {
    this.goodCount = goodCount;
    setGoodCountIsSet(true);
    return this;
  }

  public void unsetGoodCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GOODCOUNT_ISSET_ID);
  }

  /** Returns true if field goodCount is set (has been assigned a value) and false otherwise */
  public boolean isSetGoodCount() {
    return EncodingUtils.testBit(__isset_bitfield, __GOODCOUNT_ISSET_ID);
  }

  public void setGoodCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GOODCOUNT_ISSET_ID, value);
  }

  public short getMissCount() {
    return this.missCount;
  }

  public DanceMarkInfo setMissCount(short missCount) {
    this.missCount = missCount;
    setMissCountIsSet(true);
    return this;
  }

  public void unsetMissCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MISSCOUNT_ISSET_ID);
  }

  /** Returns true if field missCount is set (has been assigned a value) and false otherwise */
  public boolean isSetMissCount() {
    return EncodingUtils.testBit(__isset_bitfield, __MISSCOUNT_ISSET_ID);
  }

  public void setMissCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MISSCOUNT_ISSET_ID, value);
  }

  public short getMaxCombo() {
    return this.maxCombo;
  }

  public DanceMarkInfo setMaxCombo(short maxCombo) {
    this.maxCombo = maxCombo;
    setMaxComboIsSet(true);
    return this;
  }

  public void unsetMaxCombo() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXCOMBO_ISSET_ID);
  }

  /** Returns true if field maxCombo is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxCombo() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXCOMBO_ISSET_ID);
  }

  public void setMaxComboIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXCOMBO_ISSET_ID, value);
  }

  public short getMaxPerfectCombo() {
    return this.maxPerfectCombo;
  }

  public DanceMarkInfo setMaxPerfectCombo(short maxPerfectCombo) {
    this.maxPerfectCombo = maxPerfectCombo;
    setMaxPerfectComboIsSet(true);
    return this;
  }

  public void unsetMaxPerfectCombo() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXPERFECTCOMBO_ISSET_ID);
  }

  /** Returns true if field maxPerfectCombo is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxPerfectCombo() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXPERFECTCOMBO_ISSET_ID);
  }

  public void setMaxPerfectComboIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXPERFECTCOMBO_ISSET_ID, value);
  }

  public short getMasterPerfectCount() {
    return this.masterPerfectCount;
  }

  public DanceMarkInfo setMasterPerfectCount(short masterPerfectCount) {
    this.masterPerfectCount = masterPerfectCount;
    setMasterPerfectCountIsSet(true);
    return this;
  }

  public void unsetMasterPerfectCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MASTERPERFECTCOUNT_ISSET_ID);
  }

  /** Returns true if field masterPerfectCount is set (has been assigned a value) and false otherwise */
  public boolean isSetMasterPerfectCount() {
    return EncodingUtils.testBit(__isset_bitfield, __MASTERPERFECTCOUNT_ISSET_ID);
  }

  public void setMasterPerfectCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MASTERPERFECTCOUNT_ISSET_ID, value);
  }

  public int getAppendMasterPerfectMark() {
    return this.appendMasterPerfectMark;
  }

  public DanceMarkInfo setAppendMasterPerfectMark(int appendMasterPerfectMark) {
    this.appendMasterPerfectMark = appendMasterPerfectMark;
    setAppendMasterPerfectMarkIsSet(true);
    return this;
  }

  public void unsetAppendMasterPerfectMark() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPENDMASTERPERFECTMARK_ISSET_ID);
  }

  /** Returns true if field appendMasterPerfectMark is set (has been assigned a value) and false otherwise */
  public boolean isSetAppendMasterPerfectMark() {
    return EncodingUtils.testBit(__isset_bitfield, __APPENDMASTERPERFECTMARK_ISSET_ID);
  }

  public void setAppendMasterPerfectMarkIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPENDMASTERPERFECTMARK_ISSET_ID, value);
  }

  public PlayerBaseInfo getPlayerBaseInfo() {
    return this.playerBaseInfo;
  }

  public DanceMarkInfo setPlayerBaseInfo(PlayerBaseInfo playerBaseInfo) {
    this.playerBaseInfo = playerBaseInfo;
    return this;
  }

  public void unsetPlayerBaseInfo() {
    this.playerBaseInfo = null;
  }

  /** Returns true if field playerBaseInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetPlayerBaseInfo() {
    return this.playerBaseInfo != null;
  }

  public void setPlayerBaseInfoIsSet(boolean value) {
    if (!value) {
      this.playerBaseInfo = null;
    }
  }

  public byte getRank() {
    return this.rank;
  }

  public DanceMarkInfo setRank(byte rank) {
    this.rank = rank;
    setRankIsSet(true);
    return this;
  }

  public void unsetRank() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RANK_ISSET_ID);
  }

  /** Returns true if field rank is set (has been assigned a value) and false otherwise */
  public boolean isSetRank() {
    return EncodingUtils.testBit(__isset_bitfield, __RANK_ISSET_ID);
  }

  public void setRankIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RANK_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case MARK:
      if (value == null) {
        unsetMark();
      } else {
        setMark((Integer)value);
      }
      break;

    case GRADE:
      if (value == null) {
        unsetGrade();
      } else {
        setGrade((Byte)value);
      }
      break;

    case LOCATION:
      if (value == null) {
        unsetLocation();
      } else {
        setLocation((String)value);
      }
      break;

    case LONGITUDE:
      if (value == null) {
        unsetLongitude();
      } else {
        setLongitude((Double)value);
      }
      break;

    case LATITUDE:
      if (value == null) {
        unsetLatitude();
      } else {
        setLatitude((Double)value);
      }
      break;

    case PERFECT_COUNT:
      if (value == null) {
        unsetPerfectCount();
      } else {
        setPerfectCount((Short)value);
      }
      break;

    case GREAT_COUNT:
      if (value == null) {
        unsetGreatCount();
      } else {
        setGreatCount((Short)value);
      }
      break;

    case GOOD_COUNT:
      if (value == null) {
        unsetGoodCount();
      } else {
        setGoodCount((Short)value);
      }
      break;

    case MISS_COUNT:
      if (value == null) {
        unsetMissCount();
      } else {
        setMissCount((Short)value);
      }
      break;

    case MAX_COMBO:
      if (value == null) {
        unsetMaxCombo();
      } else {
        setMaxCombo((Short)value);
      }
      break;

    case MAX_PERFECT_COMBO:
      if (value == null) {
        unsetMaxPerfectCombo();
      } else {
        setMaxPerfectCombo((Short)value);
      }
      break;

    case MASTER_PERFECT_COUNT:
      if (value == null) {
        unsetMasterPerfectCount();
      } else {
        setMasterPerfectCount((Short)value);
      }
      break;

    case APPEND_MASTER_PERFECT_MARK:
      if (value == null) {
        unsetAppendMasterPerfectMark();
      } else {
        setAppendMasterPerfectMark((Integer)value);
      }
      break;

    case PLAYER_BASE_INFO:
      if (value == null) {
        unsetPlayerBaseInfo();
      } else {
        setPlayerBaseInfo((PlayerBaseInfo)value);
      }
      break;

    case RANK:
      if (value == null) {
        unsetRank();
      } else {
        setRank((Byte)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case MARK:
      return Integer.valueOf(getMark());

    case GRADE:
      return Byte.valueOf(getGrade());

    case LOCATION:
      return getLocation();

    case LONGITUDE:
      return Double.valueOf(getLongitude());

    case LATITUDE:
      return Double.valueOf(getLatitude());

    case PERFECT_COUNT:
      return Short.valueOf(getPerfectCount());

    case GREAT_COUNT:
      return Short.valueOf(getGreatCount());

    case GOOD_COUNT:
      return Short.valueOf(getGoodCount());

    case MISS_COUNT:
      return Short.valueOf(getMissCount());

    case MAX_COMBO:
      return Short.valueOf(getMaxCombo());

    case MAX_PERFECT_COMBO:
      return Short.valueOf(getMaxPerfectCombo());

    case MASTER_PERFECT_COUNT:
      return Short.valueOf(getMasterPerfectCount());

    case APPEND_MASTER_PERFECT_MARK:
      return Integer.valueOf(getAppendMasterPerfectMark());

    case PLAYER_BASE_INFO:
      return getPlayerBaseInfo();

    case RANK:
      return Byte.valueOf(getRank());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case MARK:
      return isSetMark();
    case GRADE:
      return isSetGrade();
    case LOCATION:
      return isSetLocation();
    case LONGITUDE:
      return isSetLongitude();
    case LATITUDE:
      return isSetLatitude();
    case PERFECT_COUNT:
      return isSetPerfectCount();
    case GREAT_COUNT:
      return isSetGreatCount();
    case GOOD_COUNT:
      return isSetGoodCount();
    case MISS_COUNT:
      return isSetMissCount();
    case MAX_COMBO:
      return isSetMaxCombo();
    case MAX_PERFECT_COMBO:
      return isSetMaxPerfectCombo();
    case MASTER_PERFECT_COUNT:
      return isSetMasterPerfectCount();
    case APPEND_MASTER_PERFECT_MARK:
      return isSetAppendMasterPerfectMark();
    case PLAYER_BASE_INFO:
      return isSetPlayerBaseInfo();
    case RANK:
      return isSetRank();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DanceMarkInfo)
      return this.equals((DanceMarkInfo)that);
    return false;
  }

  public boolean equals(DanceMarkInfo that) {
    if (that == null)
      return false;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_mark = true;
    boolean that_present_mark = true;
    if (this_present_mark || that_present_mark) {
      if (!(this_present_mark && that_present_mark))
        return false;
      if (this.mark != that.mark)
        return false;
    }

    boolean this_present_grade = true;
    boolean that_present_grade = true;
    if (this_present_grade || that_present_grade) {
      if (!(this_present_grade && that_present_grade))
        return false;
      if (this.grade != that.grade)
        return false;
    }

    boolean this_present_location = true && this.isSetLocation();
    boolean that_present_location = true && that.isSetLocation();
    if (this_present_location || that_present_location) {
      if (!(this_present_location && that_present_location))
        return false;
      if (!this.location.equals(that.location))
        return false;
    }

    boolean this_present_longitude = true;
    boolean that_present_longitude = true;
    if (this_present_longitude || that_present_longitude) {
      if (!(this_present_longitude && that_present_longitude))
        return false;
      if (this.longitude != that.longitude)
        return false;
    }

    boolean this_present_latitude = true;
    boolean that_present_latitude = true;
    if (this_present_latitude || that_present_latitude) {
      if (!(this_present_latitude && that_present_latitude))
        return false;
      if (this.latitude != that.latitude)
        return false;
    }

    boolean this_present_perfectCount = true && this.isSetPerfectCount();
    boolean that_present_perfectCount = true && that.isSetPerfectCount();
    if (this_present_perfectCount || that_present_perfectCount) {
      if (!(this_present_perfectCount && that_present_perfectCount))
        return false;
      if (this.perfectCount != that.perfectCount)
        return false;
    }

    boolean this_present_greatCount = true && this.isSetGreatCount();
    boolean that_present_greatCount = true && that.isSetGreatCount();
    if (this_present_greatCount || that_present_greatCount) {
      if (!(this_present_greatCount && that_present_greatCount))
        return false;
      if (this.greatCount != that.greatCount)
        return false;
    }

    boolean this_present_goodCount = true && this.isSetGoodCount();
    boolean that_present_goodCount = true && that.isSetGoodCount();
    if (this_present_goodCount || that_present_goodCount) {
      if (!(this_present_goodCount && that_present_goodCount))
        return false;
      if (this.goodCount != that.goodCount)
        return false;
    }

    boolean this_present_missCount = true && this.isSetMissCount();
    boolean that_present_missCount = true && that.isSetMissCount();
    if (this_present_missCount || that_present_missCount) {
      if (!(this_present_missCount && that_present_missCount))
        return false;
      if (this.missCount != that.missCount)
        return false;
    }

    boolean this_present_maxCombo = true && this.isSetMaxCombo();
    boolean that_present_maxCombo = true && that.isSetMaxCombo();
    if (this_present_maxCombo || that_present_maxCombo) {
      if (!(this_present_maxCombo && that_present_maxCombo))
        return false;
      if (this.maxCombo != that.maxCombo)
        return false;
    }

    boolean this_present_maxPerfectCombo = true && this.isSetMaxPerfectCombo();
    boolean that_present_maxPerfectCombo = true && that.isSetMaxPerfectCombo();
    if (this_present_maxPerfectCombo || that_present_maxPerfectCombo) {
      if (!(this_present_maxPerfectCombo && that_present_maxPerfectCombo))
        return false;
      if (this.maxPerfectCombo != that.maxPerfectCombo)
        return false;
    }

    boolean this_present_masterPerfectCount = true;
    boolean that_present_masterPerfectCount = true;
    if (this_present_masterPerfectCount || that_present_masterPerfectCount) {
      if (!(this_present_masterPerfectCount && that_present_masterPerfectCount))
        return false;
      if (this.masterPerfectCount != that.masterPerfectCount)
        return false;
    }

    boolean this_present_appendMasterPerfectMark = true;
    boolean that_present_appendMasterPerfectMark = true;
    if (this_present_appendMasterPerfectMark || that_present_appendMasterPerfectMark) {
      if (!(this_present_appendMasterPerfectMark && that_present_appendMasterPerfectMark))
        return false;
      if (this.appendMasterPerfectMark != that.appendMasterPerfectMark)
        return false;
    }

    boolean this_present_playerBaseInfo = true && this.isSetPlayerBaseInfo();
    boolean that_present_playerBaseInfo = true && that.isSetPlayerBaseInfo();
    if (this_present_playerBaseInfo || that_present_playerBaseInfo) {
      if (!(this_present_playerBaseInfo && that_present_playerBaseInfo))
        return false;
      if (!this.playerBaseInfo.equals(that.playerBaseInfo))
        return false;
    }

    boolean this_present_rank = true;
    boolean that_present_rank = true;
    if (this_present_rank || that_present_rank) {
      if (!(this_present_rank && that_present_rank))
        return false;
      if (this.rank != that.rank)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(DanceMarkInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    DanceMarkInfo typedOther = (DanceMarkInfo)other;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMark()).compareTo(typedOther.isSetMark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mark, typedOther.mark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGrade()).compareTo(typedOther.isSetGrade());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGrade()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.grade, typedOther.grade);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocation()).compareTo(typedOther.isSetLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.location, typedOther.location);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLongitude()).compareTo(typedOther.isSetLongitude());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLongitude()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.longitude, typedOther.longitude);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLatitude()).compareTo(typedOther.isSetLatitude());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLatitude()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.latitude, typedOther.latitude);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPerfectCount()).compareTo(typedOther.isSetPerfectCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPerfectCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.perfectCount, typedOther.perfectCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGreatCount()).compareTo(typedOther.isSetGreatCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGreatCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.greatCount, typedOther.greatCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGoodCount()).compareTo(typedOther.isSetGoodCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGoodCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.goodCount, typedOther.goodCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMissCount()).compareTo(typedOther.isSetMissCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMissCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.missCount, typedOther.missCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxCombo()).compareTo(typedOther.isSetMaxCombo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxCombo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxCombo, typedOther.maxCombo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxPerfectCombo()).compareTo(typedOther.isSetMaxPerfectCombo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxPerfectCombo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxPerfectCombo, typedOther.maxPerfectCombo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMasterPerfectCount()).compareTo(typedOther.isSetMasterPerfectCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMasterPerfectCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.masterPerfectCount, typedOther.masterPerfectCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppendMasterPerfectMark()).compareTo(typedOther.isSetAppendMasterPerfectMark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppendMasterPerfectMark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appendMasterPerfectMark, typedOther.appendMasterPerfectMark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlayerBaseInfo()).compareTo(typedOther.isSetPlayerBaseInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlayerBaseInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.playerBaseInfo, typedOther.playerBaseInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRank()).compareTo(typedOther.isSetRank());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRank()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rank, typedOther.rank);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DanceMarkInfo(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mark:");
    sb.append(this.mark);
    first = false;
    if (!first) sb.append(", ");
    sb.append("grade:");
    sb.append(this.grade);
    first = false;
    if (!first) sb.append(", ");
    sb.append("location:");
    if (this.location == null) {
      sb.append("null");
    } else {
      sb.append(this.location);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("longitude:");
    sb.append(this.longitude);
    first = false;
    if (!first) sb.append(", ");
    sb.append("latitude:");
    sb.append(this.latitude);
    first = false;
    if (isSetPerfectCount()) {
      if (!first) sb.append(", ");
      sb.append("perfectCount:");
      sb.append(this.perfectCount);
      first = false;
    }
    if (isSetGreatCount()) {
      if (!first) sb.append(", ");
      sb.append("greatCount:");
      sb.append(this.greatCount);
      first = false;
    }
    if (isSetGoodCount()) {
      if (!first) sb.append(", ");
      sb.append("goodCount:");
      sb.append(this.goodCount);
      first = false;
    }
    if (isSetMissCount()) {
      if (!first) sb.append(", ");
      sb.append("missCount:");
      sb.append(this.missCount);
      first = false;
    }
    if (isSetMaxCombo()) {
      if (!first) sb.append(", ");
      sb.append("maxCombo:");
      sb.append(this.maxCombo);
      first = false;
    }
    if (isSetMaxPerfectCombo()) {
      if (!first) sb.append(", ");
      sb.append("maxPerfectCombo:");
      sb.append(this.maxPerfectCombo);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("masterPerfectCount:");
    sb.append(this.masterPerfectCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("appendMasterPerfectMark:");
    sb.append(this.appendMasterPerfectMark);
    first = false;
    if (!first) sb.append(", ");
    sb.append("playerBaseInfo:");
    if (this.playerBaseInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.playerBaseInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rank:");
    sb.append(this.rank);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (playerBaseInfo != null) {
      playerBaseInfo.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DanceMarkInfoStandardSchemeFactory implements SchemeFactory {
    public DanceMarkInfoStandardScheme getScheme() {
      return new DanceMarkInfoStandardScheme();
    }
  }

  private static class DanceMarkInfoStandardScheme extends StandardScheme<DanceMarkInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DanceMarkInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MARK
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mark = iprot.readI32();
              struct.setMarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // GRADE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.grade = iprot.readByte();
              struct.setGradeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.location = iprot.readString();
              struct.setLocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LONGITUDE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.longitude = iprot.readDouble();
              struct.setLongitudeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LATITUDE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.latitude = iprot.readDouble();
              struct.setLatitudeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PERFECT_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.perfectCount = iprot.readI16();
              struct.setPerfectCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // GREAT_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.greatCount = iprot.readI16();
              struct.setGreatCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // GOOD_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.goodCount = iprot.readI16();
              struct.setGoodCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MISS_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.missCount = iprot.readI16();
              struct.setMissCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MAX_COMBO
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.maxCombo = iprot.readI16();
              struct.setMaxComboIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // MAX_PERFECT_COMBO
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.maxPerfectCombo = iprot.readI16();
              struct.setMaxPerfectComboIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // MASTER_PERFECT_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.masterPerfectCount = iprot.readI16();
              struct.setMasterPerfectCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // APPEND_MASTER_PERFECT_MARK
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.appendMasterPerfectMark = iprot.readI32();
              struct.setAppendMasterPerfectMarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // PLAYER_BASE_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.playerBaseInfo = new PlayerBaseInfo();
              struct.playerBaseInfo.read(iprot);
              struct.setPlayerBaseInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // RANK
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.rank = iprot.readByte();
              struct.setRankIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DanceMarkInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MARK_FIELD_DESC);
      oprot.writeI32(struct.mark);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GRADE_FIELD_DESC);
      oprot.writeByte(struct.grade);
      oprot.writeFieldEnd();
      if (struct.location != null) {
        oprot.writeFieldBegin(LOCATION_FIELD_DESC);
        oprot.writeString(struct.location);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LONGITUDE_FIELD_DESC);
      oprot.writeDouble(struct.longitude);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LATITUDE_FIELD_DESC);
      oprot.writeDouble(struct.latitude);
      oprot.writeFieldEnd();
      if (struct.isSetPerfectCount()) {
        oprot.writeFieldBegin(PERFECT_COUNT_FIELD_DESC);
        oprot.writeI16(struct.perfectCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetGreatCount()) {
        oprot.writeFieldBegin(GREAT_COUNT_FIELD_DESC);
        oprot.writeI16(struct.greatCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetGoodCount()) {
        oprot.writeFieldBegin(GOOD_COUNT_FIELD_DESC);
        oprot.writeI16(struct.goodCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMissCount()) {
        oprot.writeFieldBegin(MISS_COUNT_FIELD_DESC);
        oprot.writeI16(struct.missCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMaxCombo()) {
        oprot.writeFieldBegin(MAX_COMBO_FIELD_DESC);
        oprot.writeI16(struct.maxCombo);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMaxPerfectCombo()) {
        oprot.writeFieldBegin(MAX_PERFECT_COMBO_FIELD_DESC);
        oprot.writeI16(struct.maxPerfectCombo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MASTER_PERFECT_COUNT_FIELD_DESC);
      oprot.writeI16(struct.masterPerfectCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(APPEND_MASTER_PERFECT_MARK_FIELD_DESC);
      oprot.writeI32(struct.appendMasterPerfectMark);
      oprot.writeFieldEnd();
      if (struct.playerBaseInfo != null) {
        oprot.writeFieldBegin(PLAYER_BASE_INFO_FIELD_DESC);
        struct.playerBaseInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RANK_FIELD_DESC);
      oprot.writeByte(struct.rank);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DanceMarkInfoTupleSchemeFactory implements SchemeFactory {
    public DanceMarkInfoTupleScheme getScheme() {
      return new DanceMarkInfoTupleScheme();
    }
  }

  private static class DanceMarkInfoTupleScheme extends TupleScheme<DanceMarkInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DanceMarkInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetMark()) {
        optionals.set(1);
      }
      if (struct.isSetGrade()) {
        optionals.set(2);
      }
      if (struct.isSetLocation()) {
        optionals.set(3);
      }
      if (struct.isSetLongitude()) {
        optionals.set(4);
      }
      if (struct.isSetLatitude()) {
        optionals.set(5);
      }
      if (struct.isSetPerfectCount()) {
        optionals.set(6);
      }
      if (struct.isSetGreatCount()) {
        optionals.set(7);
      }
      if (struct.isSetGoodCount()) {
        optionals.set(8);
      }
      if (struct.isSetMissCount()) {
        optionals.set(9);
      }
      if (struct.isSetMaxCombo()) {
        optionals.set(10);
      }
      if (struct.isSetMaxPerfectCombo()) {
        optionals.set(11);
      }
      if (struct.isSetMasterPerfectCount()) {
        optionals.set(12);
      }
      if (struct.isSetAppendMasterPerfectMark()) {
        optionals.set(13);
      }
      if (struct.isSetPlayerBaseInfo()) {
        optionals.set(14);
      }
      if (struct.isSetRank()) {
        optionals.set(15);
      }
      oprot.writeBitSet(optionals, 16);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetMark()) {
        oprot.writeI32(struct.mark);
      }
      if (struct.isSetGrade()) {
        oprot.writeByte(struct.grade);
      }
      if (struct.isSetLocation()) {
        oprot.writeString(struct.location);
      }
      if (struct.isSetLongitude()) {
        oprot.writeDouble(struct.longitude);
      }
      if (struct.isSetLatitude()) {
        oprot.writeDouble(struct.latitude);
      }
      if (struct.isSetPerfectCount()) {
        oprot.writeI16(struct.perfectCount);
      }
      if (struct.isSetGreatCount()) {
        oprot.writeI16(struct.greatCount);
      }
      if (struct.isSetGoodCount()) {
        oprot.writeI16(struct.goodCount);
      }
      if (struct.isSetMissCount()) {
        oprot.writeI16(struct.missCount);
      }
      if (struct.isSetMaxCombo()) {
        oprot.writeI16(struct.maxCombo);
      }
      if (struct.isSetMaxPerfectCombo()) {
        oprot.writeI16(struct.maxPerfectCombo);
      }
      if (struct.isSetMasterPerfectCount()) {
        oprot.writeI16(struct.masterPerfectCount);
      }
      if (struct.isSetAppendMasterPerfectMark()) {
        oprot.writeI32(struct.appendMasterPerfectMark);
      }
      if (struct.isSetPlayerBaseInfo()) {
        struct.playerBaseInfo.write(oprot);
      }
      if (struct.isSetRank()) {
        oprot.writeByte(struct.rank);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DanceMarkInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(16);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.mark = iprot.readI32();
        struct.setMarkIsSet(true);
      }
      if (incoming.get(2)) {
        struct.grade = iprot.readByte();
        struct.setGradeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.location = iprot.readString();
        struct.setLocationIsSet(true);
      }
      if (incoming.get(4)) {
        struct.longitude = iprot.readDouble();
        struct.setLongitudeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.latitude = iprot.readDouble();
        struct.setLatitudeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.perfectCount = iprot.readI16();
        struct.setPerfectCountIsSet(true);
      }
      if (incoming.get(7)) {
        struct.greatCount = iprot.readI16();
        struct.setGreatCountIsSet(true);
      }
      if (incoming.get(8)) {
        struct.goodCount = iprot.readI16();
        struct.setGoodCountIsSet(true);
      }
      if (incoming.get(9)) {
        struct.missCount = iprot.readI16();
        struct.setMissCountIsSet(true);
      }
      if (incoming.get(10)) {
        struct.maxCombo = iprot.readI16();
        struct.setMaxComboIsSet(true);
      }
      if (incoming.get(11)) {
        struct.maxPerfectCombo = iprot.readI16();
        struct.setMaxPerfectComboIsSet(true);
      }
      if (incoming.get(12)) {
        struct.masterPerfectCount = iprot.readI16();
        struct.setMasterPerfectCountIsSet(true);
      }
      if (incoming.get(13)) {
        struct.appendMasterPerfectMark = iprot.readI32();
        struct.setAppendMasterPerfectMarkIsSet(true);
      }
      if (incoming.get(14)) {
        struct.playerBaseInfo = new PlayerBaseInfo();
        struct.playerBaseInfo.read(iprot);
        struct.setPlayerBaseInfoIsSet(true);
      }
      if (incoming.get(15)) {
        struct.rank = iprot.readByte();
        struct.setRankIsSet(true);
      }
    }
  }

}

