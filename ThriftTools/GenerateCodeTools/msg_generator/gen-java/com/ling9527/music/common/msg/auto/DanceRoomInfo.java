/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 舞蹈房间信息
 */
public class DanceRoomInfo implements org.apache.thrift.TBase<DanceRoomInfo, DanceRoomInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DanceRoomInfo");

  private static final org.apache.thrift.protocol.TField LOCK_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("lockState", org.apache.thrift.protocol.TType.BYTE, (short)1);
  private static final org.apache.thrift.protocol.TField MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("mode", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField MEMBER_SEX_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("memberSexInfo", org.apache.thrift.protocol.TType.BYTE, (short)3);
  private static final org.apache.thrift.protocol.TField ROOM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("roomId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField WATCH_FIELD_DESC = new org.apache.thrift.protocol.TField("watch", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField CUR_DANCE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("curDanceSize", org.apache.thrift.protocol.TType.I16, (short)7);
  private static final org.apache.thrift.protocol.TField CUR_WATCH_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("curWatchSize", org.apache.thrift.protocol.TType.I16, (short)8);
  private static final org.apache.thrift.protocol.TField SONG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("songId", org.apache.thrift.protocol.TType.I16, (short)9);
  private static final org.apache.thrift.protocol.TField LVL_FIELD_DESC = new org.apache.thrift.protocol.TField("lvl", org.apache.thrift.protocol.TType.BYTE, (short)10);
  private static final org.apache.thrift.protocol.TField LEADER_BASE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("leaderBaseInfo", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField MAX_WATCH_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("maxWatchSize", org.apache.thrift.protocol.TType.I16, (short)13);
  private static final org.apache.thrift.protocol.TField ROOM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("roomType", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField IS_STICK_FIELD_DESC = new org.apache.thrift.protocol.TField("isStick", org.apache.thrift.protocol.TType.BOOL, (short)15);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DanceRoomInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DanceRoomInfoTupleSchemeFactory());
  }

  public byte lockState; // required
  public byte mode; // required
  public byte memberSexInfo; // required
  public int roomId; // required
  public String title; // required
  public boolean watch; // required
  public short curDanceSize; // required
  public short curWatchSize; // required
  public short songId; // required
  public byte lvl; // required
  public PlayerBaseInfo leaderBaseInfo; // required
  /**
   * 
   * @see RoomState
   */
  public RoomState state; // required
  public short maxWatchSize; // required
  /**
   * 
   * @see CreateRoomType
   */
  public CreateRoomType roomType; // required
  public boolean isStick; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LOCK_STATE((short)1, "lockState"),
    MODE((short)2, "mode"),
    MEMBER_SEX_INFO((short)3, "memberSexInfo"),
    ROOM_ID((short)4, "roomId"),
    TITLE((short)5, "title"),
    WATCH((short)6, "watch"),
    CUR_DANCE_SIZE((short)7, "curDanceSize"),
    CUR_WATCH_SIZE((short)8, "curWatchSize"),
    SONG_ID((short)9, "songId"),
    LVL((short)10, "lvl"),
    LEADER_BASE_INFO((short)11, "leaderBaseInfo"),
    /**
     * 
     * @see RoomState
     */
    STATE((short)12, "state"),
    MAX_WATCH_SIZE((short)13, "maxWatchSize"),
    /**
     * 
     * @see CreateRoomType
     */
    ROOM_TYPE((short)14, "roomType"),
    IS_STICK((short)15, "isStick");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LOCK_STATE
          return LOCK_STATE;
        case 2: // MODE
          return MODE;
        case 3: // MEMBER_SEX_INFO
          return MEMBER_SEX_INFO;
        case 4: // ROOM_ID
          return ROOM_ID;
        case 5: // TITLE
          return TITLE;
        case 6: // WATCH
          return WATCH;
        case 7: // CUR_DANCE_SIZE
          return CUR_DANCE_SIZE;
        case 8: // CUR_WATCH_SIZE
          return CUR_WATCH_SIZE;
        case 9: // SONG_ID
          return SONG_ID;
        case 10: // LVL
          return LVL;
        case 11: // LEADER_BASE_INFO
          return LEADER_BASE_INFO;
        case 12: // STATE
          return STATE;
        case 13: // MAX_WATCH_SIZE
          return MAX_WATCH_SIZE;
        case 14: // ROOM_TYPE
          return ROOM_TYPE;
        case 15: // IS_STICK
          return IS_STICK;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LOCKSTATE_ISSET_ID = 0;
  private static final int __MODE_ISSET_ID = 1;
  private static final int __MEMBERSEXINFO_ISSET_ID = 2;
  private static final int __ROOMID_ISSET_ID = 3;
  private static final int __WATCH_ISSET_ID = 4;
  private static final int __CURDANCESIZE_ISSET_ID = 5;
  private static final int __CURWATCHSIZE_ISSET_ID = 6;
  private static final int __SONGID_ISSET_ID = 7;
  private static final int __LVL_ISSET_ID = 8;
  private static final int __MAXWATCHSIZE_ISSET_ID = 9;
  private static final int __ISSTICK_ISSET_ID = 10;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LOCK_STATE, new org.apache.thrift.meta_data.FieldMetaData("lockState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.MODE, new org.apache.thrift.meta_data.FieldMetaData("mode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.MEMBER_SEX_INFO, new org.apache.thrift.meta_data.FieldMetaData("memberSexInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.ROOM_ID, new org.apache.thrift.meta_data.FieldMetaData("roomId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WATCH, new org.apache.thrift.meta_data.FieldMetaData("watch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CUR_DANCE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("curDanceSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.CUR_WATCH_SIZE, new org.apache.thrift.meta_data.FieldMetaData("curWatchSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.SONG_ID, new org.apache.thrift.meta_data.FieldMetaData("songId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.LVL, new org.apache.thrift.meta_data.FieldMetaData("lvl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.LEADER_BASE_INFO, new org.apache.thrift.meta_data.FieldMetaData("leaderBaseInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PlayerBaseInfo.class)));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, RoomState.class)));
    tmpMap.put(_Fields.MAX_WATCH_SIZE, new org.apache.thrift.meta_data.FieldMetaData("maxWatchSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.ROOM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("roomType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CreateRoomType.class)));
    tmpMap.put(_Fields.IS_STICK, new org.apache.thrift.meta_data.FieldMetaData("isStick", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DanceRoomInfo.class, metaDataMap);
  }

  public DanceRoomInfo() {
  }

  public DanceRoomInfo(
    byte lockState,
    byte mode,
    byte memberSexInfo,
    int roomId,
    String title,
    boolean watch,
    short curDanceSize,
    short curWatchSize,
    short songId,
    byte lvl,
    PlayerBaseInfo leaderBaseInfo,
    RoomState state,
    short maxWatchSize,
    CreateRoomType roomType,
    boolean isStick)
  {
    this();
    this.lockState = lockState;
    setLockStateIsSet(true);
    this.mode = mode;
    setModeIsSet(true);
    this.memberSexInfo = memberSexInfo;
    setMemberSexInfoIsSet(true);
    this.roomId = roomId;
    setRoomIdIsSet(true);
    this.title = title;
    this.watch = watch;
    setWatchIsSet(true);
    this.curDanceSize = curDanceSize;
    setCurDanceSizeIsSet(true);
    this.curWatchSize = curWatchSize;
    setCurWatchSizeIsSet(true);
    this.songId = songId;
    setSongIdIsSet(true);
    this.lvl = lvl;
    setLvlIsSet(true);
    this.leaderBaseInfo = leaderBaseInfo;
    this.state = state;
    this.maxWatchSize = maxWatchSize;
    setMaxWatchSizeIsSet(true);
    this.roomType = roomType;
    this.isStick = isStick;
    setIsStickIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DanceRoomInfo(DanceRoomInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.lockState = other.lockState;
    this.mode = other.mode;
    this.memberSexInfo = other.memberSexInfo;
    this.roomId = other.roomId;
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    this.watch = other.watch;
    this.curDanceSize = other.curDanceSize;
    this.curWatchSize = other.curWatchSize;
    this.songId = other.songId;
    this.lvl = other.lvl;
    if (other.isSetLeaderBaseInfo()) {
      this.leaderBaseInfo = new PlayerBaseInfo(other.leaderBaseInfo);
    }
    if (other.isSetState()) {
      this.state = other.state;
    }
    this.maxWatchSize = other.maxWatchSize;
    if (other.isSetRoomType()) {
      this.roomType = other.roomType;
    }
    this.isStick = other.isStick;
  }

  public DanceRoomInfo deepCopy() {
    return new DanceRoomInfo(this);
  }

  @Override
  public void clear() {
    setLockStateIsSet(false);
    this.lockState = 0;
    setModeIsSet(false);
    this.mode = 0;
    setMemberSexInfoIsSet(false);
    this.memberSexInfo = 0;
    setRoomIdIsSet(false);
    this.roomId = 0;
    this.title = null;
    setWatchIsSet(false);
    this.watch = false;
    setCurDanceSizeIsSet(false);
    this.curDanceSize = 0;
    setCurWatchSizeIsSet(false);
    this.curWatchSize = 0;
    setSongIdIsSet(false);
    this.songId = 0;
    setLvlIsSet(false);
    this.lvl = 0;
    this.leaderBaseInfo = null;
    this.state = null;
    setMaxWatchSizeIsSet(false);
    this.maxWatchSize = 0;
    this.roomType = null;
    setIsStickIsSet(false);
    this.isStick = false;
  }

  public byte getLockState() {
    return this.lockState;
  }

  public DanceRoomInfo setLockState(byte lockState) {
    this.lockState = lockState;
    setLockStateIsSet(true);
    return this;
  }

  public void unsetLockState() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOCKSTATE_ISSET_ID);
  }

  /** Returns true if field lockState is set (has been assigned a value) and false otherwise */
  public boolean isSetLockState() {
    return EncodingUtils.testBit(__isset_bitfield, __LOCKSTATE_ISSET_ID);
  }

  public void setLockStateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOCKSTATE_ISSET_ID, value);
  }

  public byte getMode() {
    return this.mode;
  }

  public DanceRoomInfo setMode(byte mode) {
    this.mode = mode;
    setModeIsSet(true);
    return this;
  }

  public void unsetMode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MODE_ISSET_ID);
  }

  /** Returns true if field mode is set (has been assigned a value) and false otherwise */
  public boolean isSetMode() {
    return EncodingUtils.testBit(__isset_bitfield, __MODE_ISSET_ID);
  }

  public void setModeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MODE_ISSET_ID, value);
  }

  public byte getMemberSexInfo() {
    return this.memberSexInfo;
  }

  public DanceRoomInfo setMemberSexInfo(byte memberSexInfo) {
    this.memberSexInfo = memberSexInfo;
    setMemberSexInfoIsSet(true);
    return this;
  }

  public void unsetMemberSexInfo() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMBERSEXINFO_ISSET_ID);
  }

  /** Returns true if field memberSexInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetMemberSexInfo() {
    return EncodingUtils.testBit(__isset_bitfield, __MEMBERSEXINFO_ISSET_ID);
  }

  public void setMemberSexInfoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMBERSEXINFO_ISSET_ID, value);
  }

  public int getRoomId() {
    return this.roomId;
  }

  public DanceRoomInfo setRoomId(int roomId) {
    this.roomId = roomId;
    setRoomIdIsSet(true);
    return this;
  }

  public void unsetRoomId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROOMID_ISSET_ID);
  }

  /** Returns true if field roomId is set (has been assigned a value) and false otherwise */
  public boolean isSetRoomId() {
    return EncodingUtils.testBit(__isset_bitfield, __ROOMID_ISSET_ID);
  }

  public void setRoomIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROOMID_ISSET_ID, value);
  }

  public String getTitle() {
    return this.title;
  }

  public DanceRoomInfo setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public boolean isWatch() {
    return this.watch;
  }

  public DanceRoomInfo setWatch(boolean watch) {
    this.watch = watch;
    setWatchIsSet(true);
    return this;
  }

  public void unsetWatch() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WATCH_ISSET_ID);
  }

  /** Returns true if field watch is set (has been assigned a value) and false otherwise */
  public boolean isSetWatch() {
    return EncodingUtils.testBit(__isset_bitfield, __WATCH_ISSET_ID);
  }

  public void setWatchIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WATCH_ISSET_ID, value);
  }

  public short getCurDanceSize() {
    return this.curDanceSize;
  }

  public DanceRoomInfo setCurDanceSize(short curDanceSize) {
    this.curDanceSize = curDanceSize;
    setCurDanceSizeIsSet(true);
    return this;
  }

  public void unsetCurDanceSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURDANCESIZE_ISSET_ID);
  }

  /** Returns true if field curDanceSize is set (has been assigned a value) and false otherwise */
  public boolean isSetCurDanceSize() {
    return EncodingUtils.testBit(__isset_bitfield, __CURDANCESIZE_ISSET_ID);
  }

  public void setCurDanceSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURDANCESIZE_ISSET_ID, value);
  }

  public short getCurWatchSize() {
    return this.curWatchSize;
  }

  public DanceRoomInfo setCurWatchSize(short curWatchSize) {
    this.curWatchSize = curWatchSize;
    setCurWatchSizeIsSet(true);
    return this;
  }

  public void unsetCurWatchSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURWATCHSIZE_ISSET_ID);
  }

  /** Returns true if field curWatchSize is set (has been assigned a value) and false otherwise */
  public boolean isSetCurWatchSize() {
    return EncodingUtils.testBit(__isset_bitfield, __CURWATCHSIZE_ISSET_ID);
  }

  public void setCurWatchSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURWATCHSIZE_ISSET_ID, value);
  }

  public short getSongId() {
    return this.songId;
  }

  public DanceRoomInfo setSongId(short songId) {
    this.songId = songId;
    setSongIdIsSet(true);
    return this;
  }

  public void unsetSongId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SONGID_ISSET_ID);
  }

  /** Returns true if field songId is set (has been assigned a value) and false otherwise */
  public boolean isSetSongId() {
    return EncodingUtils.testBit(__isset_bitfield, __SONGID_ISSET_ID);
  }

  public void setSongIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SONGID_ISSET_ID, value);
  }

  public byte getLvl() {
    return this.lvl;
  }

  public DanceRoomInfo setLvl(byte lvl) {
    this.lvl = lvl;
    setLvlIsSet(true);
    return this;
  }

  public void unsetLvl() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LVL_ISSET_ID);
  }

  /** Returns true if field lvl is set (has been assigned a value) and false otherwise */
  public boolean isSetLvl() {
    return EncodingUtils.testBit(__isset_bitfield, __LVL_ISSET_ID);
  }

  public void setLvlIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LVL_ISSET_ID, value);
  }

  public PlayerBaseInfo getLeaderBaseInfo() {
    return this.leaderBaseInfo;
  }

  public DanceRoomInfo setLeaderBaseInfo(PlayerBaseInfo leaderBaseInfo) {
    this.leaderBaseInfo = leaderBaseInfo;
    return this;
  }

  public void unsetLeaderBaseInfo() {
    this.leaderBaseInfo = null;
  }

  /** Returns true if field leaderBaseInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetLeaderBaseInfo() {
    return this.leaderBaseInfo != null;
  }

  public void setLeaderBaseInfoIsSet(boolean value) {
    if (!value) {
      this.leaderBaseInfo = null;
    }
  }

  /**
   * 
   * @see RoomState
   */
  public RoomState getState() {
    return this.state;
  }

  /**
   * 
   * @see RoomState
   */
  public DanceRoomInfo setState(RoomState state) {
    this.state = state;
    return this;
  }

  public void unsetState() {
    this.state = null;
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return this.state != null;
  }

  public void setStateIsSet(boolean value) {
    if (!value) {
      this.state = null;
    }
  }

  public short getMaxWatchSize() {
    return this.maxWatchSize;
  }

  public DanceRoomInfo setMaxWatchSize(short maxWatchSize) {
    this.maxWatchSize = maxWatchSize;
    setMaxWatchSizeIsSet(true);
    return this;
  }

  public void unsetMaxWatchSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXWATCHSIZE_ISSET_ID);
  }

  /** Returns true if field maxWatchSize is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxWatchSize() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXWATCHSIZE_ISSET_ID);
  }

  public void setMaxWatchSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXWATCHSIZE_ISSET_ID, value);
  }

  /**
   * 
   * @see CreateRoomType
   */
  public CreateRoomType getRoomType() {
    return this.roomType;
  }

  /**
   * 
   * @see CreateRoomType
   */
  public DanceRoomInfo setRoomType(CreateRoomType roomType) {
    this.roomType = roomType;
    return this;
  }

  public void unsetRoomType() {
    this.roomType = null;
  }

  /** Returns true if field roomType is set (has been assigned a value) and false otherwise */
  public boolean isSetRoomType() {
    return this.roomType != null;
  }

  public void setRoomTypeIsSet(boolean value) {
    if (!value) {
      this.roomType = null;
    }
  }

  public boolean isIsStick() {
    return this.isStick;
  }

  public DanceRoomInfo setIsStick(boolean isStick) {
    this.isStick = isStick;
    setIsStickIsSet(true);
    return this;
  }

  public void unsetIsStick() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISSTICK_ISSET_ID);
  }

  /** Returns true if field isStick is set (has been assigned a value) and false otherwise */
  public boolean isSetIsStick() {
    return EncodingUtils.testBit(__isset_bitfield, __ISSTICK_ISSET_ID);
  }

  public void setIsStickIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISSTICK_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LOCK_STATE:
      if (value == null) {
        unsetLockState();
      } else {
        setLockState((Byte)value);
      }
      break;

    case MODE:
      if (value == null) {
        unsetMode();
      } else {
        setMode((Byte)value);
      }
      break;

    case MEMBER_SEX_INFO:
      if (value == null) {
        unsetMemberSexInfo();
      } else {
        setMemberSexInfo((Byte)value);
      }
      break;

    case ROOM_ID:
      if (value == null) {
        unsetRoomId();
      } else {
        setRoomId((Integer)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case WATCH:
      if (value == null) {
        unsetWatch();
      } else {
        setWatch((Boolean)value);
      }
      break;

    case CUR_DANCE_SIZE:
      if (value == null) {
        unsetCurDanceSize();
      } else {
        setCurDanceSize((Short)value);
      }
      break;

    case CUR_WATCH_SIZE:
      if (value == null) {
        unsetCurWatchSize();
      } else {
        setCurWatchSize((Short)value);
      }
      break;

    case SONG_ID:
      if (value == null) {
        unsetSongId();
      } else {
        setSongId((Short)value);
      }
      break;

    case LVL:
      if (value == null) {
        unsetLvl();
      } else {
        setLvl((Byte)value);
      }
      break;

    case LEADER_BASE_INFO:
      if (value == null) {
        unsetLeaderBaseInfo();
      } else {
        setLeaderBaseInfo((PlayerBaseInfo)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((RoomState)value);
      }
      break;

    case MAX_WATCH_SIZE:
      if (value == null) {
        unsetMaxWatchSize();
      } else {
        setMaxWatchSize((Short)value);
      }
      break;

    case ROOM_TYPE:
      if (value == null) {
        unsetRoomType();
      } else {
        setRoomType((CreateRoomType)value);
      }
      break;

    case IS_STICK:
      if (value == null) {
        unsetIsStick();
      } else {
        setIsStick((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LOCK_STATE:
      return Byte.valueOf(getLockState());

    case MODE:
      return Byte.valueOf(getMode());

    case MEMBER_SEX_INFO:
      return Byte.valueOf(getMemberSexInfo());

    case ROOM_ID:
      return Integer.valueOf(getRoomId());

    case TITLE:
      return getTitle();

    case WATCH:
      return Boolean.valueOf(isWatch());

    case CUR_DANCE_SIZE:
      return Short.valueOf(getCurDanceSize());

    case CUR_WATCH_SIZE:
      return Short.valueOf(getCurWatchSize());

    case SONG_ID:
      return Short.valueOf(getSongId());

    case LVL:
      return Byte.valueOf(getLvl());

    case LEADER_BASE_INFO:
      return getLeaderBaseInfo();

    case STATE:
      return getState();

    case MAX_WATCH_SIZE:
      return Short.valueOf(getMaxWatchSize());

    case ROOM_TYPE:
      return getRoomType();

    case IS_STICK:
      return Boolean.valueOf(isIsStick());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LOCK_STATE:
      return isSetLockState();
    case MODE:
      return isSetMode();
    case MEMBER_SEX_INFO:
      return isSetMemberSexInfo();
    case ROOM_ID:
      return isSetRoomId();
    case TITLE:
      return isSetTitle();
    case WATCH:
      return isSetWatch();
    case CUR_DANCE_SIZE:
      return isSetCurDanceSize();
    case CUR_WATCH_SIZE:
      return isSetCurWatchSize();
    case SONG_ID:
      return isSetSongId();
    case LVL:
      return isSetLvl();
    case LEADER_BASE_INFO:
      return isSetLeaderBaseInfo();
    case STATE:
      return isSetState();
    case MAX_WATCH_SIZE:
      return isSetMaxWatchSize();
    case ROOM_TYPE:
      return isSetRoomType();
    case IS_STICK:
      return isSetIsStick();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DanceRoomInfo)
      return this.equals((DanceRoomInfo)that);
    return false;
  }

  public boolean equals(DanceRoomInfo that) {
    if (that == null)
      return false;

    boolean this_present_lockState = true;
    boolean that_present_lockState = true;
    if (this_present_lockState || that_present_lockState) {
      if (!(this_present_lockState && that_present_lockState))
        return false;
      if (this.lockState != that.lockState)
        return false;
    }

    boolean this_present_mode = true;
    boolean that_present_mode = true;
    if (this_present_mode || that_present_mode) {
      if (!(this_present_mode && that_present_mode))
        return false;
      if (this.mode != that.mode)
        return false;
    }

    boolean this_present_memberSexInfo = true;
    boolean that_present_memberSexInfo = true;
    if (this_present_memberSexInfo || that_present_memberSexInfo) {
      if (!(this_present_memberSexInfo && that_present_memberSexInfo))
        return false;
      if (this.memberSexInfo != that.memberSexInfo)
        return false;
    }

    boolean this_present_roomId = true;
    boolean that_present_roomId = true;
    if (this_present_roomId || that_present_roomId) {
      if (!(this_present_roomId && that_present_roomId))
        return false;
      if (this.roomId != that.roomId)
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_watch = true;
    boolean that_present_watch = true;
    if (this_present_watch || that_present_watch) {
      if (!(this_present_watch && that_present_watch))
        return false;
      if (this.watch != that.watch)
        return false;
    }

    boolean this_present_curDanceSize = true;
    boolean that_present_curDanceSize = true;
    if (this_present_curDanceSize || that_present_curDanceSize) {
      if (!(this_present_curDanceSize && that_present_curDanceSize))
        return false;
      if (this.curDanceSize != that.curDanceSize)
        return false;
    }

    boolean this_present_curWatchSize = true;
    boolean that_present_curWatchSize = true;
    if (this_present_curWatchSize || that_present_curWatchSize) {
      if (!(this_present_curWatchSize && that_present_curWatchSize))
        return false;
      if (this.curWatchSize != that.curWatchSize)
        return false;
    }

    boolean this_present_songId = true;
    boolean that_present_songId = true;
    if (this_present_songId || that_present_songId) {
      if (!(this_present_songId && that_present_songId))
        return false;
      if (this.songId != that.songId)
        return false;
    }

    boolean this_present_lvl = true;
    boolean that_present_lvl = true;
    if (this_present_lvl || that_present_lvl) {
      if (!(this_present_lvl && that_present_lvl))
        return false;
      if (this.lvl != that.lvl)
        return false;
    }

    boolean this_present_leaderBaseInfo = true && this.isSetLeaderBaseInfo();
    boolean that_present_leaderBaseInfo = true && that.isSetLeaderBaseInfo();
    if (this_present_leaderBaseInfo || that_present_leaderBaseInfo) {
      if (!(this_present_leaderBaseInfo && that_present_leaderBaseInfo))
        return false;
      if (!this.leaderBaseInfo.equals(that.leaderBaseInfo))
        return false;
    }

    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (!this.state.equals(that.state))
        return false;
    }

    boolean this_present_maxWatchSize = true;
    boolean that_present_maxWatchSize = true;
    if (this_present_maxWatchSize || that_present_maxWatchSize) {
      if (!(this_present_maxWatchSize && that_present_maxWatchSize))
        return false;
      if (this.maxWatchSize != that.maxWatchSize)
        return false;
    }

    boolean this_present_roomType = true && this.isSetRoomType();
    boolean that_present_roomType = true && that.isSetRoomType();
    if (this_present_roomType || that_present_roomType) {
      if (!(this_present_roomType && that_present_roomType))
        return false;
      if (!this.roomType.equals(that.roomType))
        return false;
    }

    boolean this_present_isStick = true;
    boolean that_present_isStick = true;
    if (this_present_isStick || that_present_isStick) {
      if (!(this_present_isStick && that_present_isStick))
        return false;
      if (this.isStick != that.isStick)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(DanceRoomInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    DanceRoomInfo typedOther = (DanceRoomInfo)other;

    lastComparison = Boolean.valueOf(isSetLockState()).compareTo(typedOther.isSetLockState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLockState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lockState, typedOther.lockState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMode()).compareTo(typedOther.isSetMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mode, typedOther.mode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemberSexInfo()).compareTo(typedOther.isSetMemberSexInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemberSexInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberSexInfo, typedOther.memberSexInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRoomId()).compareTo(typedOther.isSetRoomId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoomId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roomId, typedOther.roomId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(typedOther.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, typedOther.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWatch()).compareTo(typedOther.isSetWatch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWatch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.watch, typedOther.watch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurDanceSize()).compareTo(typedOther.isSetCurDanceSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurDanceSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.curDanceSize, typedOther.curDanceSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurWatchSize()).compareTo(typedOther.isSetCurWatchSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurWatchSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.curWatchSize, typedOther.curWatchSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSongId()).compareTo(typedOther.isSetSongId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSongId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.songId, typedOther.songId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLvl()).compareTo(typedOther.isSetLvl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLvl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lvl, typedOther.lvl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLeaderBaseInfo()).compareTo(typedOther.isSetLeaderBaseInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeaderBaseInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leaderBaseInfo, typedOther.leaderBaseInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetState()).compareTo(typedOther.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, typedOther.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxWatchSize()).compareTo(typedOther.isSetMaxWatchSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxWatchSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxWatchSize, typedOther.maxWatchSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRoomType()).compareTo(typedOther.isSetRoomType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoomType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roomType, typedOther.roomType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsStick()).compareTo(typedOther.isSetIsStick());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsStick()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isStick, typedOther.isStick);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DanceRoomInfo(");
    boolean first = true;

    sb.append("lockState:");
    sb.append(this.lockState);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mode:");
    sb.append(this.mode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("memberSexInfo:");
    sb.append(this.memberSexInfo);
    first = false;
    if (!first) sb.append(", ");
    sb.append("roomId:");
    sb.append(this.roomId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("watch:");
    sb.append(this.watch);
    first = false;
    if (!first) sb.append(", ");
    sb.append("curDanceSize:");
    sb.append(this.curDanceSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("curWatchSize:");
    sb.append(this.curWatchSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("songId:");
    sb.append(this.songId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lvl:");
    sb.append(this.lvl);
    first = false;
    if (!first) sb.append(", ");
    sb.append("leaderBaseInfo:");
    if (this.leaderBaseInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.leaderBaseInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("state:");
    if (this.state == null) {
      sb.append("null");
    } else {
      sb.append(this.state);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxWatchSize:");
    sb.append(this.maxWatchSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("roomType:");
    if (this.roomType == null) {
      sb.append("null");
    } else {
      sb.append(this.roomType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isStick:");
    sb.append(this.isStick);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (leaderBaseInfo != null) {
      leaderBaseInfo.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DanceRoomInfoStandardSchemeFactory implements SchemeFactory {
    public DanceRoomInfoStandardScheme getScheme() {
      return new DanceRoomInfoStandardScheme();
    }
  }

  private static class DanceRoomInfoStandardScheme extends StandardScheme<DanceRoomInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DanceRoomInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LOCK_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.lockState = iprot.readByte();
              struct.setLockStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.mode = iprot.readByte();
              struct.setModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MEMBER_SEX_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.memberSexInfo = iprot.readByte();
              struct.setMemberSexInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ROOM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.roomId = iprot.readI32();
              struct.setRoomIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // WATCH
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.watch = iprot.readBool();
              struct.setWatchIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CUR_DANCE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.curDanceSize = iprot.readI16();
              struct.setCurDanceSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CUR_WATCH_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.curWatchSize = iprot.readI16();
              struct.setCurWatchSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SONG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.songId = iprot.readI16();
              struct.setSongIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LVL
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.lvl = iprot.readByte();
              struct.setLvlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // LEADER_BASE_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.leaderBaseInfo = new PlayerBaseInfo();
              struct.leaderBaseInfo.read(iprot);
              struct.setLeaderBaseInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.state = RoomState.findByValue(iprot.readI32());
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // MAX_WATCH_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.maxWatchSize = iprot.readI16();
              struct.setMaxWatchSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // ROOM_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.roomType = CreateRoomType.findByValue(iprot.readI32());
              struct.setRoomTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // IS_STICK
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isStick = iprot.readBool();
              struct.setIsStickIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DanceRoomInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(LOCK_STATE_FIELD_DESC);
      oprot.writeByte(struct.lockState);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MODE_FIELD_DESC);
      oprot.writeByte(struct.mode);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MEMBER_SEX_INFO_FIELD_DESC);
      oprot.writeByte(struct.memberSexInfo);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROOM_ID_FIELD_DESC);
      oprot.writeI32(struct.roomId);
      oprot.writeFieldEnd();
      if (struct.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(struct.title);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(WATCH_FIELD_DESC);
      oprot.writeBool(struct.watch);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CUR_DANCE_SIZE_FIELD_DESC);
      oprot.writeI16(struct.curDanceSize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CUR_WATCH_SIZE_FIELD_DESC);
      oprot.writeI16(struct.curWatchSize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SONG_ID_FIELD_DESC);
      oprot.writeI16(struct.songId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LVL_FIELD_DESC);
      oprot.writeByte(struct.lvl);
      oprot.writeFieldEnd();
      if (struct.leaderBaseInfo != null) {
        oprot.writeFieldBegin(LEADER_BASE_INFO_FIELD_DESC);
        struct.leaderBaseInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.state != null) {
        oprot.writeFieldBegin(STATE_FIELD_DESC);
        oprot.writeI32(struct.state.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MAX_WATCH_SIZE_FIELD_DESC);
      oprot.writeI16(struct.maxWatchSize);
      oprot.writeFieldEnd();
      if (struct.roomType != null) {
        oprot.writeFieldBegin(ROOM_TYPE_FIELD_DESC);
        oprot.writeI32(struct.roomType.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_STICK_FIELD_DESC);
      oprot.writeBool(struct.isStick);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DanceRoomInfoTupleSchemeFactory implements SchemeFactory {
    public DanceRoomInfoTupleScheme getScheme() {
      return new DanceRoomInfoTupleScheme();
    }
  }

  private static class DanceRoomInfoTupleScheme extends TupleScheme<DanceRoomInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DanceRoomInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetLockState()) {
        optionals.set(0);
      }
      if (struct.isSetMode()) {
        optionals.set(1);
      }
      if (struct.isSetMemberSexInfo()) {
        optionals.set(2);
      }
      if (struct.isSetRoomId()) {
        optionals.set(3);
      }
      if (struct.isSetTitle()) {
        optionals.set(4);
      }
      if (struct.isSetWatch()) {
        optionals.set(5);
      }
      if (struct.isSetCurDanceSize()) {
        optionals.set(6);
      }
      if (struct.isSetCurWatchSize()) {
        optionals.set(7);
      }
      if (struct.isSetSongId()) {
        optionals.set(8);
      }
      if (struct.isSetLvl()) {
        optionals.set(9);
      }
      if (struct.isSetLeaderBaseInfo()) {
        optionals.set(10);
      }
      if (struct.isSetState()) {
        optionals.set(11);
      }
      if (struct.isSetMaxWatchSize()) {
        optionals.set(12);
      }
      if (struct.isSetRoomType()) {
        optionals.set(13);
      }
      if (struct.isSetIsStick()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetLockState()) {
        oprot.writeByte(struct.lockState);
      }
      if (struct.isSetMode()) {
        oprot.writeByte(struct.mode);
      }
      if (struct.isSetMemberSexInfo()) {
        oprot.writeByte(struct.memberSexInfo);
      }
      if (struct.isSetRoomId()) {
        oprot.writeI32(struct.roomId);
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetWatch()) {
        oprot.writeBool(struct.watch);
      }
      if (struct.isSetCurDanceSize()) {
        oprot.writeI16(struct.curDanceSize);
      }
      if (struct.isSetCurWatchSize()) {
        oprot.writeI16(struct.curWatchSize);
      }
      if (struct.isSetSongId()) {
        oprot.writeI16(struct.songId);
      }
      if (struct.isSetLvl()) {
        oprot.writeByte(struct.lvl);
      }
      if (struct.isSetLeaderBaseInfo()) {
        struct.leaderBaseInfo.write(oprot);
      }
      if (struct.isSetState()) {
        oprot.writeI32(struct.state.getValue());
      }
      if (struct.isSetMaxWatchSize()) {
        oprot.writeI16(struct.maxWatchSize);
      }
      if (struct.isSetRoomType()) {
        oprot.writeI32(struct.roomType.getValue());
      }
      if (struct.isSetIsStick()) {
        oprot.writeBool(struct.isStick);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DanceRoomInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        struct.lockState = iprot.readByte();
        struct.setLockStateIsSet(true);
      }
      if (incoming.get(1)) {
        struct.mode = iprot.readByte();
        struct.setModeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.memberSexInfo = iprot.readByte();
        struct.setMemberSexInfoIsSet(true);
      }
      if (incoming.get(3)) {
        struct.roomId = iprot.readI32();
        struct.setRoomIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(5)) {
        struct.watch = iprot.readBool();
        struct.setWatchIsSet(true);
      }
      if (incoming.get(6)) {
        struct.curDanceSize = iprot.readI16();
        struct.setCurDanceSizeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.curWatchSize = iprot.readI16();
        struct.setCurWatchSizeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.songId = iprot.readI16();
        struct.setSongIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.lvl = iprot.readByte();
        struct.setLvlIsSet(true);
      }
      if (incoming.get(10)) {
        struct.leaderBaseInfo = new PlayerBaseInfo();
        struct.leaderBaseInfo.read(iprot);
        struct.setLeaderBaseInfoIsSet(true);
      }
      if (incoming.get(11)) {
        struct.state = RoomState.findByValue(iprot.readI32());
        struct.setStateIsSet(true);
      }
      if (incoming.get(12)) {
        struct.maxWatchSize = iprot.readI16();
        struct.setMaxWatchSizeIsSet(true);
      }
      if (incoming.get(13)) {
        struct.roomType = CreateRoomType.findByValue(iprot.readI32());
        struct.setRoomTypeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.isStick = iprot.readBool();
        struct.setIsStickIsSet(true);
      }
    }
  }

}

