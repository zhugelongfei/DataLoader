/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.cs;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 聊天广播
 */
public class CSBroadcastChatMsg implements org.apache.thrift.TBase<CSBroadcastChatMsg, CSBroadcastChatMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CSBroadcastChatMsg");

  private static final org.apache.thrift.protocol.TField SCOPE_FIELD_DESC = new org.apache.thrift.protocol.TField("scope", org.apache.thrift.protocol.TType.BYTE, (short)1);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SOUND_NAME_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("soundNameKey", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SEND_AUTO_SPEAKER_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("sendAutoSpeakerIndex", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CSBroadcastChatMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CSBroadcastChatMsgTupleSchemeFactory());
  }

  /**
   * 聊天类型的索引
   */
  public byte scope; // required
  /**
   * 聊天内容
   */
  public String content; // optional
  /**
   * 语音聊天key
   */
  public String soundNameKey; // optional
  /**
   * 自动喇叭索引
   */
  public int sendAutoSpeakerIndex; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 聊天类型的索引
     */
    SCOPE((short)1, "scope"),
    /**
     * 聊天内容
     */
    CONTENT((short)2, "content"),
    /**
     * 语音聊天key
     */
    SOUND_NAME_KEY((short)3, "soundNameKey"),
    /**
     * 自动喇叭索引
     */
    SEND_AUTO_SPEAKER_INDEX((short)4, "sendAutoSpeakerIndex");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SCOPE
          return SCOPE;
        case 2: // CONTENT
          return CONTENT;
        case 3: // SOUND_NAME_KEY
          return SOUND_NAME_KEY;
        case 4: // SEND_AUTO_SPEAKER_INDEX
          return SEND_AUTO_SPEAKER_INDEX;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SCOPE_ISSET_ID = 0;
  private static final int __SENDAUTOSPEAKERINDEX_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.CONTENT,_Fields.SOUND_NAME_KEY,_Fields.SEND_AUTO_SPEAKER_INDEX};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SCOPE, new org.apache.thrift.meta_data.FieldMetaData("scope", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SOUND_NAME_KEY, new org.apache.thrift.meta_data.FieldMetaData("soundNameKey", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEND_AUTO_SPEAKER_INDEX, new org.apache.thrift.meta_data.FieldMetaData("sendAutoSpeakerIndex", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CSBroadcastChatMsg.class, metaDataMap);
  }

  public CSBroadcastChatMsg() {
  }

  public CSBroadcastChatMsg(
    byte scope)
  {
    this();
    this.scope = scope;
    setScopeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CSBroadcastChatMsg(CSBroadcastChatMsg other) {
    __isset_bitfield = other.__isset_bitfield;
    this.scope = other.scope;
    if (other.isSetContent()) {
      this.content = other.content;
    }
    if (other.isSetSoundNameKey()) {
      this.soundNameKey = other.soundNameKey;
    }
    this.sendAutoSpeakerIndex = other.sendAutoSpeakerIndex;
  }

  public CSBroadcastChatMsg deepCopy() {
    return new CSBroadcastChatMsg(this);
  }

  @Override
  public void clear() {
    setScopeIsSet(false);
    this.scope = 0;
    this.content = null;
    this.soundNameKey = null;
    setSendAutoSpeakerIndexIsSet(false);
    this.sendAutoSpeakerIndex = 0;
  }

  /**
   * 聊天类型的索引
   */
  public byte getScope() {
    return this.scope;
  }

  /**
   * 聊天类型的索引
   */
  public CSBroadcastChatMsg setScope(byte scope) {
    this.scope = scope;
    setScopeIsSet(true);
    return this;
  }

  public void unsetScope() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SCOPE_ISSET_ID);
  }

  /** Returns true if field scope is set (has been assigned a value) and false otherwise */
  public boolean isSetScope() {
    return EncodingUtils.testBit(__isset_bitfield, __SCOPE_ISSET_ID);
  }

  public void setScopeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SCOPE_ISSET_ID, value);
  }

  /**
   * 聊天内容
   */
  public String getContent() {
    return this.content;
  }

  /**
   * 聊天内容
   */
  public CSBroadcastChatMsg setContent(String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  /**
   * 语音聊天key
   */
  public String getSoundNameKey() {
    return this.soundNameKey;
  }

  /**
   * 语音聊天key
   */
  public CSBroadcastChatMsg setSoundNameKey(String soundNameKey) {
    this.soundNameKey = soundNameKey;
    return this;
  }

  public void unsetSoundNameKey() {
    this.soundNameKey = null;
  }

  /** Returns true if field soundNameKey is set (has been assigned a value) and false otherwise */
  public boolean isSetSoundNameKey() {
    return this.soundNameKey != null;
  }

  public void setSoundNameKeyIsSet(boolean value) {
    if (!value) {
      this.soundNameKey = null;
    }
  }

  /**
   * 自动喇叭索引
   */
  public int getSendAutoSpeakerIndex() {
    return this.sendAutoSpeakerIndex;
  }

  /**
   * 自动喇叭索引
   */
  public CSBroadcastChatMsg setSendAutoSpeakerIndex(int sendAutoSpeakerIndex) {
    this.sendAutoSpeakerIndex = sendAutoSpeakerIndex;
    setSendAutoSpeakerIndexIsSet(true);
    return this;
  }

  public void unsetSendAutoSpeakerIndex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SENDAUTOSPEAKERINDEX_ISSET_ID);
  }

  /** Returns true if field sendAutoSpeakerIndex is set (has been assigned a value) and false otherwise */
  public boolean isSetSendAutoSpeakerIndex() {
    return EncodingUtils.testBit(__isset_bitfield, __SENDAUTOSPEAKERINDEX_ISSET_ID);
  }

  public void setSendAutoSpeakerIndexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SENDAUTOSPEAKERINDEX_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SCOPE:
      if (value == null) {
        unsetScope();
      } else {
        setScope((Byte)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case SOUND_NAME_KEY:
      if (value == null) {
        unsetSoundNameKey();
      } else {
        setSoundNameKey((String)value);
      }
      break;

    case SEND_AUTO_SPEAKER_INDEX:
      if (value == null) {
        unsetSendAutoSpeakerIndex();
      } else {
        setSendAutoSpeakerIndex((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SCOPE:
      return Byte.valueOf(getScope());

    case CONTENT:
      return getContent();

    case SOUND_NAME_KEY:
      return getSoundNameKey();

    case SEND_AUTO_SPEAKER_INDEX:
      return Integer.valueOf(getSendAutoSpeakerIndex());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SCOPE:
      return isSetScope();
    case CONTENT:
      return isSetContent();
    case SOUND_NAME_KEY:
      return isSetSoundNameKey();
    case SEND_AUTO_SPEAKER_INDEX:
      return isSetSendAutoSpeakerIndex();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CSBroadcastChatMsg)
      return this.equals((CSBroadcastChatMsg)that);
    return false;
  }

  public boolean equals(CSBroadcastChatMsg that) {
    if (that == null)
      return false;

    boolean this_present_scope = true;
    boolean that_present_scope = true;
    if (this_present_scope || that_present_scope) {
      if (!(this_present_scope && that_present_scope))
        return false;
      if (this.scope != that.scope)
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_soundNameKey = true && this.isSetSoundNameKey();
    boolean that_present_soundNameKey = true && that.isSetSoundNameKey();
    if (this_present_soundNameKey || that_present_soundNameKey) {
      if (!(this_present_soundNameKey && that_present_soundNameKey))
        return false;
      if (!this.soundNameKey.equals(that.soundNameKey))
        return false;
    }

    boolean this_present_sendAutoSpeakerIndex = true && this.isSetSendAutoSpeakerIndex();
    boolean that_present_sendAutoSpeakerIndex = true && that.isSetSendAutoSpeakerIndex();
    if (this_present_sendAutoSpeakerIndex || that_present_sendAutoSpeakerIndex) {
      if (!(this_present_sendAutoSpeakerIndex && that_present_sendAutoSpeakerIndex))
        return false;
      if (this.sendAutoSpeakerIndex != that.sendAutoSpeakerIndex)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(CSBroadcastChatMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CSBroadcastChatMsg typedOther = (CSBroadcastChatMsg)other;

    lastComparison = Boolean.valueOf(isSetScope()).compareTo(typedOther.isSetScope());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScope()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scope, typedOther.scope);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(typedOther.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, typedOther.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSoundNameKey()).compareTo(typedOther.isSetSoundNameKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSoundNameKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.soundNameKey, typedOther.soundNameKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSendAutoSpeakerIndex()).compareTo(typedOther.isSetSendAutoSpeakerIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSendAutoSpeakerIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sendAutoSpeakerIndex, typedOther.sendAutoSpeakerIndex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CSBroadcastChatMsg(");
    boolean first = true;

    sb.append("scope:");
    sb.append(this.scope);
    first = false;
    if (isSetContent()) {
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        sb.append(this.content);
      }
      first = false;
    }
    if (isSetSoundNameKey()) {
      if (!first) sb.append(", ");
      sb.append("soundNameKey:");
      if (this.soundNameKey == null) {
        sb.append("null");
      } else {
        sb.append(this.soundNameKey);
      }
      first = false;
    }
    if (isSetSendAutoSpeakerIndex()) {
      if (!first) sb.append(", ");
      sb.append("sendAutoSpeakerIndex:");
      sb.append(this.sendAutoSpeakerIndex);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CSBroadcastChatMsgStandardSchemeFactory implements SchemeFactory {
    public CSBroadcastChatMsgStandardScheme getScheme() {
      return new CSBroadcastChatMsgStandardScheme();
    }
  }

  private static class CSBroadcastChatMsgStandardScheme extends StandardScheme<CSBroadcastChatMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CSBroadcastChatMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SCOPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.scope = iprot.readByte();
              struct.setScopeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SOUND_NAME_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.soundNameKey = iprot.readString();
              struct.setSoundNameKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SEND_AUTO_SPEAKER_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sendAutoSpeakerIndex = iprot.readI32();
              struct.setSendAutoSpeakerIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CSBroadcastChatMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SCOPE_FIELD_DESC);
      oprot.writeByte(struct.scope);
      oprot.writeFieldEnd();
      if (struct.content != null) {
        if (struct.isSetContent()) {
          oprot.writeFieldBegin(CONTENT_FIELD_DESC);
          oprot.writeString(struct.content);
          oprot.writeFieldEnd();
        }
      }
      if (struct.soundNameKey != null) {
        if (struct.isSetSoundNameKey()) {
          oprot.writeFieldBegin(SOUND_NAME_KEY_FIELD_DESC);
          oprot.writeString(struct.soundNameKey);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSendAutoSpeakerIndex()) {
        oprot.writeFieldBegin(SEND_AUTO_SPEAKER_INDEX_FIELD_DESC);
        oprot.writeI32(struct.sendAutoSpeakerIndex);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CSBroadcastChatMsgTupleSchemeFactory implements SchemeFactory {
    public CSBroadcastChatMsgTupleScheme getScheme() {
      return new CSBroadcastChatMsgTupleScheme();
    }
  }

  private static class CSBroadcastChatMsgTupleScheme extends TupleScheme<CSBroadcastChatMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CSBroadcastChatMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetScope()) {
        optionals.set(0);
      }
      if (struct.isSetContent()) {
        optionals.set(1);
      }
      if (struct.isSetSoundNameKey()) {
        optionals.set(2);
      }
      if (struct.isSetSendAutoSpeakerIndex()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetScope()) {
        oprot.writeByte(struct.scope);
      }
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
      if (struct.isSetSoundNameKey()) {
        oprot.writeString(struct.soundNameKey);
      }
      if (struct.isSetSendAutoSpeakerIndex()) {
        oprot.writeI32(struct.sendAutoSpeakerIndex);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CSBroadcastChatMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.scope = iprot.readByte();
        struct.setScopeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
      if (incoming.get(2)) {
        struct.soundNameKey = iprot.readString();
        struct.setSoundNameKeyIsSet(true);
      }
      if (incoming.get(3)) {
        struct.sendAutoSpeakerIndex = iprot.readI32();
        struct.setSendAutoSpeakerIndexIsSet(true);
      }
    }
  }

}

