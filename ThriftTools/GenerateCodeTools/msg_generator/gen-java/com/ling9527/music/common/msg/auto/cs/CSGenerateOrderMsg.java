/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.cs;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CSGenerateOrderMsg implements org.apache.thrift.TBase<CSGenerateOrderMsg, CSGenerateOrderMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CSGenerateOrderMsg");

  private static final org.apache.thrift.protocol.TField PRICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("priceID", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PAY_CHANNEL_FIELD_DESC = new org.apache.thrift.protocol.TField("payChannel", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField RECHARGE_LUCKY_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("rechargeLuckyMoney", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CSGenerateOrderMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CSGenerateOrderMsgTupleSchemeFactory());
  }

  /**
   * 价格档位
   */
  public int priceID; // required
  /**
   * 支付渠道
   */
  public String payChannel; // required
  /**
   * 充值红包数据
   */
  public com.ling9527.music.common.msg.auto.RechargeLuckyMoney rechargeLuckyMoney; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 价格档位
     */
    PRICE_ID((short)1, "priceID"),
    /**
     * 支付渠道
     */
    PAY_CHANNEL((short)2, "payChannel"),
    /**
     * 充值红包数据
     */
    RECHARGE_LUCKY_MONEY((short)3, "rechargeLuckyMoney");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PRICE_ID
          return PRICE_ID;
        case 2: // PAY_CHANNEL
          return PAY_CHANNEL;
        case 3: // RECHARGE_LUCKY_MONEY
          return RECHARGE_LUCKY_MONEY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PRICEID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.RECHARGE_LUCKY_MONEY};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PRICE_ID, new org.apache.thrift.meta_data.FieldMetaData("priceID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAY_CHANNEL, new org.apache.thrift.meta_data.FieldMetaData("payChannel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECHARGE_LUCKY_MONEY, new org.apache.thrift.meta_data.FieldMetaData("rechargeLuckyMoney", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.RechargeLuckyMoney.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CSGenerateOrderMsg.class, metaDataMap);
  }

  public CSGenerateOrderMsg() {
  }

  public CSGenerateOrderMsg(
    int priceID,
    String payChannel)
  {
    this();
    this.priceID = priceID;
    setPriceIDIsSet(true);
    this.payChannel = payChannel;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CSGenerateOrderMsg(CSGenerateOrderMsg other) {
    __isset_bitfield = other.__isset_bitfield;
    this.priceID = other.priceID;
    if (other.isSetPayChannel()) {
      this.payChannel = other.payChannel;
    }
    if (other.isSetRechargeLuckyMoney()) {
      this.rechargeLuckyMoney = new com.ling9527.music.common.msg.auto.RechargeLuckyMoney(other.rechargeLuckyMoney);
    }
  }

  public CSGenerateOrderMsg deepCopy() {
    return new CSGenerateOrderMsg(this);
  }

  @Override
  public void clear() {
    setPriceIDIsSet(false);
    this.priceID = 0;
    this.payChannel = null;
    this.rechargeLuckyMoney = null;
  }

  /**
   * 价格档位
   */
  public int getPriceID() {
    return this.priceID;
  }

  /**
   * 价格档位
   */
  public CSGenerateOrderMsg setPriceID(int priceID) {
    this.priceID = priceID;
    setPriceIDIsSet(true);
    return this;
  }

  public void unsetPriceID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRICEID_ISSET_ID);
  }

  /** Returns true if field priceID is set (has been assigned a value) and false otherwise */
  public boolean isSetPriceID() {
    return EncodingUtils.testBit(__isset_bitfield, __PRICEID_ISSET_ID);
  }

  public void setPriceIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRICEID_ISSET_ID, value);
  }

  /**
   * 支付渠道
   */
  public String getPayChannel() {
    return this.payChannel;
  }

  /**
   * 支付渠道
   */
  public CSGenerateOrderMsg setPayChannel(String payChannel) {
    this.payChannel = payChannel;
    return this;
  }

  public void unsetPayChannel() {
    this.payChannel = null;
  }

  /** Returns true if field payChannel is set (has been assigned a value) and false otherwise */
  public boolean isSetPayChannel() {
    return this.payChannel != null;
  }

  public void setPayChannelIsSet(boolean value) {
    if (!value) {
      this.payChannel = null;
    }
  }

  /**
   * 充值红包数据
   */
  public com.ling9527.music.common.msg.auto.RechargeLuckyMoney getRechargeLuckyMoney() {
    return this.rechargeLuckyMoney;
  }

  /**
   * 充值红包数据
   */
  public CSGenerateOrderMsg setRechargeLuckyMoney(com.ling9527.music.common.msg.auto.RechargeLuckyMoney rechargeLuckyMoney) {
    this.rechargeLuckyMoney = rechargeLuckyMoney;
    return this;
  }

  public void unsetRechargeLuckyMoney() {
    this.rechargeLuckyMoney = null;
  }

  /** Returns true if field rechargeLuckyMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetRechargeLuckyMoney() {
    return this.rechargeLuckyMoney != null;
  }

  public void setRechargeLuckyMoneyIsSet(boolean value) {
    if (!value) {
      this.rechargeLuckyMoney = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PRICE_ID:
      if (value == null) {
        unsetPriceID();
      } else {
        setPriceID((Integer)value);
      }
      break;

    case PAY_CHANNEL:
      if (value == null) {
        unsetPayChannel();
      } else {
        setPayChannel((String)value);
      }
      break;

    case RECHARGE_LUCKY_MONEY:
      if (value == null) {
        unsetRechargeLuckyMoney();
      } else {
        setRechargeLuckyMoney((com.ling9527.music.common.msg.auto.RechargeLuckyMoney)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PRICE_ID:
      return Integer.valueOf(getPriceID());

    case PAY_CHANNEL:
      return getPayChannel();

    case RECHARGE_LUCKY_MONEY:
      return getRechargeLuckyMoney();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PRICE_ID:
      return isSetPriceID();
    case PAY_CHANNEL:
      return isSetPayChannel();
    case RECHARGE_LUCKY_MONEY:
      return isSetRechargeLuckyMoney();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CSGenerateOrderMsg)
      return this.equals((CSGenerateOrderMsg)that);
    return false;
  }

  public boolean equals(CSGenerateOrderMsg that) {
    if (that == null)
      return false;

    boolean this_present_priceID = true;
    boolean that_present_priceID = true;
    if (this_present_priceID || that_present_priceID) {
      if (!(this_present_priceID && that_present_priceID))
        return false;
      if (this.priceID != that.priceID)
        return false;
    }

    boolean this_present_payChannel = true && this.isSetPayChannel();
    boolean that_present_payChannel = true && that.isSetPayChannel();
    if (this_present_payChannel || that_present_payChannel) {
      if (!(this_present_payChannel && that_present_payChannel))
        return false;
      if (!this.payChannel.equals(that.payChannel))
        return false;
    }

    boolean this_present_rechargeLuckyMoney = true && this.isSetRechargeLuckyMoney();
    boolean that_present_rechargeLuckyMoney = true && that.isSetRechargeLuckyMoney();
    if (this_present_rechargeLuckyMoney || that_present_rechargeLuckyMoney) {
      if (!(this_present_rechargeLuckyMoney && that_present_rechargeLuckyMoney))
        return false;
      if (!this.rechargeLuckyMoney.equals(that.rechargeLuckyMoney))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(CSGenerateOrderMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CSGenerateOrderMsg typedOther = (CSGenerateOrderMsg)other;

    lastComparison = Boolean.valueOf(isSetPriceID()).compareTo(typedOther.isSetPriceID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriceID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priceID, typedOther.priceID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayChannel()).compareTo(typedOther.isSetPayChannel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayChannel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payChannel, typedOther.payChannel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRechargeLuckyMoney()).compareTo(typedOther.isSetRechargeLuckyMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRechargeLuckyMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rechargeLuckyMoney, typedOther.rechargeLuckyMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CSGenerateOrderMsg(");
    boolean first = true;

    sb.append("priceID:");
    sb.append(this.priceID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("payChannel:");
    if (this.payChannel == null) {
      sb.append("null");
    } else {
      sb.append(this.payChannel);
    }
    first = false;
    if (isSetRechargeLuckyMoney()) {
      if (!first) sb.append(", ");
      sb.append("rechargeLuckyMoney:");
      if (this.rechargeLuckyMoney == null) {
        sb.append("null");
      } else {
        sb.append(this.rechargeLuckyMoney);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (rechargeLuckyMoney != null) {
      rechargeLuckyMoney.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CSGenerateOrderMsgStandardSchemeFactory implements SchemeFactory {
    public CSGenerateOrderMsgStandardScheme getScheme() {
      return new CSGenerateOrderMsgStandardScheme();
    }
  }

  private static class CSGenerateOrderMsgStandardScheme extends StandardScheme<CSGenerateOrderMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CSGenerateOrderMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PRICE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.priceID = iprot.readI32();
              struct.setPriceIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PAY_CHANNEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.payChannel = iprot.readString();
              struct.setPayChannelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RECHARGE_LUCKY_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.rechargeLuckyMoney = new com.ling9527.music.common.msg.auto.RechargeLuckyMoney();
              struct.rechargeLuckyMoney.read(iprot);
              struct.setRechargeLuckyMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CSGenerateOrderMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PRICE_ID_FIELD_DESC);
      oprot.writeI32(struct.priceID);
      oprot.writeFieldEnd();
      if (struct.payChannel != null) {
        oprot.writeFieldBegin(PAY_CHANNEL_FIELD_DESC);
        oprot.writeString(struct.payChannel);
        oprot.writeFieldEnd();
      }
      if (struct.rechargeLuckyMoney != null) {
        if (struct.isSetRechargeLuckyMoney()) {
          oprot.writeFieldBegin(RECHARGE_LUCKY_MONEY_FIELD_DESC);
          struct.rechargeLuckyMoney.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CSGenerateOrderMsgTupleSchemeFactory implements SchemeFactory {
    public CSGenerateOrderMsgTupleScheme getScheme() {
      return new CSGenerateOrderMsgTupleScheme();
    }
  }

  private static class CSGenerateOrderMsgTupleScheme extends TupleScheme<CSGenerateOrderMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CSGenerateOrderMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPriceID()) {
        optionals.set(0);
      }
      if (struct.isSetPayChannel()) {
        optionals.set(1);
      }
      if (struct.isSetRechargeLuckyMoney()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetPriceID()) {
        oprot.writeI32(struct.priceID);
      }
      if (struct.isSetPayChannel()) {
        oprot.writeString(struct.payChannel);
      }
      if (struct.isSetRechargeLuckyMoney()) {
        struct.rechargeLuckyMoney.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CSGenerateOrderMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.priceID = iprot.readI32();
        struct.setPriceIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.payChannel = iprot.readString();
        struct.setPayChannelIsSet(true);
      }
      if (incoming.get(2)) {
        struct.rechargeLuckyMoney = new com.ling9527.music.common.msg.auto.RechargeLuckyMoney();
        struct.rechargeLuckyMoney.read(iprot);
        struct.setRechargeLuckyMoneyIsSet(true);
      }
    }
  }

}

