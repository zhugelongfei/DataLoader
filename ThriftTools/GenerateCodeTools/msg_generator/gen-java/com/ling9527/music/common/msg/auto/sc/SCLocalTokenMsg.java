/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 平台登录返回的token信息
 */
public class SCLocalTokenMsg implements org.apache.thrift.TBase<SCLocalTokenMsg, SCLocalTokenMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCLocalTokenMsg");

  private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CLIENT_SECRET_FIELD_DESC = new org.apache.thrift.protocol.TField("clientSecret", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField GAME_SESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("gameSession", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCLocalTokenMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCLocalTokenMsgTupleSchemeFactory());
  }

  public String token; // optional
  /**
   * sdk返回的用户id， 非账号id
   */
  public String userId; // optional
  /**
   * 部分渠道要返回秘钥，如360
   */
  public String clientSecret; // optional
  /**
   * 游戏自己维护的session
   */
  public String gameSession; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TOKEN((short)1, "token"),
    /**
     * sdk返回的用户id， 非账号id
     */
    USER_ID((short)2, "userId"),
    /**
     * 部分渠道要返回秘钥，如360
     */
    CLIENT_SECRET((short)3, "clientSecret"),
    /**
     * 游戏自己维护的session
     */
    GAME_SESSION((short)4, "gameSession");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TOKEN
          return TOKEN;
        case 2: // USER_ID
          return USER_ID;
        case 3: // CLIENT_SECRET
          return CLIENT_SECRET;
        case 4: // GAME_SESSION
          return GAME_SESSION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.TOKEN,_Fields.USER_ID,_Fields.CLIENT_SECRET};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLIENT_SECRET, new org.apache.thrift.meta_data.FieldMetaData("clientSecret", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GAME_SESSION, new org.apache.thrift.meta_data.FieldMetaData("gameSession", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCLocalTokenMsg.class, metaDataMap);
  }

  public SCLocalTokenMsg() {
  }

  public SCLocalTokenMsg(
    String gameSession)
  {
    this();
    this.gameSession = gameSession;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCLocalTokenMsg(SCLocalTokenMsg other) {
    if (other.isSetToken()) {
      this.token = other.token;
    }
    if (other.isSetUserId()) {
      this.userId = other.userId;
    }
    if (other.isSetClientSecret()) {
      this.clientSecret = other.clientSecret;
    }
    if (other.isSetGameSession()) {
      this.gameSession = other.gameSession;
    }
  }

  public SCLocalTokenMsg deepCopy() {
    return new SCLocalTokenMsg(this);
  }

  @Override
  public void clear() {
    this.token = null;
    this.userId = null;
    this.clientSecret = null;
    this.gameSession = null;
  }

  public String getToken() {
    return this.token;
  }

  public SCLocalTokenMsg setToken(String token) {
    this.token = token;
    return this;
  }

  public void unsetToken() {
    this.token = null;
  }

  /** Returns true if field token is set (has been assigned a value) and false otherwise */
  public boolean isSetToken() {
    return this.token != null;
  }

  public void setTokenIsSet(boolean value) {
    if (!value) {
      this.token = null;
    }
  }

  /**
   * sdk返回的用户id， 非账号id
   */
  public String getUserId() {
    return this.userId;
  }

  /**
   * sdk返回的用户id， 非账号id
   */
  public SCLocalTokenMsg setUserId(String userId) {
    this.userId = userId;
    return this;
  }

  public void unsetUserId() {
    this.userId = null;
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return this.userId != null;
  }

  public void setUserIdIsSet(boolean value) {
    if (!value) {
      this.userId = null;
    }
  }

  /**
   * 部分渠道要返回秘钥，如360
   */
  public String getClientSecret() {
    return this.clientSecret;
  }

  /**
   * 部分渠道要返回秘钥，如360
   */
  public SCLocalTokenMsg setClientSecret(String clientSecret) {
    this.clientSecret = clientSecret;
    return this;
  }

  public void unsetClientSecret() {
    this.clientSecret = null;
  }

  /** Returns true if field clientSecret is set (has been assigned a value) and false otherwise */
  public boolean isSetClientSecret() {
    return this.clientSecret != null;
  }

  public void setClientSecretIsSet(boolean value) {
    if (!value) {
      this.clientSecret = null;
    }
  }

  /**
   * 游戏自己维护的session
   */
  public String getGameSession() {
    return this.gameSession;
  }

  /**
   * 游戏自己维护的session
   */
  public SCLocalTokenMsg setGameSession(String gameSession) {
    this.gameSession = gameSession;
    return this;
  }

  public void unsetGameSession() {
    this.gameSession = null;
  }

  /** Returns true if field gameSession is set (has been assigned a value) and false otherwise */
  public boolean isSetGameSession() {
    return this.gameSession != null;
  }

  public void setGameSessionIsSet(boolean value) {
    if (!value) {
      this.gameSession = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TOKEN:
      if (value == null) {
        unsetToken();
      } else {
        setToken((String)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((String)value);
      }
      break;

    case CLIENT_SECRET:
      if (value == null) {
        unsetClientSecret();
      } else {
        setClientSecret((String)value);
      }
      break;

    case GAME_SESSION:
      if (value == null) {
        unsetGameSession();
      } else {
        setGameSession((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TOKEN:
      return getToken();

    case USER_ID:
      return getUserId();

    case CLIENT_SECRET:
      return getClientSecret();

    case GAME_SESSION:
      return getGameSession();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TOKEN:
      return isSetToken();
    case USER_ID:
      return isSetUserId();
    case CLIENT_SECRET:
      return isSetClientSecret();
    case GAME_SESSION:
      return isSetGameSession();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCLocalTokenMsg)
      return this.equals((SCLocalTokenMsg)that);
    return false;
  }

  public boolean equals(SCLocalTokenMsg that) {
    if (that == null)
      return false;

    boolean this_present_token = true && this.isSetToken();
    boolean that_present_token = true && that.isSetToken();
    if (this_present_token || that_present_token) {
      if (!(this_present_token && that_present_token))
        return false;
      if (!this.token.equals(that.token))
        return false;
    }

    boolean this_present_userId = true && this.isSetUserId();
    boolean that_present_userId = true && that.isSetUserId();
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (!this.userId.equals(that.userId))
        return false;
    }

    boolean this_present_clientSecret = true && this.isSetClientSecret();
    boolean that_present_clientSecret = true && that.isSetClientSecret();
    if (this_present_clientSecret || that_present_clientSecret) {
      if (!(this_present_clientSecret && that_present_clientSecret))
        return false;
      if (!this.clientSecret.equals(that.clientSecret))
        return false;
    }

    boolean this_present_gameSession = true && this.isSetGameSession();
    boolean that_present_gameSession = true && that.isSetGameSession();
    if (this_present_gameSession || that_present_gameSession) {
      if (!(this_present_gameSession && that_present_gameSession))
        return false;
      if (!this.gameSession.equals(that.gameSession))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCLocalTokenMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCLocalTokenMsg typedOther = (SCLocalTokenMsg)other;

    lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, typedOther.token);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, typedOther.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientSecret()).compareTo(typedOther.isSetClientSecret());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientSecret()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientSecret, typedOther.clientSecret);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGameSession()).compareTo(typedOther.isSetGameSession());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGameSession()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameSession, typedOther.gameSession);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCLocalTokenMsg(");
    boolean first = true;

    if (isSetToken()) {
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
    }
    if (isSetUserId()) {
      if (!first) sb.append(", ");
      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
    }
    if (isSetClientSecret()) {
      if (!first) sb.append(", ");
      sb.append("clientSecret:");
      if (this.clientSecret == null) {
        sb.append("null");
      } else {
        sb.append(this.clientSecret);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("gameSession:");
    if (this.gameSession == null) {
      sb.append("null");
    } else {
      sb.append(this.gameSession);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCLocalTokenMsgStandardSchemeFactory implements SchemeFactory {
    public SCLocalTokenMsgStandardScheme getScheme() {
      return new SCLocalTokenMsgStandardScheme();
    }
  }

  private static class SCLocalTokenMsgStandardScheme extends StandardScheme<SCLocalTokenMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCLocalTokenMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.token = iprot.readString();
              struct.setTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userId = iprot.readString();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CLIENT_SECRET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientSecret = iprot.readString();
              struct.setClientSecretIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // GAME_SESSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.gameSession = iprot.readString();
              struct.setGameSessionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCLocalTokenMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.token != null) {
        if (struct.isSetToken()) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
      }
      if (struct.userId != null) {
        if (struct.isSetUserId()) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.clientSecret != null) {
        if (struct.isSetClientSecret()) {
          oprot.writeFieldBegin(CLIENT_SECRET_FIELD_DESC);
          oprot.writeString(struct.clientSecret);
          oprot.writeFieldEnd();
        }
      }
      if (struct.gameSession != null) {
        oprot.writeFieldBegin(GAME_SESSION_FIELD_DESC);
        oprot.writeString(struct.gameSession);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCLocalTokenMsgTupleSchemeFactory implements SchemeFactory {
    public SCLocalTokenMsgTupleScheme getScheme() {
      return new SCLocalTokenMsgTupleScheme();
    }
  }

  private static class SCLocalTokenMsgTupleScheme extends TupleScheme<SCLocalTokenMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCLocalTokenMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetToken()) {
        optionals.set(0);
      }
      if (struct.isSetUserId()) {
        optionals.set(1);
      }
      if (struct.isSetClientSecret()) {
        optionals.set(2);
      }
      if (struct.isSetGameSession()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetToken()) {
        oprot.writeString(struct.token);
      }
      if (struct.isSetUserId()) {
        oprot.writeString(struct.userId);
      }
      if (struct.isSetClientSecret()) {
        oprot.writeString(struct.clientSecret);
      }
      if (struct.isSetGameSession()) {
        oprot.writeString(struct.gameSession);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCLocalTokenMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
      }
      if (incoming.get(1)) {
        struct.userId = iprot.readString();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.clientSecret = iprot.readString();
        struct.setClientSecretIsSet(true);
      }
      if (incoming.get(3)) {
        struct.gameSession = iprot.readString();
        struct.setGameSessionIsSet(true);
      }
    }
  }

}

