/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class QuickMatchDancer implements org.apache.thrift.TBase<QuickMatchDancer, QuickMatchDancer._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QuickMatchDancer");

  private static final org.apache.thrift.protocol.TField SONG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("songId", org.apache.thrift.protocol.TType.I16, (short)1);
  private static final org.apache.thrift.protocol.TField PLAYER_BASE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("playerBaseInfo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new QuickMatchDancerStandardSchemeFactory());
    schemes.put(TupleScheme.class, new QuickMatchDancerTupleSchemeFactory());
  }

  public short songId; // required
  public PlayerBaseInfo playerBaseInfo; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SONG_ID((short)1, "songId"),
    PLAYER_BASE_INFO((short)2, "playerBaseInfo");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SONG_ID
          return SONG_ID;
        case 2: // PLAYER_BASE_INFO
          return PLAYER_BASE_INFO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SONGID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SONG_ID, new org.apache.thrift.meta_data.FieldMetaData("songId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.PLAYER_BASE_INFO, new org.apache.thrift.meta_data.FieldMetaData("playerBaseInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PlayerBaseInfo.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QuickMatchDancer.class, metaDataMap);
  }

  public QuickMatchDancer() {
  }

  public QuickMatchDancer(
    short songId,
    PlayerBaseInfo playerBaseInfo)
  {
    this();
    this.songId = songId;
    setSongIdIsSet(true);
    this.playerBaseInfo = playerBaseInfo;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QuickMatchDancer(QuickMatchDancer other) {
    __isset_bitfield = other.__isset_bitfield;
    this.songId = other.songId;
    if (other.isSetPlayerBaseInfo()) {
      this.playerBaseInfo = new PlayerBaseInfo(other.playerBaseInfo);
    }
  }

  public QuickMatchDancer deepCopy() {
    return new QuickMatchDancer(this);
  }

  @Override
  public void clear() {
    setSongIdIsSet(false);
    this.songId = 0;
    this.playerBaseInfo = null;
  }

  public short getSongId() {
    return this.songId;
  }

  public QuickMatchDancer setSongId(short songId) {
    this.songId = songId;
    setSongIdIsSet(true);
    return this;
  }

  public void unsetSongId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SONGID_ISSET_ID);
  }

  /** Returns true if field songId is set (has been assigned a value) and false otherwise */
  public boolean isSetSongId() {
    return EncodingUtils.testBit(__isset_bitfield, __SONGID_ISSET_ID);
  }

  public void setSongIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SONGID_ISSET_ID, value);
  }

  public PlayerBaseInfo getPlayerBaseInfo() {
    return this.playerBaseInfo;
  }

  public QuickMatchDancer setPlayerBaseInfo(PlayerBaseInfo playerBaseInfo) {
    this.playerBaseInfo = playerBaseInfo;
    return this;
  }

  public void unsetPlayerBaseInfo() {
    this.playerBaseInfo = null;
  }

  /** Returns true if field playerBaseInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetPlayerBaseInfo() {
    return this.playerBaseInfo != null;
  }

  public void setPlayerBaseInfoIsSet(boolean value) {
    if (!value) {
      this.playerBaseInfo = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SONG_ID:
      if (value == null) {
        unsetSongId();
      } else {
        setSongId((Short)value);
      }
      break;

    case PLAYER_BASE_INFO:
      if (value == null) {
        unsetPlayerBaseInfo();
      } else {
        setPlayerBaseInfo((PlayerBaseInfo)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SONG_ID:
      return Short.valueOf(getSongId());

    case PLAYER_BASE_INFO:
      return getPlayerBaseInfo();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SONG_ID:
      return isSetSongId();
    case PLAYER_BASE_INFO:
      return isSetPlayerBaseInfo();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QuickMatchDancer)
      return this.equals((QuickMatchDancer)that);
    return false;
  }

  public boolean equals(QuickMatchDancer that) {
    if (that == null)
      return false;

    boolean this_present_songId = true;
    boolean that_present_songId = true;
    if (this_present_songId || that_present_songId) {
      if (!(this_present_songId && that_present_songId))
        return false;
      if (this.songId != that.songId)
        return false;
    }

    boolean this_present_playerBaseInfo = true && this.isSetPlayerBaseInfo();
    boolean that_present_playerBaseInfo = true && that.isSetPlayerBaseInfo();
    if (this_present_playerBaseInfo || that_present_playerBaseInfo) {
      if (!(this_present_playerBaseInfo && that_present_playerBaseInfo))
        return false;
      if (!this.playerBaseInfo.equals(that.playerBaseInfo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(QuickMatchDancer other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    QuickMatchDancer typedOther = (QuickMatchDancer)other;

    lastComparison = Boolean.valueOf(isSetSongId()).compareTo(typedOther.isSetSongId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSongId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.songId, typedOther.songId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlayerBaseInfo()).compareTo(typedOther.isSetPlayerBaseInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlayerBaseInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.playerBaseInfo, typedOther.playerBaseInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QuickMatchDancer(");
    boolean first = true;

    sb.append("songId:");
    sb.append(this.songId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("playerBaseInfo:");
    if (this.playerBaseInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.playerBaseInfo);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (playerBaseInfo != null) {
      playerBaseInfo.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QuickMatchDancerStandardSchemeFactory implements SchemeFactory {
    public QuickMatchDancerStandardScheme getScheme() {
      return new QuickMatchDancerStandardScheme();
    }
  }

  private static class QuickMatchDancerStandardScheme extends StandardScheme<QuickMatchDancer> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, QuickMatchDancer struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SONG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.songId = iprot.readI16();
              struct.setSongIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PLAYER_BASE_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.playerBaseInfo = new PlayerBaseInfo();
              struct.playerBaseInfo.read(iprot);
              struct.setPlayerBaseInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, QuickMatchDancer struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SONG_ID_FIELD_DESC);
      oprot.writeI16(struct.songId);
      oprot.writeFieldEnd();
      if (struct.playerBaseInfo != null) {
        oprot.writeFieldBegin(PLAYER_BASE_INFO_FIELD_DESC);
        struct.playerBaseInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QuickMatchDancerTupleSchemeFactory implements SchemeFactory {
    public QuickMatchDancerTupleScheme getScheme() {
      return new QuickMatchDancerTupleScheme();
    }
  }

  private static class QuickMatchDancerTupleScheme extends TupleScheme<QuickMatchDancer> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, QuickMatchDancer struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSongId()) {
        optionals.set(0);
      }
      if (struct.isSetPlayerBaseInfo()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetSongId()) {
        oprot.writeI16(struct.songId);
      }
      if (struct.isSetPlayerBaseInfo()) {
        struct.playerBaseInfo.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, QuickMatchDancer struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.songId = iprot.readI16();
        struct.setSongIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.playerBaseInfo = new PlayerBaseInfo();
        struct.playerBaseInfo.read(iprot);
        struct.setPlayerBaseInfoIsSet(true);
      }
    }
  }

}

