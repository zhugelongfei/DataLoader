/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 更新玩家红包信息
 */
public class SCUpdateLuckyMoneyProp implements org.apache.thrift.TBase<SCUpdateLuckyMoneyProp, SCUpdateLuckyMoneyProp._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCUpdateLuckyMoneyProp");

  private static final org.apache.thrift.protocol.TField TOTAL_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("totalNumber", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField LUCKY_MONEY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("luckyMoneyId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField SENDER_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("senderInfo", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField WORDS_FIELD_DESC = new org.apache.thrift.protocol.TField("words", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCUpdateLuckyMoneyPropStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCUpdateLuckyMoneyPropTupleSchemeFactory());
  }

  /**
   * 玩家红包数量
   */
  public int totalNumber; // required
  /**
   * 红包id
   */
  public long luckyMoneyId; // required
  /**
   * 发送者信息
   */
  public com.ling9527.music.common.msg.auto.PlayerBaseInfo senderInfo; // required
  /**
   * 红包类型
   * 
   * @see com.ling9527.music.common.msg.auto.LuckyMoneyType
   */
  public com.ling9527.music.common.msg.auto.LuckyMoneyType type; // required
  /**
   * 红包寄语
   */
  public String words; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 玩家红包数量
     */
    TOTAL_NUMBER((short)1, "totalNumber"),
    /**
     * 红包id
     */
    LUCKY_MONEY_ID((short)2, "luckyMoneyId"),
    /**
     * 发送者信息
     */
    SENDER_INFO((short)3, "senderInfo"),
    /**
     * 红包类型
     * 
     * @see com.ling9527.music.common.msg.auto.LuckyMoneyType
     */
    TYPE((short)4, "type"),
    /**
     * 红包寄语
     */
    WORDS((short)5, "words");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TOTAL_NUMBER
          return TOTAL_NUMBER;
        case 2: // LUCKY_MONEY_ID
          return LUCKY_MONEY_ID;
        case 3: // SENDER_INFO
          return SENDER_INFO;
        case 4: // TYPE
          return TYPE;
        case 5: // WORDS
          return WORDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOTALNUMBER_ISSET_ID = 0;
  private static final int __LUCKYMONEYID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TOTAL_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("totalNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LUCKY_MONEY_ID, new org.apache.thrift.meta_data.FieldMetaData("luckyMoneyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SENDER_INFO, new org.apache.thrift.meta_data.FieldMetaData("senderInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.PlayerBaseInfo.class)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.ling9527.music.common.msg.auto.LuckyMoneyType.class)));
    tmpMap.put(_Fields.WORDS, new org.apache.thrift.meta_data.FieldMetaData("words", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCUpdateLuckyMoneyProp.class, metaDataMap);
  }

  public SCUpdateLuckyMoneyProp() {
  }

  public SCUpdateLuckyMoneyProp(
    int totalNumber,
    long luckyMoneyId,
    com.ling9527.music.common.msg.auto.PlayerBaseInfo senderInfo,
    com.ling9527.music.common.msg.auto.LuckyMoneyType type,
    String words)
  {
    this();
    this.totalNumber = totalNumber;
    setTotalNumberIsSet(true);
    this.luckyMoneyId = luckyMoneyId;
    setLuckyMoneyIdIsSet(true);
    this.senderInfo = senderInfo;
    this.type = type;
    this.words = words;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCUpdateLuckyMoneyProp(SCUpdateLuckyMoneyProp other) {
    __isset_bitfield = other.__isset_bitfield;
    this.totalNumber = other.totalNumber;
    this.luckyMoneyId = other.luckyMoneyId;
    if (other.isSetSenderInfo()) {
      this.senderInfo = new com.ling9527.music.common.msg.auto.PlayerBaseInfo(other.senderInfo);
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetWords()) {
      this.words = other.words;
    }
  }

  public SCUpdateLuckyMoneyProp deepCopy() {
    return new SCUpdateLuckyMoneyProp(this);
  }

  @Override
  public void clear() {
    setTotalNumberIsSet(false);
    this.totalNumber = 0;
    setLuckyMoneyIdIsSet(false);
    this.luckyMoneyId = 0;
    this.senderInfo = null;
    this.type = null;
    this.words = null;
  }

  /**
   * 玩家红包数量
   */
  public int getTotalNumber() {
    return this.totalNumber;
  }

  /**
   * 玩家红包数量
   */
  public SCUpdateLuckyMoneyProp setTotalNumber(int totalNumber) {
    this.totalNumber = totalNumber;
    setTotalNumberIsSet(true);
    return this;
  }

  public void unsetTotalNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALNUMBER_ISSET_ID);
  }

  /** Returns true if field totalNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALNUMBER_ISSET_ID);
  }

  public void setTotalNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALNUMBER_ISSET_ID, value);
  }

  /**
   * 红包id
   */
  public long getLuckyMoneyId() {
    return this.luckyMoneyId;
  }

  /**
   * 红包id
   */
  public SCUpdateLuckyMoneyProp setLuckyMoneyId(long luckyMoneyId) {
    this.luckyMoneyId = luckyMoneyId;
    setLuckyMoneyIdIsSet(true);
    return this;
  }

  public void unsetLuckyMoneyId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LUCKYMONEYID_ISSET_ID);
  }

  /** Returns true if field luckyMoneyId is set (has been assigned a value) and false otherwise */
  public boolean isSetLuckyMoneyId() {
    return EncodingUtils.testBit(__isset_bitfield, __LUCKYMONEYID_ISSET_ID);
  }

  public void setLuckyMoneyIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LUCKYMONEYID_ISSET_ID, value);
  }

  /**
   * 发送者信息
   */
  public com.ling9527.music.common.msg.auto.PlayerBaseInfo getSenderInfo() {
    return this.senderInfo;
  }

  /**
   * 发送者信息
   */
  public SCUpdateLuckyMoneyProp setSenderInfo(com.ling9527.music.common.msg.auto.PlayerBaseInfo senderInfo) {
    this.senderInfo = senderInfo;
    return this;
  }

  public void unsetSenderInfo() {
    this.senderInfo = null;
  }

  /** Returns true if field senderInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetSenderInfo() {
    return this.senderInfo != null;
  }

  public void setSenderInfoIsSet(boolean value) {
    if (!value) {
      this.senderInfo = null;
    }
  }

  /**
   * 红包类型
   * 
   * @see com.ling9527.music.common.msg.auto.LuckyMoneyType
   */
  public com.ling9527.music.common.msg.auto.LuckyMoneyType getType() {
    return this.type;
  }

  /**
   * 红包类型
   * 
   * @see com.ling9527.music.common.msg.auto.LuckyMoneyType
   */
  public SCUpdateLuckyMoneyProp setType(com.ling9527.music.common.msg.auto.LuckyMoneyType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  /**
   * 红包寄语
   */
  public String getWords() {
    return this.words;
  }

  /**
   * 红包寄语
   */
  public SCUpdateLuckyMoneyProp setWords(String words) {
    this.words = words;
    return this;
  }

  public void unsetWords() {
    this.words = null;
  }

  /** Returns true if field words is set (has been assigned a value) and false otherwise */
  public boolean isSetWords() {
    return this.words != null;
  }

  public void setWordsIsSet(boolean value) {
    if (!value) {
      this.words = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TOTAL_NUMBER:
      if (value == null) {
        unsetTotalNumber();
      } else {
        setTotalNumber((Integer)value);
      }
      break;

    case LUCKY_MONEY_ID:
      if (value == null) {
        unsetLuckyMoneyId();
      } else {
        setLuckyMoneyId((Long)value);
      }
      break;

    case SENDER_INFO:
      if (value == null) {
        unsetSenderInfo();
      } else {
        setSenderInfo((com.ling9527.music.common.msg.auto.PlayerBaseInfo)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((com.ling9527.music.common.msg.auto.LuckyMoneyType)value);
      }
      break;

    case WORDS:
      if (value == null) {
        unsetWords();
      } else {
        setWords((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TOTAL_NUMBER:
      return Integer.valueOf(getTotalNumber());

    case LUCKY_MONEY_ID:
      return Long.valueOf(getLuckyMoneyId());

    case SENDER_INFO:
      return getSenderInfo();

    case TYPE:
      return getType();

    case WORDS:
      return getWords();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TOTAL_NUMBER:
      return isSetTotalNumber();
    case LUCKY_MONEY_ID:
      return isSetLuckyMoneyId();
    case SENDER_INFO:
      return isSetSenderInfo();
    case TYPE:
      return isSetType();
    case WORDS:
      return isSetWords();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCUpdateLuckyMoneyProp)
      return this.equals((SCUpdateLuckyMoneyProp)that);
    return false;
  }

  public boolean equals(SCUpdateLuckyMoneyProp that) {
    if (that == null)
      return false;

    boolean this_present_totalNumber = true;
    boolean that_present_totalNumber = true;
    if (this_present_totalNumber || that_present_totalNumber) {
      if (!(this_present_totalNumber && that_present_totalNumber))
        return false;
      if (this.totalNumber != that.totalNumber)
        return false;
    }

    boolean this_present_luckyMoneyId = true;
    boolean that_present_luckyMoneyId = true;
    if (this_present_luckyMoneyId || that_present_luckyMoneyId) {
      if (!(this_present_luckyMoneyId && that_present_luckyMoneyId))
        return false;
      if (this.luckyMoneyId != that.luckyMoneyId)
        return false;
    }

    boolean this_present_senderInfo = true && this.isSetSenderInfo();
    boolean that_present_senderInfo = true && that.isSetSenderInfo();
    if (this_present_senderInfo || that_present_senderInfo) {
      if (!(this_present_senderInfo && that_present_senderInfo))
        return false;
      if (!this.senderInfo.equals(that.senderInfo))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_words = true && this.isSetWords();
    boolean that_present_words = true && that.isSetWords();
    if (this_present_words || that_present_words) {
      if (!(this_present_words && that_present_words))
        return false;
      if (!this.words.equals(that.words))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCUpdateLuckyMoneyProp other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCUpdateLuckyMoneyProp typedOther = (SCUpdateLuckyMoneyProp)other;

    lastComparison = Boolean.valueOf(isSetTotalNumber()).compareTo(typedOther.isSetTotalNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalNumber, typedOther.totalNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLuckyMoneyId()).compareTo(typedOther.isSetLuckyMoneyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLuckyMoneyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.luckyMoneyId, typedOther.luckyMoneyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSenderInfo()).compareTo(typedOther.isSetSenderInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSenderInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.senderInfo, typedOther.senderInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, typedOther.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWords()).compareTo(typedOther.isSetWords());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWords()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.words, typedOther.words);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCUpdateLuckyMoneyProp(");
    boolean first = true;

    sb.append("totalNumber:");
    sb.append(this.totalNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("luckyMoneyId:");
    sb.append(this.luckyMoneyId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("senderInfo:");
    if (this.senderInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.senderInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("words:");
    if (this.words == null) {
      sb.append("null");
    } else {
      sb.append(this.words);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (senderInfo != null) {
      senderInfo.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCUpdateLuckyMoneyPropStandardSchemeFactory implements SchemeFactory {
    public SCUpdateLuckyMoneyPropStandardScheme getScheme() {
      return new SCUpdateLuckyMoneyPropStandardScheme();
    }
  }

  private static class SCUpdateLuckyMoneyPropStandardScheme extends StandardScheme<SCUpdateLuckyMoneyProp> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCUpdateLuckyMoneyProp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TOTAL_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalNumber = iprot.readI32();
              struct.setTotalNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LUCKY_MONEY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.luckyMoneyId = iprot.readI64();
              struct.setLuckyMoneyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SENDER_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.senderInfo = new com.ling9527.music.common.msg.auto.PlayerBaseInfo();
              struct.senderInfo.read(iprot);
              struct.setSenderInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = com.ling9527.music.common.msg.auto.LuckyMoneyType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // WORDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.words = iprot.readString();
              struct.setWordsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCUpdateLuckyMoneyProp struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TOTAL_NUMBER_FIELD_DESC);
      oprot.writeI32(struct.totalNumber);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LUCKY_MONEY_ID_FIELD_DESC);
      oprot.writeI64(struct.luckyMoneyId);
      oprot.writeFieldEnd();
      if (struct.senderInfo != null) {
        oprot.writeFieldBegin(SENDER_INFO_FIELD_DESC);
        struct.senderInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.words != null) {
        oprot.writeFieldBegin(WORDS_FIELD_DESC);
        oprot.writeString(struct.words);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCUpdateLuckyMoneyPropTupleSchemeFactory implements SchemeFactory {
    public SCUpdateLuckyMoneyPropTupleScheme getScheme() {
      return new SCUpdateLuckyMoneyPropTupleScheme();
    }
  }

  private static class SCUpdateLuckyMoneyPropTupleScheme extends TupleScheme<SCUpdateLuckyMoneyProp> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCUpdateLuckyMoneyProp struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTotalNumber()) {
        optionals.set(0);
      }
      if (struct.isSetLuckyMoneyId()) {
        optionals.set(1);
      }
      if (struct.isSetSenderInfo()) {
        optionals.set(2);
      }
      if (struct.isSetType()) {
        optionals.set(3);
      }
      if (struct.isSetWords()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetTotalNumber()) {
        oprot.writeI32(struct.totalNumber);
      }
      if (struct.isSetLuckyMoneyId()) {
        oprot.writeI64(struct.luckyMoneyId);
      }
      if (struct.isSetSenderInfo()) {
        struct.senderInfo.write(oprot);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetWords()) {
        oprot.writeString(struct.words);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCUpdateLuckyMoneyProp struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.totalNumber = iprot.readI32();
        struct.setTotalNumberIsSet(true);
      }
      if (incoming.get(1)) {
        struct.luckyMoneyId = iprot.readI64();
        struct.setLuckyMoneyIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.senderInfo = new com.ling9527.music.common.msg.auto.PlayerBaseInfo();
        struct.senderInfo.read(iprot);
        struct.setSenderInfoIsSet(true);
      }
      if (incoming.get(3)) {
        struct.type = com.ling9527.music.common.msg.auto.LuckyMoneyType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.words = iprot.readString();
        struct.setWordsIsSet(true);
      }
    }
  }

}

