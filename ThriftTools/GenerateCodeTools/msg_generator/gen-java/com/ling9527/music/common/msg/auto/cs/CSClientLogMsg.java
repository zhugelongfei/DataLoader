/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.cs;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 客服端日志消息
 */
public class CSClientLogMsg implements org.apache.thrift.TBase<CSClientLogMsg, CSClientLogMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CSClientLogMsg");

  private static final org.apache.thrift.protocol.TField GUILDE_LOG_FIELD_DESC = new org.apache.thrift.protocol.TField("guildeLog", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField PERFORMANCE_LOG_FIELD_DESC = new org.apache.thrift.protocol.TField("performanceLog", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField UPLOAD_PHOTO_LOG_FIELD_DESC = new org.apache.thrift.protocol.TField("uploadPhotoLog", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CSClientLogMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CSClientLogMsgTupleSchemeFactory());
  }

  /**
   * 引导日志
   */
  public com.ling9527.music.common.msg.auto.GuildeLog guildeLog; // optional
  /**
   * 性能按钮日志
   */
  public com.ling9527.music.common.msg.auto.PerformanceLog performanceLog; // optional
  /**
   * 上传照片日志
   */
  public com.ling9527.music.common.msg.auto.UploadPhotoLog uploadPhotoLog; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 引导日志
     */
    GUILDE_LOG((short)1, "guildeLog"),
    /**
     * 性能按钮日志
     */
    PERFORMANCE_LOG((short)2, "performanceLog"),
    /**
     * 上传照片日志
     */
    UPLOAD_PHOTO_LOG((short)3, "uploadPhotoLog");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GUILDE_LOG
          return GUILDE_LOG;
        case 2: // PERFORMANCE_LOG
          return PERFORMANCE_LOG;
        case 3: // UPLOAD_PHOTO_LOG
          return UPLOAD_PHOTO_LOG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.GUILDE_LOG,_Fields.PERFORMANCE_LOG,_Fields.UPLOAD_PHOTO_LOG};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GUILDE_LOG, new org.apache.thrift.meta_data.FieldMetaData("guildeLog", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.GuildeLog.class)));
    tmpMap.put(_Fields.PERFORMANCE_LOG, new org.apache.thrift.meta_data.FieldMetaData("performanceLog", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.PerformanceLog.class)));
    tmpMap.put(_Fields.UPLOAD_PHOTO_LOG, new org.apache.thrift.meta_data.FieldMetaData("uploadPhotoLog", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.UploadPhotoLog.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CSClientLogMsg.class, metaDataMap);
  }

  public CSClientLogMsg() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CSClientLogMsg(CSClientLogMsg other) {
    if (other.isSetGuildeLog()) {
      this.guildeLog = new com.ling9527.music.common.msg.auto.GuildeLog(other.guildeLog);
    }
    if (other.isSetPerformanceLog()) {
      this.performanceLog = new com.ling9527.music.common.msg.auto.PerformanceLog(other.performanceLog);
    }
    if (other.isSetUploadPhotoLog()) {
      this.uploadPhotoLog = new com.ling9527.music.common.msg.auto.UploadPhotoLog(other.uploadPhotoLog);
    }
  }

  public CSClientLogMsg deepCopy() {
    return new CSClientLogMsg(this);
  }

  @Override
  public void clear() {
    this.guildeLog = null;
    this.performanceLog = null;
    this.uploadPhotoLog = null;
  }

  /**
   * 引导日志
   */
  public com.ling9527.music.common.msg.auto.GuildeLog getGuildeLog() {
    return this.guildeLog;
  }

  /**
   * 引导日志
   */
  public CSClientLogMsg setGuildeLog(com.ling9527.music.common.msg.auto.GuildeLog guildeLog) {
    this.guildeLog = guildeLog;
    return this;
  }

  public void unsetGuildeLog() {
    this.guildeLog = null;
  }

  /** Returns true if field guildeLog is set (has been assigned a value) and false otherwise */
  public boolean isSetGuildeLog() {
    return this.guildeLog != null;
  }

  public void setGuildeLogIsSet(boolean value) {
    if (!value) {
      this.guildeLog = null;
    }
  }

  /**
   * 性能按钮日志
   */
  public com.ling9527.music.common.msg.auto.PerformanceLog getPerformanceLog() {
    return this.performanceLog;
  }

  /**
   * 性能按钮日志
   */
  public CSClientLogMsg setPerformanceLog(com.ling9527.music.common.msg.auto.PerformanceLog performanceLog) {
    this.performanceLog = performanceLog;
    return this;
  }

  public void unsetPerformanceLog() {
    this.performanceLog = null;
  }

  /** Returns true if field performanceLog is set (has been assigned a value) and false otherwise */
  public boolean isSetPerformanceLog() {
    return this.performanceLog != null;
  }

  public void setPerformanceLogIsSet(boolean value) {
    if (!value) {
      this.performanceLog = null;
    }
  }

  /**
   * 上传照片日志
   */
  public com.ling9527.music.common.msg.auto.UploadPhotoLog getUploadPhotoLog() {
    return this.uploadPhotoLog;
  }

  /**
   * 上传照片日志
   */
  public CSClientLogMsg setUploadPhotoLog(com.ling9527.music.common.msg.auto.UploadPhotoLog uploadPhotoLog) {
    this.uploadPhotoLog = uploadPhotoLog;
    return this;
  }

  public void unsetUploadPhotoLog() {
    this.uploadPhotoLog = null;
  }

  /** Returns true if field uploadPhotoLog is set (has been assigned a value) and false otherwise */
  public boolean isSetUploadPhotoLog() {
    return this.uploadPhotoLog != null;
  }

  public void setUploadPhotoLogIsSet(boolean value) {
    if (!value) {
      this.uploadPhotoLog = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case GUILDE_LOG:
      if (value == null) {
        unsetGuildeLog();
      } else {
        setGuildeLog((com.ling9527.music.common.msg.auto.GuildeLog)value);
      }
      break;

    case PERFORMANCE_LOG:
      if (value == null) {
        unsetPerformanceLog();
      } else {
        setPerformanceLog((com.ling9527.music.common.msg.auto.PerformanceLog)value);
      }
      break;

    case UPLOAD_PHOTO_LOG:
      if (value == null) {
        unsetUploadPhotoLog();
      } else {
        setUploadPhotoLog((com.ling9527.music.common.msg.auto.UploadPhotoLog)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case GUILDE_LOG:
      return getGuildeLog();

    case PERFORMANCE_LOG:
      return getPerformanceLog();

    case UPLOAD_PHOTO_LOG:
      return getUploadPhotoLog();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case GUILDE_LOG:
      return isSetGuildeLog();
    case PERFORMANCE_LOG:
      return isSetPerformanceLog();
    case UPLOAD_PHOTO_LOG:
      return isSetUploadPhotoLog();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CSClientLogMsg)
      return this.equals((CSClientLogMsg)that);
    return false;
  }

  public boolean equals(CSClientLogMsg that) {
    if (that == null)
      return false;

    boolean this_present_guildeLog = true && this.isSetGuildeLog();
    boolean that_present_guildeLog = true && that.isSetGuildeLog();
    if (this_present_guildeLog || that_present_guildeLog) {
      if (!(this_present_guildeLog && that_present_guildeLog))
        return false;
      if (!this.guildeLog.equals(that.guildeLog))
        return false;
    }

    boolean this_present_performanceLog = true && this.isSetPerformanceLog();
    boolean that_present_performanceLog = true && that.isSetPerformanceLog();
    if (this_present_performanceLog || that_present_performanceLog) {
      if (!(this_present_performanceLog && that_present_performanceLog))
        return false;
      if (!this.performanceLog.equals(that.performanceLog))
        return false;
    }

    boolean this_present_uploadPhotoLog = true && this.isSetUploadPhotoLog();
    boolean that_present_uploadPhotoLog = true && that.isSetUploadPhotoLog();
    if (this_present_uploadPhotoLog || that_present_uploadPhotoLog) {
      if (!(this_present_uploadPhotoLog && that_present_uploadPhotoLog))
        return false;
      if (!this.uploadPhotoLog.equals(that.uploadPhotoLog))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(CSClientLogMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CSClientLogMsg typedOther = (CSClientLogMsg)other;

    lastComparison = Boolean.valueOf(isSetGuildeLog()).compareTo(typedOther.isSetGuildeLog());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGuildeLog()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.guildeLog, typedOther.guildeLog);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPerformanceLog()).compareTo(typedOther.isSetPerformanceLog());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPerformanceLog()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.performanceLog, typedOther.performanceLog);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUploadPhotoLog()).compareTo(typedOther.isSetUploadPhotoLog());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUploadPhotoLog()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uploadPhotoLog, typedOther.uploadPhotoLog);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CSClientLogMsg(");
    boolean first = true;

    if (isSetGuildeLog()) {
      sb.append("guildeLog:");
      if (this.guildeLog == null) {
        sb.append("null");
      } else {
        sb.append(this.guildeLog);
      }
      first = false;
    }
    if (isSetPerformanceLog()) {
      if (!first) sb.append(", ");
      sb.append("performanceLog:");
      if (this.performanceLog == null) {
        sb.append("null");
      } else {
        sb.append(this.performanceLog);
      }
      first = false;
    }
    if (isSetUploadPhotoLog()) {
      if (!first) sb.append(", ");
      sb.append("uploadPhotoLog:");
      if (this.uploadPhotoLog == null) {
        sb.append("null");
      } else {
        sb.append(this.uploadPhotoLog);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (guildeLog != null) {
      guildeLog.validate();
    }
    if (performanceLog != null) {
      performanceLog.validate();
    }
    if (uploadPhotoLog != null) {
      uploadPhotoLog.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CSClientLogMsgStandardSchemeFactory implements SchemeFactory {
    public CSClientLogMsgStandardScheme getScheme() {
      return new CSClientLogMsgStandardScheme();
    }
  }

  private static class CSClientLogMsgStandardScheme extends StandardScheme<CSClientLogMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CSClientLogMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GUILDE_LOG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.guildeLog = new com.ling9527.music.common.msg.auto.GuildeLog();
              struct.guildeLog.read(iprot);
              struct.setGuildeLogIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PERFORMANCE_LOG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.performanceLog = new com.ling9527.music.common.msg.auto.PerformanceLog();
              struct.performanceLog.read(iprot);
              struct.setPerformanceLogIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // UPLOAD_PHOTO_LOG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.uploadPhotoLog = new com.ling9527.music.common.msg.auto.UploadPhotoLog();
              struct.uploadPhotoLog.read(iprot);
              struct.setUploadPhotoLogIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CSClientLogMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.guildeLog != null) {
        if (struct.isSetGuildeLog()) {
          oprot.writeFieldBegin(GUILDE_LOG_FIELD_DESC);
          struct.guildeLog.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.performanceLog != null) {
        if (struct.isSetPerformanceLog()) {
          oprot.writeFieldBegin(PERFORMANCE_LOG_FIELD_DESC);
          struct.performanceLog.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.uploadPhotoLog != null) {
        if (struct.isSetUploadPhotoLog()) {
          oprot.writeFieldBegin(UPLOAD_PHOTO_LOG_FIELD_DESC);
          struct.uploadPhotoLog.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CSClientLogMsgTupleSchemeFactory implements SchemeFactory {
    public CSClientLogMsgTupleScheme getScheme() {
      return new CSClientLogMsgTupleScheme();
    }
  }

  private static class CSClientLogMsgTupleScheme extends TupleScheme<CSClientLogMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CSClientLogMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetGuildeLog()) {
        optionals.set(0);
      }
      if (struct.isSetPerformanceLog()) {
        optionals.set(1);
      }
      if (struct.isSetUploadPhotoLog()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetGuildeLog()) {
        struct.guildeLog.write(oprot);
      }
      if (struct.isSetPerformanceLog()) {
        struct.performanceLog.write(oprot);
      }
      if (struct.isSetUploadPhotoLog()) {
        struct.uploadPhotoLog.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CSClientLogMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.guildeLog = new com.ling9527.music.common.msg.auto.GuildeLog();
        struct.guildeLog.read(iprot);
        struct.setGuildeLogIsSet(true);
      }
      if (incoming.get(1)) {
        struct.performanceLog = new com.ling9527.music.common.msg.auto.PerformanceLog();
        struct.performanceLog.read(iprot);
        struct.setPerformanceLogIsSet(true);
      }
      if (incoming.get(2)) {
        struct.uploadPhotoLog = new com.ling9527.music.common.msg.auto.UploadPhotoLog();
        struct.uploadPhotoLog.read(iprot);
        struct.setUploadPhotoLogIsSet(true);
      }
    }
  }

}

