/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 性能按钮日志
 */
public class PerformanceLog implements org.apache.thrift.TBase<PerformanceLog, PerformanceLog._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PerformanceLog");

  private static final org.apache.thrift.protocol.TField SCENE_FIELD_DESC = new org.apache.thrift.protocol.TField("scene", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SCENE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sceneId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField CLOSE_FIELD_DESC = new org.apache.thrift.protocol.TField("close", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PerformanceLogStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PerformanceLogTupleSchemeFactory());
  }

  /**
   * 点击时所在场景：房间、游戏中
   */
  public String scene; // required
  /**
   * 生涯梦工厂闯关时则记录关卡ID、劲舞大厅则记录房间ID等
   */
  public int sceneId; // required
  /**
   * 0：正常；1：关闭
   */
  public int close; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 点击时所在场景：房间、游戏中
     */
    SCENE((short)1, "scene"),
    /**
     * 生涯梦工厂闯关时则记录关卡ID、劲舞大厅则记录房间ID等
     */
    SCENE_ID((short)2, "sceneId"),
    /**
     * 0：正常；1：关闭
     */
    CLOSE((short)3, "close");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SCENE
          return SCENE;
        case 2: // SCENE_ID
          return SCENE_ID;
        case 3: // CLOSE
          return CLOSE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SCENEID_ISSET_ID = 0;
  private static final int __CLOSE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SCENE, new org.apache.thrift.meta_data.FieldMetaData("scene", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SCENE_ID, new org.apache.thrift.meta_data.FieldMetaData("sceneId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CLOSE, new org.apache.thrift.meta_data.FieldMetaData("close", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PerformanceLog.class, metaDataMap);
  }

  public PerformanceLog() {
  }

  public PerformanceLog(
    String scene,
    int sceneId,
    int close)
  {
    this();
    this.scene = scene;
    this.sceneId = sceneId;
    setSceneIdIsSet(true);
    this.close = close;
    setCloseIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PerformanceLog(PerformanceLog other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetScene()) {
      this.scene = other.scene;
    }
    this.sceneId = other.sceneId;
    this.close = other.close;
  }

  public PerformanceLog deepCopy() {
    return new PerformanceLog(this);
  }

  @Override
  public void clear() {
    this.scene = null;
    setSceneIdIsSet(false);
    this.sceneId = 0;
    setCloseIsSet(false);
    this.close = 0;
  }

  /**
   * 点击时所在场景：房间、游戏中
   */
  public String getScene() {
    return this.scene;
  }

  /**
   * 点击时所在场景：房间、游戏中
   */
  public PerformanceLog setScene(String scene) {
    this.scene = scene;
    return this;
  }

  public void unsetScene() {
    this.scene = null;
  }

  /** Returns true if field scene is set (has been assigned a value) and false otherwise */
  public boolean isSetScene() {
    return this.scene != null;
  }

  public void setSceneIsSet(boolean value) {
    if (!value) {
      this.scene = null;
    }
  }

  /**
   * 生涯梦工厂闯关时则记录关卡ID、劲舞大厅则记录房间ID等
   */
  public int getSceneId() {
    return this.sceneId;
  }

  /**
   * 生涯梦工厂闯关时则记录关卡ID、劲舞大厅则记录房间ID等
   */
  public PerformanceLog setSceneId(int sceneId) {
    this.sceneId = sceneId;
    setSceneIdIsSet(true);
    return this;
  }

  public void unsetSceneId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SCENEID_ISSET_ID);
  }

  /** Returns true if field sceneId is set (has been assigned a value) and false otherwise */
  public boolean isSetSceneId() {
    return EncodingUtils.testBit(__isset_bitfield, __SCENEID_ISSET_ID);
  }

  public void setSceneIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SCENEID_ISSET_ID, value);
  }

  /**
   * 0：正常；1：关闭
   */
  public int getClose() {
    return this.close;
  }

  /**
   * 0：正常；1：关闭
   */
  public PerformanceLog setClose(int close) {
    this.close = close;
    setCloseIsSet(true);
    return this;
  }

  public void unsetClose() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLOSE_ISSET_ID);
  }

  /** Returns true if field close is set (has been assigned a value) and false otherwise */
  public boolean isSetClose() {
    return EncodingUtils.testBit(__isset_bitfield, __CLOSE_ISSET_ID);
  }

  public void setCloseIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLOSE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SCENE:
      if (value == null) {
        unsetScene();
      } else {
        setScene((String)value);
      }
      break;

    case SCENE_ID:
      if (value == null) {
        unsetSceneId();
      } else {
        setSceneId((Integer)value);
      }
      break;

    case CLOSE:
      if (value == null) {
        unsetClose();
      } else {
        setClose((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SCENE:
      return getScene();

    case SCENE_ID:
      return Integer.valueOf(getSceneId());

    case CLOSE:
      return Integer.valueOf(getClose());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SCENE:
      return isSetScene();
    case SCENE_ID:
      return isSetSceneId();
    case CLOSE:
      return isSetClose();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PerformanceLog)
      return this.equals((PerformanceLog)that);
    return false;
  }

  public boolean equals(PerformanceLog that) {
    if (that == null)
      return false;

    boolean this_present_scene = true && this.isSetScene();
    boolean that_present_scene = true && that.isSetScene();
    if (this_present_scene || that_present_scene) {
      if (!(this_present_scene && that_present_scene))
        return false;
      if (!this.scene.equals(that.scene))
        return false;
    }

    boolean this_present_sceneId = true;
    boolean that_present_sceneId = true;
    if (this_present_sceneId || that_present_sceneId) {
      if (!(this_present_sceneId && that_present_sceneId))
        return false;
      if (this.sceneId != that.sceneId)
        return false;
    }

    boolean this_present_close = true;
    boolean that_present_close = true;
    if (this_present_close || that_present_close) {
      if (!(this_present_close && that_present_close))
        return false;
      if (this.close != that.close)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(PerformanceLog other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    PerformanceLog typedOther = (PerformanceLog)other;

    lastComparison = Boolean.valueOf(isSetScene()).compareTo(typedOther.isSetScene());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScene()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scene, typedOther.scene);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSceneId()).compareTo(typedOther.isSetSceneId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSceneId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sceneId, typedOther.sceneId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClose()).compareTo(typedOther.isSetClose());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClose()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.close, typedOther.close);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PerformanceLog(");
    boolean first = true;

    sb.append("scene:");
    if (this.scene == null) {
      sb.append("null");
    } else {
      sb.append(this.scene);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sceneId:");
    sb.append(this.sceneId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("close:");
    sb.append(this.close);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PerformanceLogStandardSchemeFactory implements SchemeFactory {
    public PerformanceLogStandardScheme getScheme() {
      return new PerformanceLogStandardScheme();
    }
  }

  private static class PerformanceLogStandardScheme extends StandardScheme<PerformanceLog> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PerformanceLog struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SCENE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.scene = iprot.readString();
              struct.setSceneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SCENE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sceneId = iprot.readI32();
              struct.setSceneIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CLOSE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.close = iprot.readI32();
              struct.setCloseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PerformanceLog struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.scene != null) {
        oprot.writeFieldBegin(SCENE_FIELD_DESC);
        oprot.writeString(struct.scene);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SCENE_ID_FIELD_DESC);
      oprot.writeI32(struct.sceneId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CLOSE_FIELD_DESC);
      oprot.writeI32(struct.close);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PerformanceLogTupleSchemeFactory implements SchemeFactory {
    public PerformanceLogTupleScheme getScheme() {
      return new PerformanceLogTupleScheme();
    }
  }

  private static class PerformanceLogTupleScheme extends TupleScheme<PerformanceLog> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PerformanceLog struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetScene()) {
        optionals.set(0);
      }
      if (struct.isSetSceneId()) {
        optionals.set(1);
      }
      if (struct.isSetClose()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetScene()) {
        oprot.writeString(struct.scene);
      }
      if (struct.isSetSceneId()) {
        oprot.writeI32(struct.sceneId);
      }
      if (struct.isSetClose()) {
        oprot.writeI32(struct.close);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PerformanceLog struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.scene = iprot.readString();
        struct.setSceneIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sceneId = iprot.readI32();
        struct.setSceneIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.close = iprot.readI32();
        struct.setCloseIsSet(true);
      }
    }
  }

}

