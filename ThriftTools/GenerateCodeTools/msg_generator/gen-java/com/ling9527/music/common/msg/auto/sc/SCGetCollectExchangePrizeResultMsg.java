/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SCGetCollectExchangePrizeResultMsg implements org.apache.thrift.TBase<SCGetCollectExchangePrizeResultMsg, SCGetCollectExchangePrizeResultMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCGetCollectExchangePrizeResultMsg");

  private static final org.apache.thrift.protocol.TField ACTIVITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("activityId", org.apache.thrift.protocol.TType.I16, (short)1);
  private static final org.apache.thrift.protocol.TField INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("index", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("result", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField EXCHANGED_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("exchangedCount", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField EXCHANGE_TOTAL_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("exchangeTotalCount", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField DAY_EXCHANGED_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("dayExchangedCount", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField DAT_EXCHANGE_TOTAL_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("datExchangeTotalCount", org.apache.thrift.protocol.TType.I32, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCGetCollectExchangePrizeResultMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCGetCollectExchangePrizeResultMsgTupleSchemeFactory());
  }

  public short activityId; // required
  public byte index; // required
  public boolean result; // required
  public int exchangedCount; // required
  public int exchangeTotalCount; // required
  public int dayExchangedCount; // required
  public int datExchangeTotalCount; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ACTIVITY_ID((short)1, "activityId"),
    INDEX((short)2, "index"),
    RESULT((short)3, "result"),
    EXCHANGED_COUNT((short)4, "exchangedCount"),
    EXCHANGE_TOTAL_COUNT((short)5, "exchangeTotalCount"),
    DAY_EXCHANGED_COUNT((short)6, "dayExchangedCount"),
    DAT_EXCHANGE_TOTAL_COUNT((short)7, "datExchangeTotalCount");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACTIVITY_ID
          return ACTIVITY_ID;
        case 2: // INDEX
          return INDEX;
        case 3: // RESULT
          return RESULT;
        case 4: // EXCHANGED_COUNT
          return EXCHANGED_COUNT;
        case 5: // EXCHANGE_TOTAL_COUNT
          return EXCHANGE_TOTAL_COUNT;
        case 6: // DAY_EXCHANGED_COUNT
          return DAY_EXCHANGED_COUNT;
        case 7: // DAT_EXCHANGE_TOTAL_COUNT
          return DAT_EXCHANGE_TOTAL_COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ACTIVITYID_ISSET_ID = 0;
  private static final int __INDEX_ISSET_ID = 1;
  private static final int __RESULT_ISSET_ID = 2;
  private static final int __EXCHANGEDCOUNT_ISSET_ID = 3;
  private static final int __EXCHANGETOTALCOUNT_ISSET_ID = 4;
  private static final int __DAYEXCHANGEDCOUNT_ISSET_ID = 5;
  private static final int __DATEXCHANGETOTALCOUNT_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACTIVITY_ID, new org.apache.thrift.meta_data.FieldMetaData("activityId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.INDEX, new org.apache.thrift.meta_data.FieldMetaData("index", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.RESULT, new org.apache.thrift.meta_data.FieldMetaData("result", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.EXCHANGED_COUNT, new org.apache.thrift.meta_data.FieldMetaData("exchangedCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXCHANGE_TOTAL_COUNT, new org.apache.thrift.meta_data.FieldMetaData("exchangeTotalCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DAY_EXCHANGED_COUNT, new org.apache.thrift.meta_data.FieldMetaData("dayExchangedCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DAT_EXCHANGE_TOTAL_COUNT, new org.apache.thrift.meta_data.FieldMetaData("datExchangeTotalCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCGetCollectExchangePrizeResultMsg.class, metaDataMap);
  }

  public SCGetCollectExchangePrizeResultMsg() {
  }

  public SCGetCollectExchangePrizeResultMsg(
    short activityId,
    byte index,
    boolean result,
    int exchangedCount,
    int exchangeTotalCount,
    int dayExchangedCount,
    int datExchangeTotalCount)
  {
    this();
    this.activityId = activityId;
    setActivityIdIsSet(true);
    this.index = index;
    setIndexIsSet(true);
    this.result = result;
    setResultIsSet(true);
    this.exchangedCount = exchangedCount;
    setExchangedCountIsSet(true);
    this.exchangeTotalCount = exchangeTotalCount;
    setExchangeTotalCountIsSet(true);
    this.dayExchangedCount = dayExchangedCount;
    setDayExchangedCountIsSet(true);
    this.datExchangeTotalCount = datExchangeTotalCount;
    setDatExchangeTotalCountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCGetCollectExchangePrizeResultMsg(SCGetCollectExchangePrizeResultMsg other) {
    __isset_bitfield = other.__isset_bitfield;
    this.activityId = other.activityId;
    this.index = other.index;
    this.result = other.result;
    this.exchangedCount = other.exchangedCount;
    this.exchangeTotalCount = other.exchangeTotalCount;
    this.dayExchangedCount = other.dayExchangedCount;
    this.datExchangeTotalCount = other.datExchangeTotalCount;
  }

  public SCGetCollectExchangePrizeResultMsg deepCopy() {
    return new SCGetCollectExchangePrizeResultMsg(this);
  }

  @Override
  public void clear() {
    setActivityIdIsSet(false);
    this.activityId = 0;
    setIndexIsSet(false);
    this.index = 0;
    setResultIsSet(false);
    this.result = false;
    setExchangedCountIsSet(false);
    this.exchangedCount = 0;
    setExchangeTotalCountIsSet(false);
    this.exchangeTotalCount = 0;
    setDayExchangedCountIsSet(false);
    this.dayExchangedCount = 0;
    setDatExchangeTotalCountIsSet(false);
    this.datExchangeTotalCount = 0;
  }

  public short getActivityId() {
    return this.activityId;
  }

  public SCGetCollectExchangePrizeResultMsg setActivityId(short activityId) {
    this.activityId = activityId;
    setActivityIdIsSet(true);
    return this;
  }

  public void unsetActivityId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIVITYID_ISSET_ID);
  }

  /** Returns true if field activityId is set (has been assigned a value) and false otherwise */
  public boolean isSetActivityId() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTIVITYID_ISSET_ID);
  }

  public void setActivityIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIVITYID_ISSET_ID, value);
  }

  public byte getIndex() {
    return this.index;
  }

  public SCGetCollectExchangePrizeResultMsg setIndex(byte index) {
    this.index = index;
    setIndexIsSet(true);
    return this;
  }

  public void unsetIndex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INDEX_ISSET_ID);
  }

  /** Returns true if field index is set (has been assigned a value) and false otherwise */
  public boolean isSetIndex() {
    return EncodingUtils.testBit(__isset_bitfield, __INDEX_ISSET_ID);
  }

  public void setIndexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INDEX_ISSET_ID, value);
  }

  public boolean isResult() {
    return this.result;
  }

  public SCGetCollectExchangePrizeResultMsg setResult(boolean result) {
    this.result = result;
    setResultIsSet(true);
    return this;
  }

  public void unsetResult() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RESULT_ISSET_ID);
  }

  /** Returns true if field result is set (has been assigned a value) and false otherwise */
  public boolean isSetResult() {
    return EncodingUtils.testBit(__isset_bitfield, __RESULT_ISSET_ID);
  }

  public void setResultIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RESULT_ISSET_ID, value);
  }

  public int getExchangedCount() {
    return this.exchangedCount;
  }

  public SCGetCollectExchangePrizeResultMsg setExchangedCount(int exchangedCount) {
    this.exchangedCount = exchangedCount;
    setExchangedCountIsSet(true);
    return this;
  }

  public void unsetExchangedCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXCHANGEDCOUNT_ISSET_ID);
  }

  /** Returns true if field exchangedCount is set (has been assigned a value) and false otherwise */
  public boolean isSetExchangedCount() {
    return EncodingUtils.testBit(__isset_bitfield, __EXCHANGEDCOUNT_ISSET_ID);
  }

  public void setExchangedCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXCHANGEDCOUNT_ISSET_ID, value);
  }

  public int getExchangeTotalCount() {
    return this.exchangeTotalCount;
  }

  public SCGetCollectExchangePrizeResultMsg setExchangeTotalCount(int exchangeTotalCount) {
    this.exchangeTotalCount = exchangeTotalCount;
    setExchangeTotalCountIsSet(true);
    return this;
  }

  public void unsetExchangeTotalCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXCHANGETOTALCOUNT_ISSET_ID);
  }

  /** Returns true if field exchangeTotalCount is set (has been assigned a value) and false otherwise */
  public boolean isSetExchangeTotalCount() {
    return EncodingUtils.testBit(__isset_bitfield, __EXCHANGETOTALCOUNT_ISSET_ID);
  }

  public void setExchangeTotalCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXCHANGETOTALCOUNT_ISSET_ID, value);
  }

  public int getDayExchangedCount() {
    return this.dayExchangedCount;
  }

  public SCGetCollectExchangePrizeResultMsg setDayExchangedCount(int dayExchangedCount) {
    this.dayExchangedCount = dayExchangedCount;
    setDayExchangedCountIsSet(true);
    return this;
  }

  public void unsetDayExchangedCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DAYEXCHANGEDCOUNT_ISSET_ID);
  }

  /** Returns true if field dayExchangedCount is set (has been assigned a value) and false otherwise */
  public boolean isSetDayExchangedCount() {
    return EncodingUtils.testBit(__isset_bitfield, __DAYEXCHANGEDCOUNT_ISSET_ID);
  }

  public void setDayExchangedCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DAYEXCHANGEDCOUNT_ISSET_ID, value);
  }

  public int getDatExchangeTotalCount() {
    return this.datExchangeTotalCount;
  }

  public SCGetCollectExchangePrizeResultMsg setDatExchangeTotalCount(int datExchangeTotalCount) {
    this.datExchangeTotalCount = datExchangeTotalCount;
    setDatExchangeTotalCountIsSet(true);
    return this;
  }

  public void unsetDatExchangeTotalCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATEXCHANGETOTALCOUNT_ISSET_ID);
  }

  /** Returns true if field datExchangeTotalCount is set (has been assigned a value) and false otherwise */
  public boolean isSetDatExchangeTotalCount() {
    return EncodingUtils.testBit(__isset_bitfield, __DATEXCHANGETOTALCOUNT_ISSET_ID);
  }

  public void setDatExchangeTotalCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATEXCHANGETOTALCOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ACTIVITY_ID:
      if (value == null) {
        unsetActivityId();
      } else {
        setActivityId((Short)value);
      }
      break;

    case INDEX:
      if (value == null) {
        unsetIndex();
      } else {
        setIndex((Byte)value);
      }
      break;

    case RESULT:
      if (value == null) {
        unsetResult();
      } else {
        setResult((Boolean)value);
      }
      break;

    case EXCHANGED_COUNT:
      if (value == null) {
        unsetExchangedCount();
      } else {
        setExchangedCount((Integer)value);
      }
      break;

    case EXCHANGE_TOTAL_COUNT:
      if (value == null) {
        unsetExchangeTotalCount();
      } else {
        setExchangeTotalCount((Integer)value);
      }
      break;

    case DAY_EXCHANGED_COUNT:
      if (value == null) {
        unsetDayExchangedCount();
      } else {
        setDayExchangedCount((Integer)value);
      }
      break;

    case DAT_EXCHANGE_TOTAL_COUNT:
      if (value == null) {
        unsetDatExchangeTotalCount();
      } else {
        setDatExchangeTotalCount((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ACTIVITY_ID:
      return Short.valueOf(getActivityId());

    case INDEX:
      return Byte.valueOf(getIndex());

    case RESULT:
      return Boolean.valueOf(isResult());

    case EXCHANGED_COUNT:
      return Integer.valueOf(getExchangedCount());

    case EXCHANGE_TOTAL_COUNT:
      return Integer.valueOf(getExchangeTotalCount());

    case DAY_EXCHANGED_COUNT:
      return Integer.valueOf(getDayExchangedCount());

    case DAT_EXCHANGE_TOTAL_COUNT:
      return Integer.valueOf(getDatExchangeTotalCount());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ACTIVITY_ID:
      return isSetActivityId();
    case INDEX:
      return isSetIndex();
    case RESULT:
      return isSetResult();
    case EXCHANGED_COUNT:
      return isSetExchangedCount();
    case EXCHANGE_TOTAL_COUNT:
      return isSetExchangeTotalCount();
    case DAY_EXCHANGED_COUNT:
      return isSetDayExchangedCount();
    case DAT_EXCHANGE_TOTAL_COUNT:
      return isSetDatExchangeTotalCount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCGetCollectExchangePrizeResultMsg)
      return this.equals((SCGetCollectExchangePrizeResultMsg)that);
    return false;
  }

  public boolean equals(SCGetCollectExchangePrizeResultMsg that) {
    if (that == null)
      return false;

    boolean this_present_activityId = true;
    boolean that_present_activityId = true;
    if (this_present_activityId || that_present_activityId) {
      if (!(this_present_activityId && that_present_activityId))
        return false;
      if (this.activityId != that.activityId)
        return false;
    }

    boolean this_present_index = true;
    boolean that_present_index = true;
    if (this_present_index || that_present_index) {
      if (!(this_present_index && that_present_index))
        return false;
      if (this.index != that.index)
        return false;
    }

    boolean this_present_result = true;
    boolean that_present_result = true;
    if (this_present_result || that_present_result) {
      if (!(this_present_result && that_present_result))
        return false;
      if (this.result != that.result)
        return false;
    }

    boolean this_present_exchangedCount = true;
    boolean that_present_exchangedCount = true;
    if (this_present_exchangedCount || that_present_exchangedCount) {
      if (!(this_present_exchangedCount && that_present_exchangedCount))
        return false;
      if (this.exchangedCount != that.exchangedCount)
        return false;
    }

    boolean this_present_exchangeTotalCount = true;
    boolean that_present_exchangeTotalCount = true;
    if (this_present_exchangeTotalCount || that_present_exchangeTotalCount) {
      if (!(this_present_exchangeTotalCount && that_present_exchangeTotalCount))
        return false;
      if (this.exchangeTotalCount != that.exchangeTotalCount)
        return false;
    }

    boolean this_present_dayExchangedCount = true;
    boolean that_present_dayExchangedCount = true;
    if (this_present_dayExchangedCount || that_present_dayExchangedCount) {
      if (!(this_present_dayExchangedCount && that_present_dayExchangedCount))
        return false;
      if (this.dayExchangedCount != that.dayExchangedCount)
        return false;
    }

    boolean this_present_datExchangeTotalCount = true;
    boolean that_present_datExchangeTotalCount = true;
    if (this_present_datExchangeTotalCount || that_present_datExchangeTotalCount) {
      if (!(this_present_datExchangeTotalCount && that_present_datExchangeTotalCount))
        return false;
      if (this.datExchangeTotalCount != that.datExchangeTotalCount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCGetCollectExchangePrizeResultMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCGetCollectExchangePrizeResultMsg typedOther = (SCGetCollectExchangePrizeResultMsg)other;

    lastComparison = Boolean.valueOf(isSetActivityId()).compareTo(typedOther.isSetActivityId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActivityId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activityId, typedOther.activityId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIndex()).compareTo(typedOther.isSetIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.index, typedOther.index);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResult()).compareTo(typedOther.isSetResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.result, typedOther.result);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchangedCount()).compareTo(typedOther.isSetExchangedCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchangedCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchangedCount, typedOther.exchangedCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchangeTotalCount()).compareTo(typedOther.isSetExchangeTotalCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchangeTotalCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchangeTotalCount, typedOther.exchangeTotalCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDayExchangedCount()).compareTo(typedOther.isSetDayExchangedCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDayExchangedCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dayExchangedCount, typedOther.dayExchangedCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDatExchangeTotalCount()).compareTo(typedOther.isSetDatExchangeTotalCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatExchangeTotalCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datExchangeTotalCount, typedOther.datExchangeTotalCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCGetCollectExchangePrizeResultMsg(");
    boolean first = true;

    sb.append("activityId:");
    sb.append(this.activityId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("index:");
    sb.append(this.index);
    first = false;
    if (!first) sb.append(", ");
    sb.append("result:");
    sb.append(this.result);
    first = false;
    if (!first) sb.append(", ");
    sb.append("exchangedCount:");
    sb.append(this.exchangedCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("exchangeTotalCount:");
    sb.append(this.exchangeTotalCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dayExchangedCount:");
    sb.append(this.dayExchangedCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("datExchangeTotalCount:");
    sb.append(this.datExchangeTotalCount);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCGetCollectExchangePrizeResultMsgStandardSchemeFactory implements SchemeFactory {
    public SCGetCollectExchangePrizeResultMsgStandardScheme getScheme() {
      return new SCGetCollectExchangePrizeResultMsgStandardScheme();
    }
  }

  private static class SCGetCollectExchangePrizeResultMsgStandardScheme extends StandardScheme<SCGetCollectExchangePrizeResultMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCGetCollectExchangePrizeResultMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ACTIVITY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.activityId = iprot.readI16();
              struct.setActivityIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.index = iprot.readByte();
              struct.setIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.result = iprot.readBool();
              struct.setResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EXCHANGED_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.exchangedCount = iprot.readI32();
              struct.setExchangedCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EXCHANGE_TOTAL_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.exchangeTotalCount = iprot.readI32();
              struct.setExchangeTotalCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DAY_EXCHANGED_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dayExchangedCount = iprot.readI32();
              struct.setDayExchangedCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DAT_EXCHANGE_TOTAL_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.datExchangeTotalCount = iprot.readI32();
              struct.setDatExchangeTotalCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCGetCollectExchangePrizeResultMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ACTIVITY_ID_FIELD_DESC);
      oprot.writeI16(struct.activityId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INDEX_FIELD_DESC);
      oprot.writeByte(struct.index);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RESULT_FIELD_DESC);
      oprot.writeBool(struct.result);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXCHANGED_COUNT_FIELD_DESC);
      oprot.writeI32(struct.exchangedCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXCHANGE_TOTAL_COUNT_FIELD_DESC);
      oprot.writeI32(struct.exchangeTotalCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DAY_EXCHANGED_COUNT_FIELD_DESC);
      oprot.writeI32(struct.dayExchangedCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DAT_EXCHANGE_TOTAL_COUNT_FIELD_DESC);
      oprot.writeI32(struct.datExchangeTotalCount);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCGetCollectExchangePrizeResultMsgTupleSchemeFactory implements SchemeFactory {
    public SCGetCollectExchangePrizeResultMsgTupleScheme getScheme() {
      return new SCGetCollectExchangePrizeResultMsgTupleScheme();
    }
  }

  private static class SCGetCollectExchangePrizeResultMsgTupleScheme extends TupleScheme<SCGetCollectExchangePrizeResultMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCGetCollectExchangePrizeResultMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetActivityId()) {
        optionals.set(0);
      }
      if (struct.isSetIndex()) {
        optionals.set(1);
      }
      if (struct.isSetResult()) {
        optionals.set(2);
      }
      if (struct.isSetExchangedCount()) {
        optionals.set(3);
      }
      if (struct.isSetExchangeTotalCount()) {
        optionals.set(4);
      }
      if (struct.isSetDayExchangedCount()) {
        optionals.set(5);
      }
      if (struct.isSetDatExchangeTotalCount()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetActivityId()) {
        oprot.writeI16(struct.activityId);
      }
      if (struct.isSetIndex()) {
        oprot.writeByte(struct.index);
      }
      if (struct.isSetResult()) {
        oprot.writeBool(struct.result);
      }
      if (struct.isSetExchangedCount()) {
        oprot.writeI32(struct.exchangedCount);
      }
      if (struct.isSetExchangeTotalCount()) {
        oprot.writeI32(struct.exchangeTotalCount);
      }
      if (struct.isSetDayExchangedCount()) {
        oprot.writeI32(struct.dayExchangedCount);
      }
      if (struct.isSetDatExchangeTotalCount()) {
        oprot.writeI32(struct.datExchangeTotalCount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCGetCollectExchangePrizeResultMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.activityId = iprot.readI16();
        struct.setActivityIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.index = iprot.readByte();
        struct.setIndexIsSet(true);
      }
      if (incoming.get(2)) {
        struct.result = iprot.readBool();
        struct.setResultIsSet(true);
      }
      if (incoming.get(3)) {
        struct.exchangedCount = iprot.readI32();
        struct.setExchangedCountIsSet(true);
      }
      if (incoming.get(4)) {
        struct.exchangeTotalCount = iprot.readI32();
        struct.setExchangeTotalCountIsSet(true);
      }
      if (incoming.get(5)) {
        struct.dayExchangedCount = iprot.readI32();
        struct.setDayExchangedCountIsSet(true);
      }
      if (incoming.get(6)) {
        struct.datExchangeTotalCount = iprot.readI32();
        struct.setDatExchangeTotalCountIsSet(true);
      }
    }
  }

}

