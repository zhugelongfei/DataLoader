/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.cs;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CSQuickStartMsg implements org.apache.thrift.TBase<CSQuickStartMsg, CSQuickStartMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CSQuickStartMsg");

  private static final org.apache.thrift.protocol.TField MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("mode", org.apache.thrift.protocol.TType.BYTE, (short)1);
  private static final org.apache.thrift.protocol.TField SONG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("songId", org.apache.thrift.protocol.TType.I16, (short)2);
  private static final org.apache.thrift.protocol.TField SONG_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("songLevel", org.apache.thrift.protocol.TType.BYTE, (short)3);
  private static final org.apache.thrift.protocol.TField QUICK_START_CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("quickStartConfig", org.apache.thrift.protocol.TType.BYTE, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CSQuickStartMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CSQuickStartMsgTupleSchemeFactory());
  }

  public byte mode; // required
  public short songId; // required
  public byte songLevel; // required
  /**
   * bit 1、skip invite   2、diff music   3、diff level
   */
  public byte quickStartConfig; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MODE((short)1, "mode"),
    SONG_ID((short)2, "songId"),
    SONG_LEVEL((short)3, "songLevel"),
    /**
     * bit 1、skip invite   2、diff music   3、diff level
     */
    QUICK_START_CONFIG((short)5, "quickStartConfig");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MODE
          return MODE;
        case 2: // SONG_ID
          return SONG_ID;
        case 3: // SONG_LEVEL
          return SONG_LEVEL;
        case 5: // QUICK_START_CONFIG
          return QUICK_START_CONFIG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MODE_ISSET_ID = 0;
  private static final int __SONGID_ISSET_ID = 1;
  private static final int __SONGLEVEL_ISSET_ID = 2;
  private static final int __QUICKSTARTCONFIG_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MODE, new org.apache.thrift.meta_data.FieldMetaData("mode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.SONG_ID, new org.apache.thrift.meta_data.FieldMetaData("songId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.SONG_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("songLevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.QUICK_START_CONFIG, new org.apache.thrift.meta_data.FieldMetaData("quickStartConfig", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CSQuickStartMsg.class, metaDataMap);
  }

  public CSQuickStartMsg() {
  }

  public CSQuickStartMsg(
    byte mode,
    short songId,
    byte songLevel,
    byte quickStartConfig)
  {
    this();
    this.mode = mode;
    setModeIsSet(true);
    this.songId = songId;
    setSongIdIsSet(true);
    this.songLevel = songLevel;
    setSongLevelIsSet(true);
    this.quickStartConfig = quickStartConfig;
    setQuickStartConfigIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CSQuickStartMsg(CSQuickStartMsg other) {
    __isset_bitfield = other.__isset_bitfield;
    this.mode = other.mode;
    this.songId = other.songId;
    this.songLevel = other.songLevel;
    this.quickStartConfig = other.quickStartConfig;
  }

  public CSQuickStartMsg deepCopy() {
    return new CSQuickStartMsg(this);
  }

  @Override
  public void clear() {
    setModeIsSet(false);
    this.mode = 0;
    setSongIdIsSet(false);
    this.songId = 0;
    setSongLevelIsSet(false);
    this.songLevel = 0;
    setQuickStartConfigIsSet(false);
    this.quickStartConfig = 0;
  }

  public byte getMode() {
    return this.mode;
  }

  public CSQuickStartMsg setMode(byte mode) {
    this.mode = mode;
    setModeIsSet(true);
    return this;
  }

  public void unsetMode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MODE_ISSET_ID);
  }

  /** Returns true if field mode is set (has been assigned a value) and false otherwise */
  public boolean isSetMode() {
    return EncodingUtils.testBit(__isset_bitfield, __MODE_ISSET_ID);
  }

  public void setModeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MODE_ISSET_ID, value);
  }

  public short getSongId() {
    return this.songId;
  }

  public CSQuickStartMsg setSongId(short songId) {
    this.songId = songId;
    setSongIdIsSet(true);
    return this;
  }

  public void unsetSongId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SONGID_ISSET_ID);
  }

  /** Returns true if field songId is set (has been assigned a value) and false otherwise */
  public boolean isSetSongId() {
    return EncodingUtils.testBit(__isset_bitfield, __SONGID_ISSET_ID);
  }

  public void setSongIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SONGID_ISSET_ID, value);
  }

  public byte getSongLevel() {
    return this.songLevel;
  }

  public CSQuickStartMsg setSongLevel(byte songLevel) {
    this.songLevel = songLevel;
    setSongLevelIsSet(true);
    return this;
  }

  public void unsetSongLevel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SONGLEVEL_ISSET_ID);
  }

  /** Returns true if field songLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetSongLevel() {
    return EncodingUtils.testBit(__isset_bitfield, __SONGLEVEL_ISSET_ID);
  }

  public void setSongLevelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SONGLEVEL_ISSET_ID, value);
  }

  /**
   * bit 1、skip invite   2、diff music   3、diff level
   */
  public byte getQuickStartConfig() {
    return this.quickStartConfig;
  }

  /**
   * bit 1、skip invite   2、diff music   3、diff level
   */
  public CSQuickStartMsg setQuickStartConfig(byte quickStartConfig) {
    this.quickStartConfig = quickStartConfig;
    setQuickStartConfigIsSet(true);
    return this;
  }

  public void unsetQuickStartConfig() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUICKSTARTCONFIG_ISSET_ID);
  }

  /** Returns true if field quickStartConfig is set (has been assigned a value) and false otherwise */
  public boolean isSetQuickStartConfig() {
    return EncodingUtils.testBit(__isset_bitfield, __QUICKSTARTCONFIG_ISSET_ID);
  }

  public void setQuickStartConfigIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUICKSTARTCONFIG_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MODE:
      if (value == null) {
        unsetMode();
      } else {
        setMode((Byte)value);
      }
      break;

    case SONG_ID:
      if (value == null) {
        unsetSongId();
      } else {
        setSongId((Short)value);
      }
      break;

    case SONG_LEVEL:
      if (value == null) {
        unsetSongLevel();
      } else {
        setSongLevel((Byte)value);
      }
      break;

    case QUICK_START_CONFIG:
      if (value == null) {
        unsetQuickStartConfig();
      } else {
        setQuickStartConfig((Byte)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MODE:
      return Byte.valueOf(getMode());

    case SONG_ID:
      return Short.valueOf(getSongId());

    case SONG_LEVEL:
      return Byte.valueOf(getSongLevel());

    case QUICK_START_CONFIG:
      return Byte.valueOf(getQuickStartConfig());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MODE:
      return isSetMode();
    case SONG_ID:
      return isSetSongId();
    case SONG_LEVEL:
      return isSetSongLevel();
    case QUICK_START_CONFIG:
      return isSetQuickStartConfig();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CSQuickStartMsg)
      return this.equals((CSQuickStartMsg)that);
    return false;
  }

  public boolean equals(CSQuickStartMsg that) {
    if (that == null)
      return false;

    boolean this_present_mode = true;
    boolean that_present_mode = true;
    if (this_present_mode || that_present_mode) {
      if (!(this_present_mode && that_present_mode))
        return false;
      if (this.mode != that.mode)
        return false;
    }

    boolean this_present_songId = true;
    boolean that_present_songId = true;
    if (this_present_songId || that_present_songId) {
      if (!(this_present_songId && that_present_songId))
        return false;
      if (this.songId != that.songId)
        return false;
    }

    boolean this_present_songLevel = true;
    boolean that_present_songLevel = true;
    if (this_present_songLevel || that_present_songLevel) {
      if (!(this_present_songLevel && that_present_songLevel))
        return false;
      if (this.songLevel != that.songLevel)
        return false;
    }

    boolean this_present_quickStartConfig = true;
    boolean that_present_quickStartConfig = true;
    if (this_present_quickStartConfig || that_present_quickStartConfig) {
      if (!(this_present_quickStartConfig && that_present_quickStartConfig))
        return false;
      if (this.quickStartConfig != that.quickStartConfig)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(CSQuickStartMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CSQuickStartMsg typedOther = (CSQuickStartMsg)other;

    lastComparison = Boolean.valueOf(isSetMode()).compareTo(typedOther.isSetMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mode, typedOther.mode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSongId()).compareTo(typedOther.isSetSongId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSongId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.songId, typedOther.songId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSongLevel()).compareTo(typedOther.isSetSongLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSongLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.songLevel, typedOther.songLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuickStartConfig()).compareTo(typedOther.isSetQuickStartConfig());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuickStartConfig()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quickStartConfig, typedOther.quickStartConfig);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CSQuickStartMsg(");
    boolean first = true;

    sb.append("mode:");
    sb.append(this.mode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("songId:");
    sb.append(this.songId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("songLevel:");
    sb.append(this.songLevel);
    first = false;
    if (!first) sb.append(", ");
    sb.append("quickStartConfig:");
    sb.append(this.quickStartConfig);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CSQuickStartMsgStandardSchemeFactory implements SchemeFactory {
    public CSQuickStartMsgStandardScheme getScheme() {
      return new CSQuickStartMsgStandardScheme();
    }
  }

  private static class CSQuickStartMsgStandardScheme extends StandardScheme<CSQuickStartMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CSQuickStartMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.mode = iprot.readByte();
              struct.setModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SONG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.songId = iprot.readI16();
              struct.setSongIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SONG_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.songLevel = iprot.readByte();
              struct.setSongLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // QUICK_START_CONFIG
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.quickStartConfig = iprot.readByte();
              struct.setQuickStartConfigIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CSQuickStartMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MODE_FIELD_DESC);
      oprot.writeByte(struct.mode);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SONG_ID_FIELD_DESC);
      oprot.writeI16(struct.songId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SONG_LEVEL_FIELD_DESC);
      oprot.writeByte(struct.songLevel);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(QUICK_START_CONFIG_FIELD_DESC);
      oprot.writeByte(struct.quickStartConfig);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CSQuickStartMsgTupleSchemeFactory implements SchemeFactory {
    public CSQuickStartMsgTupleScheme getScheme() {
      return new CSQuickStartMsgTupleScheme();
    }
  }

  private static class CSQuickStartMsgTupleScheme extends TupleScheme<CSQuickStartMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CSQuickStartMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMode()) {
        optionals.set(0);
      }
      if (struct.isSetSongId()) {
        optionals.set(1);
      }
      if (struct.isSetSongLevel()) {
        optionals.set(2);
      }
      if (struct.isSetQuickStartConfig()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetMode()) {
        oprot.writeByte(struct.mode);
      }
      if (struct.isSetSongId()) {
        oprot.writeI16(struct.songId);
      }
      if (struct.isSetSongLevel()) {
        oprot.writeByte(struct.songLevel);
      }
      if (struct.isSetQuickStartConfig()) {
        oprot.writeByte(struct.quickStartConfig);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CSQuickStartMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.mode = iprot.readByte();
        struct.setModeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.songId = iprot.readI16();
        struct.setSongIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.songLevel = iprot.readByte();
        struct.setSongLevelIsSet(true);
      }
      if (incoming.get(3)) {
        struct.quickStartConfig = iprot.readByte();
        struct.setQuickStartConfigIsSet(true);
      }
    }
  }

}

