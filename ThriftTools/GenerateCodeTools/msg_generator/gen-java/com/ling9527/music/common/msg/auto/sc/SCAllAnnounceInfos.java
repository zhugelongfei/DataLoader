/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 通告信息
 */
public class SCAllAnnounceInfos implements org.apache.thrift.TBase<SCAllAnnounceInfos, SCAllAnnounceInfos._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCAllAnnounceInfos");

  private static final org.apache.thrift.protocol.TField ANNOUNCE_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("announceVersion", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField AVAILABLE_TIMES_FIELD_DESC = new org.apache.thrift.protocol.TField("availableTimes", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField ANNOUNCE_GOLD_FIELD_DESC = new org.apache.thrift.protocol.TField("announceGold", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField ANNOUNCE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("announceList", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField NEXT_REFRESH_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("nextRefreshTime", org.apache.thrift.protocol.TType.I16, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCAllAnnounceInfosStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCAllAnnounceInfosTupleSchemeFactory());
  }

  public int announceVersion; // required
  public byte availableTimes; // required
  public int announceGold; // required
  public List<com.ling9527.music.common.msg.auto.AnnounceData> announceList; // required
  /**
   * 下次刷新时间(HHmm)
   */
  public short nextRefreshTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ANNOUNCE_VERSION((short)1, "announceVersion"),
    AVAILABLE_TIMES((short)2, "availableTimes"),
    ANNOUNCE_GOLD((short)3, "announceGold"),
    ANNOUNCE_LIST((short)4, "announceList"),
    /**
     * 下次刷新时间(HHmm)
     */
    NEXT_REFRESH_TIME((short)5, "nextRefreshTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ANNOUNCE_VERSION
          return ANNOUNCE_VERSION;
        case 2: // AVAILABLE_TIMES
          return AVAILABLE_TIMES;
        case 3: // ANNOUNCE_GOLD
          return ANNOUNCE_GOLD;
        case 4: // ANNOUNCE_LIST
          return ANNOUNCE_LIST;
        case 5: // NEXT_REFRESH_TIME
          return NEXT_REFRESH_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ANNOUNCEVERSION_ISSET_ID = 0;
  private static final int __AVAILABLETIMES_ISSET_ID = 1;
  private static final int __ANNOUNCEGOLD_ISSET_ID = 2;
  private static final int __NEXTREFRESHTIME_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ANNOUNCE_VERSION, new org.apache.thrift.meta_data.FieldMetaData("announceVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AVAILABLE_TIMES, new org.apache.thrift.meta_data.FieldMetaData("availableTimes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.ANNOUNCE_GOLD, new org.apache.thrift.meta_data.FieldMetaData("announceGold", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ANNOUNCE_LIST, new org.apache.thrift.meta_data.FieldMetaData("announceList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.AnnounceData.class))));
    tmpMap.put(_Fields.NEXT_REFRESH_TIME, new org.apache.thrift.meta_data.FieldMetaData("nextRefreshTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCAllAnnounceInfos.class, metaDataMap);
  }

  public SCAllAnnounceInfos() {
  }

  public SCAllAnnounceInfos(
    int announceVersion,
    byte availableTimes,
    int announceGold,
    List<com.ling9527.music.common.msg.auto.AnnounceData> announceList,
    short nextRefreshTime)
  {
    this();
    this.announceVersion = announceVersion;
    setAnnounceVersionIsSet(true);
    this.availableTimes = availableTimes;
    setAvailableTimesIsSet(true);
    this.announceGold = announceGold;
    setAnnounceGoldIsSet(true);
    this.announceList = announceList;
    this.nextRefreshTime = nextRefreshTime;
    setNextRefreshTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCAllAnnounceInfos(SCAllAnnounceInfos other) {
    __isset_bitfield = other.__isset_bitfield;
    this.announceVersion = other.announceVersion;
    this.availableTimes = other.availableTimes;
    this.announceGold = other.announceGold;
    if (other.isSetAnnounceList()) {
      List<com.ling9527.music.common.msg.auto.AnnounceData> __this__announceList = new ArrayList<com.ling9527.music.common.msg.auto.AnnounceData>();
      for (com.ling9527.music.common.msg.auto.AnnounceData other_element : other.announceList) {
        __this__announceList.add(new com.ling9527.music.common.msg.auto.AnnounceData(other_element));
      }
      this.announceList = __this__announceList;
    }
    this.nextRefreshTime = other.nextRefreshTime;
  }

  public SCAllAnnounceInfos deepCopy() {
    return new SCAllAnnounceInfos(this);
  }

  @Override
  public void clear() {
    setAnnounceVersionIsSet(false);
    this.announceVersion = 0;
    setAvailableTimesIsSet(false);
    this.availableTimes = 0;
    setAnnounceGoldIsSet(false);
    this.announceGold = 0;
    this.announceList = null;
    setNextRefreshTimeIsSet(false);
    this.nextRefreshTime = 0;
  }

  public int getAnnounceVersion() {
    return this.announceVersion;
  }

  public SCAllAnnounceInfos setAnnounceVersion(int announceVersion) {
    this.announceVersion = announceVersion;
    setAnnounceVersionIsSet(true);
    return this;
  }

  public void unsetAnnounceVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ANNOUNCEVERSION_ISSET_ID);
  }

  /** Returns true if field announceVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetAnnounceVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __ANNOUNCEVERSION_ISSET_ID);
  }

  public void setAnnounceVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ANNOUNCEVERSION_ISSET_ID, value);
  }

  public byte getAvailableTimes() {
    return this.availableTimes;
  }

  public SCAllAnnounceInfos setAvailableTimes(byte availableTimes) {
    this.availableTimes = availableTimes;
    setAvailableTimesIsSet(true);
    return this;
  }

  public void unsetAvailableTimes() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AVAILABLETIMES_ISSET_ID);
  }

  /** Returns true if field availableTimes is set (has been assigned a value) and false otherwise */
  public boolean isSetAvailableTimes() {
    return EncodingUtils.testBit(__isset_bitfield, __AVAILABLETIMES_ISSET_ID);
  }

  public void setAvailableTimesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AVAILABLETIMES_ISSET_ID, value);
  }

  public int getAnnounceGold() {
    return this.announceGold;
  }

  public SCAllAnnounceInfos setAnnounceGold(int announceGold) {
    this.announceGold = announceGold;
    setAnnounceGoldIsSet(true);
    return this;
  }

  public void unsetAnnounceGold() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ANNOUNCEGOLD_ISSET_ID);
  }

  /** Returns true if field announceGold is set (has been assigned a value) and false otherwise */
  public boolean isSetAnnounceGold() {
    return EncodingUtils.testBit(__isset_bitfield, __ANNOUNCEGOLD_ISSET_ID);
  }

  public void setAnnounceGoldIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ANNOUNCEGOLD_ISSET_ID, value);
  }

  public int getAnnounceListSize() {
    return (this.announceList == null) ? 0 : this.announceList.size();
  }

  public java.util.Iterator<com.ling9527.music.common.msg.auto.AnnounceData> getAnnounceListIterator() {
    return (this.announceList == null) ? null : this.announceList.iterator();
  }

  public void addToAnnounceList(com.ling9527.music.common.msg.auto.AnnounceData elem) {
    if (this.announceList == null) {
      this.announceList = new ArrayList<com.ling9527.music.common.msg.auto.AnnounceData>();
    }
    this.announceList.add(elem);
  }

  public List<com.ling9527.music.common.msg.auto.AnnounceData> getAnnounceList() {
    return this.announceList;
  }

  public SCAllAnnounceInfos setAnnounceList(List<com.ling9527.music.common.msg.auto.AnnounceData> announceList) {
    this.announceList = announceList;
    return this;
  }

  public void unsetAnnounceList() {
    this.announceList = null;
  }

  /** Returns true if field announceList is set (has been assigned a value) and false otherwise */
  public boolean isSetAnnounceList() {
    return this.announceList != null;
  }

  public void setAnnounceListIsSet(boolean value) {
    if (!value) {
      this.announceList = null;
    }
  }

  /**
   * 下次刷新时间(HHmm)
   */
  public short getNextRefreshTime() {
    return this.nextRefreshTime;
  }

  /**
   * 下次刷新时间(HHmm)
   */
  public SCAllAnnounceInfos setNextRefreshTime(short nextRefreshTime) {
    this.nextRefreshTime = nextRefreshTime;
    setNextRefreshTimeIsSet(true);
    return this;
  }

  public void unsetNextRefreshTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEXTREFRESHTIME_ISSET_ID);
  }

  /** Returns true if field nextRefreshTime is set (has been assigned a value) and false otherwise */
  public boolean isSetNextRefreshTime() {
    return EncodingUtils.testBit(__isset_bitfield, __NEXTREFRESHTIME_ISSET_ID);
  }

  public void setNextRefreshTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEXTREFRESHTIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ANNOUNCE_VERSION:
      if (value == null) {
        unsetAnnounceVersion();
      } else {
        setAnnounceVersion((Integer)value);
      }
      break;

    case AVAILABLE_TIMES:
      if (value == null) {
        unsetAvailableTimes();
      } else {
        setAvailableTimes((Byte)value);
      }
      break;

    case ANNOUNCE_GOLD:
      if (value == null) {
        unsetAnnounceGold();
      } else {
        setAnnounceGold((Integer)value);
      }
      break;

    case ANNOUNCE_LIST:
      if (value == null) {
        unsetAnnounceList();
      } else {
        setAnnounceList((List<com.ling9527.music.common.msg.auto.AnnounceData>)value);
      }
      break;

    case NEXT_REFRESH_TIME:
      if (value == null) {
        unsetNextRefreshTime();
      } else {
        setNextRefreshTime((Short)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ANNOUNCE_VERSION:
      return Integer.valueOf(getAnnounceVersion());

    case AVAILABLE_TIMES:
      return Byte.valueOf(getAvailableTimes());

    case ANNOUNCE_GOLD:
      return Integer.valueOf(getAnnounceGold());

    case ANNOUNCE_LIST:
      return getAnnounceList();

    case NEXT_REFRESH_TIME:
      return Short.valueOf(getNextRefreshTime());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ANNOUNCE_VERSION:
      return isSetAnnounceVersion();
    case AVAILABLE_TIMES:
      return isSetAvailableTimes();
    case ANNOUNCE_GOLD:
      return isSetAnnounceGold();
    case ANNOUNCE_LIST:
      return isSetAnnounceList();
    case NEXT_REFRESH_TIME:
      return isSetNextRefreshTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCAllAnnounceInfos)
      return this.equals((SCAllAnnounceInfos)that);
    return false;
  }

  public boolean equals(SCAllAnnounceInfos that) {
    if (that == null)
      return false;

    boolean this_present_announceVersion = true;
    boolean that_present_announceVersion = true;
    if (this_present_announceVersion || that_present_announceVersion) {
      if (!(this_present_announceVersion && that_present_announceVersion))
        return false;
      if (this.announceVersion != that.announceVersion)
        return false;
    }

    boolean this_present_availableTimes = true;
    boolean that_present_availableTimes = true;
    if (this_present_availableTimes || that_present_availableTimes) {
      if (!(this_present_availableTimes && that_present_availableTimes))
        return false;
      if (this.availableTimes != that.availableTimes)
        return false;
    }

    boolean this_present_announceGold = true;
    boolean that_present_announceGold = true;
    if (this_present_announceGold || that_present_announceGold) {
      if (!(this_present_announceGold && that_present_announceGold))
        return false;
      if (this.announceGold != that.announceGold)
        return false;
    }

    boolean this_present_announceList = true && this.isSetAnnounceList();
    boolean that_present_announceList = true && that.isSetAnnounceList();
    if (this_present_announceList || that_present_announceList) {
      if (!(this_present_announceList && that_present_announceList))
        return false;
      if (!this.announceList.equals(that.announceList))
        return false;
    }

    boolean this_present_nextRefreshTime = true;
    boolean that_present_nextRefreshTime = true;
    if (this_present_nextRefreshTime || that_present_nextRefreshTime) {
      if (!(this_present_nextRefreshTime && that_present_nextRefreshTime))
        return false;
      if (this.nextRefreshTime != that.nextRefreshTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCAllAnnounceInfos other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCAllAnnounceInfos typedOther = (SCAllAnnounceInfos)other;

    lastComparison = Boolean.valueOf(isSetAnnounceVersion()).compareTo(typedOther.isSetAnnounceVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnnounceVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.announceVersion, typedOther.announceVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAvailableTimes()).compareTo(typedOther.isSetAvailableTimes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvailableTimes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.availableTimes, typedOther.availableTimes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAnnounceGold()).compareTo(typedOther.isSetAnnounceGold());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnnounceGold()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.announceGold, typedOther.announceGold);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAnnounceList()).compareTo(typedOther.isSetAnnounceList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnnounceList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.announceList, typedOther.announceList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNextRefreshTime()).compareTo(typedOther.isSetNextRefreshTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNextRefreshTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nextRefreshTime, typedOther.nextRefreshTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCAllAnnounceInfos(");
    boolean first = true;

    sb.append("announceVersion:");
    sb.append(this.announceVersion);
    first = false;
    if (!first) sb.append(", ");
    sb.append("availableTimes:");
    sb.append(this.availableTimes);
    first = false;
    if (!first) sb.append(", ");
    sb.append("announceGold:");
    sb.append(this.announceGold);
    first = false;
    if (!first) sb.append(", ");
    sb.append("announceList:");
    if (this.announceList == null) {
      sb.append("null");
    } else {
      sb.append(this.announceList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nextRefreshTime:");
    sb.append(this.nextRefreshTime);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCAllAnnounceInfosStandardSchemeFactory implements SchemeFactory {
    public SCAllAnnounceInfosStandardScheme getScheme() {
      return new SCAllAnnounceInfosStandardScheme();
    }
  }

  private static class SCAllAnnounceInfosStandardScheme extends StandardScheme<SCAllAnnounceInfos> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCAllAnnounceInfos struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ANNOUNCE_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.announceVersion = iprot.readI32();
              struct.setAnnounceVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // AVAILABLE_TIMES
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.availableTimes = iprot.readByte();
              struct.setAvailableTimesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ANNOUNCE_GOLD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.announceGold = iprot.readI32();
              struct.setAnnounceGoldIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ANNOUNCE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.announceList = new ArrayList<com.ling9527.music.common.msg.auto.AnnounceData>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  com.ling9527.music.common.msg.auto.AnnounceData _elem2; // required
                  _elem2 = new com.ling9527.music.common.msg.auto.AnnounceData();
                  _elem2.read(iprot);
                  struct.announceList.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setAnnounceListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NEXT_REFRESH_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.nextRefreshTime = iprot.readI16();
              struct.setNextRefreshTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCAllAnnounceInfos struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ANNOUNCE_VERSION_FIELD_DESC);
      oprot.writeI32(struct.announceVersion);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AVAILABLE_TIMES_FIELD_DESC);
      oprot.writeByte(struct.availableTimes);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ANNOUNCE_GOLD_FIELD_DESC);
      oprot.writeI32(struct.announceGold);
      oprot.writeFieldEnd();
      if (struct.announceList != null) {
        oprot.writeFieldBegin(ANNOUNCE_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.announceList.size()));
          for (com.ling9527.music.common.msg.auto.AnnounceData _iter3 : struct.announceList)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NEXT_REFRESH_TIME_FIELD_DESC);
      oprot.writeI16(struct.nextRefreshTime);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCAllAnnounceInfosTupleSchemeFactory implements SchemeFactory {
    public SCAllAnnounceInfosTupleScheme getScheme() {
      return new SCAllAnnounceInfosTupleScheme();
    }
  }

  private static class SCAllAnnounceInfosTupleScheme extends TupleScheme<SCAllAnnounceInfos> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCAllAnnounceInfos struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAnnounceVersion()) {
        optionals.set(0);
      }
      if (struct.isSetAvailableTimes()) {
        optionals.set(1);
      }
      if (struct.isSetAnnounceGold()) {
        optionals.set(2);
      }
      if (struct.isSetAnnounceList()) {
        optionals.set(3);
      }
      if (struct.isSetNextRefreshTime()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetAnnounceVersion()) {
        oprot.writeI32(struct.announceVersion);
      }
      if (struct.isSetAvailableTimes()) {
        oprot.writeByte(struct.availableTimes);
      }
      if (struct.isSetAnnounceGold()) {
        oprot.writeI32(struct.announceGold);
      }
      if (struct.isSetAnnounceList()) {
        {
          oprot.writeI32(struct.announceList.size());
          for (com.ling9527.music.common.msg.auto.AnnounceData _iter4 : struct.announceList)
          {
            _iter4.write(oprot);
          }
        }
      }
      if (struct.isSetNextRefreshTime()) {
        oprot.writeI16(struct.nextRefreshTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCAllAnnounceInfos struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.announceVersion = iprot.readI32();
        struct.setAnnounceVersionIsSet(true);
      }
      if (incoming.get(1)) {
        struct.availableTimes = iprot.readByte();
        struct.setAvailableTimesIsSet(true);
      }
      if (incoming.get(2)) {
        struct.announceGold = iprot.readI32();
        struct.setAnnounceGoldIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.announceList = new ArrayList<com.ling9527.music.common.msg.auto.AnnounceData>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            com.ling9527.music.common.msg.auto.AnnounceData _elem7; // required
            _elem7 = new com.ling9527.music.common.msg.auto.AnnounceData();
            _elem7.read(iprot);
            struct.announceList.add(_elem7);
          }
        }
        struct.setAnnounceListIsSet(true);
      }
      if (incoming.get(4)) {
        struct.nextRefreshTime = iprot.readI16();
        struct.setNextRefreshTimeIsSet(true);
      }
    }
  }

}

