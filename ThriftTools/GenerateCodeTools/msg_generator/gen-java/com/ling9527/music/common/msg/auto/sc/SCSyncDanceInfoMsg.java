/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SCSyncDanceInfoMsg implements org.apache.thrift.TBase<SCSyncDanceInfoMsg, SCSyncDanceInfoMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCSyncDanceInfoMsg");

  private static final org.apache.thrift.protocol.TField DANCE_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("danceState", org.apache.thrift.protocol.TType.BYTE, (short)1);
  private static final org.apache.thrift.protocol.TField FRAME_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("frameNum", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField SONG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("songId", org.apache.thrift.protocol.TType.BYTE, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCSyncDanceInfoMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCSyncDanceInfoMsgTupleSchemeFactory());
  }

  /**
   * dance or not
   */
  public byte danceState; // required
  /**
   * number of song frame
   */
  public byte frameNum; // required
  public byte songId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * dance or not
     */
    DANCE_STATE((short)1, "danceState"),
    /**
     * number of song frame
     */
    FRAME_NUM((short)2, "frameNum"),
    SONG_ID((short)3, "songId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DANCE_STATE
          return DANCE_STATE;
        case 2: // FRAME_NUM
          return FRAME_NUM;
        case 3: // SONG_ID
          return SONG_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DANCESTATE_ISSET_ID = 0;
  private static final int __FRAMENUM_ISSET_ID = 1;
  private static final int __SONGID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DANCE_STATE, new org.apache.thrift.meta_data.FieldMetaData("danceState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.FRAME_NUM, new org.apache.thrift.meta_data.FieldMetaData("frameNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.SONG_ID, new org.apache.thrift.meta_data.FieldMetaData("songId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCSyncDanceInfoMsg.class, metaDataMap);
  }

  public SCSyncDanceInfoMsg() {
  }

  public SCSyncDanceInfoMsg(
    byte danceState,
    byte frameNum,
    byte songId)
  {
    this();
    this.danceState = danceState;
    setDanceStateIsSet(true);
    this.frameNum = frameNum;
    setFrameNumIsSet(true);
    this.songId = songId;
    setSongIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCSyncDanceInfoMsg(SCSyncDanceInfoMsg other) {
    __isset_bitfield = other.__isset_bitfield;
    this.danceState = other.danceState;
    this.frameNum = other.frameNum;
    this.songId = other.songId;
  }

  public SCSyncDanceInfoMsg deepCopy() {
    return new SCSyncDanceInfoMsg(this);
  }

  @Override
  public void clear() {
    setDanceStateIsSet(false);
    this.danceState = 0;
    setFrameNumIsSet(false);
    this.frameNum = 0;
    setSongIdIsSet(false);
    this.songId = 0;
  }

  /**
   * dance or not
   */
  public byte getDanceState() {
    return this.danceState;
  }

  /**
   * dance or not
   */
  public SCSyncDanceInfoMsg setDanceState(byte danceState) {
    this.danceState = danceState;
    setDanceStateIsSet(true);
    return this;
  }

  public void unsetDanceState() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DANCESTATE_ISSET_ID);
  }

  /** Returns true if field danceState is set (has been assigned a value) and false otherwise */
  public boolean isSetDanceState() {
    return EncodingUtils.testBit(__isset_bitfield, __DANCESTATE_ISSET_ID);
  }

  public void setDanceStateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DANCESTATE_ISSET_ID, value);
  }

  /**
   * number of song frame
   */
  public byte getFrameNum() {
    return this.frameNum;
  }

  /**
   * number of song frame
   */
  public SCSyncDanceInfoMsg setFrameNum(byte frameNum) {
    this.frameNum = frameNum;
    setFrameNumIsSet(true);
    return this;
  }

  public void unsetFrameNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FRAMENUM_ISSET_ID);
  }

  /** Returns true if field frameNum is set (has been assigned a value) and false otherwise */
  public boolean isSetFrameNum() {
    return EncodingUtils.testBit(__isset_bitfield, __FRAMENUM_ISSET_ID);
  }

  public void setFrameNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FRAMENUM_ISSET_ID, value);
  }

  public byte getSongId() {
    return this.songId;
  }

  public SCSyncDanceInfoMsg setSongId(byte songId) {
    this.songId = songId;
    setSongIdIsSet(true);
    return this;
  }

  public void unsetSongId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SONGID_ISSET_ID);
  }

  /** Returns true if field songId is set (has been assigned a value) and false otherwise */
  public boolean isSetSongId() {
    return EncodingUtils.testBit(__isset_bitfield, __SONGID_ISSET_ID);
  }

  public void setSongIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SONGID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DANCE_STATE:
      if (value == null) {
        unsetDanceState();
      } else {
        setDanceState((Byte)value);
      }
      break;

    case FRAME_NUM:
      if (value == null) {
        unsetFrameNum();
      } else {
        setFrameNum((Byte)value);
      }
      break;

    case SONG_ID:
      if (value == null) {
        unsetSongId();
      } else {
        setSongId((Byte)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DANCE_STATE:
      return Byte.valueOf(getDanceState());

    case FRAME_NUM:
      return Byte.valueOf(getFrameNum());

    case SONG_ID:
      return Byte.valueOf(getSongId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DANCE_STATE:
      return isSetDanceState();
    case FRAME_NUM:
      return isSetFrameNum();
    case SONG_ID:
      return isSetSongId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCSyncDanceInfoMsg)
      return this.equals((SCSyncDanceInfoMsg)that);
    return false;
  }

  public boolean equals(SCSyncDanceInfoMsg that) {
    if (that == null)
      return false;

    boolean this_present_danceState = true;
    boolean that_present_danceState = true;
    if (this_present_danceState || that_present_danceState) {
      if (!(this_present_danceState && that_present_danceState))
        return false;
      if (this.danceState != that.danceState)
        return false;
    }

    boolean this_present_frameNum = true;
    boolean that_present_frameNum = true;
    if (this_present_frameNum || that_present_frameNum) {
      if (!(this_present_frameNum && that_present_frameNum))
        return false;
      if (this.frameNum != that.frameNum)
        return false;
    }

    boolean this_present_songId = true;
    boolean that_present_songId = true;
    if (this_present_songId || that_present_songId) {
      if (!(this_present_songId && that_present_songId))
        return false;
      if (this.songId != that.songId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCSyncDanceInfoMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCSyncDanceInfoMsg typedOther = (SCSyncDanceInfoMsg)other;

    lastComparison = Boolean.valueOf(isSetDanceState()).compareTo(typedOther.isSetDanceState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDanceState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.danceState, typedOther.danceState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrameNum()).compareTo(typedOther.isSetFrameNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrameNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frameNum, typedOther.frameNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSongId()).compareTo(typedOther.isSetSongId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSongId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.songId, typedOther.songId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCSyncDanceInfoMsg(");
    boolean first = true;

    sb.append("danceState:");
    sb.append(this.danceState);
    first = false;
    if (!first) sb.append(", ");
    sb.append("frameNum:");
    sb.append(this.frameNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("songId:");
    sb.append(this.songId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCSyncDanceInfoMsgStandardSchemeFactory implements SchemeFactory {
    public SCSyncDanceInfoMsgStandardScheme getScheme() {
      return new SCSyncDanceInfoMsgStandardScheme();
    }
  }

  private static class SCSyncDanceInfoMsgStandardScheme extends StandardScheme<SCSyncDanceInfoMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCSyncDanceInfoMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DANCE_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.danceState = iprot.readByte();
              struct.setDanceStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FRAME_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.frameNum = iprot.readByte();
              struct.setFrameNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SONG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.songId = iprot.readByte();
              struct.setSongIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCSyncDanceInfoMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(DANCE_STATE_FIELD_DESC);
      oprot.writeByte(struct.danceState);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FRAME_NUM_FIELD_DESC);
      oprot.writeByte(struct.frameNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SONG_ID_FIELD_DESC);
      oprot.writeByte(struct.songId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCSyncDanceInfoMsgTupleSchemeFactory implements SchemeFactory {
    public SCSyncDanceInfoMsgTupleScheme getScheme() {
      return new SCSyncDanceInfoMsgTupleScheme();
    }
  }

  private static class SCSyncDanceInfoMsgTupleScheme extends TupleScheme<SCSyncDanceInfoMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCSyncDanceInfoMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDanceState()) {
        optionals.set(0);
      }
      if (struct.isSetFrameNum()) {
        optionals.set(1);
      }
      if (struct.isSetSongId()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetDanceState()) {
        oprot.writeByte(struct.danceState);
      }
      if (struct.isSetFrameNum()) {
        oprot.writeByte(struct.frameNum);
      }
      if (struct.isSetSongId()) {
        oprot.writeByte(struct.songId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCSyncDanceInfoMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.danceState = iprot.readByte();
        struct.setDanceStateIsSet(true);
      }
      if (incoming.get(1)) {
        struct.frameNum = iprot.readByte();
        struct.setFrameNumIsSet(true);
      }
      if (incoming.get(2)) {
        struct.songId = iprot.readByte();
        struct.setSongIdIsSet(true);
      }
    }
  }

}

