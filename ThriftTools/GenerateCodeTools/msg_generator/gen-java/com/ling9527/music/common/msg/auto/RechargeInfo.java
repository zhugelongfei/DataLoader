/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class RechargeInfo implements org.apache.thrift.TBase<RechargeInfo, RechargeInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RechargeInfo");

  private static final org.apache.thrift.protocol.TField DIC_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("dicInfo", org.apache.thrift.protocol.TType.LIST, (short)1);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RechargeInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RechargeInfoTupleSchemeFactory());
  }

  public List<TransactionInfo> dicInfo; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DIC_INFO((short)1, "dicInfo");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DIC_INFO
          return DIC_INFO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DIC_INFO, new org.apache.thrift.meta_data.FieldMetaData("dicInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TransactionInfo.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RechargeInfo.class, metaDataMap);
  }

  public RechargeInfo() {
  }

  public RechargeInfo(
    List<TransactionInfo> dicInfo)
  {
    this();
    this.dicInfo = dicInfo;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RechargeInfo(RechargeInfo other) {
    if (other.isSetDicInfo()) {
      List<TransactionInfo> __this__dicInfo = new ArrayList<TransactionInfo>();
      for (TransactionInfo other_element : other.dicInfo) {
        __this__dicInfo.add(new TransactionInfo(other_element));
      }
      this.dicInfo = __this__dicInfo;
    }
  }

  public RechargeInfo deepCopy() {
    return new RechargeInfo(this);
  }

  @Override
  public void clear() {
    this.dicInfo = null;
  }

  public int getDicInfoSize() {
    return (this.dicInfo == null) ? 0 : this.dicInfo.size();
  }

  public java.util.Iterator<TransactionInfo> getDicInfoIterator() {
    return (this.dicInfo == null) ? null : this.dicInfo.iterator();
  }

  public void addToDicInfo(TransactionInfo elem) {
    if (this.dicInfo == null) {
      this.dicInfo = new ArrayList<TransactionInfo>();
    }
    this.dicInfo.add(elem);
  }

  public List<TransactionInfo> getDicInfo() {
    return this.dicInfo;
  }

  public RechargeInfo setDicInfo(List<TransactionInfo> dicInfo) {
    this.dicInfo = dicInfo;
    return this;
  }

  public void unsetDicInfo() {
    this.dicInfo = null;
  }

  /** Returns true if field dicInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetDicInfo() {
    return this.dicInfo != null;
  }

  public void setDicInfoIsSet(boolean value) {
    if (!value) {
      this.dicInfo = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DIC_INFO:
      if (value == null) {
        unsetDicInfo();
      } else {
        setDicInfo((List<TransactionInfo>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DIC_INFO:
      return getDicInfo();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DIC_INFO:
      return isSetDicInfo();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RechargeInfo)
      return this.equals((RechargeInfo)that);
    return false;
  }

  public boolean equals(RechargeInfo that) {
    if (that == null)
      return false;

    boolean this_present_dicInfo = true && this.isSetDicInfo();
    boolean that_present_dicInfo = true && that.isSetDicInfo();
    if (this_present_dicInfo || that_present_dicInfo) {
      if (!(this_present_dicInfo && that_present_dicInfo))
        return false;
      if (!this.dicInfo.equals(that.dicInfo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(RechargeInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    RechargeInfo typedOther = (RechargeInfo)other;

    lastComparison = Boolean.valueOf(isSetDicInfo()).compareTo(typedOther.isSetDicInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDicInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dicInfo, typedOther.dicInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RechargeInfo(");
    boolean first = true;

    sb.append("dicInfo:");
    if (this.dicInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.dicInfo);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RechargeInfoStandardSchemeFactory implements SchemeFactory {
    public RechargeInfoStandardScheme getScheme() {
      return new RechargeInfoStandardScheme();
    }
  }

  private static class RechargeInfoStandardScheme extends StandardScheme<RechargeInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RechargeInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DIC_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.dicInfo = new ArrayList<TransactionInfo>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  TransactionInfo _elem2; // required
                  _elem2 = new TransactionInfo();
                  _elem2.read(iprot);
                  struct.dicInfo.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setDicInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RechargeInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.dicInfo != null) {
        oprot.writeFieldBegin(DIC_INFO_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.dicInfo.size()));
          for (TransactionInfo _iter3 : struct.dicInfo)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RechargeInfoTupleSchemeFactory implements SchemeFactory {
    public RechargeInfoTupleScheme getScheme() {
      return new RechargeInfoTupleScheme();
    }
  }

  private static class RechargeInfoTupleScheme extends TupleScheme<RechargeInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RechargeInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDicInfo()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetDicInfo()) {
        {
          oprot.writeI32(struct.dicInfo.size());
          for (TransactionInfo _iter4 : struct.dicInfo)
          {
            _iter4.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RechargeInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.dicInfo = new ArrayList<TransactionInfo>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            TransactionInfo _elem7; // required
            _elem7 = new TransactionInfo();
            _elem7.read(iprot);
            struct.dicInfo.add(_elem7);
          }
        }
        struct.setDicInfoIsSet(true);
      }
    }
  }

}

