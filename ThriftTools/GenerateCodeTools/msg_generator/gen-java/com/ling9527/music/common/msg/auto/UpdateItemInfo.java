/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class UpdateItemInfo implements org.apache.thrift.TBase<UpdateItemInfo, UpdateItemInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateItemInfo");

  private static final org.apache.thrift.protocol.TField INSTANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instanceId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField VALID_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("validTime", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField EXTRA_TIP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("extraTipId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField IS_BAG_ITEM_USING_FIELD_DESC = new org.apache.thrift.protocol.TField("isBagItemUsing", org.apache.thrift.protocol.TType.BOOL, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UpdateItemInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UpdateItemInfoTupleSchemeFactory());
  }

  public long instanceId; // required
  public int count; // optional
  public int validTime; // optional
  /**
   * 额外多语言提示id
   */
  public int extraTipId; // optional
  /**
   * 背包中道具是否使用
   */
  public boolean isBagItemUsing; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INSTANCE_ID((short)1, "instanceId"),
    COUNT((short)2, "count"),
    VALID_TIME((short)3, "validTime"),
    /**
     * 额外多语言提示id
     */
    EXTRA_TIP_ID((short)4, "extraTipId"),
    /**
     * 背包中道具是否使用
     */
    IS_BAG_ITEM_USING((short)5, "isBagItemUsing");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INSTANCE_ID
          return INSTANCE_ID;
        case 2: // COUNT
          return COUNT;
        case 3: // VALID_TIME
          return VALID_TIME;
        case 4: // EXTRA_TIP_ID
          return EXTRA_TIP_ID;
        case 5: // IS_BAG_ITEM_USING
          return IS_BAG_ITEM_USING;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INSTANCEID_ISSET_ID = 0;
  private static final int __COUNT_ISSET_ID = 1;
  private static final int __VALIDTIME_ISSET_ID = 2;
  private static final int __EXTRATIPID_ISSET_ID = 3;
  private static final int __ISBAGITEMUSING_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.COUNT,_Fields.VALID_TIME,_Fields.EXTRA_TIP_ID,_Fields.IS_BAG_ITEM_USING};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INSTANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("instanceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VALID_TIME, new org.apache.thrift.meta_data.FieldMetaData("validTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXTRA_TIP_ID, new org.apache.thrift.meta_data.FieldMetaData("extraTipId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_BAG_ITEM_USING, new org.apache.thrift.meta_data.FieldMetaData("isBagItemUsing", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateItemInfo.class, metaDataMap);
  }

  public UpdateItemInfo() {
  }

  public UpdateItemInfo(
    long instanceId)
  {
    this();
    this.instanceId = instanceId;
    setInstanceIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UpdateItemInfo(UpdateItemInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.instanceId = other.instanceId;
    this.count = other.count;
    this.validTime = other.validTime;
    this.extraTipId = other.extraTipId;
    this.isBagItemUsing = other.isBagItemUsing;
  }

  public UpdateItemInfo deepCopy() {
    return new UpdateItemInfo(this);
  }

  @Override
  public void clear() {
    setInstanceIdIsSet(false);
    this.instanceId = 0;
    setCountIsSet(false);
    this.count = 0;
    setValidTimeIsSet(false);
    this.validTime = 0;
    setExtraTipIdIsSet(false);
    this.extraTipId = 0;
    setIsBagItemUsingIsSet(false);
    this.isBagItemUsing = false;
  }

  public long getInstanceId() {
    return this.instanceId;
  }

  public UpdateItemInfo setInstanceId(long instanceId) {
    this.instanceId = instanceId;
    setInstanceIdIsSet(true);
    return this;
  }

  public void unsetInstanceId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INSTANCEID_ISSET_ID);
  }

  /** Returns true if field instanceId is set (has been assigned a value) and false otherwise */
  public boolean isSetInstanceId() {
    return EncodingUtils.testBit(__isset_bitfield, __INSTANCEID_ISSET_ID);
  }

  public void setInstanceIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INSTANCEID_ISSET_ID, value);
  }

  public int getCount() {
    return this.count;
  }

  public UpdateItemInfo setCount(int count) {
    this.count = count;
    setCountIsSet(true);
    return this;
  }

  public void unsetCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  /** Returns true if field count is set (has been assigned a value) and false otherwise */
  public boolean isSetCount() {
    return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  public void setCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
  }

  public int getValidTime() {
    return this.validTime;
  }

  public UpdateItemInfo setValidTime(int validTime) {
    this.validTime = validTime;
    setValidTimeIsSet(true);
    return this;
  }

  public void unsetValidTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VALIDTIME_ISSET_ID);
  }

  /** Returns true if field validTime is set (has been assigned a value) and false otherwise */
  public boolean isSetValidTime() {
    return EncodingUtils.testBit(__isset_bitfield, __VALIDTIME_ISSET_ID);
  }

  public void setValidTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VALIDTIME_ISSET_ID, value);
  }

  /**
   * 额外多语言提示id
   */
  public int getExtraTipId() {
    return this.extraTipId;
  }

  /**
   * 额外多语言提示id
   */
  public UpdateItemInfo setExtraTipId(int extraTipId) {
    this.extraTipId = extraTipId;
    setExtraTipIdIsSet(true);
    return this;
  }

  public void unsetExtraTipId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXTRATIPID_ISSET_ID);
  }

  /** Returns true if field extraTipId is set (has been assigned a value) and false otherwise */
  public boolean isSetExtraTipId() {
    return EncodingUtils.testBit(__isset_bitfield, __EXTRATIPID_ISSET_ID);
  }

  public void setExtraTipIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXTRATIPID_ISSET_ID, value);
  }

  /**
   * 背包中道具是否使用
   */
  public boolean isIsBagItemUsing() {
    return this.isBagItemUsing;
  }

  /**
   * 背包中道具是否使用
   */
  public UpdateItemInfo setIsBagItemUsing(boolean isBagItemUsing) {
    this.isBagItemUsing = isBagItemUsing;
    setIsBagItemUsingIsSet(true);
    return this;
  }

  public void unsetIsBagItemUsing() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISBAGITEMUSING_ISSET_ID);
  }

  /** Returns true if field isBagItemUsing is set (has been assigned a value) and false otherwise */
  public boolean isSetIsBagItemUsing() {
    return EncodingUtils.testBit(__isset_bitfield, __ISBAGITEMUSING_ISSET_ID);
  }

  public void setIsBagItemUsingIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISBAGITEMUSING_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INSTANCE_ID:
      if (value == null) {
        unsetInstanceId();
      } else {
        setInstanceId((Long)value);
      }
      break;

    case COUNT:
      if (value == null) {
        unsetCount();
      } else {
        setCount((Integer)value);
      }
      break;

    case VALID_TIME:
      if (value == null) {
        unsetValidTime();
      } else {
        setValidTime((Integer)value);
      }
      break;

    case EXTRA_TIP_ID:
      if (value == null) {
        unsetExtraTipId();
      } else {
        setExtraTipId((Integer)value);
      }
      break;

    case IS_BAG_ITEM_USING:
      if (value == null) {
        unsetIsBagItemUsing();
      } else {
        setIsBagItemUsing((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INSTANCE_ID:
      return Long.valueOf(getInstanceId());

    case COUNT:
      return Integer.valueOf(getCount());

    case VALID_TIME:
      return Integer.valueOf(getValidTime());

    case EXTRA_TIP_ID:
      return Integer.valueOf(getExtraTipId());

    case IS_BAG_ITEM_USING:
      return Boolean.valueOf(isIsBagItemUsing());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INSTANCE_ID:
      return isSetInstanceId();
    case COUNT:
      return isSetCount();
    case VALID_TIME:
      return isSetValidTime();
    case EXTRA_TIP_ID:
      return isSetExtraTipId();
    case IS_BAG_ITEM_USING:
      return isSetIsBagItemUsing();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UpdateItemInfo)
      return this.equals((UpdateItemInfo)that);
    return false;
  }

  public boolean equals(UpdateItemInfo that) {
    if (that == null)
      return false;

    boolean this_present_instanceId = true;
    boolean that_present_instanceId = true;
    if (this_present_instanceId || that_present_instanceId) {
      if (!(this_present_instanceId && that_present_instanceId))
        return false;
      if (this.instanceId != that.instanceId)
        return false;
    }

    boolean this_present_count = true && this.isSetCount();
    boolean that_present_count = true && that.isSetCount();
    if (this_present_count || that_present_count) {
      if (!(this_present_count && that_present_count))
        return false;
      if (this.count != that.count)
        return false;
    }

    boolean this_present_validTime = true && this.isSetValidTime();
    boolean that_present_validTime = true && that.isSetValidTime();
    if (this_present_validTime || that_present_validTime) {
      if (!(this_present_validTime && that_present_validTime))
        return false;
      if (this.validTime != that.validTime)
        return false;
    }

    boolean this_present_extraTipId = true && this.isSetExtraTipId();
    boolean that_present_extraTipId = true && that.isSetExtraTipId();
    if (this_present_extraTipId || that_present_extraTipId) {
      if (!(this_present_extraTipId && that_present_extraTipId))
        return false;
      if (this.extraTipId != that.extraTipId)
        return false;
    }

    boolean this_present_isBagItemUsing = true && this.isSetIsBagItemUsing();
    boolean that_present_isBagItemUsing = true && that.isSetIsBagItemUsing();
    if (this_present_isBagItemUsing || that_present_isBagItemUsing) {
      if (!(this_present_isBagItemUsing && that_present_isBagItemUsing))
        return false;
      if (this.isBagItemUsing != that.isBagItemUsing)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(UpdateItemInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    UpdateItemInfo typedOther = (UpdateItemInfo)other;

    lastComparison = Boolean.valueOf(isSetInstanceId()).compareTo(typedOther.isSetInstanceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstanceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instanceId, typedOther.instanceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValidTime()).compareTo(typedOther.isSetValidTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValidTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validTime, typedOther.validTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtraTipId()).compareTo(typedOther.isSetExtraTipId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtraTipId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extraTipId, typedOther.extraTipId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsBagItemUsing()).compareTo(typedOther.isSetIsBagItemUsing());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsBagItemUsing()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isBagItemUsing, typedOther.isBagItemUsing);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UpdateItemInfo(");
    boolean first = true;

    sb.append("instanceId:");
    sb.append(this.instanceId);
    first = false;
    if (isSetCount()) {
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
    }
    if (isSetValidTime()) {
      if (!first) sb.append(", ");
      sb.append("validTime:");
      sb.append(this.validTime);
      first = false;
    }
    if (isSetExtraTipId()) {
      if (!first) sb.append(", ");
      sb.append("extraTipId:");
      sb.append(this.extraTipId);
      first = false;
    }
    if (isSetIsBagItemUsing()) {
      if (!first) sb.append(", ");
      sb.append("isBagItemUsing:");
      sb.append(this.isBagItemUsing);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UpdateItemInfoStandardSchemeFactory implements SchemeFactory {
    public UpdateItemInfoStandardScheme getScheme() {
      return new UpdateItemInfoStandardScheme();
    }
  }

  private static class UpdateItemInfoStandardScheme extends StandardScheme<UpdateItemInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateItemInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INSTANCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.instanceId = iprot.readI64();
              struct.setInstanceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.count = iprot.readI32();
              struct.setCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VALID_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.validTime = iprot.readI32();
              struct.setValidTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EXTRA_TIP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.extraTipId = iprot.readI32();
              struct.setExtraTipIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_BAG_ITEM_USING
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isBagItemUsing = iprot.readBool();
              struct.setIsBagItemUsingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateItemInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(INSTANCE_ID_FIELD_DESC);
      oprot.writeI64(struct.instanceId);
      oprot.writeFieldEnd();
      if (struct.isSetCount()) {
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
      }
      if (struct.isSetValidTime()) {
        oprot.writeFieldBegin(VALID_TIME_FIELD_DESC);
        oprot.writeI32(struct.validTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetExtraTipId()) {
        oprot.writeFieldBegin(EXTRA_TIP_ID_FIELD_DESC);
        oprot.writeI32(struct.extraTipId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsBagItemUsing()) {
        oprot.writeFieldBegin(IS_BAG_ITEM_USING_FIELD_DESC);
        oprot.writeBool(struct.isBagItemUsing);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UpdateItemInfoTupleSchemeFactory implements SchemeFactory {
    public UpdateItemInfoTupleScheme getScheme() {
      return new UpdateItemInfoTupleScheme();
    }
  }

  private static class UpdateItemInfoTupleScheme extends TupleScheme<UpdateItemInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UpdateItemInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetInstanceId()) {
        optionals.set(0);
      }
      if (struct.isSetCount()) {
        optionals.set(1);
      }
      if (struct.isSetValidTime()) {
        optionals.set(2);
      }
      if (struct.isSetExtraTipId()) {
        optionals.set(3);
      }
      if (struct.isSetIsBagItemUsing()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetInstanceId()) {
        oprot.writeI64(struct.instanceId);
      }
      if (struct.isSetCount()) {
        oprot.writeI32(struct.count);
      }
      if (struct.isSetValidTime()) {
        oprot.writeI32(struct.validTime);
      }
      if (struct.isSetExtraTipId()) {
        oprot.writeI32(struct.extraTipId);
      }
      if (struct.isSetIsBagItemUsing()) {
        oprot.writeBool(struct.isBagItemUsing);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UpdateItemInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.instanceId = iprot.readI64();
        struct.setInstanceIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.count = iprot.readI32();
        struct.setCountIsSet(true);
      }
      if (incoming.get(2)) {
        struct.validTime = iprot.readI32();
        struct.setValidTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.extraTipId = iprot.readI32();
        struct.setExtraTipIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.isBagItemUsing = iprot.readBool();
        struct.setIsBagItemUsingIsSet(true);
      }
    }
  }

}

