/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class LoversDynSyncMarkInfo implements org.apache.thrift.TBase<LoversDynSyncMarkInfo, LoversDynSyncMarkInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LoversDynSyncMarkInfo");

  private static final org.apache.thrift.protocol.TField TEAM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("teamId", org.apache.thrift.protocol.TType.BYTE, (short)1);
  private static final org.apache.thrift.protocol.TField CHAR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("charId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField MISS_FIELD_DESC = new org.apache.thrift.protocol.TField("miss", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField MARK_FIELD_DESC = new org.apache.thrift.protocol.TField("mark", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField CURRENT_ENERY_FIELD_DESC = new org.apache.thrift.protocol.TField("currentEnery", org.apache.thrift.protocol.TType.I16, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LoversDynSyncMarkInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LoversDynSyncMarkInfoTupleSchemeFactory());
  }

  public byte teamId; // required
  public long charId; // required
  public boolean miss; // required
  public int mark; // required
  public short currentEnery; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TEAM_ID((short)1, "teamId"),
    CHAR_ID((short)2, "charId"),
    MISS((short)3, "miss"),
    MARK((short)4, "mark"),
    CURRENT_ENERY((short)5, "currentEnery");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TEAM_ID
          return TEAM_ID;
        case 2: // CHAR_ID
          return CHAR_ID;
        case 3: // MISS
          return MISS;
        case 4: // MARK
          return MARK;
        case 5: // CURRENT_ENERY
          return CURRENT_ENERY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TEAMID_ISSET_ID = 0;
  private static final int __CHARID_ISSET_ID = 1;
  private static final int __MISS_ISSET_ID = 2;
  private static final int __MARK_ISSET_ID = 3;
  private static final int __CURRENTENERY_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TEAM_ID, new org.apache.thrift.meta_data.FieldMetaData("teamId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.CHAR_ID, new org.apache.thrift.meta_data.FieldMetaData("charId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MISS, new org.apache.thrift.meta_data.FieldMetaData("miss", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.MARK, new org.apache.thrift.meta_data.FieldMetaData("mark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CURRENT_ENERY, new org.apache.thrift.meta_data.FieldMetaData("currentEnery", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LoversDynSyncMarkInfo.class, metaDataMap);
  }

  public LoversDynSyncMarkInfo() {
  }

  public LoversDynSyncMarkInfo(
    byte teamId,
    long charId,
    boolean miss,
    int mark,
    short currentEnery)
  {
    this();
    this.teamId = teamId;
    setTeamIdIsSet(true);
    this.charId = charId;
    setCharIdIsSet(true);
    this.miss = miss;
    setMissIsSet(true);
    this.mark = mark;
    setMarkIsSet(true);
    this.currentEnery = currentEnery;
    setCurrentEneryIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LoversDynSyncMarkInfo(LoversDynSyncMarkInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.teamId = other.teamId;
    this.charId = other.charId;
    this.miss = other.miss;
    this.mark = other.mark;
    this.currentEnery = other.currentEnery;
  }

  public LoversDynSyncMarkInfo deepCopy() {
    return new LoversDynSyncMarkInfo(this);
  }

  @Override
  public void clear() {
    setTeamIdIsSet(false);
    this.teamId = 0;
    setCharIdIsSet(false);
    this.charId = 0;
    setMissIsSet(false);
    this.miss = false;
    setMarkIsSet(false);
    this.mark = 0;
    setCurrentEneryIsSet(false);
    this.currentEnery = 0;
  }

  public byte getTeamId() {
    return this.teamId;
  }

  public LoversDynSyncMarkInfo setTeamId(byte teamId) {
    this.teamId = teamId;
    setTeamIdIsSet(true);
    return this;
  }

  public void unsetTeamId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TEAMID_ISSET_ID);
  }

  /** Returns true if field teamId is set (has been assigned a value) and false otherwise */
  public boolean isSetTeamId() {
    return EncodingUtils.testBit(__isset_bitfield, __TEAMID_ISSET_ID);
  }

  public void setTeamIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TEAMID_ISSET_ID, value);
  }

  public long getCharId() {
    return this.charId;
  }

  public LoversDynSyncMarkInfo setCharId(long charId) {
    this.charId = charId;
    setCharIdIsSet(true);
    return this;
  }

  public void unsetCharId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHARID_ISSET_ID);
  }

  /** Returns true if field charId is set (has been assigned a value) and false otherwise */
  public boolean isSetCharId() {
    return EncodingUtils.testBit(__isset_bitfield, __CHARID_ISSET_ID);
  }

  public void setCharIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHARID_ISSET_ID, value);
  }

  public boolean isMiss() {
    return this.miss;
  }

  public LoversDynSyncMarkInfo setMiss(boolean miss) {
    this.miss = miss;
    setMissIsSet(true);
    return this;
  }

  public void unsetMiss() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MISS_ISSET_ID);
  }

  /** Returns true if field miss is set (has been assigned a value) and false otherwise */
  public boolean isSetMiss() {
    return EncodingUtils.testBit(__isset_bitfield, __MISS_ISSET_ID);
  }

  public void setMissIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MISS_ISSET_ID, value);
  }

  public int getMark() {
    return this.mark;
  }

  public LoversDynSyncMarkInfo setMark(int mark) {
    this.mark = mark;
    setMarkIsSet(true);
    return this;
  }

  public void unsetMark() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MARK_ISSET_ID);
  }

  /** Returns true if field mark is set (has been assigned a value) and false otherwise */
  public boolean isSetMark() {
    return EncodingUtils.testBit(__isset_bitfield, __MARK_ISSET_ID);
  }

  public void setMarkIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MARK_ISSET_ID, value);
  }

  public short getCurrentEnery() {
    return this.currentEnery;
  }

  public LoversDynSyncMarkInfo setCurrentEnery(short currentEnery) {
    this.currentEnery = currentEnery;
    setCurrentEneryIsSet(true);
    return this;
  }

  public void unsetCurrentEnery() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRENTENERY_ISSET_ID);
  }

  /** Returns true if field currentEnery is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrentEnery() {
    return EncodingUtils.testBit(__isset_bitfield, __CURRENTENERY_ISSET_ID);
  }

  public void setCurrentEneryIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRENTENERY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TEAM_ID:
      if (value == null) {
        unsetTeamId();
      } else {
        setTeamId((Byte)value);
      }
      break;

    case CHAR_ID:
      if (value == null) {
        unsetCharId();
      } else {
        setCharId((Long)value);
      }
      break;

    case MISS:
      if (value == null) {
        unsetMiss();
      } else {
        setMiss((Boolean)value);
      }
      break;

    case MARK:
      if (value == null) {
        unsetMark();
      } else {
        setMark((Integer)value);
      }
      break;

    case CURRENT_ENERY:
      if (value == null) {
        unsetCurrentEnery();
      } else {
        setCurrentEnery((Short)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TEAM_ID:
      return Byte.valueOf(getTeamId());

    case CHAR_ID:
      return Long.valueOf(getCharId());

    case MISS:
      return Boolean.valueOf(isMiss());

    case MARK:
      return Integer.valueOf(getMark());

    case CURRENT_ENERY:
      return Short.valueOf(getCurrentEnery());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TEAM_ID:
      return isSetTeamId();
    case CHAR_ID:
      return isSetCharId();
    case MISS:
      return isSetMiss();
    case MARK:
      return isSetMark();
    case CURRENT_ENERY:
      return isSetCurrentEnery();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LoversDynSyncMarkInfo)
      return this.equals((LoversDynSyncMarkInfo)that);
    return false;
  }

  public boolean equals(LoversDynSyncMarkInfo that) {
    if (that == null)
      return false;

    boolean this_present_teamId = true;
    boolean that_present_teamId = true;
    if (this_present_teamId || that_present_teamId) {
      if (!(this_present_teamId && that_present_teamId))
        return false;
      if (this.teamId != that.teamId)
        return false;
    }

    boolean this_present_charId = true;
    boolean that_present_charId = true;
    if (this_present_charId || that_present_charId) {
      if (!(this_present_charId && that_present_charId))
        return false;
      if (this.charId != that.charId)
        return false;
    }

    boolean this_present_miss = true;
    boolean that_present_miss = true;
    if (this_present_miss || that_present_miss) {
      if (!(this_present_miss && that_present_miss))
        return false;
      if (this.miss != that.miss)
        return false;
    }

    boolean this_present_mark = true;
    boolean that_present_mark = true;
    if (this_present_mark || that_present_mark) {
      if (!(this_present_mark && that_present_mark))
        return false;
      if (this.mark != that.mark)
        return false;
    }

    boolean this_present_currentEnery = true;
    boolean that_present_currentEnery = true;
    if (this_present_currentEnery || that_present_currentEnery) {
      if (!(this_present_currentEnery && that_present_currentEnery))
        return false;
      if (this.currentEnery != that.currentEnery)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(LoversDynSyncMarkInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    LoversDynSyncMarkInfo typedOther = (LoversDynSyncMarkInfo)other;

    lastComparison = Boolean.valueOf(isSetTeamId()).compareTo(typedOther.isSetTeamId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeamId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teamId, typedOther.teamId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCharId()).compareTo(typedOther.isSetCharId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCharId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.charId, typedOther.charId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMiss()).compareTo(typedOther.isSetMiss());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMiss()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.miss, typedOther.miss);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMark()).compareTo(typedOther.isSetMark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mark, typedOther.mark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrentEnery()).compareTo(typedOther.isSetCurrentEnery());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentEnery()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentEnery, typedOther.currentEnery);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LoversDynSyncMarkInfo(");
    boolean first = true;

    sb.append("teamId:");
    sb.append(this.teamId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("charId:");
    sb.append(this.charId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("miss:");
    sb.append(this.miss);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mark:");
    sb.append(this.mark);
    first = false;
    if (!first) sb.append(", ");
    sb.append("currentEnery:");
    sb.append(this.currentEnery);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LoversDynSyncMarkInfoStandardSchemeFactory implements SchemeFactory {
    public LoversDynSyncMarkInfoStandardScheme getScheme() {
      return new LoversDynSyncMarkInfoStandardScheme();
    }
  }

  private static class LoversDynSyncMarkInfoStandardScheme extends StandardScheme<LoversDynSyncMarkInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LoversDynSyncMarkInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TEAM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.teamId = iprot.readByte();
              struct.setTeamIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CHAR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.charId = iprot.readI64();
              struct.setCharIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MISS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.miss = iprot.readBool();
              struct.setMissIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MARK
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mark = iprot.readI32();
              struct.setMarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CURRENT_ENERY
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.currentEnery = iprot.readI16();
              struct.setCurrentEneryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LoversDynSyncMarkInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TEAM_ID_FIELD_DESC);
      oprot.writeByte(struct.teamId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CHAR_ID_FIELD_DESC);
      oprot.writeI64(struct.charId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MISS_FIELD_DESC);
      oprot.writeBool(struct.miss);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MARK_FIELD_DESC);
      oprot.writeI32(struct.mark);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CURRENT_ENERY_FIELD_DESC);
      oprot.writeI16(struct.currentEnery);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LoversDynSyncMarkInfoTupleSchemeFactory implements SchemeFactory {
    public LoversDynSyncMarkInfoTupleScheme getScheme() {
      return new LoversDynSyncMarkInfoTupleScheme();
    }
  }

  private static class LoversDynSyncMarkInfoTupleScheme extends TupleScheme<LoversDynSyncMarkInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LoversDynSyncMarkInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTeamId()) {
        optionals.set(0);
      }
      if (struct.isSetCharId()) {
        optionals.set(1);
      }
      if (struct.isSetMiss()) {
        optionals.set(2);
      }
      if (struct.isSetMark()) {
        optionals.set(3);
      }
      if (struct.isSetCurrentEnery()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetTeamId()) {
        oprot.writeByte(struct.teamId);
      }
      if (struct.isSetCharId()) {
        oprot.writeI64(struct.charId);
      }
      if (struct.isSetMiss()) {
        oprot.writeBool(struct.miss);
      }
      if (struct.isSetMark()) {
        oprot.writeI32(struct.mark);
      }
      if (struct.isSetCurrentEnery()) {
        oprot.writeI16(struct.currentEnery);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LoversDynSyncMarkInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.teamId = iprot.readByte();
        struct.setTeamIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.charId = iprot.readI64();
        struct.setCharIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.miss = iprot.readBool();
        struct.setMissIsSet(true);
      }
      if (incoming.get(3)) {
        struct.mark = iprot.readI32();
        struct.setMarkIsSet(true);
      }
      if (incoming.get(4)) {
        struct.currentEnery = iprot.readI16();
        struct.setCurrentEneryIsSet(true);
      }
    }
  }

}

