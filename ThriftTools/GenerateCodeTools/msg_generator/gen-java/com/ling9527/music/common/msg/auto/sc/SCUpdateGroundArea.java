/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 更新玩家广场区域状态
 */
public class SCUpdateGroundArea implements org.apache.thrift.TBase<SCUpdateGroundArea, SCUpdateGroundArea._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCUpdateGroundArea");

  private static final org.apache.thrift.protocol.TField CHAR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("charId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField GROUND_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("groundStatus", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField POS_X_FIELD_DESC = new org.apache.thrift.protocol.TField("posX", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField POS_Y_FIELD_DESC = new org.apache.thrift.protocol.TField("posY", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField POS_Z_FIELD_DESC = new org.apache.thrift.protocol.TField("posZ", org.apache.thrift.protocol.TType.DOUBLE, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCUpdateGroundAreaStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCUpdateGroundAreaTupleSchemeFactory());
  }

  public long charId; // required
  /**
   * 区域GroundPlayerStatus
   */
  public byte groundStatus; // required
  /**
   * 新的坐标
   */
  public double posX; // required
  public double posY; // required
  public double posZ; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CHAR_ID((short)1, "charId"),
    /**
     * 区域GroundPlayerStatus
     */
    GROUND_STATUS((short)2, "groundStatus"),
    /**
     * 新的坐标
     */
    POS_X((short)3, "posX"),
    POS_Y((short)4, "posY"),
    POS_Z((short)5, "posZ");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CHAR_ID
          return CHAR_ID;
        case 2: // GROUND_STATUS
          return GROUND_STATUS;
        case 3: // POS_X
          return POS_X;
        case 4: // POS_Y
          return POS_Y;
        case 5: // POS_Z
          return POS_Z;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CHARID_ISSET_ID = 0;
  private static final int __GROUNDSTATUS_ISSET_ID = 1;
  private static final int __POSX_ISSET_ID = 2;
  private static final int __POSY_ISSET_ID = 3;
  private static final int __POSZ_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CHAR_ID, new org.apache.thrift.meta_data.FieldMetaData("charId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.GROUND_STATUS, new org.apache.thrift.meta_data.FieldMetaData("groundStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.POS_X, new org.apache.thrift.meta_data.FieldMetaData("posX", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.POS_Y, new org.apache.thrift.meta_data.FieldMetaData("posY", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.POS_Z, new org.apache.thrift.meta_data.FieldMetaData("posZ", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCUpdateGroundArea.class, metaDataMap);
  }

  public SCUpdateGroundArea() {
  }

  public SCUpdateGroundArea(
    long charId,
    byte groundStatus,
    double posX,
    double posY,
    double posZ)
  {
    this();
    this.charId = charId;
    setCharIdIsSet(true);
    this.groundStatus = groundStatus;
    setGroundStatusIsSet(true);
    this.posX = posX;
    setPosXIsSet(true);
    this.posY = posY;
    setPosYIsSet(true);
    this.posZ = posZ;
    setPosZIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCUpdateGroundArea(SCUpdateGroundArea other) {
    __isset_bitfield = other.__isset_bitfield;
    this.charId = other.charId;
    this.groundStatus = other.groundStatus;
    this.posX = other.posX;
    this.posY = other.posY;
    this.posZ = other.posZ;
  }

  public SCUpdateGroundArea deepCopy() {
    return new SCUpdateGroundArea(this);
  }

  @Override
  public void clear() {
    setCharIdIsSet(false);
    this.charId = 0;
    setGroundStatusIsSet(false);
    this.groundStatus = 0;
    setPosXIsSet(false);
    this.posX = 0.0;
    setPosYIsSet(false);
    this.posY = 0.0;
    setPosZIsSet(false);
    this.posZ = 0.0;
  }

  public long getCharId() {
    return this.charId;
  }

  public SCUpdateGroundArea setCharId(long charId) {
    this.charId = charId;
    setCharIdIsSet(true);
    return this;
  }

  public void unsetCharId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHARID_ISSET_ID);
  }

  /** Returns true if field charId is set (has been assigned a value) and false otherwise */
  public boolean isSetCharId() {
    return EncodingUtils.testBit(__isset_bitfield, __CHARID_ISSET_ID);
  }

  public void setCharIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHARID_ISSET_ID, value);
  }

  /**
   * 区域GroundPlayerStatus
   */
  public byte getGroundStatus() {
    return this.groundStatus;
  }

  /**
   * 区域GroundPlayerStatus
   */
  public SCUpdateGroundArea setGroundStatus(byte groundStatus) {
    this.groundStatus = groundStatus;
    setGroundStatusIsSet(true);
    return this;
  }

  public void unsetGroundStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GROUNDSTATUS_ISSET_ID);
  }

  /** Returns true if field groundStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetGroundStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __GROUNDSTATUS_ISSET_ID);
  }

  public void setGroundStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GROUNDSTATUS_ISSET_ID, value);
  }

  /**
   * 新的坐标
   */
  public double getPosX() {
    return this.posX;
  }

  /**
   * 新的坐标
   */
  public SCUpdateGroundArea setPosX(double posX) {
    this.posX = posX;
    setPosXIsSet(true);
    return this;
  }

  public void unsetPosX() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSX_ISSET_ID);
  }

  /** Returns true if field posX is set (has been assigned a value) and false otherwise */
  public boolean isSetPosX() {
    return EncodingUtils.testBit(__isset_bitfield, __POSX_ISSET_ID);
  }

  public void setPosXIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSX_ISSET_ID, value);
  }

  public double getPosY() {
    return this.posY;
  }

  public SCUpdateGroundArea setPosY(double posY) {
    this.posY = posY;
    setPosYIsSet(true);
    return this;
  }

  public void unsetPosY() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSY_ISSET_ID);
  }

  /** Returns true if field posY is set (has been assigned a value) and false otherwise */
  public boolean isSetPosY() {
    return EncodingUtils.testBit(__isset_bitfield, __POSY_ISSET_ID);
  }

  public void setPosYIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSY_ISSET_ID, value);
  }

  public double getPosZ() {
    return this.posZ;
  }

  public SCUpdateGroundArea setPosZ(double posZ) {
    this.posZ = posZ;
    setPosZIsSet(true);
    return this;
  }

  public void unsetPosZ() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSZ_ISSET_ID);
  }

  /** Returns true if field posZ is set (has been assigned a value) and false otherwise */
  public boolean isSetPosZ() {
    return EncodingUtils.testBit(__isset_bitfield, __POSZ_ISSET_ID);
  }

  public void setPosZIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSZ_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CHAR_ID:
      if (value == null) {
        unsetCharId();
      } else {
        setCharId((Long)value);
      }
      break;

    case GROUND_STATUS:
      if (value == null) {
        unsetGroundStatus();
      } else {
        setGroundStatus((Byte)value);
      }
      break;

    case POS_X:
      if (value == null) {
        unsetPosX();
      } else {
        setPosX((Double)value);
      }
      break;

    case POS_Y:
      if (value == null) {
        unsetPosY();
      } else {
        setPosY((Double)value);
      }
      break;

    case POS_Z:
      if (value == null) {
        unsetPosZ();
      } else {
        setPosZ((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CHAR_ID:
      return Long.valueOf(getCharId());

    case GROUND_STATUS:
      return Byte.valueOf(getGroundStatus());

    case POS_X:
      return Double.valueOf(getPosX());

    case POS_Y:
      return Double.valueOf(getPosY());

    case POS_Z:
      return Double.valueOf(getPosZ());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CHAR_ID:
      return isSetCharId();
    case GROUND_STATUS:
      return isSetGroundStatus();
    case POS_X:
      return isSetPosX();
    case POS_Y:
      return isSetPosY();
    case POS_Z:
      return isSetPosZ();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCUpdateGroundArea)
      return this.equals((SCUpdateGroundArea)that);
    return false;
  }

  public boolean equals(SCUpdateGroundArea that) {
    if (that == null)
      return false;

    boolean this_present_charId = true;
    boolean that_present_charId = true;
    if (this_present_charId || that_present_charId) {
      if (!(this_present_charId && that_present_charId))
        return false;
      if (this.charId != that.charId)
        return false;
    }

    boolean this_present_groundStatus = true;
    boolean that_present_groundStatus = true;
    if (this_present_groundStatus || that_present_groundStatus) {
      if (!(this_present_groundStatus && that_present_groundStatus))
        return false;
      if (this.groundStatus != that.groundStatus)
        return false;
    }

    boolean this_present_posX = true;
    boolean that_present_posX = true;
    if (this_present_posX || that_present_posX) {
      if (!(this_present_posX && that_present_posX))
        return false;
      if (this.posX != that.posX)
        return false;
    }

    boolean this_present_posY = true;
    boolean that_present_posY = true;
    if (this_present_posY || that_present_posY) {
      if (!(this_present_posY && that_present_posY))
        return false;
      if (this.posY != that.posY)
        return false;
    }

    boolean this_present_posZ = true;
    boolean that_present_posZ = true;
    if (this_present_posZ || that_present_posZ) {
      if (!(this_present_posZ && that_present_posZ))
        return false;
      if (this.posZ != that.posZ)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCUpdateGroundArea other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCUpdateGroundArea typedOther = (SCUpdateGroundArea)other;

    lastComparison = Boolean.valueOf(isSetCharId()).compareTo(typedOther.isSetCharId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCharId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.charId, typedOther.charId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroundStatus()).compareTo(typedOther.isSetGroundStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroundStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groundStatus, typedOther.groundStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPosX()).compareTo(typedOther.isSetPosX());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPosX()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.posX, typedOther.posX);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPosY()).compareTo(typedOther.isSetPosY());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPosY()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.posY, typedOther.posY);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPosZ()).compareTo(typedOther.isSetPosZ());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPosZ()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.posZ, typedOther.posZ);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCUpdateGroundArea(");
    boolean first = true;

    sb.append("charId:");
    sb.append(this.charId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("groundStatus:");
    sb.append(this.groundStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("posX:");
    sb.append(this.posX);
    first = false;
    if (!first) sb.append(", ");
    sb.append("posY:");
    sb.append(this.posY);
    first = false;
    if (!first) sb.append(", ");
    sb.append("posZ:");
    sb.append(this.posZ);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCUpdateGroundAreaStandardSchemeFactory implements SchemeFactory {
    public SCUpdateGroundAreaStandardScheme getScheme() {
      return new SCUpdateGroundAreaStandardScheme();
    }
  }

  private static class SCUpdateGroundAreaStandardScheme extends StandardScheme<SCUpdateGroundArea> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCUpdateGroundArea struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CHAR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.charId = iprot.readI64();
              struct.setCharIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GROUND_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.groundStatus = iprot.readByte();
              struct.setGroundStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // POS_X
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.posX = iprot.readDouble();
              struct.setPosXIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // POS_Y
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.posY = iprot.readDouble();
              struct.setPosYIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // POS_Z
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.posZ = iprot.readDouble();
              struct.setPosZIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCUpdateGroundArea struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CHAR_ID_FIELD_DESC);
      oprot.writeI64(struct.charId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GROUND_STATUS_FIELD_DESC);
      oprot.writeByte(struct.groundStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POS_X_FIELD_DESC);
      oprot.writeDouble(struct.posX);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POS_Y_FIELD_DESC);
      oprot.writeDouble(struct.posY);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POS_Z_FIELD_DESC);
      oprot.writeDouble(struct.posZ);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCUpdateGroundAreaTupleSchemeFactory implements SchemeFactory {
    public SCUpdateGroundAreaTupleScheme getScheme() {
      return new SCUpdateGroundAreaTupleScheme();
    }
  }

  private static class SCUpdateGroundAreaTupleScheme extends TupleScheme<SCUpdateGroundArea> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCUpdateGroundArea struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCharId()) {
        optionals.set(0);
      }
      if (struct.isSetGroundStatus()) {
        optionals.set(1);
      }
      if (struct.isSetPosX()) {
        optionals.set(2);
      }
      if (struct.isSetPosY()) {
        optionals.set(3);
      }
      if (struct.isSetPosZ()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetCharId()) {
        oprot.writeI64(struct.charId);
      }
      if (struct.isSetGroundStatus()) {
        oprot.writeByte(struct.groundStatus);
      }
      if (struct.isSetPosX()) {
        oprot.writeDouble(struct.posX);
      }
      if (struct.isSetPosY()) {
        oprot.writeDouble(struct.posY);
      }
      if (struct.isSetPosZ()) {
        oprot.writeDouble(struct.posZ);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCUpdateGroundArea struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.charId = iprot.readI64();
        struct.setCharIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.groundStatus = iprot.readByte();
        struct.setGroundStatusIsSet(true);
      }
      if (incoming.get(2)) {
        struct.posX = iprot.readDouble();
        struct.setPosXIsSet(true);
      }
      if (incoming.get(3)) {
        struct.posY = iprot.readDouble();
        struct.setPosYIsSet(true);
      }
      if (incoming.get(4)) {
        struct.posZ = iprot.readDouble();
        struct.setPosZIsSet(true);
      }
    }
  }

}

