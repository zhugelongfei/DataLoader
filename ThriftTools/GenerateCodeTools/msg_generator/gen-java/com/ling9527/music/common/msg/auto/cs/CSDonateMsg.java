/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.cs;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CSDonateMsg implements org.apache.thrift.TBase<CSDonateMsg, CSDonateMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CSDonateMsg");

  private static final org.apache.thrift.protocol.TField RECIVE_CHAR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("reciveCharId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField DONATE_ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("donateItems", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField IS_GIFT_MARKET_FIELD_DESC = new org.apache.thrift.protocol.TField("isGiftMarket", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField IS_LIMIT_MARKET_FIELD_DESC = new org.apache.thrift.protocol.TField("isLimitMarket", org.apache.thrift.protocol.TType.BOOL, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CSDonateMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CSDonateMsgTupleSchemeFactory());
  }

  public long reciveCharId; // required
  public List<com.ling9527.music.common.msg.auto.BuyItemInfo> donateItems; // required
  public String content; // optional
  /**
   * 是否来自礼物商城
   */
  public boolean isGiftMarket; // optional
  /**
   * 是否来自限时商城
   */
  public boolean isLimitMarket; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RECIVE_CHAR_ID((short)1, "reciveCharId"),
    DONATE_ITEMS((short)2, "donateItems"),
    CONTENT((short)3, "content"),
    /**
     * 是否来自礼物商城
     */
    IS_GIFT_MARKET((short)4, "isGiftMarket"),
    /**
     * 是否来自限时商城
     */
    IS_LIMIT_MARKET((short)5, "isLimitMarket");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RECIVE_CHAR_ID
          return RECIVE_CHAR_ID;
        case 2: // DONATE_ITEMS
          return DONATE_ITEMS;
        case 3: // CONTENT
          return CONTENT;
        case 4: // IS_GIFT_MARKET
          return IS_GIFT_MARKET;
        case 5: // IS_LIMIT_MARKET
          return IS_LIMIT_MARKET;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RECIVECHARID_ISSET_ID = 0;
  private static final int __ISGIFTMARKET_ISSET_ID = 1;
  private static final int __ISLIMITMARKET_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.CONTENT,_Fields.IS_GIFT_MARKET,_Fields.IS_LIMIT_MARKET};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RECIVE_CHAR_ID, new org.apache.thrift.meta_data.FieldMetaData("reciveCharId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DONATE_ITEMS, new org.apache.thrift.meta_data.FieldMetaData("donateItems", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.BuyItemInfo.class))));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_GIFT_MARKET, new org.apache.thrift.meta_data.FieldMetaData("isGiftMarket", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_LIMIT_MARKET, new org.apache.thrift.meta_data.FieldMetaData("isLimitMarket", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CSDonateMsg.class, metaDataMap);
  }

  public CSDonateMsg() {
  }

  public CSDonateMsg(
    long reciveCharId,
    List<com.ling9527.music.common.msg.auto.BuyItemInfo> donateItems)
  {
    this();
    this.reciveCharId = reciveCharId;
    setReciveCharIdIsSet(true);
    this.donateItems = donateItems;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CSDonateMsg(CSDonateMsg other) {
    __isset_bitfield = other.__isset_bitfield;
    this.reciveCharId = other.reciveCharId;
    if (other.isSetDonateItems()) {
      List<com.ling9527.music.common.msg.auto.BuyItemInfo> __this__donateItems = new ArrayList<com.ling9527.music.common.msg.auto.BuyItemInfo>();
      for (com.ling9527.music.common.msg.auto.BuyItemInfo other_element : other.donateItems) {
        __this__donateItems.add(new com.ling9527.music.common.msg.auto.BuyItemInfo(other_element));
      }
      this.donateItems = __this__donateItems;
    }
    if (other.isSetContent()) {
      this.content = other.content;
    }
    this.isGiftMarket = other.isGiftMarket;
    this.isLimitMarket = other.isLimitMarket;
  }

  public CSDonateMsg deepCopy() {
    return new CSDonateMsg(this);
  }

  @Override
  public void clear() {
    setReciveCharIdIsSet(false);
    this.reciveCharId = 0;
    this.donateItems = null;
    this.content = null;
    setIsGiftMarketIsSet(false);
    this.isGiftMarket = false;
    setIsLimitMarketIsSet(false);
    this.isLimitMarket = false;
  }

  public long getReciveCharId() {
    return this.reciveCharId;
  }

  public CSDonateMsg setReciveCharId(long reciveCharId) {
    this.reciveCharId = reciveCharId;
    setReciveCharIdIsSet(true);
    return this;
  }

  public void unsetReciveCharId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECIVECHARID_ISSET_ID);
  }

  /** Returns true if field reciveCharId is set (has been assigned a value) and false otherwise */
  public boolean isSetReciveCharId() {
    return EncodingUtils.testBit(__isset_bitfield, __RECIVECHARID_ISSET_ID);
  }

  public void setReciveCharIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECIVECHARID_ISSET_ID, value);
  }

  public int getDonateItemsSize() {
    return (this.donateItems == null) ? 0 : this.donateItems.size();
  }

  public java.util.Iterator<com.ling9527.music.common.msg.auto.BuyItemInfo> getDonateItemsIterator() {
    return (this.donateItems == null) ? null : this.donateItems.iterator();
  }

  public void addToDonateItems(com.ling9527.music.common.msg.auto.BuyItemInfo elem) {
    if (this.donateItems == null) {
      this.donateItems = new ArrayList<com.ling9527.music.common.msg.auto.BuyItemInfo>();
    }
    this.donateItems.add(elem);
  }

  public List<com.ling9527.music.common.msg.auto.BuyItemInfo> getDonateItems() {
    return this.donateItems;
  }

  public CSDonateMsg setDonateItems(List<com.ling9527.music.common.msg.auto.BuyItemInfo> donateItems) {
    this.donateItems = donateItems;
    return this;
  }

  public void unsetDonateItems() {
    this.donateItems = null;
  }

  /** Returns true if field donateItems is set (has been assigned a value) and false otherwise */
  public boolean isSetDonateItems() {
    return this.donateItems != null;
  }

  public void setDonateItemsIsSet(boolean value) {
    if (!value) {
      this.donateItems = null;
    }
  }

  public String getContent() {
    return this.content;
  }

  public CSDonateMsg setContent(String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  /**
   * 是否来自礼物商城
   */
  public boolean isIsGiftMarket() {
    return this.isGiftMarket;
  }

  /**
   * 是否来自礼物商城
   */
  public CSDonateMsg setIsGiftMarket(boolean isGiftMarket) {
    this.isGiftMarket = isGiftMarket;
    setIsGiftMarketIsSet(true);
    return this;
  }

  public void unsetIsGiftMarket() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISGIFTMARKET_ISSET_ID);
  }

  /** Returns true if field isGiftMarket is set (has been assigned a value) and false otherwise */
  public boolean isSetIsGiftMarket() {
    return EncodingUtils.testBit(__isset_bitfield, __ISGIFTMARKET_ISSET_ID);
  }

  public void setIsGiftMarketIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISGIFTMARKET_ISSET_ID, value);
  }

  /**
   * 是否来自限时商城
   */
  public boolean isIsLimitMarket() {
    return this.isLimitMarket;
  }

  /**
   * 是否来自限时商城
   */
  public CSDonateMsg setIsLimitMarket(boolean isLimitMarket) {
    this.isLimitMarket = isLimitMarket;
    setIsLimitMarketIsSet(true);
    return this;
  }

  public void unsetIsLimitMarket() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISLIMITMARKET_ISSET_ID);
  }

  /** Returns true if field isLimitMarket is set (has been assigned a value) and false otherwise */
  public boolean isSetIsLimitMarket() {
    return EncodingUtils.testBit(__isset_bitfield, __ISLIMITMARKET_ISSET_ID);
  }

  public void setIsLimitMarketIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISLIMITMARKET_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RECIVE_CHAR_ID:
      if (value == null) {
        unsetReciveCharId();
      } else {
        setReciveCharId((Long)value);
      }
      break;

    case DONATE_ITEMS:
      if (value == null) {
        unsetDonateItems();
      } else {
        setDonateItems((List<com.ling9527.music.common.msg.auto.BuyItemInfo>)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case IS_GIFT_MARKET:
      if (value == null) {
        unsetIsGiftMarket();
      } else {
        setIsGiftMarket((Boolean)value);
      }
      break;

    case IS_LIMIT_MARKET:
      if (value == null) {
        unsetIsLimitMarket();
      } else {
        setIsLimitMarket((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RECIVE_CHAR_ID:
      return Long.valueOf(getReciveCharId());

    case DONATE_ITEMS:
      return getDonateItems();

    case CONTENT:
      return getContent();

    case IS_GIFT_MARKET:
      return Boolean.valueOf(isIsGiftMarket());

    case IS_LIMIT_MARKET:
      return Boolean.valueOf(isIsLimitMarket());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RECIVE_CHAR_ID:
      return isSetReciveCharId();
    case DONATE_ITEMS:
      return isSetDonateItems();
    case CONTENT:
      return isSetContent();
    case IS_GIFT_MARKET:
      return isSetIsGiftMarket();
    case IS_LIMIT_MARKET:
      return isSetIsLimitMarket();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CSDonateMsg)
      return this.equals((CSDonateMsg)that);
    return false;
  }

  public boolean equals(CSDonateMsg that) {
    if (that == null)
      return false;

    boolean this_present_reciveCharId = true;
    boolean that_present_reciveCharId = true;
    if (this_present_reciveCharId || that_present_reciveCharId) {
      if (!(this_present_reciveCharId && that_present_reciveCharId))
        return false;
      if (this.reciveCharId != that.reciveCharId)
        return false;
    }

    boolean this_present_donateItems = true && this.isSetDonateItems();
    boolean that_present_donateItems = true && that.isSetDonateItems();
    if (this_present_donateItems || that_present_donateItems) {
      if (!(this_present_donateItems && that_present_donateItems))
        return false;
      if (!this.donateItems.equals(that.donateItems))
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_isGiftMarket = true && this.isSetIsGiftMarket();
    boolean that_present_isGiftMarket = true && that.isSetIsGiftMarket();
    if (this_present_isGiftMarket || that_present_isGiftMarket) {
      if (!(this_present_isGiftMarket && that_present_isGiftMarket))
        return false;
      if (this.isGiftMarket != that.isGiftMarket)
        return false;
    }

    boolean this_present_isLimitMarket = true && this.isSetIsLimitMarket();
    boolean that_present_isLimitMarket = true && that.isSetIsLimitMarket();
    if (this_present_isLimitMarket || that_present_isLimitMarket) {
      if (!(this_present_isLimitMarket && that_present_isLimitMarket))
        return false;
      if (this.isLimitMarket != that.isLimitMarket)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(CSDonateMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CSDonateMsg typedOther = (CSDonateMsg)other;

    lastComparison = Boolean.valueOf(isSetReciveCharId()).compareTo(typedOther.isSetReciveCharId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReciveCharId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reciveCharId, typedOther.reciveCharId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDonateItems()).compareTo(typedOther.isSetDonateItems());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDonateItems()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.donateItems, typedOther.donateItems);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(typedOther.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, typedOther.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsGiftMarket()).compareTo(typedOther.isSetIsGiftMarket());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsGiftMarket()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isGiftMarket, typedOther.isGiftMarket);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsLimitMarket()).compareTo(typedOther.isSetIsLimitMarket());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsLimitMarket()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isLimitMarket, typedOther.isLimitMarket);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CSDonateMsg(");
    boolean first = true;

    sb.append("reciveCharId:");
    sb.append(this.reciveCharId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("donateItems:");
    if (this.donateItems == null) {
      sb.append("null");
    } else {
      sb.append(this.donateItems);
    }
    first = false;
    if (isSetContent()) {
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        sb.append(this.content);
      }
      first = false;
    }
    if (isSetIsGiftMarket()) {
      if (!first) sb.append(", ");
      sb.append("isGiftMarket:");
      sb.append(this.isGiftMarket);
      first = false;
    }
    if (isSetIsLimitMarket()) {
      if (!first) sb.append(", ");
      sb.append("isLimitMarket:");
      sb.append(this.isLimitMarket);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CSDonateMsgStandardSchemeFactory implements SchemeFactory {
    public CSDonateMsgStandardScheme getScheme() {
      return new CSDonateMsgStandardScheme();
    }
  }

  private static class CSDonateMsgStandardScheme extends StandardScheme<CSDonateMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CSDonateMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RECIVE_CHAR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.reciveCharId = iprot.readI64();
              struct.setReciveCharIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DONATE_ITEMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.donateItems = new ArrayList<com.ling9527.music.common.msg.auto.BuyItemInfo>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  com.ling9527.music.common.msg.auto.BuyItemInfo _elem2; // required
                  _elem2 = new com.ling9527.music.common.msg.auto.BuyItemInfo();
                  _elem2.read(iprot);
                  struct.donateItems.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setDonateItemsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IS_GIFT_MARKET
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isGiftMarket = iprot.readBool();
              struct.setIsGiftMarketIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_LIMIT_MARKET
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isLimitMarket = iprot.readBool();
              struct.setIsLimitMarketIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CSDonateMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(RECIVE_CHAR_ID_FIELD_DESC);
      oprot.writeI64(struct.reciveCharId);
      oprot.writeFieldEnd();
      if (struct.donateItems != null) {
        oprot.writeFieldBegin(DONATE_ITEMS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.donateItems.size()));
          for (com.ling9527.music.common.msg.auto.BuyItemInfo _iter3 : struct.donateItems)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.content != null) {
        if (struct.isSetContent()) {
          oprot.writeFieldBegin(CONTENT_FIELD_DESC);
          oprot.writeString(struct.content);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsGiftMarket()) {
        oprot.writeFieldBegin(IS_GIFT_MARKET_FIELD_DESC);
        oprot.writeBool(struct.isGiftMarket);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsLimitMarket()) {
        oprot.writeFieldBegin(IS_LIMIT_MARKET_FIELD_DESC);
        oprot.writeBool(struct.isLimitMarket);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CSDonateMsgTupleSchemeFactory implements SchemeFactory {
    public CSDonateMsgTupleScheme getScheme() {
      return new CSDonateMsgTupleScheme();
    }
  }

  private static class CSDonateMsgTupleScheme extends TupleScheme<CSDonateMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CSDonateMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetReciveCharId()) {
        optionals.set(0);
      }
      if (struct.isSetDonateItems()) {
        optionals.set(1);
      }
      if (struct.isSetContent()) {
        optionals.set(2);
      }
      if (struct.isSetIsGiftMarket()) {
        optionals.set(3);
      }
      if (struct.isSetIsLimitMarket()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetReciveCharId()) {
        oprot.writeI64(struct.reciveCharId);
      }
      if (struct.isSetDonateItems()) {
        {
          oprot.writeI32(struct.donateItems.size());
          for (com.ling9527.music.common.msg.auto.BuyItemInfo _iter4 : struct.donateItems)
          {
            _iter4.write(oprot);
          }
        }
      }
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
      if (struct.isSetIsGiftMarket()) {
        oprot.writeBool(struct.isGiftMarket);
      }
      if (struct.isSetIsLimitMarket()) {
        oprot.writeBool(struct.isLimitMarket);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CSDonateMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.reciveCharId = iprot.readI64();
        struct.setReciveCharIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.donateItems = new ArrayList<com.ling9527.music.common.msg.auto.BuyItemInfo>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            com.ling9527.music.common.msg.auto.BuyItemInfo _elem7; // required
            _elem7 = new com.ling9527.music.common.msg.auto.BuyItemInfo();
            _elem7.read(iprot);
            struct.donateItems.add(_elem7);
          }
        }
        struct.setDonateItemsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
      if (incoming.get(3)) {
        struct.isGiftMarket = iprot.readBool();
        struct.setIsGiftMarketIsSet(true);
      }
      if (incoming.get(4)) {
        struct.isLimitMarket = iprot.readBool();
        struct.setIsLimitMarketIsSet(true);
      }
    }
  }

}

