/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ComposeActivityDetail implements org.apache.thrift.TBase<ComposeActivityDetail, ComposeActivityDetail._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ComposeActivityDetail");

  private static final org.apache.thrift.protocol.TField COMPOSE_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("composeDesc", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("index", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField TOTAL_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalCount", org.apache.thrift.protocol.TType.I16, (short)3);
  private static final org.apache.thrift.protocol.TField TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("total", org.apache.thrift.protocol.TType.I16, (short)4);
  private static final org.apache.thrift.protocol.TField DAY_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("dayCount", org.apache.thrift.protocol.TType.I16, (short)5);
  private static final org.apache.thrift.protocol.TField DAY_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("dayTotal", org.apache.thrift.protocol.TType.I16, (short)6);
  private static final org.apache.thrift.protocol.TField PRIZE_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("prizeInfos", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField REQUIRE_ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("requireItems", org.apache.thrift.protocol.TType.LIST, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ComposeActivityDetailStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ComposeActivityDetailTupleSchemeFactory());
  }

  public String composeDesc; // required
  public byte index; // required
  public short totalCount; // required
  public short total; // required
  public short dayCount; // required
  public short dayTotal; // required
  /**
   * 奖励
   */
  public PrizeInfo prizeInfos; // optional
  public List<ComposeRequireItem> requireItems; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COMPOSE_DESC((short)1, "composeDesc"),
    INDEX((short)2, "index"),
    TOTAL_COUNT((short)3, "totalCount"),
    TOTAL((short)4, "total"),
    DAY_COUNT((short)5, "dayCount"),
    DAY_TOTAL((short)6, "dayTotal"),
    /**
     * 奖励
     */
    PRIZE_INFOS((short)7, "prizeInfos"),
    REQUIRE_ITEMS((short)8, "requireItems");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COMPOSE_DESC
          return COMPOSE_DESC;
        case 2: // INDEX
          return INDEX;
        case 3: // TOTAL_COUNT
          return TOTAL_COUNT;
        case 4: // TOTAL
          return TOTAL;
        case 5: // DAY_COUNT
          return DAY_COUNT;
        case 6: // DAY_TOTAL
          return DAY_TOTAL;
        case 7: // PRIZE_INFOS
          return PRIZE_INFOS;
        case 8: // REQUIRE_ITEMS
          return REQUIRE_ITEMS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INDEX_ISSET_ID = 0;
  private static final int __TOTALCOUNT_ISSET_ID = 1;
  private static final int __TOTAL_ISSET_ID = 2;
  private static final int __DAYCOUNT_ISSET_ID = 3;
  private static final int __DAYTOTAL_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.PRIZE_INFOS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COMPOSE_DESC, new org.apache.thrift.meta_data.FieldMetaData("composeDesc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INDEX, new org.apache.thrift.meta_data.FieldMetaData("index", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.TOTAL_COUNT, new org.apache.thrift.meta_data.FieldMetaData("totalCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.TOTAL, new org.apache.thrift.meta_data.FieldMetaData("total", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.DAY_COUNT, new org.apache.thrift.meta_data.FieldMetaData("dayCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.DAY_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("dayTotal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.PRIZE_INFOS, new org.apache.thrift.meta_data.FieldMetaData("prizeInfos", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrizeInfo.class)));
    tmpMap.put(_Fields.REQUIRE_ITEMS, new org.apache.thrift.meta_data.FieldMetaData("requireItems", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ComposeRequireItem.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ComposeActivityDetail.class, metaDataMap);
  }

  public ComposeActivityDetail() {
  }

  public ComposeActivityDetail(
    String composeDesc,
    byte index,
    short totalCount,
    short total,
    short dayCount,
    short dayTotal,
    List<ComposeRequireItem> requireItems)
  {
    this();
    this.composeDesc = composeDesc;
    this.index = index;
    setIndexIsSet(true);
    this.totalCount = totalCount;
    setTotalCountIsSet(true);
    this.total = total;
    setTotalIsSet(true);
    this.dayCount = dayCount;
    setDayCountIsSet(true);
    this.dayTotal = dayTotal;
    setDayTotalIsSet(true);
    this.requireItems = requireItems;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ComposeActivityDetail(ComposeActivityDetail other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetComposeDesc()) {
      this.composeDesc = other.composeDesc;
    }
    this.index = other.index;
    this.totalCount = other.totalCount;
    this.total = other.total;
    this.dayCount = other.dayCount;
    this.dayTotal = other.dayTotal;
    if (other.isSetPrizeInfos()) {
      this.prizeInfos = new PrizeInfo(other.prizeInfos);
    }
    if (other.isSetRequireItems()) {
      List<ComposeRequireItem> __this__requireItems = new ArrayList<ComposeRequireItem>();
      for (ComposeRequireItem other_element : other.requireItems) {
        __this__requireItems.add(new ComposeRequireItem(other_element));
      }
      this.requireItems = __this__requireItems;
    }
  }

  public ComposeActivityDetail deepCopy() {
    return new ComposeActivityDetail(this);
  }

  @Override
  public void clear() {
    this.composeDesc = null;
    setIndexIsSet(false);
    this.index = 0;
    setTotalCountIsSet(false);
    this.totalCount = 0;
    setTotalIsSet(false);
    this.total = 0;
    setDayCountIsSet(false);
    this.dayCount = 0;
    setDayTotalIsSet(false);
    this.dayTotal = 0;
    this.prizeInfos = null;
    this.requireItems = null;
  }

  public String getComposeDesc() {
    return this.composeDesc;
  }

  public ComposeActivityDetail setComposeDesc(String composeDesc) {
    this.composeDesc = composeDesc;
    return this;
  }

  public void unsetComposeDesc() {
    this.composeDesc = null;
  }

  /** Returns true if field composeDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetComposeDesc() {
    return this.composeDesc != null;
  }

  public void setComposeDescIsSet(boolean value) {
    if (!value) {
      this.composeDesc = null;
    }
  }

  public byte getIndex() {
    return this.index;
  }

  public ComposeActivityDetail setIndex(byte index) {
    this.index = index;
    setIndexIsSet(true);
    return this;
  }

  public void unsetIndex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INDEX_ISSET_ID);
  }

  /** Returns true if field index is set (has been assigned a value) and false otherwise */
  public boolean isSetIndex() {
    return EncodingUtils.testBit(__isset_bitfield, __INDEX_ISSET_ID);
  }

  public void setIndexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INDEX_ISSET_ID, value);
  }

  public short getTotalCount() {
    return this.totalCount;
  }

  public ComposeActivityDetail setTotalCount(short totalCount) {
    this.totalCount = totalCount;
    setTotalCountIsSet(true);
    return this;
  }

  public void unsetTotalCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALCOUNT_ISSET_ID);
  }

  /** Returns true if field totalCount is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalCount() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALCOUNT_ISSET_ID);
  }

  public void setTotalCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALCOUNT_ISSET_ID, value);
  }

  public short getTotal() {
    return this.total;
  }

  public ComposeActivityDetail setTotal(short total) {
    this.total = total;
    setTotalIsSet(true);
    return this;
  }

  public void unsetTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTAL_ISSET_ID);
  }

  /** Returns true if field total is set (has been assigned a value) and false otherwise */
  public boolean isSetTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTAL_ISSET_ID);
  }

  public void setTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTAL_ISSET_ID, value);
  }

  public short getDayCount() {
    return this.dayCount;
  }

  public ComposeActivityDetail setDayCount(short dayCount) {
    this.dayCount = dayCount;
    setDayCountIsSet(true);
    return this;
  }

  public void unsetDayCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DAYCOUNT_ISSET_ID);
  }

  /** Returns true if field dayCount is set (has been assigned a value) and false otherwise */
  public boolean isSetDayCount() {
    return EncodingUtils.testBit(__isset_bitfield, __DAYCOUNT_ISSET_ID);
  }

  public void setDayCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DAYCOUNT_ISSET_ID, value);
  }

  public short getDayTotal() {
    return this.dayTotal;
  }

  public ComposeActivityDetail setDayTotal(short dayTotal) {
    this.dayTotal = dayTotal;
    setDayTotalIsSet(true);
    return this;
  }

  public void unsetDayTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DAYTOTAL_ISSET_ID);
  }

  /** Returns true if field dayTotal is set (has been assigned a value) and false otherwise */
  public boolean isSetDayTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __DAYTOTAL_ISSET_ID);
  }

  public void setDayTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DAYTOTAL_ISSET_ID, value);
  }

  /**
   * 奖励
   */
  public PrizeInfo getPrizeInfos() {
    return this.prizeInfos;
  }

  /**
   * 奖励
   */
  public ComposeActivityDetail setPrizeInfos(PrizeInfo prizeInfos) {
    this.prizeInfos = prizeInfos;
    return this;
  }

  public void unsetPrizeInfos() {
    this.prizeInfos = null;
  }

  /** Returns true if field prizeInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetPrizeInfos() {
    return this.prizeInfos != null;
  }

  public void setPrizeInfosIsSet(boolean value) {
    if (!value) {
      this.prizeInfos = null;
    }
  }

  public int getRequireItemsSize() {
    return (this.requireItems == null) ? 0 : this.requireItems.size();
  }

  public java.util.Iterator<ComposeRequireItem> getRequireItemsIterator() {
    return (this.requireItems == null) ? null : this.requireItems.iterator();
  }

  public void addToRequireItems(ComposeRequireItem elem) {
    if (this.requireItems == null) {
      this.requireItems = new ArrayList<ComposeRequireItem>();
    }
    this.requireItems.add(elem);
  }

  public List<ComposeRequireItem> getRequireItems() {
    return this.requireItems;
  }

  public ComposeActivityDetail setRequireItems(List<ComposeRequireItem> requireItems) {
    this.requireItems = requireItems;
    return this;
  }

  public void unsetRequireItems() {
    this.requireItems = null;
  }

  /** Returns true if field requireItems is set (has been assigned a value) and false otherwise */
  public boolean isSetRequireItems() {
    return this.requireItems != null;
  }

  public void setRequireItemsIsSet(boolean value) {
    if (!value) {
      this.requireItems = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COMPOSE_DESC:
      if (value == null) {
        unsetComposeDesc();
      } else {
        setComposeDesc((String)value);
      }
      break;

    case INDEX:
      if (value == null) {
        unsetIndex();
      } else {
        setIndex((Byte)value);
      }
      break;

    case TOTAL_COUNT:
      if (value == null) {
        unsetTotalCount();
      } else {
        setTotalCount((Short)value);
      }
      break;

    case TOTAL:
      if (value == null) {
        unsetTotal();
      } else {
        setTotal((Short)value);
      }
      break;

    case DAY_COUNT:
      if (value == null) {
        unsetDayCount();
      } else {
        setDayCount((Short)value);
      }
      break;

    case DAY_TOTAL:
      if (value == null) {
        unsetDayTotal();
      } else {
        setDayTotal((Short)value);
      }
      break;

    case PRIZE_INFOS:
      if (value == null) {
        unsetPrizeInfos();
      } else {
        setPrizeInfos((PrizeInfo)value);
      }
      break;

    case REQUIRE_ITEMS:
      if (value == null) {
        unsetRequireItems();
      } else {
        setRequireItems((List<ComposeRequireItem>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COMPOSE_DESC:
      return getComposeDesc();

    case INDEX:
      return Byte.valueOf(getIndex());

    case TOTAL_COUNT:
      return Short.valueOf(getTotalCount());

    case TOTAL:
      return Short.valueOf(getTotal());

    case DAY_COUNT:
      return Short.valueOf(getDayCount());

    case DAY_TOTAL:
      return Short.valueOf(getDayTotal());

    case PRIZE_INFOS:
      return getPrizeInfos();

    case REQUIRE_ITEMS:
      return getRequireItems();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COMPOSE_DESC:
      return isSetComposeDesc();
    case INDEX:
      return isSetIndex();
    case TOTAL_COUNT:
      return isSetTotalCount();
    case TOTAL:
      return isSetTotal();
    case DAY_COUNT:
      return isSetDayCount();
    case DAY_TOTAL:
      return isSetDayTotal();
    case PRIZE_INFOS:
      return isSetPrizeInfos();
    case REQUIRE_ITEMS:
      return isSetRequireItems();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ComposeActivityDetail)
      return this.equals((ComposeActivityDetail)that);
    return false;
  }

  public boolean equals(ComposeActivityDetail that) {
    if (that == null)
      return false;

    boolean this_present_composeDesc = true && this.isSetComposeDesc();
    boolean that_present_composeDesc = true && that.isSetComposeDesc();
    if (this_present_composeDesc || that_present_composeDesc) {
      if (!(this_present_composeDesc && that_present_composeDesc))
        return false;
      if (!this.composeDesc.equals(that.composeDesc))
        return false;
    }

    boolean this_present_index = true;
    boolean that_present_index = true;
    if (this_present_index || that_present_index) {
      if (!(this_present_index && that_present_index))
        return false;
      if (this.index != that.index)
        return false;
    }

    boolean this_present_totalCount = true;
    boolean that_present_totalCount = true;
    if (this_present_totalCount || that_present_totalCount) {
      if (!(this_present_totalCount && that_present_totalCount))
        return false;
      if (this.totalCount != that.totalCount)
        return false;
    }

    boolean this_present_total = true;
    boolean that_present_total = true;
    if (this_present_total || that_present_total) {
      if (!(this_present_total && that_present_total))
        return false;
      if (this.total != that.total)
        return false;
    }

    boolean this_present_dayCount = true;
    boolean that_present_dayCount = true;
    if (this_present_dayCount || that_present_dayCount) {
      if (!(this_present_dayCount && that_present_dayCount))
        return false;
      if (this.dayCount != that.dayCount)
        return false;
    }

    boolean this_present_dayTotal = true;
    boolean that_present_dayTotal = true;
    if (this_present_dayTotal || that_present_dayTotal) {
      if (!(this_present_dayTotal && that_present_dayTotal))
        return false;
      if (this.dayTotal != that.dayTotal)
        return false;
    }

    boolean this_present_prizeInfos = true && this.isSetPrizeInfos();
    boolean that_present_prizeInfos = true && that.isSetPrizeInfos();
    if (this_present_prizeInfos || that_present_prizeInfos) {
      if (!(this_present_prizeInfos && that_present_prizeInfos))
        return false;
      if (!this.prizeInfos.equals(that.prizeInfos))
        return false;
    }

    boolean this_present_requireItems = true && this.isSetRequireItems();
    boolean that_present_requireItems = true && that.isSetRequireItems();
    if (this_present_requireItems || that_present_requireItems) {
      if (!(this_present_requireItems && that_present_requireItems))
        return false;
      if (!this.requireItems.equals(that.requireItems))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ComposeActivityDetail other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ComposeActivityDetail typedOther = (ComposeActivityDetail)other;

    lastComparison = Boolean.valueOf(isSetComposeDesc()).compareTo(typedOther.isSetComposeDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComposeDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.composeDesc, typedOther.composeDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIndex()).compareTo(typedOther.isSetIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.index, typedOther.index);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalCount()).compareTo(typedOther.isSetTotalCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalCount, typedOther.totalCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotal()).compareTo(typedOther.isSetTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.total, typedOther.total);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDayCount()).compareTo(typedOther.isSetDayCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDayCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dayCount, typedOther.dayCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDayTotal()).compareTo(typedOther.isSetDayTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDayTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dayTotal, typedOther.dayTotal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrizeInfos()).compareTo(typedOther.isSetPrizeInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrizeInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prizeInfos, typedOther.prizeInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequireItems()).compareTo(typedOther.isSetRequireItems());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequireItems()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requireItems, typedOther.requireItems);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ComposeActivityDetail(");
    boolean first = true;

    sb.append("composeDesc:");
    if (this.composeDesc == null) {
      sb.append("null");
    } else {
      sb.append(this.composeDesc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("index:");
    sb.append(this.index);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalCount:");
    sb.append(this.totalCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("total:");
    sb.append(this.total);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dayCount:");
    sb.append(this.dayCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dayTotal:");
    sb.append(this.dayTotal);
    first = false;
    if (isSetPrizeInfos()) {
      if (!first) sb.append(", ");
      sb.append("prizeInfos:");
      if (this.prizeInfos == null) {
        sb.append("null");
      } else {
        sb.append(this.prizeInfos);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("requireItems:");
    if (this.requireItems == null) {
      sb.append("null");
    } else {
      sb.append(this.requireItems);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (prizeInfos != null) {
      prizeInfos.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ComposeActivityDetailStandardSchemeFactory implements SchemeFactory {
    public ComposeActivityDetailStandardScheme getScheme() {
      return new ComposeActivityDetailStandardScheme();
    }
  }

  private static class ComposeActivityDetailStandardScheme extends StandardScheme<ComposeActivityDetail> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ComposeActivityDetail struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COMPOSE_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.composeDesc = iprot.readString();
              struct.setComposeDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.index = iprot.readByte();
              struct.setIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOTAL_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.totalCount = iprot.readI16();
              struct.setTotalCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.total = iprot.readI16();
              struct.setTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DAY_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.dayCount = iprot.readI16();
              struct.setDayCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DAY_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.dayTotal = iprot.readI16();
              struct.setDayTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PRIZE_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.prizeInfos = new PrizeInfo();
              struct.prizeInfos.read(iprot);
              struct.setPrizeInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // REQUIRE_ITEMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list522 = iprot.readListBegin();
                struct.requireItems = new ArrayList<ComposeRequireItem>(_list522.size);
                for (int _i523 = 0; _i523 < _list522.size; ++_i523)
                {
                  ComposeRequireItem _elem524; // required
                  _elem524 = new ComposeRequireItem();
                  _elem524.read(iprot);
                  struct.requireItems.add(_elem524);
                }
                iprot.readListEnd();
              }
              struct.setRequireItemsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ComposeActivityDetail struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.composeDesc != null) {
        oprot.writeFieldBegin(COMPOSE_DESC_FIELD_DESC);
        oprot.writeString(struct.composeDesc);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INDEX_FIELD_DESC);
      oprot.writeByte(struct.index);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_COUNT_FIELD_DESC);
      oprot.writeI16(struct.totalCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_FIELD_DESC);
      oprot.writeI16(struct.total);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DAY_COUNT_FIELD_DESC);
      oprot.writeI16(struct.dayCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DAY_TOTAL_FIELD_DESC);
      oprot.writeI16(struct.dayTotal);
      oprot.writeFieldEnd();
      if (struct.prizeInfos != null) {
        if (struct.isSetPrizeInfos()) {
          oprot.writeFieldBegin(PRIZE_INFOS_FIELD_DESC);
          struct.prizeInfos.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.requireItems != null) {
        oprot.writeFieldBegin(REQUIRE_ITEMS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.requireItems.size()));
          for (ComposeRequireItem _iter525 : struct.requireItems)
          {
            _iter525.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ComposeActivityDetailTupleSchemeFactory implements SchemeFactory {
    public ComposeActivityDetailTupleScheme getScheme() {
      return new ComposeActivityDetailTupleScheme();
    }
  }

  private static class ComposeActivityDetailTupleScheme extends TupleScheme<ComposeActivityDetail> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ComposeActivityDetail struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetComposeDesc()) {
        optionals.set(0);
      }
      if (struct.isSetIndex()) {
        optionals.set(1);
      }
      if (struct.isSetTotalCount()) {
        optionals.set(2);
      }
      if (struct.isSetTotal()) {
        optionals.set(3);
      }
      if (struct.isSetDayCount()) {
        optionals.set(4);
      }
      if (struct.isSetDayTotal()) {
        optionals.set(5);
      }
      if (struct.isSetPrizeInfos()) {
        optionals.set(6);
      }
      if (struct.isSetRequireItems()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetComposeDesc()) {
        oprot.writeString(struct.composeDesc);
      }
      if (struct.isSetIndex()) {
        oprot.writeByte(struct.index);
      }
      if (struct.isSetTotalCount()) {
        oprot.writeI16(struct.totalCount);
      }
      if (struct.isSetTotal()) {
        oprot.writeI16(struct.total);
      }
      if (struct.isSetDayCount()) {
        oprot.writeI16(struct.dayCount);
      }
      if (struct.isSetDayTotal()) {
        oprot.writeI16(struct.dayTotal);
      }
      if (struct.isSetPrizeInfos()) {
        struct.prizeInfos.write(oprot);
      }
      if (struct.isSetRequireItems()) {
        {
          oprot.writeI32(struct.requireItems.size());
          for (ComposeRequireItem _iter526 : struct.requireItems)
          {
            _iter526.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ComposeActivityDetail struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.composeDesc = iprot.readString();
        struct.setComposeDescIsSet(true);
      }
      if (incoming.get(1)) {
        struct.index = iprot.readByte();
        struct.setIndexIsSet(true);
      }
      if (incoming.get(2)) {
        struct.totalCount = iprot.readI16();
        struct.setTotalCountIsSet(true);
      }
      if (incoming.get(3)) {
        struct.total = iprot.readI16();
        struct.setTotalIsSet(true);
      }
      if (incoming.get(4)) {
        struct.dayCount = iprot.readI16();
        struct.setDayCountIsSet(true);
      }
      if (incoming.get(5)) {
        struct.dayTotal = iprot.readI16();
        struct.setDayTotalIsSet(true);
      }
      if (incoming.get(6)) {
        struct.prizeInfos = new PrizeInfo();
        struct.prizeInfos.read(iprot);
        struct.setPrizeInfosIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list527 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.requireItems = new ArrayList<ComposeRequireItem>(_list527.size);
          for (int _i528 = 0; _i528 < _list527.size; ++_i528)
          {
            ComposeRequireItem _elem529; // required
            _elem529 = new ComposeRequireItem();
            _elem529.read(iprot);
            struct.requireItems.add(_elem529);
          }
        }
        struct.setRequireItemsIsSet(true);
      }
    }
  }

}

