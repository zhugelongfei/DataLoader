/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SCSyncMarkInfoMsg implements org.apache.thrift.TBase<SCSyncMarkInfoMsg, SCSyncMarkInfoMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCSyncMarkInfoMsg");

  private static final org.apache.thrift.protocol.TField MARKS_FIELD_DESC = new org.apache.thrift.protocol.TField("marks", org.apache.thrift.protocol.TType.LIST, (short)1);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCSyncMarkInfoMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCSyncMarkInfoMsgTupleSchemeFactory());
  }

  public List<com.ling9527.music.common.msg.auto.DanceSyncMarkInfo> marks; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MARKS((short)1, "marks");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MARKS
          return MARKS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MARKS, new org.apache.thrift.meta_data.FieldMetaData("marks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.DanceSyncMarkInfo.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCSyncMarkInfoMsg.class, metaDataMap);
  }

  public SCSyncMarkInfoMsg() {
  }

  public SCSyncMarkInfoMsg(
    List<com.ling9527.music.common.msg.auto.DanceSyncMarkInfo> marks)
  {
    this();
    this.marks = marks;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCSyncMarkInfoMsg(SCSyncMarkInfoMsg other) {
    if (other.isSetMarks()) {
      List<com.ling9527.music.common.msg.auto.DanceSyncMarkInfo> __this__marks = new ArrayList<com.ling9527.music.common.msg.auto.DanceSyncMarkInfo>();
      for (com.ling9527.music.common.msg.auto.DanceSyncMarkInfo other_element : other.marks) {
        __this__marks.add(new com.ling9527.music.common.msg.auto.DanceSyncMarkInfo(other_element));
      }
      this.marks = __this__marks;
    }
  }

  public SCSyncMarkInfoMsg deepCopy() {
    return new SCSyncMarkInfoMsg(this);
  }

  @Override
  public void clear() {
    this.marks = null;
  }

  public int getMarksSize() {
    return (this.marks == null) ? 0 : this.marks.size();
  }

  public java.util.Iterator<com.ling9527.music.common.msg.auto.DanceSyncMarkInfo> getMarksIterator() {
    return (this.marks == null) ? null : this.marks.iterator();
  }

  public void addToMarks(com.ling9527.music.common.msg.auto.DanceSyncMarkInfo elem) {
    if (this.marks == null) {
      this.marks = new ArrayList<com.ling9527.music.common.msg.auto.DanceSyncMarkInfo>();
    }
    this.marks.add(elem);
  }

  public List<com.ling9527.music.common.msg.auto.DanceSyncMarkInfo> getMarks() {
    return this.marks;
  }

  public SCSyncMarkInfoMsg setMarks(List<com.ling9527.music.common.msg.auto.DanceSyncMarkInfo> marks) {
    this.marks = marks;
    return this;
  }

  public void unsetMarks() {
    this.marks = null;
  }

  /** Returns true if field marks is set (has been assigned a value) and false otherwise */
  public boolean isSetMarks() {
    return this.marks != null;
  }

  public void setMarksIsSet(boolean value) {
    if (!value) {
      this.marks = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MARKS:
      if (value == null) {
        unsetMarks();
      } else {
        setMarks((List<com.ling9527.music.common.msg.auto.DanceSyncMarkInfo>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MARKS:
      return getMarks();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MARKS:
      return isSetMarks();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCSyncMarkInfoMsg)
      return this.equals((SCSyncMarkInfoMsg)that);
    return false;
  }

  public boolean equals(SCSyncMarkInfoMsg that) {
    if (that == null)
      return false;

    boolean this_present_marks = true && this.isSetMarks();
    boolean that_present_marks = true && that.isSetMarks();
    if (this_present_marks || that_present_marks) {
      if (!(this_present_marks && that_present_marks))
        return false;
      if (!this.marks.equals(that.marks))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCSyncMarkInfoMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCSyncMarkInfoMsg typedOther = (SCSyncMarkInfoMsg)other;

    lastComparison = Boolean.valueOf(isSetMarks()).compareTo(typedOther.isSetMarks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMarks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.marks, typedOther.marks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCSyncMarkInfoMsg(");
    boolean first = true;

    sb.append("marks:");
    if (this.marks == null) {
      sb.append("null");
    } else {
      sb.append(this.marks);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCSyncMarkInfoMsgStandardSchemeFactory implements SchemeFactory {
    public SCSyncMarkInfoMsgStandardScheme getScheme() {
      return new SCSyncMarkInfoMsgStandardScheme();
    }
  }

  private static class SCSyncMarkInfoMsgStandardScheme extends StandardScheme<SCSyncMarkInfoMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCSyncMarkInfoMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MARKS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.marks = new ArrayList<com.ling9527.music.common.msg.auto.DanceSyncMarkInfo>(_list24.size);
                for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                {
                  com.ling9527.music.common.msg.auto.DanceSyncMarkInfo _elem26; // required
                  _elem26 = new com.ling9527.music.common.msg.auto.DanceSyncMarkInfo();
                  _elem26.read(iprot);
                  struct.marks.add(_elem26);
                }
                iprot.readListEnd();
              }
              struct.setMarksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCSyncMarkInfoMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.marks != null) {
        oprot.writeFieldBegin(MARKS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.marks.size()));
          for (com.ling9527.music.common.msg.auto.DanceSyncMarkInfo _iter27 : struct.marks)
          {
            _iter27.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCSyncMarkInfoMsgTupleSchemeFactory implements SchemeFactory {
    public SCSyncMarkInfoMsgTupleScheme getScheme() {
      return new SCSyncMarkInfoMsgTupleScheme();
    }
  }

  private static class SCSyncMarkInfoMsgTupleScheme extends TupleScheme<SCSyncMarkInfoMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCSyncMarkInfoMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMarks()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetMarks()) {
        {
          oprot.writeI32(struct.marks.size());
          for (com.ling9527.music.common.msg.auto.DanceSyncMarkInfo _iter28 : struct.marks)
          {
            _iter28.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCSyncMarkInfoMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.marks = new ArrayList<com.ling9527.music.common.msg.auto.DanceSyncMarkInfo>(_list29.size);
          for (int _i30 = 0; _i30 < _list29.size; ++_i30)
          {
            com.ling9527.music.common.msg.auto.DanceSyncMarkInfo _elem31; // required
            _elem31 = new com.ling9527.music.common.msg.auto.DanceSyncMarkInfo();
            _elem31.read(iprot);
            struct.marks.add(_elem31);
          }
        }
        struct.setMarksIsSet(true);
      }
    }
  }

}

