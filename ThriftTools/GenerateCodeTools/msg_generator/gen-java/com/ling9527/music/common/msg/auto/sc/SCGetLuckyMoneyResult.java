/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 抢红包结果
 */
public class SCGetLuckyMoneyResult implements org.apache.thrift.TBase<SCGetLuckyMoneyResult, SCGetLuckyMoneyResult._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCGetLuckyMoneyResult");

  private static final org.apache.thrift.protocol.TField RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("result", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField DETIAL_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("detialInfo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField RECEIVE_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("receiveAmount", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCGetLuckyMoneyResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCGetLuckyMoneyResultTupleSchemeFactory());
  }

  /**
   * 抢红包结果
   */
  public boolean result; // required
  /**
   * 抢红包详细信息
   */
  public SCLuckyMoneyDetialInfo detialInfo; // optional
  /**
   * 抢到金额
   */
  public int receiveAmount; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 抢红包结果
     */
    RESULT((short)1, "result"),
    /**
     * 抢红包详细信息
     */
    DETIAL_INFO((short)2, "detialInfo"),
    /**
     * 抢到金额
     */
    RECEIVE_AMOUNT((short)3, "receiveAmount");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RESULT
          return RESULT;
        case 2: // DETIAL_INFO
          return DETIAL_INFO;
        case 3: // RECEIVE_AMOUNT
          return RECEIVE_AMOUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RESULT_ISSET_ID = 0;
  private static final int __RECEIVEAMOUNT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.DETIAL_INFO,_Fields.RECEIVE_AMOUNT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RESULT, new org.apache.thrift.meta_data.FieldMetaData("result", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DETIAL_INFO, new org.apache.thrift.meta_data.FieldMetaData("detialInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SCLuckyMoneyDetialInfo.class)));
    tmpMap.put(_Fields.RECEIVE_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("receiveAmount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCGetLuckyMoneyResult.class, metaDataMap);
  }

  public SCGetLuckyMoneyResult() {
  }

  public SCGetLuckyMoneyResult(
    boolean result)
  {
    this();
    this.result = result;
    setResultIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCGetLuckyMoneyResult(SCGetLuckyMoneyResult other) {
    __isset_bitfield = other.__isset_bitfield;
    this.result = other.result;
    if (other.isSetDetialInfo()) {
      this.detialInfo = new SCLuckyMoneyDetialInfo(other.detialInfo);
    }
    this.receiveAmount = other.receiveAmount;
  }

  public SCGetLuckyMoneyResult deepCopy() {
    return new SCGetLuckyMoneyResult(this);
  }

  @Override
  public void clear() {
    setResultIsSet(false);
    this.result = false;
    this.detialInfo = null;
    setReceiveAmountIsSet(false);
    this.receiveAmount = 0;
  }

  /**
   * 抢红包结果
   */
  public boolean isResult() {
    return this.result;
  }

  /**
   * 抢红包结果
   */
  public SCGetLuckyMoneyResult setResult(boolean result) {
    this.result = result;
    setResultIsSet(true);
    return this;
  }

  public void unsetResult() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RESULT_ISSET_ID);
  }

  /** Returns true if field result is set (has been assigned a value) and false otherwise */
  public boolean isSetResult() {
    return EncodingUtils.testBit(__isset_bitfield, __RESULT_ISSET_ID);
  }

  public void setResultIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RESULT_ISSET_ID, value);
  }

  /**
   * 抢红包详细信息
   */
  public SCLuckyMoneyDetialInfo getDetialInfo() {
    return this.detialInfo;
  }

  /**
   * 抢红包详细信息
   */
  public SCGetLuckyMoneyResult setDetialInfo(SCLuckyMoneyDetialInfo detialInfo) {
    this.detialInfo = detialInfo;
    return this;
  }

  public void unsetDetialInfo() {
    this.detialInfo = null;
  }

  /** Returns true if field detialInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetDetialInfo() {
    return this.detialInfo != null;
  }

  public void setDetialInfoIsSet(boolean value) {
    if (!value) {
      this.detialInfo = null;
    }
  }

  /**
   * 抢到金额
   */
  public int getReceiveAmount() {
    return this.receiveAmount;
  }

  /**
   * 抢到金额
   */
  public SCGetLuckyMoneyResult setReceiveAmount(int receiveAmount) {
    this.receiveAmount = receiveAmount;
    setReceiveAmountIsSet(true);
    return this;
  }

  public void unsetReceiveAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECEIVEAMOUNT_ISSET_ID);
  }

  /** Returns true if field receiveAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetReceiveAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __RECEIVEAMOUNT_ISSET_ID);
  }

  public void setReceiveAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECEIVEAMOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RESULT:
      if (value == null) {
        unsetResult();
      } else {
        setResult((Boolean)value);
      }
      break;

    case DETIAL_INFO:
      if (value == null) {
        unsetDetialInfo();
      } else {
        setDetialInfo((SCLuckyMoneyDetialInfo)value);
      }
      break;

    case RECEIVE_AMOUNT:
      if (value == null) {
        unsetReceiveAmount();
      } else {
        setReceiveAmount((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RESULT:
      return Boolean.valueOf(isResult());

    case DETIAL_INFO:
      return getDetialInfo();

    case RECEIVE_AMOUNT:
      return Integer.valueOf(getReceiveAmount());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RESULT:
      return isSetResult();
    case DETIAL_INFO:
      return isSetDetialInfo();
    case RECEIVE_AMOUNT:
      return isSetReceiveAmount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCGetLuckyMoneyResult)
      return this.equals((SCGetLuckyMoneyResult)that);
    return false;
  }

  public boolean equals(SCGetLuckyMoneyResult that) {
    if (that == null)
      return false;

    boolean this_present_result = true;
    boolean that_present_result = true;
    if (this_present_result || that_present_result) {
      if (!(this_present_result && that_present_result))
        return false;
      if (this.result != that.result)
        return false;
    }

    boolean this_present_detialInfo = true && this.isSetDetialInfo();
    boolean that_present_detialInfo = true && that.isSetDetialInfo();
    if (this_present_detialInfo || that_present_detialInfo) {
      if (!(this_present_detialInfo && that_present_detialInfo))
        return false;
      if (!this.detialInfo.equals(that.detialInfo))
        return false;
    }

    boolean this_present_receiveAmount = true && this.isSetReceiveAmount();
    boolean that_present_receiveAmount = true && that.isSetReceiveAmount();
    if (this_present_receiveAmount || that_present_receiveAmount) {
      if (!(this_present_receiveAmount && that_present_receiveAmount))
        return false;
      if (this.receiveAmount != that.receiveAmount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCGetLuckyMoneyResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCGetLuckyMoneyResult typedOther = (SCGetLuckyMoneyResult)other;

    lastComparison = Boolean.valueOf(isSetResult()).compareTo(typedOther.isSetResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.result, typedOther.result);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDetialInfo()).compareTo(typedOther.isSetDetialInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDetialInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.detialInfo, typedOther.detialInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReceiveAmount()).compareTo(typedOther.isSetReceiveAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceiveAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receiveAmount, typedOther.receiveAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCGetLuckyMoneyResult(");
    boolean first = true;

    sb.append("result:");
    sb.append(this.result);
    first = false;
    if (isSetDetialInfo()) {
      if (!first) sb.append(", ");
      sb.append("detialInfo:");
      if (this.detialInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.detialInfo);
      }
      first = false;
    }
    if (isSetReceiveAmount()) {
      if (!first) sb.append(", ");
      sb.append("receiveAmount:");
      sb.append(this.receiveAmount);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (detialInfo != null) {
      detialInfo.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCGetLuckyMoneyResultStandardSchemeFactory implements SchemeFactory {
    public SCGetLuckyMoneyResultStandardScheme getScheme() {
      return new SCGetLuckyMoneyResultStandardScheme();
    }
  }

  private static class SCGetLuckyMoneyResultStandardScheme extends StandardScheme<SCGetLuckyMoneyResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCGetLuckyMoneyResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.result = iprot.readBool();
              struct.setResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DETIAL_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.detialInfo = new SCLuckyMoneyDetialInfo();
              struct.detialInfo.read(iprot);
              struct.setDetialInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RECEIVE_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.receiveAmount = iprot.readI32();
              struct.setReceiveAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCGetLuckyMoneyResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(RESULT_FIELD_DESC);
      oprot.writeBool(struct.result);
      oprot.writeFieldEnd();
      if (struct.detialInfo != null) {
        if (struct.isSetDetialInfo()) {
          oprot.writeFieldBegin(DETIAL_INFO_FIELD_DESC);
          struct.detialInfo.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetReceiveAmount()) {
        oprot.writeFieldBegin(RECEIVE_AMOUNT_FIELD_DESC);
        oprot.writeI32(struct.receiveAmount);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCGetLuckyMoneyResultTupleSchemeFactory implements SchemeFactory {
    public SCGetLuckyMoneyResultTupleScheme getScheme() {
      return new SCGetLuckyMoneyResultTupleScheme();
    }
  }

  private static class SCGetLuckyMoneyResultTupleScheme extends TupleScheme<SCGetLuckyMoneyResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCGetLuckyMoneyResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetResult()) {
        optionals.set(0);
      }
      if (struct.isSetDetialInfo()) {
        optionals.set(1);
      }
      if (struct.isSetReceiveAmount()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetResult()) {
        oprot.writeBool(struct.result);
      }
      if (struct.isSetDetialInfo()) {
        struct.detialInfo.write(oprot);
      }
      if (struct.isSetReceiveAmount()) {
        oprot.writeI32(struct.receiveAmount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCGetLuckyMoneyResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.result = iprot.readBool();
        struct.setResultIsSet(true);
      }
      if (incoming.get(1)) {
        struct.detialInfo = new SCLuckyMoneyDetialInfo();
        struct.detialInfo.read(iprot);
        struct.setDetialInfoIsSet(true);
      }
      if (incoming.get(2)) {
        struct.receiveAmount = iprot.readI32();
        struct.setReceiveAmountIsSet(true);
      }
    }
  }

}

