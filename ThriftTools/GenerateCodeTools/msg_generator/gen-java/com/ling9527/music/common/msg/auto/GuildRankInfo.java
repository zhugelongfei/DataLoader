/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class GuildRankInfo implements org.apache.thrift.TBase<GuildRankInfo, GuildRankInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GuildRankInfo");

  private static final org.apache.thrift.protocol.TField GUILD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("guildName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField GUILD_MEMBER_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("guildMemberCount", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField GUILD_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("guildLevel", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField HEAD_ICON_FIELD_DESC = new org.apache.thrift.protocol.TField("headIcon", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GuildRankInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GuildRankInfoTupleSchemeFactory());
  }

  public String guildName; // required
  public int guildMemberCount; // required
  public int guildLevel; // required
  public String headIcon; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GUILD_NAME((short)1, "guildName"),
    GUILD_MEMBER_COUNT((short)2, "guildMemberCount"),
    GUILD_LEVEL((short)3, "guildLevel"),
    HEAD_ICON((short)4, "headIcon");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GUILD_NAME
          return GUILD_NAME;
        case 2: // GUILD_MEMBER_COUNT
          return GUILD_MEMBER_COUNT;
        case 3: // GUILD_LEVEL
          return GUILD_LEVEL;
        case 4: // HEAD_ICON
          return HEAD_ICON;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __GUILDMEMBERCOUNT_ISSET_ID = 0;
  private static final int __GUILDLEVEL_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GUILD_NAME, new org.apache.thrift.meta_data.FieldMetaData("guildName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GUILD_MEMBER_COUNT, new org.apache.thrift.meta_data.FieldMetaData("guildMemberCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GUILD_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("guildLevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HEAD_ICON, new org.apache.thrift.meta_data.FieldMetaData("headIcon", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GuildRankInfo.class, metaDataMap);
  }

  public GuildRankInfo() {
  }

  public GuildRankInfo(
    String guildName,
    int guildMemberCount,
    int guildLevel,
    String headIcon)
  {
    this();
    this.guildName = guildName;
    this.guildMemberCount = guildMemberCount;
    setGuildMemberCountIsSet(true);
    this.guildLevel = guildLevel;
    setGuildLevelIsSet(true);
    this.headIcon = headIcon;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GuildRankInfo(GuildRankInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetGuildName()) {
      this.guildName = other.guildName;
    }
    this.guildMemberCount = other.guildMemberCount;
    this.guildLevel = other.guildLevel;
    if (other.isSetHeadIcon()) {
      this.headIcon = other.headIcon;
    }
  }

  public GuildRankInfo deepCopy() {
    return new GuildRankInfo(this);
  }

  @Override
  public void clear() {
    this.guildName = null;
    setGuildMemberCountIsSet(false);
    this.guildMemberCount = 0;
    setGuildLevelIsSet(false);
    this.guildLevel = 0;
    this.headIcon = null;
  }

  public String getGuildName() {
    return this.guildName;
  }

  public GuildRankInfo setGuildName(String guildName) {
    this.guildName = guildName;
    return this;
  }

  public void unsetGuildName() {
    this.guildName = null;
  }

  /** Returns true if field guildName is set (has been assigned a value) and false otherwise */
  public boolean isSetGuildName() {
    return this.guildName != null;
  }

  public void setGuildNameIsSet(boolean value) {
    if (!value) {
      this.guildName = null;
    }
  }

  public int getGuildMemberCount() {
    return this.guildMemberCount;
  }

  public GuildRankInfo setGuildMemberCount(int guildMemberCount) {
    this.guildMemberCount = guildMemberCount;
    setGuildMemberCountIsSet(true);
    return this;
  }

  public void unsetGuildMemberCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GUILDMEMBERCOUNT_ISSET_ID);
  }

  /** Returns true if field guildMemberCount is set (has been assigned a value) and false otherwise */
  public boolean isSetGuildMemberCount() {
    return EncodingUtils.testBit(__isset_bitfield, __GUILDMEMBERCOUNT_ISSET_ID);
  }

  public void setGuildMemberCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GUILDMEMBERCOUNT_ISSET_ID, value);
  }

  public int getGuildLevel() {
    return this.guildLevel;
  }

  public GuildRankInfo setGuildLevel(int guildLevel) {
    this.guildLevel = guildLevel;
    setGuildLevelIsSet(true);
    return this;
  }

  public void unsetGuildLevel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GUILDLEVEL_ISSET_ID);
  }

  /** Returns true if field guildLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetGuildLevel() {
    return EncodingUtils.testBit(__isset_bitfield, __GUILDLEVEL_ISSET_ID);
  }

  public void setGuildLevelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GUILDLEVEL_ISSET_ID, value);
  }

  public String getHeadIcon() {
    return this.headIcon;
  }

  public GuildRankInfo setHeadIcon(String headIcon) {
    this.headIcon = headIcon;
    return this;
  }

  public void unsetHeadIcon() {
    this.headIcon = null;
  }

  /** Returns true if field headIcon is set (has been assigned a value) and false otherwise */
  public boolean isSetHeadIcon() {
    return this.headIcon != null;
  }

  public void setHeadIconIsSet(boolean value) {
    if (!value) {
      this.headIcon = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case GUILD_NAME:
      if (value == null) {
        unsetGuildName();
      } else {
        setGuildName((String)value);
      }
      break;

    case GUILD_MEMBER_COUNT:
      if (value == null) {
        unsetGuildMemberCount();
      } else {
        setGuildMemberCount((Integer)value);
      }
      break;

    case GUILD_LEVEL:
      if (value == null) {
        unsetGuildLevel();
      } else {
        setGuildLevel((Integer)value);
      }
      break;

    case HEAD_ICON:
      if (value == null) {
        unsetHeadIcon();
      } else {
        setHeadIcon((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case GUILD_NAME:
      return getGuildName();

    case GUILD_MEMBER_COUNT:
      return Integer.valueOf(getGuildMemberCount());

    case GUILD_LEVEL:
      return Integer.valueOf(getGuildLevel());

    case HEAD_ICON:
      return getHeadIcon();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case GUILD_NAME:
      return isSetGuildName();
    case GUILD_MEMBER_COUNT:
      return isSetGuildMemberCount();
    case GUILD_LEVEL:
      return isSetGuildLevel();
    case HEAD_ICON:
      return isSetHeadIcon();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GuildRankInfo)
      return this.equals((GuildRankInfo)that);
    return false;
  }

  public boolean equals(GuildRankInfo that) {
    if (that == null)
      return false;

    boolean this_present_guildName = true && this.isSetGuildName();
    boolean that_present_guildName = true && that.isSetGuildName();
    if (this_present_guildName || that_present_guildName) {
      if (!(this_present_guildName && that_present_guildName))
        return false;
      if (!this.guildName.equals(that.guildName))
        return false;
    }

    boolean this_present_guildMemberCount = true;
    boolean that_present_guildMemberCount = true;
    if (this_present_guildMemberCount || that_present_guildMemberCount) {
      if (!(this_present_guildMemberCount && that_present_guildMemberCount))
        return false;
      if (this.guildMemberCount != that.guildMemberCount)
        return false;
    }

    boolean this_present_guildLevel = true;
    boolean that_present_guildLevel = true;
    if (this_present_guildLevel || that_present_guildLevel) {
      if (!(this_present_guildLevel && that_present_guildLevel))
        return false;
      if (this.guildLevel != that.guildLevel)
        return false;
    }

    boolean this_present_headIcon = true && this.isSetHeadIcon();
    boolean that_present_headIcon = true && that.isSetHeadIcon();
    if (this_present_headIcon || that_present_headIcon) {
      if (!(this_present_headIcon && that_present_headIcon))
        return false;
      if (!this.headIcon.equals(that.headIcon))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(GuildRankInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    GuildRankInfo typedOther = (GuildRankInfo)other;

    lastComparison = Boolean.valueOf(isSetGuildName()).compareTo(typedOther.isSetGuildName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGuildName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.guildName, typedOther.guildName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGuildMemberCount()).compareTo(typedOther.isSetGuildMemberCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGuildMemberCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.guildMemberCount, typedOther.guildMemberCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGuildLevel()).compareTo(typedOther.isSetGuildLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGuildLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.guildLevel, typedOther.guildLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeadIcon()).compareTo(typedOther.isSetHeadIcon());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeadIcon()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.headIcon, typedOther.headIcon);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GuildRankInfo(");
    boolean first = true;

    sb.append("guildName:");
    if (this.guildName == null) {
      sb.append("null");
    } else {
      sb.append(this.guildName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("guildMemberCount:");
    sb.append(this.guildMemberCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("guildLevel:");
    sb.append(this.guildLevel);
    first = false;
    if (!first) sb.append(", ");
    sb.append("headIcon:");
    if (this.headIcon == null) {
      sb.append("null");
    } else {
      sb.append(this.headIcon);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GuildRankInfoStandardSchemeFactory implements SchemeFactory {
    public GuildRankInfoStandardScheme getScheme() {
      return new GuildRankInfoStandardScheme();
    }
  }

  private static class GuildRankInfoStandardScheme extends StandardScheme<GuildRankInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GuildRankInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GUILD_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.guildName = iprot.readString();
              struct.setGuildNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GUILD_MEMBER_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.guildMemberCount = iprot.readI32();
              struct.setGuildMemberCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // GUILD_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.guildLevel = iprot.readI32();
              struct.setGuildLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // HEAD_ICON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.headIcon = iprot.readString();
              struct.setHeadIconIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GuildRankInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.guildName != null) {
        oprot.writeFieldBegin(GUILD_NAME_FIELD_DESC);
        oprot.writeString(struct.guildName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(GUILD_MEMBER_COUNT_FIELD_DESC);
      oprot.writeI32(struct.guildMemberCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GUILD_LEVEL_FIELD_DESC);
      oprot.writeI32(struct.guildLevel);
      oprot.writeFieldEnd();
      if (struct.headIcon != null) {
        oprot.writeFieldBegin(HEAD_ICON_FIELD_DESC);
        oprot.writeString(struct.headIcon);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GuildRankInfoTupleSchemeFactory implements SchemeFactory {
    public GuildRankInfoTupleScheme getScheme() {
      return new GuildRankInfoTupleScheme();
    }
  }

  private static class GuildRankInfoTupleScheme extends TupleScheme<GuildRankInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GuildRankInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetGuildName()) {
        optionals.set(0);
      }
      if (struct.isSetGuildMemberCount()) {
        optionals.set(1);
      }
      if (struct.isSetGuildLevel()) {
        optionals.set(2);
      }
      if (struct.isSetHeadIcon()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetGuildName()) {
        oprot.writeString(struct.guildName);
      }
      if (struct.isSetGuildMemberCount()) {
        oprot.writeI32(struct.guildMemberCount);
      }
      if (struct.isSetGuildLevel()) {
        oprot.writeI32(struct.guildLevel);
      }
      if (struct.isSetHeadIcon()) {
        oprot.writeString(struct.headIcon);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GuildRankInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.guildName = iprot.readString();
        struct.setGuildNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.guildMemberCount = iprot.readI32();
        struct.setGuildMemberCountIsSet(true);
      }
      if (incoming.get(2)) {
        struct.guildLevel = iprot.readI32();
        struct.setGuildLevelIsSet(true);
      }
      if (incoming.get(3)) {
        struct.headIcon = iprot.readString();
        struct.setHeadIconIsSet(true);
      }
    }
  }

}

