/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 活动目标信息
 */
public class ActivityTargetInfo implements org.apache.thrift.TBase<ActivityTargetInfo, ActivityTargetInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ActivityTargetInfo");

  private static final org.apache.thrift.protocol.TField TARGET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("targetId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TARGET_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("targetTitle", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TARGET_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("targetInfo", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ICON_FIELD_DESC = new org.apache.thrift.protocol.TField("icon", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CUR_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("curNum", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField MAX_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("maxNum", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField TARGET_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("targetStatus", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField PRIZE_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("prizeInfos", org.apache.thrift.protocol.TType.STRUCT, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ActivityTargetInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ActivityTargetInfoTupleSchemeFactory());
  }

  /**
   * 目标id
   */
  public int targetId; // required
  /**
   * 目标标题, 有设置值则为分隔标题
   */
  public String targetTitle; // optional
  /**
   * 目标信息
   */
  public String targetInfo; // optional
  /**
   * 目标图标
   */
  public String icon; // optional
  /**
   * 当前进度
   */
  public long curNum; // optional
  /**
   * 最大进度
   */
  public long maxNum; // optional
  /**
   * 活动目标状态
   * 
   * @see ActivityTargetStatus
   */
  public ActivityTargetStatus targetStatus; // optional
  /**
   * 奖励
   */
  public com.ling9527.music.common.msg.auto.PrizeInfo prizeInfos; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 目标id
     */
    TARGET_ID((short)1, "targetId"),
    /**
     * 目标标题, 有设置值则为分隔标题
     */
    TARGET_TITLE((short)2, "targetTitle"),
    /**
     * 目标信息
     */
    TARGET_INFO((short)3, "targetInfo"),
    /**
     * 目标图标
     */
    ICON((short)4, "icon"),
    /**
     * 当前进度
     */
    CUR_NUM((short)5, "curNum"),
    /**
     * 最大进度
     */
    MAX_NUM((short)6, "maxNum"),
    /**
     * 活动目标状态
     * 
     * @see ActivityTargetStatus
     */
    TARGET_STATUS((short)7, "targetStatus"),
    /**
     * 奖励
     */
    PRIZE_INFOS((short)8, "prizeInfos");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TARGET_ID
          return TARGET_ID;
        case 2: // TARGET_TITLE
          return TARGET_TITLE;
        case 3: // TARGET_INFO
          return TARGET_INFO;
        case 4: // ICON
          return ICON;
        case 5: // CUR_NUM
          return CUR_NUM;
        case 6: // MAX_NUM
          return MAX_NUM;
        case 7: // TARGET_STATUS
          return TARGET_STATUS;
        case 8: // PRIZE_INFOS
          return PRIZE_INFOS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TARGETID_ISSET_ID = 0;
  private static final int __CURNUM_ISSET_ID = 1;
  private static final int __MAXNUM_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.TARGET_TITLE,_Fields.TARGET_INFO,_Fields.ICON,_Fields.CUR_NUM,_Fields.MAX_NUM,_Fields.TARGET_STATUS,_Fields.PRIZE_INFOS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TARGET_ID, new org.apache.thrift.meta_data.FieldMetaData("targetId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TARGET_TITLE, new org.apache.thrift.meta_data.FieldMetaData("targetTitle", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TARGET_INFO, new org.apache.thrift.meta_data.FieldMetaData("targetInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ICON, new org.apache.thrift.meta_data.FieldMetaData("icon", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CUR_NUM, new org.apache.thrift.meta_data.FieldMetaData("curNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MAX_NUM, new org.apache.thrift.meta_data.FieldMetaData("maxNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TARGET_STATUS, new org.apache.thrift.meta_data.FieldMetaData("targetStatus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ActivityTargetStatus.class)));
    tmpMap.put(_Fields.PRIZE_INFOS, new org.apache.thrift.meta_data.FieldMetaData("prizeInfos", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.PrizeInfo.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ActivityTargetInfo.class, metaDataMap);
  }

  public ActivityTargetInfo() {
  }

  public ActivityTargetInfo(
    int targetId)
  {
    this();
    this.targetId = targetId;
    setTargetIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ActivityTargetInfo(ActivityTargetInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.targetId = other.targetId;
    if (other.isSetTargetTitle()) {
      this.targetTitle = other.targetTitle;
    }
    if (other.isSetTargetInfo()) {
      this.targetInfo = other.targetInfo;
    }
    if (other.isSetIcon()) {
      this.icon = other.icon;
    }
    this.curNum = other.curNum;
    this.maxNum = other.maxNum;
    if (other.isSetTargetStatus()) {
      this.targetStatus = other.targetStatus;
    }
    if (other.isSetPrizeInfos()) {
      this.prizeInfos = new com.ling9527.music.common.msg.auto.PrizeInfo(other.prizeInfos);
    }
  }

  public ActivityTargetInfo deepCopy() {
    return new ActivityTargetInfo(this);
  }

  @Override
  public void clear() {
    setTargetIdIsSet(false);
    this.targetId = 0;
    this.targetTitle = null;
    this.targetInfo = null;
    this.icon = null;
    setCurNumIsSet(false);
    this.curNum = 0;
    setMaxNumIsSet(false);
    this.maxNum = 0;
    this.targetStatus = null;
    this.prizeInfos = null;
  }

  /**
   * 目标id
   */
  public int getTargetId() {
    return this.targetId;
  }

  /**
   * 目标id
   */
  public ActivityTargetInfo setTargetId(int targetId) {
    this.targetId = targetId;
    setTargetIdIsSet(true);
    return this;
  }

  public void unsetTargetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TARGETID_ISSET_ID);
  }

  /** Returns true if field targetId is set (has been assigned a value) and false otherwise */
  public boolean isSetTargetId() {
    return EncodingUtils.testBit(__isset_bitfield, __TARGETID_ISSET_ID);
  }

  public void setTargetIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TARGETID_ISSET_ID, value);
  }

  /**
   * 目标标题, 有设置值则为分隔标题
   */
  public String getTargetTitle() {
    return this.targetTitle;
  }

  /**
   * 目标标题, 有设置值则为分隔标题
   */
  public ActivityTargetInfo setTargetTitle(String targetTitle) {
    this.targetTitle = targetTitle;
    return this;
  }

  public void unsetTargetTitle() {
    this.targetTitle = null;
  }

  /** Returns true if field targetTitle is set (has been assigned a value) and false otherwise */
  public boolean isSetTargetTitle() {
    return this.targetTitle != null;
  }

  public void setTargetTitleIsSet(boolean value) {
    if (!value) {
      this.targetTitle = null;
    }
  }

  /**
   * 目标信息
   */
  public String getTargetInfo() {
    return this.targetInfo;
  }

  /**
   * 目标信息
   */
  public ActivityTargetInfo setTargetInfo(String targetInfo) {
    this.targetInfo = targetInfo;
    return this;
  }

  public void unsetTargetInfo() {
    this.targetInfo = null;
  }

  /** Returns true if field targetInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetTargetInfo() {
    return this.targetInfo != null;
  }

  public void setTargetInfoIsSet(boolean value) {
    if (!value) {
      this.targetInfo = null;
    }
  }

  /**
   * 目标图标
   */
  public String getIcon() {
    return this.icon;
  }

  /**
   * 目标图标
   */
  public ActivityTargetInfo setIcon(String icon) {
    this.icon = icon;
    return this;
  }

  public void unsetIcon() {
    this.icon = null;
  }

  /** Returns true if field icon is set (has been assigned a value) and false otherwise */
  public boolean isSetIcon() {
    return this.icon != null;
  }

  public void setIconIsSet(boolean value) {
    if (!value) {
      this.icon = null;
    }
  }

  /**
   * 当前进度
   */
  public long getCurNum() {
    return this.curNum;
  }

  /**
   * 当前进度
   */
  public ActivityTargetInfo setCurNum(long curNum) {
    this.curNum = curNum;
    setCurNumIsSet(true);
    return this;
  }

  public void unsetCurNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURNUM_ISSET_ID);
  }

  /** Returns true if field curNum is set (has been assigned a value) and false otherwise */
  public boolean isSetCurNum() {
    return EncodingUtils.testBit(__isset_bitfield, __CURNUM_ISSET_ID);
  }

  public void setCurNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURNUM_ISSET_ID, value);
  }

  /**
   * 最大进度
   */
  public long getMaxNum() {
    return this.maxNum;
  }

  /**
   * 最大进度
   */
  public ActivityTargetInfo setMaxNum(long maxNum) {
    this.maxNum = maxNum;
    setMaxNumIsSet(true);
    return this;
  }

  public void unsetMaxNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXNUM_ISSET_ID);
  }

  /** Returns true if field maxNum is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxNum() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXNUM_ISSET_ID);
  }

  public void setMaxNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXNUM_ISSET_ID, value);
  }

  /**
   * 活动目标状态
   * 
   * @see ActivityTargetStatus
   */
  public ActivityTargetStatus getTargetStatus() {
    return this.targetStatus;
  }

  /**
   * 活动目标状态
   * 
   * @see ActivityTargetStatus
   */
  public ActivityTargetInfo setTargetStatus(ActivityTargetStatus targetStatus) {
    this.targetStatus = targetStatus;
    return this;
  }

  public void unsetTargetStatus() {
    this.targetStatus = null;
  }

  /** Returns true if field targetStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetTargetStatus() {
    return this.targetStatus != null;
  }

  public void setTargetStatusIsSet(boolean value) {
    if (!value) {
      this.targetStatus = null;
    }
  }

  /**
   * 奖励
   */
  public com.ling9527.music.common.msg.auto.PrizeInfo getPrizeInfos() {
    return this.prizeInfos;
  }

  /**
   * 奖励
   */
  public ActivityTargetInfo setPrizeInfos(com.ling9527.music.common.msg.auto.PrizeInfo prizeInfos) {
    this.prizeInfos = prizeInfos;
    return this;
  }

  public void unsetPrizeInfos() {
    this.prizeInfos = null;
  }

  /** Returns true if field prizeInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetPrizeInfos() {
    return this.prizeInfos != null;
  }

  public void setPrizeInfosIsSet(boolean value) {
    if (!value) {
      this.prizeInfos = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TARGET_ID:
      if (value == null) {
        unsetTargetId();
      } else {
        setTargetId((Integer)value);
      }
      break;

    case TARGET_TITLE:
      if (value == null) {
        unsetTargetTitle();
      } else {
        setTargetTitle((String)value);
      }
      break;

    case TARGET_INFO:
      if (value == null) {
        unsetTargetInfo();
      } else {
        setTargetInfo((String)value);
      }
      break;

    case ICON:
      if (value == null) {
        unsetIcon();
      } else {
        setIcon((String)value);
      }
      break;

    case CUR_NUM:
      if (value == null) {
        unsetCurNum();
      } else {
        setCurNum((Long)value);
      }
      break;

    case MAX_NUM:
      if (value == null) {
        unsetMaxNum();
      } else {
        setMaxNum((Long)value);
      }
      break;

    case TARGET_STATUS:
      if (value == null) {
        unsetTargetStatus();
      } else {
        setTargetStatus((ActivityTargetStatus)value);
      }
      break;

    case PRIZE_INFOS:
      if (value == null) {
        unsetPrizeInfos();
      } else {
        setPrizeInfos((com.ling9527.music.common.msg.auto.PrizeInfo)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TARGET_ID:
      return Integer.valueOf(getTargetId());

    case TARGET_TITLE:
      return getTargetTitle();

    case TARGET_INFO:
      return getTargetInfo();

    case ICON:
      return getIcon();

    case CUR_NUM:
      return Long.valueOf(getCurNum());

    case MAX_NUM:
      return Long.valueOf(getMaxNum());

    case TARGET_STATUS:
      return getTargetStatus();

    case PRIZE_INFOS:
      return getPrizeInfos();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TARGET_ID:
      return isSetTargetId();
    case TARGET_TITLE:
      return isSetTargetTitle();
    case TARGET_INFO:
      return isSetTargetInfo();
    case ICON:
      return isSetIcon();
    case CUR_NUM:
      return isSetCurNum();
    case MAX_NUM:
      return isSetMaxNum();
    case TARGET_STATUS:
      return isSetTargetStatus();
    case PRIZE_INFOS:
      return isSetPrizeInfos();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ActivityTargetInfo)
      return this.equals((ActivityTargetInfo)that);
    return false;
  }

  public boolean equals(ActivityTargetInfo that) {
    if (that == null)
      return false;

    boolean this_present_targetId = true;
    boolean that_present_targetId = true;
    if (this_present_targetId || that_present_targetId) {
      if (!(this_present_targetId && that_present_targetId))
        return false;
      if (this.targetId != that.targetId)
        return false;
    }

    boolean this_present_targetTitle = true && this.isSetTargetTitle();
    boolean that_present_targetTitle = true && that.isSetTargetTitle();
    if (this_present_targetTitle || that_present_targetTitle) {
      if (!(this_present_targetTitle && that_present_targetTitle))
        return false;
      if (!this.targetTitle.equals(that.targetTitle))
        return false;
    }

    boolean this_present_targetInfo = true && this.isSetTargetInfo();
    boolean that_present_targetInfo = true && that.isSetTargetInfo();
    if (this_present_targetInfo || that_present_targetInfo) {
      if (!(this_present_targetInfo && that_present_targetInfo))
        return false;
      if (!this.targetInfo.equals(that.targetInfo))
        return false;
    }

    boolean this_present_icon = true && this.isSetIcon();
    boolean that_present_icon = true && that.isSetIcon();
    if (this_present_icon || that_present_icon) {
      if (!(this_present_icon && that_present_icon))
        return false;
      if (!this.icon.equals(that.icon))
        return false;
    }

    boolean this_present_curNum = true && this.isSetCurNum();
    boolean that_present_curNum = true && that.isSetCurNum();
    if (this_present_curNum || that_present_curNum) {
      if (!(this_present_curNum && that_present_curNum))
        return false;
      if (this.curNum != that.curNum)
        return false;
    }

    boolean this_present_maxNum = true && this.isSetMaxNum();
    boolean that_present_maxNum = true && that.isSetMaxNum();
    if (this_present_maxNum || that_present_maxNum) {
      if (!(this_present_maxNum && that_present_maxNum))
        return false;
      if (this.maxNum != that.maxNum)
        return false;
    }

    boolean this_present_targetStatus = true && this.isSetTargetStatus();
    boolean that_present_targetStatus = true && that.isSetTargetStatus();
    if (this_present_targetStatus || that_present_targetStatus) {
      if (!(this_present_targetStatus && that_present_targetStatus))
        return false;
      if (!this.targetStatus.equals(that.targetStatus))
        return false;
    }

    boolean this_present_prizeInfos = true && this.isSetPrizeInfos();
    boolean that_present_prizeInfos = true && that.isSetPrizeInfos();
    if (this_present_prizeInfos || that_present_prizeInfos) {
      if (!(this_present_prizeInfos && that_present_prizeInfos))
        return false;
      if (!this.prizeInfos.equals(that.prizeInfos))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ActivityTargetInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ActivityTargetInfo typedOther = (ActivityTargetInfo)other;

    lastComparison = Boolean.valueOf(isSetTargetId()).compareTo(typedOther.isSetTargetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTargetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targetId, typedOther.targetId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTargetTitle()).compareTo(typedOther.isSetTargetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTargetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targetTitle, typedOther.targetTitle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTargetInfo()).compareTo(typedOther.isSetTargetInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTargetInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targetInfo, typedOther.targetInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIcon()).compareTo(typedOther.isSetIcon());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIcon()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.icon, typedOther.icon);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurNum()).compareTo(typedOther.isSetCurNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.curNum, typedOther.curNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxNum()).compareTo(typedOther.isSetMaxNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxNum, typedOther.maxNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTargetStatus()).compareTo(typedOther.isSetTargetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTargetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targetStatus, typedOther.targetStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrizeInfos()).compareTo(typedOther.isSetPrizeInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrizeInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prizeInfos, typedOther.prizeInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ActivityTargetInfo(");
    boolean first = true;

    sb.append("targetId:");
    sb.append(this.targetId);
    first = false;
    if (isSetTargetTitle()) {
      if (!first) sb.append(", ");
      sb.append("targetTitle:");
      if (this.targetTitle == null) {
        sb.append("null");
      } else {
        sb.append(this.targetTitle);
      }
      first = false;
    }
    if (isSetTargetInfo()) {
      if (!first) sb.append(", ");
      sb.append("targetInfo:");
      if (this.targetInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.targetInfo);
      }
      first = false;
    }
    if (isSetIcon()) {
      if (!first) sb.append(", ");
      sb.append("icon:");
      if (this.icon == null) {
        sb.append("null");
      } else {
        sb.append(this.icon);
      }
      first = false;
    }
    if (isSetCurNum()) {
      if (!first) sb.append(", ");
      sb.append("curNum:");
      sb.append(this.curNum);
      first = false;
    }
    if (isSetMaxNum()) {
      if (!first) sb.append(", ");
      sb.append("maxNum:");
      sb.append(this.maxNum);
      first = false;
    }
    if (isSetTargetStatus()) {
      if (!first) sb.append(", ");
      sb.append("targetStatus:");
      if (this.targetStatus == null) {
        sb.append("null");
      } else {
        sb.append(this.targetStatus);
      }
      first = false;
    }
    if (isSetPrizeInfos()) {
      if (!first) sb.append(", ");
      sb.append("prizeInfos:");
      if (this.prizeInfos == null) {
        sb.append("null");
      } else {
        sb.append(this.prizeInfos);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (prizeInfos != null) {
      prizeInfos.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ActivityTargetInfoStandardSchemeFactory implements SchemeFactory {
    public ActivityTargetInfoStandardScheme getScheme() {
      return new ActivityTargetInfoStandardScheme();
    }
  }

  private static class ActivityTargetInfoStandardScheme extends StandardScheme<ActivityTargetInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ActivityTargetInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TARGET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.targetId = iprot.readI32();
              struct.setTargetIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TARGET_TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.targetTitle = iprot.readString();
              struct.setTargetTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TARGET_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.targetInfo = iprot.readString();
              struct.setTargetInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ICON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.icon = iprot.readString();
              struct.setIconIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CUR_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.curNum = iprot.readI64();
              struct.setCurNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MAX_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.maxNum = iprot.readI64();
              struct.setMaxNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TARGET_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.targetStatus = ActivityTargetStatus.findByValue(iprot.readI32());
              struct.setTargetStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PRIZE_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.prizeInfos = new com.ling9527.music.common.msg.auto.PrizeInfo();
              struct.prizeInfos.read(iprot);
              struct.setPrizeInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ActivityTargetInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TARGET_ID_FIELD_DESC);
      oprot.writeI32(struct.targetId);
      oprot.writeFieldEnd();
      if (struct.targetTitle != null) {
        if (struct.isSetTargetTitle()) {
          oprot.writeFieldBegin(TARGET_TITLE_FIELD_DESC);
          oprot.writeString(struct.targetTitle);
          oprot.writeFieldEnd();
        }
      }
      if (struct.targetInfo != null) {
        if (struct.isSetTargetInfo()) {
          oprot.writeFieldBegin(TARGET_INFO_FIELD_DESC);
          oprot.writeString(struct.targetInfo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.icon != null) {
        if (struct.isSetIcon()) {
          oprot.writeFieldBegin(ICON_FIELD_DESC);
          oprot.writeString(struct.icon);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCurNum()) {
        oprot.writeFieldBegin(CUR_NUM_FIELD_DESC);
        oprot.writeI64(struct.curNum);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMaxNum()) {
        oprot.writeFieldBegin(MAX_NUM_FIELD_DESC);
        oprot.writeI64(struct.maxNum);
        oprot.writeFieldEnd();
      }
      if (struct.targetStatus != null) {
        if (struct.isSetTargetStatus()) {
          oprot.writeFieldBegin(TARGET_STATUS_FIELD_DESC);
          oprot.writeI32(struct.targetStatus.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.prizeInfos != null) {
        if (struct.isSetPrizeInfos()) {
          oprot.writeFieldBegin(PRIZE_INFOS_FIELD_DESC);
          struct.prizeInfos.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ActivityTargetInfoTupleSchemeFactory implements SchemeFactory {
    public ActivityTargetInfoTupleScheme getScheme() {
      return new ActivityTargetInfoTupleScheme();
    }
  }

  private static class ActivityTargetInfoTupleScheme extends TupleScheme<ActivityTargetInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ActivityTargetInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTargetId()) {
        optionals.set(0);
      }
      if (struct.isSetTargetTitle()) {
        optionals.set(1);
      }
      if (struct.isSetTargetInfo()) {
        optionals.set(2);
      }
      if (struct.isSetIcon()) {
        optionals.set(3);
      }
      if (struct.isSetCurNum()) {
        optionals.set(4);
      }
      if (struct.isSetMaxNum()) {
        optionals.set(5);
      }
      if (struct.isSetTargetStatus()) {
        optionals.set(6);
      }
      if (struct.isSetPrizeInfos()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetTargetId()) {
        oprot.writeI32(struct.targetId);
      }
      if (struct.isSetTargetTitle()) {
        oprot.writeString(struct.targetTitle);
      }
      if (struct.isSetTargetInfo()) {
        oprot.writeString(struct.targetInfo);
      }
      if (struct.isSetIcon()) {
        oprot.writeString(struct.icon);
      }
      if (struct.isSetCurNum()) {
        oprot.writeI64(struct.curNum);
      }
      if (struct.isSetMaxNum()) {
        oprot.writeI64(struct.maxNum);
      }
      if (struct.isSetTargetStatus()) {
        oprot.writeI32(struct.targetStatus.getValue());
      }
      if (struct.isSetPrizeInfos()) {
        struct.prizeInfos.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ActivityTargetInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.targetId = iprot.readI32();
        struct.setTargetIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.targetTitle = iprot.readString();
        struct.setTargetTitleIsSet(true);
      }
      if (incoming.get(2)) {
        struct.targetInfo = iprot.readString();
        struct.setTargetInfoIsSet(true);
      }
      if (incoming.get(3)) {
        struct.icon = iprot.readString();
        struct.setIconIsSet(true);
      }
      if (incoming.get(4)) {
        struct.curNum = iprot.readI64();
        struct.setCurNumIsSet(true);
      }
      if (incoming.get(5)) {
        struct.maxNum = iprot.readI64();
        struct.setMaxNumIsSet(true);
      }
      if (incoming.get(6)) {
        struct.targetStatus = ActivityTargetStatus.findByValue(iprot.readI32());
        struct.setTargetStatusIsSet(true);
      }
      if (incoming.get(7)) {
        struct.prizeInfos = new com.ling9527.music.common.msg.auto.PrizeInfo();
        struct.prizeInfos.read(iprot);
        struct.setPrizeInfosIsSet(true);
      }
    }
  }

}

