/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SCUpdateCharPropertyMsg implements org.apache.thrift.TBase<SCUpdateCharPropertyMsg, SCUpdateCharPropertyMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCUpdateCharPropertyMsg");

  private static final org.apache.thrift.protocol.TField IB_FIELD_DESC = new org.apache.thrift.protocol.TField("ib", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField GOLD_FIELD_DESC = new org.apache.thrift.protocol.TField("gold", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField POINT_FIELD_DESC = new org.apache.thrift.protocol.TField("point", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField POPULARITY_FIELD_DESC = new org.apache.thrift.protocol.TField("popularity", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("exp", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField CUP_FIELD_DESC = new org.apache.thrift.protocol.TField("cup", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField PRAISE_FIELD_DESC = new org.apache.thrift.protocol.TField("praise", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField FREE_IB_FIELD_DESC = new org.apache.thrift.protocol.TField("freeIb", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField BYTE_COUNTER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("byteCounterList", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField SHORT_COUNTER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("shortCounterList", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField INT_COUNTER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("intCounterList", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField RECHARGE_IB_FIELD_DESC = new org.apache.thrift.protocol.TField("rechargeIb", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField INT_DAY_LOOP_COUNTER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("intDayLoopCounterList", org.apache.thrift.protocol.TType.LIST, (short)13);
  private static final org.apache.thrift.protocol.TField FLAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("flags", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField ACTIVE_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("activeVal", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField ACTIVE_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("activeLevel", org.apache.thrift.protocol.TType.BYTE, (short)16);
  private static final org.apache.thrift.protocol.TField SHORT_DAY_LOOP_COUNTER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("shortDayLoopCounterList", org.apache.thrift.protocol.TType.LIST, (short)17);
  private static final org.apache.thrift.protocol.TField BYTE_DAY_LOOP_COUNTER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("byteDayLoopCounterList", org.apache.thrift.protocol.TType.LIST, (short)18);
  private static final org.apache.thrift.protocol.TField LARGESSE_FIELD_DESC = new org.apache.thrift.protocol.TField("largesse", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField CHARM_FIELD_DESC = new org.apache.thrift.protocol.TField("charm", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField VIP_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("vipLevel", org.apache.thrift.protocol.TType.BYTE, (short)22);
  private static final org.apache.thrift.protocol.TField TOTAL_RECHARGE_FIELD_DESC = new org.apache.thrift.protocol.TField("totalRecharge", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField TAG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tagId", org.apache.thrift.protocol.TType.I16, (short)24);
  private static final org.apache.thrift.protocol.TField NON_POINT_IB_FIELD_DESC = new org.apache.thrift.protocol.TField("nonPointIb", org.apache.thrift.protocol.TType.I32, (short)25);
  private static final org.apache.thrift.protocol.TField BIND_EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("bindEmail", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField FRIEND_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("friendType", org.apache.thrift.protocol.TType.I32, (short)27);
  private static final org.apache.thrift.protocol.TField SKIN_COLOR_FIELD_DESC = new org.apache.thrift.protocol.TField("skinColor", org.apache.thrift.protocol.TType.I32, (short)28);
  private static final org.apache.thrift.protocol.TField STAR_LIGHTS_FIELD_DESC = new org.apache.thrift.protocol.TField("starLights", org.apache.thrift.protocol.TType.I32, (short)29);
  private static final org.apache.thrift.protocol.TField DAILY_LEFT_IMPROVISE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("dailyLeftImproviseCount", org.apache.thrift.protocol.TType.I16, (short)31);
  private static final org.apache.thrift.protocol.TField IMPROVISE_COUPON_FIELD_DESC = new org.apache.thrift.protocol.TField("improviseCoupon", org.apache.thrift.protocol.TType.I32, (short)32);
  private static final org.apache.thrift.protocol.TField STAR_LIGHT_LVL_PRIZE_COUPON_FIELD_DESC = new org.apache.thrift.protocol.TField("starLightLvlPrizeCoupon", org.apache.thrift.protocol.TType.I32, (short)33);
  private static final org.apache.thrift.protocol.TField INC_TOUCH_LOVE_TIMES_FIELD_DESC = new org.apache.thrift.protocol.TField("incTouchLoveTimes", org.apache.thrift.protocol.TType.BYTE, (short)34);
  private static final org.apache.thrift.protocol.TField LOVER_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("loverVal", org.apache.thrift.protocol.TType.I32, (short)35);
  private static final org.apache.thrift.protocol.TField ANNOUNCE_IB_FIELD_DESC = new org.apache.thrift.protocol.TField("announceIb", org.apache.thrift.protocol.TType.I32, (short)36);
  private static final org.apache.thrift.protocol.TField GUILD_GOLD_FIELD_DESC = new org.apache.thrift.protocol.TField("guildGold", org.apache.thrift.protocol.TType.I32, (short)37);
  private static final org.apache.thrift.protocol.TField FASHION_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("fashionVal", org.apache.thrift.protocol.TType.I32, (short)38);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCUpdateCharPropertyMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCUpdateCharPropertyMsgTupleSchemeFactory());
  }

  public int ib; // optional
  public int gold; // optional
  public int point; // optional
  public long popularity; // optional
  public int exp; // optional
  public int cup; // optional
  public int praise; // optional
  public int freeIb; // optional
  public List<Byte> byteCounterList; // optional
  public List<Short> shortCounterList; // optional
  public List<Integer> intCounterList; // optional
  public int rechargeIb; // optional
  public List<Integer> intDayLoopCounterList; // optional
  public ByteBuffer flags; // optional
  public int activeVal; // optional
  public byte activeLevel; // optional
  public List<Short> shortDayLoopCounterList; // optional
  public List<Byte> byteDayLoopCounterList; // optional
  public int largesse; // optional
  public int charm; // optional
  public byte vipLevel; // optional
  public int totalRecharge; // optional
  public short tagId; // optional
  public int nonPointIb; // optional
  public String bindEmail; // optional
  public int friendType; // optional
  public int skinColor; // optional
  public int starLights; // optional
  public short dailyLeftImproviseCount; // optional
  public int improviseCoupon; // optional
  public int starLightLvlPrizeCoupon; // optional
  /**
   * 今天增加摸一摸爱心值次数
   */
  public byte incTouchLoveTimes; // optional
  /**
   * 当前爱心值
   */
  public int loverVal; // optional
  public int announceIb; // optional
  public int guildGold; // optional
  /**
   * 当前时尚值
   */
  public int fashionVal; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    IB((short)1, "ib"),
    GOLD((short)2, "gold"),
    POINT((short)3, "point"),
    POPULARITY((short)4, "popularity"),
    EXP((short)5, "exp"),
    CUP((short)6, "cup"),
    PRAISE((short)7, "praise"),
    FREE_IB((short)8, "freeIb"),
    BYTE_COUNTER_LIST((short)9, "byteCounterList"),
    SHORT_COUNTER_LIST((short)10, "shortCounterList"),
    INT_COUNTER_LIST((short)11, "intCounterList"),
    RECHARGE_IB((short)12, "rechargeIb"),
    INT_DAY_LOOP_COUNTER_LIST((short)13, "intDayLoopCounterList"),
    FLAGS((short)14, "flags"),
    ACTIVE_VAL((short)15, "activeVal"),
    ACTIVE_LEVEL((short)16, "activeLevel"),
    SHORT_DAY_LOOP_COUNTER_LIST((short)17, "shortDayLoopCounterList"),
    BYTE_DAY_LOOP_COUNTER_LIST((short)18, "byteDayLoopCounterList"),
    LARGESSE((short)19, "largesse"),
    CHARM((short)20, "charm"),
    VIP_LEVEL((short)22, "vipLevel"),
    TOTAL_RECHARGE((short)23, "totalRecharge"),
    TAG_ID((short)24, "tagId"),
    NON_POINT_IB((short)25, "nonPointIb"),
    BIND_EMAIL((short)26, "bindEmail"),
    FRIEND_TYPE((short)27, "friendType"),
    SKIN_COLOR((short)28, "skinColor"),
    STAR_LIGHTS((short)29, "starLights"),
    DAILY_LEFT_IMPROVISE_COUNT((short)31, "dailyLeftImproviseCount"),
    IMPROVISE_COUPON((short)32, "improviseCoupon"),
    STAR_LIGHT_LVL_PRIZE_COUPON((short)33, "starLightLvlPrizeCoupon"),
    /**
     * 今天增加摸一摸爱心值次数
     */
    INC_TOUCH_LOVE_TIMES((short)34, "incTouchLoveTimes"),
    /**
     * 当前爱心值
     */
    LOVER_VAL((short)35, "loverVal"),
    ANNOUNCE_IB((short)36, "announceIb"),
    GUILD_GOLD((short)37, "guildGold"),
    /**
     * 当前时尚值
     */
    FASHION_VAL((short)38, "fashionVal");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IB
          return IB;
        case 2: // GOLD
          return GOLD;
        case 3: // POINT
          return POINT;
        case 4: // POPULARITY
          return POPULARITY;
        case 5: // EXP
          return EXP;
        case 6: // CUP
          return CUP;
        case 7: // PRAISE
          return PRAISE;
        case 8: // FREE_IB
          return FREE_IB;
        case 9: // BYTE_COUNTER_LIST
          return BYTE_COUNTER_LIST;
        case 10: // SHORT_COUNTER_LIST
          return SHORT_COUNTER_LIST;
        case 11: // INT_COUNTER_LIST
          return INT_COUNTER_LIST;
        case 12: // RECHARGE_IB
          return RECHARGE_IB;
        case 13: // INT_DAY_LOOP_COUNTER_LIST
          return INT_DAY_LOOP_COUNTER_LIST;
        case 14: // FLAGS
          return FLAGS;
        case 15: // ACTIVE_VAL
          return ACTIVE_VAL;
        case 16: // ACTIVE_LEVEL
          return ACTIVE_LEVEL;
        case 17: // SHORT_DAY_LOOP_COUNTER_LIST
          return SHORT_DAY_LOOP_COUNTER_LIST;
        case 18: // BYTE_DAY_LOOP_COUNTER_LIST
          return BYTE_DAY_LOOP_COUNTER_LIST;
        case 19: // LARGESSE
          return LARGESSE;
        case 20: // CHARM
          return CHARM;
        case 22: // VIP_LEVEL
          return VIP_LEVEL;
        case 23: // TOTAL_RECHARGE
          return TOTAL_RECHARGE;
        case 24: // TAG_ID
          return TAG_ID;
        case 25: // NON_POINT_IB
          return NON_POINT_IB;
        case 26: // BIND_EMAIL
          return BIND_EMAIL;
        case 27: // FRIEND_TYPE
          return FRIEND_TYPE;
        case 28: // SKIN_COLOR
          return SKIN_COLOR;
        case 29: // STAR_LIGHTS
          return STAR_LIGHTS;
        case 31: // DAILY_LEFT_IMPROVISE_COUNT
          return DAILY_LEFT_IMPROVISE_COUNT;
        case 32: // IMPROVISE_COUPON
          return IMPROVISE_COUPON;
        case 33: // STAR_LIGHT_LVL_PRIZE_COUPON
          return STAR_LIGHT_LVL_PRIZE_COUPON;
        case 34: // INC_TOUCH_LOVE_TIMES
          return INC_TOUCH_LOVE_TIMES;
        case 35: // LOVER_VAL
          return LOVER_VAL;
        case 36: // ANNOUNCE_IB
          return ANNOUNCE_IB;
        case 37: // GUILD_GOLD
          return GUILD_GOLD;
        case 38: // FASHION_VAL
          return FASHION_VAL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IB_ISSET_ID = 0;
  private static final int __GOLD_ISSET_ID = 1;
  private static final int __POINT_ISSET_ID = 2;
  private static final int __POPULARITY_ISSET_ID = 3;
  private static final int __EXP_ISSET_ID = 4;
  private static final int __CUP_ISSET_ID = 5;
  private static final int __PRAISE_ISSET_ID = 6;
  private static final int __FREEIB_ISSET_ID = 7;
  private static final int __RECHARGEIB_ISSET_ID = 8;
  private static final int __ACTIVEVAL_ISSET_ID = 9;
  private static final int __ACTIVELEVEL_ISSET_ID = 10;
  private static final int __LARGESSE_ISSET_ID = 11;
  private static final int __CHARM_ISSET_ID = 12;
  private static final int __VIPLEVEL_ISSET_ID = 13;
  private static final int __TOTALRECHARGE_ISSET_ID = 14;
  private static final int __TAGID_ISSET_ID = 15;
  private static final int __NONPOINTIB_ISSET_ID = 16;
  private static final int __FRIENDTYPE_ISSET_ID = 17;
  private static final int __SKINCOLOR_ISSET_ID = 18;
  private static final int __STARLIGHTS_ISSET_ID = 19;
  private static final int __DAILYLEFTIMPROVISECOUNT_ISSET_ID = 20;
  private static final int __IMPROVISECOUPON_ISSET_ID = 21;
  private static final int __STARLIGHTLVLPRIZECOUPON_ISSET_ID = 22;
  private static final int __INCTOUCHLOVETIMES_ISSET_ID = 23;
  private static final int __LOVERVAL_ISSET_ID = 24;
  private static final int __ANNOUNCEIB_ISSET_ID = 25;
  private static final int __GUILDGOLD_ISSET_ID = 26;
  private static final int __FASHIONVAL_ISSET_ID = 27;
  private int __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.IB,_Fields.GOLD,_Fields.POINT,_Fields.POPULARITY,_Fields.EXP,_Fields.CUP,_Fields.PRAISE,_Fields.FREE_IB,_Fields.BYTE_COUNTER_LIST,_Fields.SHORT_COUNTER_LIST,_Fields.INT_COUNTER_LIST,_Fields.RECHARGE_IB,_Fields.INT_DAY_LOOP_COUNTER_LIST,_Fields.FLAGS,_Fields.ACTIVE_VAL,_Fields.ACTIVE_LEVEL,_Fields.SHORT_DAY_LOOP_COUNTER_LIST,_Fields.BYTE_DAY_LOOP_COUNTER_LIST,_Fields.LARGESSE,_Fields.CHARM,_Fields.VIP_LEVEL,_Fields.TOTAL_RECHARGE,_Fields.TAG_ID,_Fields.NON_POINT_IB,_Fields.BIND_EMAIL,_Fields.FRIEND_TYPE,_Fields.SKIN_COLOR,_Fields.STAR_LIGHTS,_Fields.DAILY_LEFT_IMPROVISE_COUNT,_Fields.IMPROVISE_COUPON,_Fields.STAR_LIGHT_LVL_PRIZE_COUPON,_Fields.INC_TOUCH_LOVE_TIMES,_Fields.LOVER_VAL,_Fields.ANNOUNCE_IB,_Fields.GUILD_GOLD,_Fields.FASHION_VAL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IB, new org.apache.thrift.meta_data.FieldMetaData("ib", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GOLD, new org.apache.thrift.meta_data.FieldMetaData("gold", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POINT, new org.apache.thrift.meta_data.FieldMetaData("point", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POPULARITY, new org.apache.thrift.meta_data.FieldMetaData("popularity", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EXP, new org.apache.thrift.meta_data.FieldMetaData("exp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CUP, new org.apache.thrift.meta_data.FieldMetaData("cup", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRAISE, new org.apache.thrift.meta_data.FieldMetaData("praise", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FREE_IB, new org.apache.thrift.meta_data.FieldMetaData("freeIb", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BYTE_COUNTER_LIST, new org.apache.thrift.meta_data.FieldMetaData("byteCounterList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE))));
    tmpMap.put(_Fields.SHORT_COUNTER_LIST, new org.apache.thrift.meta_data.FieldMetaData("shortCounterList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16))));
    tmpMap.put(_Fields.INT_COUNTER_LIST, new org.apache.thrift.meta_data.FieldMetaData("intCounterList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.RECHARGE_IB, new org.apache.thrift.meta_data.FieldMetaData("rechargeIb", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INT_DAY_LOOP_COUNTER_LIST, new org.apache.thrift.meta_data.FieldMetaData("intDayLoopCounterList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.FLAGS, new org.apache.thrift.meta_data.FieldMetaData("flags", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.ACTIVE_VAL, new org.apache.thrift.meta_data.FieldMetaData("activeVal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACTIVE_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("activeLevel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.SHORT_DAY_LOOP_COUNTER_LIST, new org.apache.thrift.meta_data.FieldMetaData("shortDayLoopCounterList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16))));
    tmpMap.put(_Fields.BYTE_DAY_LOOP_COUNTER_LIST, new org.apache.thrift.meta_data.FieldMetaData("byteDayLoopCounterList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE))));
    tmpMap.put(_Fields.LARGESSE, new org.apache.thrift.meta_data.FieldMetaData("largesse", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CHARM, new org.apache.thrift.meta_data.FieldMetaData("charm", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VIP_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("vipLevel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.TOTAL_RECHARGE, new org.apache.thrift.meta_data.FieldMetaData("totalRecharge", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TAG_ID, new org.apache.thrift.meta_data.FieldMetaData("tagId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.NON_POINT_IB, new org.apache.thrift.meta_data.FieldMetaData("nonPointIb", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BIND_EMAIL, new org.apache.thrift.meta_data.FieldMetaData("bindEmail", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FRIEND_TYPE, new org.apache.thrift.meta_data.FieldMetaData("friendType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SKIN_COLOR, new org.apache.thrift.meta_data.FieldMetaData("skinColor", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STAR_LIGHTS, new org.apache.thrift.meta_data.FieldMetaData("starLights", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DAILY_LEFT_IMPROVISE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("dailyLeftImproviseCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.IMPROVISE_COUPON, new org.apache.thrift.meta_data.FieldMetaData("improviseCoupon", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STAR_LIGHT_LVL_PRIZE_COUPON, new org.apache.thrift.meta_data.FieldMetaData("starLightLvlPrizeCoupon", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INC_TOUCH_LOVE_TIMES, new org.apache.thrift.meta_data.FieldMetaData("incTouchLoveTimes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.LOVER_VAL, new org.apache.thrift.meta_data.FieldMetaData("loverVal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ANNOUNCE_IB, new org.apache.thrift.meta_data.FieldMetaData("announceIb", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GUILD_GOLD, new org.apache.thrift.meta_data.FieldMetaData("guildGold", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FASHION_VAL, new org.apache.thrift.meta_data.FieldMetaData("fashionVal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCUpdateCharPropertyMsg.class, metaDataMap);
  }

  public SCUpdateCharPropertyMsg() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCUpdateCharPropertyMsg(SCUpdateCharPropertyMsg other) {
    __isset_bitfield = other.__isset_bitfield;
    this.ib = other.ib;
    this.gold = other.gold;
    this.point = other.point;
    this.popularity = other.popularity;
    this.exp = other.exp;
    this.cup = other.cup;
    this.praise = other.praise;
    this.freeIb = other.freeIb;
    if (other.isSetByteCounterList()) {
      List<Byte> __this__byteCounterList = new ArrayList<Byte>();
      for (Byte other_element : other.byteCounterList) {
        __this__byteCounterList.add(other_element);
      }
      this.byteCounterList = __this__byteCounterList;
    }
    if (other.isSetShortCounterList()) {
      List<Short> __this__shortCounterList = new ArrayList<Short>();
      for (Short other_element : other.shortCounterList) {
        __this__shortCounterList.add(other_element);
      }
      this.shortCounterList = __this__shortCounterList;
    }
    if (other.isSetIntCounterList()) {
      List<Integer> __this__intCounterList = new ArrayList<Integer>();
      for (Integer other_element : other.intCounterList) {
        __this__intCounterList.add(other_element);
      }
      this.intCounterList = __this__intCounterList;
    }
    this.rechargeIb = other.rechargeIb;
    if (other.isSetIntDayLoopCounterList()) {
      List<Integer> __this__intDayLoopCounterList = new ArrayList<Integer>();
      for (Integer other_element : other.intDayLoopCounterList) {
        __this__intDayLoopCounterList.add(other_element);
      }
      this.intDayLoopCounterList = __this__intDayLoopCounterList;
    }
    if (other.isSetFlags()) {
      this.flags = org.apache.thrift.TBaseHelper.copyBinary(other.flags);
;
    }
    this.activeVal = other.activeVal;
    this.activeLevel = other.activeLevel;
    if (other.isSetShortDayLoopCounterList()) {
      List<Short> __this__shortDayLoopCounterList = new ArrayList<Short>();
      for (Short other_element : other.shortDayLoopCounterList) {
        __this__shortDayLoopCounterList.add(other_element);
      }
      this.shortDayLoopCounterList = __this__shortDayLoopCounterList;
    }
    if (other.isSetByteDayLoopCounterList()) {
      List<Byte> __this__byteDayLoopCounterList = new ArrayList<Byte>();
      for (Byte other_element : other.byteDayLoopCounterList) {
        __this__byteDayLoopCounterList.add(other_element);
      }
      this.byteDayLoopCounterList = __this__byteDayLoopCounterList;
    }
    this.largesse = other.largesse;
    this.charm = other.charm;
    this.vipLevel = other.vipLevel;
    this.totalRecharge = other.totalRecharge;
    this.tagId = other.tagId;
    this.nonPointIb = other.nonPointIb;
    if (other.isSetBindEmail()) {
      this.bindEmail = other.bindEmail;
    }
    this.friendType = other.friendType;
    this.skinColor = other.skinColor;
    this.starLights = other.starLights;
    this.dailyLeftImproviseCount = other.dailyLeftImproviseCount;
    this.improviseCoupon = other.improviseCoupon;
    this.starLightLvlPrizeCoupon = other.starLightLvlPrizeCoupon;
    this.incTouchLoveTimes = other.incTouchLoveTimes;
    this.loverVal = other.loverVal;
    this.announceIb = other.announceIb;
    this.guildGold = other.guildGold;
    this.fashionVal = other.fashionVal;
  }

  public SCUpdateCharPropertyMsg deepCopy() {
    return new SCUpdateCharPropertyMsg(this);
  }

  @Override
  public void clear() {
    setIbIsSet(false);
    this.ib = 0;
    setGoldIsSet(false);
    this.gold = 0;
    setPointIsSet(false);
    this.point = 0;
    setPopularityIsSet(false);
    this.popularity = 0;
    setExpIsSet(false);
    this.exp = 0;
    setCupIsSet(false);
    this.cup = 0;
    setPraiseIsSet(false);
    this.praise = 0;
    setFreeIbIsSet(false);
    this.freeIb = 0;
    this.byteCounterList = null;
    this.shortCounterList = null;
    this.intCounterList = null;
    setRechargeIbIsSet(false);
    this.rechargeIb = 0;
    this.intDayLoopCounterList = null;
    this.flags = null;
    setActiveValIsSet(false);
    this.activeVal = 0;
    setActiveLevelIsSet(false);
    this.activeLevel = 0;
    this.shortDayLoopCounterList = null;
    this.byteDayLoopCounterList = null;
    setLargesseIsSet(false);
    this.largesse = 0;
    setCharmIsSet(false);
    this.charm = 0;
    setVipLevelIsSet(false);
    this.vipLevel = 0;
    setTotalRechargeIsSet(false);
    this.totalRecharge = 0;
    setTagIdIsSet(false);
    this.tagId = 0;
    setNonPointIbIsSet(false);
    this.nonPointIb = 0;
    this.bindEmail = null;
    setFriendTypeIsSet(false);
    this.friendType = 0;
    setSkinColorIsSet(false);
    this.skinColor = 0;
    setStarLightsIsSet(false);
    this.starLights = 0;
    setDailyLeftImproviseCountIsSet(false);
    this.dailyLeftImproviseCount = 0;
    setImproviseCouponIsSet(false);
    this.improviseCoupon = 0;
    setStarLightLvlPrizeCouponIsSet(false);
    this.starLightLvlPrizeCoupon = 0;
    setIncTouchLoveTimesIsSet(false);
    this.incTouchLoveTimes = 0;
    setLoverValIsSet(false);
    this.loverVal = 0;
    setAnnounceIbIsSet(false);
    this.announceIb = 0;
    setGuildGoldIsSet(false);
    this.guildGold = 0;
    setFashionValIsSet(false);
    this.fashionVal = 0;
  }

  public int getIb() {
    return this.ib;
  }

  public SCUpdateCharPropertyMsg setIb(int ib) {
    this.ib = ib;
    setIbIsSet(true);
    return this;
  }

  public void unsetIb() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IB_ISSET_ID);
  }

  /** Returns true if field ib is set (has been assigned a value) and false otherwise */
  public boolean isSetIb() {
    return EncodingUtils.testBit(__isset_bitfield, __IB_ISSET_ID);
  }

  public void setIbIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IB_ISSET_ID, value);
  }

  public int getGold() {
    return this.gold;
  }

  public SCUpdateCharPropertyMsg setGold(int gold) {
    this.gold = gold;
    setGoldIsSet(true);
    return this;
  }

  public void unsetGold() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GOLD_ISSET_ID);
  }

  /** Returns true if field gold is set (has been assigned a value) and false otherwise */
  public boolean isSetGold() {
    return EncodingUtils.testBit(__isset_bitfield, __GOLD_ISSET_ID);
  }

  public void setGoldIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GOLD_ISSET_ID, value);
  }

  public int getPoint() {
    return this.point;
  }

  public SCUpdateCharPropertyMsg setPoint(int point) {
    this.point = point;
    setPointIsSet(true);
    return this;
  }

  public void unsetPoint() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POINT_ISSET_ID);
  }

  /** Returns true if field point is set (has been assigned a value) and false otherwise */
  public boolean isSetPoint() {
    return EncodingUtils.testBit(__isset_bitfield, __POINT_ISSET_ID);
  }

  public void setPointIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POINT_ISSET_ID, value);
  }

  public long getPopularity() {
    return this.popularity;
  }

  public SCUpdateCharPropertyMsg setPopularity(long popularity) {
    this.popularity = popularity;
    setPopularityIsSet(true);
    return this;
  }

  public void unsetPopularity() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POPULARITY_ISSET_ID);
  }

  /** Returns true if field popularity is set (has been assigned a value) and false otherwise */
  public boolean isSetPopularity() {
    return EncodingUtils.testBit(__isset_bitfield, __POPULARITY_ISSET_ID);
  }

  public void setPopularityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POPULARITY_ISSET_ID, value);
  }

  public int getExp() {
    return this.exp;
  }

  public SCUpdateCharPropertyMsg setExp(int exp) {
    this.exp = exp;
    setExpIsSet(true);
    return this;
  }

  public void unsetExp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXP_ISSET_ID);
  }

  /** Returns true if field exp is set (has been assigned a value) and false otherwise */
  public boolean isSetExp() {
    return EncodingUtils.testBit(__isset_bitfield, __EXP_ISSET_ID);
  }

  public void setExpIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXP_ISSET_ID, value);
  }

  public int getCup() {
    return this.cup;
  }

  public SCUpdateCharPropertyMsg setCup(int cup) {
    this.cup = cup;
    setCupIsSet(true);
    return this;
  }

  public void unsetCup() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CUP_ISSET_ID);
  }

  /** Returns true if field cup is set (has been assigned a value) and false otherwise */
  public boolean isSetCup() {
    return EncodingUtils.testBit(__isset_bitfield, __CUP_ISSET_ID);
  }

  public void setCupIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CUP_ISSET_ID, value);
  }

  public int getPraise() {
    return this.praise;
  }

  public SCUpdateCharPropertyMsg setPraise(int praise) {
    this.praise = praise;
    setPraiseIsSet(true);
    return this;
  }

  public void unsetPraise() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRAISE_ISSET_ID);
  }

  /** Returns true if field praise is set (has been assigned a value) and false otherwise */
  public boolean isSetPraise() {
    return EncodingUtils.testBit(__isset_bitfield, __PRAISE_ISSET_ID);
  }

  public void setPraiseIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRAISE_ISSET_ID, value);
  }

  public int getFreeIb() {
    return this.freeIb;
  }

  public SCUpdateCharPropertyMsg setFreeIb(int freeIb) {
    this.freeIb = freeIb;
    setFreeIbIsSet(true);
    return this;
  }

  public void unsetFreeIb() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FREEIB_ISSET_ID);
  }

  /** Returns true if field freeIb is set (has been assigned a value) and false otherwise */
  public boolean isSetFreeIb() {
    return EncodingUtils.testBit(__isset_bitfield, __FREEIB_ISSET_ID);
  }

  public void setFreeIbIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FREEIB_ISSET_ID, value);
  }

  public int getByteCounterListSize() {
    return (this.byteCounterList == null) ? 0 : this.byteCounterList.size();
  }

  public java.util.Iterator<Byte> getByteCounterListIterator() {
    return (this.byteCounterList == null) ? null : this.byteCounterList.iterator();
  }

  public void addToByteCounterList(byte elem) {
    if (this.byteCounterList == null) {
      this.byteCounterList = new ArrayList<Byte>();
    }
    this.byteCounterList.add(elem);
  }

  public List<Byte> getByteCounterList() {
    return this.byteCounterList;
  }

  public SCUpdateCharPropertyMsg setByteCounterList(List<Byte> byteCounterList) {
    this.byteCounterList = byteCounterList;
    return this;
  }

  public void unsetByteCounterList() {
    this.byteCounterList = null;
  }

  /** Returns true if field byteCounterList is set (has been assigned a value) and false otherwise */
  public boolean isSetByteCounterList() {
    return this.byteCounterList != null;
  }

  public void setByteCounterListIsSet(boolean value) {
    if (!value) {
      this.byteCounterList = null;
    }
  }

  public int getShortCounterListSize() {
    return (this.shortCounterList == null) ? 0 : this.shortCounterList.size();
  }

  public java.util.Iterator<Short> getShortCounterListIterator() {
    return (this.shortCounterList == null) ? null : this.shortCounterList.iterator();
  }

  public void addToShortCounterList(short elem) {
    if (this.shortCounterList == null) {
      this.shortCounterList = new ArrayList<Short>();
    }
    this.shortCounterList.add(elem);
  }

  public List<Short> getShortCounterList() {
    return this.shortCounterList;
  }

  public SCUpdateCharPropertyMsg setShortCounterList(List<Short> shortCounterList) {
    this.shortCounterList = shortCounterList;
    return this;
  }

  public void unsetShortCounterList() {
    this.shortCounterList = null;
  }

  /** Returns true if field shortCounterList is set (has been assigned a value) and false otherwise */
  public boolean isSetShortCounterList() {
    return this.shortCounterList != null;
  }

  public void setShortCounterListIsSet(boolean value) {
    if (!value) {
      this.shortCounterList = null;
    }
  }

  public int getIntCounterListSize() {
    return (this.intCounterList == null) ? 0 : this.intCounterList.size();
  }

  public java.util.Iterator<Integer> getIntCounterListIterator() {
    return (this.intCounterList == null) ? null : this.intCounterList.iterator();
  }

  public void addToIntCounterList(int elem) {
    if (this.intCounterList == null) {
      this.intCounterList = new ArrayList<Integer>();
    }
    this.intCounterList.add(elem);
  }

  public List<Integer> getIntCounterList() {
    return this.intCounterList;
  }

  public SCUpdateCharPropertyMsg setIntCounterList(List<Integer> intCounterList) {
    this.intCounterList = intCounterList;
    return this;
  }

  public void unsetIntCounterList() {
    this.intCounterList = null;
  }

  /** Returns true if field intCounterList is set (has been assigned a value) and false otherwise */
  public boolean isSetIntCounterList() {
    return this.intCounterList != null;
  }

  public void setIntCounterListIsSet(boolean value) {
    if (!value) {
      this.intCounterList = null;
    }
  }

  public int getRechargeIb() {
    return this.rechargeIb;
  }

  public SCUpdateCharPropertyMsg setRechargeIb(int rechargeIb) {
    this.rechargeIb = rechargeIb;
    setRechargeIbIsSet(true);
    return this;
  }

  public void unsetRechargeIb() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECHARGEIB_ISSET_ID);
  }

  /** Returns true if field rechargeIb is set (has been assigned a value) and false otherwise */
  public boolean isSetRechargeIb() {
    return EncodingUtils.testBit(__isset_bitfield, __RECHARGEIB_ISSET_ID);
  }

  public void setRechargeIbIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECHARGEIB_ISSET_ID, value);
  }

  public int getIntDayLoopCounterListSize() {
    return (this.intDayLoopCounterList == null) ? 0 : this.intDayLoopCounterList.size();
  }

  public java.util.Iterator<Integer> getIntDayLoopCounterListIterator() {
    return (this.intDayLoopCounterList == null) ? null : this.intDayLoopCounterList.iterator();
  }

  public void addToIntDayLoopCounterList(int elem) {
    if (this.intDayLoopCounterList == null) {
      this.intDayLoopCounterList = new ArrayList<Integer>();
    }
    this.intDayLoopCounterList.add(elem);
  }

  public List<Integer> getIntDayLoopCounterList() {
    return this.intDayLoopCounterList;
  }

  public SCUpdateCharPropertyMsg setIntDayLoopCounterList(List<Integer> intDayLoopCounterList) {
    this.intDayLoopCounterList = intDayLoopCounterList;
    return this;
  }

  public void unsetIntDayLoopCounterList() {
    this.intDayLoopCounterList = null;
  }

  /** Returns true if field intDayLoopCounterList is set (has been assigned a value) and false otherwise */
  public boolean isSetIntDayLoopCounterList() {
    return this.intDayLoopCounterList != null;
  }

  public void setIntDayLoopCounterListIsSet(boolean value) {
    if (!value) {
      this.intDayLoopCounterList = null;
    }
  }

  public byte[] getFlags() {
    setFlags(org.apache.thrift.TBaseHelper.rightSize(flags));
    return flags == null ? null : flags.array();
  }

  public ByteBuffer bufferForFlags() {
    return flags;
  }

  public SCUpdateCharPropertyMsg setFlags(byte[] flags) {
    setFlags(flags == null ? (ByteBuffer)null : ByteBuffer.wrap(flags));
    return this;
  }

  public SCUpdateCharPropertyMsg setFlags(ByteBuffer flags) {
    this.flags = flags;
    return this;
  }

  public void unsetFlags() {
    this.flags = null;
  }

  /** Returns true if field flags is set (has been assigned a value) and false otherwise */
  public boolean isSetFlags() {
    return this.flags != null;
  }

  public void setFlagsIsSet(boolean value) {
    if (!value) {
      this.flags = null;
    }
  }

  public int getActiveVal() {
    return this.activeVal;
  }

  public SCUpdateCharPropertyMsg setActiveVal(int activeVal) {
    this.activeVal = activeVal;
    setActiveValIsSet(true);
    return this;
  }

  public void unsetActiveVal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIVEVAL_ISSET_ID);
  }

  /** Returns true if field activeVal is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveVal() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTIVEVAL_ISSET_ID);
  }

  public void setActiveValIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIVEVAL_ISSET_ID, value);
  }

  public byte getActiveLevel() {
    return this.activeLevel;
  }

  public SCUpdateCharPropertyMsg setActiveLevel(byte activeLevel) {
    this.activeLevel = activeLevel;
    setActiveLevelIsSet(true);
    return this;
  }

  public void unsetActiveLevel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIVELEVEL_ISSET_ID);
  }

  /** Returns true if field activeLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveLevel() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTIVELEVEL_ISSET_ID);
  }

  public void setActiveLevelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIVELEVEL_ISSET_ID, value);
  }

  public int getShortDayLoopCounterListSize() {
    return (this.shortDayLoopCounterList == null) ? 0 : this.shortDayLoopCounterList.size();
  }

  public java.util.Iterator<Short> getShortDayLoopCounterListIterator() {
    return (this.shortDayLoopCounterList == null) ? null : this.shortDayLoopCounterList.iterator();
  }

  public void addToShortDayLoopCounterList(short elem) {
    if (this.shortDayLoopCounterList == null) {
      this.shortDayLoopCounterList = new ArrayList<Short>();
    }
    this.shortDayLoopCounterList.add(elem);
  }

  public List<Short> getShortDayLoopCounterList() {
    return this.shortDayLoopCounterList;
  }

  public SCUpdateCharPropertyMsg setShortDayLoopCounterList(List<Short> shortDayLoopCounterList) {
    this.shortDayLoopCounterList = shortDayLoopCounterList;
    return this;
  }

  public void unsetShortDayLoopCounterList() {
    this.shortDayLoopCounterList = null;
  }

  /** Returns true if field shortDayLoopCounterList is set (has been assigned a value) and false otherwise */
  public boolean isSetShortDayLoopCounterList() {
    return this.shortDayLoopCounterList != null;
  }

  public void setShortDayLoopCounterListIsSet(boolean value) {
    if (!value) {
      this.shortDayLoopCounterList = null;
    }
  }

  public int getByteDayLoopCounterListSize() {
    return (this.byteDayLoopCounterList == null) ? 0 : this.byteDayLoopCounterList.size();
  }

  public java.util.Iterator<Byte> getByteDayLoopCounterListIterator() {
    return (this.byteDayLoopCounterList == null) ? null : this.byteDayLoopCounterList.iterator();
  }

  public void addToByteDayLoopCounterList(byte elem) {
    if (this.byteDayLoopCounterList == null) {
      this.byteDayLoopCounterList = new ArrayList<Byte>();
    }
    this.byteDayLoopCounterList.add(elem);
  }

  public List<Byte> getByteDayLoopCounterList() {
    return this.byteDayLoopCounterList;
  }

  public SCUpdateCharPropertyMsg setByteDayLoopCounterList(List<Byte> byteDayLoopCounterList) {
    this.byteDayLoopCounterList = byteDayLoopCounterList;
    return this;
  }

  public void unsetByteDayLoopCounterList() {
    this.byteDayLoopCounterList = null;
  }

  /** Returns true if field byteDayLoopCounterList is set (has been assigned a value) and false otherwise */
  public boolean isSetByteDayLoopCounterList() {
    return this.byteDayLoopCounterList != null;
  }

  public void setByteDayLoopCounterListIsSet(boolean value) {
    if (!value) {
      this.byteDayLoopCounterList = null;
    }
  }

  public int getLargesse() {
    return this.largesse;
  }

  public SCUpdateCharPropertyMsg setLargesse(int largesse) {
    this.largesse = largesse;
    setLargesseIsSet(true);
    return this;
  }

  public void unsetLargesse() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LARGESSE_ISSET_ID);
  }

  /** Returns true if field largesse is set (has been assigned a value) and false otherwise */
  public boolean isSetLargesse() {
    return EncodingUtils.testBit(__isset_bitfield, __LARGESSE_ISSET_ID);
  }

  public void setLargesseIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LARGESSE_ISSET_ID, value);
  }

  public int getCharm() {
    return this.charm;
  }

  public SCUpdateCharPropertyMsg setCharm(int charm) {
    this.charm = charm;
    setCharmIsSet(true);
    return this;
  }

  public void unsetCharm() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHARM_ISSET_ID);
  }

  /** Returns true if field charm is set (has been assigned a value) and false otherwise */
  public boolean isSetCharm() {
    return EncodingUtils.testBit(__isset_bitfield, __CHARM_ISSET_ID);
  }

  public void setCharmIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHARM_ISSET_ID, value);
  }

  public byte getVipLevel() {
    return this.vipLevel;
  }

  public SCUpdateCharPropertyMsg setVipLevel(byte vipLevel) {
    this.vipLevel = vipLevel;
    setVipLevelIsSet(true);
    return this;
  }

  public void unsetVipLevel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIPLEVEL_ISSET_ID);
  }

  /** Returns true if field vipLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetVipLevel() {
    return EncodingUtils.testBit(__isset_bitfield, __VIPLEVEL_ISSET_ID);
  }

  public void setVipLevelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIPLEVEL_ISSET_ID, value);
  }

  public int getTotalRecharge() {
    return this.totalRecharge;
  }

  public SCUpdateCharPropertyMsg setTotalRecharge(int totalRecharge) {
    this.totalRecharge = totalRecharge;
    setTotalRechargeIsSet(true);
    return this;
  }

  public void unsetTotalRecharge() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALRECHARGE_ISSET_ID);
  }

  /** Returns true if field totalRecharge is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalRecharge() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALRECHARGE_ISSET_ID);
  }

  public void setTotalRechargeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALRECHARGE_ISSET_ID, value);
  }

  public short getTagId() {
    return this.tagId;
  }

  public SCUpdateCharPropertyMsg setTagId(short tagId) {
    this.tagId = tagId;
    setTagIdIsSet(true);
    return this;
  }

  public void unsetTagId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TAGID_ISSET_ID);
  }

  /** Returns true if field tagId is set (has been assigned a value) and false otherwise */
  public boolean isSetTagId() {
    return EncodingUtils.testBit(__isset_bitfield, __TAGID_ISSET_ID);
  }

  public void setTagIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TAGID_ISSET_ID, value);
  }

  public int getNonPointIb() {
    return this.nonPointIb;
  }

  public SCUpdateCharPropertyMsg setNonPointIb(int nonPointIb) {
    this.nonPointIb = nonPointIb;
    setNonPointIbIsSet(true);
    return this;
  }

  public void unsetNonPointIb() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NONPOINTIB_ISSET_ID);
  }

  /** Returns true if field nonPointIb is set (has been assigned a value) and false otherwise */
  public boolean isSetNonPointIb() {
    return EncodingUtils.testBit(__isset_bitfield, __NONPOINTIB_ISSET_ID);
  }

  public void setNonPointIbIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NONPOINTIB_ISSET_ID, value);
  }

  public String getBindEmail() {
    return this.bindEmail;
  }

  public SCUpdateCharPropertyMsg setBindEmail(String bindEmail) {
    this.bindEmail = bindEmail;
    return this;
  }

  public void unsetBindEmail() {
    this.bindEmail = null;
  }

  /** Returns true if field bindEmail is set (has been assigned a value) and false otherwise */
  public boolean isSetBindEmail() {
    return this.bindEmail != null;
  }

  public void setBindEmailIsSet(boolean value) {
    if (!value) {
      this.bindEmail = null;
    }
  }

  public int getFriendType() {
    return this.friendType;
  }

  public SCUpdateCharPropertyMsg setFriendType(int friendType) {
    this.friendType = friendType;
    setFriendTypeIsSet(true);
    return this;
  }

  public void unsetFriendType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FRIENDTYPE_ISSET_ID);
  }

  /** Returns true if field friendType is set (has been assigned a value) and false otherwise */
  public boolean isSetFriendType() {
    return EncodingUtils.testBit(__isset_bitfield, __FRIENDTYPE_ISSET_ID);
  }

  public void setFriendTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FRIENDTYPE_ISSET_ID, value);
  }

  public int getSkinColor() {
    return this.skinColor;
  }

  public SCUpdateCharPropertyMsg setSkinColor(int skinColor) {
    this.skinColor = skinColor;
    setSkinColorIsSet(true);
    return this;
  }

  public void unsetSkinColor() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SKINCOLOR_ISSET_ID);
  }

  /** Returns true if field skinColor is set (has been assigned a value) and false otherwise */
  public boolean isSetSkinColor() {
    return EncodingUtils.testBit(__isset_bitfield, __SKINCOLOR_ISSET_ID);
  }

  public void setSkinColorIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SKINCOLOR_ISSET_ID, value);
  }

  public int getStarLights() {
    return this.starLights;
  }

  public SCUpdateCharPropertyMsg setStarLights(int starLights) {
    this.starLights = starLights;
    setStarLightsIsSet(true);
    return this;
  }

  public void unsetStarLights() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARLIGHTS_ISSET_ID);
  }

  /** Returns true if field starLights is set (has been assigned a value) and false otherwise */
  public boolean isSetStarLights() {
    return EncodingUtils.testBit(__isset_bitfield, __STARLIGHTS_ISSET_ID);
  }

  public void setStarLightsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARLIGHTS_ISSET_ID, value);
  }

  public short getDailyLeftImproviseCount() {
    return this.dailyLeftImproviseCount;
  }

  public SCUpdateCharPropertyMsg setDailyLeftImproviseCount(short dailyLeftImproviseCount) {
    this.dailyLeftImproviseCount = dailyLeftImproviseCount;
    setDailyLeftImproviseCountIsSet(true);
    return this;
  }

  public void unsetDailyLeftImproviseCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DAILYLEFTIMPROVISECOUNT_ISSET_ID);
  }

  /** Returns true if field dailyLeftImproviseCount is set (has been assigned a value) and false otherwise */
  public boolean isSetDailyLeftImproviseCount() {
    return EncodingUtils.testBit(__isset_bitfield, __DAILYLEFTIMPROVISECOUNT_ISSET_ID);
  }

  public void setDailyLeftImproviseCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DAILYLEFTIMPROVISECOUNT_ISSET_ID, value);
  }

  public int getImproviseCoupon() {
    return this.improviseCoupon;
  }

  public SCUpdateCharPropertyMsg setImproviseCoupon(int improviseCoupon) {
    this.improviseCoupon = improviseCoupon;
    setImproviseCouponIsSet(true);
    return this;
  }

  public void unsetImproviseCoupon() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IMPROVISECOUPON_ISSET_ID);
  }

  /** Returns true if field improviseCoupon is set (has been assigned a value) and false otherwise */
  public boolean isSetImproviseCoupon() {
    return EncodingUtils.testBit(__isset_bitfield, __IMPROVISECOUPON_ISSET_ID);
  }

  public void setImproviseCouponIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IMPROVISECOUPON_ISSET_ID, value);
  }

  public int getStarLightLvlPrizeCoupon() {
    return this.starLightLvlPrizeCoupon;
  }

  public SCUpdateCharPropertyMsg setStarLightLvlPrizeCoupon(int starLightLvlPrizeCoupon) {
    this.starLightLvlPrizeCoupon = starLightLvlPrizeCoupon;
    setStarLightLvlPrizeCouponIsSet(true);
    return this;
  }

  public void unsetStarLightLvlPrizeCoupon() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARLIGHTLVLPRIZECOUPON_ISSET_ID);
  }

  /** Returns true if field starLightLvlPrizeCoupon is set (has been assigned a value) and false otherwise */
  public boolean isSetStarLightLvlPrizeCoupon() {
    return EncodingUtils.testBit(__isset_bitfield, __STARLIGHTLVLPRIZECOUPON_ISSET_ID);
  }

  public void setStarLightLvlPrizeCouponIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARLIGHTLVLPRIZECOUPON_ISSET_ID, value);
  }

  /**
   * 今天增加摸一摸爱心值次数
   */
  public byte getIncTouchLoveTimes() {
    return this.incTouchLoveTimes;
  }

  /**
   * 今天增加摸一摸爱心值次数
   */
  public SCUpdateCharPropertyMsg setIncTouchLoveTimes(byte incTouchLoveTimes) {
    this.incTouchLoveTimes = incTouchLoveTimes;
    setIncTouchLoveTimesIsSet(true);
    return this;
  }

  public void unsetIncTouchLoveTimes() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INCTOUCHLOVETIMES_ISSET_ID);
  }

  /** Returns true if field incTouchLoveTimes is set (has been assigned a value) and false otherwise */
  public boolean isSetIncTouchLoveTimes() {
    return EncodingUtils.testBit(__isset_bitfield, __INCTOUCHLOVETIMES_ISSET_ID);
  }

  public void setIncTouchLoveTimesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INCTOUCHLOVETIMES_ISSET_ID, value);
  }

  /**
   * 当前爱心值
   */
  public int getLoverVal() {
    return this.loverVal;
  }

  /**
   * 当前爱心值
   */
  public SCUpdateCharPropertyMsg setLoverVal(int loverVal) {
    this.loverVal = loverVal;
    setLoverValIsSet(true);
    return this;
  }

  public void unsetLoverVal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOVERVAL_ISSET_ID);
  }

  /** Returns true if field loverVal is set (has been assigned a value) and false otherwise */
  public boolean isSetLoverVal() {
    return EncodingUtils.testBit(__isset_bitfield, __LOVERVAL_ISSET_ID);
  }

  public void setLoverValIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOVERVAL_ISSET_ID, value);
  }

  public int getAnnounceIb() {
    return this.announceIb;
  }

  public SCUpdateCharPropertyMsg setAnnounceIb(int announceIb) {
    this.announceIb = announceIb;
    setAnnounceIbIsSet(true);
    return this;
  }

  public void unsetAnnounceIb() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ANNOUNCEIB_ISSET_ID);
  }

  /** Returns true if field announceIb is set (has been assigned a value) and false otherwise */
  public boolean isSetAnnounceIb() {
    return EncodingUtils.testBit(__isset_bitfield, __ANNOUNCEIB_ISSET_ID);
  }

  public void setAnnounceIbIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ANNOUNCEIB_ISSET_ID, value);
  }

  public int getGuildGold() {
    return this.guildGold;
  }

  public SCUpdateCharPropertyMsg setGuildGold(int guildGold) {
    this.guildGold = guildGold;
    setGuildGoldIsSet(true);
    return this;
  }

  public void unsetGuildGold() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GUILDGOLD_ISSET_ID);
  }

  /** Returns true if field guildGold is set (has been assigned a value) and false otherwise */
  public boolean isSetGuildGold() {
    return EncodingUtils.testBit(__isset_bitfield, __GUILDGOLD_ISSET_ID);
  }

  public void setGuildGoldIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GUILDGOLD_ISSET_ID, value);
  }

  /**
   * 当前时尚值
   */
  public int getFashionVal() {
    return this.fashionVal;
  }

  /**
   * 当前时尚值
   */
  public SCUpdateCharPropertyMsg setFashionVal(int fashionVal) {
    this.fashionVal = fashionVal;
    setFashionValIsSet(true);
    return this;
  }

  public void unsetFashionVal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FASHIONVAL_ISSET_ID);
  }

  /** Returns true if field fashionVal is set (has been assigned a value) and false otherwise */
  public boolean isSetFashionVal() {
    return EncodingUtils.testBit(__isset_bitfield, __FASHIONVAL_ISSET_ID);
  }

  public void setFashionValIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FASHIONVAL_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case IB:
      if (value == null) {
        unsetIb();
      } else {
        setIb((Integer)value);
      }
      break;

    case GOLD:
      if (value == null) {
        unsetGold();
      } else {
        setGold((Integer)value);
      }
      break;

    case POINT:
      if (value == null) {
        unsetPoint();
      } else {
        setPoint((Integer)value);
      }
      break;

    case POPULARITY:
      if (value == null) {
        unsetPopularity();
      } else {
        setPopularity((Long)value);
      }
      break;

    case EXP:
      if (value == null) {
        unsetExp();
      } else {
        setExp((Integer)value);
      }
      break;

    case CUP:
      if (value == null) {
        unsetCup();
      } else {
        setCup((Integer)value);
      }
      break;

    case PRAISE:
      if (value == null) {
        unsetPraise();
      } else {
        setPraise((Integer)value);
      }
      break;

    case FREE_IB:
      if (value == null) {
        unsetFreeIb();
      } else {
        setFreeIb((Integer)value);
      }
      break;

    case BYTE_COUNTER_LIST:
      if (value == null) {
        unsetByteCounterList();
      } else {
        setByteCounterList((List<Byte>)value);
      }
      break;

    case SHORT_COUNTER_LIST:
      if (value == null) {
        unsetShortCounterList();
      } else {
        setShortCounterList((List<Short>)value);
      }
      break;

    case INT_COUNTER_LIST:
      if (value == null) {
        unsetIntCounterList();
      } else {
        setIntCounterList((List<Integer>)value);
      }
      break;

    case RECHARGE_IB:
      if (value == null) {
        unsetRechargeIb();
      } else {
        setRechargeIb((Integer)value);
      }
      break;

    case INT_DAY_LOOP_COUNTER_LIST:
      if (value == null) {
        unsetIntDayLoopCounterList();
      } else {
        setIntDayLoopCounterList((List<Integer>)value);
      }
      break;

    case FLAGS:
      if (value == null) {
        unsetFlags();
      } else {
        setFlags((ByteBuffer)value);
      }
      break;

    case ACTIVE_VAL:
      if (value == null) {
        unsetActiveVal();
      } else {
        setActiveVal((Integer)value);
      }
      break;

    case ACTIVE_LEVEL:
      if (value == null) {
        unsetActiveLevel();
      } else {
        setActiveLevel((Byte)value);
      }
      break;

    case SHORT_DAY_LOOP_COUNTER_LIST:
      if (value == null) {
        unsetShortDayLoopCounterList();
      } else {
        setShortDayLoopCounterList((List<Short>)value);
      }
      break;

    case BYTE_DAY_LOOP_COUNTER_LIST:
      if (value == null) {
        unsetByteDayLoopCounterList();
      } else {
        setByteDayLoopCounterList((List<Byte>)value);
      }
      break;

    case LARGESSE:
      if (value == null) {
        unsetLargesse();
      } else {
        setLargesse((Integer)value);
      }
      break;

    case CHARM:
      if (value == null) {
        unsetCharm();
      } else {
        setCharm((Integer)value);
      }
      break;

    case VIP_LEVEL:
      if (value == null) {
        unsetVipLevel();
      } else {
        setVipLevel((Byte)value);
      }
      break;

    case TOTAL_RECHARGE:
      if (value == null) {
        unsetTotalRecharge();
      } else {
        setTotalRecharge((Integer)value);
      }
      break;

    case TAG_ID:
      if (value == null) {
        unsetTagId();
      } else {
        setTagId((Short)value);
      }
      break;

    case NON_POINT_IB:
      if (value == null) {
        unsetNonPointIb();
      } else {
        setNonPointIb((Integer)value);
      }
      break;

    case BIND_EMAIL:
      if (value == null) {
        unsetBindEmail();
      } else {
        setBindEmail((String)value);
      }
      break;

    case FRIEND_TYPE:
      if (value == null) {
        unsetFriendType();
      } else {
        setFriendType((Integer)value);
      }
      break;

    case SKIN_COLOR:
      if (value == null) {
        unsetSkinColor();
      } else {
        setSkinColor((Integer)value);
      }
      break;

    case STAR_LIGHTS:
      if (value == null) {
        unsetStarLights();
      } else {
        setStarLights((Integer)value);
      }
      break;

    case DAILY_LEFT_IMPROVISE_COUNT:
      if (value == null) {
        unsetDailyLeftImproviseCount();
      } else {
        setDailyLeftImproviseCount((Short)value);
      }
      break;

    case IMPROVISE_COUPON:
      if (value == null) {
        unsetImproviseCoupon();
      } else {
        setImproviseCoupon((Integer)value);
      }
      break;

    case STAR_LIGHT_LVL_PRIZE_COUPON:
      if (value == null) {
        unsetStarLightLvlPrizeCoupon();
      } else {
        setStarLightLvlPrizeCoupon((Integer)value);
      }
      break;

    case INC_TOUCH_LOVE_TIMES:
      if (value == null) {
        unsetIncTouchLoveTimes();
      } else {
        setIncTouchLoveTimes((Byte)value);
      }
      break;

    case LOVER_VAL:
      if (value == null) {
        unsetLoverVal();
      } else {
        setLoverVal((Integer)value);
      }
      break;

    case ANNOUNCE_IB:
      if (value == null) {
        unsetAnnounceIb();
      } else {
        setAnnounceIb((Integer)value);
      }
      break;

    case GUILD_GOLD:
      if (value == null) {
        unsetGuildGold();
      } else {
        setGuildGold((Integer)value);
      }
      break;

    case FASHION_VAL:
      if (value == null) {
        unsetFashionVal();
      } else {
        setFashionVal((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case IB:
      return Integer.valueOf(getIb());

    case GOLD:
      return Integer.valueOf(getGold());

    case POINT:
      return Integer.valueOf(getPoint());

    case POPULARITY:
      return Long.valueOf(getPopularity());

    case EXP:
      return Integer.valueOf(getExp());

    case CUP:
      return Integer.valueOf(getCup());

    case PRAISE:
      return Integer.valueOf(getPraise());

    case FREE_IB:
      return Integer.valueOf(getFreeIb());

    case BYTE_COUNTER_LIST:
      return getByteCounterList();

    case SHORT_COUNTER_LIST:
      return getShortCounterList();

    case INT_COUNTER_LIST:
      return getIntCounterList();

    case RECHARGE_IB:
      return Integer.valueOf(getRechargeIb());

    case INT_DAY_LOOP_COUNTER_LIST:
      return getIntDayLoopCounterList();

    case FLAGS:
      return getFlags();

    case ACTIVE_VAL:
      return Integer.valueOf(getActiveVal());

    case ACTIVE_LEVEL:
      return Byte.valueOf(getActiveLevel());

    case SHORT_DAY_LOOP_COUNTER_LIST:
      return getShortDayLoopCounterList();

    case BYTE_DAY_LOOP_COUNTER_LIST:
      return getByteDayLoopCounterList();

    case LARGESSE:
      return Integer.valueOf(getLargesse());

    case CHARM:
      return Integer.valueOf(getCharm());

    case VIP_LEVEL:
      return Byte.valueOf(getVipLevel());

    case TOTAL_RECHARGE:
      return Integer.valueOf(getTotalRecharge());

    case TAG_ID:
      return Short.valueOf(getTagId());

    case NON_POINT_IB:
      return Integer.valueOf(getNonPointIb());

    case BIND_EMAIL:
      return getBindEmail();

    case FRIEND_TYPE:
      return Integer.valueOf(getFriendType());

    case SKIN_COLOR:
      return Integer.valueOf(getSkinColor());

    case STAR_LIGHTS:
      return Integer.valueOf(getStarLights());

    case DAILY_LEFT_IMPROVISE_COUNT:
      return Short.valueOf(getDailyLeftImproviseCount());

    case IMPROVISE_COUPON:
      return Integer.valueOf(getImproviseCoupon());

    case STAR_LIGHT_LVL_PRIZE_COUPON:
      return Integer.valueOf(getStarLightLvlPrizeCoupon());

    case INC_TOUCH_LOVE_TIMES:
      return Byte.valueOf(getIncTouchLoveTimes());

    case LOVER_VAL:
      return Integer.valueOf(getLoverVal());

    case ANNOUNCE_IB:
      return Integer.valueOf(getAnnounceIb());

    case GUILD_GOLD:
      return Integer.valueOf(getGuildGold());

    case FASHION_VAL:
      return Integer.valueOf(getFashionVal());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case IB:
      return isSetIb();
    case GOLD:
      return isSetGold();
    case POINT:
      return isSetPoint();
    case POPULARITY:
      return isSetPopularity();
    case EXP:
      return isSetExp();
    case CUP:
      return isSetCup();
    case PRAISE:
      return isSetPraise();
    case FREE_IB:
      return isSetFreeIb();
    case BYTE_COUNTER_LIST:
      return isSetByteCounterList();
    case SHORT_COUNTER_LIST:
      return isSetShortCounterList();
    case INT_COUNTER_LIST:
      return isSetIntCounterList();
    case RECHARGE_IB:
      return isSetRechargeIb();
    case INT_DAY_LOOP_COUNTER_LIST:
      return isSetIntDayLoopCounterList();
    case FLAGS:
      return isSetFlags();
    case ACTIVE_VAL:
      return isSetActiveVal();
    case ACTIVE_LEVEL:
      return isSetActiveLevel();
    case SHORT_DAY_LOOP_COUNTER_LIST:
      return isSetShortDayLoopCounterList();
    case BYTE_DAY_LOOP_COUNTER_LIST:
      return isSetByteDayLoopCounterList();
    case LARGESSE:
      return isSetLargesse();
    case CHARM:
      return isSetCharm();
    case VIP_LEVEL:
      return isSetVipLevel();
    case TOTAL_RECHARGE:
      return isSetTotalRecharge();
    case TAG_ID:
      return isSetTagId();
    case NON_POINT_IB:
      return isSetNonPointIb();
    case BIND_EMAIL:
      return isSetBindEmail();
    case FRIEND_TYPE:
      return isSetFriendType();
    case SKIN_COLOR:
      return isSetSkinColor();
    case STAR_LIGHTS:
      return isSetStarLights();
    case DAILY_LEFT_IMPROVISE_COUNT:
      return isSetDailyLeftImproviseCount();
    case IMPROVISE_COUPON:
      return isSetImproviseCoupon();
    case STAR_LIGHT_LVL_PRIZE_COUPON:
      return isSetStarLightLvlPrizeCoupon();
    case INC_TOUCH_LOVE_TIMES:
      return isSetIncTouchLoveTimes();
    case LOVER_VAL:
      return isSetLoverVal();
    case ANNOUNCE_IB:
      return isSetAnnounceIb();
    case GUILD_GOLD:
      return isSetGuildGold();
    case FASHION_VAL:
      return isSetFashionVal();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCUpdateCharPropertyMsg)
      return this.equals((SCUpdateCharPropertyMsg)that);
    return false;
  }

  public boolean equals(SCUpdateCharPropertyMsg that) {
    if (that == null)
      return false;

    boolean this_present_ib = true && this.isSetIb();
    boolean that_present_ib = true && that.isSetIb();
    if (this_present_ib || that_present_ib) {
      if (!(this_present_ib && that_present_ib))
        return false;
      if (this.ib != that.ib)
        return false;
    }

    boolean this_present_gold = true && this.isSetGold();
    boolean that_present_gold = true && that.isSetGold();
    if (this_present_gold || that_present_gold) {
      if (!(this_present_gold && that_present_gold))
        return false;
      if (this.gold != that.gold)
        return false;
    }

    boolean this_present_point = true && this.isSetPoint();
    boolean that_present_point = true && that.isSetPoint();
    if (this_present_point || that_present_point) {
      if (!(this_present_point && that_present_point))
        return false;
      if (this.point != that.point)
        return false;
    }

    boolean this_present_popularity = true && this.isSetPopularity();
    boolean that_present_popularity = true && that.isSetPopularity();
    if (this_present_popularity || that_present_popularity) {
      if (!(this_present_popularity && that_present_popularity))
        return false;
      if (this.popularity != that.popularity)
        return false;
    }

    boolean this_present_exp = true && this.isSetExp();
    boolean that_present_exp = true && that.isSetExp();
    if (this_present_exp || that_present_exp) {
      if (!(this_present_exp && that_present_exp))
        return false;
      if (this.exp != that.exp)
        return false;
    }

    boolean this_present_cup = true && this.isSetCup();
    boolean that_present_cup = true && that.isSetCup();
    if (this_present_cup || that_present_cup) {
      if (!(this_present_cup && that_present_cup))
        return false;
      if (this.cup != that.cup)
        return false;
    }

    boolean this_present_praise = true && this.isSetPraise();
    boolean that_present_praise = true && that.isSetPraise();
    if (this_present_praise || that_present_praise) {
      if (!(this_present_praise && that_present_praise))
        return false;
      if (this.praise != that.praise)
        return false;
    }

    boolean this_present_freeIb = true && this.isSetFreeIb();
    boolean that_present_freeIb = true && that.isSetFreeIb();
    if (this_present_freeIb || that_present_freeIb) {
      if (!(this_present_freeIb && that_present_freeIb))
        return false;
      if (this.freeIb != that.freeIb)
        return false;
    }

    boolean this_present_byteCounterList = true && this.isSetByteCounterList();
    boolean that_present_byteCounterList = true && that.isSetByteCounterList();
    if (this_present_byteCounterList || that_present_byteCounterList) {
      if (!(this_present_byteCounterList && that_present_byteCounterList))
        return false;
      if (!this.byteCounterList.equals(that.byteCounterList))
        return false;
    }

    boolean this_present_shortCounterList = true && this.isSetShortCounterList();
    boolean that_present_shortCounterList = true && that.isSetShortCounterList();
    if (this_present_shortCounterList || that_present_shortCounterList) {
      if (!(this_present_shortCounterList && that_present_shortCounterList))
        return false;
      if (!this.shortCounterList.equals(that.shortCounterList))
        return false;
    }

    boolean this_present_intCounterList = true && this.isSetIntCounterList();
    boolean that_present_intCounterList = true && that.isSetIntCounterList();
    if (this_present_intCounterList || that_present_intCounterList) {
      if (!(this_present_intCounterList && that_present_intCounterList))
        return false;
      if (!this.intCounterList.equals(that.intCounterList))
        return false;
    }

    boolean this_present_rechargeIb = true && this.isSetRechargeIb();
    boolean that_present_rechargeIb = true && that.isSetRechargeIb();
    if (this_present_rechargeIb || that_present_rechargeIb) {
      if (!(this_present_rechargeIb && that_present_rechargeIb))
        return false;
      if (this.rechargeIb != that.rechargeIb)
        return false;
    }

    boolean this_present_intDayLoopCounterList = true && this.isSetIntDayLoopCounterList();
    boolean that_present_intDayLoopCounterList = true && that.isSetIntDayLoopCounterList();
    if (this_present_intDayLoopCounterList || that_present_intDayLoopCounterList) {
      if (!(this_present_intDayLoopCounterList && that_present_intDayLoopCounterList))
        return false;
      if (!this.intDayLoopCounterList.equals(that.intDayLoopCounterList))
        return false;
    }

    boolean this_present_flags = true && this.isSetFlags();
    boolean that_present_flags = true && that.isSetFlags();
    if (this_present_flags || that_present_flags) {
      if (!(this_present_flags && that_present_flags))
        return false;
      if (!this.flags.equals(that.flags))
        return false;
    }

    boolean this_present_activeVal = true && this.isSetActiveVal();
    boolean that_present_activeVal = true && that.isSetActiveVal();
    if (this_present_activeVal || that_present_activeVal) {
      if (!(this_present_activeVal && that_present_activeVal))
        return false;
      if (this.activeVal != that.activeVal)
        return false;
    }

    boolean this_present_activeLevel = true && this.isSetActiveLevel();
    boolean that_present_activeLevel = true && that.isSetActiveLevel();
    if (this_present_activeLevel || that_present_activeLevel) {
      if (!(this_present_activeLevel && that_present_activeLevel))
        return false;
      if (this.activeLevel != that.activeLevel)
        return false;
    }

    boolean this_present_shortDayLoopCounterList = true && this.isSetShortDayLoopCounterList();
    boolean that_present_shortDayLoopCounterList = true && that.isSetShortDayLoopCounterList();
    if (this_present_shortDayLoopCounterList || that_present_shortDayLoopCounterList) {
      if (!(this_present_shortDayLoopCounterList && that_present_shortDayLoopCounterList))
        return false;
      if (!this.shortDayLoopCounterList.equals(that.shortDayLoopCounterList))
        return false;
    }

    boolean this_present_byteDayLoopCounterList = true && this.isSetByteDayLoopCounterList();
    boolean that_present_byteDayLoopCounterList = true && that.isSetByteDayLoopCounterList();
    if (this_present_byteDayLoopCounterList || that_present_byteDayLoopCounterList) {
      if (!(this_present_byteDayLoopCounterList && that_present_byteDayLoopCounterList))
        return false;
      if (!this.byteDayLoopCounterList.equals(that.byteDayLoopCounterList))
        return false;
    }

    boolean this_present_largesse = true && this.isSetLargesse();
    boolean that_present_largesse = true && that.isSetLargesse();
    if (this_present_largesse || that_present_largesse) {
      if (!(this_present_largesse && that_present_largesse))
        return false;
      if (this.largesse != that.largesse)
        return false;
    }

    boolean this_present_charm = true && this.isSetCharm();
    boolean that_present_charm = true && that.isSetCharm();
    if (this_present_charm || that_present_charm) {
      if (!(this_present_charm && that_present_charm))
        return false;
      if (this.charm != that.charm)
        return false;
    }

    boolean this_present_vipLevel = true && this.isSetVipLevel();
    boolean that_present_vipLevel = true && that.isSetVipLevel();
    if (this_present_vipLevel || that_present_vipLevel) {
      if (!(this_present_vipLevel && that_present_vipLevel))
        return false;
      if (this.vipLevel != that.vipLevel)
        return false;
    }

    boolean this_present_totalRecharge = true && this.isSetTotalRecharge();
    boolean that_present_totalRecharge = true && that.isSetTotalRecharge();
    if (this_present_totalRecharge || that_present_totalRecharge) {
      if (!(this_present_totalRecharge && that_present_totalRecharge))
        return false;
      if (this.totalRecharge != that.totalRecharge)
        return false;
    }

    boolean this_present_tagId = true && this.isSetTagId();
    boolean that_present_tagId = true && that.isSetTagId();
    if (this_present_tagId || that_present_tagId) {
      if (!(this_present_tagId && that_present_tagId))
        return false;
      if (this.tagId != that.tagId)
        return false;
    }

    boolean this_present_nonPointIb = true && this.isSetNonPointIb();
    boolean that_present_nonPointIb = true && that.isSetNonPointIb();
    if (this_present_nonPointIb || that_present_nonPointIb) {
      if (!(this_present_nonPointIb && that_present_nonPointIb))
        return false;
      if (this.nonPointIb != that.nonPointIb)
        return false;
    }

    boolean this_present_bindEmail = true && this.isSetBindEmail();
    boolean that_present_bindEmail = true && that.isSetBindEmail();
    if (this_present_bindEmail || that_present_bindEmail) {
      if (!(this_present_bindEmail && that_present_bindEmail))
        return false;
      if (!this.bindEmail.equals(that.bindEmail))
        return false;
    }

    boolean this_present_friendType = true && this.isSetFriendType();
    boolean that_present_friendType = true && that.isSetFriendType();
    if (this_present_friendType || that_present_friendType) {
      if (!(this_present_friendType && that_present_friendType))
        return false;
      if (this.friendType != that.friendType)
        return false;
    }

    boolean this_present_skinColor = true && this.isSetSkinColor();
    boolean that_present_skinColor = true && that.isSetSkinColor();
    if (this_present_skinColor || that_present_skinColor) {
      if (!(this_present_skinColor && that_present_skinColor))
        return false;
      if (this.skinColor != that.skinColor)
        return false;
    }

    boolean this_present_starLights = true && this.isSetStarLights();
    boolean that_present_starLights = true && that.isSetStarLights();
    if (this_present_starLights || that_present_starLights) {
      if (!(this_present_starLights && that_present_starLights))
        return false;
      if (this.starLights != that.starLights)
        return false;
    }

    boolean this_present_dailyLeftImproviseCount = true && this.isSetDailyLeftImproviseCount();
    boolean that_present_dailyLeftImproviseCount = true && that.isSetDailyLeftImproviseCount();
    if (this_present_dailyLeftImproviseCount || that_present_dailyLeftImproviseCount) {
      if (!(this_present_dailyLeftImproviseCount && that_present_dailyLeftImproviseCount))
        return false;
      if (this.dailyLeftImproviseCount != that.dailyLeftImproviseCount)
        return false;
    }

    boolean this_present_improviseCoupon = true && this.isSetImproviseCoupon();
    boolean that_present_improviseCoupon = true && that.isSetImproviseCoupon();
    if (this_present_improviseCoupon || that_present_improviseCoupon) {
      if (!(this_present_improviseCoupon && that_present_improviseCoupon))
        return false;
      if (this.improviseCoupon != that.improviseCoupon)
        return false;
    }

    boolean this_present_starLightLvlPrizeCoupon = true && this.isSetStarLightLvlPrizeCoupon();
    boolean that_present_starLightLvlPrizeCoupon = true && that.isSetStarLightLvlPrizeCoupon();
    if (this_present_starLightLvlPrizeCoupon || that_present_starLightLvlPrizeCoupon) {
      if (!(this_present_starLightLvlPrizeCoupon && that_present_starLightLvlPrizeCoupon))
        return false;
      if (this.starLightLvlPrizeCoupon != that.starLightLvlPrizeCoupon)
        return false;
    }

    boolean this_present_incTouchLoveTimes = true && this.isSetIncTouchLoveTimes();
    boolean that_present_incTouchLoveTimes = true && that.isSetIncTouchLoveTimes();
    if (this_present_incTouchLoveTimes || that_present_incTouchLoveTimes) {
      if (!(this_present_incTouchLoveTimes && that_present_incTouchLoveTimes))
        return false;
      if (this.incTouchLoveTimes != that.incTouchLoveTimes)
        return false;
    }

    boolean this_present_loverVal = true && this.isSetLoverVal();
    boolean that_present_loverVal = true && that.isSetLoverVal();
    if (this_present_loverVal || that_present_loverVal) {
      if (!(this_present_loverVal && that_present_loverVal))
        return false;
      if (this.loverVal != that.loverVal)
        return false;
    }

    boolean this_present_announceIb = true && this.isSetAnnounceIb();
    boolean that_present_announceIb = true && that.isSetAnnounceIb();
    if (this_present_announceIb || that_present_announceIb) {
      if (!(this_present_announceIb && that_present_announceIb))
        return false;
      if (this.announceIb != that.announceIb)
        return false;
    }

    boolean this_present_guildGold = true && this.isSetGuildGold();
    boolean that_present_guildGold = true && that.isSetGuildGold();
    if (this_present_guildGold || that_present_guildGold) {
      if (!(this_present_guildGold && that_present_guildGold))
        return false;
      if (this.guildGold != that.guildGold)
        return false;
    }

    boolean this_present_fashionVal = true && this.isSetFashionVal();
    boolean that_present_fashionVal = true && that.isSetFashionVal();
    if (this_present_fashionVal || that_present_fashionVal) {
      if (!(this_present_fashionVal && that_present_fashionVal))
        return false;
      if (this.fashionVal != that.fashionVal)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCUpdateCharPropertyMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCUpdateCharPropertyMsg typedOther = (SCUpdateCharPropertyMsg)other;

    lastComparison = Boolean.valueOf(isSetIb()).compareTo(typedOther.isSetIb());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIb()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ib, typedOther.ib);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGold()).compareTo(typedOther.isSetGold());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGold()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gold, typedOther.gold);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoint()).compareTo(typedOther.isSetPoint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.point, typedOther.point);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPopularity()).compareTo(typedOther.isSetPopularity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPopularity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.popularity, typedOther.popularity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExp()).compareTo(typedOther.isSetExp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exp, typedOther.exp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCup()).compareTo(typedOther.isSetCup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCup()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cup, typedOther.cup);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPraise()).compareTo(typedOther.isSetPraise());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPraise()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.praise, typedOther.praise);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFreeIb()).compareTo(typedOther.isSetFreeIb());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFreeIb()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.freeIb, typedOther.freeIb);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetByteCounterList()).compareTo(typedOther.isSetByteCounterList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetByteCounterList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.byteCounterList, typedOther.byteCounterList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShortCounterList()).compareTo(typedOther.isSetShortCounterList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShortCounterList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shortCounterList, typedOther.shortCounterList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIntCounterList()).compareTo(typedOther.isSetIntCounterList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntCounterList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intCounterList, typedOther.intCounterList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRechargeIb()).compareTo(typedOther.isSetRechargeIb());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRechargeIb()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rechargeIb, typedOther.rechargeIb);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIntDayLoopCounterList()).compareTo(typedOther.isSetIntDayLoopCounterList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntDayLoopCounterList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intDayLoopCounterList, typedOther.intDayLoopCounterList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlags()).compareTo(typedOther.isSetFlags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flags, typedOther.flags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveVal()).compareTo(typedOther.isSetActiveVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeVal, typedOther.activeVal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveLevel()).compareTo(typedOther.isSetActiveLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeLevel, typedOther.activeLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShortDayLoopCounterList()).compareTo(typedOther.isSetShortDayLoopCounterList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShortDayLoopCounterList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shortDayLoopCounterList, typedOther.shortDayLoopCounterList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetByteDayLoopCounterList()).compareTo(typedOther.isSetByteDayLoopCounterList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetByteDayLoopCounterList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.byteDayLoopCounterList, typedOther.byteDayLoopCounterList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLargesse()).compareTo(typedOther.isSetLargesse());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLargesse()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.largesse, typedOther.largesse);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCharm()).compareTo(typedOther.isSetCharm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCharm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.charm, typedOther.charm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVipLevel()).compareTo(typedOther.isSetVipLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVipLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vipLevel, typedOther.vipLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalRecharge()).compareTo(typedOther.isSetTotalRecharge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalRecharge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalRecharge, typedOther.totalRecharge);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTagId()).compareTo(typedOther.isSetTagId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTagId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagId, typedOther.tagId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNonPointIb()).compareTo(typedOther.isSetNonPointIb());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNonPointIb()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nonPointIb, typedOther.nonPointIb);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBindEmail()).compareTo(typedOther.isSetBindEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBindEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bindEmail, typedOther.bindEmail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFriendType()).compareTo(typedOther.isSetFriendType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFriendType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.friendType, typedOther.friendType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSkinColor()).compareTo(typedOther.isSetSkinColor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSkinColor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.skinColor, typedOther.skinColor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStarLights()).compareTo(typedOther.isSetStarLights());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStarLights()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.starLights, typedOther.starLights);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDailyLeftImproviseCount()).compareTo(typedOther.isSetDailyLeftImproviseCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDailyLeftImproviseCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dailyLeftImproviseCount, typedOther.dailyLeftImproviseCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImproviseCoupon()).compareTo(typedOther.isSetImproviseCoupon());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImproviseCoupon()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.improviseCoupon, typedOther.improviseCoupon);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStarLightLvlPrizeCoupon()).compareTo(typedOther.isSetStarLightLvlPrizeCoupon());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStarLightLvlPrizeCoupon()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.starLightLvlPrizeCoupon, typedOther.starLightLvlPrizeCoupon);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncTouchLoveTimes()).compareTo(typedOther.isSetIncTouchLoveTimes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncTouchLoveTimes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.incTouchLoveTimes, typedOther.incTouchLoveTimes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoverVal()).compareTo(typedOther.isSetLoverVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoverVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loverVal, typedOther.loverVal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAnnounceIb()).compareTo(typedOther.isSetAnnounceIb());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnnounceIb()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.announceIb, typedOther.announceIb);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGuildGold()).compareTo(typedOther.isSetGuildGold());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGuildGold()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.guildGold, typedOther.guildGold);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFashionVal()).compareTo(typedOther.isSetFashionVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFashionVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fashionVal, typedOther.fashionVal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCUpdateCharPropertyMsg(");
    boolean first = true;

    if (isSetIb()) {
      sb.append("ib:");
      sb.append(this.ib);
      first = false;
    }
    if (isSetGold()) {
      if (!first) sb.append(", ");
      sb.append("gold:");
      sb.append(this.gold);
      first = false;
    }
    if (isSetPoint()) {
      if (!first) sb.append(", ");
      sb.append("point:");
      sb.append(this.point);
      first = false;
    }
    if (isSetPopularity()) {
      if (!first) sb.append(", ");
      sb.append("popularity:");
      sb.append(this.popularity);
      first = false;
    }
    if (isSetExp()) {
      if (!first) sb.append(", ");
      sb.append("exp:");
      sb.append(this.exp);
      first = false;
    }
    if (isSetCup()) {
      if (!first) sb.append(", ");
      sb.append("cup:");
      sb.append(this.cup);
      first = false;
    }
    if (isSetPraise()) {
      if (!first) sb.append(", ");
      sb.append("praise:");
      sb.append(this.praise);
      first = false;
    }
    if (isSetFreeIb()) {
      if (!first) sb.append(", ");
      sb.append("freeIb:");
      sb.append(this.freeIb);
      first = false;
    }
    if (isSetByteCounterList()) {
      if (!first) sb.append(", ");
      sb.append("byteCounterList:");
      if (this.byteCounterList == null) {
        sb.append("null");
      } else {
        sb.append(this.byteCounterList);
      }
      first = false;
    }
    if (isSetShortCounterList()) {
      if (!first) sb.append(", ");
      sb.append("shortCounterList:");
      if (this.shortCounterList == null) {
        sb.append("null");
      } else {
        sb.append(this.shortCounterList);
      }
      first = false;
    }
    if (isSetIntCounterList()) {
      if (!first) sb.append(", ");
      sb.append("intCounterList:");
      if (this.intCounterList == null) {
        sb.append("null");
      } else {
        sb.append(this.intCounterList);
      }
      first = false;
    }
    if (isSetRechargeIb()) {
      if (!first) sb.append(", ");
      sb.append("rechargeIb:");
      sb.append(this.rechargeIb);
      first = false;
    }
    if (isSetIntDayLoopCounterList()) {
      if (!first) sb.append(", ");
      sb.append("intDayLoopCounterList:");
      if (this.intDayLoopCounterList == null) {
        sb.append("null");
      } else {
        sb.append(this.intDayLoopCounterList);
      }
      first = false;
    }
    if (isSetFlags()) {
      if (!first) sb.append(", ");
      sb.append("flags:");
      if (this.flags == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.flags, sb);
      }
      first = false;
    }
    if (isSetActiveVal()) {
      if (!first) sb.append(", ");
      sb.append("activeVal:");
      sb.append(this.activeVal);
      first = false;
    }
    if (isSetActiveLevel()) {
      if (!first) sb.append(", ");
      sb.append("activeLevel:");
      sb.append(this.activeLevel);
      first = false;
    }
    if (isSetShortDayLoopCounterList()) {
      if (!first) sb.append(", ");
      sb.append("shortDayLoopCounterList:");
      if (this.shortDayLoopCounterList == null) {
        sb.append("null");
      } else {
        sb.append(this.shortDayLoopCounterList);
      }
      first = false;
    }
    if (isSetByteDayLoopCounterList()) {
      if (!first) sb.append(", ");
      sb.append("byteDayLoopCounterList:");
      if (this.byteDayLoopCounterList == null) {
        sb.append("null");
      } else {
        sb.append(this.byteDayLoopCounterList);
      }
      first = false;
    }
    if (isSetLargesse()) {
      if (!first) sb.append(", ");
      sb.append("largesse:");
      sb.append(this.largesse);
      first = false;
    }
    if (isSetCharm()) {
      if (!first) sb.append(", ");
      sb.append("charm:");
      sb.append(this.charm);
      first = false;
    }
    if (isSetVipLevel()) {
      if (!first) sb.append(", ");
      sb.append("vipLevel:");
      sb.append(this.vipLevel);
      first = false;
    }
    if (isSetTotalRecharge()) {
      if (!first) sb.append(", ");
      sb.append("totalRecharge:");
      sb.append(this.totalRecharge);
      first = false;
    }
    if (isSetTagId()) {
      if (!first) sb.append(", ");
      sb.append("tagId:");
      sb.append(this.tagId);
      first = false;
    }
    if (isSetNonPointIb()) {
      if (!first) sb.append(", ");
      sb.append("nonPointIb:");
      sb.append(this.nonPointIb);
      first = false;
    }
    if (isSetBindEmail()) {
      if (!first) sb.append(", ");
      sb.append("bindEmail:");
      if (this.bindEmail == null) {
        sb.append("null");
      } else {
        sb.append(this.bindEmail);
      }
      first = false;
    }
    if (isSetFriendType()) {
      if (!first) sb.append(", ");
      sb.append("friendType:");
      sb.append(this.friendType);
      first = false;
    }
    if (isSetSkinColor()) {
      if (!first) sb.append(", ");
      sb.append("skinColor:");
      sb.append(this.skinColor);
      first = false;
    }
    if (isSetStarLights()) {
      if (!first) sb.append(", ");
      sb.append("starLights:");
      sb.append(this.starLights);
      first = false;
    }
    if (isSetDailyLeftImproviseCount()) {
      if (!first) sb.append(", ");
      sb.append("dailyLeftImproviseCount:");
      sb.append(this.dailyLeftImproviseCount);
      first = false;
    }
    if (isSetImproviseCoupon()) {
      if (!first) sb.append(", ");
      sb.append("improviseCoupon:");
      sb.append(this.improviseCoupon);
      first = false;
    }
    if (isSetStarLightLvlPrizeCoupon()) {
      if (!first) sb.append(", ");
      sb.append("starLightLvlPrizeCoupon:");
      sb.append(this.starLightLvlPrizeCoupon);
      first = false;
    }
    if (isSetIncTouchLoveTimes()) {
      if (!first) sb.append(", ");
      sb.append("incTouchLoveTimes:");
      sb.append(this.incTouchLoveTimes);
      first = false;
    }
    if (isSetLoverVal()) {
      if (!first) sb.append(", ");
      sb.append("loverVal:");
      sb.append(this.loverVal);
      first = false;
    }
    if (isSetAnnounceIb()) {
      if (!first) sb.append(", ");
      sb.append("announceIb:");
      sb.append(this.announceIb);
      first = false;
    }
    if (isSetGuildGold()) {
      if (!first) sb.append(", ");
      sb.append("guildGold:");
      sb.append(this.guildGold);
      first = false;
    }
    if (isSetFashionVal()) {
      if (!first) sb.append(", ");
      sb.append("fashionVal:");
      sb.append(this.fashionVal);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCUpdateCharPropertyMsgStandardSchemeFactory implements SchemeFactory {
    public SCUpdateCharPropertyMsgStandardScheme getScheme() {
      return new SCUpdateCharPropertyMsgStandardScheme();
    }
  }

  private static class SCUpdateCharPropertyMsgStandardScheme extends StandardScheme<SCUpdateCharPropertyMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCUpdateCharPropertyMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // IB
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ib = iprot.readI32();
              struct.setIbIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GOLD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.gold = iprot.readI32();
              struct.setGoldIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // POINT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.point = iprot.readI32();
              struct.setPointIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // POPULARITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.popularity = iprot.readI64();
              struct.setPopularityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EXP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.exp = iprot.readI32();
              struct.setExpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CUP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cup = iprot.readI32();
              struct.setCupIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PRAISE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.praise = iprot.readI32();
              struct.setPraiseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FREE_IB
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.freeIb = iprot.readI32();
              struct.setFreeIbIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // BYTE_COUNTER_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.byteCounterList = new ArrayList<Byte>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  byte _elem2; // required
                  _elem2 = iprot.readByte();
                  struct.byteCounterList.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setByteCounterListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SHORT_COUNTER_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.shortCounterList = new ArrayList<Short>(_list3.size);
                for (int _i4 = 0; _i4 < _list3.size; ++_i4)
                {
                  short _elem5; // required
                  _elem5 = iprot.readI16();
                  struct.shortCounterList.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setShortCounterListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // INT_COUNTER_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.intCounterList = new ArrayList<Integer>(_list6.size);
                for (int _i7 = 0; _i7 < _list6.size; ++_i7)
                {
                  int _elem8; // required
                  _elem8 = iprot.readI32();
                  struct.intCounterList.add(_elem8);
                }
                iprot.readListEnd();
              }
              struct.setIntCounterListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // RECHARGE_IB
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rechargeIb = iprot.readI32();
              struct.setRechargeIbIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // INT_DAY_LOOP_COUNTER_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list9 = iprot.readListBegin();
                struct.intDayLoopCounterList = new ArrayList<Integer>(_list9.size);
                for (int _i10 = 0; _i10 < _list9.size; ++_i10)
                {
                  int _elem11; // required
                  _elem11 = iprot.readI32();
                  struct.intDayLoopCounterList.add(_elem11);
                }
                iprot.readListEnd();
              }
              struct.setIntDayLoopCounterListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // FLAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.flags = iprot.readBinary();
              struct.setFlagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // ACTIVE_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.activeVal = iprot.readI32();
              struct.setActiveValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // ACTIVE_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.activeLevel = iprot.readByte();
              struct.setActiveLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // SHORT_DAY_LOOP_COUNTER_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
                struct.shortDayLoopCounterList = new ArrayList<Short>(_list12.size);
                for (int _i13 = 0; _i13 < _list12.size; ++_i13)
                {
                  short _elem14; // required
                  _elem14 = iprot.readI16();
                  struct.shortDayLoopCounterList.add(_elem14);
                }
                iprot.readListEnd();
              }
              struct.setShortDayLoopCounterListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // BYTE_DAY_LOOP_COUNTER_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list15 = iprot.readListBegin();
                struct.byteDayLoopCounterList = new ArrayList<Byte>(_list15.size);
                for (int _i16 = 0; _i16 < _list15.size; ++_i16)
                {
                  byte _elem17; // required
                  _elem17 = iprot.readByte();
                  struct.byteDayLoopCounterList.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setByteDayLoopCounterListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // LARGESSE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.largesse = iprot.readI32();
              struct.setLargesseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // CHARM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.charm = iprot.readI32();
              struct.setCharmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // VIP_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.vipLevel = iprot.readByte();
              struct.setVipLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // TOTAL_RECHARGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalRecharge = iprot.readI32();
              struct.setTotalRechargeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // TAG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.tagId = iprot.readI16();
              struct.setTagIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // NON_POINT_IB
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.nonPointIb = iprot.readI32();
              struct.setNonPointIbIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // BIND_EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bindEmail = iprot.readString();
              struct.setBindEmailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // FRIEND_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.friendType = iprot.readI32();
              struct.setFriendTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // SKIN_COLOR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.skinColor = iprot.readI32();
              struct.setSkinColorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // STAR_LIGHTS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.starLights = iprot.readI32();
              struct.setStarLightsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // DAILY_LEFT_IMPROVISE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.dailyLeftImproviseCount = iprot.readI16();
              struct.setDailyLeftImproviseCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // IMPROVISE_COUPON
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.improviseCoupon = iprot.readI32();
              struct.setImproviseCouponIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // STAR_LIGHT_LVL_PRIZE_COUPON
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.starLightLvlPrizeCoupon = iprot.readI32();
              struct.setStarLightLvlPrizeCouponIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // INC_TOUCH_LOVE_TIMES
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.incTouchLoveTimes = iprot.readByte();
              struct.setIncTouchLoveTimesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // LOVER_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loverVal = iprot.readI32();
              struct.setLoverValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // ANNOUNCE_IB
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.announceIb = iprot.readI32();
              struct.setAnnounceIbIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // GUILD_GOLD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.guildGold = iprot.readI32();
              struct.setGuildGoldIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // FASHION_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fashionVal = iprot.readI32();
              struct.setFashionValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCUpdateCharPropertyMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetIb()) {
        oprot.writeFieldBegin(IB_FIELD_DESC);
        oprot.writeI32(struct.ib);
        oprot.writeFieldEnd();
      }
      if (struct.isSetGold()) {
        oprot.writeFieldBegin(GOLD_FIELD_DESC);
        oprot.writeI32(struct.gold);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPoint()) {
        oprot.writeFieldBegin(POINT_FIELD_DESC);
        oprot.writeI32(struct.point);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPopularity()) {
        oprot.writeFieldBegin(POPULARITY_FIELD_DESC);
        oprot.writeI64(struct.popularity);
        oprot.writeFieldEnd();
      }
      if (struct.isSetExp()) {
        oprot.writeFieldBegin(EXP_FIELD_DESC);
        oprot.writeI32(struct.exp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCup()) {
        oprot.writeFieldBegin(CUP_FIELD_DESC);
        oprot.writeI32(struct.cup);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPraise()) {
        oprot.writeFieldBegin(PRAISE_FIELD_DESC);
        oprot.writeI32(struct.praise);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFreeIb()) {
        oprot.writeFieldBegin(FREE_IB_FIELD_DESC);
        oprot.writeI32(struct.freeIb);
        oprot.writeFieldEnd();
      }
      if (struct.byteCounterList != null) {
        if (struct.isSetByteCounterList()) {
          oprot.writeFieldBegin(BYTE_COUNTER_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BYTE, struct.byteCounterList.size()));
            for (byte _iter18 : struct.byteCounterList)
            {
              oprot.writeByte(_iter18);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.shortCounterList != null) {
        if (struct.isSetShortCounterList()) {
          oprot.writeFieldBegin(SHORT_COUNTER_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, struct.shortCounterList.size()));
            for (short _iter19 : struct.shortCounterList)
            {
              oprot.writeI16(_iter19);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.intCounterList != null) {
        if (struct.isSetIntCounterList()) {
          oprot.writeFieldBegin(INT_COUNTER_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.intCounterList.size()));
            for (int _iter20 : struct.intCounterList)
            {
              oprot.writeI32(_iter20);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRechargeIb()) {
        oprot.writeFieldBegin(RECHARGE_IB_FIELD_DESC);
        oprot.writeI32(struct.rechargeIb);
        oprot.writeFieldEnd();
      }
      if (struct.intDayLoopCounterList != null) {
        if (struct.isSetIntDayLoopCounterList()) {
          oprot.writeFieldBegin(INT_DAY_LOOP_COUNTER_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.intDayLoopCounterList.size()));
            for (int _iter21 : struct.intDayLoopCounterList)
            {
              oprot.writeI32(_iter21);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.flags != null) {
        if (struct.isSetFlags()) {
          oprot.writeFieldBegin(FLAGS_FIELD_DESC);
          oprot.writeBinary(struct.flags);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetActiveVal()) {
        oprot.writeFieldBegin(ACTIVE_VAL_FIELD_DESC);
        oprot.writeI32(struct.activeVal);
        oprot.writeFieldEnd();
      }
      if (struct.isSetActiveLevel()) {
        oprot.writeFieldBegin(ACTIVE_LEVEL_FIELD_DESC);
        oprot.writeByte(struct.activeLevel);
        oprot.writeFieldEnd();
      }
      if (struct.shortDayLoopCounterList != null) {
        if (struct.isSetShortDayLoopCounterList()) {
          oprot.writeFieldBegin(SHORT_DAY_LOOP_COUNTER_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, struct.shortDayLoopCounterList.size()));
            for (short _iter22 : struct.shortDayLoopCounterList)
            {
              oprot.writeI16(_iter22);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.byteDayLoopCounterList != null) {
        if (struct.isSetByteDayLoopCounterList()) {
          oprot.writeFieldBegin(BYTE_DAY_LOOP_COUNTER_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BYTE, struct.byteDayLoopCounterList.size()));
            for (byte _iter23 : struct.byteDayLoopCounterList)
            {
              oprot.writeByte(_iter23);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLargesse()) {
        oprot.writeFieldBegin(LARGESSE_FIELD_DESC);
        oprot.writeI32(struct.largesse);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCharm()) {
        oprot.writeFieldBegin(CHARM_FIELD_DESC);
        oprot.writeI32(struct.charm);
        oprot.writeFieldEnd();
      }
      if (struct.isSetVipLevel()) {
        oprot.writeFieldBegin(VIP_LEVEL_FIELD_DESC);
        oprot.writeByte(struct.vipLevel);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTotalRecharge()) {
        oprot.writeFieldBegin(TOTAL_RECHARGE_FIELD_DESC);
        oprot.writeI32(struct.totalRecharge);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTagId()) {
        oprot.writeFieldBegin(TAG_ID_FIELD_DESC);
        oprot.writeI16(struct.tagId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNonPointIb()) {
        oprot.writeFieldBegin(NON_POINT_IB_FIELD_DESC);
        oprot.writeI32(struct.nonPointIb);
        oprot.writeFieldEnd();
      }
      if (struct.bindEmail != null) {
        if (struct.isSetBindEmail()) {
          oprot.writeFieldBegin(BIND_EMAIL_FIELD_DESC);
          oprot.writeString(struct.bindEmail);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetFriendType()) {
        oprot.writeFieldBegin(FRIEND_TYPE_FIELD_DESC);
        oprot.writeI32(struct.friendType);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSkinColor()) {
        oprot.writeFieldBegin(SKIN_COLOR_FIELD_DESC);
        oprot.writeI32(struct.skinColor);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStarLights()) {
        oprot.writeFieldBegin(STAR_LIGHTS_FIELD_DESC);
        oprot.writeI32(struct.starLights);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDailyLeftImproviseCount()) {
        oprot.writeFieldBegin(DAILY_LEFT_IMPROVISE_COUNT_FIELD_DESC);
        oprot.writeI16(struct.dailyLeftImproviseCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetImproviseCoupon()) {
        oprot.writeFieldBegin(IMPROVISE_COUPON_FIELD_DESC);
        oprot.writeI32(struct.improviseCoupon);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStarLightLvlPrizeCoupon()) {
        oprot.writeFieldBegin(STAR_LIGHT_LVL_PRIZE_COUPON_FIELD_DESC);
        oprot.writeI32(struct.starLightLvlPrizeCoupon);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIncTouchLoveTimes()) {
        oprot.writeFieldBegin(INC_TOUCH_LOVE_TIMES_FIELD_DESC);
        oprot.writeByte(struct.incTouchLoveTimes);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLoverVal()) {
        oprot.writeFieldBegin(LOVER_VAL_FIELD_DESC);
        oprot.writeI32(struct.loverVal);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAnnounceIb()) {
        oprot.writeFieldBegin(ANNOUNCE_IB_FIELD_DESC);
        oprot.writeI32(struct.announceIb);
        oprot.writeFieldEnd();
      }
      if (struct.isSetGuildGold()) {
        oprot.writeFieldBegin(GUILD_GOLD_FIELD_DESC);
        oprot.writeI32(struct.guildGold);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFashionVal()) {
        oprot.writeFieldBegin(FASHION_VAL_FIELD_DESC);
        oprot.writeI32(struct.fashionVal);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCUpdateCharPropertyMsgTupleSchemeFactory implements SchemeFactory {
    public SCUpdateCharPropertyMsgTupleScheme getScheme() {
      return new SCUpdateCharPropertyMsgTupleScheme();
    }
  }

  private static class SCUpdateCharPropertyMsgTupleScheme extends TupleScheme<SCUpdateCharPropertyMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCUpdateCharPropertyMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetIb()) {
        optionals.set(0);
      }
      if (struct.isSetGold()) {
        optionals.set(1);
      }
      if (struct.isSetPoint()) {
        optionals.set(2);
      }
      if (struct.isSetPopularity()) {
        optionals.set(3);
      }
      if (struct.isSetExp()) {
        optionals.set(4);
      }
      if (struct.isSetCup()) {
        optionals.set(5);
      }
      if (struct.isSetPraise()) {
        optionals.set(6);
      }
      if (struct.isSetFreeIb()) {
        optionals.set(7);
      }
      if (struct.isSetByteCounterList()) {
        optionals.set(8);
      }
      if (struct.isSetShortCounterList()) {
        optionals.set(9);
      }
      if (struct.isSetIntCounterList()) {
        optionals.set(10);
      }
      if (struct.isSetRechargeIb()) {
        optionals.set(11);
      }
      if (struct.isSetIntDayLoopCounterList()) {
        optionals.set(12);
      }
      if (struct.isSetFlags()) {
        optionals.set(13);
      }
      if (struct.isSetActiveVal()) {
        optionals.set(14);
      }
      if (struct.isSetActiveLevel()) {
        optionals.set(15);
      }
      if (struct.isSetShortDayLoopCounterList()) {
        optionals.set(16);
      }
      if (struct.isSetByteDayLoopCounterList()) {
        optionals.set(17);
      }
      if (struct.isSetLargesse()) {
        optionals.set(18);
      }
      if (struct.isSetCharm()) {
        optionals.set(19);
      }
      if (struct.isSetVipLevel()) {
        optionals.set(20);
      }
      if (struct.isSetTotalRecharge()) {
        optionals.set(21);
      }
      if (struct.isSetTagId()) {
        optionals.set(22);
      }
      if (struct.isSetNonPointIb()) {
        optionals.set(23);
      }
      if (struct.isSetBindEmail()) {
        optionals.set(24);
      }
      if (struct.isSetFriendType()) {
        optionals.set(25);
      }
      if (struct.isSetSkinColor()) {
        optionals.set(26);
      }
      if (struct.isSetStarLights()) {
        optionals.set(27);
      }
      if (struct.isSetDailyLeftImproviseCount()) {
        optionals.set(28);
      }
      if (struct.isSetImproviseCoupon()) {
        optionals.set(29);
      }
      if (struct.isSetStarLightLvlPrizeCoupon()) {
        optionals.set(30);
      }
      if (struct.isSetIncTouchLoveTimes()) {
        optionals.set(31);
      }
      if (struct.isSetLoverVal()) {
        optionals.set(32);
      }
      if (struct.isSetAnnounceIb()) {
        optionals.set(33);
      }
      if (struct.isSetGuildGold()) {
        optionals.set(34);
      }
      if (struct.isSetFashionVal()) {
        optionals.set(35);
      }
      oprot.writeBitSet(optionals, 36);
      if (struct.isSetIb()) {
        oprot.writeI32(struct.ib);
      }
      if (struct.isSetGold()) {
        oprot.writeI32(struct.gold);
      }
      if (struct.isSetPoint()) {
        oprot.writeI32(struct.point);
      }
      if (struct.isSetPopularity()) {
        oprot.writeI64(struct.popularity);
      }
      if (struct.isSetExp()) {
        oprot.writeI32(struct.exp);
      }
      if (struct.isSetCup()) {
        oprot.writeI32(struct.cup);
      }
      if (struct.isSetPraise()) {
        oprot.writeI32(struct.praise);
      }
      if (struct.isSetFreeIb()) {
        oprot.writeI32(struct.freeIb);
      }
      if (struct.isSetByteCounterList()) {
        {
          oprot.writeI32(struct.byteCounterList.size());
          for (byte _iter24 : struct.byteCounterList)
          {
            oprot.writeByte(_iter24);
          }
        }
      }
      if (struct.isSetShortCounterList()) {
        {
          oprot.writeI32(struct.shortCounterList.size());
          for (short _iter25 : struct.shortCounterList)
          {
            oprot.writeI16(_iter25);
          }
        }
      }
      if (struct.isSetIntCounterList()) {
        {
          oprot.writeI32(struct.intCounterList.size());
          for (int _iter26 : struct.intCounterList)
          {
            oprot.writeI32(_iter26);
          }
        }
      }
      if (struct.isSetRechargeIb()) {
        oprot.writeI32(struct.rechargeIb);
      }
      if (struct.isSetIntDayLoopCounterList()) {
        {
          oprot.writeI32(struct.intDayLoopCounterList.size());
          for (int _iter27 : struct.intDayLoopCounterList)
          {
            oprot.writeI32(_iter27);
          }
        }
      }
      if (struct.isSetFlags()) {
        oprot.writeBinary(struct.flags);
      }
      if (struct.isSetActiveVal()) {
        oprot.writeI32(struct.activeVal);
      }
      if (struct.isSetActiveLevel()) {
        oprot.writeByte(struct.activeLevel);
      }
      if (struct.isSetShortDayLoopCounterList()) {
        {
          oprot.writeI32(struct.shortDayLoopCounterList.size());
          for (short _iter28 : struct.shortDayLoopCounterList)
          {
            oprot.writeI16(_iter28);
          }
        }
      }
      if (struct.isSetByteDayLoopCounterList()) {
        {
          oprot.writeI32(struct.byteDayLoopCounterList.size());
          for (byte _iter29 : struct.byteDayLoopCounterList)
          {
            oprot.writeByte(_iter29);
          }
        }
      }
      if (struct.isSetLargesse()) {
        oprot.writeI32(struct.largesse);
      }
      if (struct.isSetCharm()) {
        oprot.writeI32(struct.charm);
      }
      if (struct.isSetVipLevel()) {
        oprot.writeByte(struct.vipLevel);
      }
      if (struct.isSetTotalRecharge()) {
        oprot.writeI32(struct.totalRecharge);
      }
      if (struct.isSetTagId()) {
        oprot.writeI16(struct.tagId);
      }
      if (struct.isSetNonPointIb()) {
        oprot.writeI32(struct.nonPointIb);
      }
      if (struct.isSetBindEmail()) {
        oprot.writeString(struct.bindEmail);
      }
      if (struct.isSetFriendType()) {
        oprot.writeI32(struct.friendType);
      }
      if (struct.isSetSkinColor()) {
        oprot.writeI32(struct.skinColor);
      }
      if (struct.isSetStarLights()) {
        oprot.writeI32(struct.starLights);
      }
      if (struct.isSetDailyLeftImproviseCount()) {
        oprot.writeI16(struct.dailyLeftImproviseCount);
      }
      if (struct.isSetImproviseCoupon()) {
        oprot.writeI32(struct.improviseCoupon);
      }
      if (struct.isSetStarLightLvlPrizeCoupon()) {
        oprot.writeI32(struct.starLightLvlPrizeCoupon);
      }
      if (struct.isSetIncTouchLoveTimes()) {
        oprot.writeByte(struct.incTouchLoveTimes);
      }
      if (struct.isSetLoverVal()) {
        oprot.writeI32(struct.loverVal);
      }
      if (struct.isSetAnnounceIb()) {
        oprot.writeI32(struct.announceIb);
      }
      if (struct.isSetGuildGold()) {
        oprot.writeI32(struct.guildGold);
      }
      if (struct.isSetFashionVal()) {
        oprot.writeI32(struct.fashionVal);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCUpdateCharPropertyMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(36);
      if (incoming.get(0)) {
        struct.ib = iprot.readI32();
        struct.setIbIsSet(true);
      }
      if (incoming.get(1)) {
        struct.gold = iprot.readI32();
        struct.setGoldIsSet(true);
      }
      if (incoming.get(2)) {
        struct.point = iprot.readI32();
        struct.setPointIsSet(true);
      }
      if (incoming.get(3)) {
        struct.popularity = iprot.readI64();
        struct.setPopularityIsSet(true);
      }
      if (incoming.get(4)) {
        struct.exp = iprot.readI32();
        struct.setExpIsSet(true);
      }
      if (incoming.get(5)) {
        struct.cup = iprot.readI32();
        struct.setCupIsSet(true);
      }
      if (incoming.get(6)) {
        struct.praise = iprot.readI32();
        struct.setPraiseIsSet(true);
      }
      if (incoming.get(7)) {
        struct.freeIb = iprot.readI32();
        struct.setFreeIbIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list30 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BYTE, iprot.readI32());
          struct.byteCounterList = new ArrayList<Byte>(_list30.size);
          for (int _i31 = 0; _i31 < _list30.size; ++_i31)
          {
            byte _elem32; // required
            _elem32 = iprot.readByte();
            struct.byteCounterList.add(_elem32);
          }
        }
        struct.setByteCounterListIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list33 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, iprot.readI32());
          struct.shortCounterList = new ArrayList<Short>(_list33.size);
          for (int _i34 = 0; _i34 < _list33.size; ++_i34)
          {
            short _elem35; // required
            _elem35 = iprot.readI16();
            struct.shortCounterList.add(_elem35);
          }
        }
        struct.setShortCounterListIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list36 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.intCounterList = new ArrayList<Integer>(_list36.size);
          for (int _i37 = 0; _i37 < _list36.size; ++_i37)
          {
            int _elem38; // required
            _elem38 = iprot.readI32();
            struct.intCounterList.add(_elem38);
          }
        }
        struct.setIntCounterListIsSet(true);
      }
      if (incoming.get(11)) {
        struct.rechargeIb = iprot.readI32();
        struct.setRechargeIbIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list39 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.intDayLoopCounterList = new ArrayList<Integer>(_list39.size);
          for (int _i40 = 0; _i40 < _list39.size; ++_i40)
          {
            int _elem41; // required
            _elem41 = iprot.readI32();
            struct.intDayLoopCounterList.add(_elem41);
          }
        }
        struct.setIntDayLoopCounterListIsSet(true);
      }
      if (incoming.get(13)) {
        struct.flags = iprot.readBinary();
        struct.setFlagsIsSet(true);
      }
      if (incoming.get(14)) {
        struct.activeVal = iprot.readI32();
        struct.setActiveValIsSet(true);
      }
      if (incoming.get(15)) {
        struct.activeLevel = iprot.readByte();
        struct.setActiveLevelIsSet(true);
      }
      if (incoming.get(16)) {
        {
          org.apache.thrift.protocol.TList _list42 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, iprot.readI32());
          struct.shortDayLoopCounterList = new ArrayList<Short>(_list42.size);
          for (int _i43 = 0; _i43 < _list42.size; ++_i43)
          {
            short _elem44; // required
            _elem44 = iprot.readI16();
            struct.shortDayLoopCounterList.add(_elem44);
          }
        }
        struct.setShortDayLoopCounterListIsSet(true);
      }
      if (incoming.get(17)) {
        {
          org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BYTE, iprot.readI32());
          struct.byteDayLoopCounterList = new ArrayList<Byte>(_list45.size);
          for (int _i46 = 0; _i46 < _list45.size; ++_i46)
          {
            byte _elem47; // required
            _elem47 = iprot.readByte();
            struct.byteDayLoopCounterList.add(_elem47);
          }
        }
        struct.setByteDayLoopCounterListIsSet(true);
      }
      if (incoming.get(18)) {
        struct.largesse = iprot.readI32();
        struct.setLargesseIsSet(true);
      }
      if (incoming.get(19)) {
        struct.charm = iprot.readI32();
        struct.setCharmIsSet(true);
      }
      if (incoming.get(20)) {
        struct.vipLevel = iprot.readByte();
        struct.setVipLevelIsSet(true);
      }
      if (incoming.get(21)) {
        struct.totalRecharge = iprot.readI32();
        struct.setTotalRechargeIsSet(true);
      }
      if (incoming.get(22)) {
        struct.tagId = iprot.readI16();
        struct.setTagIdIsSet(true);
      }
      if (incoming.get(23)) {
        struct.nonPointIb = iprot.readI32();
        struct.setNonPointIbIsSet(true);
      }
      if (incoming.get(24)) {
        struct.bindEmail = iprot.readString();
        struct.setBindEmailIsSet(true);
      }
      if (incoming.get(25)) {
        struct.friendType = iprot.readI32();
        struct.setFriendTypeIsSet(true);
      }
      if (incoming.get(26)) {
        struct.skinColor = iprot.readI32();
        struct.setSkinColorIsSet(true);
      }
      if (incoming.get(27)) {
        struct.starLights = iprot.readI32();
        struct.setStarLightsIsSet(true);
      }
      if (incoming.get(28)) {
        struct.dailyLeftImproviseCount = iprot.readI16();
        struct.setDailyLeftImproviseCountIsSet(true);
      }
      if (incoming.get(29)) {
        struct.improviseCoupon = iprot.readI32();
        struct.setImproviseCouponIsSet(true);
      }
      if (incoming.get(30)) {
        struct.starLightLvlPrizeCoupon = iprot.readI32();
        struct.setStarLightLvlPrizeCouponIsSet(true);
      }
      if (incoming.get(31)) {
        struct.incTouchLoveTimes = iprot.readByte();
        struct.setIncTouchLoveTimesIsSet(true);
      }
      if (incoming.get(32)) {
        struct.loverVal = iprot.readI32();
        struct.setLoverValIsSet(true);
      }
      if (incoming.get(33)) {
        struct.announceIb = iprot.readI32();
        struct.setAnnounceIbIsSet(true);
      }
      if (incoming.get(34)) {
        struct.guildGold = iprot.readI32();
        struct.setGuildGoldIsSet(true);
      }
      if (incoming.get(35)) {
        struct.fashionVal = iprot.readI32();
        struct.setFashionValIsSet(true);
      }
    }
  }

}

