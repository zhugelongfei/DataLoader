/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 充值记录
 */
public class SCRechargeResultMsg implements org.apache.thrift.TBase<SCRechargeResultMsg, SCRechargeResultMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCRechargeResultMsg");

  private static final org.apache.thrift.protocol.TField TRANSCATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("transcationId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField PRICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("priceId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("price", org.apache.thrift.protocol.TType.DOUBLE, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCRechargeResultMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCRechargeResultMsgTupleSchemeFactory());
  }

  /**
   * 充值订单号
   */
  public String transcationId; // required
  /**
   * 订单状态 1-succ 0-fail
   */
  public byte state; // required
  /**
   * 价格档位
   */
  public int priceId; // required
  /**
   * 交易结束时间
   */
  public long time; // required
  /**
   * 价格
   */
  public double price; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 充值订单号
     */
    TRANSCATION_ID((short)1, "transcationId"),
    /**
     * 订单状态 1-succ 0-fail
     */
    STATE((short)2, "state"),
    /**
     * 价格档位
     */
    PRICE_ID((short)3, "priceId"),
    /**
     * 交易结束时间
     */
    TIME((short)4, "time"),
    /**
     * 价格
     */
    PRICE((short)5, "price");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TRANSCATION_ID
          return TRANSCATION_ID;
        case 2: // STATE
          return STATE;
        case 3: // PRICE_ID
          return PRICE_ID;
        case 4: // TIME
          return TIME;
        case 5: // PRICE
          return PRICE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STATE_ISSET_ID = 0;
  private static final int __PRICEID_ISSET_ID = 1;
  private static final int __TIME_ISSET_ID = 2;
  private static final int __PRICE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TRANSCATION_ID, new org.apache.thrift.meta_data.FieldMetaData("transcationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.PRICE_ID, new org.apache.thrift.meta_data.FieldMetaData("priceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PRICE, new org.apache.thrift.meta_data.FieldMetaData("price", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCRechargeResultMsg.class, metaDataMap);
  }

  public SCRechargeResultMsg() {
  }

  public SCRechargeResultMsg(
    String transcationId,
    byte state,
    int priceId,
    long time,
    double price)
  {
    this();
    this.transcationId = transcationId;
    this.state = state;
    setStateIsSet(true);
    this.priceId = priceId;
    setPriceIdIsSet(true);
    this.time = time;
    setTimeIsSet(true);
    this.price = price;
    setPriceIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCRechargeResultMsg(SCRechargeResultMsg other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTranscationId()) {
      this.transcationId = other.transcationId;
    }
    this.state = other.state;
    this.priceId = other.priceId;
    this.time = other.time;
    this.price = other.price;
  }

  public SCRechargeResultMsg deepCopy() {
    return new SCRechargeResultMsg(this);
  }

  @Override
  public void clear() {
    this.transcationId = null;
    setStateIsSet(false);
    this.state = 0;
    setPriceIdIsSet(false);
    this.priceId = 0;
    setTimeIsSet(false);
    this.time = 0;
    setPriceIsSet(false);
    this.price = 0.0;
  }

  /**
   * 充值订单号
   */
  public String getTranscationId() {
    return this.transcationId;
  }

  /**
   * 充值订单号
   */
  public SCRechargeResultMsg setTranscationId(String transcationId) {
    this.transcationId = transcationId;
    return this;
  }

  public void unsetTranscationId() {
    this.transcationId = null;
  }

  /** Returns true if field transcationId is set (has been assigned a value) and false otherwise */
  public boolean isSetTranscationId() {
    return this.transcationId != null;
  }

  public void setTranscationIdIsSet(boolean value) {
    if (!value) {
      this.transcationId = null;
    }
  }

  /**
   * 订单状态 1-succ 0-fail
   */
  public byte getState() {
    return this.state;
  }

  /**
   * 订单状态 1-succ 0-fail
   */
  public SCRechargeResultMsg setState(byte state) {
    this.state = state;
    setStateIsSet(true);
    return this;
  }

  public void unsetState() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATE_ISSET_ID);
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return EncodingUtils.testBit(__isset_bitfield, __STATE_ISSET_ID);
  }

  public void setStateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATE_ISSET_ID, value);
  }

  /**
   * 价格档位
   */
  public int getPriceId() {
    return this.priceId;
  }

  /**
   * 价格档位
   */
  public SCRechargeResultMsg setPriceId(int priceId) {
    this.priceId = priceId;
    setPriceIdIsSet(true);
    return this;
  }

  public void unsetPriceId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRICEID_ISSET_ID);
  }

  /** Returns true if field priceId is set (has been assigned a value) and false otherwise */
  public boolean isSetPriceId() {
    return EncodingUtils.testBit(__isset_bitfield, __PRICEID_ISSET_ID);
  }

  public void setPriceIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRICEID_ISSET_ID, value);
  }

  /**
   * 交易结束时间
   */
  public long getTime() {
    return this.time;
  }

  /**
   * 交易结束时间
   */
  public SCRechargeResultMsg setTime(long time) {
    this.time = time;
    setTimeIsSet(true);
    return this;
  }

  public void unsetTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIME_ISSET_ID);
  }

  /** Returns true if field time is set (has been assigned a value) and false otherwise */
  public boolean isSetTime() {
    return EncodingUtils.testBit(__isset_bitfield, __TIME_ISSET_ID);
  }

  public void setTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIME_ISSET_ID, value);
  }

  /**
   * 价格
   */
  public double getPrice() {
    return this.price;
  }

  /**
   * 价格
   */
  public SCRechargeResultMsg setPrice(double price) {
    this.price = price;
    setPriceIsSet(true);
    return this;
  }

  public void unsetPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  /** Returns true if field price is set (has been assigned a value) and false otherwise */
  public boolean isSetPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  public void setPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRICE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TRANSCATION_ID:
      if (value == null) {
        unsetTranscationId();
      } else {
        setTranscationId((String)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((Byte)value);
      }
      break;

    case PRICE_ID:
      if (value == null) {
        unsetPriceId();
      } else {
        setPriceId((Integer)value);
      }
      break;

    case TIME:
      if (value == null) {
        unsetTime();
      } else {
        setTime((Long)value);
      }
      break;

    case PRICE:
      if (value == null) {
        unsetPrice();
      } else {
        setPrice((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TRANSCATION_ID:
      return getTranscationId();

    case STATE:
      return Byte.valueOf(getState());

    case PRICE_ID:
      return Integer.valueOf(getPriceId());

    case TIME:
      return Long.valueOf(getTime());

    case PRICE:
      return Double.valueOf(getPrice());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TRANSCATION_ID:
      return isSetTranscationId();
    case STATE:
      return isSetState();
    case PRICE_ID:
      return isSetPriceId();
    case TIME:
      return isSetTime();
    case PRICE:
      return isSetPrice();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCRechargeResultMsg)
      return this.equals((SCRechargeResultMsg)that);
    return false;
  }

  public boolean equals(SCRechargeResultMsg that) {
    if (that == null)
      return false;

    boolean this_present_transcationId = true && this.isSetTranscationId();
    boolean that_present_transcationId = true && that.isSetTranscationId();
    if (this_present_transcationId || that_present_transcationId) {
      if (!(this_present_transcationId && that_present_transcationId))
        return false;
      if (!this.transcationId.equals(that.transcationId))
        return false;
    }

    boolean this_present_state = true;
    boolean that_present_state = true;
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (this.state != that.state)
        return false;
    }

    boolean this_present_priceId = true;
    boolean that_present_priceId = true;
    if (this_present_priceId || that_present_priceId) {
      if (!(this_present_priceId && that_present_priceId))
        return false;
      if (this.priceId != that.priceId)
        return false;
    }

    boolean this_present_time = true;
    boolean that_present_time = true;
    if (this_present_time || that_present_time) {
      if (!(this_present_time && that_present_time))
        return false;
      if (this.time != that.time)
        return false;
    }

    boolean this_present_price = true;
    boolean that_present_price = true;
    if (this_present_price || that_present_price) {
      if (!(this_present_price && that_present_price))
        return false;
      if (this.price != that.price)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCRechargeResultMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCRechargeResultMsg typedOther = (SCRechargeResultMsg)other;

    lastComparison = Boolean.valueOf(isSetTranscationId()).compareTo(typedOther.isSetTranscationId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTranscationId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transcationId, typedOther.transcationId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetState()).compareTo(typedOther.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, typedOther.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPriceId()).compareTo(typedOther.isSetPriceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priceId, typedOther.priceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTime()).compareTo(typedOther.isSetTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, typedOther.time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrice()).compareTo(typedOther.isSetPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.price, typedOther.price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCRechargeResultMsg(");
    boolean first = true;

    sb.append("transcationId:");
    if (this.transcationId == null) {
      sb.append("null");
    } else {
      sb.append(this.transcationId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("state:");
    sb.append(this.state);
    first = false;
    if (!first) sb.append(", ");
    sb.append("priceId:");
    sb.append(this.priceId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("time:");
    sb.append(this.time);
    first = false;
    if (!first) sb.append(", ");
    sb.append("price:");
    sb.append(this.price);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCRechargeResultMsgStandardSchemeFactory implements SchemeFactory {
    public SCRechargeResultMsgStandardScheme getScheme() {
      return new SCRechargeResultMsgStandardScheme();
    }
  }

  private static class SCRechargeResultMsgStandardScheme extends StandardScheme<SCRechargeResultMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCRechargeResultMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TRANSCATION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.transcationId = iprot.readString();
              struct.setTranscationIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.state = iprot.readByte();
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PRICE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.priceId = iprot.readI32();
              struct.setPriceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.time = iprot.readI64();
              struct.setTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.price = iprot.readDouble();
              struct.setPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCRechargeResultMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.transcationId != null) {
        oprot.writeFieldBegin(TRANSCATION_ID_FIELD_DESC);
        oprot.writeString(struct.transcationId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATE_FIELD_DESC);
      oprot.writeByte(struct.state);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRICE_ID_FIELD_DESC);
      oprot.writeI32(struct.priceId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TIME_FIELD_DESC);
      oprot.writeI64(struct.time);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRICE_FIELD_DESC);
      oprot.writeDouble(struct.price);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCRechargeResultMsgTupleSchemeFactory implements SchemeFactory {
    public SCRechargeResultMsgTupleScheme getScheme() {
      return new SCRechargeResultMsgTupleScheme();
    }
  }

  private static class SCRechargeResultMsgTupleScheme extends TupleScheme<SCRechargeResultMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCRechargeResultMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTranscationId()) {
        optionals.set(0);
      }
      if (struct.isSetState()) {
        optionals.set(1);
      }
      if (struct.isSetPriceId()) {
        optionals.set(2);
      }
      if (struct.isSetTime()) {
        optionals.set(3);
      }
      if (struct.isSetPrice()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetTranscationId()) {
        oprot.writeString(struct.transcationId);
      }
      if (struct.isSetState()) {
        oprot.writeByte(struct.state);
      }
      if (struct.isSetPriceId()) {
        oprot.writeI32(struct.priceId);
      }
      if (struct.isSetTime()) {
        oprot.writeI64(struct.time);
      }
      if (struct.isSetPrice()) {
        oprot.writeDouble(struct.price);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCRechargeResultMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.transcationId = iprot.readString();
        struct.setTranscationIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.state = iprot.readByte();
        struct.setStateIsSet(true);
      }
      if (incoming.get(2)) {
        struct.priceId = iprot.readI32();
        struct.setPriceIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.time = iprot.readI64();
        struct.setTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.price = iprot.readDouble();
        struct.setPriceIsSet(true);
      }
    }
  }

}

