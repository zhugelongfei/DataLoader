/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SCStartPrepareDanceMsg implements org.apache.thrift.TBase<SCStartPrepareDanceMsg, SCStartPrepareDanceMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCStartPrepareDanceMsg");

  private static final org.apache.thrift.protocol.TField CHAR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("charId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("mode", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField SONG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("songId", org.apache.thrift.protocol.TType.I16, (short)3);
  private static final org.apache.thrift.protocol.TField SONG_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("songLevel", org.apache.thrift.protocol.TType.BYTE, (short)4);
  private static final org.apache.thrift.protocol.TField BEGIN_SHOW_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("beginShowId", org.apache.thrift.protocol.TType.I16, (short)5);
  private static final org.apache.thrift.protocol.TField STAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("stageId", org.apache.thrift.protocol.TType.BYTE, (short)7);
  private static final org.apache.thrift.protocol.TField LIGHT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lightId", org.apache.thrift.protocol.TType.BYTE, (short)8);
  private static final org.apache.thrift.protocol.TField RAND_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("randParam", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField PARTNERS_FIELD_DESC = new org.apache.thrift.protocol.TField("partners", org.apache.thrift.protocol.TType.LIST, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCStartPrepareDanceMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCStartPrepareDanceMsgTupleSchemeFactory());
  }

  public long charId; // required
  public byte mode; // required
  public short songId; // required
  public byte songLevel; // required
  public short beginShowId; // required
  public byte stageId; // required
  public byte lightId; // required
  public int randParam; // required
  public List<com.ling9527.music.common.msg.auto.PartnerInfo> partners; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CHAR_ID((short)1, "charId"),
    MODE((short)2, "mode"),
    SONG_ID((short)3, "songId"),
    SONG_LEVEL((short)4, "songLevel"),
    BEGIN_SHOW_ID((short)5, "beginShowId"),
    STAGE_ID((short)7, "stageId"),
    LIGHT_ID((short)8, "lightId"),
    RAND_PARAM((short)9, "randParam"),
    PARTNERS((short)10, "partners");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CHAR_ID
          return CHAR_ID;
        case 2: // MODE
          return MODE;
        case 3: // SONG_ID
          return SONG_ID;
        case 4: // SONG_LEVEL
          return SONG_LEVEL;
        case 5: // BEGIN_SHOW_ID
          return BEGIN_SHOW_ID;
        case 7: // STAGE_ID
          return STAGE_ID;
        case 8: // LIGHT_ID
          return LIGHT_ID;
        case 9: // RAND_PARAM
          return RAND_PARAM;
        case 10: // PARTNERS
          return PARTNERS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CHARID_ISSET_ID = 0;
  private static final int __MODE_ISSET_ID = 1;
  private static final int __SONGID_ISSET_ID = 2;
  private static final int __SONGLEVEL_ISSET_ID = 3;
  private static final int __BEGINSHOWID_ISSET_ID = 4;
  private static final int __STAGEID_ISSET_ID = 5;
  private static final int __LIGHTID_ISSET_ID = 6;
  private static final int __RANDPARAM_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CHAR_ID, new org.apache.thrift.meta_data.FieldMetaData("charId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MODE, new org.apache.thrift.meta_data.FieldMetaData("mode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.SONG_ID, new org.apache.thrift.meta_data.FieldMetaData("songId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.SONG_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("songLevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.BEGIN_SHOW_ID, new org.apache.thrift.meta_data.FieldMetaData("beginShowId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.STAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("stageId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.LIGHT_ID, new org.apache.thrift.meta_data.FieldMetaData("lightId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.RAND_PARAM, new org.apache.thrift.meta_data.FieldMetaData("randParam", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARTNERS, new org.apache.thrift.meta_data.FieldMetaData("partners", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.PartnerInfo.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCStartPrepareDanceMsg.class, metaDataMap);
  }

  public SCStartPrepareDanceMsg() {
  }

  public SCStartPrepareDanceMsg(
    long charId,
    byte mode,
    short songId,
    byte songLevel,
    short beginShowId,
    byte stageId,
    byte lightId,
    int randParam,
    List<com.ling9527.music.common.msg.auto.PartnerInfo> partners)
  {
    this();
    this.charId = charId;
    setCharIdIsSet(true);
    this.mode = mode;
    setModeIsSet(true);
    this.songId = songId;
    setSongIdIsSet(true);
    this.songLevel = songLevel;
    setSongLevelIsSet(true);
    this.beginShowId = beginShowId;
    setBeginShowIdIsSet(true);
    this.stageId = stageId;
    setStageIdIsSet(true);
    this.lightId = lightId;
    setLightIdIsSet(true);
    this.randParam = randParam;
    setRandParamIsSet(true);
    this.partners = partners;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCStartPrepareDanceMsg(SCStartPrepareDanceMsg other) {
    __isset_bitfield = other.__isset_bitfield;
    this.charId = other.charId;
    this.mode = other.mode;
    this.songId = other.songId;
    this.songLevel = other.songLevel;
    this.beginShowId = other.beginShowId;
    this.stageId = other.stageId;
    this.lightId = other.lightId;
    this.randParam = other.randParam;
    if (other.isSetPartners()) {
      List<com.ling9527.music.common.msg.auto.PartnerInfo> __this__partners = new ArrayList<com.ling9527.music.common.msg.auto.PartnerInfo>();
      for (com.ling9527.music.common.msg.auto.PartnerInfo other_element : other.partners) {
        __this__partners.add(new com.ling9527.music.common.msg.auto.PartnerInfo(other_element));
      }
      this.partners = __this__partners;
    }
  }

  public SCStartPrepareDanceMsg deepCopy() {
    return new SCStartPrepareDanceMsg(this);
  }

  @Override
  public void clear() {
    setCharIdIsSet(false);
    this.charId = 0;
    setModeIsSet(false);
    this.mode = 0;
    setSongIdIsSet(false);
    this.songId = 0;
    setSongLevelIsSet(false);
    this.songLevel = 0;
    setBeginShowIdIsSet(false);
    this.beginShowId = 0;
    setStageIdIsSet(false);
    this.stageId = 0;
    setLightIdIsSet(false);
    this.lightId = 0;
    setRandParamIsSet(false);
    this.randParam = 0;
    this.partners = null;
  }

  public long getCharId() {
    return this.charId;
  }

  public SCStartPrepareDanceMsg setCharId(long charId) {
    this.charId = charId;
    setCharIdIsSet(true);
    return this;
  }

  public void unsetCharId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHARID_ISSET_ID);
  }

  /** Returns true if field charId is set (has been assigned a value) and false otherwise */
  public boolean isSetCharId() {
    return EncodingUtils.testBit(__isset_bitfield, __CHARID_ISSET_ID);
  }

  public void setCharIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHARID_ISSET_ID, value);
  }

  public byte getMode() {
    return this.mode;
  }

  public SCStartPrepareDanceMsg setMode(byte mode) {
    this.mode = mode;
    setModeIsSet(true);
    return this;
  }

  public void unsetMode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MODE_ISSET_ID);
  }

  /** Returns true if field mode is set (has been assigned a value) and false otherwise */
  public boolean isSetMode() {
    return EncodingUtils.testBit(__isset_bitfield, __MODE_ISSET_ID);
  }

  public void setModeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MODE_ISSET_ID, value);
  }

  public short getSongId() {
    return this.songId;
  }

  public SCStartPrepareDanceMsg setSongId(short songId) {
    this.songId = songId;
    setSongIdIsSet(true);
    return this;
  }

  public void unsetSongId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SONGID_ISSET_ID);
  }

  /** Returns true if field songId is set (has been assigned a value) and false otherwise */
  public boolean isSetSongId() {
    return EncodingUtils.testBit(__isset_bitfield, __SONGID_ISSET_ID);
  }

  public void setSongIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SONGID_ISSET_ID, value);
  }

  public byte getSongLevel() {
    return this.songLevel;
  }

  public SCStartPrepareDanceMsg setSongLevel(byte songLevel) {
    this.songLevel = songLevel;
    setSongLevelIsSet(true);
    return this;
  }

  public void unsetSongLevel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SONGLEVEL_ISSET_ID);
  }

  /** Returns true if field songLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetSongLevel() {
    return EncodingUtils.testBit(__isset_bitfield, __SONGLEVEL_ISSET_ID);
  }

  public void setSongLevelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SONGLEVEL_ISSET_ID, value);
  }

  public short getBeginShowId() {
    return this.beginShowId;
  }

  public SCStartPrepareDanceMsg setBeginShowId(short beginShowId) {
    this.beginShowId = beginShowId;
    setBeginShowIdIsSet(true);
    return this;
  }

  public void unsetBeginShowId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BEGINSHOWID_ISSET_ID);
  }

  /** Returns true if field beginShowId is set (has been assigned a value) and false otherwise */
  public boolean isSetBeginShowId() {
    return EncodingUtils.testBit(__isset_bitfield, __BEGINSHOWID_ISSET_ID);
  }

  public void setBeginShowIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BEGINSHOWID_ISSET_ID, value);
  }

  public byte getStageId() {
    return this.stageId;
  }

  public SCStartPrepareDanceMsg setStageId(byte stageId) {
    this.stageId = stageId;
    setStageIdIsSet(true);
    return this;
  }

  public void unsetStageId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STAGEID_ISSET_ID);
  }

  /** Returns true if field stageId is set (has been assigned a value) and false otherwise */
  public boolean isSetStageId() {
    return EncodingUtils.testBit(__isset_bitfield, __STAGEID_ISSET_ID);
  }

  public void setStageIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STAGEID_ISSET_ID, value);
  }

  public byte getLightId() {
    return this.lightId;
  }

  public SCStartPrepareDanceMsg setLightId(byte lightId) {
    this.lightId = lightId;
    setLightIdIsSet(true);
    return this;
  }

  public void unsetLightId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIGHTID_ISSET_ID);
  }

  /** Returns true if field lightId is set (has been assigned a value) and false otherwise */
  public boolean isSetLightId() {
    return EncodingUtils.testBit(__isset_bitfield, __LIGHTID_ISSET_ID);
  }

  public void setLightIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIGHTID_ISSET_ID, value);
  }

  public int getRandParam() {
    return this.randParam;
  }

  public SCStartPrepareDanceMsg setRandParam(int randParam) {
    this.randParam = randParam;
    setRandParamIsSet(true);
    return this;
  }

  public void unsetRandParam() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RANDPARAM_ISSET_ID);
  }

  /** Returns true if field randParam is set (has been assigned a value) and false otherwise */
  public boolean isSetRandParam() {
    return EncodingUtils.testBit(__isset_bitfield, __RANDPARAM_ISSET_ID);
  }

  public void setRandParamIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RANDPARAM_ISSET_ID, value);
  }

  public int getPartnersSize() {
    return (this.partners == null) ? 0 : this.partners.size();
  }

  public java.util.Iterator<com.ling9527.music.common.msg.auto.PartnerInfo> getPartnersIterator() {
    return (this.partners == null) ? null : this.partners.iterator();
  }

  public void addToPartners(com.ling9527.music.common.msg.auto.PartnerInfo elem) {
    if (this.partners == null) {
      this.partners = new ArrayList<com.ling9527.music.common.msg.auto.PartnerInfo>();
    }
    this.partners.add(elem);
  }

  public List<com.ling9527.music.common.msg.auto.PartnerInfo> getPartners() {
    return this.partners;
  }

  public SCStartPrepareDanceMsg setPartners(List<com.ling9527.music.common.msg.auto.PartnerInfo> partners) {
    this.partners = partners;
    return this;
  }

  public void unsetPartners() {
    this.partners = null;
  }

  /** Returns true if field partners is set (has been assigned a value) and false otherwise */
  public boolean isSetPartners() {
    return this.partners != null;
  }

  public void setPartnersIsSet(boolean value) {
    if (!value) {
      this.partners = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CHAR_ID:
      if (value == null) {
        unsetCharId();
      } else {
        setCharId((Long)value);
      }
      break;

    case MODE:
      if (value == null) {
        unsetMode();
      } else {
        setMode((Byte)value);
      }
      break;

    case SONG_ID:
      if (value == null) {
        unsetSongId();
      } else {
        setSongId((Short)value);
      }
      break;

    case SONG_LEVEL:
      if (value == null) {
        unsetSongLevel();
      } else {
        setSongLevel((Byte)value);
      }
      break;

    case BEGIN_SHOW_ID:
      if (value == null) {
        unsetBeginShowId();
      } else {
        setBeginShowId((Short)value);
      }
      break;

    case STAGE_ID:
      if (value == null) {
        unsetStageId();
      } else {
        setStageId((Byte)value);
      }
      break;

    case LIGHT_ID:
      if (value == null) {
        unsetLightId();
      } else {
        setLightId((Byte)value);
      }
      break;

    case RAND_PARAM:
      if (value == null) {
        unsetRandParam();
      } else {
        setRandParam((Integer)value);
      }
      break;

    case PARTNERS:
      if (value == null) {
        unsetPartners();
      } else {
        setPartners((List<com.ling9527.music.common.msg.auto.PartnerInfo>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CHAR_ID:
      return Long.valueOf(getCharId());

    case MODE:
      return Byte.valueOf(getMode());

    case SONG_ID:
      return Short.valueOf(getSongId());

    case SONG_LEVEL:
      return Byte.valueOf(getSongLevel());

    case BEGIN_SHOW_ID:
      return Short.valueOf(getBeginShowId());

    case STAGE_ID:
      return Byte.valueOf(getStageId());

    case LIGHT_ID:
      return Byte.valueOf(getLightId());

    case RAND_PARAM:
      return Integer.valueOf(getRandParam());

    case PARTNERS:
      return getPartners();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CHAR_ID:
      return isSetCharId();
    case MODE:
      return isSetMode();
    case SONG_ID:
      return isSetSongId();
    case SONG_LEVEL:
      return isSetSongLevel();
    case BEGIN_SHOW_ID:
      return isSetBeginShowId();
    case STAGE_ID:
      return isSetStageId();
    case LIGHT_ID:
      return isSetLightId();
    case RAND_PARAM:
      return isSetRandParam();
    case PARTNERS:
      return isSetPartners();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCStartPrepareDanceMsg)
      return this.equals((SCStartPrepareDanceMsg)that);
    return false;
  }

  public boolean equals(SCStartPrepareDanceMsg that) {
    if (that == null)
      return false;

    boolean this_present_charId = true;
    boolean that_present_charId = true;
    if (this_present_charId || that_present_charId) {
      if (!(this_present_charId && that_present_charId))
        return false;
      if (this.charId != that.charId)
        return false;
    }

    boolean this_present_mode = true;
    boolean that_present_mode = true;
    if (this_present_mode || that_present_mode) {
      if (!(this_present_mode && that_present_mode))
        return false;
      if (this.mode != that.mode)
        return false;
    }

    boolean this_present_songId = true;
    boolean that_present_songId = true;
    if (this_present_songId || that_present_songId) {
      if (!(this_present_songId && that_present_songId))
        return false;
      if (this.songId != that.songId)
        return false;
    }

    boolean this_present_songLevel = true;
    boolean that_present_songLevel = true;
    if (this_present_songLevel || that_present_songLevel) {
      if (!(this_present_songLevel && that_present_songLevel))
        return false;
      if (this.songLevel != that.songLevel)
        return false;
    }

    boolean this_present_beginShowId = true;
    boolean that_present_beginShowId = true;
    if (this_present_beginShowId || that_present_beginShowId) {
      if (!(this_present_beginShowId && that_present_beginShowId))
        return false;
      if (this.beginShowId != that.beginShowId)
        return false;
    }

    boolean this_present_stageId = true;
    boolean that_present_stageId = true;
    if (this_present_stageId || that_present_stageId) {
      if (!(this_present_stageId && that_present_stageId))
        return false;
      if (this.stageId != that.stageId)
        return false;
    }

    boolean this_present_lightId = true;
    boolean that_present_lightId = true;
    if (this_present_lightId || that_present_lightId) {
      if (!(this_present_lightId && that_present_lightId))
        return false;
      if (this.lightId != that.lightId)
        return false;
    }

    boolean this_present_randParam = true;
    boolean that_present_randParam = true;
    if (this_present_randParam || that_present_randParam) {
      if (!(this_present_randParam && that_present_randParam))
        return false;
      if (this.randParam != that.randParam)
        return false;
    }

    boolean this_present_partners = true && this.isSetPartners();
    boolean that_present_partners = true && that.isSetPartners();
    if (this_present_partners || that_present_partners) {
      if (!(this_present_partners && that_present_partners))
        return false;
      if (!this.partners.equals(that.partners))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCStartPrepareDanceMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCStartPrepareDanceMsg typedOther = (SCStartPrepareDanceMsg)other;

    lastComparison = Boolean.valueOf(isSetCharId()).compareTo(typedOther.isSetCharId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCharId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.charId, typedOther.charId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMode()).compareTo(typedOther.isSetMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mode, typedOther.mode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSongId()).compareTo(typedOther.isSetSongId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSongId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.songId, typedOther.songId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSongLevel()).compareTo(typedOther.isSetSongLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSongLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.songLevel, typedOther.songLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBeginShowId()).compareTo(typedOther.isSetBeginShowId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBeginShowId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.beginShowId, typedOther.beginShowId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStageId()).compareTo(typedOther.isSetStageId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStageId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stageId, typedOther.stageId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLightId()).compareTo(typedOther.isSetLightId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLightId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lightId, typedOther.lightId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRandParam()).compareTo(typedOther.isSetRandParam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRandParam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.randParam, typedOther.randParam);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartners()).compareTo(typedOther.isSetPartners());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartners()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partners, typedOther.partners);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCStartPrepareDanceMsg(");
    boolean first = true;

    sb.append("charId:");
    sb.append(this.charId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mode:");
    sb.append(this.mode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("songId:");
    sb.append(this.songId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("songLevel:");
    sb.append(this.songLevel);
    first = false;
    if (!first) sb.append(", ");
    sb.append("beginShowId:");
    sb.append(this.beginShowId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("stageId:");
    sb.append(this.stageId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lightId:");
    sb.append(this.lightId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("randParam:");
    sb.append(this.randParam);
    first = false;
    if (!first) sb.append(", ");
    sb.append("partners:");
    if (this.partners == null) {
      sb.append("null");
    } else {
      sb.append(this.partners);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCStartPrepareDanceMsgStandardSchemeFactory implements SchemeFactory {
    public SCStartPrepareDanceMsgStandardScheme getScheme() {
      return new SCStartPrepareDanceMsgStandardScheme();
    }
  }

  private static class SCStartPrepareDanceMsgStandardScheme extends StandardScheme<SCStartPrepareDanceMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCStartPrepareDanceMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CHAR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.charId = iprot.readI64();
              struct.setCharIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.mode = iprot.readByte();
              struct.setModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SONG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.songId = iprot.readI16();
              struct.setSongIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SONG_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.songLevel = iprot.readByte();
              struct.setSongLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BEGIN_SHOW_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.beginShowId = iprot.readI16();
              struct.setBeginShowIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // STAGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.stageId = iprot.readByte();
              struct.setStageIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LIGHT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.lightId = iprot.readByte();
              struct.setLightIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // RAND_PARAM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.randParam = iprot.readI32();
              struct.setRandParamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PARTNERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list72 = iprot.readListBegin();
                struct.partners = new ArrayList<com.ling9527.music.common.msg.auto.PartnerInfo>(_list72.size);
                for (int _i73 = 0; _i73 < _list72.size; ++_i73)
                {
                  com.ling9527.music.common.msg.auto.PartnerInfo _elem74; // required
                  _elem74 = new com.ling9527.music.common.msg.auto.PartnerInfo();
                  _elem74.read(iprot);
                  struct.partners.add(_elem74);
                }
                iprot.readListEnd();
              }
              struct.setPartnersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCStartPrepareDanceMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CHAR_ID_FIELD_DESC);
      oprot.writeI64(struct.charId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MODE_FIELD_DESC);
      oprot.writeByte(struct.mode);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SONG_ID_FIELD_DESC);
      oprot.writeI16(struct.songId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SONG_LEVEL_FIELD_DESC);
      oprot.writeByte(struct.songLevel);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BEGIN_SHOW_ID_FIELD_DESC);
      oprot.writeI16(struct.beginShowId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STAGE_ID_FIELD_DESC);
      oprot.writeByte(struct.stageId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LIGHT_ID_FIELD_DESC);
      oprot.writeByte(struct.lightId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RAND_PARAM_FIELD_DESC);
      oprot.writeI32(struct.randParam);
      oprot.writeFieldEnd();
      if (struct.partners != null) {
        oprot.writeFieldBegin(PARTNERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.partners.size()));
          for (com.ling9527.music.common.msg.auto.PartnerInfo _iter75 : struct.partners)
          {
            _iter75.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCStartPrepareDanceMsgTupleSchemeFactory implements SchemeFactory {
    public SCStartPrepareDanceMsgTupleScheme getScheme() {
      return new SCStartPrepareDanceMsgTupleScheme();
    }
  }

  private static class SCStartPrepareDanceMsgTupleScheme extends TupleScheme<SCStartPrepareDanceMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCStartPrepareDanceMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCharId()) {
        optionals.set(0);
      }
      if (struct.isSetMode()) {
        optionals.set(1);
      }
      if (struct.isSetSongId()) {
        optionals.set(2);
      }
      if (struct.isSetSongLevel()) {
        optionals.set(3);
      }
      if (struct.isSetBeginShowId()) {
        optionals.set(4);
      }
      if (struct.isSetStageId()) {
        optionals.set(5);
      }
      if (struct.isSetLightId()) {
        optionals.set(6);
      }
      if (struct.isSetRandParam()) {
        optionals.set(7);
      }
      if (struct.isSetPartners()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetCharId()) {
        oprot.writeI64(struct.charId);
      }
      if (struct.isSetMode()) {
        oprot.writeByte(struct.mode);
      }
      if (struct.isSetSongId()) {
        oprot.writeI16(struct.songId);
      }
      if (struct.isSetSongLevel()) {
        oprot.writeByte(struct.songLevel);
      }
      if (struct.isSetBeginShowId()) {
        oprot.writeI16(struct.beginShowId);
      }
      if (struct.isSetStageId()) {
        oprot.writeByte(struct.stageId);
      }
      if (struct.isSetLightId()) {
        oprot.writeByte(struct.lightId);
      }
      if (struct.isSetRandParam()) {
        oprot.writeI32(struct.randParam);
      }
      if (struct.isSetPartners()) {
        {
          oprot.writeI32(struct.partners.size());
          for (com.ling9527.music.common.msg.auto.PartnerInfo _iter76 : struct.partners)
          {
            _iter76.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCStartPrepareDanceMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.charId = iprot.readI64();
        struct.setCharIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.mode = iprot.readByte();
        struct.setModeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.songId = iprot.readI16();
        struct.setSongIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.songLevel = iprot.readByte();
        struct.setSongLevelIsSet(true);
      }
      if (incoming.get(4)) {
        struct.beginShowId = iprot.readI16();
        struct.setBeginShowIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.stageId = iprot.readByte();
        struct.setStageIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.lightId = iprot.readByte();
        struct.setLightIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.randParam = iprot.readI32();
        struct.setRandParamIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list77 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.partners = new ArrayList<com.ling9527.music.common.msg.auto.PartnerInfo>(_list77.size);
          for (int _i78 = 0; _i78 < _list77.size; ++_i78)
          {
            com.ling9527.music.common.msg.auto.PartnerInfo _elem79; // required
            _elem79 = new com.ling9527.music.common.msg.auto.PartnerInfo();
            _elem79.read(iprot);
            struct.partners.add(_elem79);
          }
        }
        struct.setPartnersIsSet(true);
      }
    }
  }

}

