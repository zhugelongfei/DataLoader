/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SCServerInfoMsg implements org.apache.thrift.TBase<SCServerInfoMsg, SCServerInfoMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCServerInfoMsg");

  private static final org.apache.thrift.protocol.TField MALE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("maleNum", org.apache.thrift.protocol.TType.I16, (short)1);
  private static final org.apache.thrift.protocol.TField FEMALE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("femaleNum", org.apache.thrift.protocol.TType.I16, (short)2);
  private static final org.apache.thrift.protocol.TField ACTIVITY_SWITCH_FIELD_DESC = new org.apache.thrift.protocol.TField("activitySwitch", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField MARKET_SWITCH_FIELD_DESC = new org.apache.thrift.protocol.TField("marketSwitch", org.apache.thrift.protocol.TType.I16, (short)4);
  private static final org.apache.thrift.protocol.TField SYSTEM_SWITCH_FIELD_DESC = new org.apache.thrift.protocol.TField("systemSwitch", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField VOICE_SERVER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("voiceServerId", org.apache.thrift.protocol.TType.BYTE, (short)6);
  private static final org.apache.thrift.protocol.TField SERVER_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("serverTime", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField RANK_SWITCH_FIELD_DESC = new org.apache.thrift.protocol.TField("rankSwitch", org.apache.thrift.protocol.TType.I64, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCServerInfoMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCServerInfoMsgTupleSchemeFactory());
  }

  public short maleNum; // required
  public short femaleNum; // required
  public int activitySwitch; // required
  public short marketSwitch; // required
  public long systemSwitch; // required
  public byte voiceServerId; // required
  public int serverTime; // required
  public long rankSwitch; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MALE_NUM((short)1, "maleNum"),
    FEMALE_NUM((short)2, "femaleNum"),
    ACTIVITY_SWITCH((short)3, "activitySwitch"),
    MARKET_SWITCH((short)4, "marketSwitch"),
    SYSTEM_SWITCH((short)5, "systemSwitch"),
    VOICE_SERVER_ID((short)6, "voiceServerId"),
    SERVER_TIME((short)7, "serverTime"),
    RANK_SWITCH((short)8, "rankSwitch");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MALE_NUM
          return MALE_NUM;
        case 2: // FEMALE_NUM
          return FEMALE_NUM;
        case 3: // ACTIVITY_SWITCH
          return ACTIVITY_SWITCH;
        case 4: // MARKET_SWITCH
          return MARKET_SWITCH;
        case 5: // SYSTEM_SWITCH
          return SYSTEM_SWITCH;
        case 6: // VOICE_SERVER_ID
          return VOICE_SERVER_ID;
        case 7: // SERVER_TIME
          return SERVER_TIME;
        case 8: // RANK_SWITCH
          return RANK_SWITCH;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MALENUM_ISSET_ID = 0;
  private static final int __FEMALENUM_ISSET_ID = 1;
  private static final int __ACTIVITYSWITCH_ISSET_ID = 2;
  private static final int __MARKETSWITCH_ISSET_ID = 3;
  private static final int __SYSTEMSWITCH_ISSET_ID = 4;
  private static final int __VOICESERVERID_ISSET_ID = 5;
  private static final int __SERVERTIME_ISSET_ID = 6;
  private static final int __RANKSWITCH_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MALE_NUM, new org.apache.thrift.meta_data.FieldMetaData("maleNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.FEMALE_NUM, new org.apache.thrift.meta_data.FieldMetaData("femaleNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.ACTIVITY_SWITCH, new org.apache.thrift.meta_data.FieldMetaData("activitySwitch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MARKET_SWITCH, new org.apache.thrift.meta_data.FieldMetaData("marketSwitch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.SYSTEM_SWITCH, new org.apache.thrift.meta_data.FieldMetaData("systemSwitch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VOICE_SERVER_ID, new org.apache.thrift.meta_data.FieldMetaData("voiceServerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.SERVER_TIME, new org.apache.thrift.meta_data.FieldMetaData("serverTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RANK_SWITCH, new org.apache.thrift.meta_data.FieldMetaData("rankSwitch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCServerInfoMsg.class, metaDataMap);
  }

  public SCServerInfoMsg() {
  }

  public SCServerInfoMsg(
    short maleNum,
    short femaleNum,
    int activitySwitch,
    short marketSwitch,
    long systemSwitch,
    byte voiceServerId,
    int serverTime,
    long rankSwitch)
  {
    this();
    this.maleNum = maleNum;
    setMaleNumIsSet(true);
    this.femaleNum = femaleNum;
    setFemaleNumIsSet(true);
    this.activitySwitch = activitySwitch;
    setActivitySwitchIsSet(true);
    this.marketSwitch = marketSwitch;
    setMarketSwitchIsSet(true);
    this.systemSwitch = systemSwitch;
    setSystemSwitchIsSet(true);
    this.voiceServerId = voiceServerId;
    setVoiceServerIdIsSet(true);
    this.serverTime = serverTime;
    setServerTimeIsSet(true);
    this.rankSwitch = rankSwitch;
    setRankSwitchIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCServerInfoMsg(SCServerInfoMsg other) {
    __isset_bitfield = other.__isset_bitfield;
    this.maleNum = other.maleNum;
    this.femaleNum = other.femaleNum;
    this.activitySwitch = other.activitySwitch;
    this.marketSwitch = other.marketSwitch;
    this.systemSwitch = other.systemSwitch;
    this.voiceServerId = other.voiceServerId;
    this.serverTime = other.serverTime;
    this.rankSwitch = other.rankSwitch;
  }

  public SCServerInfoMsg deepCopy() {
    return new SCServerInfoMsg(this);
  }

  @Override
  public void clear() {
    setMaleNumIsSet(false);
    this.maleNum = 0;
    setFemaleNumIsSet(false);
    this.femaleNum = 0;
    setActivitySwitchIsSet(false);
    this.activitySwitch = 0;
    setMarketSwitchIsSet(false);
    this.marketSwitch = 0;
    setSystemSwitchIsSet(false);
    this.systemSwitch = 0;
    setVoiceServerIdIsSet(false);
    this.voiceServerId = 0;
    setServerTimeIsSet(false);
    this.serverTime = 0;
    setRankSwitchIsSet(false);
    this.rankSwitch = 0;
  }

  public short getMaleNum() {
    return this.maleNum;
  }

  public SCServerInfoMsg setMaleNum(short maleNum) {
    this.maleNum = maleNum;
    setMaleNumIsSet(true);
    return this;
  }

  public void unsetMaleNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MALENUM_ISSET_ID);
  }

  /** Returns true if field maleNum is set (has been assigned a value) and false otherwise */
  public boolean isSetMaleNum() {
    return EncodingUtils.testBit(__isset_bitfield, __MALENUM_ISSET_ID);
  }

  public void setMaleNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MALENUM_ISSET_ID, value);
  }

  public short getFemaleNum() {
    return this.femaleNum;
  }

  public SCServerInfoMsg setFemaleNum(short femaleNum) {
    this.femaleNum = femaleNum;
    setFemaleNumIsSet(true);
    return this;
  }

  public void unsetFemaleNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FEMALENUM_ISSET_ID);
  }

  /** Returns true if field femaleNum is set (has been assigned a value) and false otherwise */
  public boolean isSetFemaleNum() {
    return EncodingUtils.testBit(__isset_bitfield, __FEMALENUM_ISSET_ID);
  }

  public void setFemaleNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FEMALENUM_ISSET_ID, value);
  }

  public int getActivitySwitch() {
    return this.activitySwitch;
  }

  public SCServerInfoMsg setActivitySwitch(int activitySwitch) {
    this.activitySwitch = activitySwitch;
    setActivitySwitchIsSet(true);
    return this;
  }

  public void unsetActivitySwitch() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIVITYSWITCH_ISSET_ID);
  }

  /** Returns true if field activitySwitch is set (has been assigned a value) and false otherwise */
  public boolean isSetActivitySwitch() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTIVITYSWITCH_ISSET_ID);
  }

  public void setActivitySwitchIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIVITYSWITCH_ISSET_ID, value);
  }

  public short getMarketSwitch() {
    return this.marketSwitch;
  }

  public SCServerInfoMsg setMarketSwitch(short marketSwitch) {
    this.marketSwitch = marketSwitch;
    setMarketSwitchIsSet(true);
    return this;
  }

  public void unsetMarketSwitch() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MARKETSWITCH_ISSET_ID);
  }

  /** Returns true if field marketSwitch is set (has been assigned a value) and false otherwise */
  public boolean isSetMarketSwitch() {
    return EncodingUtils.testBit(__isset_bitfield, __MARKETSWITCH_ISSET_ID);
  }

  public void setMarketSwitchIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MARKETSWITCH_ISSET_ID, value);
  }

  public long getSystemSwitch() {
    return this.systemSwitch;
  }

  public SCServerInfoMsg setSystemSwitch(long systemSwitch) {
    this.systemSwitch = systemSwitch;
    setSystemSwitchIsSet(true);
    return this;
  }

  public void unsetSystemSwitch() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SYSTEMSWITCH_ISSET_ID);
  }

  /** Returns true if field systemSwitch is set (has been assigned a value) and false otherwise */
  public boolean isSetSystemSwitch() {
    return EncodingUtils.testBit(__isset_bitfield, __SYSTEMSWITCH_ISSET_ID);
  }

  public void setSystemSwitchIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SYSTEMSWITCH_ISSET_ID, value);
  }

  public byte getVoiceServerId() {
    return this.voiceServerId;
  }

  public SCServerInfoMsg setVoiceServerId(byte voiceServerId) {
    this.voiceServerId = voiceServerId;
    setVoiceServerIdIsSet(true);
    return this;
  }

  public void unsetVoiceServerId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VOICESERVERID_ISSET_ID);
  }

  /** Returns true if field voiceServerId is set (has been assigned a value) and false otherwise */
  public boolean isSetVoiceServerId() {
    return EncodingUtils.testBit(__isset_bitfield, __VOICESERVERID_ISSET_ID);
  }

  public void setVoiceServerIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VOICESERVERID_ISSET_ID, value);
  }

  public int getServerTime() {
    return this.serverTime;
  }

  public SCServerInfoMsg setServerTime(int serverTime) {
    this.serverTime = serverTime;
    setServerTimeIsSet(true);
    return this;
  }

  public void unsetServerTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERVERTIME_ISSET_ID);
  }

  /** Returns true if field serverTime is set (has been assigned a value) and false otherwise */
  public boolean isSetServerTime() {
    return EncodingUtils.testBit(__isset_bitfield, __SERVERTIME_ISSET_ID);
  }

  public void setServerTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERVERTIME_ISSET_ID, value);
  }

  public long getRankSwitch() {
    return this.rankSwitch;
  }

  public SCServerInfoMsg setRankSwitch(long rankSwitch) {
    this.rankSwitch = rankSwitch;
    setRankSwitchIsSet(true);
    return this;
  }

  public void unsetRankSwitch() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RANKSWITCH_ISSET_ID);
  }

  /** Returns true if field rankSwitch is set (has been assigned a value) and false otherwise */
  public boolean isSetRankSwitch() {
    return EncodingUtils.testBit(__isset_bitfield, __RANKSWITCH_ISSET_ID);
  }

  public void setRankSwitchIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RANKSWITCH_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MALE_NUM:
      if (value == null) {
        unsetMaleNum();
      } else {
        setMaleNum((Short)value);
      }
      break;

    case FEMALE_NUM:
      if (value == null) {
        unsetFemaleNum();
      } else {
        setFemaleNum((Short)value);
      }
      break;

    case ACTIVITY_SWITCH:
      if (value == null) {
        unsetActivitySwitch();
      } else {
        setActivitySwitch((Integer)value);
      }
      break;

    case MARKET_SWITCH:
      if (value == null) {
        unsetMarketSwitch();
      } else {
        setMarketSwitch((Short)value);
      }
      break;

    case SYSTEM_SWITCH:
      if (value == null) {
        unsetSystemSwitch();
      } else {
        setSystemSwitch((Long)value);
      }
      break;

    case VOICE_SERVER_ID:
      if (value == null) {
        unsetVoiceServerId();
      } else {
        setVoiceServerId((Byte)value);
      }
      break;

    case SERVER_TIME:
      if (value == null) {
        unsetServerTime();
      } else {
        setServerTime((Integer)value);
      }
      break;

    case RANK_SWITCH:
      if (value == null) {
        unsetRankSwitch();
      } else {
        setRankSwitch((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MALE_NUM:
      return Short.valueOf(getMaleNum());

    case FEMALE_NUM:
      return Short.valueOf(getFemaleNum());

    case ACTIVITY_SWITCH:
      return Integer.valueOf(getActivitySwitch());

    case MARKET_SWITCH:
      return Short.valueOf(getMarketSwitch());

    case SYSTEM_SWITCH:
      return Long.valueOf(getSystemSwitch());

    case VOICE_SERVER_ID:
      return Byte.valueOf(getVoiceServerId());

    case SERVER_TIME:
      return Integer.valueOf(getServerTime());

    case RANK_SWITCH:
      return Long.valueOf(getRankSwitch());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MALE_NUM:
      return isSetMaleNum();
    case FEMALE_NUM:
      return isSetFemaleNum();
    case ACTIVITY_SWITCH:
      return isSetActivitySwitch();
    case MARKET_SWITCH:
      return isSetMarketSwitch();
    case SYSTEM_SWITCH:
      return isSetSystemSwitch();
    case VOICE_SERVER_ID:
      return isSetVoiceServerId();
    case SERVER_TIME:
      return isSetServerTime();
    case RANK_SWITCH:
      return isSetRankSwitch();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCServerInfoMsg)
      return this.equals((SCServerInfoMsg)that);
    return false;
  }

  public boolean equals(SCServerInfoMsg that) {
    if (that == null)
      return false;

    boolean this_present_maleNum = true;
    boolean that_present_maleNum = true;
    if (this_present_maleNum || that_present_maleNum) {
      if (!(this_present_maleNum && that_present_maleNum))
        return false;
      if (this.maleNum != that.maleNum)
        return false;
    }

    boolean this_present_femaleNum = true;
    boolean that_present_femaleNum = true;
    if (this_present_femaleNum || that_present_femaleNum) {
      if (!(this_present_femaleNum && that_present_femaleNum))
        return false;
      if (this.femaleNum != that.femaleNum)
        return false;
    }

    boolean this_present_activitySwitch = true;
    boolean that_present_activitySwitch = true;
    if (this_present_activitySwitch || that_present_activitySwitch) {
      if (!(this_present_activitySwitch && that_present_activitySwitch))
        return false;
      if (this.activitySwitch != that.activitySwitch)
        return false;
    }

    boolean this_present_marketSwitch = true;
    boolean that_present_marketSwitch = true;
    if (this_present_marketSwitch || that_present_marketSwitch) {
      if (!(this_present_marketSwitch && that_present_marketSwitch))
        return false;
      if (this.marketSwitch != that.marketSwitch)
        return false;
    }

    boolean this_present_systemSwitch = true;
    boolean that_present_systemSwitch = true;
    if (this_present_systemSwitch || that_present_systemSwitch) {
      if (!(this_present_systemSwitch && that_present_systemSwitch))
        return false;
      if (this.systemSwitch != that.systemSwitch)
        return false;
    }

    boolean this_present_voiceServerId = true;
    boolean that_present_voiceServerId = true;
    if (this_present_voiceServerId || that_present_voiceServerId) {
      if (!(this_present_voiceServerId && that_present_voiceServerId))
        return false;
      if (this.voiceServerId != that.voiceServerId)
        return false;
    }

    boolean this_present_serverTime = true;
    boolean that_present_serverTime = true;
    if (this_present_serverTime || that_present_serverTime) {
      if (!(this_present_serverTime && that_present_serverTime))
        return false;
      if (this.serverTime != that.serverTime)
        return false;
    }

    boolean this_present_rankSwitch = true;
    boolean that_present_rankSwitch = true;
    if (this_present_rankSwitch || that_present_rankSwitch) {
      if (!(this_present_rankSwitch && that_present_rankSwitch))
        return false;
      if (this.rankSwitch != that.rankSwitch)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCServerInfoMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCServerInfoMsg typedOther = (SCServerInfoMsg)other;

    lastComparison = Boolean.valueOf(isSetMaleNum()).compareTo(typedOther.isSetMaleNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaleNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maleNum, typedOther.maleNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFemaleNum()).compareTo(typedOther.isSetFemaleNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFemaleNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.femaleNum, typedOther.femaleNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActivitySwitch()).compareTo(typedOther.isSetActivitySwitch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActivitySwitch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activitySwitch, typedOther.activitySwitch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMarketSwitch()).compareTo(typedOther.isSetMarketSwitch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMarketSwitch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.marketSwitch, typedOther.marketSwitch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSystemSwitch()).compareTo(typedOther.isSetSystemSwitch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSystemSwitch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.systemSwitch, typedOther.systemSwitch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVoiceServerId()).compareTo(typedOther.isSetVoiceServerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVoiceServerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.voiceServerId, typedOther.voiceServerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServerTime()).compareTo(typedOther.isSetServerTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServerTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverTime, typedOther.serverTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRankSwitch()).compareTo(typedOther.isSetRankSwitch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRankSwitch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rankSwitch, typedOther.rankSwitch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCServerInfoMsg(");
    boolean first = true;

    sb.append("maleNum:");
    sb.append(this.maleNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("femaleNum:");
    sb.append(this.femaleNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("activitySwitch:");
    sb.append(this.activitySwitch);
    first = false;
    if (!first) sb.append(", ");
    sb.append("marketSwitch:");
    sb.append(this.marketSwitch);
    first = false;
    if (!first) sb.append(", ");
    sb.append("systemSwitch:");
    sb.append(this.systemSwitch);
    first = false;
    if (!first) sb.append(", ");
    sb.append("voiceServerId:");
    sb.append(this.voiceServerId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("serverTime:");
    sb.append(this.serverTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rankSwitch:");
    sb.append(this.rankSwitch);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCServerInfoMsgStandardSchemeFactory implements SchemeFactory {
    public SCServerInfoMsgStandardScheme getScheme() {
      return new SCServerInfoMsgStandardScheme();
    }
  }

  private static class SCServerInfoMsgStandardScheme extends StandardScheme<SCServerInfoMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCServerInfoMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MALE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.maleNum = iprot.readI16();
              struct.setMaleNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FEMALE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.femaleNum = iprot.readI16();
              struct.setFemaleNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ACTIVITY_SWITCH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.activitySwitch = iprot.readI32();
              struct.setActivitySwitchIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MARKET_SWITCH
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.marketSwitch = iprot.readI16();
              struct.setMarketSwitchIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SYSTEM_SWITCH
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.systemSwitch = iprot.readI64();
              struct.setSystemSwitchIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // VOICE_SERVER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.voiceServerId = iprot.readByte();
              struct.setVoiceServerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SERVER_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.serverTime = iprot.readI32();
              struct.setServerTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // RANK_SWITCH
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.rankSwitch = iprot.readI64();
              struct.setRankSwitchIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCServerInfoMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MALE_NUM_FIELD_DESC);
      oprot.writeI16(struct.maleNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FEMALE_NUM_FIELD_DESC);
      oprot.writeI16(struct.femaleNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACTIVITY_SWITCH_FIELD_DESC);
      oprot.writeI32(struct.activitySwitch);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MARKET_SWITCH_FIELD_DESC);
      oprot.writeI16(struct.marketSwitch);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SYSTEM_SWITCH_FIELD_DESC);
      oprot.writeI64(struct.systemSwitch);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VOICE_SERVER_ID_FIELD_DESC);
      oprot.writeByte(struct.voiceServerId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SERVER_TIME_FIELD_DESC);
      oprot.writeI32(struct.serverTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RANK_SWITCH_FIELD_DESC);
      oprot.writeI64(struct.rankSwitch);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCServerInfoMsgTupleSchemeFactory implements SchemeFactory {
    public SCServerInfoMsgTupleScheme getScheme() {
      return new SCServerInfoMsgTupleScheme();
    }
  }

  private static class SCServerInfoMsgTupleScheme extends TupleScheme<SCServerInfoMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCServerInfoMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMaleNum()) {
        optionals.set(0);
      }
      if (struct.isSetFemaleNum()) {
        optionals.set(1);
      }
      if (struct.isSetActivitySwitch()) {
        optionals.set(2);
      }
      if (struct.isSetMarketSwitch()) {
        optionals.set(3);
      }
      if (struct.isSetSystemSwitch()) {
        optionals.set(4);
      }
      if (struct.isSetVoiceServerId()) {
        optionals.set(5);
      }
      if (struct.isSetServerTime()) {
        optionals.set(6);
      }
      if (struct.isSetRankSwitch()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetMaleNum()) {
        oprot.writeI16(struct.maleNum);
      }
      if (struct.isSetFemaleNum()) {
        oprot.writeI16(struct.femaleNum);
      }
      if (struct.isSetActivitySwitch()) {
        oprot.writeI32(struct.activitySwitch);
      }
      if (struct.isSetMarketSwitch()) {
        oprot.writeI16(struct.marketSwitch);
      }
      if (struct.isSetSystemSwitch()) {
        oprot.writeI64(struct.systemSwitch);
      }
      if (struct.isSetVoiceServerId()) {
        oprot.writeByte(struct.voiceServerId);
      }
      if (struct.isSetServerTime()) {
        oprot.writeI32(struct.serverTime);
      }
      if (struct.isSetRankSwitch()) {
        oprot.writeI64(struct.rankSwitch);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCServerInfoMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.maleNum = iprot.readI16();
        struct.setMaleNumIsSet(true);
      }
      if (incoming.get(1)) {
        struct.femaleNum = iprot.readI16();
        struct.setFemaleNumIsSet(true);
      }
      if (incoming.get(2)) {
        struct.activitySwitch = iprot.readI32();
        struct.setActivitySwitchIsSet(true);
      }
      if (incoming.get(3)) {
        struct.marketSwitch = iprot.readI16();
        struct.setMarketSwitchIsSet(true);
      }
      if (incoming.get(4)) {
        struct.systemSwitch = iprot.readI64();
        struct.setSystemSwitchIsSet(true);
      }
      if (incoming.get(5)) {
        struct.voiceServerId = iprot.readByte();
        struct.setVoiceServerIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.serverTime = iprot.readI32();
        struct.setServerTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.rankSwitch = iprot.readI64();
        struct.setRankSwitchIsSet(true);
      }
    }
  }

}

