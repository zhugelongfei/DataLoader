/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SCPicturesMsg implements org.apache.thrift.TBase<SCPicturesMsg, SCPicturesMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCPicturesMsg");

  private static final org.apache.thrift.protocol.TField CHAR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("charId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField CHAR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("charName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PS_FIELD_DESC = new org.apache.thrift.protocol.TField("ps", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField START_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("startIndex", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField END_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("endIndex", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("total", org.apache.thrift.protocol.TType.I32, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCPicturesMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCPicturesMsgTupleSchemeFactory());
  }

  public long charId; // required
  public String charName; // required
  public List<com.ling9527.music.common.msg.auto.Picture> ps; // required
  public int startIndex; // required
  public int endIndex; // required
  public int total; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CHAR_ID((short)1, "charId"),
    CHAR_NAME((short)2, "charName"),
    PS((short)3, "ps"),
    START_INDEX((short)4, "startIndex"),
    END_INDEX((short)5, "endIndex"),
    TOTAL((short)6, "total");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CHAR_ID
          return CHAR_ID;
        case 2: // CHAR_NAME
          return CHAR_NAME;
        case 3: // PS
          return PS;
        case 4: // START_INDEX
          return START_INDEX;
        case 5: // END_INDEX
          return END_INDEX;
        case 6: // TOTAL
          return TOTAL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CHARID_ISSET_ID = 0;
  private static final int __STARTINDEX_ISSET_ID = 1;
  private static final int __ENDINDEX_ISSET_ID = 2;
  private static final int __TOTAL_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CHAR_ID, new org.apache.thrift.meta_data.FieldMetaData("charId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CHAR_NAME, new org.apache.thrift.meta_data.FieldMetaData("charName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PS, new org.apache.thrift.meta_data.FieldMetaData("ps", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.Picture.class))));
    tmpMap.put(_Fields.START_INDEX, new org.apache.thrift.meta_data.FieldMetaData("startIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.END_INDEX, new org.apache.thrift.meta_data.FieldMetaData("endIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL, new org.apache.thrift.meta_data.FieldMetaData("total", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCPicturesMsg.class, metaDataMap);
  }

  public SCPicturesMsg() {
  }

  public SCPicturesMsg(
    long charId,
    String charName,
    List<com.ling9527.music.common.msg.auto.Picture> ps,
    int startIndex,
    int endIndex,
    int total)
  {
    this();
    this.charId = charId;
    setCharIdIsSet(true);
    this.charName = charName;
    this.ps = ps;
    this.startIndex = startIndex;
    setStartIndexIsSet(true);
    this.endIndex = endIndex;
    setEndIndexIsSet(true);
    this.total = total;
    setTotalIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCPicturesMsg(SCPicturesMsg other) {
    __isset_bitfield = other.__isset_bitfield;
    this.charId = other.charId;
    if (other.isSetCharName()) {
      this.charName = other.charName;
    }
    if (other.isSetPs()) {
      List<com.ling9527.music.common.msg.auto.Picture> __this__ps = new ArrayList<com.ling9527.music.common.msg.auto.Picture>();
      for (com.ling9527.music.common.msg.auto.Picture other_element : other.ps) {
        __this__ps.add(new com.ling9527.music.common.msg.auto.Picture(other_element));
      }
      this.ps = __this__ps;
    }
    this.startIndex = other.startIndex;
    this.endIndex = other.endIndex;
    this.total = other.total;
  }

  public SCPicturesMsg deepCopy() {
    return new SCPicturesMsg(this);
  }

  @Override
  public void clear() {
    setCharIdIsSet(false);
    this.charId = 0;
    this.charName = null;
    this.ps = null;
    setStartIndexIsSet(false);
    this.startIndex = 0;
    setEndIndexIsSet(false);
    this.endIndex = 0;
    setTotalIsSet(false);
    this.total = 0;
  }

  public long getCharId() {
    return this.charId;
  }

  public SCPicturesMsg setCharId(long charId) {
    this.charId = charId;
    setCharIdIsSet(true);
    return this;
  }

  public void unsetCharId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHARID_ISSET_ID);
  }

  /** Returns true if field charId is set (has been assigned a value) and false otherwise */
  public boolean isSetCharId() {
    return EncodingUtils.testBit(__isset_bitfield, __CHARID_ISSET_ID);
  }

  public void setCharIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHARID_ISSET_ID, value);
  }

  public String getCharName() {
    return this.charName;
  }

  public SCPicturesMsg setCharName(String charName) {
    this.charName = charName;
    return this;
  }

  public void unsetCharName() {
    this.charName = null;
  }

  /** Returns true if field charName is set (has been assigned a value) and false otherwise */
  public boolean isSetCharName() {
    return this.charName != null;
  }

  public void setCharNameIsSet(boolean value) {
    if (!value) {
      this.charName = null;
    }
  }

  public int getPsSize() {
    return (this.ps == null) ? 0 : this.ps.size();
  }

  public java.util.Iterator<com.ling9527.music.common.msg.auto.Picture> getPsIterator() {
    return (this.ps == null) ? null : this.ps.iterator();
  }

  public void addToPs(com.ling9527.music.common.msg.auto.Picture elem) {
    if (this.ps == null) {
      this.ps = new ArrayList<com.ling9527.music.common.msg.auto.Picture>();
    }
    this.ps.add(elem);
  }

  public List<com.ling9527.music.common.msg.auto.Picture> getPs() {
    return this.ps;
  }

  public SCPicturesMsg setPs(List<com.ling9527.music.common.msg.auto.Picture> ps) {
    this.ps = ps;
    return this;
  }

  public void unsetPs() {
    this.ps = null;
  }

  /** Returns true if field ps is set (has been assigned a value) and false otherwise */
  public boolean isSetPs() {
    return this.ps != null;
  }

  public void setPsIsSet(boolean value) {
    if (!value) {
      this.ps = null;
    }
  }

  public int getStartIndex() {
    return this.startIndex;
  }

  public SCPicturesMsg setStartIndex(int startIndex) {
    this.startIndex = startIndex;
    setStartIndexIsSet(true);
    return this;
  }

  public void unsetStartIndex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTINDEX_ISSET_ID);
  }

  /** Returns true if field startIndex is set (has been assigned a value) and false otherwise */
  public boolean isSetStartIndex() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTINDEX_ISSET_ID);
  }

  public void setStartIndexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTINDEX_ISSET_ID, value);
  }

  public int getEndIndex() {
    return this.endIndex;
  }

  public SCPicturesMsg setEndIndex(int endIndex) {
    this.endIndex = endIndex;
    setEndIndexIsSet(true);
    return this;
  }

  public void unsetEndIndex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDINDEX_ISSET_ID);
  }

  /** Returns true if field endIndex is set (has been assigned a value) and false otherwise */
  public boolean isSetEndIndex() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDINDEX_ISSET_ID);
  }

  public void setEndIndexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDINDEX_ISSET_ID, value);
  }

  public int getTotal() {
    return this.total;
  }

  public SCPicturesMsg setTotal(int total) {
    this.total = total;
    setTotalIsSet(true);
    return this;
  }

  public void unsetTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTAL_ISSET_ID);
  }

  /** Returns true if field total is set (has been assigned a value) and false otherwise */
  public boolean isSetTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTAL_ISSET_ID);
  }

  public void setTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTAL_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CHAR_ID:
      if (value == null) {
        unsetCharId();
      } else {
        setCharId((Long)value);
      }
      break;

    case CHAR_NAME:
      if (value == null) {
        unsetCharName();
      } else {
        setCharName((String)value);
      }
      break;

    case PS:
      if (value == null) {
        unsetPs();
      } else {
        setPs((List<com.ling9527.music.common.msg.auto.Picture>)value);
      }
      break;

    case START_INDEX:
      if (value == null) {
        unsetStartIndex();
      } else {
        setStartIndex((Integer)value);
      }
      break;

    case END_INDEX:
      if (value == null) {
        unsetEndIndex();
      } else {
        setEndIndex((Integer)value);
      }
      break;

    case TOTAL:
      if (value == null) {
        unsetTotal();
      } else {
        setTotal((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CHAR_ID:
      return Long.valueOf(getCharId());

    case CHAR_NAME:
      return getCharName();

    case PS:
      return getPs();

    case START_INDEX:
      return Integer.valueOf(getStartIndex());

    case END_INDEX:
      return Integer.valueOf(getEndIndex());

    case TOTAL:
      return Integer.valueOf(getTotal());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CHAR_ID:
      return isSetCharId();
    case CHAR_NAME:
      return isSetCharName();
    case PS:
      return isSetPs();
    case START_INDEX:
      return isSetStartIndex();
    case END_INDEX:
      return isSetEndIndex();
    case TOTAL:
      return isSetTotal();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCPicturesMsg)
      return this.equals((SCPicturesMsg)that);
    return false;
  }

  public boolean equals(SCPicturesMsg that) {
    if (that == null)
      return false;

    boolean this_present_charId = true;
    boolean that_present_charId = true;
    if (this_present_charId || that_present_charId) {
      if (!(this_present_charId && that_present_charId))
        return false;
      if (this.charId != that.charId)
        return false;
    }

    boolean this_present_charName = true && this.isSetCharName();
    boolean that_present_charName = true && that.isSetCharName();
    if (this_present_charName || that_present_charName) {
      if (!(this_present_charName && that_present_charName))
        return false;
      if (!this.charName.equals(that.charName))
        return false;
    }

    boolean this_present_ps = true && this.isSetPs();
    boolean that_present_ps = true && that.isSetPs();
    if (this_present_ps || that_present_ps) {
      if (!(this_present_ps && that_present_ps))
        return false;
      if (!this.ps.equals(that.ps))
        return false;
    }

    boolean this_present_startIndex = true;
    boolean that_present_startIndex = true;
    if (this_present_startIndex || that_present_startIndex) {
      if (!(this_present_startIndex && that_present_startIndex))
        return false;
      if (this.startIndex != that.startIndex)
        return false;
    }

    boolean this_present_endIndex = true;
    boolean that_present_endIndex = true;
    if (this_present_endIndex || that_present_endIndex) {
      if (!(this_present_endIndex && that_present_endIndex))
        return false;
      if (this.endIndex != that.endIndex)
        return false;
    }

    boolean this_present_total = true;
    boolean that_present_total = true;
    if (this_present_total || that_present_total) {
      if (!(this_present_total && that_present_total))
        return false;
      if (this.total != that.total)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCPicturesMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCPicturesMsg typedOther = (SCPicturesMsg)other;

    lastComparison = Boolean.valueOf(isSetCharId()).compareTo(typedOther.isSetCharId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCharId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.charId, typedOther.charId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCharName()).compareTo(typedOther.isSetCharName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCharName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.charName, typedOther.charName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPs()).compareTo(typedOther.isSetPs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ps, typedOther.ps);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartIndex()).compareTo(typedOther.isSetStartIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startIndex, typedOther.startIndex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndIndex()).compareTo(typedOther.isSetEndIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endIndex, typedOther.endIndex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotal()).compareTo(typedOther.isSetTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.total, typedOther.total);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCPicturesMsg(");
    boolean first = true;

    sb.append("charId:");
    sb.append(this.charId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("charName:");
    if (this.charName == null) {
      sb.append("null");
    } else {
      sb.append(this.charName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ps:");
    if (this.ps == null) {
      sb.append("null");
    } else {
      sb.append(this.ps);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("startIndex:");
    sb.append(this.startIndex);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endIndex:");
    sb.append(this.endIndex);
    first = false;
    if (!first) sb.append(", ");
    sb.append("total:");
    sb.append(this.total);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCPicturesMsgStandardSchemeFactory implements SchemeFactory {
    public SCPicturesMsgStandardScheme getScheme() {
      return new SCPicturesMsgStandardScheme();
    }
  }

  private static class SCPicturesMsgStandardScheme extends StandardScheme<SCPicturesMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCPicturesMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CHAR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.charId = iprot.readI64();
              struct.setCharIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CHAR_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.charName = iprot.readString();
              struct.setCharNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
                struct.ps = new ArrayList<com.ling9527.music.common.msg.auto.Picture>(_list80.size);
                for (int _i81 = 0; _i81 < _list80.size; ++_i81)
                {
                  com.ling9527.music.common.msg.auto.Picture _elem82; // required
                  _elem82 = new com.ling9527.music.common.msg.auto.Picture();
                  _elem82.read(iprot);
                  struct.ps.add(_elem82);
                }
                iprot.readListEnd();
              }
              struct.setPsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // START_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.startIndex = iprot.readI32();
              struct.setStartIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // END_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.endIndex = iprot.readI32();
              struct.setEndIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.total = iprot.readI32();
              struct.setTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCPicturesMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CHAR_ID_FIELD_DESC);
      oprot.writeI64(struct.charId);
      oprot.writeFieldEnd();
      if (struct.charName != null) {
        oprot.writeFieldBegin(CHAR_NAME_FIELD_DESC);
        oprot.writeString(struct.charName);
        oprot.writeFieldEnd();
      }
      if (struct.ps != null) {
        oprot.writeFieldBegin(PS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.ps.size()));
          for (com.ling9527.music.common.msg.auto.Picture _iter83 : struct.ps)
          {
            _iter83.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(START_INDEX_FIELD_DESC);
      oprot.writeI32(struct.startIndex);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(END_INDEX_FIELD_DESC);
      oprot.writeI32(struct.endIndex);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_FIELD_DESC);
      oprot.writeI32(struct.total);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCPicturesMsgTupleSchemeFactory implements SchemeFactory {
    public SCPicturesMsgTupleScheme getScheme() {
      return new SCPicturesMsgTupleScheme();
    }
  }

  private static class SCPicturesMsgTupleScheme extends TupleScheme<SCPicturesMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCPicturesMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCharId()) {
        optionals.set(0);
      }
      if (struct.isSetCharName()) {
        optionals.set(1);
      }
      if (struct.isSetPs()) {
        optionals.set(2);
      }
      if (struct.isSetStartIndex()) {
        optionals.set(3);
      }
      if (struct.isSetEndIndex()) {
        optionals.set(4);
      }
      if (struct.isSetTotal()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetCharId()) {
        oprot.writeI64(struct.charId);
      }
      if (struct.isSetCharName()) {
        oprot.writeString(struct.charName);
      }
      if (struct.isSetPs()) {
        {
          oprot.writeI32(struct.ps.size());
          for (com.ling9527.music.common.msg.auto.Picture _iter84 : struct.ps)
          {
            _iter84.write(oprot);
          }
        }
      }
      if (struct.isSetStartIndex()) {
        oprot.writeI32(struct.startIndex);
      }
      if (struct.isSetEndIndex()) {
        oprot.writeI32(struct.endIndex);
      }
      if (struct.isSetTotal()) {
        oprot.writeI32(struct.total);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCPicturesMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.charId = iprot.readI64();
        struct.setCharIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.charName = iprot.readString();
        struct.setCharNameIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list85 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.ps = new ArrayList<com.ling9527.music.common.msg.auto.Picture>(_list85.size);
          for (int _i86 = 0; _i86 < _list85.size; ++_i86)
          {
            com.ling9527.music.common.msg.auto.Picture _elem87; // required
            _elem87 = new com.ling9527.music.common.msg.auto.Picture();
            _elem87.read(iprot);
            struct.ps.add(_elem87);
          }
        }
        struct.setPsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.startIndex = iprot.readI32();
        struct.setStartIndexIsSet(true);
      }
      if (incoming.get(4)) {
        struct.endIndex = iprot.readI32();
        struct.setEndIndexIsSet(true);
      }
      if (incoming.get(5)) {
        struct.total = iprot.readI32();
        struct.setTotalIsSet(true);
      }
    }
  }

}

