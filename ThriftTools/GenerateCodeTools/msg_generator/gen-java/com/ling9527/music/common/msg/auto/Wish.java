/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Wish implements org.apache.thrift.TBase<Wish, Wish._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Wish");

  private static final org.apache.thrift.protocol.TField WISH_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("wishId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("items", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField OVER_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("overTime", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField OVER_CHAR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("overCharId", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField OVER_CHAR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("overCharName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField OVER_HEAD_ICON_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("overHeadIconId", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField OVER_SEX_FIELD_DESC = new org.apache.thrift.protocol.TField("overSex", org.apache.thrift.protocol.TType.BYTE, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new WishStandardSchemeFactory());
    schemes.put(TupleScheme.class, new WishTupleSchemeFactory());
  }

  public long wishId; // required
  public List<SimpleMallItem> items; // required
  public int createTime; // required
  public int overTime; // required
  public long overCharId; // required
  public String overCharName; // required
  public String overHeadIconId; // required
  public byte overSex; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    WISH_ID((short)1, "wishId"),
    ITEMS((short)2, "items"),
    CREATE_TIME((short)3, "createTime"),
    OVER_TIME((short)4, "overTime"),
    OVER_CHAR_ID((short)5, "overCharId"),
    OVER_CHAR_NAME((short)6, "overCharName"),
    OVER_HEAD_ICON_ID((short)7, "overHeadIconId"),
    OVER_SEX((short)8, "overSex");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // WISH_ID
          return WISH_ID;
        case 2: // ITEMS
          return ITEMS;
        case 3: // CREATE_TIME
          return CREATE_TIME;
        case 4: // OVER_TIME
          return OVER_TIME;
        case 5: // OVER_CHAR_ID
          return OVER_CHAR_ID;
        case 6: // OVER_CHAR_NAME
          return OVER_CHAR_NAME;
        case 7: // OVER_HEAD_ICON_ID
          return OVER_HEAD_ICON_ID;
        case 8: // OVER_SEX
          return OVER_SEX;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __WISHID_ISSET_ID = 0;
  private static final int __CREATETIME_ISSET_ID = 1;
  private static final int __OVERTIME_ISSET_ID = 2;
  private static final int __OVERCHARID_ISSET_ID = 3;
  private static final int __OVERSEX_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.WISH_ID, new org.apache.thrift.meta_data.FieldMetaData("wishId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ITEMS, new org.apache.thrift.meta_data.FieldMetaData("items", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SimpleMallItem.class))));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OVER_TIME, new org.apache.thrift.meta_data.FieldMetaData("overTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OVER_CHAR_ID, new org.apache.thrift.meta_data.FieldMetaData("overCharId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OVER_CHAR_NAME, new org.apache.thrift.meta_data.FieldMetaData("overCharName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OVER_HEAD_ICON_ID, new org.apache.thrift.meta_data.FieldMetaData("overHeadIconId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OVER_SEX, new org.apache.thrift.meta_data.FieldMetaData("overSex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Wish.class, metaDataMap);
  }

  public Wish() {
  }

  public Wish(
    long wishId,
    List<SimpleMallItem> items,
    int createTime,
    int overTime,
    long overCharId,
    String overCharName,
    String overHeadIconId,
    byte overSex)
  {
    this();
    this.wishId = wishId;
    setWishIdIsSet(true);
    this.items = items;
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.overTime = overTime;
    setOverTimeIsSet(true);
    this.overCharId = overCharId;
    setOverCharIdIsSet(true);
    this.overCharName = overCharName;
    this.overHeadIconId = overHeadIconId;
    this.overSex = overSex;
    setOverSexIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Wish(Wish other) {
    __isset_bitfield = other.__isset_bitfield;
    this.wishId = other.wishId;
    if (other.isSetItems()) {
      List<SimpleMallItem> __this__items = new ArrayList<SimpleMallItem>();
      for (SimpleMallItem other_element : other.items) {
        __this__items.add(new SimpleMallItem(other_element));
      }
      this.items = __this__items;
    }
    this.createTime = other.createTime;
    this.overTime = other.overTime;
    this.overCharId = other.overCharId;
    if (other.isSetOverCharName()) {
      this.overCharName = other.overCharName;
    }
    if (other.isSetOverHeadIconId()) {
      this.overHeadIconId = other.overHeadIconId;
    }
    this.overSex = other.overSex;
  }

  public Wish deepCopy() {
    return new Wish(this);
  }

  @Override
  public void clear() {
    setWishIdIsSet(false);
    this.wishId = 0;
    this.items = null;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    setOverTimeIsSet(false);
    this.overTime = 0;
    setOverCharIdIsSet(false);
    this.overCharId = 0;
    this.overCharName = null;
    this.overHeadIconId = null;
    setOverSexIsSet(false);
    this.overSex = 0;
  }

  public long getWishId() {
    return this.wishId;
  }

  public Wish setWishId(long wishId) {
    this.wishId = wishId;
    setWishIdIsSet(true);
    return this;
  }

  public void unsetWishId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WISHID_ISSET_ID);
  }

  /** Returns true if field wishId is set (has been assigned a value) and false otherwise */
  public boolean isSetWishId() {
    return EncodingUtils.testBit(__isset_bitfield, __WISHID_ISSET_ID);
  }

  public void setWishIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WISHID_ISSET_ID, value);
  }

  public int getItemsSize() {
    return (this.items == null) ? 0 : this.items.size();
  }

  public java.util.Iterator<SimpleMallItem> getItemsIterator() {
    return (this.items == null) ? null : this.items.iterator();
  }

  public void addToItems(SimpleMallItem elem) {
    if (this.items == null) {
      this.items = new ArrayList<SimpleMallItem>();
    }
    this.items.add(elem);
  }

  public List<SimpleMallItem> getItems() {
    return this.items;
  }

  public Wish setItems(List<SimpleMallItem> items) {
    this.items = items;
    return this;
  }

  public void unsetItems() {
    this.items = null;
  }

  /** Returns true if field items is set (has been assigned a value) and false otherwise */
  public boolean isSetItems() {
    return this.items != null;
  }

  public void setItemsIsSet(boolean value) {
    if (!value) {
      this.items = null;
    }
  }

  public int getCreateTime() {
    return this.createTime;
  }

  public Wish setCreateTime(int createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public int getOverTime() {
    return this.overTime;
  }

  public Wish setOverTime(int overTime) {
    this.overTime = overTime;
    setOverTimeIsSet(true);
    return this;
  }

  public void unsetOverTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERTIME_ISSET_ID);
  }

  /** Returns true if field overTime is set (has been assigned a value) and false otherwise */
  public boolean isSetOverTime() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERTIME_ISSET_ID);
  }

  public void setOverTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERTIME_ISSET_ID, value);
  }

  public long getOverCharId() {
    return this.overCharId;
  }

  public Wish setOverCharId(long overCharId) {
    this.overCharId = overCharId;
    setOverCharIdIsSet(true);
    return this;
  }

  public void unsetOverCharId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERCHARID_ISSET_ID);
  }

  /** Returns true if field overCharId is set (has been assigned a value) and false otherwise */
  public boolean isSetOverCharId() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERCHARID_ISSET_ID);
  }

  public void setOverCharIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERCHARID_ISSET_ID, value);
  }

  public String getOverCharName() {
    return this.overCharName;
  }

  public Wish setOverCharName(String overCharName) {
    this.overCharName = overCharName;
    return this;
  }

  public void unsetOverCharName() {
    this.overCharName = null;
  }

  /** Returns true if field overCharName is set (has been assigned a value) and false otherwise */
  public boolean isSetOverCharName() {
    return this.overCharName != null;
  }

  public void setOverCharNameIsSet(boolean value) {
    if (!value) {
      this.overCharName = null;
    }
  }

  public String getOverHeadIconId() {
    return this.overHeadIconId;
  }

  public Wish setOverHeadIconId(String overHeadIconId) {
    this.overHeadIconId = overHeadIconId;
    return this;
  }

  public void unsetOverHeadIconId() {
    this.overHeadIconId = null;
  }

  /** Returns true if field overHeadIconId is set (has been assigned a value) and false otherwise */
  public boolean isSetOverHeadIconId() {
    return this.overHeadIconId != null;
  }

  public void setOverHeadIconIdIsSet(boolean value) {
    if (!value) {
      this.overHeadIconId = null;
    }
  }

  public byte getOverSex() {
    return this.overSex;
  }

  public Wish setOverSex(byte overSex) {
    this.overSex = overSex;
    setOverSexIsSet(true);
    return this;
  }

  public void unsetOverSex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERSEX_ISSET_ID);
  }

  /** Returns true if field overSex is set (has been assigned a value) and false otherwise */
  public boolean isSetOverSex() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERSEX_ISSET_ID);
  }

  public void setOverSexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERSEX_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case WISH_ID:
      if (value == null) {
        unsetWishId();
      } else {
        setWishId((Long)value);
      }
      break;

    case ITEMS:
      if (value == null) {
        unsetItems();
      } else {
        setItems((List<SimpleMallItem>)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Integer)value);
      }
      break;

    case OVER_TIME:
      if (value == null) {
        unsetOverTime();
      } else {
        setOverTime((Integer)value);
      }
      break;

    case OVER_CHAR_ID:
      if (value == null) {
        unsetOverCharId();
      } else {
        setOverCharId((Long)value);
      }
      break;

    case OVER_CHAR_NAME:
      if (value == null) {
        unsetOverCharName();
      } else {
        setOverCharName((String)value);
      }
      break;

    case OVER_HEAD_ICON_ID:
      if (value == null) {
        unsetOverHeadIconId();
      } else {
        setOverHeadIconId((String)value);
      }
      break;

    case OVER_SEX:
      if (value == null) {
        unsetOverSex();
      } else {
        setOverSex((Byte)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case WISH_ID:
      return Long.valueOf(getWishId());

    case ITEMS:
      return getItems();

    case CREATE_TIME:
      return Integer.valueOf(getCreateTime());

    case OVER_TIME:
      return Integer.valueOf(getOverTime());

    case OVER_CHAR_ID:
      return Long.valueOf(getOverCharId());

    case OVER_CHAR_NAME:
      return getOverCharName();

    case OVER_HEAD_ICON_ID:
      return getOverHeadIconId();

    case OVER_SEX:
      return Byte.valueOf(getOverSex());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case WISH_ID:
      return isSetWishId();
    case ITEMS:
      return isSetItems();
    case CREATE_TIME:
      return isSetCreateTime();
    case OVER_TIME:
      return isSetOverTime();
    case OVER_CHAR_ID:
      return isSetOverCharId();
    case OVER_CHAR_NAME:
      return isSetOverCharName();
    case OVER_HEAD_ICON_ID:
      return isSetOverHeadIconId();
    case OVER_SEX:
      return isSetOverSex();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Wish)
      return this.equals((Wish)that);
    return false;
  }

  public boolean equals(Wish that) {
    if (that == null)
      return false;

    boolean this_present_wishId = true;
    boolean that_present_wishId = true;
    if (this_present_wishId || that_present_wishId) {
      if (!(this_present_wishId && that_present_wishId))
        return false;
      if (this.wishId != that.wishId)
        return false;
    }

    boolean this_present_items = true && this.isSetItems();
    boolean that_present_items = true && that.isSetItems();
    if (this_present_items || that_present_items) {
      if (!(this_present_items && that_present_items))
        return false;
      if (!this.items.equals(that.items))
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_overTime = true;
    boolean that_present_overTime = true;
    if (this_present_overTime || that_present_overTime) {
      if (!(this_present_overTime && that_present_overTime))
        return false;
      if (this.overTime != that.overTime)
        return false;
    }

    boolean this_present_overCharId = true;
    boolean that_present_overCharId = true;
    if (this_present_overCharId || that_present_overCharId) {
      if (!(this_present_overCharId && that_present_overCharId))
        return false;
      if (this.overCharId != that.overCharId)
        return false;
    }

    boolean this_present_overCharName = true && this.isSetOverCharName();
    boolean that_present_overCharName = true && that.isSetOverCharName();
    if (this_present_overCharName || that_present_overCharName) {
      if (!(this_present_overCharName && that_present_overCharName))
        return false;
      if (!this.overCharName.equals(that.overCharName))
        return false;
    }

    boolean this_present_overHeadIconId = true && this.isSetOverHeadIconId();
    boolean that_present_overHeadIconId = true && that.isSetOverHeadIconId();
    if (this_present_overHeadIconId || that_present_overHeadIconId) {
      if (!(this_present_overHeadIconId && that_present_overHeadIconId))
        return false;
      if (!this.overHeadIconId.equals(that.overHeadIconId))
        return false;
    }

    boolean this_present_overSex = true;
    boolean that_present_overSex = true;
    if (this_present_overSex || that_present_overSex) {
      if (!(this_present_overSex && that_present_overSex))
        return false;
      if (this.overSex != that.overSex)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Wish other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Wish typedOther = (Wish)other;

    lastComparison = Boolean.valueOf(isSetWishId()).compareTo(typedOther.isSetWishId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWishId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wishId, typedOther.wishId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItems()).compareTo(typedOther.isSetItems());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItems()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.items, typedOther.items);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(typedOther.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, typedOther.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverTime()).compareTo(typedOther.isSetOverTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overTime, typedOther.overTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverCharId()).compareTo(typedOther.isSetOverCharId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverCharId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overCharId, typedOther.overCharId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverCharName()).compareTo(typedOther.isSetOverCharName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverCharName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overCharName, typedOther.overCharName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverHeadIconId()).compareTo(typedOther.isSetOverHeadIconId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverHeadIconId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overHeadIconId, typedOther.overHeadIconId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverSex()).compareTo(typedOther.isSetOverSex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverSex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overSex, typedOther.overSex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Wish(");
    boolean first = true;

    sb.append("wishId:");
    sb.append(this.wishId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("items:");
    if (this.items == null) {
      sb.append("null");
    } else {
      sb.append(this.items);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("overTime:");
    sb.append(this.overTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("overCharId:");
    sb.append(this.overCharId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("overCharName:");
    if (this.overCharName == null) {
      sb.append("null");
    } else {
      sb.append(this.overCharName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("overHeadIconId:");
    if (this.overHeadIconId == null) {
      sb.append("null");
    } else {
      sb.append(this.overHeadIconId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("overSex:");
    sb.append(this.overSex);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WishStandardSchemeFactory implements SchemeFactory {
    public WishStandardScheme getScheme() {
      return new WishStandardScheme();
    }
  }

  private static class WishStandardScheme extends StandardScheme<Wish> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Wish struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // WISH_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.wishId = iprot.readI64();
              struct.setWishIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ITEMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list172 = iprot.readListBegin();
                struct.items = new ArrayList<SimpleMallItem>(_list172.size);
                for (int _i173 = 0; _i173 < _list172.size; ++_i173)
                {
                  SimpleMallItem _elem174; // required
                  _elem174 = new SimpleMallItem();
                  _elem174.read(iprot);
                  struct.items.add(_elem174);
                }
                iprot.readListEnd();
              }
              struct.setItemsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createTime = iprot.readI32();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OVER_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.overTime = iprot.readI32();
              struct.setOverTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OVER_CHAR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.overCharId = iprot.readI64();
              struct.setOverCharIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // OVER_CHAR_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.overCharName = iprot.readString();
              struct.setOverCharNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // OVER_HEAD_ICON_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.overHeadIconId = iprot.readString();
              struct.setOverHeadIconIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // OVER_SEX
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.overSex = iprot.readByte();
              struct.setOverSexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Wish struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(WISH_ID_FIELD_DESC);
      oprot.writeI64(struct.wishId);
      oprot.writeFieldEnd();
      if (struct.items != null) {
        oprot.writeFieldBegin(ITEMS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.items.size()));
          for (SimpleMallItem _iter175 : struct.items)
          {
            _iter175.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI32(struct.createTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OVER_TIME_FIELD_DESC);
      oprot.writeI32(struct.overTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OVER_CHAR_ID_FIELD_DESC);
      oprot.writeI64(struct.overCharId);
      oprot.writeFieldEnd();
      if (struct.overCharName != null) {
        oprot.writeFieldBegin(OVER_CHAR_NAME_FIELD_DESC);
        oprot.writeString(struct.overCharName);
        oprot.writeFieldEnd();
      }
      if (struct.overHeadIconId != null) {
        oprot.writeFieldBegin(OVER_HEAD_ICON_ID_FIELD_DESC);
        oprot.writeString(struct.overHeadIconId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OVER_SEX_FIELD_DESC);
      oprot.writeByte(struct.overSex);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WishTupleSchemeFactory implements SchemeFactory {
    public WishTupleScheme getScheme() {
      return new WishTupleScheme();
    }
  }

  private static class WishTupleScheme extends TupleScheme<Wish> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Wish struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetWishId()) {
        optionals.set(0);
      }
      if (struct.isSetItems()) {
        optionals.set(1);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(2);
      }
      if (struct.isSetOverTime()) {
        optionals.set(3);
      }
      if (struct.isSetOverCharId()) {
        optionals.set(4);
      }
      if (struct.isSetOverCharName()) {
        optionals.set(5);
      }
      if (struct.isSetOverHeadIconId()) {
        optionals.set(6);
      }
      if (struct.isSetOverSex()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetWishId()) {
        oprot.writeI64(struct.wishId);
      }
      if (struct.isSetItems()) {
        {
          oprot.writeI32(struct.items.size());
          for (SimpleMallItem _iter176 : struct.items)
          {
            _iter176.write(oprot);
          }
        }
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI32(struct.createTime);
      }
      if (struct.isSetOverTime()) {
        oprot.writeI32(struct.overTime);
      }
      if (struct.isSetOverCharId()) {
        oprot.writeI64(struct.overCharId);
      }
      if (struct.isSetOverCharName()) {
        oprot.writeString(struct.overCharName);
      }
      if (struct.isSetOverHeadIconId()) {
        oprot.writeString(struct.overHeadIconId);
      }
      if (struct.isSetOverSex()) {
        oprot.writeByte(struct.overSex);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Wish struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.wishId = iprot.readI64();
        struct.setWishIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list177 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.items = new ArrayList<SimpleMallItem>(_list177.size);
          for (int _i178 = 0; _i178 < _list177.size; ++_i178)
          {
            SimpleMallItem _elem179; // required
            _elem179 = new SimpleMallItem();
            _elem179.read(iprot);
            struct.items.add(_elem179);
          }
        }
        struct.setItemsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.createTime = iprot.readI32();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.overTime = iprot.readI32();
        struct.setOverTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.overCharId = iprot.readI64();
        struct.setOverCharIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.overCharName = iprot.readString();
        struct.setOverCharNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.overHeadIconId = iprot.readString();
        struct.setOverHeadIconIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.overSex = iprot.readByte();
        struct.setOverSexIsSet(true);
      }
    }
  }

}

