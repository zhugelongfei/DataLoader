/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SCChapterInfoResultMsg implements org.apache.thrift.TBase<SCChapterInfoResultMsg, SCChapterInfoResultMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCChapterInfoResultMsg");

  private static final org.apache.thrift.protocol.TField CHAPTER_TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("chapterTaskId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CHAPTER_NAME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("chapterNameId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField MUSICID_FIELD_DESC = new org.apache.thrift.protocol.TField("musicid", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("level", org.apache.thrift.protocol.TType.BYTE, (short)4);
  private static final org.apache.thrift.protocol.TField MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("mode", org.apache.thrift.protocol.TType.BYTE, (short)5);
  private static final org.apache.thrift.protocol.TField COUTER_PROCESS_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("couterProcessList", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField ONE_STAR_PRIZE_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("oneStarPrizeInfos", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField TWO_STAR_PRIZE_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("twoStarPrizeInfos", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField THREE_STAR_PRIZE_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("threeStarPrizeInfos", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField OPER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("operType", org.apache.thrift.protocol.TType.I32, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCChapterInfoResultMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCChapterInfoResultMsgTupleSchemeFactory());
  }

  public int chapterTaskId; // required
  public int chapterNameId; // required
  public int musicid; // required
  public byte level; // required
  public byte mode; // required
  public List<com.ling9527.music.common.msg.auto.CourseTaskProcess> couterProcessList; // required
  /**
   * 1星奖励
   */
  public com.ling9527.music.common.msg.auto.PrizeInfo oneStarPrizeInfos; // required
  /**
   * 2星奖励
   */
  public com.ling9527.music.common.msg.auto.PrizeInfo twoStarPrizeInfos; // required
  /**
   * 3星奖励
   */
  public com.ling9527.music.common.msg.auto.PrizeInfo threeStarPrizeInfos; // required
  /**
   * 
   * @see com.ling9527.music.common.msg.auto.ChapterOperType
   */
  public com.ling9527.music.common.msg.auto.ChapterOperType operType; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CHAPTER_TASK_ID((short)1, "chapterTaskId"),
    CHAPTER_NAME_ID((short)2, "chapterNameId"),
    MUSICID((short)3, "musicid"),
    LEVEL((short)4, "level"),
    MODE((short)5, "mode"),
    COUTER_PROCESS_LIST((short)6, "couterProcessList"),
    /**
     * 1星奖励
     */
    ONE_STAR_PRIZE_INFOS((short)7, "oneStarPrizeInfos"),
    /**
     * 2星奖励
     */
    TWO_STAR_PRIZE_INFOS((short)8, "twoStarPrizeInfos"),
    /**
     * 3星奖励
     */
    THREE_STAR_PRIZE_INFOS((short)9, "threeStarPrizeInfos"),
    /**
     * 
     * @see com.ling9527.music.common.msg.auto.ChapterOperType
     */
    OPER_TYPE((short)10, "operType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CHAPTER_TASK_ID
          return CHAPTER_TASK_ID;
        case 2: // CHAPTER_NAME_ID
          return CHAPTER_NAME_ID;
        case 3: // MUSICID
          return MUSICID;
        case 4: // LEVEL
          return LEVEL;
        case 5: // MODE
          return MODE;
        case 6: // COUTER_PROCESS_LIST
          return COUTER_PROCESS_LIST;
        case 7: // ONE_STAR_PRIZE_INFOS
          return ONE_STAR_PRIZE_INFOS;
        case 8: // TWO_STAR_PRIZE_INFOS
          return TWO_STAR_PRIZE_INFOS;
        case 9: // THREE_STAR_PRIZE_INFOS
          return THREE_STAR_PRIZE_INFOS;
        case 10: // OPER_TYPE
          return OPER_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CHAPTERTASKID_ISSET_ID = 0;
  private static final int __CHAPTERNAMEID_ISSET_ID = 1;
  private static final int __MUSICID_ISSET_ID = 2;
  private static final int __LEVEL_ISSET_ID = 3;
  private static final int __MODE_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CHAPTER_TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("chapterTaskId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CHAPTER_NAME_ID, new org.apache.thrift.meta_data.FieldMetaData("chapterNameId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MUSICID, new org.apache.thrift.meta_data.FieldMetaData("musicid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LEVEL, new org.apache.thrift.meta_data.FieldMetaData("level", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.MODE, new org.apache.thrift.meta_data.FieldMetaData("mode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.COUTER_PROCESS_LIST, new org.apache.thrift.meta_data.FieldMetaData("couterProcessList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.CourseTaskProcess.class))));
    tmpMap.put(_Fields.ONE_STAR_PRIZE_INFOS, new org.apache.thrift.meta_data.FieldMetaData("oneStarPrizeInfos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.PrizeInfo.class)));
    tmpMap.put(_Fields.TWO_STAR_PRIZE_INFOS, new org.apache.thrift.meta_data.FieldMetaData("twoStarPrizeInfos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.PrizeInfo.class)));
    tmpMap.put(_Fields.THREE_STAR_PRIZE_INFOS, new org.apache.thrift.meta_data.FieldMetaData("threeStarPrizeInfos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.PrizeInfo.class)));
    tmpMap.put(_Fields.OPER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("operType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.ling9527.music.common.msg.auto.ChapterOperType.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCChapterInfoResultMsg.class, metaDataMap);
  }

  public SCChapterInfoResultMsg() {
  }

  public SCChapterInfoResultMsg(
    int chapterTaskId,
    int chapterNameId,
    int musicid,
    byte level,
    byte mode,
    List<com.ling9527.music.common.msg.auto.CourseTaskProcess> couterProcessList,
    com.ling9527.music.common.msg.auto.PrizeInfo oneStarPrizeInfos,
    com.ling9527.music.common.msg.auto.PrizeInfo twoStarPrizeInfos,
    com.ling9527.music.common.msg.auto.PrizeInfo threeStarPrizeInfos,
    com.ling9527.music.common.msg.auto.ChapterOperType operType)
  {
    this();
    this.chapterTaskId = chapterTaskId;
    setChapterTaskIdIsSet(true);
    this.chapterNameId = chapterNameId;
    setChapterNameIdIsSet(true);
    this.musicid = musicid;
    setMusicidIsSet(true);
    this.level = level;
    setLevelIsSet(true);
    this.mode = mode;
    setModeIsSet(true);
    this.couterProcessList = couterProcessList;
    this.oneStarPrizeInfos = oneStarPrizeInfos;
    this.twoStarPrizeInfos = twoStarPrizeInfos;
    this.threeStarPrizeInfos = threeStarPrizeInfos;
    this.operType = operType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCChapterInfoResultMsg(SCChapterInfoResultMsg other) {
    __isset_bitfield = other.__isset_bitfield;
    this.chapterTaskId = other.chapterTaskId;
    this.chapterNameId = other.chapterNameId;
    this.musicid = other.musicid;
    this.level = other.level;
    this.mode = other.mode;
    if (other.isSetCouterProcessList()) {
      List<com.ling9527.music.common.msg.auto.CourseTaskProcess> __this__couterProcessList = new ArrayList<com.ling9527.music.common.msg.auto.CourseTaskProcess>();
      for (com.ling9527.music.common.msg.auto.CourseTaskProcess other_element : other.couterProcessList) {
        __this__couterProcessList.add(new com.ling9527.music.common.msg.auto.CourseTaskProcess(other_element));
      }
      this.couterProcessList = __this__couterProcessList;
    }
    if (other.isSetOneStarPrizeInfos()) {
      this.oneStarPrizeInfos = new com.ling9527.music.common.msg.auto.PrizeInfo(other.oneStarPrizeInfos);
    }
    if (other.isSetTwoStarPrizeInfos()) {
      this.twoStarPrizeInfos = new com.ling9527.music.common.msg.auto.PrizeInfo(other.twoStarPrizeInfos);
    }
    if (other.isSetThreeStarPrizeInfos()) {
      this.threeStarPrizeInfos = new com.ling9527.music.common.msg.auto.PrizeInfo(other.threeStarPrizeInfos);
    }
    if (other.isSetOperType()) {
      this.operType = other.operType;
    }
  }

  public SCChapterInfoResultMsg deepCopy() {
    return new SCChapterInfoResultMsg(this);
  }

  @Override
  public void clear() {
    setChapterTaskIdIsSet(false);
    this.chapterTaskId = 0;
    setChapterNameIdIsSet(false);
    this.chapterNameId = 0;
    setMusicidIsSet(false);
    this.musicid = 0;
    setLevelIsSet(false);
    this.level = 0;
    setModeIsSet(false);
    this.mode = 0;
    this.couterProcessList = null;
    this.oneStarPrizeInfos = null;
    this.twoStarPrizeInfos = null;
    this.threeStarPrizeInfos = null;
    this.operType = null;
  }

  public int getChapterTaskId() {
    return this.chapterTaskId;
  }

  public SCChapterInfoResultMsg setChapterTaskId(int chapterTaskId) {
    this.chapterTaskId = chapterTaskId;
    setChapterTaskIdIsSet(true);
    return this;
  }

  public void unsetChapterTaskId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHAPTERTASKID_ISSET_ID);
  }

  /** Returns true if field chapterTaskId is set (has been assigned a value) and false otherwise */
  public boolean isSetChapterTaskId() {
    return EncodingUtils.testBit(__isset_bitfield, __CHAPTERTASKID_ISSET_ID);
  }

  public void setChapterTaskIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHAPTERTASKID_ISSET_ID, value);
  }

  public int getChapterNameId() {
    return this.chapterNameId;
  }

  public SCChapterInfoResultMsg setChapterNameId(int chapterNameId) {
    this.chapterNameId = chapterNameId;
    setChapterNameIdIsSet(true);
    return this;
  }

  public void unsetChapterNameId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHAPTERNAMEID_ISSET_ID);
  }

  /** Returns true if field chapterNameId is set (has been assigned a value) and false otherwise */
  public boolean isSetChapterNameId() {
    return EncodingUtils.testBit(__isset_bitfield, __CHAPTERNAMEID_ISSET_ID);
  }

  public void setChapterNameIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHAPTERNAMEID_ISSET_ID, value);
  }

  public int getMusicid() {
    return this.musicid;
  }

  public SCChapterInfoResultMsg setMusicid(int musicid) {
    this.musicid = musicid;
    setMusicidIsSet(true);
    return this;
  }

  public void unsetMusicid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MUSICID_ISSET_ID);
  }

  /** Returns true if field musicid is set (has been assigned a value) and false otherwise */
  public boolean isSetMusicid() {
    return EncodingUtils.testBit(__isset_bitfield, __MUSICID_ISSET_ID);
  }

  public void setMusicidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MUSICID_ISSET_ID, value);
  }

  public byte getLevel() {
    return this.level;
  }

  public SCChapterInfoResultMsg setLevel(byte level) {
    this.level = level;
    setLevelIsSet(true);
    return this;
  }

  public void unsetLevel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEVEL_ISSET_ID);
  }

  /** Returns true if field level is set (has been assigned a value) and false otherwise */
  public boolean isSetLevel() {
    return EncodingUtils.testBit(__isset_bitfield, __LEVEL_ISSET_ID);
  }

  public void setLevelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEVEL_ISSET_ID, value);
  }

  public byte getMode() {
    return this.mode;
  }

  public SCChapterInfoResultMsg setMode(byte mode) {
    this.mode = mode;
    setModeIsSet(true);
    return this;
  }

  public void unsetMode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MODE_ISSET_ID);
  }

  /** Returns true if field mode is set (has been assigned a value) and false otherwise */
  public boolean isSetMode() {
    return EncodingUtils.testBit(__isset_bitfield, __MODE_ISSET_ID);
  }

  public void setModeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MODE_ISSET_ID, value);
  }

  public int getCouterProcessListSize() {
    return (this.couterProcessList == null) ? 0 : this.couterProcessList.size();
  }

  public java.util.Iterator<com.ling9527.music.common.msg.auto.CourseTaskProcess> getCouterProcessListIterator() {
    return (this.couterProcessList == null) ? null : this.couterProcessList.iterator();
  }

  public void addToCouterProcessList(com.ling9527.music.common.msg.auto.CourseTaskProcess elem) {
    if (this.couterProcessList == null) {
      this.couterProcessList = new ArrayList<com.ling9527.music.common.msg.auto.CourseTaskProcess>();
    }
    this.couterProcessList.add(elem);
  }

  public List<com.ling9527.music.common.msg.auto.CourseTaskProcess> getCouterProcessList() {
    return this.couterProcessList;
  }

  public SCChapterInfoResultMsg setCouterProcessList(List<com.ling9527.music.common.msg.auto.CourseTaskProcess> couterProcessList) {
    this.couterProcessList = couterProcessList;
    return this;
  }

  public void unsetCouterProcessList() {
    this.couterProcessList = null;
  }

  /** Returns true if field couterProcessList is set (has been assigned a value) and false otherwise */
  public boolean isSetCouterProcessList() {
    return this.couterProcessList != null;
  }

  public void setCouterProcessListIsSet(boolean value) {
    if (!value) {
      this.couterProcessList = null;
    }
  }

  /**
   * 1星奖励
   */
  public com.ling9527.music.common.msg.auto.PrizeInfo getOneStarPrizeInfos() {
    return this.oneStarPrizeInfos;
  }

  /**
   * 1星奖励
   */
  public SCChapterInfoResultMsg setOneStarPrizeInfos(com.ling9527.music.common.msg.auto.PrizeInfo oneStarPrizeInfos) {
    this.oneStarPrizeInfos = oneStarPrizeInfos;
    return this;
  }

  public void unsetOneStarPrizeInfos() {
    this.oneStarPrizeInfos = null;
  }

  /** Returns true if field oneStarPrizeInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetOneStarPrizeInfos() {
    return this.oneStarPrizeInfos != null;
  }

  public void setOneStarPrizeInfosIsSet(boolean value) {
    if (!value) {
      this.oneStarPrizeInfos = null;
    }
  }

  /**
   * 2星奖励
   */
  public com.ling9527.music.common.msg.auto.PrizeInfo getTwoStarPrizeInfos() {
    return this.twoStarPrizeInfos;
  }

  /**
   * 2星奖励
   */
  public SCChapterInfoResultMsg setTwoStarPrizeInfos(com.ling9527.music.common.msg.auto.PrizeInfo twoStarPrizeInfos) {
    this.twoStarPrizeInfos = twoStarPrizeInfos;
    return this;
  }

  public void unsetTwoStarPrizeInfos() {
    this.twoStarPrizeInfos = null;
  }

  /** Returns true if field twoStarPrizeInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetTwoStarPrizeInfos() {
    return this.twoStarPrizeInfos != null;
  }

  public void setTwoStarPrizeInfosIsSet(boolean value) {
    if (!value) {
      this.twoStarPrizeInfos = null;
    }
  }

  /**
   * 3星奖励
   */
  public com.ling9527.music.common.msg.auto.PrizeInfo getThreeStarPrizeInfos() {
    return this.threeStarPrizeInfos;
  }

  /**
   * 3星奖励
   */
  public SCChapterInfoResultMsg setThreeStarPrizeInfos(com.ling9527.music.common.msg.auto.PrizeInfo threeStarPrizeInfos) {
    this.threeStarPrizeInfos = threeStarPrizeInfos;
    return this;
  }

  public void unsetThreeStarPrizeInfos() {
    this.threeStarPrizeInfos = null;
  }

  /** Returns true if field threeStarPrizeInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetThreeStarPrizeInfos() {
    return this.threeStarPrizeInfos != null;
  }

  public void setThreeStarPrizeInfosIsSet(boolean value) {
    if (!value) {
      this.threeStarPrizeInfos = null;
    }
  }

  /**
   * 
   * @see com.ling9527.music.common.msg.auto.ChapterOperType
   */
  public com.ling9527.music.common.msg.auto.ChapterOperType getOperType() {
    return this.operType;
  }

  /**
   * 
   * @see com.ling9527.music.common.msg.auto.ChapterOperType
   */
  public SCChapterInfoResultMsg setOperType(com.ling9527.music.common.msg.auto.ChapterOperType operType) {
    this.operType = operType;
    return this;
  }

  public void unsetOperType() {
    this.operType = null;
  }

  /** Returns true if field operType is set (has been assigned a value) and false otherwise */
  public boolean isSetOperType() {
    return this.operType != null;
  }

  public void setOperTypeIsSet(boolean value) {
    if (!value) {
      this.operType = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CHAPTER_TASK_ID:
      if (value == null) {
        unsetChapterTaskId();
      } else {
        setChapterTaskId((Integer)value);
      }
      break;

    case CHAPTER_NAME_ID:
      if (value == null) {
        unsetChapterNameId();
      } else {
        setChapterNameId((Integer)value);
      }
      break;

    case MUSICID:
      if (value == null) {
        unsetMusicid();
      } else {
        setMusicid((Integer)value);
      }
      break;

    case LEVEL:
      if (value == null) {
        unsetLevel();
      } else {
        setLevel((Byte)value);
      }
      break;

    case MODE:
      if (value == null) {
        unsetMode();
      } else {
        setMode((Byte)value);
      }
      break;

    case COUTER_PROCESS_LIST:
      if (value == null) {
        unsetCouterProcessList();
      } else {
        setCouterProcessList((List<com.ling9527.music.common.msg.auto.CourseTaskProcess>)value);
      }
      break;

    case ONE_STAR_PRIZE_INFOS:
      if (value == null) {
        unsetOneStarPrizeInfos();
      } else {
        setOneStarPrizeInfos((com.ling9527.music.common.msg.auto.PrizeInfo)value);
      }
      break;

    case TWO_STAR_PRIZE_INFOS:
      if (value == null) {
        unsetTwoStarPrizeInfos();
      } else {
        setTwoStarPrizeInfos((com.ling9527.music.common.msg.auto.PrizeInfo)value);
      }
      break;

    case THREE_STAR_PRIZE_INFOS:
      if (value == null) {
        unsetThreeStarPrizeInfos();
      } else {
        setThreeStarPrizeInfos((com.ling9527.music.common.msg.auto.PrizeInfo)value);
      }
      break;

    case OPER_TYPE:
      if (value == null) {
        unsetOperType();
      } else {
        setOperType((com.ling9527.music.common.msg.auto.ChapterOperType)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CHAPTER_TASK_ID:
      return Integer.valueOf(getChapterTaskId());

    case CHAPTER_NAME_ID:
      return Integer.valueOf(getChapterNameId());

    case MUSICID:
      return Integer.valueOf(getMusicid());

    case LEVEL:
      return Byte.valueOf(getLevel());

    case MODE:
      return Byte.valueOf(getMode());

    case COUTER_PROCESS_LIST:
      return getCouterProcessList();

    case ONE_STAR_PRIZE_INFOS:
      return getOneStarPrizeInfos();

    case TWO_STAR_PRIZE_INFOS:
      return getTwoStarPrizeInfos();

    case THREE_STAR_PRIZE_INFOS:
      return getThreeStarPrizeInfos();

    case OPER_TYPE:
      return getOperType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CHAPTER_TASK_ID:
      return isSetChapterTaskId();
    case CHAPTER_NAME_ID:
      return isSetChapterNameId();
    case MUSICID:
      return isSetMusicid();
    case LEVEL:
      return isSetLevel();
    case MODE:
      return isSetMode();
    case COUTER_PROCESS_LIST:
      return isSetCouterProcessList();
    case ONE_STAR_PRIZE_INFOS:
      return isSetOneStarPrizeInfos();
    case TWO_STAR_PRIZE_INFOS:
      return isSetTwoStarPrizeInfos();
    case THREE_STAR_PRIZE_INFOS:
      return isSetThreeStarPrizeInfos();
    case OPER_TYPE:
      return isSetOperType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCChapterInfoResultMsg)
      return this.equals((SCChapterInfoResultMsg)that);
    return false;
  }

  public boolean equals(SCChapterInfoResultMsg that) {
    if (that == null)
      return false;

    boolean this_present_chapterTaskId = true;
    boolean that_present_chapterTaskId = true;
    if (this_present_chapterTaskId || that_present_chapterTaskId) {
      if (!(this_present_chapterTaskId && that_present_chapterTaskId))
        return false;
      if (this.chapterTaskId != that.chapterTaskId)
        return false;
    }

    boolean this_present_chapterNameId = true;
    boolean that_present_chapterNameId = true;
    if (this_present_chapterNameId || that_present_chapterNameId) {
      if (!(this_present_chapterNameId && that_present_chapterNameId))
        return false;
      if (this.chapterNameId != that.chapterNameId)
        return false;
    }

    boolean this_present_musicid = true;
    boolean that_present_musicid = true;
    if (this_present_musicid || that_present_musicid) {
      if (!(this_present_musicid && that_present_musicid))
        return false;
      if (this.musicid != that.musicid)
        return false;
    }

    boolean this_present_level = true;
    boolean that_present_level = true;
    if (this_present_level || that_present_level) {
      if (!(this_present_level && that_present_level))
        return false;
      if (this.level != that.level)
        return false;
    }

    boolean this_present_mode = true;
    boolean that_present_mode = true;
    if (this_present_mode || that_present_mode) {
      if (!(this_present_mode && that_present_mode))
        return false;
      if (this.mode != that.mode)
        return false;
    }

    boolean this_present_couterProcessList = true && this.isSetCouterProcessList();
    boolean that_present_couterProcessList = true && that.isSetCouterProcessList();
    if (this_present_couterProcessList || that_present_couterProcessList) {
      if (!(this_present_couterProcessList && that_present_couterProcessList))
        return false;
      if (!this.couterProcessList.equals(that.couterProcessList))
        return false;
    }

    boolean this_present_oneStarPrizeInfos = true && this.isSetOneStarPrizeInfos();
    boolean that_present_oneStarPrizeInfos = true && that.isSetOneStarPrizeInfos();
    if (this_present_oneStarPrizeInfos || that_present_oneStarPrizeInfos) {
      if (!(this_present_oneStarPrizeInfos && that_present_oneStarPrizeInfos))
        return false;
      if (!this.oneStarPrizeInfos.equals(that.oneStarPrizeInfos))
        return false;
    }

    boolean this_present_twoStarPrizeInfos = true && this.isSetTwoStarPrizeInfos();
    boolean that_present_twoStarPrizeInfos = true && that.isSetTwoStarPrizeInfos();
    if (this_present_twoStarPrizeInfos || that_present_twoStarPrizeInfos) {
      if (!(this_present_twoStarPrizeInfos && that_present_twoStarPrizeInfos))
        return false;
      if (!this.twoStarPrizeInfos.equals(that.twoStarPrizeInfos))
        return false;
    }

    boolean this_present_threeStarPrizeInfos = true && this.isSetThreeStarPrizeInfos();
    boolean that_present_threeStarPrizeInfos = true && that.isSetThreeStarPrizeInfos();
    if (this_present_threeStarPrizeInfos || that_present_threeStarPrizeInfos) {
      if (!(this_present_threeStarPrizeInfos && that_present_threeStarPrizeInfos))
        return false;
      if (!this.threeStarPrizeInfos.equals(that.threeStarPrizeInfos))
        return false;
    }

    boolean this_present_operType = true && this.isSetOperType();
    boolean that_present_operType = true && that.isSetOperType();
    if (this_present_operType || that_present_operType) {
      if (!(this_present_operType && that_present_operType))
        return false;
      if (!this.operType.equals(that.operType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCChapterInfoResultMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCChapterInfoResultMsg typedOther = (SCChapterInfoResultMsg)other;

    lastComparison = Boolean.valueOf(isSetChapterTaskId()).compareTo(typedOther.isSetChapterTaskId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChapterTaskId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chapterTaskId, typedOther.chapterTaskId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChapterNameId()).compareTo(typedOther.isSetChapterNameId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChapterNameId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chapterNameId, typedOther.chapterNameId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMusicid()).compareTo(typedOther.isSetMusicid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMusicid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.musicid, typedOther.musicid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLevel()).compareTo(typedOther.isSetLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.level, typedOther.level);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMode()).compareTo(typedOther.isSetMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mode, typedOther.mode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCouterProcessList()).compareTo(typedOther.isSetCouterProcessList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCouterProcessList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.couterProcessList, typedOther.couterProcessList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOneStarPrizeInfos()).compareTo(typedOther.isSetOneStarPrizeInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOneStarPrizeInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oneStarPrizeInfos, typedOther.oneStarPrizeInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTwoStarPrizeInfos()).compareTo(typedOther.isSetTwoStarPrizeInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTwoStarPrizeInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.twoStarPrizeInfos, typedOther.twoStarPrizeInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThreeStarPrizeInfos()).compareTo(typedOther.isSetThreeStarPrizeInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThreeStarPrizeInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.threeStarPrizeInfos, typedOther.threeStarPrizeInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperType()).compareTo(typedOther.isSetOperType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operType, typedOther.operType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCChapterInfoResultMsg(");
    boolean first = true;

    sb.append("chapterTaskId:");
    sb.append(this.chapterTaskId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("chapterNameId:");
    sb.append(this.chapterNameId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("musicid:");
    sb.append(this.musicid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("level:");
    sb.append(this.level);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mode:");
    sb.append(this.mode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("couterProcessList:");
    if (this.couterProcessList == null) {
      sb.append("null");
    } else {
      sb.append(this.couterProcessList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("oneStarPrizeInfos:");
    if (this.oneStarPrizeInfos == null) {
      sb.append("null");
    } else {
      sb.append(this.oneStarPrizeInfos);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("twoStarPrizeInfos:");
    if (this.twoStarPrizeInfos == null) {
      sb.append("null");
    } else {
      sb.append(this.twoStarPrizeInfos);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("threeStarPrizeInfos:");
    if (this.threeStarPrizeInfos == null) {
      sb.append("null");
    } else {
      sb.append(this.threeStarPrizeInfos);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("operType:");
    if (this.operType == null) {
      sb.append("null");
    } else {
      sb.append(this.operType);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (oneStarPrizeInfos != null) {
      oneStarPrizeInfos.validate();
    }
    if (twoStarPrizeInfos != null) {
      twoStarPrizeInfos.validate();
    }
    if (threeStarPrizeInfos != null) {
      threeStarPrizeInfos.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCChapterInfoResultMsgStandardSchemeFactory implements SchemeFactory {
    public SCChapterInfoResultMsgStandardScheme getScheme() {
      return new SCChapterInfoResultMsgStandardScheme();
    }
  }

  private static class SCChapterInfoResultMsgStandardScheme extends StandardScheme<SCChapterInfoResultMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCChapterInfoResultMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CHAPTER_TASK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.chapterTaskId = iprot.readI32();
              struct.setChapterTaskIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CHAPTER_NAME_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.chapterNameId = iprot.readI32();
              struct.setChapterNameIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MUSICID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.musicid = iprot.readI32();
              struct.setMusicidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.level = iprot.readByte();
              struct.setLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.mode = iprot.readByte();
              struct.setModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COUTER_PROCESS_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.couterProcessList = new ArrayList<com.ling9527.music.common.msg.auto.CourseTaskProcess>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  com.ling9527.music.common.msg.auto.CourseTaskProcess _elem2; // required
                  _elem2 = new com.ling9527.music.common.msg.auto.CourseTaskProcess();
                  _elem2.read(iprot);
                  struct.couterProcessList.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setCouterProcessListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ONE_STAR_PRIZE_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.oneStarPrizeInfos = new com.ling9527.music.common.msg.auto.PrizeInfo();
              struct.oneStarPrizeInfos.read(iprot);
              struct.setOneStarPrizeInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TWO_STAR_PRIZE_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.twoStarPrizeInfos = new com.ling9527.music.common.msg.auto.PrizeInfo();
              struct.twoStarPrizeInfos.read(iprot);
              struct.setTwoStarPrizeInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // THREE_STAR_PRIZE_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.threeStarPrizeInfos = new com.ling9527.music.common.msg.auto.PrizeInfo();
              struct.threeStarPrizeInfos.read(iprot);
              struct.setThreeStarPrizeInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // OPER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.operType = com.ling9527.music.common.msg.auto.ChapterOperType.findByValue(iprot.readI32());
              struct.setOperTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCChapterInfoResultMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CHAPTER_TASK_ID_FIELD_DESC);
      oprot.writeI32(struct.chapterTaskId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CHAPTER_NAME_ID_FIELD_DESC);
      oprot.writeI32(struct.chapterNameId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MUSICID_FIELD_DESC);
      oprot.writeI32(struct.musicid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LEVEL_FIELD_DESC);
      oprot.writeByte(struct.level);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MODE_FIELD_DESC);
      oprot.writeByte(struct.mode);
      oprot.writeFieldEnd();
      if (struct.couterProcessList != null) {
        oprot.writeFieldBegin(COUTER_PROCESS_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.couterProcessList.size()));
          for (com.ling9527.music.common.msg.auto.CourseTaskProcess _iter3 : struct.couterProcessList)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.oneStarPrizeInfos != null) {
        oprot.writeFieldBegin(ONE_STAR_PRIZE_INFOS_FIELD_DESC);
        struct.oneStarPrizeInfos.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.twoStarPrizeInfos != null) {
        oprot.writeFieldBegin(TWO_STAR_PRIZE_INFOS_FIELD_DESC);
        struct.twoStarPrizeInfos.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.threeStarPrizeInfos != null) {
        oprot.writeFieldBegin(THREE_STAR_PRIZE_INFOS_FIELD_DESC);
        struct.threeStarPrizeInfos.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.operType != null) {
        oprot.writeFieldBegin(OPER_TYPE_FIELD_DESC);
        oprot.writeI32(struct.operType.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCChapterInfoResultMsgTupleSchemeFactory implements SchemeFactory {
    public SCChapterInfoResultMsgTupleScheme getScheme() {
      return new SCChapterInfoResultMsgTupleScheme();
    }
  }

  private static class SCChapterInfoResultMsgTupleScheme extends TupleScheme<SCChapterInfoResultMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCChapterInfoResultMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetChapterTaskId()) {
        optionals.set(0);
      }
      if (struct.isSetChapterNameId()) {
        optionals.set(1);
      }
      if (struct.isSetMusicid()) {
        optionals.set(2);
      }
      if (struct.isSetLevel()) {
        optionals.set(3);
      }
      if (struct.isSetMode()) {
        optionals.set(4);
      }
      if (struct.isSetCouterProcessList()) {
        optionals.set(5);
      }
      if (struct.isSetOneStarPrizeInfos()) {
        optionals.set(6);
      }
      if (struct.isSetTwoStarPrizeInfos()) {
        optionals.set(7);
      }
      if (struct.isSetThreeStarPrizeInfos()) {
        optionals.set(8);
      }
      if (struct.isSetOperType()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetChapterTaskId()) {
        oprot.writeI32(struct.chapterTaskId);
      }
      if (struct.isSetChapterNameId()) {
        oprot.writeI32(struct.chapterNameId);
      }
      if (struct.isSetMusicid()) {
        oprot.writeI32(struct.musicid);
      }
      if (struct.isSetLevel()) {
        oprot.writeByte(struct.level);
      }
      if (struct.isSetMode()) {
        oprot.writeByte(struct.mode);
      }
      if (struct.isSetCouterProcessList()) {
        {
          oprot.writeI32(struct.couterProcessList.size());
          for (com.ling9527.music.common.msg.auto.CourseTaskProcess _iter4 : struct.couterProcessList)
          {
            _iter4.write(oprot);
          }
        }
      }
      if (struct.isSetOneStarPrizeInfos()) {
        struct.oneStarPrizeInfos.write(oprot);
      }
      if (struct.isSetTwoStarPrizeInfos()) {
        struct.twoStarPrizeInfos.write(oprot);
      }
      if (struct.isSetThreeStarPrizeInfos()) {
        struct.threeStarPrizeInfos.write(oprot);
      }
      if (struct.isSetOperType()) {
        oprot.writeI32(struct.operType.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCChapterInfoResultMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.chapterTaskId = iprot.readI32();
        struct.setChapterTaskIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.chapterNameId = iprot.readI32();
        struct.setChapterNameIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.musicid = iprot.readI32();
        struct.setMusicidIsSet(true);
      }
      if (incoming.get(3)) {
        struct.level = iprot.readByte();
        struct.setLevelIsSet(true);
      }
      if (incoming.get(4)) {
        struct.mode = iprot.readByte();
        struct.setModeIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.couterProcessList = new ArrayList<com.ling9527.music.common.msg.auto.CourseTaskProcess>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            com.ling9527.music.common.msg.auto.CourseTaskProcess _elem7; // required
            _elem7 = new com.ling9527.music.common.msg.auto.CourseTaskProcess();
            _elem7.read(iprot);
            struct.couterProcessList.add(_elem7);
          }
        }
        struct.setCouterProcessListIsSet(true);
      }
      if (incoming.get(6)) {
        struct.oneStarPrizeInfos = new com.ling9527.music.common.msg.auto.PrizeInfo();
        struct.oneStarPrizeInfos.read(iprot);
        struct.setOneStarPrizeInfosIsSet(true);
      }
      if (incoming.get(7)) {
        struct.twoStarPrizeInfos = new com.ling9527.music.common.msg.auto.PrizeInfo();
        struct.twoStarPrizeInfos.read(iprot);
        struct.setTwoStarPrizeInfosIsSet(true);
      }
      if (incoming.get(8)) {
        struct.threeStarPrizeInfos = new com.ling9527.music.common.msg.auto.PrizeInfo();
        struct.threeStarPrizeInfos.read(iprot);
        struct.setThreeStarPrizeInfosIsSet(true);
      }
      if (incoming.get(9)) {
        struct.operType = com.ling9527.music.common.msg.auto.ChapterOperType.findByValue(iprot.readI32());
        struct.setOperTypeIsSet(true);
      }
    }
  }

}

