/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ComposeActivityTime implements org.apache.thrift.TBase<ComposeActivityTime, ComposeActivityTime._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ComposeActivityTime");

  private static final org.apache.thrift.protocol.TField BEGIN_HOUR_FIELD_DESC = new org.apache.thrift.protocol.TField("beginHour", org.apache.thrift.protocol.TType.I16, (short)1);
  private static final org.apache.thrift.protocol.TField BEGIN_MINUTE_FIELD_DESC = new org.apache.thrift.protocol.TField("beginMinute", org.apache.thrift.protocol.TType.I16, (short)2);
  private static final org.apache.thrift.protocol.TField END_HOUR_FIELD_DESC = new org.apache.thrift.protocol.TField("endHour", org.apache.thrift.protocol.TType.I16, (short)3);
  private static final org.apache.thrift.protocol.TField END_MINUTE_FIELD_DESC = new org.apache.thrift.protocol.TField("endMinute", org.apache.thrift.protocol.TType.I16, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ComposeActivityTimeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ComposeActivityTimeTupleSchemeFactory());
  }

  public short beginHour; // required
  public short beginMinute; // required
  public short endHour; // required
  public short endMinute; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BEGIN_HOUR((short)1, "beginHour"),
    BEGIN_MINUTE((short)2, "beginMinute"),
    END_HOUR((short)3, "endHour"),
    END_MINUTE((short)4, "endMinute");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BEGIN_HOUR
          return BEGIN_HOUR;
        case 2: // BEGIN_MINUTE
          return BEGIN_MINUTE;
        case 3: // END_HOUR
          return END_HOUR;
        case 4: // END_MINUTE
          return END_MINUTE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BEGINHOUR_ISSET_ID = 0;
  private static final int __BEGINMINUTE_ISSET_ID = 1;
  private static final int __ENDHOUR_ISSET_ID = 2;
  private static final int __ENDMINUTE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BEGIN_HOUR, new org.apache.thrift.meta_data.FieldMetaData("beginHour", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.BEGIN_MINUTE, new org.apache.thrift.meta_data.FieldMetaData("beginMinute", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.END_HOUR, new org.apache.thrift.meta_data.FieldMetaData("endHour", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.END_MINUTE, new org.apache.thrift.meta_data.FieldMetaData("endMinute", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ComposeActivityTime.class, metaDataMap);
  }

  public ComposeActivityTime() {
  }

  public ComposeActivityTime(
    short beginHour,
    short beginMinute,
    short endHour,
    short endMinute)
  {
    this();
    this.beginHour = beginHour;
    setBeginHourIsSet(true);
    this.beginMinute = beginMinute;
    setBeginMinuteIsSet(true);
    this.endHour = endHour;
    setEndHourIsSet(true);
    this.endMinute = endMinute;
    setEndMinuteIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ComposeActivityTime(ComposeActivityTime other) {
    __isset_bitfield = other.__isset_bitfield;
    this.beginHour = other.beginHour;
    this.beginMinute = other.beginMinute;
    this.endHour = other.endHour;
    this.endMinute = other.endMinute;
  }

  public ComposeActivityTime deepCopy() {
    return new ComposeActivityTime(this);
  }

  @Override
  public void clear() {
    setBeginHourIsSet(false);
    this.beginHour = 0;
    setBeginMinuteIsSet(false);
    this.beginMinute = 0;
    setEndHourIsSet(false);
    this.endHour = 0;
    setEndMinuteIsSet(false);
    this.endMinute = 0;
  }

  public short getBeginHour() {
    return this.beginHour;
  }

  public ComposeActivityTime setBeginHour(short beginHour) {
    this.beginHour = beginHour;
    setBeginHourIsSet(true);
    return this;
  }

  public void unsetBeginHour() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BEGINHOUR_ISSET_ID);
  }

  /** Returns true if field beginHour is set (has been assigned a value) and false otherwise */
  public boolean isSetBeginHour() {
    return EncodingUtils.testBit(__isset_bitfield, __BEGINHOUR_ISSET_ID);
  }

  public void setBeginHourIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BEGINHOUR_ISSET_ID, value);
  }

  public short getBeginMinute() {
    return this.beginMinute;
  }

  public ComposeActivityTime setBeginMinute(short beginMinute) {
    this.beginMinute = beginMinute;
    setBeginMinuteIsSet(true);
    return this;
  }

  public void unsetBeginMinute() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BEGINMINUTE_ISSET_ID);
  }

  /** Returns true if field beginMinute is set (has been assigned a value) and false otherwise */
  public boolean isSetBeginMinute() {
    return EncodingUtils.testBit(__isset_bitfield, __BEGINMINUTE_ISSET_ID);
  }

  public void setBeginMinuteIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BEGINMINUTE_ISSET_ID, value);
  }

  public short getEndHour() {
    return this.endHour;
  }

  public ComposeActivityTime setEndHour(short endHour) {
    this.endHour = endHour;
    setEndHourIsSet(true);
    return this;
  }

  public void unsetEndHour() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDHOUR_ISSET_ID);
  }

  /** Returns true if field endHour is set (has been assigned a value) and false otherwise */
  public boolean isSetEndHour() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDHOUR_ISSET_ID);
  }

  public void setEndHourIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDHOUR_ISSET_ID, value);
  }

  public short getEndMinute() {
    return this.endMinute;
  }

  public ComposeActivityTime setEndMinute(short endMinute) {
    this.endMinute = endMinute;
    setEndMinuteIsSet(true);
    return this;
  }

  public void unsetEndMinute() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDMINUTE_ISSET_ID);
  }

  /** Returns true if field endMinute is set (has been assigned a value) and false otherwise */
  public boolean isSetEndMinute() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDMINUTE_ISSET_ID);
  }

  public void setEndMinuteIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDMINUTE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BEGIN_HOUR:
      if (value == null) {
        unsetBeginHour();
      } else {
        setBeginHour((Short)value);
      }
      break;

    case BEGIN_MINUTE:
      if (value == null) {
        unsetBeginMinute();
      } else {
        setBeginMinute((Short)value);
      }
      break;

    case END_HOUR:
      if (value == null) {
        unsetEndHour();
      } else {
        setEndHour((Short)value);
      }
      break;

    case END_MINUTE:
      if (value == null) {
        unsetEndMinute();
      } else {
        setEndMinute((Short)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BEGIN_HOUR:
      return Short.valueOf(getBeginHour());

    case BEGIN_MINUTE:
      return Short.valueOf(getBeginMinute());

    case END_HOUR:
      return Short.valueOf(getEndHour());

    case END_MINUTE:
      return Short.valueOf(getEndMinute());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BEGIN_HOUR:
      return isSetBeginHour();
    case BEGIN_MINUTE:
      return isSetBeginMinute();
    case END_HOUR:
      return isSetEndHour();
    case END_MINUTE:
      return isSetEndMinute();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ComposeActivityTime)
      return this.equals((ComposeActivityTime)that);
    return false;
  }

  public boolean equals(ComposeActivityTime that) {
    if (that == null)
      return false;

    boolean this_present_beginHour = true;
    boolean that_present_beginHour = true;
    if (this_present_beginHour || that_present_beginHour) {
      if (!(this_present_beginHour && that_present_beginHour))
        return false;
      if (this.beginHour != that.beginHour)
        return false;
    }

    boolean this_present_beginMinute = true;
    boolean that_present_beginMinute = true;
    if (this_present_beginMinute || that_present_beginMinute) {
      if (!(this_present_beginMinute && that_present_beginMinute))
        return false;
      if (this.beginMinute != that.beginMinute)
        return false;
    }

    boolean this_present_endHour = true;
    boolean that_present_endHour = true;
    if (this_present_endHour || that_present_endHour) {
      if (!(this_present_endHour && that_present_endHour))
        return false;
      if (this.endHour != that.endHour)
        return false;
    }

    boolean this_present_endMinute = true;
    boolean that_present_endMinute = true;
    if (this_present_endMinute || that_present_endMinute) {
      if (!(this_present_endMinute && that_present_endMinute))
        return false;
      if (this.endMinute != that.endMinute)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ComposeActivityTime other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ComposeActivityTime typedOther = (ComposeActivityTime)other;

    lastComparison = Boolean.valueOf(isSetBeginHour()).compareTo(typedOther.isSetBeginHour());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBeginHour()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.beginHour, typedOther.beginHour);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBeginMinute()).compareTo(typedOther.isSetBeginMinute());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBeginMinute()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.beginMinute, typedOther.beginMinute);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndHour()).compareTo(typedOther.isSetEndHour());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndHour()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endHour, typedOther.endHour);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndMinute()).compareTo(typedOther.isSetEndMinute());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndMinute()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endMinute, typedOther.endMinute);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ComposeActivityTime(");
    boolean first = true;

    sb.append("beginHour:");
    sb.append(this.beginHour);
    first = false;
    if (!first) sb.append(", ");
    sb.append("beginMinute:");
    sb.append(this.beginMinute);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endHour:");
    sb.append(this.endHour);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endMinute:");
    sb.append(this.endMinute);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ComposeActivityTimeStandardSchemeFactory implements SchemeFactory {
    public ComposeActivityTimeStandardScheme getScheme() {
      return new ComposeActivityTimeStandardScheme();
    }
  }

  private static class ComposeActivityTimeStandardScheme extends StandardScheme<ComposeActivityTime> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ComposeActivityTime struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BEGIN_HOUR
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.beginHour = iprot.readI16();
              struct.setBeginHourIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BEGIN_MINUTE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.beginMinute = iprot.readI16();
              struct.setBeginMinuteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // END_HOUR
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.endHour = iprot.readI16();
              struct.setEndHourIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // END_MINUTE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.endMinute = iprot.readI16();
              struct.setEndMinuteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ComposeActivityTime struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(BEGIN_HOUR_FIELD_DESC);
      oprot.writeI16(struct.beginHour);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BEGIN_MINUTE_FIELD_DESC);
      oprot.writeI16(struct.beginMinute);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(END_HOUR_FIELD_DESC);
      oprot.writeI16(struct.endHour);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(END_MINUTE_FIELD_DESC);
      oprot.writeI16(struct.endMinute);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ComposeActivityTimeTupleSchemeFactory implements SchemeFactory {
    public ComposeActivityTimeTupleScheme getScheme() {
      return new ComposeActivityTimeTupleScheme();
    }
  }

  private static class ComposeActivityTimeTupleScheme extends TupleScheme<ComposeActivityTime> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ComposeActivityTime struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBeginHour()) {
        optionals.set(0);
      }
      if (struct.isSetBeginMinute()) {
        optionals.set(1);
      }
      if (struct.isSetEndHour()) {
        optionals.set(2);
      }
      if (struct.isSetEndMinute()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetBeginHour()) {
        oprot.writeI16(struct.beginHour);
      }
      if (struct.isSetBeginMinute()) {
        oprot.writeI16(struct.beginMinute);
      }
      if (struct.isSetEndHour()) {
        oprot.writeI16(struct.endHour);
      }
      if (struct.isSetEndMinute()) {
        oprot.writeI16(struct.endMinute);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ComposeActivityTime struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.beginHour = iprot.readI16();
        struct.setBeginHourIsSet(true);
      }
      if (incoming.get(1)) {
        struct.beginMinute = iprot.readI16();
        struct.setBeginMinuteIsSet(true);
      }
      if (incoming.get(2)) {
        struct.endHour = iprot.readI16();
        struct.setEndHourIsSet(true);
      }
      if (incoming.get(3)) {
        struct.endMinute = iprot.readI16();
        struct.setEndMinuteIsSet(true);
      }
    }
  }

}

