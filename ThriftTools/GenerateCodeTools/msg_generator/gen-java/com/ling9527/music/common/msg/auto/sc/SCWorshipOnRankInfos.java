/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 已膜拜上榜玩家信息
 */
public class SCWorshipOnRankInfos implements org.apache.thrift.TBase<SCWorshipOnRankInfos, SCWorshipOnRankInfos._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCWorshipOnRankInfos");

  private static final org.apache.thrift.protocol.TField SINGLE_RANK_PLAYER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("singleRankPlayerIds", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField DOUBLE_RANK_PLAYER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("doubleRankPlayerIds", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField VALID_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("validTime", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCWorshipOnRankInfosStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCWorshipOnRankInfosTupleSchemeFactory());
  }

  /**
   * 单人榜膜拜过的玩家角色id
   */
  public List<Long> singleRankPlayerIds; // required
  /**
   * 双人榜膜拜过的玩家角色id
   */
  public List<DoubleRankPlayInfo> doubleRankPlayerIds; // required
  /**
   * 有效截止时间（从1970.1.1开始的秒数）
   */
  public int validTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 单人榜膜拜过的玩家角色id
     */
    SINGLE_RANK_PLAYER_IDS((short)1, "singleRankPlayerIds"),
    /**
     * 双人榜膜拜过的玩家角色id
     */
    DOUBLE_RANK_PLAYER_IDS((short)2, "doubleRankPlayerIds"),
    /**
     * 有效截止时间（从1970.1.1开始的秒数）
     */
    VALID_TIME((short)3, "validTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SINGLE_RANK_PLAYER_IDS
          return SINGLE_RANK_PLAYER_IDS;
        case 2: // DOUBLE_RANK_PLAYER_IDS
          return DOUBLE_RANK_PLAYER_IDS;
        case 3: // VALID_TIME
          return VALID_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VALIDTIME_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SINGLE_RANK_PLAYER_IDS, new org.apache.thrift.meta_data.FieldMetaData("singleRankPlayerIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.DOUBLE_RANK_PLAYER_IDS, new org.apache.thrift.meta_data.FieldMetaData("doubleRankPlayerIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DoubleRankPlayInfo.class))));
    tmpMap.put(_Fields.VALID_TIME, new org.apache.thrift.meta_data.FieldMetaData("validTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCWorshipOnRankInfos.class, metaDataMap);
  }

  public SCWorshipOnRankInfos() {
  }

  public SCWorshipOnRankInfos(
    List<Long> singleRankPlayerIds,
    List<DoubleRankPlayInfo> doubleRankPlayerIds,
    int validTime)
  {
    this();
    this.singleRankPlayerIds = singleRankPlayerIds;
    this.doubleRankPlayerIds = doubleRankPlayerIds;
    this.validTime = validTime;
    setValidTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCWorshipOnRankInfos(SCWorshipOnRankInfos other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSingleRankPlayerIds()) {
      List<Long> __this__singleRankPlayerIds = new ArrayList<Long>();
      for (Long other_element : other.singleRankPlayerIds) {
        __this__singleRankPlayerIds.add(other_element);
      }
      this.singleRankPlayerIds = __this__singleRankPlayerIds;
    }
    if (other.isSetDoubleRankPlayerIds()) {
      List<DoubleRankPlayInfo> __this__doubleRankPlayerIds = new ArrayList<DoubleRankPlayInfo>();
      for (DoubleRankPlayInfo other_element : other.doubleRankPlayerIds) {
        __this__doubleRankPlayerIds.add(new DoubleRankPlayInfo(other_element));
      }
      this.doubleRankPlayerIds = __this__doubleRankPlayerIds;
    }
    this.validTime = other.validTime;
  }

  public SCWorshipOnRankInfos deepCopy() {
    return new SCWorshipOnRankInfos(this);
  }

  @Override
  public void clear() {
    this.singleRankPlayerIds = null;
    this.doubleRankPlayerIds = null;
    setValidTimeIsSet(false);
    this.validTime = 0;
  }

  public int getSingleRankPlayerIdsSize() {
    return (this.singleRankPlayerIds == null) ? 0 : this.singleRankPlayerIds.size();
  }

  public java.util.Iterator<Long> getSingleRankPlayerIdsIterator() {
    return (this.singleRankPlayerIds == null) ? null : this.singleRankPlayerIds.iterator();
  }

  public void addToSingleRankPlayerIds(long elem) {
    if (this.singleRankPlayerIds == null) {
      this.singleRankPlayerIds = new ArrayList<Long>();
    }
    this.singleRankPlayerIds.add(elem);
  }

  /**
   * 单人榜膜拜过的玩家角色id
   */
  public List<Long> getSingleRankPlayerIds() {
    return this.singleRankPlayerIds;
  }

  /**
   * 单人榜膜拜过的玩家角色id
   */
  public SCWorshipOnRankInfos setSingleRankPlayerIds(List<Long> singleRankPlayerIds) {
    this.singleRankPlayerIds = singleRankPlayerIds;
    return this;
  }

  public void unsetSingleRankPlayerIds() {
    this.singleRankPlayerIds = null;
  }

  /** Returns true if field singleRankPlayerIds is set (has been assigned a value) and false otherwise */
  public boolean isSetSingleRankPlayerIds() {
    return this.singleRankPlayerIds != null;
  }

  public void setSingleRankPlayerIdsIsSet(boolean value) {
    if (!value) {
      this.singleRankPlayerIds = null;
    }
  }

  public int getDoubleRankPlayerIdsSize() {
    return (this.doubleRankPlayerIds == null) ? 0 : this.doubleRankPlayerIds.size();
  }

  public java.util.Iterator<DoubleRankPlayInfo> getDoubleRankPlayerIdsIterator() {
    return (this.doubleRankPlayerIds == null) ? null : this.doubleRankPlayerIds.iterator();
  }

  public void addToDoubleRankPlayerIds(DoubleRankPlayInfo elem) {
    if (this.doubleRankPlayerIds == null) {
      this.doubleRankPlayerIds = new ArrayList<DoubleRankPlayInfo>();
    }
    this.doubleRankPlayerIds.add(elem);
  }

  /**
   * 双人榜膜拜过的玩家角色id
   */
  public List<DoubleRankPlayInfo> getDoubleRankPlayerIds() {
    return this.doubleRankPlayerIds;
  }

  /**
   * 双人榜膜拜过的玩家角色id
   */
  public SCWorshipOnRankInfos setDoubleRankPlayerIds(List<DoubleRankPlayInfo> doubleRankPlayerIds) {
    this.doubleRankPlayerIds = doubleRankPlayerIds;
    return this;
  }

  public void unsetDoubleRankPlayerIds() {
    this.doubleRankPlayerIds = null;
  }

  /** Returns true if field doubleRankPlayerIds is set (has been assigned a value) and false otherwise */
  public boolean isSetDoubleRankPlayerIds() {
    return this.doubleRankPlayerIds != null;
  }

  public void setDoubleRankPlayerIdsIsSet(boolean value) {
    if (!value) {
      this.doubleRankPlayerIds = null;
    }
  }

  /**
   * 有效截止时间（从1970.1.1开始的秒数）
   */
  public int getValidTime() {
    return this.validTime;
  }

  /**
   * 有效截止时间（从1970.1.1开始的秒数）
   */
  public SCWorshipOnRankInfos setValidTime(int validTime) {
    this.validTime = validTime;
    setValidTimeIsSet(true);
    return this;
  }

  public void unsetValidTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VALIDTIME_ISSET_ID);
  }

  /** Returns true if field validTime is set (has been assigned a value) and false otherwise */
  public boolean isSetValidTime() {
    return EncodingUtils.testBit(__isset_bitfield, __VALIDTIME_ISSET_ID);
  }

  public void setValidTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VALIDTIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SINGLE_RANK_PLAYER_IDS:
      if (value == null) {
        unsetSingleRankPlayerIds();
      } else {
        setSingleRankPlayerIds((List<Long>)value);
      }
      break;

    case DOUBLE_RANK_PLAYER_IDS:
      if (value == null) {
        unsetDoubleRankPlayerIds();
      } else {
        setDoubleRankPlayerIds((List<DoubleRankPlayInfo>)value);
      }
      break;

    case VALID_TIME:
      if (value == null) {
        unsetValidTime();
      } else {
        setValidTime((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SINGLE_RANK_PLAYER_IDS:
      return getSingleRankPlayerIds();

    case DOUBLE_RANK_PLAYER_IDS:
      return getDoubleRankPlayerIds();

    case VALID_TIME:
      return Integer.valueOf(getValidTime());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SINGLE_RANK_PLAYER_IDS:
      return isSetSingleRankPlayerIds();
    case DOUBLE_RANK_PLAYER_IDS:
      return isSetDoubleRankPlayerIds();
    case VALID_TIME:
      return isSetValidTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCWorshipOnRankInfos)
      return this.equals((SCWorshipOnRankInfos)that);
    return false;
  }

  public boolean equals(SCWorshipOnRankInfos that) {
    if (that == null)
      return false;

    boolean this_present_singleRankPlayerIds = true && this.isSetSingleRankPlayerIds();
    boolean that_present_singleRankPlayerIds = true && that.isSetSingleRankPlayerIds();
    if (this_present_singleRankPlayerIds || that_present_singleRankPlayerIds) {
      if (!(this_present_singleRankPlayerIds && that_present_singleRankPlayerIds))
        return false;
      if (!this.singleRankPlayerIds.equals(that.singleRankPlayerIds))
        return false;
    }

    boolean this_present_doubleRankPlayerIds = true && this.isSetDoubleRankPlayerIds();
    boolean that_present_doubleRankPlayerIds = true && that.isSetDoubleRankPlayerIds();
    if (this_present_doubleRankPlayerIds || that_present_doubleRankPlayerIds) {
      if (!(this_present_doubleRankPlayerIds && that_present_doubleRankPlayerIds))
        return false;
      if (!this.doubleRankPlayerIds.equals(that.doubleRankPlayerIds))
        return false;
    }

    boolean this_present_validTime = true;
    boolean that_present_validTime = true;
    if (this_present_validTime || that_present_validTime) {
      if (!(this_present_validTime && that_present_validTime))
        return false;
      if (this.validTime != that.validTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCWorshipOnRankInfos other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCWorshipOnRankInfos typedOther = (SCWorshipOnRankInfos)other;

    lastComparison = Boolean.valueOf(isSetSingleRankPlayerIds()).compareTo(typedOther.isSetSingleRankPlayerIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSingleRankPlayerIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.singleRankPlayerIds, typedOther.singleRankPlayerIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDoubleRankPlayerIds()).compareTo(typedOther.isSetDoubleRankPlayerIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDoubleRankPlayerIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doubleRankPlayerIds, typedOther.doubleRankPlayerIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValidTime()).compareTo(typedOther.isSetValidTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValidTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validTime, typedOther.validTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCWorshipOnRankInfos(");
    boolean first = true;

    sb.append("singleRankPlayerIds:");
    if (this.singleRankPlayerIds == null) {
      sb.append("null");
    } else {
      sb.append(this.singleRankPlayerIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("doubleRankPlayerIds:");
    if (this.doubleRankPlayerIds == null) {
      sb.append("null");
    } else {
      sb.append(this.doubleRankPlayerIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("validTime:");
    sb.append(this.validTime);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCWorshipOnRankInfosStandardSchemeFactory implements SchemeFactory {
    public SCWorshipOnRankInfosStandardScheme getScheme() {
      return new SCWorshipOnRankInfosStandardScheme();
    }
  }

  private static class SCWorshipOnRankInfosStandardScheme extends StandardScheme<SCWorshipOnRankInfos> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCWorshipOnRankInfos struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SINGLE_RANK_PLAYER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list18 = iprot.readListBegin();
                struct.singleRankPlayerIds = new ArrayList<Long>(_list18.size);
                for (int _i19 = 0; _i19 < _list18.size; ++_i19)
                {
                  long _elem20; // required
                  _elem20 = iprot.readI64();
                  struct.singleRankPlayerIds.add(_elem20);
                }
                iprot.readListEnd();
              }
              struct.setSingleRankPlayerIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DOUBLE_RANK_PLAYER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list21 = iprot.readListBegin();
                struct.doubleRankPlayerIds = new ArrayList<DoubleRankPlayInfo>(_list21.size);
                for (int _i22 = 0; _i22 < _list21.size; ++_i22)
                {
                  DoubleRankPlayInfo _elem23; // required
                  _elem23 = new DoubleRankPlayInfo();
                  _elem23.read(iprot);
                  struct.doubleRankPlayerIds.add(_elem23);
                }
                iprot.readListEnd();
              }
              struct.setDoubleRankPlayerIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VALID_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.validTime = iprot.readI32();
              struct.setValidTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCWorshipOnRankInfos struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.singleRankPlayerIds != null) {
        oprot.writeFieldBegin(SINGLE_RANK_PLAYER_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.singleRankPlayerIds.size()));
          for (long _iter24 : struct.singleRankPlayerIds)
          {
            oprot.writeI64(_iter24);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.doubleRankPlayerIds != null) {
        oprot.writeFieldBegin(DOUBLE_RANK_PLAYER_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.doubleRankPlayerIds.size()));
          for (DoubleRankPlayInfo _iter25 : struct.doubleRankPlayerIds)
          {
            _iter25.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(VALID_TIME_FIELD_DESC);
      oprot.writeI32(struct.validTime);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCWorshipOnRankInfosTupleSchemeFactory implements SchemeFactory {
    public SCWorshipOnRankInfosTupleScheme getScheme() {
      return new SCWorshipOnRankInfosTupleScheme();
    }
  }

  private static class SCWorshipOnRankInfosTupleScheme extends TupleScheme<SCWorshipOnRankInfos> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCWorshipOnRankInfos struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSingleRankPlayerIds()) {
        optionals.set(0);
      }
      if (struct.isSetDoubleRankPlayerIds()) {
        optionals.set(1);
      }
      if (struct.isSetValidTime()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetSingleRankPlayerIds()) {
        {
          oprot.writeI32(struct.singleRankPlayerIds.size());
          for (long _iter26 : struct.singleRankPlayerIds)
          {
            oprot.writeI64(_iter26);
          }
        }
      }
      if (struct.isSetDoubleRankPlayerIds()) {
        {
          oprot.writeI32(struct.doubleRankPlayerIds.size());
          for (DoubleRankPlayInfo _iter27 : struct.doubleRankPlayerIds)
          {
            _iter27.write(oprot);
          }
        }
      }
      if (struct.isSetValidTime()) {
        oprot.writeI32(struct.validTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCWorshipOnRankInfos struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list28 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.singleRankPlayerIds = new ArrayList<Long>(_list28.size);
          for (int _i29 = 0; _i29 < _list28.size; ++_i29)
          {
            long _elem30; // required
            _elem30 = iprot.readI64();
            struct.singleRankPlayerIds.add(_elem30);
          }
        }
        struct.setSingleRankPlayerIdsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.doubleRankPlayerIds = new ArrayList<DoubleRankPlayInfo>(_list31.size);
          for (int _i32 = 0; _i32 < _list31.size; ++_i32)
          {
            DoubleRankPlayInfo _elem33; // required
            _elem33 = new DoubleRankPlayInfo();
            _elem33.read(iprot);
            struct.doubleRankPlayerIds.add(_elem33);
          }
        }
        struct.setDoubleRankPlayerIdsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.validTime = iprot.readI32();
        struct.setValidTimeIsSet(true);
      }
    }
  }

}

