/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 婚礼动态信息
 */
public class SCWeddingNotices implements org.apache.thrift.TBase<SCWeddingNotices, SCWeddingNotices._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCWeddingNotices");

  private static final org.apache.thrift.protocol.TField WED_NOTICE_PAGE_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("wedNoticePageInfos", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField HAS_WEDDING_ROOM_FIELD_DESC = new org.apache.thrift.protocol.TField("hasWeddingRoom", org.apache.thrift.protocol.TType.BOOL, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCWeddingNoticesStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCWeddingNoticesTupleSchemeFactory());
  }

  /**
   * 婚礼动态分页信息
   */
  public com.ling9527.music.common.msg.auto.CommonDataPageInfos wedNoticePageInfos; // required
  /**
   * 当前自己是否有婚房
   */
  public boolean hasWeddingRoom; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 婚礼动态分页信息
     */
    WED_NOTICE_PAGE_INFOS((short)1, "wedNoticePageInfos"),
    /**
     * 当前自己是否有婚房
     */
    HAS_WEDDING_ROOM((short)2, "hasWeddingRoom");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // WED_NOTICE_PAGE_INFOS
          return WED_NOTICE_PAGE_INFOS;
        case 2: // HAS_WEDDING_ROOM
          return HAS_WEDDING_ROOM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __HASWEDDINGROOM_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.HAS_WEDDING_ROOM};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.WED_NOTICE_PAGE_INFOS, new org.apache.thrift.meta_data.FieldMetaData("wedNoticePageInfos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.CommonDataPageInfos.class)));
    tmpMap.put(_Fields.HAS_WEDDING_ROOM, new org.apache.thrift.meta_data.FieldMetaData("hasWeddingRoom", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCWeddingNotices.class, metaDataMap);
  }

  public SCWeddingNotices() {
  }

  public SCWeddingNotices(
    com.ling9527.music.common.msg.auto.CommonDataPageInfos wedNoticePageInfos)
  {
    this();
    this.wedNoticePageInfos = wedNoticePageInfos;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCWeddingNotices(SCWeddingNotices other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetWedNoticePageInfos()) {
      this.wedNoticePageInfos = new com.ling9527.music.common.msg.auto.CommonDataPageInfos(other.wedNoticePageInfos);
    }
    this.hasWeddingRoom = other.hasWeddingRoom;
  }

  public SCWeddingNotices deepCopy() {
    return new SCWeddingNotices(this);
  }

  @Override
  public void clear() {
    this.wedNoticePageInfos = null;
    setHasWeddingRoomIsSet(false);
    this.hasWeddingRoom = false;
  }

  /**
   * 婚礼动态分页信息
   */
  public com.ling9527.music.common.msg.auto.CommonDataPageInfos getWedNoticePageInfos() {
    return this.wedNoticePageInfos;
  }

  /**
   * 婚礼动态分页信息
   */
  public SCWeddingNotices setWedNoticePageInfos(com.ling9527.music.common.msg.auto.CommonDataPageInfos wedNoticePageInfos) {
    this.wedNoticePageInfos = wedNoticePageInfos;
    return this;
  }

  public void unsetWedNoticePageInfos() {
    this.wedNoticePageInfos = null;
  }

  /** Returns true if field wedNoticePageInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetWedNoticePageInfos() {
    return this.wedNoticePageInfos != null;
  }

  public void setWedNoticePageInfosIsSet(boolean value) {
    if (!value) {
      this.wedNoticePageInfos = null;
    }
  }

  /**
   * 当前自己是否有婚房
   */
  public boolean isHasWeddingRoom() {
    return this.hasWeddingRoom;
  }

  /**
   * 当前自己是否有婚房
   */
  public SCWeddingNotices setHasWeddingRoom(boolean hasWeddingRoom) {
    this.hasWeddingRoom = hasWeddingRoom;
    setHasWeddingRoomIsSet(true);
    return this;
  }

  public void unsetHasWeddingRoom() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HASWEDDINGROOM_ISSET_ID);
  }

  /** Returns true if field hasWeddingRoom is set (has been assigned a value) and false otherwise */
  public boolean isSetHasWeddingRoom() {
    return EncodingUtils.testBit(__isset_bitfield, __HASWEDDINGROOM_ISSET_ID);
  }

  public void setHasWeddingRoomIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HASWEDDINGROOM_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case WED_NOTICE_PAGE_INFOS:
      if (value == null) {
        unsetWedNoticePageInfos();
      } else {
        setWedNoticePageInfos((com.ling9527.music.common.msg.auto.CommonDataPageInfos)value);
      }
      break;

    case HAS_WEDDING_ROOM:
      if (value == null) {
        unsetHasWeddingRoom();
      } else {
        setHasWeddingRoom((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case WED_NOTICE_PAGE_INFOS:
      return getWedNoticePageInfos();

    case HAS_WEDDING_ROOM:
      return Boolean.valueOf(isHasWeddingRoom());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case WED_NOTICE_PAGE_INFOS:
      return isSetWedNoticePageInfos();
    case HAS_WEDDING_ROOM:
      return isSetHasWeddingRoom();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCWeddingNotices)
      return this.equals((SCWeddingNotices)that);
    return false;
  }

  public boolean equals(SCWeddingNotices that) {
    if (that == null)
      return false;

    boolean this_present_wedNoticePageInfos = true && this.isSetWedNoticePageInfos();
    boolean that_present_wedNoticePageInfos = true && that.isSetWedNoticePageInfos();
    if (this_present_wedNoticePageInfos || that_present_wedNoticePageInfos) {
      if (!(this_present_wedNoticePageInfos && that_present_wedNoticePageInfos))
        return false;
      if (!this.wedNoticePageInfos.equals(that.wedNoticePageInfos))
        return false;
    }

    boolean this_present_hasWeddingRoom = true && this.isSetHasWeddingRoom();
    boolean that_present_hasWeddingRoom = true && that.isSetHasWeddingRoom();
    if (this_present_hasWeddingRoom || that_present_hasWeddingRoom) {
      if (!(this_present_hasWeddingRoom && that_present_hasWeddingRoom))
        return false;
      if (this.hasWeddingRoom != that.hasWeddingRoom)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCWeddingNotices other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCWeddingNotices typedOther = (SCWeddingNotices)other;

    lastComparison = Boolean.valueOf(isSetWedNoticePageInfos()).compareTo(typedOther.isSetWedNoticePageInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWedNoticePageInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wedNoticePageInfos, typedOther.wedNoticePageInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHasWeddingRoom()).compareTo(typedOther.isSetHasWeddingRoom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHasWeddingRoom()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasWeddingRoom, typedOther.hasWeddingRoom);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCWeddingNotices(");
    boolean first = true;

    sb.append("wedNoticePageInfos:");
    if (this.wedNoticePageInfos == null) {
      sb.append("null");
    } else {
      sb.append(this.wedNoticePageInfos);
    }
    first = false;
    if (isSetHasWeddingRoom()) {
      if (!first) sb.append(", ");
      sb.append("hasWeddingRoom:");
      sb.append(this.hasWeddingRoom);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (wedNoticePageInfos != null) {
      wedNoticePageInfos.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCWeddingNoticesStandardSchemeFactory implements SchemeFactory {
    public SCWeddingNoticesStandardScheme getScheme() {
      return new SCWeddingNoticesStandardScheme();
    }
  }

  private static class SCWeddingNoticesStandardScheme extends StandardScheme<SCWeddingNotices> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCWeddingNotices struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // WED_NOTICE_PAGE_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.wedNoticePageInfos = new com.ling9527.music.common.msg.auto.CommonDataPageInfos();
              struct.wedNoticePageInfos.read(iprot);
              struct.setWedNoticePageInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HAS_WEDDING_ROOM
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.hasWeddingRoom = iprot.readBool();
              struct.setHasWeddingRoomIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCWeddingNotices struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.wedNoticePageInfos != null) {
        oprot.writeFieldBegin(WED_NOTICE_PAGE_INFOS_FIELD_DESC);
        struct.wedNoticePageInfos.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHasWeddingRoom()) {
        oprot.writeFieldBegin(HAS_WEDDING_ROOM_FIELD_DESC);
        oprot.writeBool(struct.hasWeddingRoom);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCWeddingNoticesTupleSchemeFactory implements SchemeFactory {
    public SCWeddingNoticesTupleScheme getScheme() {
      return new SCWeddingNoticesTupleScheme();
    }
  }

  private static class SCWeddingNoticesTupleScheme extends TupleScheme<SCWeddingNotices> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCWeddingNotices struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetWedNoticePageInfos()) {
        optionals.set(0);
      }
      if (struct.isSetHasWeddingRoom()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetWedNoticePageInfos()) {
        struct.wedNoticePageInfos.write(oprot);
      }
      if (struct.isSetHasWeddingRoom()) {
        oprot.writeBool(struct.hasWeddingRoom);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCWeddingNotices struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.wedNoticePageInfos = new com.ling9527.music.common.msg.auto.CommonDataPageInfos();
        struct.wedNoticePageInfos.read(iprot);
        struct.setWedNoticePageInfosIsSet(true);
      }
      if (incoming.get(1)) {
        struct.hasWeddingRoom = iprot.readBool();
        struct.setHasWeddingRoomIsSet(true);
      }
    }
  }

}

