/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SCCollectExcharngeActivityInfoMsg implements org.apache.thrift.TBase<SCCollectExcharngeActivityInfoMsg, SCCollectExcharngeActivityInfoMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCCollectExcharngeActivityInfoMsg");

  private static final org.apache.thrift.protocol.TField ACTIVITYS_FIELD_DESC = new org.apache.thrift.protocol.TField("activitys", org.apache.thrift.protocol.TType.STRUCT, (short)1);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCCollectExcharngeActivityInfoMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCCollectExcharngeActivityInfoMsgTupleSchemeFactory());
  }

  public com.ling9527.music.common.msg.auto.CollectExchangeInfo activitys; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ACTIVITYS((short)1, "activitys");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACTIVITYS
          return ACTIVITYS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACTIVITYS, new org.apache.thrift.meta_data.FieldMetaData("activitys", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.CollectExchangeInfo.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCCollectExcharngeActivityInfoMsg.class, metaDataMap);
  }

  public SCCollectExcharngeActivityInfoMsg() {
  }

  public SCCollectExcharngeActivityInfoMsg(
    com.ling9527.music.common.msg.auto.CollectExchangeInfo activitys)
  {
    this();
    this.activitys = activitys;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCCollectExcharngeActivityInfoMsg(SCCollectExcharngeActivityInfoMsg other) {
    if (other.isSetActivitys()) {
      this.activitys = new com.ling9527.music.common.msg.auto.CollectExchangeInfo(other.activitys);
    }
  }

  public SCCollectExcharngeActivityInfoMsg deepCopy() {
    return new SCCollectExcharngeActivityInfoMsg(this);
  }

  @Override
  public void clear() {
    this.activitys = null;
  }

  public com.ling9527.music.common.msg.auto.CollectExchangeInfo getActivitys() {
    return this.activitys;
  }

  public SCCollectExcharngeActivityInfoMsg setActivitys(com.ling9527.music.common.msg.auto.CollectExchangeInfo activitys) {
    this.activitys = activitys;
    return this;
  }

  public void unsetActivitys() {
    this.activitys = null;
  }

  /** Returns true if field activitys is set (has been assigned a value) and false otherwise */
  public boolean isSetActivitys() {
    return this.activitys != null;
  }

  public void setActivitysIsSet(boolean value) {
    if (!value) {
      this.activitys = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ACTIVITYS:
      if (value == null) {
        unsetActivitys();
      } else {
        setActivitys((com.ling9527.music.common.msg.auto.CollectExchangeInfo)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ACTIVITYS:
      return getActivitys();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ACTIVITYS:
      return isSetActivitys();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCCollectExcharngeActivityInfoMsg)
      return this.equals((SCCollectExcharngeActivityInfoMsg)that);
    return false;
  }

  public boolean equals(SCCollectExcharngeActivityInfoMsg that) {
    if (that == null)
      return false;

    boolean this_present_activitys = true && this.isSetActivitys();
    boolean that_present_activitys = true && that.isSetActivitys();
    if (this_present_activitys || that_present_activitys) {
      if (!(this_present_activitys && that_present_activitys))
        return false;
      if (!this.activitys.equals(that.activitys))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCCollectExcharngeActivityInfoMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCCollectExcharngeActivityInfoMsg typedOther = (SCCollectExcharngeActivityInfoMsg)other;

    lastComparison = Boolean.valueOf(isSetActivitys()).compareTo(typedOther.isSetActivitys());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActivitys()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activitys, typedOther.activitys);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCCollectExcharngeActivityInfoMsg(");
    boolean first = true;

    sb.append("activitys:");
    if (this.activitys == null) {
      sb.append("null");
    } else {
      sb.append(this.activitys);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (activitys != null) {
      activitys.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCCollectExcharngeActivityInfoMsgStandardSchemeFactory implements SchemeFactory {
    public SCCollectExcharngeActivityInfoMsgStandardScheme getScheme() {
      return new SCCollectExcharngeActivityInfoMsgStandardScheme();
    }
  }

  private static class SCCollectExcharngeActivityInfoMsgStandardScheme extends StandardScheme<SCCollectExcharngeActivityInfoMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCCollectExcharngeActivityInfoMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ACTIVITYS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.activitys = new com.ling9527.music.common.msg.auto.CollectExchangeInfo();
              struct.activitys.read(iprot);
              struct.setActivitysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCCollectExcharngeActivityInfoMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.activitys != null) {
        oprot.writeFieldBegin(ACTIVITYS_FIELD_DESC);
        struct.activitys.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCCollectExcharngeActivityInfoMsgTupleSchemeFactory implements SchemeFactory {
    public SCCollectExcharngeActivityInfoMsgTupleScheme getScheme() {
      return new SCCollectExcharngeActivityInfoMsgTupleScheme();
    }
  }

  private static class SCCollectExcharngeActivityInfoMsgTupleScheme extends TupleScheme<SCCollectExcharngeActivityInfoMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCCollectExcharngeActivityInfoMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetActivitys()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetActivitys()) {
        struct.activitys.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCCollectExcharngeActivityInfoMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.activitys = new com.ling9527.music.common.msg.auto.CollectExchangeInfo();
        struct.activitys.read(iprot);
        struct.setActivitysIsSet(true);
      }
    }
  }

}

