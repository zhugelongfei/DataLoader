/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.cs;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CSQueryMusicLockInfoMsg implements org.apache.thrift.TBase<CSQueryMusicLockInfoMsg, CSQueryMusicLockInfoMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CSQueryMusicLockInfoMsg");

  private static final org.apache.thrift.protocol.TField MODEL_FIELD_DESC = new org.apache.thrift.protocol.TField("model", org.apache.thrift.protocol.TType.BYTE, (short)1);
  private static final org.apache.thrift.protocol.TField IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ids", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CSQueryMusicLockInfoMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CSQueryMusicLockInfoMsgTupleSchemeFactory());
  }

  public byte model; // required
  public List<Short> ids; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MODEL((short)1, "model"),
    IDS((short)2, "ids");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MODEL
          return MODEL;
        case 2: // IDS
          return IDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MODEL_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MODEL, new org.apache.thrift.meta_data.FieldMetaData("model", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.IDS, new org.apache.thrift.meta_data.FieldMetaData("ids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CSQueryMusicLockInfoMsg.class, metaDataMap);
  }

  public CSQueryMusicLockInfoMsg() {
  }

  public CSQueryMusicLockInfoMsg(
    byte model,
    List<Short> ids)
  {
    this();
    this.model = model;
    setModelIsSet(true);
    this.ids = ids;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CSQueryMusicLockInfoMsg(CSQueryMusicLockInfoMsg other) {
    __isset_bitfield = other.__isset_bitfield;
    this.model = other.model;
    if (other.isSetIds()) {
      List<Short> __this__ids = new ArrayList<Short>();
      for (Short other_element : other.ids) {
        __this__ids.add(other_element);
      }
      this.ids = __this__ids;
    }
  }

  public CSQueryMusicLockInfoMsg deepCopy() {
    return new CSQueryMusicLockInfoMsg(this);
  }

  @Override
  public void clear() {
    setModelIsSet(false);
    this.model = 0;
    this.ids = null;
  }

  public byte getModel() {
    return this.model;
  }

  public CSQueryMusicLockInfoMsg setModel(byte model) {
    this.model = model;
    setModelIsSet(true);
    return this;
  }

  public void unsetModel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MODEL_ISSET_ID);
  }

  /** Returns true if field model is set (has been assigned a value) and false otherwise */
  public boolean isSetModel() {
    return EncodingUtils.testBit(__isset_bitfield, __MODEL_ISSET_ID);
  }

  public void setModelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MODEL_ISSET_ID, value);
  }

  public int getIdsSize() {
    return (this.ids == null) ? 0 : this.ids.size();
  }

  public java.util.Iterator<Short> getIdsIterator() {
    return (this.ids == null) ? null : this.ids.iterator();
  }

  public void addToIds(short elem) {
    if (this.ids == null) {
      this.ids = new ArrayList<Short>();
    }
    this.ids.add(elem);
  }

  public List<Short> getIds() {
    return this.ids;
  }

  public CSQueryMusicLockInfoMsg setIds(List<Short> ids) {
    this.ids = ids;
    return this;
  }

  public void unsetIds() {
    this.ids = null;
  }

  /** Returns true if field ids is set (has been assigned a value) and false otherwise */
  public boolean isSetIds() {
    return this.ids != null;
  }

  public void setIdsIsSet(boolean value) {
    if (!value) {
      this.ids = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MODEL:
      if (value == null) {
        unsetModel();
      } else {
        setModel((Byte)value);
      }
      break;

    case IDS:
      if (value == null) {
        unsetIds();
      } else {
        setIds((List<Short>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MODEL:
      return Byte.valueOf(getModel());

    case IDS:
      return getIds();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MODEL:
      return isSetModel();
    case IDS:
      return isSetIds();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CSQueryMusicLockInfoMsg)
      return this.equals((CSQueryMusicLockInfoMsg)that);
    return false;
  }

  public boolean equals(CSQueryMusicLockInfoMsg that) {
    if (that == null)
      return false;

    boolean this_present_model = true;
    boolean that_present_model = true;
    if (this_present_model || that_present_model) {
      if (!(this_present_model && that_present_model))
        return false;
      if (this.model != that.model)
        return false;
    }

    boolean this_present_ids = true && this.isSetIds();
    boolean that_present_ids = true && that.isSetIds();
    if (this_present_ids || that_present_ids) {
      if (!(this_present_ids && that_present_ids))
        return false;
      if (!this.ids.equals(that.ids))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(CSQueryMusicLockInfoMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CSQueryMusicLockInfoMsg typedOther = (CSQueryMusicLockInfoMsg)other;

    lastComparison = Boolean.valueOf(isSetModel()).compareTo(typedOther.isSetModel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.model, typedOther.model);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIds()).compareTo(typedOther.isSetIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ids, typedOther.ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CSQueryMusicLockInfoMsg(");
    boolean first = true;

    sb.append("model:");
    sb.append(this.model);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ids:");
    if (this.ids == null) {
      sb.append("null");
    } else {
      sb.append(this.ids);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CSQueryMusicLockInfoMsgStandardSchemeFactory implements SchemeFactory {
    public CSQueryMusicLockInfoMsgStandardScheme getScheme() {
      return new CSQueryMusicLockInfoMsgStandardScheme();
    }
  }

  private static class CSQueryMusicLockInfoMsgStandardScheme extends StandardScheme<CSQueryMusicLockInfoMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CSQueryMusicLockInfoMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MODEL
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.model = iprot.readByte();
              struct.setModelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.ids = new ArrayList<Short>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  short _elem2; // required
                  _elem2 = iprot.readI16();
                  struct.ids.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CSQueryMusicLockInfoMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MODEL_FIELD_DESC);
      oprot.writeByte(struct.model);
      oprot.writeFieldEnd();
      if (struct.ids != null) {
        oprot.writeFieldBegin(IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, struct.ids.size()));
          for (short _iter3 : struct.ids)
          {
            oprot.writeI16(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CSQueryMusicLockInfoMsgTupleSchemeFactory implements SchemeFactory {
    public CSQueryMusicLockInfoMsgTupleScheme getScheme() {
      return new CSQueryMusicLockInfoMsgTupleScheme();
    }
  }

  private static class CSQueryMusicLockInfoMsgTupleScheme extends TupleScheme<CSQueryMusicLockInfoMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CSQueryMusicLockInfoMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetModel()) {
        optionals.set(0);
      }
      if (struct.isSetIds()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetModel()) {
        oprot.writeByte(struct.model);
      }
      if (struct.isSetIds()) {
        {
          oprot.writeI32(struct.ids.size());
          for (short _iter4 : struct.ids)
          {
            oprot.writeI16(_iter4);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CSQueryMusicLockInfoMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.model = iprot.readByte();
        struct.setModelIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, iprot.readI32());
          struct.ids = new ArrayList<Short>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            short _elem7; // required
            _elem7 = iprot.readI16();
            struct.ids.add(_elem7);
          }
        }
        struct.setIdsIsSet(true);
      }
    }
  }

}

