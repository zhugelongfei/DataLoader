/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class FuncRespParam63 implements org.apache.thrift.TBase<FuncRespParam63, FuncRespParam63._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FuncRespParam63");

  private static final org.apache.thrift.protocol.TField DURATION_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("durationTime", org.apache.thrift.protocol.TType.I16, (short)1);
  private static final org.apache.thrift.protocol.TField CD_FIELD_DESC = new org.apache.thrift.protocol.TField("cd", org.apache.thrift.protocol.TType.I16, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FuncRespParam63StandardSchemeFactory());
    schemes.put(TupleScheme.class, new FuncRespParam63TupleSchemeFactory());
  }

  public short durationTime; // required
  public short cd; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DURATION_TIME((short)1, "durationTime"),
    CD((short)2, "cd");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DURATION_TIME
          return DURATION_TIME;
        case 2: // CD
          return CD;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DURATIONTIME_ISSET_ID = 0;
  private static final int __CD_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DURATION_TIME, new org.apache.thrift.meta_data.FieldMetaData("durationTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.CD, new org.apache.thrift.meta_data.FieldMetaData("cd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FuncRespParam63.class, metaDataMap);
  }

  public FuncRespParam63() {
  }

  public FuncRespParam63(
    short durationTime,
    short cd)
  {
    this();
    this.durationTime = durationTime;
    setDurationTimeIsSet(true);
    this.cd = cd;
    setCdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FuncRespParam63(FuncRespParam63 other) {
    __isset_bitfield = other.__isset_bitfield;
    this.durationTime = other.durationTime;
    this.cd = other.cd;
  }

  public FuncRespParam63 deepCopy() {
    return new FuncRespParam63(this);
  }

  @Override
  public void clear() {
    setDurationTimeIsSet(false);
    this.durationTime = 0;
    setCdIsSet(false);
    this.cd = 0;
  }

  public short getDurationTime() {
    return this.durationTime;
  }

  public FuncRespParam63 setDurationTime(short durationTime) {
    this.durationTime = durationTime;
    setDurationTimeIsSet(true);
    return this;
  }

  public void unsetDurationTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DURATIONTIME_ISSET_ID);
  }

  /** Returns true if field durationTime is set (has been assigned a value) and false otherwise */
  public boolean isSetDurationTime() {
    return EncodingUtils.testBit(__isset_bitfield, __DURATIONTIME_ISSET_ID);
  }

  public void setDurationTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DURATIONTIME_ISSET_ID, value);
  }

  public short getCd() {
    return this.cd;
  }

  public FuncRespParam63 setCd(short cd) {
    this.cd = cd;
    setCdIsSet(true);
    return this;
  }

  public void unsetCd() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CD_ISSET_ID);
  }

  /** Returns true if field cd is set (has been assigned a value) and false otherwise */
  public boolean isSetCd() {
    return EncodingUtils.testBit(__isset_bitfield, __CD_ISSET_ID);
  }

  public void setCdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CD_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DURATION_TIME:
      if (value == null) {
        unsetDurationTime();
      } else {
        setDurationTime((Short)value);
      }
      break;

    case CD:
      if (value == null) {
        unsetCd();
      } else {
        setCd((Short)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DURATION_TIME:
      return Short.valueOf(getDurationTime());

    case CD:
      return Short.valueOf(getCd());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DURATION_TIME:
      return isSetDurationTime();
    case CD:
      return isSetCd();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FuncRespParam63)
      return this.equals((FuncRespParam63)that);
    return false;
  }

  public boolean equals(FuncRespParam63 that) {
    if (that == null)
      return false;

    boolean this_present_durationTime = true;
    boolean that_present_durationTime = true;
    if (this_present_durationTime || that_present_durationTime) {
      if (!(this_present_durationTime && that_present_durationTime))
        return false;
      if (this.durationTime != that.durationTime)
        return false;
    }

    boolean this_present_cd = true;
    boolean that_present_cd = true;
    if (this_present_cd || that_present_cd) {
      if (!(this_present_cd && that_present_cd))
        return false;
      if (this.cd != that.cd)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(FuncRespParam63 other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    FuncRespParam63 typedOther = (FuncRespParam63)other;

    lastComparison = Boolean.valueOf(isSetDurationTime()).compareTo(typedOther.isSetDurationTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDurationTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.durationTime, typedOther.durationTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCd()).compareTo(typedOther.isSetCd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cd, typedOther.cd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FuncRespParam63(");
    boolean first = true;

    sb.append("durationTime:");
    sb.append(this.durationTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cd:");
    sb.append(this.cd);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FuncRespParam63StandardSchemeFactory implements SchemeFactory {
    public FuncRespParam63StandardScheme getScheme() {
      return new FuncRespParam63StandardScheme();
    }
  }

  private static class FuncRespParam63StandardScheme extends StandardScheme<FuncRespParam63> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FuncRespParam63 struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DURATION_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.durationTime = iprot.readI16();
              struct.setDurationTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CD
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.cd = iprot.readI16();
              struct.setCdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FuncRespParam63 struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(DURATION_TIME_FIELD_DESC);
      oprot.writeI16(struct.durationTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CD_FIELD_DESC);
      oprot.writeI16(struct.cd);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FuncRespParam63TupleSchemeFactory implements SchemeFactory {
    public FuncRespParam63TupleScheme getScheme() {
      return new FuncRespParam63TupleScheme();
    }
  }

  private static class FuncRespParam63TupleScheme extends TupleScheme<FuncRespParam63> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FuncRespParam63 struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDurationTime()) {
        optionals.set(0);
      }
      if (struct.isSetCd()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetDurationTime()) {
        oprot.writeI16(struct.durationTime);
      }
      if (struct.isSetCd()) {
        oprot.writeI16(struct.cd);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FuncRespParam63 struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.durationTime = iprot.readI16();
        struct.setDurationTimeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cd = iprot.readI16();
        struct.setCdIsSet(true);
      }
    }
  }

}

