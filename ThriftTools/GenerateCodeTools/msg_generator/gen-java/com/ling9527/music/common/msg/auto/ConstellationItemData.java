/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ConstellationItemData implements org.apache.thrift.TBase<ConstellationItemData, ConstellationItemData._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ConstellationItemData");

  private static final org.apache.thrift.protocol.TField INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("index", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("itemId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ITEM_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("itemNumber", org.apache.thrift.protocol.TType.I16, (short)3);
  private static final org.apache.thrift.protocol.TField VALID_TIME_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("validTimeType", org.apache.thrift.protocol.TType.BYTE, (short)4);
  private static final org.apache.thrift.protocol.TField PRICE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("priceType", org.apache.thrift.protocol.TType.BYTE, (short)5);
  private static final org.apache.thrift.protocol.TField PRICE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("priceCount", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField TRADE_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeFlag", org.apache.thrift.protocol.TType.I32, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ConstellationItemDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ConstellationItemDataTupleSchemeFactory());
  }

  public int index; // required
  public int itemId; // required
  public short itemNumber; // required
  public byte validTimeType; // required
  public byte priceType; // required
  public int priceCount; // required
  public int tradeFlag; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INDEX((short)1, "index"),
    ITEM_ID((short)2, "itemId"),
    ITEM_NUMBER((short)3, "itemNumber"),
    VALID_TIME_TYPE((short)4, "validTimeType"),
    PRICE_TYPE((short)5, "priceType"),
    PRICE_COUNT((short)6, "priceCount"),
    TRADE_FLAG((short)7, "tradeFlag");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INDEX
          return INDEX;
        case 2: // ITEM_ID
          return ITEM_ID;
        case 3: // ITEM_NUMBER
          return ITEM_NUMBER;
        case 4: // VALID_TIME_TYPE
          return VALID_TIME_TYPE;
        case 5: // PRICE_TYPE
          return PRICE_TYPE;
        case 6: // PRICE_COUNT
          return PRICE_COUNT;
        case 7: // TRADE_FLAG
          return TRADE_FLAG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INDEX_ISSET_ID = 0;
  private static final int __ITEMID_ISSET_ID = 1;
  private static final int __ITEMNUMBER_ISSET_ID = 2;
  private static final int __VALIDTIMETYPE_ISSET_ID = 3;
  private static final int __PRICETYPE_ISSET_ID = 4;
  private static final int __PRICECOUNT_ISSET_ID = 5;
  private static final int __TRADEFLAG_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INDEX, new org.apache.thrift.meta_data.FieldMetaData("index", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("itemId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ITEM_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("itemNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.VALID_TIME_TYPE, new org.apache.thrift.meta_data.FieldMetaData("validTimeType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.PRICE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("priceType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.PRICE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("priceCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TRADE_FLAG, new org.apache.thrift.meta_data.FieldMetaData("tradeFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ConstellationItemData.class, metaDataMap);
  }

  public ConstellationItemData() {
  }

  public ConstellationItemData(
    int index,
    int itemId,
    short itemNumber,
    byte validTimeType,
    byte priceType,
    int priceCount,
    int tradeFlag)
  {
    this();
    this.index = index;
    setIndexIsSet(true);
    this.itemId = itemId;
    setItemIdIsSet(true);
    this.itemNumber = itemNumber;
    setItemNumberIsSet(true);
    this.validTimeType = validTimeType;
    setValidTimeTypeIsSet(true);
    this.priceType = priceType;
    setPriceTypeIsSet(true);
    this.priceCount = priceCount;
    setPriceCountIsSet(true);
    this.tradeFlag = tradeFlag;
    setTradeFlagIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ConstellationItemData(ConstellationItemData other) {
    __isset_bitfield = other.__isset_bitfield;
    this.index = other.index;
    this.itemId = other.itemId;
    this.itemNumber = other.itemNumber;
    this.validTimeType = other.validTimeType;
    this.priceType = other.priceType;
    this.priceCount = other.priceCount;
    this.tradeFlag = other.tradeFlag;
  }

  public ConstellationItemData deepCopy() {
    return new ConstellationItemData(this);
  }

  @Override
  public void clear() {
    setIndexIsSet(false);
    this.index = 0;
    setItemIdIsSet(false);
    this.itemId = 0;
    setItemNumberIsSet(false);
    this.itemNumber = 0;
    setValidTimeTypeIsSet(false);
    this.validTimeType = 0;
    setPriceTypeIsSet(false);
    this.priceType = 0;
    setPriceCountIsSet(false);
    this.priceCount = 0;
    setTradeFlagIsSet(false);
    this.tradeFlag = 0;
  }

  public int getIndex() {
    return this.index;
  }

  public ConstellationItemData setIndex(int index) {
    this.index = index;
    setIndexIsSet(true);
    return this;
  }

  public void unsetIndex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INDEX_ISSET_ID);
  }

  /** Returns true if field index is set (has been assigned a value) and false otherwise */
  public boolean isSetIndex() {
    return EncodingUtils.testBit(__isset_bitfield, __INDEX_ISSET_ID);
  }

  public void setIndexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INDEX_ISSET_ID, value);
  }

  public int getItemId() {
    return this.itemId;
  }

  public ConstellationItemData setItemId(int itemId) {
    this.itemId = itemId;
    setItemIdIsSet(true);
    return this;
  }

  public void unsetItemId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ITEMID_ISSET_ID);
  }

  /** Returns true if field itemId is set (has been assigned a value) and false otherwise */
  public boolean isSetItemId() {
    return EncodingUtils.testBit(__isset_bitfield, __ITEMID_ISSET_ID);
  }

  public void setItemIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ITEMID_ISSET_ID, value);
  }

  public short getItemNumber() {
    return this.itemNumber;
  }

  public ConstellationItemData setItemNumber(short itemNumber) {
    this.itemNumber = itemNumber;
    setItemNumberIsSet(true);
    return this;
  }

  public void unsetItemNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ITEMNUMBER_ISSET_ID);
  }

  /** Returns true if field itemNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetItemNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __ITEMNUMBER_ISSET_ID);
  }

  public void setItemNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ITEMNUMBER_ISSET_ID, value);
  }

  public byte getValidTimeType() {
    return this.validTimeType;
  }

  public ConstellationItemData setValidTimeType(byte validTimeType) {
    this.validTimeType = validTimeType;
    setValidTimeTypeIsSet(true);
    return this;
  }

  public void unsetValidTimeType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VALIDTIMETYPE_ISSET_ID);
  }

  /** Returns true if field validTimeType is set (has been assigned a value) and false otherwise */
  public boolean isSetValidTimeType() {
    return EncodingUtils.testBit(__isset_bitfield, __VALIDTIMETYPE_ISSET_ID);
  }

  public void setValidTimeTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VALIDTIMETYPE_ISSET_ID, value);
  }

  public byte getPriceType() {
    return this.priceType;
  }

  public ConstellationItemData setPriceType(byte priceType) {
    this.priceType = priceType;
    setPriceTypeIsSet(true);
    return this;
  }

  public void unsetPriceType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRICETYPE_ISSET_ID);
  }

  /** Returns true if field priceType is set (has been assigned a value) and false otherwise */
  public boolean isSetPriceType() {
    return EncodingUtils.testBit(__isset_bitfield, __PRICETYPE_ISSET_ID);
  }

  public void setPriceTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRICETYPE_ISSET_ID, value);
  }

  public int getPriceCount() {
    return this.priceCount;
  }

  public ConstellationItemData setPriceCount(int priceCount) {
    this.priceCount = priceCount;
    setPriceCountIsSet(true);
    return this;
  }

  public void unsetPriceCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRICECOUNT_ISSET_ID);
  }

  /** Returns true if field priceCount is set (has been assigned a value) and false otherwise */
  public boolean isSetPriceCount() {
    return EncodingUtils.testBit(__isset_bitfield, __PRICECOUNT_ISSET_ID);
  }

  public void setPriceCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRICECOUNT_ISSET_ID, value);
  }

  public int getTradeFlag() {
    return this.tradeFlag;
  }

  public ConstellationItemData setTradeFlag(int tradeFlag) {
    this.tradeFlag = tradeFlag;
    setTradeFlagIsSet(true);
    return this;
  }

  public void unsetTradeFlag() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRADEFLAG_ISSET_ID);
  }

  /** Returns true if field tradeFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeFlag() {
    return EncodingUtils.testBit(__isset_bitfield, __TRADEFLAG_ISSET_ID);
  }

  public void setTradeFlagIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRADEFLAG_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INDEX:
      if (value == null) {
        unsetIndex();
      } else {
        setIndex((Integer)value);
      }
      break;

    case ITEM_ID:
      if (value == null) {
        unsetItemId();
      } else {
        setItemId((Integer)value);
      }
      break;

    case ITEM_NUMBER:
      if (value == null) {
        unsetItemNumber();
      } else {
        setItemNumber((Short)value);
      }
      break;

    case VALID_TIME_TYPE:
      if (value == null) {
        unsetValidTimeType();
      } else {
        setValidTimeType((Byte)value);
      }
      break;

    case PRICE_TYPE:
      if (value == null) {
        unsetPriceType();
      } else {
        setPriceType((Byte)value);
      }
      break;

    case PRICE_COUNT:
      if (value == null) {
        unsetPriceCount();
      } else {
        setPriceCount((Integer)value);
      }
      break;

    case TRADE_FLAG:
      if (value == null) {
        unsetTradeFlag();
      } else {
        setTradeFlag((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INDEX:
      return Integer.valueOf(getIndex());

    case ITEM_ID:
      return Integer.valueOf(getItemId());

    case ITEM_NUMBER:
      return Short.valueOf(getItemNumber());

    case VALID_TIME_TYPE:
      return Byte.valueOf(getValidTimeType());

    case PRICE_TYPE:
      return Byte.valueOf(getPriceType());

    case PRICE_COUNT:
      return Integer.valueOf(getPriceCount());

    case TRADE_FLAG:
      return Integer.valueOf(getTradeFlag());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INDEX:
      return isSetIndex();
    case ITEM_ID:
      return isSetItemId();
    case ITEM_NUMBER:
      return isSetItemNumber();
    case VALID_TIME_TYPE:
      return isSetValidTimeType();
    case PRICE_TYPE:
      return isSetPriceType();
    case PRICE_COUNT:
      return isSetPriceCount();
    case TRADE_FLAG:
      return isSetTradeFlag();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ConstellationItemData)
      return this.equals((ConstellationItemData)that);
    return false;
  }

  public boolean equals(ConstellationItemData that) {
    if (that == null)
      return false;

    boolean this_present_index = true;
    boolean that_present_index = true;
    if (this_present_index || that_present_index) {
      if (!(this_present_index && that_present_index))
        return false;
      if (this.index != that.index)
        return false;
    }

    boolean this_present_itemId = true;
    boolean that_present_itemId = true;
    if (this_present_itemId || that_present_itemId) {
      if (!(this_present_itemId && that_present_itemId))
        return false;
      if (this.itemId != that.itemId)
        return false;
    }

    boolean this_present_itemNumber = true;
    boolean that_present_itemNumber = true;
    if (this_present_itemNumber || that_present_itemNumber) {
      if (!(this_present_itemNumber && that_present_itemNumber))
        return false;
      if (this.itemNumber != that.itemNumber)
        return false;
    }

    boolean this_present_validTimeType = true;
    boolean that_present_validTimeType = true;
    if (this_present_validTimeType || that_present_validTimeType) {
      if (!(this_present_validTimeType && that_present_validTimeType))
        return false;
      if (this.validTimeType != that.validTimeType)
        return false;
    }

    boolean this_present_priceType = true;
    boolean that_present_priceType = true;
    if (this_present_priceType || that_present_priceType) {
      if (!(this_present_priceType && that_present_priceType))
        return false;
      if (this.priceType != that.priceType)
        return false;
    }

    boolean this_present_priceCount = true;
    boolean that_present_priceCount = true;
    if (this_present_priceCount || that_present_priceCount) {
      if (!(this_present_priceCount && that_present_priceCount))
        return false;
      if (this.priceCount != that.priceCount)
        return false;
    }

    boolean this_present_tradeFlag = true;
    boolean that_present_tradeFlag = true;
    if (this_present_tradeFlag || that_present_tradeFlag) {
      if (!(this_present_tradeFlag && that_present_tradeFlag))
        return false;
      if (this.tradeFlag != that.tradeFlag)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ConstellationItemData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ConstellationItemData typedOther = (ConstellationItemData)other;

    lastComparison = Boolean.valueOf(isSetIndex()).compareTo(typedOther.isSetIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.index, typedOther.index);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItemId()).compareTo(typedOther.isSetItemId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemId, typedOther.itemId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItemNumber()).compareTo(typedOther.isSetItemNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemNumber, typedOther.itemNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValidTimeType()).compareTo(typedOther.isSetValidTimeType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValidTimeType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validTimeType, typedOther.validTimeType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPriceType()).compareTo(typedOther.isSetPriceType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriceType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priceType, typedOther.priceType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPriceCount()).compareTo(typedOther.isSetPriceCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriceCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priceCount, typedOther.priceCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeFlag()).compareTo(typedOther.isSetTradeFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeFlag, typedOther.tradeFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ConstellationItemData(");
    boolean first = true;

    sb.append("index:");
    sb.append(this.index);
    first = false;
    if (!first) sb.append(", ");
    sb.append("itemId:");
    sb.append(this.itemId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("itemNumber:");
    sb.append(this.itemNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("validTimeType:");
    sb.append(this.validTimeType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("priceType:");
    sb.append(this.priceType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("priceCount:");
    sb.append(this.priceCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tradeFlag:");
    sb.append(this.tradeFlag);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ConstellationItemDataStandardSchemeFactory implements SchemeFactory {
    public ConstellationItemDataStandardScheme getScheme() {
      return new ConstellationItemDataStandardScheme();
    }
  }

  private static class ConstellationItemDataStandardScheme extends StandardScheme<ConstellationItemData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ConstellationItemData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.index = iprot.readI32();
              struct.setIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ITEM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.itemId = iprot.readI32();
              struct.setItemIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ITEM_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.itemNumber = iprot.readI16();
              struct.setItemNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // VALID_TIME_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.validTimeType = iprot.readByte();
              struct.setValidTimeTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PRICE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.priceType = iprot.readByte();
              struct.setPriceTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PRICE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.priceCount = iprot.readI32();
              struct.setPriceCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TRADE_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tradeFlag = iprot.readI32();
              struct.setTradeFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ConstellationItemData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(INDEX_FIELD_DESC);
      oprot.writeI32(struct.index);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
      oprot.writeI32(struct.itemId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ITEM_NUMBER_FIELD_DESC);
      oprot.writeI16(struct.itemNumber);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VALID_TIME_TYPE_FIELD_DESC);
      oprot.writeByte(struct.validTimeType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRICE_TYPE_FIELD_DESC);
      oprot.writeByte(struct.priceType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRICE_COUNT_FIELD_DESC);
      oprot.writeI32(struct.priceCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TRADE_FLAG_FIELD_DESC);
      oprot.writeI32(struct.tradeFlag);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ConstellationItemDataTupleSchemeFactory implements SchemeFactory {
    public ConstellationItemDataTupleScheme getScheme() {
      return new ConstellationItemDataTupleScheme();
    }
  }

  private static class ConstellationItemDataTupleScheme extends TupleScheme<ConstellationItemData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ConstellationItemData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetIndex()) {
        optionals.set(0);
      }
      if (struct.isSetItemId()) {
        optionals.set(1);
      }
      if (struct.isSetItemNumber()) {
        optionals.set(2);
      }
      if (struct.isSetValidTimeType()) {
        optionals.set(3);
      }
      if (struct.isSetPriceType()) {
        optionals.set(4);
      }
      if (struct.isSetPriceCount()) {
        optionals.set(5);
      }
      if (struct.isSetTradeFlag()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetIndex()) {
        oprot.writeI32(struct.index);
      }
      if (struct.isSetItemId()) {
        oprot.writeI32(struct.itemId);
      }
      if (struct.isSetItemNumber()) {
        oprot.writeI16(struct.itemNumber);
      }
      if (struct.isSetValidTimeType()) {
        oprot.writeByte(struct.validTimeType);
      }
      if (struct.isSetPriceType()) {
        oprot.writeByte(struct.priceType);
      }
      if (struct.isSetPriceCount()) {
        oprot.writeI32(struct.priceCount);
      }
      if (struct.isSetTradeFlag()) {
        oprot.writeI32(struct.tradeFlag);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ConstellationItemData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.index = iprot.readI32();
        struct.setIndexIsSet(true);
      }
      if (incoming.get(1)) {
        struct.itemId = iprot.readI32();
        struct.setItemIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.itemNumber = iprot.readI16();
        struct.setItemNumberIsSet(true);
      }
      if (incoming.get(3)) {
        struct.validTimeType = iprot.readByte();
        struct.setValidTimeTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.priceType = iprot.readByte();
        struct.setPriceTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.priceCount = iprot.readI32();
        struct.setPriceCountIsSet(true);
      }
      if (incoming.get(6)) {
        struct.tradeFlag = iprot.readI32();
        struct.setTradeFlagIsSet(true);
      }
    }
  }

}

