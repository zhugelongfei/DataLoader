/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.cs;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 更新巡演关卡信息
 */
public class CSUpdateRoomTourRaidMsg implements org.apache.thrift.TBase<CSUpdateRoomTourRaidMsg, CSUpdateRoomTourRaidMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CSUpdateRoomTourRaidMsg");

  private static final org.apache.thrift.protocol.TField TOUR_RAID_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("tourRaidType", org.apache.thrift.protocol.TType.BYTE, (short)1);
  private static final org.apache.thrift.protocol.TField RAID_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("raidId", org.apache.thrift.protocol.TType.I16, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CSUpdateRoomTourRaidMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CSUpdateRoomTourRaidMsgTupleSchemeFactory());
  }

  /**
   * 巡演类型 0-普通 1-困难 2-俱乐部
   */
  public byte tourRaidType; // required
  /**
   * 关卡id
   */
  public short raidId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 巡演类型 0-普通 1-困难 2-俱乐部
     */
    TOUR_RAID_TYPE((short)1, "tourRaidType"),
    /**
     * 关卡id
     */
    RAID_ID((short)2, "raidId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TOUR_RAID_TYPE
          return TOUR_RAID_TYPE;
        case 2: // RAID_ID
          return RAID_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOURRAIDTYPE_ISSET_ID = 0;
  private static final int __RAIDID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TOUR_RAID_TYPE, new org.apache.thrift.meta_data.FieldMetaData("tourRaidType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.RAID_ID, new org.apache.thrift.meta_data.FieldMetaData("raidId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CSUpdateRoomTourRaidMsg.class, metaDataMap);
  }

  public CSUpdateRoomTourRaidMsg() {
  }

  public CSUpdateRoomTourRaidMsg(
    byte tourRaidType,
    short raidId)
  {
    this();
    this.tourRaidType = tourRaidType;
    setTourRaidTypeIsSet(true);
    this.raidId = raidId;
    setRaidIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CSUpdateRoomTourRaidMsg(CSUpdateRoomTourRaidMsg other) {
    __isset_bitfield = other.__isset_bitfield;
    this.tourRaidType = other.tourRaidType;
    this.raidId = other.raidId;
  }

  public CSUpdateRoomTourRaidMsg deepCopy() {
    return new CSUpdateRoomTourRaidMsg(this);
  }

  @Override
  public void clear() {
    setTourRaidTypeIsSet(false);
    this.tourRaidType = 0;
    setRaidIdIsSet(false);
    this.raidId = 0;
  }

  /**
   * 巡演类型 0-普通 1-困难 2-俱乐部
   */
  public byte getTourRaidType() {
    return this.tourRaidType;
  }

  /**
   * 巡演类型 0-普通 1-困难 2-俱乐部
   */
  public CSUpdateRoomTourRaidMsg setTourRaidType(byte tourRaidType) {
    this.tourRaidType = tourRaidType;
    setTourRaidTypeIsSet(true);
    return this;
  }

  public void unsetTourRaidType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOURRAIDTYPE_ISSET_ID);
  }

  /** Returns true if field tourRaidType is set (has been assigned a value) and false otherwise */
  public boolean isSetTourRaidType() {
    return EncodingUtils.testBit(__isset_bitfield, __TOURRAIDTYPE_ISSET_ID);
  }

  public void setTourRaidTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOURRAIDTYPE_ISSET_ID, value);
  }

  /**
   * 关卡id
   */
  public short getRaidId() {
    return this.raidId;
  }

  /**
   * 关卡id
   */
  public CSUpdateRoomTourRaidMsg setRaidId(short raidId) {
    this.raidId = raidId;
    setRaidIdIsSet(true);
    return this;
  }

  public void unsetRaidId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RAIDID_ISSET_ID);
  }

  /** Returns true if field raidId is set (has been assigned a value) and false otherwise */
  public boolean isSetRaidId() {
    return EncodingUtils.testBit(__isset_bitfield, __RAIDID_ISSET_ID);
  }

  public void setRaidIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RAIDID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TOUR_RAID_TYPE:
      if (value == null) {
        unsetTourRaidType();
      } else {
        setTourRaidType((Byte)value);
      }
      break;

    case RAID_ID:
      if (value == null) {
        unsetRaidId();
      } else {
        setRaidId((Short)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TOUR_RAID_TYPE:
      return Byte.valueOf(getTourRaidType());

    case RAID_ID:
      return Short.valueOf(getRaidId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TOUR_RAID_TYPE:
      return isSetTourRaidType();
    case RAID_ID:
      return isSetRaidId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CSUpdateRoomTourRaidMsg)
      return this.equals((CSUpdateRoomTourRaidMsg)that);
    return false;
  }

  public boolean equals(CSUpdateRoomTourRaidMsg that) {
    if (that == null)
      return false;

    boolean this_present_tourRaidType = true;
    boolean that_present_tourRaidType = true;
    if (this_present_tourRaidType || that_present_tourRaidType) {
      if (!(this_present_tourRaidType && that_present_tourRaidType))
        return false;
      if (this.tourRaidType != that.tourRaidType)
        return false;
    }

    boolean this_present_raidId = true;
    boolean that_present_raidId = true;
    if (this_present_raidId || that_present_raidId) {
      if (!(this_present_raidId && that_present_raidId))
        return false;
      if (this.raidId != that.raidId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(CSUpdateRoomTourRaidMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CSUpdateRoomTourRaidMsg typedOther = (CSUpdateRoomTourRaidMsg)other;

    lastComparison = Boolean.valueOf(isSetTourRaidType()).compareTo(typedOther.isSetTourRaidType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTourRaidType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tourRaidType, typedOther.tourRaidType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRaidId()).compareTo(typedOther.isSetRaidId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRaidId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.raidId, typedOther.raidId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CSUpdateRoomTourRaidMsg(");
    boolean first = true;

    sb.append("tourRaidType:");
    sb.append(this.tourRaidType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("raidId:");
    sb.append(this.raidId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CSUpdateRoomTourRaidMsgStandardSchemeFactory implements SchemeFactory {
    public CSUpdateRoomTourRaidMsgStandardScheme getScheme() {
      return new CSUpdateRoomTourRaidMsgStandardScheme();
    }
  }

  private static class CSUpdateRoomTourRaidMsgStandardScheme extends StandardScheme<CSUpdateRoomTourRaidMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CSUpdateRoomTourRaidMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TOUR_RAID_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.tourRaidType = iprot.readByte();
              struct.setTourRaidTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RAID_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.raidId = iprot.readI16();
              struct.setRaidIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CSUpdateRoomTourRaidMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TOUR_RAID_TYPE_FIELD_DESC);
      oprot.writeByte(struct.tourRaidType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RAID_ID_FIELD_DESC);
      oprot.writeI16(struct.raidId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CSUpdateRoomTourRaidMsgTupleSchemeFactory implements SchemeFactory {
    public CSUpdateRoomTourRaidMsgTupleScheme getScheme() {
      return new CSUpdateRoomTourRaidMsgTupleScheme();
    }
  }

  private static class CSUpdateRoomTourRaidMsgTupleScheme extends TupleScheme<CSUpdateRoomTourRaidMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CSUpdateRoomTourRaidMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTourRaidType()) {
        optionals.set(0);
      }
      if (struct.isSetRaidId()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetTourRaidType()) {
        oprot.writeByte(struct.tourRaidType);
      }
      if (struct.isSetRaidId()) {
        oprot.writeI16(struct.raidId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CSUpdateRoomTourRaidMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.tourRaidType = iprot.readByte();
        struct.setTourRaidTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.raidId = iprot.readI16();
        struct.setRaidIdIsSet(true);
      }
    }
  }

}

