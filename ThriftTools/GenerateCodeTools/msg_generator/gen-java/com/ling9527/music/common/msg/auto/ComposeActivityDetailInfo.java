/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ComposeActivityDetailInfo implements org.apache.thrift.TBase<ComposeActivityDetailInfo, ComposeActivityDetailInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ComposeActivityDetailInfo");

  private static final org.apache.thrift.protocol.TField ACTIVITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("activityId", org.apache.thrift.protocol.TType.I16, (short)1);
  private static final org.apache.thrift.protocol.TField ACITIVITY_DETAILS_FIELD_DESC = new org.apache.thrift.protocol.TField("acitivityDetails", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ComposeActivityDetailInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ComposeActivityDetailInfoTupleSchemeFactory());
  }

  public short activityId; // required
  public List<ComposeActivityDetail> acitivityDetails; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ACTIVITY_ID((short)1, "activityId"),
    ACITIVITY_DETAILS((short)2, "acitivityDetails");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACTIVITY_ID
          return ACTIVITY_ID;
        case 2: // ACITIVITY_DETAILS
          return ACITIVITY_DETAILS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ACTIVITYID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACTIVITY_ID, new org.apache.thrift.meta_data.FieldMetaData("activityId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.ACITIVITY_DETAILS, new org.apache.thrift.meta_data.FieldMetaData("acitivityDetails", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ComposeActivityDetail.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ComposeActivityDetailInfo.class, metaDataMap);
  }

  public ComposeActivityDetailInfo() {
  }

  public ComposeActivityDetailInfo(
    short activityId,
    List<ComposeActivityDetail> acitivityDetails)
  {
    this();
    this.activityId = activityId;
    setActivityIdIsSet(true);
    this.acitivityDetails = acitivityDetails;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ComposeActivityDetailInfo(ComposeActivityDetailInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.activityId = other.activityId;
    if (other.isSetAcitivityDetails()) {
      List<ComposeActivityDetail> __this__acitivityDetails = new ArrayList<ComposeActivityDetail>();
      for (ComposeActivityDetail other_element : other.acitivityDetails) {
        __this__acitivityDetails.add(new ComposeActivityDetail(other_element));
      }
      this.acitivityDetails = __this__acitivityDetails;
    }
  }

  public ComposeActivityDetailInfo deepCopy() {
    return new ComposeActivityDetailInfo(this);
  }

  @Override
  public void clear() {
    setActivityIdIsSet(false);
    this.activityId = 0;
    this.acitivityDetails = null;
  }

  public short getActivityId() {
    return this.activityId;
  }

  public ComposeActivityDetailInfo setActivityId(short activityId) {
    this.activityId = activityId;
    setActivityIdIsSet(true);
    return this;
  }

  public void unsetActivityId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIVITYID_ISSET_ID);
  }

  /** Returns true if field activityId is set (has been assigned a value) and false otherwise */
  public boolean isSetActivityId() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTIVITYID_ISSET_ID);
  }

  public void setActivityIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIVITYID_ISSET_ID, value);
  }

  public int getAcitivityDetailsSize() {
    return (this.acitivityDetails == null) ? 0 : this.acitivityDetails.size();
  }

  public java.util.Iterator<ComposeActivityDetail> getAcitivityDetailsIterator() {
    return (this.acitivityDetails == null) ? null : this.acitivityDetails.iterator();
  }

  public void addToAcitivityDetails(ComposeActivityDetail elem) {
    if (this.acitivityDetails == null) {
      this.acitivityDetails = new ArrayList<ComposeActivityDetail>();
    }
    this.acitivityDetails.add(elem);
  }

  public List<ComposeActivityDetail> getAcitivityDetails() {
    return this.acitivityDetails;
  }

  public ComposeActivityDetailInfo setAcitivityDetails(List<ComposeActivityDetail> acitivityDetails) {
    this.acitivityDetails = acitivityDetails;
    return this;
  }

  public void unsetAcitivityDetails() {
    this.acitivityDetails = null;
  }

  /** Returns true if field acitivityDetails is set (has been assigned a value) and false otherwise */
  public boolean isSetAcitivityDetails() {
    return this.acitivityDetails != null;
  }

  public void setAcitivityDetailsIsSet(boolean value) {
    if (!value) {
      this.acitivityDetails = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ACTIVITY_ID:
      if (value == null) {
        unsetActivityId();
      } else {
        setActivityId((Short)value);
      }
      break;

    case ACITIVITY_DETAILS:
      if (value == null) {
        unsetAcitivityDetails();
      } else {
        setAcitivityDetails((List<ComposeActivityDetail>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ACTIVITY_ID:
      return Short.valueOf(getActivityId());

    case ACITIVITY_DETAILS:
      return getAcitivityDetails();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ACTIVITY_ID:
      return isSetActivityId();
    case ACITIVITY_DETAILS:
      return isSetAcitivityDetails();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ComposeActivityDetailInfo)
      return this.equals((ComposeActivityDetailInfo)that);
    return false;
  }

  public boolean equals(ComposeActivityDetailInfo that) {
    if (that == null)
      return false;

    boolean this_present_activityId = true;
    boolean that_present_activityId = true;
    if (this_present_activityId || that_present_activityId) {
      if (!(this_present_activityId && that_present_activityId))
        return false;
      if (this.activityId != that.activityId)
        return false;
    }

    boolean this_present_acitivityDetails = true && this.isSetAcitivityDetails();
    boolean that_present_acitivityDetails = true && that.isSetAcitivityDetails();
    if (this_present_acitivityDetails || that_present_acitivityDetails) {
      if (!(this_present_acitivityDetails && that_present_acitivityDetails))
        return false;
      if (!this.acitivityDetails.equals(that.acitivityDetails))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ComposeActivityDetailInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ComposeActivityDetailInfo typedOther = (ComposeActivityDetailInfo)other;

    lastComparison = Boolean.valueOf(isSetActivityId()).compareTo(typedOther.isSetActivityId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActivityId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activityId, typedOther.activityId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAcitivityDetails()).compareTo(typedOther.isSetAcitivityDetails());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcitivityDetails()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acitivityDetails, typedOther.acitivityDetails);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ComposeActivityDetailInfo(");
    boolean first = true;

    sb.append("activityId:");
    sb.append(this.activityId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("acitivityDetails:");
    if (this.acitivityDetails == null) {
      sb.append("null");
    } else {
      sb.append(this.acitivityDetails);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ComposeActivityDetailInfoStandardSchemeFactory implements SchemeFactory {
    public ComposeActivityDetailInfoStandardScheme getScheme() {
      return new ComposeActivityDetailInfoStandardScheme();
    }
  }

  private static class ComposeActivityDetailInfoStandardScheme extends StandardScheme<ComposeActivityDetailInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ComposeActivityDetailInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ACTIVITY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.activityId = iprot.readI16();
              struct.setActivityIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ACITIVITY_DETAILS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list530 = iprot.readListBegin();
                struct.acitivityDetails = new ArrayList<ComposeActivityDetail>(_list530.size);
                for (int _i531 = 0; _i531 < _list530.size; ++_i531)
                {
                  ComposeActivityDetail _elem532; // required
                  _elem532 = new ComposeActivityDetail();
                  _elem532.read(iprot);
                  struct.acitivityDetails.add(_elem532);
                }
                iprot.readListEnd();
              }
              struct.setAcitivityDetailsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ComposeActivityDetailInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ACTIVITY_ID_FIELD_DESC);
      oprot.writeI16(struct.activityId);
      oprot.writeFieldEnd();
      if (struct.acitivityDetails != null) {
        oprot.writeFieldBegin(ACITIVITY_DETAILS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.acitivityDetails.size()));
          for (ComposeActivityDetail _iter533 : struct.acitivityDetails)
          {
            _iter533.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ComposeActivityDetailInfoTupleSchemeFactory implements SchemeFactory {
    public ComposeActivityDetailInfoTupleScheme getScheme() {
      return new ComposeActivityDetailInfoTupleScheme();
    }
  }

  private static class ComposeActivityDetailInfoTupleScheme extends TupleScheme<ComposeActivityDetailInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ComposeActivityDetailInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetActivityId()) {
        optionals.set(0);
      }
      if (struct.isSetAcitivityDetails()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetActivityId()) {
        oprot.writeI16(struct.activityId);
      }
      if (struct.isSetAcitivityDetails()) {
        {
          oprot.writeI32(struct.acitivityDetails.size());
          for (ComposeActivityDetail _iter534 : struct.acitivityDetails)
          {
            _iter534.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ComposeActivityDetailInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.activityId = iprot.readI16();
        struct.setActivityIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list535 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.acitivityDetails = new ArrayList<ComposeActivityDetail>(_list535.size);
          for (int _i536 = 0; _i536 < _list535.size; ++_i536)
          {
            ComposeActivityDetail _elem537; // required
            _elem537 = new ComposeActivityDetail();
            _elem537.read(iprot);
            struct.acitivityDetails.add(_elem537);
          }
        }
        struct.setAcitivityDetailsIsSet(true);
      }
    }
  }

}

