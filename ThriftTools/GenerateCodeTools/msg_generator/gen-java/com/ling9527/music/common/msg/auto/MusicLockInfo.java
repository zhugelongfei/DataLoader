/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MusicLockInfo implements org.apache.thrift.TBase<MusicLockInfo, MusicLockInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MusicLockInfo");

  private static final org.apache.thrift.protocol.TField M_LOCK_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("mLockInfo", org.apache.thrift.protocol.TType.MAP, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MusicLockInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MusicLockInfoTupleSchemeFactory());
  }

  public Map<Short,Byte> mLockInfo; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    M_LOCK_INFO((short)2, "mLockInfo");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 2: // M_LOCK_INFO
          return M_LOCK_INFO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.M_LOCK_INFO, new org.apache.thrift.meta_data.FieldMetaData("mLockInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MusicLockInfo.class, metaDataMap);
  }

  public MusicLockInfo() {
  }

  public MusicLockInfo(
    Map<Short,Byte> mLockInfo)
  {
    this();
    this.mLockInfo = mLockInfo;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MusicLockInfo(MusicLockInfo other) {
    if (other.isSetMLockInfo()) {
      Map<Short,Byte> __this__mLockInfo = new HashMap<Short,Byte>();
      for (Map.Entry<Short, Byte> other_element : other.mLockInfo.entrySet()) {

        Short other_element_key = other_element.getKey();
        Byte other_element_value = other_element.getValue();

        Short __this__mLockInfo_copy_key = other_element_key;

        Byte __this__mLockInfo_copy_value = other_element_value;

        __this__mLockInfo.put(__this__mLockInfo_copy_key, __this__mLockInfo_copy_value);
      }
      this.mLockInfo = __this__mLockInfo;
    }
  }

  public MusicLockInfo deepCopy() {
    return new MusicLockInfo(this);
  }

  @Override
  public void clear() {
    this.mLockInfo = null;
  }

  public int getMLockInfoSize() {
    return (this.mLockInfo == null) ? 0 : this.mLockInfo.size();
  }

  public void putToMLockInfo(short key, byte val) {
    if (this.mLockInfo == null) {
      this.mLockInfo = new HashMap<Short,Byte>();
    }
    this.mLockInfo.put(key, val);
  }

  public Map<Short,Byte> getMLockInfo() {
    return this.mLockInfo;
  }

  public MusicLockInfo setMLockInfo(Map<Short,Byte> mLockInfo) {
    this.mLockInfo = mLockInfo;
    return this;
  }

  public void unsetMLockInfo() {
    this.mLockInfo = null;
  }

  /** Returns true if field mLockInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetMLockInfo() {
    return this.mLockInfo != null;
  }

  public void setMLockInfoIsSet(boolean value) {
    if (!value) {
      this.mLockInfo = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case M_LOCK_INFO:
      if (value == null) {
        unsetMLockInfo();
      } else {
        setMLockInfo((Map<Short,Byte>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case M_LOCK_INFO:
      return getMLockInfo();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case M_LOCK_INFO:
      return isSetMLockInfo();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MusicLockInfo)
      return this.equals((MusicLockInfo)that);
    return false;
  }

  public boolean equals(MusicLockInfo that) {
    if (that == null)
      return false;

    boolean this_present_mLockInfo = true && this.isSetMLockInfo();
    boolean that_present_mLockInfo = true && that.isSetMLockInfo();
    if (this_present_mLockInfo || that_present_mLockInfo) {
      if (!(this_present_mLockInfo && that_present_mLockInfo))
        return false;
      if (!this.mLockInfo.equals(that.mLockInfo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(MusicLockInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    MusicLockInfo typedOther = (MusicLockInfo)other;

    lastComparison = Boolean.valueOf(isSetMLockInfo()).compareTo(typedOther.isSetMLockInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMLockInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mLockInfo, typedOther.mLockInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MusicLockInfo(");
    boolean first = true;

    sb.append("mLockInfo:");
    if (this.mLockInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.mLockInfo);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MusicLockInfoStandardSchemeFactory implements SchemeFactory {
    public MusicLockInfoStandardScheme getScheme() {
      return new MusicLockInfoStandardScheme();
    }
  }

  private static class MusicLockInfoStandardScheme extends StandardScheme<MusicLockInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MusicLockInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 2: // M_LOCK_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map380 = iprot.readMapBegin();
                struct.mLockInfo = new HashMap<Short,Byte>(2*_map380.size);
                for (int _i381 = 0; _i381 < _map380.size; ++_i381)
                {
                  short _key382; // required
                  byte _val383; // required
                  _key382 = iprot.readI16();
                  _val383 = iprot.readByte();
                  struct.mLockInfo.put(_key382, _val383);
                }
                iprot.readMapEnd();
              }
              struct.setMLockInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MusicLockInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.mLockInfo != null) {
        oprot.writeFieldBegin(M_LOCK_INFO_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I16, org.apache.thrift.protocol.TType.BYTE, struct.mLockInfo.size()));
          for (Map.Entry<Short, Byte> _iter384 : struct.mLockInfo.entrySet())
          {
            oprot.writeI16(_iter384.getKey());
            oprot.writeByte(_iter384.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MusicLockInfoTupleSchemeFactory implements SchemeFactory {
    public MusicLockInfoTupleScheme getScheme() {
      return new MusicLockInfoTupleScheme();
    }
  }

  private static class MusicLockInfoTupleScheme extends TupleScheme<MusicLockInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MusicLockInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMLockInfo()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetMLockInfo()) {
        {
          oprot.writeI32(struct.mLockInfo.size());
          for (Map.Entry<Short, Byte> _iter385 : struct.mLockInfo.entrySet())
          {
            oprot.writeI16(_iter385.getKey());
            oprot.writeByte(_iter385.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MusicLockInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map386 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I16, org.apache.thrift.protocol.TType.BYTE, iprot.readI32());
          struct.mLockInfo = new HashMap<Short,Byte>(2*_map386.size);
          for (int _i387 = 0; _i387 < _map386.size; ++_i387)
          {
            short _key388; // required
            byte _val389; // required
            _key388 = iprot.readI16();
            _val389 = iprot.readByte();
            struct.mLockInfo.put(_key388, _val389);
          }
        }
        struct.setMLockInfoIsSet(true);
      }
    }
  }

}

