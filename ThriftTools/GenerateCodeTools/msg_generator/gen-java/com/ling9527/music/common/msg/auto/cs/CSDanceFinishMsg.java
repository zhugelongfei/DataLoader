/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.cs;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Finsh dancing, notice server to broadcast ranking.
 */
public class CSDanceFinishMsg implements org.apache.thrift.TBase<CSDanceFinishMsg, CSDanceFinishMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CSDanceFinishMsg");

  private static final org.apache.thrift.protocol.TField TOTAL_MARK_FIELD_DESC = new org.apache.thrift.protocol.TField("totalMark", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField DANCE_GRADE_FIELD_DESC = new org.apache.thrift.protocol.TField("danceGrade", org.apache.thrift.protocol.TType.I32, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CSDanceFinishMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CSDanceFinishMsgTupleSchemeFactory());
  }

  public int totalMark; // required
  /**
   * 
   * @see com.ling9527.music.common.msg.auto.DanceGrade
   */
  public com.ling9527.music.common.msg.auto.DanceGrade danceGrade; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TOTAL_MARK((short)1, "totalMark"),
    /**
     * 
     * @see com.ling9527.music.common.msg.auto.DanceGrade
     */
    DANCE_GRADE((short)2, "danceGrade");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TOTAL_MARK
          return TOTAL_MARK;
        case 2: // DANCE_GRADE
          return DANCE_GRADE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOTALMARK_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TOTAL_MARK, new org.apache.thrift.meta_data.FieldMetaData("totalMark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DANCE_GRADE, new org.apache.thrift.meta_data.FieldMetaData("danceGrade", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.ling9527.music.common.msg.auto.DanceGrade.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CSDanceFinishMsg.class, metaDataMap);
  }

  public CSDanceFinishMsg() {
  }

  public CSDanceFinishMsg(
    int totalMark,
    com.ling9527.music.common.msg.auto.DanceGrade danceGrade)
  {
    this();
    this.totalMark = totalMark;
    setTotalMarkIsSet(true);
    this.danceGrade = danceGrade;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CSDanceFinishMsg(CSDanceFinishMsg other) {
    __isset_bitfield = other.__isset_bitfield;
    this.totalMark = other.totalMark;
    if (other.isSetDanceGrade()) {
      this.danceGrade = other.danceGrade;
    }
  }

  public CSDanceFinishMsg deepCopy() {
    return new CSDanceFinishMsg(this);
  }

  @Override
  public void clear() {
    setTotalMarkIsSet(false);
    this.totalMark = 0;
    this.danceGrade = null;
  }

  public int getTotalMark() {
    return this.totalMark;
  }

  public CSDanceFinishMsg setTotalMark(int totalMark) {
    this.totalMark = totalMark;
    setTotalMarkIsSet(true);
    return this;
  }

  public void unsetTotalMark() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALMARK_ISSET_ID);
  }

  /** Returns true if field totalMark is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalMark() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALMARK_ISSET_ID);
  }

  public void setTotalMarkIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALMARK_ISSET_ID, value);
  }

  /**
   * 
   * @see com.ling9527.music.common.msg.auto.DanceGrade
   */
  public com.ling9527.music.common.msg.auto.DanceGrade getDanceGrade() {
    return this.danceGrade;
  }

  /**
   * 
   * @see com.ling9527.music.common.msg.auto.DanceGrade
   */
  public CSDanceFinishMsg setDanceGrade(com.ling9527.music.common.msg.auto.DanceGrade danceGrade) {
    this.danceGrade = danceGrade;
    return this;
  }

  public void unsetDanceGrade() {
    this.danceGrade = null;
  }

  /** Returns true if field danceGrade is set (has been assigned a value) and false otherwise */
  public boolean isSetDanceGrade() {
    return this.danceGrade != null;
  }

  public void setDanceGradeIsSet(boolean value) {
    if (!value) {
      this.danceGrade = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TOTAL_MARK:
      if (value == null) {
        unsetTotalMark();
      } else {
        setTotalMark((Integer)value);
      }
      break;

    case DANCE_GRADE:
      if (value == null) {
        unsetDanceGrade();
      } else {
        setDanceGrade((com.ling9527.music.common.msg.auto.DanceGrade)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TOTAL_MARK:
      return Integer.valueOf(getTotalMark());

    case DANCE_GRADE:
      return getDanceGrade();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TOTAL_MARK:
      return isSetTotalMark();
    case DANCE_GRADE:
      return isSetDanceGrade();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CSDanceFinishMsg)
      return this.equals((CSDanceFinishMsg)that);
    return false;
  }

  public boolean equals(CSDanceFinishMsg that) {
    if (that == null)
      return false;

    boolean this_present_totalMark = true;
    boolean that_present_totalMark = true;
    if (this_present_totalMark || that_present_totalMark) {
      if (!(this_present_totalMark && that_present_totalMark))
        return false;
      if (this.totalMark != that.totalMark)
        return false;
    }

    boolean this_present_danceGrade = true && this.isSetDanceGrade();
    boolean that_present_danceGrade = true && that.isSetDanceGrade();
    if (this_present_danceGrade || that_present_danceGrade) {
      if (!(this_present_danceGrade && that_present_danceGrade))
        return false;
      if (!this.danceGrade.equals(that.danceGrade))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(CSDanceFinishMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CSDanceFinishMsg typedOther = (CSDanceFinishMsg)other;

    lastComparison = Boolean.valueOf(isSetTotalMark()).compareTo(typedOther.isSetTotalMark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalMark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalMark, typedOther.totalMark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDanceGrade()).compareTo(typedOther.isSetDanceGrade());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDanceGrade()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.danceGrade, typedOther.danceGrade);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CSDanceFinishMsg(");
    boolean first = true;

    sb.append("totalMark:");
    sb.append(this.totalMark);
    first = false;
    if (!first) sb.append(", ");
    sb.append("danceGrade:");
    if (this.danceGrade == null) {
      sb.append("null");
    } else {
      sb.append(this.danceGrade);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CSDanceFinishMsgStandardSchemeFactory implements SchemeFactory {
    public CSDanceFinishMsgStandardScheme getScheme() {
      return new CSDanceFinishMsgStandardScheme();
    }
  }

  private static class CSDanceFinishMsgStandardScheme extends StandardScheme<CSDanceFinishMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CSDanceFinishMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TOTAL_MARK
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalMark = iprot.readI32();
              struct.setTotalMarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DANCE_GRADE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.danceGrade = com.ling9527.music.common.msg.auto.DanceGrade.findByValue(iprot.readI32());
              struct.setDanceGradeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CSDanceFinishMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TOTAL_MARK_FIELD_DESC);
      oprot.writeI32(struct.totalMark);
      oprot.writeFieldEnd();
      if (struct.danceGrade != null) {
        oprot.writeFieldBegin(DANCE_GRADE_FIELD_DESC);
        oprot.writeI32(struct.danceGrade.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CSDanceFinishMsgTupleSchemeFactory implements SchemeFactory {
    public CSDanceFinishMsgTupleScheme getScheme() {
      return new CSDanceFinishMsgTupleScheme();
    }
  }

  private static class CSDanceFinishMsgTupleScheme extends TupleScheme<CSDanceFinishMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CSDanceFinishMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTotalMark()) {
        optionals.set(0);
      }
      if (struct.isSetDanceGrade()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetTotalMark()) {
        oprot.writeI32(struct.totalMark);
      }
      if (struct.isSetDanceGrade()) {
        oprot.writeI32(struct.danceGrade.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CSDanceFinishMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.totalMark = iprot.readI32();
        struct.setTotalMarkIsSet(true);
      }
      if (incoming.get(1)) {
        struct.danceGrade = com.ling9527.music.common.msg.auto.DanceGrade.findByValue(iprot.readI32());
        struct.setDanceGradeIsSet(true);
      }
    }
  }

}

