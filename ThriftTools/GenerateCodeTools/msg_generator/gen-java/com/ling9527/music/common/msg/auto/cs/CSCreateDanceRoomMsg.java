/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.cs;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CSCreateDanceRoomMsg implements org.apache.thrift.TBase<CSCreateDanceRoomMsg, CSCreateDanceRoomMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CSCreateDanceRoomMsg");

  private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("mode", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField MUSIC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("musicId", org.apache.thrift.protocol.TType.I16, (short)3);
  private static final org.apache.thrift.protocol.TField CHANNEL_FIELD_DESC = new org.apache.thrift.protocol.TField("channel", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField LVL_FIELD_DESC = new org.apache.thrift.protocol.TField("lvl", org.apache.thrift.protocol.TType.BYTE, (short)5);
  private static final org.apache.thrift.protocol.TField WATCH_FIELD_DESC = new org.apache.thrift.protocol.TField("watch", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ROOM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("roomType", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField TOUR_RAID_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tourRaidId", org.apache.thrift.protocol.TType.I16, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CSCreateDanceRoomMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CSCreateDanceRoomMsgTupleSchemeFactory());
  }

  public String password; // optional
  public byte mode; // optional
  public short musicId; // optional
  /**
   * 
   * @see com.ling9527.music.common.msg.auto.RoomChannel
   */
  public com.ling9527.music.common.msg.auto.RoomChannel channel; // optional
  public byte lvl; // optional
  public boolean watch; // optional
  public String title; // required
  /**
   * 
   * @see com.ling9527.music.common.msg.auto.CreateRoomType
   */
  public com.ling9527.music.common.msg.auto.CreateRoomType roomType; // required
  public short tourRaidId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PASSWORD((short)1, "password"),
    MODE((short)2, "mode"),
    MUSIC_ID((short)3, "musicId"),
    /**
     * 
     * @see com.ling9527.music.common.msg.auto.RoomChannel
     */
    CHANNEL((short)4, "channel"),
    LVL((short)5, "lvl"),
    WATCH((short)6, "watch"),
    TITLE((short)7, "title"),
    /**
     * 
     * @see com.ling9527.music.common.msg.auto.CreateRoomType
     */
    ROOM_TYPE((short)8, "roomType"),
    TOUR_RAID_ID((short)9, "tourRaidId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PASSWORD
          return PASSWORD;
        case 2: // MODE
          return MODE;
        case 3: // MUSIC_ID
          return MUSIC_ID;
        case 4: // CHANNEL
          return CHANNEL;
        case 5: // LVL
          return LVL;
        case 6: // WATCH
          return WATCH;
        case 7: // TITLE
          return TITLE;
        case 8: // ROOM_TYPE
          return ROOM_TYPE;
        case 9: // TOUR_RAID_ID
          return TOUR_RAID_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MODE_ISSET_ID = 0;
  private static final int __MUSICID_ISSET_ID = 1;
  private static final int __LVL_ISSET_ID = 2;
  private static final int __WATCH_ISSET_ID = 3;
  private static final int __TOURRAIDID_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.PASSWORD,_Fields.MODE,_Fields.MUSIC_ID,_Fields.CHANNEL,_Fields.LVL,_Fields.WATCH,_Fields.TOUR_RAID_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MODE, new org.apache.thrift.meta_data.FieldMetaData("mode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.MUSIC_ID, new org.apache.thrift.meta_data.FieldMetaData("musicId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.CHANNEL, new org.apache.thrift.meta_data.FieldMetaData("channel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.ling9527.music.common.msg.auto.RoomChannel.class)));
    tmpMap.put(_Fields.LVL, new org.apache.thrift.meta_data.FieldMetaData("lvl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.WATCH, new org.apache.thrift.meta_data.FieldMetaData("watch", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROOM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("roomType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.ling9527.music.common.msg.auto.CreateRoomType.class)));
    tmpMap.put(_Fields.TOUR_RAID_ID, new org.apache.thrift.meta_data.FieldMetaData("tourRaidId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CSCreateDanceRoomMsg.class, metaDataMap);
  }

  public CSCreateDanceRoomMsg() {
  }

  public CSCreateDanceRoomMsg(
    String title,
    com.ling9527.music.common.msg.auto.CreateRoomType roomType)
  {
    this();
    this.title = title;
    this.roomType = roomType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CSCreateDanceRoomMsg(CSCreateDanceRoomMsg other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPassword()) {
      this.password = other.password;
    }
    this.mode = other.mode;
    this.musicId = other.musicId;
    if (other.isSetChannel()) {
      this.channel = other.channel;
    }
    this.lvl = other.lvl;
    this.watch = other.watch;
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetRoomType()) {
      this.roomType = other.roomType;
    }
    this.tourRaidId = other.tourRaidId;
  }

  public CSCreateDanceRoomMsg deepCopy() {
    return new CSCreateDanceRoomMsg(this);
  }

  @Override
  public void clear() {
    this.password = null;
    setModeIsSet(false);
    this.mode = 0;
    setMusicIdIsSet(false);
    this.musicId = 0;
    this.channel = null;
    setLvlIsSet(false);
    this.lvl = 0;
    setWatchIsSet(false);
    this.watch = false;
    this.title = null;
    this.roomType = null;
    setTourRaidIdIsSet(false);
    this.tourRaidId = 0;
  }

  public String getPassword() {
    return this.password;
  }

  public CSCreateDanceRoomMsg setPassword(String password) {
    this.password = password;
    return this;
  }

  public void unsetPassword() {
    this.password = null;
  }

  /** Returns true if field password is set (has been assigned a value) and false otherwise */
  public boolean isSetPassword() {
    return this.password != null;
  }

  public void setPasswordIsSet(boolean value) {
    if (!value) {
      this.password = null;
    }
  }

  public byte getMode() {
    return this.mode;
  }

  public CSCreateDanceRoomMsg setMode(byte mode) {
    this.mode = mode;
    setModeIsSet(true);
    return this;
  }

  public void unsetMode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MODE_ISSET_ID);
  }

  /** Returns true if field mode is set (has been assigned a value) and false otherwise */
  public boolean isSetMode() {
    return EncodingUtils.testBit(__isset_bitfield, __MODE_ISSET_ID);
  }

  public void setModeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MODE_ISSET_ID, value);
  }

  public short getMusicId() {
    return this.musicId;
  }

  public CSCreateDanceRoomMsg setMusicId(short musicId) {
    this.musicId = musicId;
    setMusicIdIsSet(true);
    return this;
  }

  public void unsetMusicId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MUSICID_ISSET_ID);
  }

  /** Returns true if field musicId is set (has been assigned a value) and false otherwise */
  public boolean isSetMusicId() {
    return EncodingUtils.testBit(__isset_bitfield, __MUSICID_ISSET_ID);
  }

  public void setMusicIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MUSICID_ISSET_ID, value);
  }

  /**
   * 
   * @see com.ling9527.music.common.msg.auto.RoomChannel
   */
  public com.ling9527.music.common.msg.auto.RoomChannel getChannel() {
    return this.channel;
  }

  /**
   * 
   * @see com.ling9527.music.common.msg.auto.RoomChannel
   */
  public CSCreateDanceRoomMsg setChannel(com.ling9527.music.common.msg.auto.RoomChannel channel) {
    this.channel = channel;
    return this;
  }

  public void unsetChannel() {
    this.channel = null;
  }

  /** Returns true if field channel is set (has been assigned a value) and false otherwise */
  public boolean isSetChannel() {
    return this.channel != null;
  }

  public void setChannelIsSet(boolean value) {
    if (!value) {
      this.channel = null;
    }
  }

  public byte getLvl() {
    return this.lvl;
  }

  public CSCreateDanceRoomMsg setLvl(byte lvl) {
    this.lvl = lvl;
    setLvlIsSet(true);
    return this;
  }

  public void unsetLvl() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LVL_ISSET_ID);
  }

  /** Returns true if field lvl is set (has been assigned a value) and false otherwise */
  public boolean isSetLvl() {
    return EncodingUtils.testBit(__isset_bitfield, __LVL_ISSET_ID);
  }

  public void setLvlIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LVL_ISSET_ID, value);
  }

  public boolean isWatch() {
    return this.watch;
  }

  public CSCreateDanceRoomMsg setWatch(boolean watch) {
    this.watch = watch;
    setWatchIsSet(true);
    return this;
  }

  public void unsetWatch() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WATCH_ISSET_ID);
  }

  /** Returns true if field watch is set (has been assigned a value) and false otherwise */
  public boolean isSetWatch() {
    return EncodingUtils.testBit(__isset_bitfield, __WATCH_ISSET_ID);
  }

  public void setWatchIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WATCH_ISSET_ID, value);
  }

  public String getTitle() {
    return this.title;
  }

  public CSCreateDanceRoomMsg setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  /**
   * 
   * @see com.ling9527.music.common.msg.auto.CreateRoomType
   */
  public com.ling9527.music.common.msg.auto.CreateRoomType getRoomType() {
    return this.roomType;
  }

  /**
   * 
   * @see com.ling9527.music.common.msg.auto.CreateRoomType
   */
  public CSCreateDanceRoomMsg setRoomType(com.ling9527.music.common.msg.auto.CreateRoomType roomType) {
    this.roomType = roomType;
    return this;
  }

  public void unsetRoomType() {
    this.roomType = null;
  }

  /** Returns true if field roomType is set (has been assigned a value) and false otherwise */
  public boolean isSetRoomType() {
    return this.roomType != null;
  }

  public void setRoomTypeIsSet(boolean value) {
    if (!value) {
      this.roomType = null;
    }
  }

  public short getTourRaidId() {
    return this.tourRaidId;
  }

  public CSCreateDanceRoomMsg setTourRaidId(short tourRaidId) {
    this.tourRaidId = tourRaidId;
    setTourRaidIdIsSet(true);
    return this;
  }

  public void unsetTourRaidId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOURRAIDID_ISSET_ID);
  }

  /** Returns true if field tourRaidId is set (has been assigned a value) and false otherwise */
  public boolean isSetTourRaidId() {
    return EncodingUtils.testBit(__isset_bitfield, __TOURRAIDID_ISSET_ID);
  }

  public void setTourRaidIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOURRAIDID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PASSWORD:
      if (value == null) {
        unsetPassword();
      } else {
        setPassword((String)value);
      }
      break;

    case MODE:
      if (value == null) {
        unsetMode();
      } else {
        setMode((Byte)value);
      }
      break;

    case MUSIC_ID:
      if (value == null) {
        unsetMusicId();
      } else {
        setMusicId((Short)value);
      }
      break;

    case CHANNEL:
      if (value == null) {
        unsetChannel();
      } else {
        setChannel((com.ling9527.music.common.msg.auto.RoomChannel)value);
      }
      break;

    case LVL:
      if (value == null) {
        unsetLvl();
      } else {
        setLvl((Byte)value);
      }
      break;

    case WATCH:
      if (value == null) {
        unsetWatch();
      } else {
        setWatch((Boolean)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case ROOM_TYPE:
      if (value == null) {
        unsetRoomType();
      } else {
        setRoomType((com.ling9527.music.common.msg.auto.CreateRoomType)value);
      }
      break;

    case TOUR_RAID_ID:
      if (value == null) {
        unsetTourRaidId();
      } else {
        setTourRaidId((Short)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PASSWORD:
      return getPassword();

    case MODE:
      return Byte.valueOf(getMode());

    case MUSIC_ID:
      return Short.valueOf(getMusicId());

    case CHANNEL:
      return getChannel();

    case LVL:
      return Byte.valueOf(getLvl());

    case WATCH:
      return Boolean.valueOf(isWatch());

    case TITLE:
      return getTitle();

    case ROOM_TYPE:
      return getRoomType();

    case TOUR_RAID_ID:
      return Short.valueOf(getTourRaidId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PASSWORD:
      return isSetPassword();
    case MODE:
      return isSetMode();
    case MUSIC_ID:
      return isSetMusicId();
    case CHANNEL:
      return isSetChannel();
    case LVL:
      return isSetLvl();
    case WATCH:
      return isSetWatch();
    case TITLE:
      return isSetTitle();
    case ROOM_TYPE:
      return isSetRoomType();
    case TOUR_RAID_ID:
      return isSetTourRaidId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CSCreateDanceRoomMsg)
      return this.equals((CSCreateDanceRoomMsg)that);
    return false;
  }

  public boolean equals(CSCreateDanceRoomMsg that) {
    if (that == null)
      return false;

    boolean this_present_password = true && this.isSetPassword();
    boolean that_present_password = true && that.isSetPassword();
    if (this_present_password || that_present_password) {
      if (!(this_present_password && that_present_password))
        return false;
      if (!this.password.equals(that.password))
        return false;
    }

    boolean this_present_mode = true && this.isSetMode();
    boolean that_present_mode = true && that.isSetMode();
    if (this_present_mode || that_present_mode) {
      if (!(this_present_mode && that_present_mode))
        return false;
      if (this.mode != that.mode)
        return false;
    }

    boolean this_present_musicId = true && this.isSetMusicId();
    boolean that_present_musicId = true && that.isSetMusicId();
    if (this_present_musicId || that_present_musicId) {
      if (!(this_present_musicId && that_present_musicId))
        return false;
      if (this.musicId != that.musicId)
        return false;
    }

    boolean this_present_channel = true && this.isSetChannel();
    boolean that_present_channel = true && that.isSetChannel();
    if (this_present_channel || that_present_channel) {
      if (!(this_present_channel && that_present_channel))
        return false;
      if (!this.channel.equals(that.channel))
        return false;
    }

    boolean this_present_lvl = true && this.isSetLvl();
    boolean that_present_lvl = true && that.isSetLvl();
    if (this_present_lvl || that_present_lvl) {
      if (!(this_present_lvl && that_present_lvl))
        return false;
      if (this.lvl != that.lvl)
        return false;
    }

    boolean this_present_watch = true && this.isSetWatch();
    boolean that_present_watch = true && that.isSetWatch();
    if (this_present_watch || that_present_watch) {
      if (!(this_present_watch && that_present_watch))
        return false;
      if (this.watch != that.watch)
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_roomType = true && this.isSetRoomType();
    boolean that_present_roomType = true && that.isSetRoomType();
    if (this_present_roomType || that_present_roomType) {
      if (!(this_present_roomType && that_present_roomType))
        return false;
      if (!this.roomType.equals(that.roomType))
        return false;
    }

    boolean this_present_tourRaidId = true && this.isSetTourRaidId();
    boolean that_present_tourRaidId = true && that.isSetTourRaidId();
    if (this_present_tourRaidId || that_present_tourRaidId) {
      if (!(this_present_tourRaidId && that_present_tourRaidId))
        return false;
      if (this.tourRaidId != that.tourRaidId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(CSCreateDanceRoomMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CSCreateDanceRoomMsg typedOther = (CSCreateDanceRoomMsg)other;

    lastComparison = Boolean.valueOf(isSetPassword()).compareTo(typedOther.isSetPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, typedOther.password);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMode()).compareTo(typedOther.isSetMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mode, typedOther.mode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMusicId()).compareTo(typedOther.isSetMusicId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMusicId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.musicId, typedOther.musicId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChannel()).compareTo(typedOther.isSetChannel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channel, typedOther.channel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLvl()).compareTo(typedOther.isSetLvl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLvl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lvl, typedOther.lvl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWatch()).compareTo(typedOther.isSetWatch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWatch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.watch, typedOther.watch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(typedOther.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, typedOther.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRoomType()).compareTo(typedOther.isSetRoomType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoomType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roomType, typedOther.roomType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTourRaidId()).compareTo(typedOther.isSetTourRaidId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTourRaidId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tourRaidId, typedOther.tourRaidId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CSCreateDanceRoomMsg(");
    boolean first = true;

    if (isSetPassword()) {
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
    }
    if (isSetMode()) {
      if (!first) sb.append(", ");
      sb.append("mode:");
      sb.append(this.mode);
      first = false;
    }
    if (isSetMusicId()) {
      if (!first) sb.append(", ");
      sb.append("musicId:");
      sb.append(this.musicId);
      first = false;
    }
    if (isSetChannel()) {
      if (!first) sb.append(", ");
      sb.append("channel:");
      if (this.channel == null) {
        sb.append("null");
      } else {
        sb.append(this.channel);
      }
      first = false;
    }
    if (isSetLvl()) {
      if (!first) sb.append(", ");
      sb.append("lvl:");
      sb.append(this.lvl);
      first = false;
    }
    if (isSetWatch()) {
      if (!first) sb.append(", ");
      sb.append("watch:");
      sb.append(this.watch);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("roomType:");
    if (this.roomType == null) {
      sb.append("null");
    } else {
      sb.append(this.roomType);
    }
    first = false;
    if (isSetTourRaidId()) {
      if (!first) sb.append(", ");
      sb.append("tourRaidId:");
      sb.append(this.tourRaidId);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CSCreateDanceRoomMsgStandardSchemeFactory implements SchemeFactory {
    public CSCreateDanceRoomMsgStandardScheme getScheme() {
      return new CSCreateDanceRoomMsgStandardScheme();
    }
  }

  private static class CSCreateDanceRoomMsgStandardScheme extends StandardScheme<CSCreateDanceRoomMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CSCreateDanceRoomMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.password = iprot.readString();
              struct.setPasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.mode = iprot.readByte();
              struct.setModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MUSIC_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.musicId = iprot.readI16();
              struct.setMusicIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CHANNEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.channel = com.ling9527.music.common.msg.auto.RoomChannel.findByValue(iprot.readI32());
              struct.setChannelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LVL
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.lvl = iprot.readByte();
              struct.setLvlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // WATCH
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.watch = iprot.readBool();
              struct.setWatchIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ROOM_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.roomType = com.ling9527.music.common.msg.auto.CreateRoomType.findByValue(iprot.readI32());
              struct.setRoomTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TOUR_RAID_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.tourRaidId = iprot.readI16();
              struct.setTourRaidIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CSCreateDanceRoomMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.password != null) {
        if (struct.isSetPassword()) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMode()) {
        oprot.writeFieldBegin(MODE_FIELD_DESC);
        oprot.writeByte(struct.mode);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMusicId()) {
        oprot.writeFieldBegin(MUSIC_ID_FIELD_DESC);
        oprot.writeI16(struct.musicId);
        oprot.writeFieldEnd();
      }
      if (struct.channel != null) {
        if (struct.isSetChannel()) {
          oprot.writeFieldBegin(CHANNEL_FIELD_DESC);
          oprot.writeI32(struct.channel.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLvl()) {
        oprot.writeFieldBegin(LVL_FIELD_DESC);
        oprot.writeByte(struct.lvl);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWatch()) {
        oprot.writeFieldBegin(WATCH_FIELD_DESC);
        oprot.writeBool(struct.watch);
        oprot.writeFieldEnd();
      }
      if (struct.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(struct.title);
        oprot.writeFieldEnd();
      }
      if (struct.roomType != null) {
        oprot.writeFieldBegin(ROOM_TYPE_FIELD_DESC);
        oprot.writeI32(struct.roomType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.isSetTourRaidId()) {
        oprot.writeFieldBegin(TOUR_RAID_ID_FIELD_DESC);
        oprot.writeI16(struct.tourRaidId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CSCreateDanceRoomMsgTupleSchemeFactory implements SchemeFactory {
    public CSCreateDanceRoomMsgTupleScheme getScheme() {
      return new CSCreateDanceRoomMsgTupleScheme();
    }
  }

  private static class CSCreateDanceRoomMsgTupleScheme extends TupleScheme<CSCreateDanceRoomMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CSCreateDanceRoomMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPassword()) {
        optionals.set(0);
      }
      if (struct.isSetMode()) {
        optionals.set(1);
      }
      if (struct.isSetMusicId()) {
        optionals.set(2);
      }
      if (struct.isSetChannel()) {
        optionals.set(3);
      }
      if (struct.isSetLvl()) {
        optionals.set(4);
      }
      if (struct.isSetWatch()) {
        optionals.set(5);
      }
      if (struct.isSetTitle()) {
        optionals.set(6);
      }
      if (struct.isSetRoomType()) {
        optionals.set(7);
      }
      if (struct.isSetTourRaidId()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetPassword()) {
        oprot.writeString(struct.password);
      }
      if (struct.isSetMode()) {
        oprot.writeByte(struct.mode);
      }
      if (struct.isSetMusicId()) {
        oprot.writeI16(struct.musicId);
      }
      if (struct.isSetChannel()) {
        oprot.writeI32(struct.channel.getValue());
      }
      if (struct.isSetLvl()) {
        oprot.writeByte(struct.lvl);
      }
      if (struct.isSetWatch()) {
        oprot.writeBool(struct.watch);
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetRoomType()) {
        oprot.writeI32(struct.roomType.getValue());
      }
      if (struct.isSetTourRaidId()) {
        oprot.writeI16(struct.tourRaidId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CSCreateDanceRoomMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.password = iprot.readString();
        struct.setPasswordIsSet(true);
      }
      if (incoming.get(1)) {
        struct.mode = iprot.readByte();
        struct.setModeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.musicId = iprot.readI16();
        struct.setMusicIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.channel = com.ling9527.music.common.msg.auto.RoomChannel.findByValue(iprot.readI32());
        struct.setChannelIsSet(true);
      }
      if (incoming.get(4)) {
        struct.lvl = iprot.readByte();
        struct.setLvlIsSet(true);
      }
      if (incoming.get(5)) {
        struct.watch = iprot.readBool();
        struct.setWatchIsSet(true);
      }
      if (incoming.get(6)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(7)) {
        struct.roomType = com.ling9527.music.common.msg.auto.CreateRoomType.findByValue(iprot.readI32());
        struct.setRoomTypeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.tourRaidId = iprot.readI16();
        struct.setTourRaidIdIsSet(true);
      }
    }
  }

}

