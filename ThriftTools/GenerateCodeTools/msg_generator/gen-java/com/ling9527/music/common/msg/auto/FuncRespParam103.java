/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 烟花释放参数
 */
public class FuncRespParam103 implements org.apache.thrift.TBase<FuncRespParam103, FuncRespParam103._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FuncRespParam103");

  private static final org.apache.thrift.protocol.TField CHAR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("charName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CHAR_SEX_FIELD_DESC = new org.apache.thrift.protocol.TField("charSex", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField FIREWORK_ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fireworkItemId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FuncRespParam103StandardSchemeFactory());
    schemes.put(TupleScheme.class, new FuncRespParam103TupleSchemeFactory());
  }

  public String charName; // required
  public byte charSex; // required
  /**
   * 烟花道具id
   */
  public int fireworkItemId; // required
  /**
   * 祝福语
   */
  public String content; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CHAR_NAME((short)1, "charName"),
    CHAR_SEX((short)2, "charSex"),
    /**
     * 烟花道具id
     */
    FIREWORK_ITEM_ID((short)3, "fireworkItemId"),
    /**
     * 祝福语
     */
    CONTENT((short)4, "content");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CHAR_NAME
          return CHAR_NAME;
        case 2: // CHAR_SEX
          return CHAR_SEX;
        case 3: // FIREWORK_ITEM_ID
          return FIREWORK_ITEM_ID;
        case 4: // CONTENT
          return CONTENT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CHARSEX_ISSET_ID = 0;
  private static final int __FIREWORKITEMID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CHAR_NAME, new org.apache.thrift.meta_data.FieldMetaData("charName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHAR_SEX, new org.apache.thrift.meta_data.FieldMetaData("charSex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.FIREWORK_ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("fireworkItemId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FuncRespParam103.class, metaDataMap);
  }

  public FuncRespParam103() {
  }

  public FuncRespParam103(
    String charName,
    byte charSex,
    int fireworkItemId,
    String content)
  {
    this();
    this.charName = charName;
    this.charSex = charSex;
    setCharSexIsSet(true);
    this.fireworkItemId = fireworkItemId;
    setFireworkItemIdIsSet(true);
    this.content = content;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FuncRespParam103(FuncRespParam103 other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCharName()) {
      this.charName = other.charName;
    }
    this.charSex = other.charSex;
    this.fireworkItemId = other.fireworkItemId;
    if (other.isSetContent()) {
      this.content = other.content;
    }
  }

  public FuncRespParam103 deepCopy() {
    return new FuncRespParam103(this);
  }

  @Override
  public void clear() {
    this.charName = null;
    setCharSexIsSet(false);
    this.charSex = 0;
    setFireworkItemIdIsSet(false);
    this.fireworkItemId = 0;
    this.content = null;
  }

  public String getCharName() {
    return this.charName;
  }

  public FuncRespParam103 setCharName(String charName) {
    this.charName = charName;
    return this;
  }

  public void unsetCharName() {
    this.charName = null;
  }

  /** Returns true if field charName is set (has been assigned a value) and false otherwise */
  public boolean isSetCharName() {
    return this.charName != null;
  }

  public void setCharNameIsSet(boolean value) {
    if (!value) {
      this.charName = null;
    }
  }

  public byte getCharSex() {
    return this.charSex;
  }

  public FuncRespParam103 setCharSex(byte charSex) {
    this.charSex = charSex;
    setCharSexIsSet(true);
    return this;
  }

  public void unsetCharSex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHARSEX_ISSET_ID);
  }

  /** Returns true if field charSex is set (has been assigned a value) and false otherwise */
  public boolean isSetCharSex() {
    return EncodingUtils.testBit(__isset_bitfield, __CHARSEX_ISSET_ID);
  }

  public void setCharSexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHARSEX_ISSET_ID, value);
  }

  /**
   * 烟花道具id
   */
  public int getFireworkItemId() {
    return this.fireworkItemId;
  }

  /**
   * 烟花道具id
   */
  public FuncRespParam103 setFireworkItemId(int fireworkItemId) {
    this.fireworkItemId = fireworkItemId;
    setFireworkItemIdIsSet(true);
    return this;
  }

  public void unsetFireworkItemId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIREWORKITEMID_ISSET_ID);
  }

  /** Returns true if field fireworkItemId is set (has been assigned a value) and false otherwise */
  public boolean isSetFireworkItemId() {
    return EncodingUtils.testBit(__isset_bitfield, __FIREWORKITEMID_ISSET_ID);
  }

  public void setFireworkItemIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIREWORKITEMID_ISSET_ID, value);
  }

  /**
   * 祝福语
   */
  public String getContent() {
    return this.content;
  }

  /**
   * 祝福语
   */
  public FuncRespParam103 setContent(String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CHAR_NAME:
      if (value == null) {
        unsetCharName();
      } else {
        setCharName((String)value);
      }
      break;

    case CHAR_SEX:
      if (value == null) {
        unsetCharSex();
      } else {
        setCharSex((Byte)value);
      }
      break;

    case FIREWORK_ITEM_ID:
      if (value == null) {
        unsetFireworkItemId();
      } else {
        setFireworkItemId((Integer)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CHAR_NAME:
      return getCharName();

    case CHAR_SEX:
      return Byte.valueOf(getCharSex());

    case FIREWORK_ITEM_ID:
      return Integer.valueOf(getFireworkItemId());

    case CONTENT:
      return getContent();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CHAR_NAME:
      return isSetCharName();
    case CHAR_SEX:
      return isSetCharSex();
    case FIREWORK_ITEM_ID:
      return isSetFireworkItemId();
    case CONTENT:
      return isSetContent();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FuncRespParam103)
      return this.equals((FuncRespParam103)that);
    return false;
  }

  public boolean equals(FuncRespParam103 that) {
    if (that == null)
      return false;

    boolean this_present_charName = true && this.isSetCharName();
    boolean that_present_charName = true && that.isSetCharName();
    if (this_present_charName || that_present_charName) {
      if (!(this_present_charName && that_present_charName))
        return false;
      if (!this.charName.equals(that.charName))
        return false;
    }

    boolean this_present_charSex = true;
    boolean that_present_charSex = true;
    if (this_present_charSex || that_present_charSex) {
      if (!(this_present_charSex && that_present_charSex))
        return false;
      if (this.charSex != that.charSex)
        return false;
    }

    boolean this_present_fireworkItemId = true;
    boolean that_present_fireworkItemId = true;
    if (this_present_fireworkItemId || that_present_fireworkItemId) {
      if (!(this_present_fireworkItemId && that_present_fireworkItemId))
        return false;
      if (this.fireworkItemId != that.fireworkItemId)
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(FuncRespParam103 other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    FuncRespParam103 typedOther = (FuncRespParam103)other;

    lastComparison = Boolean.valueOf(isSetCharName()).compareTo(typedOther.isSetCharName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCharName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.charName, typedOther.charName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCharSex()).compareTo(typedOther.isSetCharSex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCharSex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.charSex, typedOther.charSex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFireworkItemId()).compareTo(typedOther.isSetFireworkItemId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFireworkItemId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fireworkItemId, typedOther.fireworkItemId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(typedOther.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, typedOther.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FuncRespParam103(");
    boolean first = true;

    sb.append("charName:");
    if (this.charName == null) {
      sb.append("null");
    } else {
      sb.append(this.charName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("charSex:");
    sb.append(this.charSex);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fireworkItemId:");
    sb.append(this.fireworkItemId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      sb.append(this.content);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FuncRespParam103StandardSchemeFactory implements SchemeFactory {
    public FuncRespParam103StandardScheme getScheme() {
      return new FuncRespParam103StandardScheme();
    }
  }

  private static class FuncRespParam103StandardScheme extends StandardScheme<FuncRespParam103> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FuncRespParam103 struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CHAR_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.charName = iprot.readString();
              struct.setCharNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CHAR_SEX
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.charSex = iprot.readByte();
              struct.setCharSexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FIREWORK_ITEM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fireworkItemId = iprot.readI32();
              struct.setFireworkItemIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FuncRespParam103 struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.charName != null) {
        oprot.writeFieldBegin(CHAR_NAME_FIELD_DESC);
        oprot.writeString(struct.charName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CHAR_SEX_FIELD_DESC);
      oprot.writeByte(struct.charSex);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FIREWORK_ITEM_ID_FIELD_DESC);
      oprot.writeI32(struct.fireworkItemId);
      oprot.writeFieldEnd();
      if (struct.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeString(struct.content);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FuncRespParam103TupleSchemeFactory implements SchemeFactory {
    public FuncRespParam103TupleScheme getScheme() {
      return new FuncRespParam103TupleScheme();
    }
  }

  private static class FuncRespParam103TupleScheme extends TupleScheme<FuncRespParam103> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FuncRespParam103 struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCharName()) {
        optionals.set(0);
      }
      if (struct.isSetCharSex()) {
        optionals.set(1);
      }
      if (struct.isSetFireworkItemId()) {
        optionals.set(2);
      }
      if (struct.isSetContent()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetCharName()) {
        oprot.writeString(struct.charName);
      }
      if (struct.isSetCharSex()) {
        oprot.writeByte(struct.charSex);
      }
      if (struct.isSetFireworkItemId()) {
        oprot.writeI32(struct.fireworkItemId);
      }
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FuncRespParam103 struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.charName = iprot.readString();
        struct.setCharNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.charSex = iprot.readByte();
        struct.setCharSexIsSet(true);
      }
      if (incoming.get(2)) {
        struct.fireworkItemId = iprot.readI32();
        struct.setFireworkItemIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
    }
  }

}

