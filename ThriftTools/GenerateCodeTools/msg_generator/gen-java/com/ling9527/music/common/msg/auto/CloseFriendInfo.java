/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CloseFriendInfo implements org.apache.thrift.TBase<CloseFriendInfo, CloseFriendInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CloseFriendInfo");

  private static final org.apache.thrift.protocol.TField RELATIONSHIP_SELF_FIELD_DESC = new org.apache.thrift.protocol.TField("relationshipSelf", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField USE_LVL_RELATION_SHIP_SELF_FIELD_DESC = new org.apache.thrift.protocol.TField("useLvlRelationShipSelf", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField RELATIONSHIP_FRIEND_FIELD_DESC = new org.apache.thrift.protocol.TField("relationshipFriend", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField USE_LVL_RELATION_SHIP_FRIEND_FIELD_DESC = new org.apache.thrift.protocol.TField("useLvlRelationShipFriend", org.apache.thrift.protocol.TType.BYTE, (short)4);
  private static final org.apache.thrift.protocol.TField INTIMACY_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("intimacyVal", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField POSE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("poseId", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField MOOD_MESSAGE_SELF_FIELD_DESC = new org.apache.thrift.protocol.TField("moodMessageSelf", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField VOICE_MESSAGE_SELF_FIELD_DESC = new org.apache.thrift.protocol.TField("voiceMessageSelf", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField MODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("modeId", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField STATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("stature", org.apache.thrift.protocol.TType.BYTE, (short)10);
  private static final org.apache.thrift.protocol.TField MOOD_MESSAGE_FRIEND_FIELD_DESC = new org.apache.thrift.protocol.TField("moodMessageFriend", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField VOICE_MESSAGE_FRIEND_FIELD_DESC = new org.apache.thrift.protocol.TField("voiceMessageFriend", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField PLAYER_BASE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("playerBaseInfo", org.apache.thrift.protocol.TType.STRUCT, (short)14);
  private static final org.apache.thrift.protocol.TField AVATAR_LIST_FRIEND_FIELD_DESC = new org.apache.thrift.protocol.TField("avatarListFriend", org.apache.thrift.protocol.TType.LIST, (short)15);
  private static final org.apache.thrift.protocol.TField SPECIAL_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("specialDay", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField IS_FIRST_TIME_CHANGE_NICK_FIELD_DESC = new org.apache.thrift.protocol.TField("isFirstTimeChangeNick", org.apache.thrift.protocol.TType.BOOL, (short)17);
  private static final org.apache.thrift.protocol.TField IS_FIRST_TIME_CHANGE_POS_FIELD_DESC = new org.apache.thrift.protocol.TField("isFirstTimeChangePos", org.apache.thrift.protocol.TType.BOOL, (short)18);
  private static final org.apache.thrift.protocol.TField IS_ONLINE_FIELD_DESC = new org.apache.thrift.protocol.TField("isOnline", org.apache.thrift.protocol.TType.BOOL, (short)19);
  private static final org.apache.thrift.protocol.TField PUT_ON_BADGES_FIELD_DESC = new org.apache.thrift.protocol.TField("putOnBadges", org.apache.thrift.protocol.TType.LIST, (short)20);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CloseFriendInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CloseFriendInfoTupleSchemeFactory());
  }

  public String relationshipSelf; // required
  public byte useLvlRelationShipSelf; // required
  public String relationshipFriend; // required
  public byte useLvlRelationShipFriend; // required
  public int intimacyVal; // required
  /**
   * 双人动作id
   */
  public int poseId; // required
  public String moodMessageSelf; // required
  public String voiceMessageSelf; // required
  public int modeId; // required
  public byte stature; // required
  public String moodMessageFriend; // required
  public String voiceMessageFriend; // required
  public PlayerBaseInfo playerBaseInfo; // required
  public List<AvatarInfo> avatarListFriend; // required
  /**
   * 纪念日(时间戳/1000)
   */
  public int specialDay; // required
  public boolean isFirstTimeChangeNick; // required
  public boolean isFirstTimeChangePos; // required
  /**
   * 当前是否在线
   */
  public boolean isOnline; // optional
  /**
   * 佩戴的徽章
   */
  public List<BadgeInfo> putOnBadges; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RELATIONSHIP_SELF((short)1, "relationshipSelf"),
    USE_LVL_RELATION_SHIP_SELF((short)2, "useLvlRelationShipSelf"),
    RELATIONSHIP_FRIEND((short)3, "relationshipFriend"),
    USE_LVL_RELATION_SHIP_FRIEND((short)4, "useLvlRelationShipFriend"),
    INTIMACY_VAL((short)5, "intimacyVal"),
    /**
     * 双人动作id
     */
    POSE_ID((short)6, "poseId"),
    MOOD_MESSAGE_SELF((short)7, "moodMessageSelf"),
    VOICE_MESSAGE_SELF((short)8, "voiceMessageSelf"),
    MODE_ID((short)9, "modeId"),
    STATURE((short)10, "stature"),
    MOOD_MESSAGE_FRIEND((short)11, "moodMessageFriend"),
    VOICE_MESSAGE_FRIEND((short)12, "voiceMessageFriend"),
    PLAYER_BASE_INFO((short)14, "playerBaseInfo"),
    AVATAR_LIST_FRIEND((short)15, "avatarListFriend"),
    /**
     * 纪念日(时间戳/1000)
     */
    SPECIAL_DAY((short)16, "specialDay"),
    IS_FIRST_TIME_CHANGE_NICK((short)17, "isFirstTimeChangeNick"),
    IS_FIRST_TIME_CHANGE_POS((short)18, "isFirstTimeChangePos"),
    /**
     * 当前是否在线
     */
    IS_ONLINE((short)19, "isOnline"),
    /**
     * 佩戴的徽章
     */
    PUT_ON_BADGES((short)20, "putOnBadges");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RELATIONSHIP_SELF
          return RELATIONSHIP_SELF;
        case 2: // USE_LVL_RELATION_SHIP_SELF
          return USE_LVL_RELATION_SHIP_SELF;
        case 3: // RELATIONSHIP_FRIEND
          return RELATIONSHIP_FRIEND;
        case 4: // USE_LVL_RELATION_SHIP_FRIEND
          return USE_LVL_RELATION_SHIP_FRIEND;
        case 5: // INTIMACY_VAL
          return INTIMACY_VAL;
        case 6: // POSE_ID
          return POSE_ID;
        case 7: // MOOD_MESSAGE_SELF
          return MOOD_MESSAGE_SELF;
        case 8: // VOICE_MESSAGE_SELF
          return VOICE_MESSAGE_SELF;
        case 9: // MODE_ID
          return MODE_ID;
        case 10: // STATURE
          return STATURE;
        case 11: // MOOD_MESSAGE_FRIEND
          return MOOD_MESSAGE_FRIEND;
        case 12: // VOICE_MESSAGE_FRIEND
          return VOICE_MESSAGE_FRIEND;
        case 14: // PLAYER_BASE_INFO
          return PLAYER_BASE_INFO;
        case 15: // AVATAR_LIST_FRIEND
          return AVATAR_LIST_FRIEND;
        case 16: // SPECIAL_DAY
          return SPECIAL_DAY;
        case 17: // IS_FIRST_TIME_CHANGE_NICK
          return IS_FIRST_TIME_CHANGE_NICK;
        case 18: // IS_FIRST_TIME_CHANGE_POS
          return IS_FIRST_TIME_CHANGE_POS;
        case 19: // IS_ONLINE
          return IS_ONLINE;
        case 20: // PUT_ON_BADGES
          return PUT_ON_BADGES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __USELVLRELATIONSHIPSELF_ISSET_ID = 0;
  private static final int __USELVLRELATIONSHIPFRIEND_ISSET_ID = 1;
  private static final int __INTIMACYVAL_ISSET_ID = 2;
  private static final int __POSEID_ISSET_ID = 3;
  private static final int __MODEID_ISSET_ID = 4;
  private static final int __STATURE_ISSET_ID = 5;
  private static final int __SPECIALDAY_ISSET_ID = 6;
  private static final int __ISFIRSTTIMECHANGENICK_ISSET_ID = 7;
  private static final int __ISFIRSTTIMECHANGEPOS_ISSET_ID = 8;
  private static final int __ISONLINE_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.IS_ONLINE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RELATIONSHIP_SELF, new org.apache.thrift.meta_data.FieldMetaData("relationshipSelf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USE_LVL_RELATION_SHIP_SELF, new org.apache.thrift.meta_data.FieldMetaData("useLvlRelationShipSelf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.RELATIONSHIP_FRIEND, new org.apache.thrift.meta_data.FieldMetaData("relationshipFriend", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USE_LVL_RELATION_SHIP_FRIEND, new org.apache.thrift.meta_data.FieldMetaData("useLvlRelationShipFriend", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.INTIMACY_VAL, new org.apache.thrift.meta_data.FieldMetaData("intimacyVal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POSE_ID, new org.apache.thrift.meta_data.FieldMetaData("poseId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MOOD_MESSAGE_SELF, new org.apache.thrift.meta_data.FieldMetaData("moodMessageSelf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VOICE_MESSAGE_SELF, new org.apache.thrift.meta_data.FieldMetaData("voiceMessageSelf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MODE_ID, new org.apache.thrift.meta_data.FieldMetaData("modeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATURE, new org.apache.thrift.meta_data.FieldMetaData("stature", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.MOOD_MESSAGE_FRIEND, new org.apache.thrift.meta_data.FieldMetaData("moodMessageFriend", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VOICE_MESSAGE_FRIEND, new org.apache.thrift.meta_data.FieldMetaData("voiceMessageFriend", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLAYER_BASE_INFO, new org.apache.thrift.meta_data.FieldMetaData("playerBaseInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PlayerBaseInfo.class)));
    tmpMap.put(_Fields.AVATAR_LIST_FRIEND, new org.apache.thrift.meta_data.FieldMetaData("avatarListFriend", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AvatarInfo.class))));
    tmpMap.put(_Fields.SPECIAL_DAY, new org.apache.thrift.meta_data.FieldMetaData("specialDay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_FIRST_TIME_CHANGE_NICK, new org.apache.thrift.meta_data.FieldMetaData("isFirstTimeChangeNick", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_FIRST_TIME_CHANGE_POS, new org.apache.thrift.meta_data.FieldMetaData("isFirstTimeChangePos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_ONLINE, new org.apache.thrift.meta_data.FieldMetaData("isOnline", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PUT_ON_BADGES, new org.apache.thrift.meta_data.FieldMetaData("putOnBadges", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BadgeInfo.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CloseFriendInfo.class, metaDataMap);
  }

  public CloseFriendInfo() {
  }

  public CloseFriendInfo(
    String relationshipSelf,
    byte useLvlRelationShipSelf,
    String relationshipFriend,
    byte useLvlRelationShipFriend,
    int intimacyVal,
    int poseId,
    String moodMessageSelf,
    String voiceMessageSelf,
    int modeId,
    byte stature,
    String moodMessageFriend,
    String voiceMessageFriend,
    PlayerBaseInfo playerBaseInfo,
    List<AvatarInfo> avatarListFriend,
    int specialDay,
    boolean isFirstTimeChangeNick,
    boolean isFirstTimeChangePos,
    List<BadgeInfo> putOnBadges)
  {
    this();
    this.relationshipSelf = relationshipSelf;
    this.useLvlRelationShipSelf = useLvlRelationShipSelf;
    setUseLvlRelationShipSelfIsSet(true);
    this.relationshipFriend = relationshipFriend;
    this.useLvlRelationShipFriend = useLvlRelationShipFriend;
    setUseLvlRelationShipFriendIsSet(true);
    this.intimacyVal = intimacyVal;
    setIntimacyValIsSet(true);
    this.poseId = poseId;
    setPoseIdIsSet(true);
    this.moodMessageSelf = moodMessageSelf;
    this.voiceMessageSelf = voiceMessageSelf;
    this.modeId = modeId;
    setModeIdIsSet(true);
    this.stature = stature;
    setStatureIsSet(true);
    this.moodMessageFriend = moodMessageFriend;
    this.voiceMessageFriend = voiceMessageFriend;
    this.playerBaseInfo = playerBaseInfo;
    this.avatarListFriend = avatarListFriend;
    this.specialDay = specialDay;
    setSpecialDayIsSet(true);
    this.isFirstTimeChangeNick = isFirstTimeChangeNick;
    setIsFirstTimeChangeNickIsSet(true);
    this.isFirstTimeChangePos = isFirstTimeChangePos;
    setIsFirstTimeChangePosIsSet(true);
    this.putOnBadges = putOnBadges;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CloseFriendInfo(CloseFriendInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetRelationshipSelf()) {
      this.relationshipSelf = other.relationshipSelf;
    }
    this.useLvlRelationShipSelf = other.useLvlRelationShipSelf;
    if (other.isSetRelationshipFriend()) {
      this.relationshipFriend = other.relationshipFriend;
    }
    this.useLvlRelationShipFriend = other.useLvlRelationShipFriend;
    this.intimacyVal = other.intimacyVal;
    this.poseId = other.poseId;
    if (other.isSetMoodMessageSelf()) {
      this.moodMessageSelf = other.moodMessageSelf;
    }
    if (other.isSetVoiceMessageSelf()) {
      this.voiceMessageSelf = other.voiceMessageSelf;
    }
    this.modeId = other.modeId;
    this.stature = other.stature;
    if (other.isSetMoodMessageFriend()) {
      this.moodMessageFriend = other.moodMessageFriend;
    }
    if (other.isSetVoiceMessageFriend()) {
      this.voiceMessageFriend = other.voiceMessageFriend;
    }
    if (other.isSetPlayerBaseInfo()) {
      this.playerBaseInfo = new PlayerBaseInfo(other.playerBaseInfo);
    }
    if (other.isSetAvatarListFriend()) {
      List<AvatarInfo> __this__avatarListFriend = new ArrayList<AvatarInfo>();
      for (AvatarInfo other_element : other.avatarListFriend) {
        __this__avatarListFriend.add(new AvatarInfo(other_element));
      }
      this.avatarListFriend = __this__avatarListFriend;
    }
    this.specialDay = other.specialDay;
    this.isFirstTimeChangeNick = other.isFirstTimeChangeNick;
    this.isFirstTimeChangePos = other.isFirstTimeChangePos;
    this.isOnline = other.isOnline;
    if (other.isSetPutOnBadges()) {
      List<BadgeInfo> __this__putOnBadges = new ArrayList<BadgeInfo>();
      for (BadgeInfo other_element : other.putOnBadges) {
        __this__putOnBadges.add(new BadgeInfo(other_element));
      }
      this.putOnBadges = __this__putOnBadges;
    }
  }

  public CloseFriendInfo deepCopy() {
    return new CloseFriendInfo(this);
  }

  @Override
  public void clear() {
    this.relationshipSelf = null;
    setUseLvlRelationShipSelfIsSet(false);
    this.useLvlRelationShipSelf = 0;
    this.relationshipFriend = null;
    setUseLvlRelationShipFriendIsSet(false);
    this.useLvlRelationShipFriend = 0;
    setIntimacyValIsSet(false);
    this.intimacyVal = 0;
    setPoseIdIsSet(false);
    this.poseId = 0;
    this.moodMessageSelf = null;
    this.voiceMessageSelf = null;
    setModeIdIsSet(false);
    this.modeId = 0;
    setStatureIsSet(false);
    this.stature = 0;
    this.moodMessageFriend = null;
    this.voiceMessageFriend = null;
    this.playerBaseInfo = null;
    this.avatarListFriend = null;
    setSpecialDayIsSet(false);
    this.specialDay = 0;
    setIsFirstTimeChangeNickIsSet(false);
    this.isFirstTimeChangeNick = false;
    setIsFirstTimeChangePosIsSet(false);
    this.isFirstTimeChangePos = false;
    setIsOnlineIsSet(false);
    this.isOnline = false;
    this.putOnBadges = null;
  }

  public String getRelationshipSelf() {
    return this.relationshipSelf;
  }

  public CloseFriendInfo setRelationshipSelf(String relationshipSelf) {
    this.relationshipSelf = relationshipSelf;
    return this;
  }

  public void unsetRelationshipSelf() {
    this.relationshipSelf = null;
  }

  /** Returns true if field relationshipSelf is set (has been assigned a value) and false otherwise */
  public boolean isSetRelationshipSelf() {
    return this.relationshipSelf != null;
  }

  public void setRelationshipSelfIsSet(boolean value) {
    if (!value) {
      this.relationshipSelf = null;
    }
  }

  public byte getUseLvlRelationShipSelf() {
    return this.useLvlRelationShipSelf;
  }

  public CloseFriendInfo setUseLvlRelationShipSelf(byte useLvlRelationShipSelf) {
    this.useLvlRelationShipSelf = useLvlRelationShipSelf;
    setUseLvlRelationShipSelfIsSet(true);
    return this;
  }

  public void unsetUseLvlRelationShipSelf() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USELVLRELATIONSHIPSELF_ISSET_ID);
  }

  /** Returns true if field useLvlRelationShipSelf is set (has been assigned a value) and false otherwise */
  public boolean isSetUseLvlRelationShipSelf() {
    return EncodingUtils.testBit(__isset_bitfield, __USELVLRELATIONSHIPSELF_ISSET_ID);
  }

  public void setUseLvlRelationShipSelfIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USELVLRELATIONSHIPSELF_ISSET_ID, value);
  }

  public String getRelationshipFriend() {
    return this.relationshipFriend;
  }

  public CloseFriendInfo setRelationshipFriend(String relationshipFriend) {
    this.relationshipFriend = relationshipFriend;
    return this;
  }

  public void unsetRelationshipFriend() {
    this.relationshipFriend = null;
  }

  /** Returns true if field relationshipFriend is set (has been assigned a value) and false otherwise */
  public boolean isSetRelationshipFriend() {
    return this.relationshipFriend != null;
  }

  public void setRelationshipFriendIsSet(boolean value) {
    if (!value) {
      this.relationshipFriend = null;
    }
  }

  public byte getUseLvlRelationShipFriend() {
    return this.useLvlRelationShipFriend;
  }

  public CloseFriendInfo setUseLvlRelationShipFriend(byte useLvlRelationShipFriend) {
    this.useLvlRelationShipFriend = useLvlRelationShipFriend;
    setUseLvlRelationShipFriendIsSet(true);
    return this;
  }

  public void unsetUseLvlRelationShipFriend() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USELVLRELATIONSHIPFRIEND_ISSET_ID);
  }

  /** Returns true if field useLvlRelationShipFriend is set (has been assigned a value) and false otherwise */
  public boolean isSetUseLvlRelationShipFriend() {
    return EncodingUtils.testBit(__isset_bitfield, __USELVLRELATIONSHIPFRIEND_ISSET_ID);
  }

  public void setUseLvlRelationShipFriendIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USELVLRELATIONSHIPFRIEND_ISSET_ID, value);
  }

  public int getIntimacyVal() {
    return this.intimacyVal;
  }

  public CloseFriendInfo setIntimacyVal(int intimacyVal) {
    this.intimacyVal = intimacyVal;
    setIntimacyValIsSet(true);
    return this;
  }

  public void unsetIntimacyVal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTIMACYVAL_ISSET_ID);
  }

  /** Returns true if field intimacyVal is set (has been assigned a value) and false otherwise */
  public boolean isSetIntimacyVal() {
    return EncodingUtils.testBit(__isset_bitfield, __INTIMACYVAL_ISSET_ID);
  }

  public void setIntimacyValIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTIMACYVAL_ISSET_ID, value);
  }

  /**
   * 双人动作id
   */
  public int getPoseId() {
    return this.poseId;
  }

  /**
   * 双人动作id
   */
  public CloseFriendInfo setPoseId(int poseId) {
    this.poseId = poseId;
    setPoseIdIsSet(true);
    return this;
  }

  public void unsetPoseId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSEID_ISSET_ID);
  }

  /** Returns true if field poseId is set (has been assigned a value) and false otherwise */
  public boolean isSetPoseId() {
    return EncodingUtils.testBit(__isset_bitfield, __POSEID_ISSET_ID);
  }

  public void setPoseIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSEID_ISSET_ID, value);
  }

  public String getMoodMessageSelf() {
    return this.moodMessageSelf;
  }

  public CloseFriendInfo setMoodMessageSelf(String moodMessageSelf) {
    this.moodMessageSelf = moodMessageSelf;
    return this;
  }

  public void unsetMoodMessageSelf() {
    this.moodMessageSelf = null;
  }

  /** Returns true if field moodMessageSelf is set (has been assigned a value) and false otherwise */
  public boolean isSetMoodMessageSelf() {
    return this.moodMessageSelf != null;
  }

  public void setMoodMessageSelfIsSet(boolean value) {
    if (!value) {
      this.moodMessageSelf = null;
    }
  }

  public String getVoiceMessageSelf() {
    return this.voiceMessageSelf;
  }

  public CloseFriendInfo setVoiceMessageSelf(String voiceMessageSelf) {
    this.voiceMessageSelf = voiceMessageSelf;
    return this;
  }

  public void unsetVoiceMessageSelf() {
    this.voiceMessageSelf = null;
  }

  /** Returns true if field voiceMessageSelf is set (has been assigned a value) and false otherwise */
  public boolean isSetVoiceMessageSelf() {
    return this.voiceMessageSelf != null;
  }

  public void setVoiceMessageSelfIsSet(boolean value) {
    if (!value) {
      this.voiceMessageSelf = null;
    }
  }

  public int getModeId() {
    return this.modeId;
  }

  public CloseFriendInfo setModeId(int modeId) {
    this.modeId = modeId;
    setModeIdIsSet(true);
    return this;
  }

  public void unsetModeId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MODEID_ISSET_ID);
  }

  /** Returns true if field modeId is set (has been assigned a value) and false otherwise */
  public boolean isSetModeId() {
    return EncodingUtils.testBit(__isset_bitfield, __MODEID_ISSET_ID);
  }

  public void setModeIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MODEID_ISSET_ID, value);
  }

  public byte getStature() {
    return this.stature;
  }

  public CloseFriendInfo setStature(byte stature) {
    this.stature = stature;
    setStatureIsSet(true);
    return this;
  }

  public void unsetStature() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATURE_ISSET_ID);
  }

  /** Returns true if field stature is set (has been assigned a value) and false otherwise */
  public boolean isSetStature() {
    return EncodingUtils.testBit(__isset_bitfield, __STATURE_ISSET_ID);
  }

  public void setStatureIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATURE_ISSET_ID, value);
  }

  public String getMoodMessageFriend() {
    return this.moodMessageFriend;
  }

  public CloseFriendInfo setMoodMessageFriend(String moodMessageFriend) {
    this.moodMessageFriend = moodMessageFriend;
    return this;
  }

  public void unsetMoodMessageFriend() {
    this.moodMessageFriend = null;
  }

  /** Returns true if field moodMessageFriend is set (has been assigned a value) and false otherwise */
  public boolean isSetMoodMessageFriend() {
    return this.moodMessageFriend != null;
  }

  public void setMoodMessageFriendIsSet(boolean value) {
    if (!value) {
      this.moodMessageFriend = null;
    }
  }

  public String getVoiceMessageFriend() {
    return this.voiceMessageFriend;
  }

  public CloseFriendInfo setVoiceMessageFriend(String voiceMessageFriend) {
    this.voiceMessageFriend = voiceMessageFriend;
    return this;
  }

  public void unsetVoiceMessageFriend() {
    this.voiceMessageFriend = null;
  }

  /** Returns true if field voiceMessageFriend is set (has been assigned a value) and false otherwise */
  public boolean isSetVoiceMessageFriend() {
    return this.voiceMessageFriend != null;
  }

  public void setVoiceMessageFriendIsSet(boolean value) {
    if (!value) {
      this.voiceMessageFriend = null;
    }
  }

  public PlayerBaseInfo getPlayerBaseInfo() {
    return this.playerBaseInfo;
  }

  public CloseFriendInfo setPlayerBaseInfo(PlayerBaseInfo playerBaseInfo) {
    this.playerBaseInfo = playerBaseInfo;
    return this;
  }

  public void unsetPlayerBaseInfo() {
    this.playerBaseInfo = null;
  }

  /** Returns true if field playerBaseInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetPlayerBaseInfo() {
    return this.playerBaseInfo != null;
  }

  public void setPlayerBaseInfoIsSet(boolean value) {
    if (!value) {
      this.playerBaseInfo = null;
    }
  }

  public int getAvatarListFriendSize() {
    return (this.avatarListFriend == null) ? 0 : this.avatarListFriend.size();
  }

  public java.util.Iterator<AvatarInfo> getAvatarListFriendIterator() {
    return (this.avatarListFriend == null) ? null : this.avatarListFriend.iterator();
  }

  public void addToAvatarListFriend(AvatarInfo elem) {
    if (this.avatarListFriend == null) {
      this.avatarListFriend = new ArrayList<AvatarInfo>();
    }
    this.avatarListFriend.add(elem);
  }

  public List<AvatarInfo> getAvatarListFriend() {
    return this.avatarListFriend;
  }

  public CloseFriendInfo setAvatarListFriend(List<AvatarInfo> avatarListFriend) {
    this.avatarListFriend = avatarListFriend;
    return this;
  }

  public void unsetAvatarListFriend() {
    this.avatarListFriend = null;
  }

  /** Returns true if field avatarListFriend is set (has been assigned a value) and false otherwise */
  public boolean isSetAvatarListFriend() {
    return this.avatarListFriend != null;
  }

  public void setAvatarListFriendIsSet(boolean value) {
    if (!value) {
      this.avatarListFriend = null;
    }
  }

  /**
   * 纪念日(时间戳/1000)
   */
  public int getSpecialDay() {
    return this.specialDay;
  }

  /**
   * 纪念日(时间戳/1000)
   */
  public CloseFriendInfo setSpecialDay(int specialDay) {
    this.specialDay = specialDay;
    setSpecialDayIsSet(true);
    return this;
  }

  public void unsetSpecialDay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPECIALDAY_ISSET_ID);
  }

  /** Returns true if field specialDay is set (has been assigned a value) and false otherwise */
  public boolean isSetSpecialDay() {
    return EncodingUtils.testBit(__isset_bitfield, __SPECIALDAY_ISSET_ID);
  }

  public void setSpecialDayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPECIALDAY_ISSET_ID, value);
  }

  public boolean isIsFirstTimeChangeNick() {
    return this.isFirstTimeChangeNick;
  }

  public CloseFriendInfo setIsFirstTimeChangeNick(boolean isFirstTimeChangeNick) {
    this.isFirstTimeChangeNick = isFirstTimeChangeNick;
    setIsFirstTimeChangeNickIsSet(true);
    return this;
  }

  public void unsetIsFirstTimeChangeNick() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISFIRSTTIMECHANGENICK_ISSET_ID);
  }

  /** Returns true if field isFirstTimeChangeNick is set (has been assigned a value) and false otherwise */
  public boolean isSetIsFirstTimeChangeNick() {
    return EncodingUtils.testBit(__isset_bitfield, __ISFIRSTTIMECHANGENICK_ISSET_ID);
  }

  public void setIsFirstTimeChangeNickIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISFIRSTTIMECHANGENICK_ISSET_ID, value);
  }

  public boolean isIsFirstTimeChangePos() {
    return this.isFirstTimeChangePos;
  }

  public CloseFriendInfo setIsFirstTimeChangePos(boolean isFirstTimeChangePos) {
    this.isFirstTimeChangePos = isFirstTimeChangePos;
    setIsFirstTimeChangePosIsSet(true);
    return this;
  }

  public void unsetIsFirstTimeChangePos() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISFIRSTTIMECHANGEPOS_ISSET_ID);
  }

  /** Returns true if field isFirstTimeChangePos is set (has been assigned a value) and false otherwise */
  public boolean isSetIsFirstTimeChangePos() {
    return EncodingUtils.testBit(__isset_bitfield, __ISFIRSTTIMECHANGEPOS_ISSET_ID);
  }

  public void setIsFirstTimeChangePosIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISFIRSTTIMECHANGEPOS_ISSET_ID, value);
  }

  /**
   * 当前是否在线
   */
  public boolean isIsOnline() {
    return this.isOnline;
  }

  /**
   * 当前是否在线
   */
  public CloseFriendInfo setIsOnline(boolean isOnline) {
    this.isOnline = isOnline;
    setIsOnlineIsSet(true);
    return this;
  }

  public void unsetIsOnline() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISONLINE_ISSET_ID);
  }

  /** Returns true if field isOnline is set (has been assigned a value) and false otherwise */
  public boolean isSetIsOnline() {
    return EncodingUtils.testBit(__isset_bitfield, __ISONLINE_ISSET_ID);
  }

  public void setIsOnlineIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISONLINE_ISSET_ID, value);
  }

  public int getPutOnBadgesSize() {
    return (this.putOnBadges == null) ? 0 : this.putOnBadges.size();
  }

  public java.util.Iterator<BadgeInfo> getPutOnBadgesIterator() {
    return (this.putOnBadges == null) ? null : this.putOnBadges.iterator();
  }

  public void addToPutOnBadges(BadgeInfo elem) {
    if (this.putOnBadges == null) {
      this.putOnBadges = new ArrayList<BadgeInfo>();
    }
    this.putOnBadges.add(elem);
  }

  /**
   * 佩戴的徽章
   */
  public List<BadgeInfo> getPutOnBadges() {
    return this.putOnBadges;
  }

  /**
   * 佩戴的徽章
   */
  public CloseFriendInfo setPutOnBadges(List<BadgeInfo> putOnBadges) {
    this.putOnBadges = putOnBadges;
    return this;
  }

  public void unsetPutOnBadges() {
    this.putOnBadges = null;
  }

  /** Returns true if field putOnBadges is set (has been assigned a value) and false otherwise */
  public boolean isSetPutOnBadges() {
    return this.putOnBadges != null;
  }

  public void setPutOnBadgesIsSet(boolean value) {
    if (!value) {
      this.putOnBadges = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RELATIONSHIP_SELF:
      if (value == null) {
        unsetRelationshipSelf();
      } else {
        setRelationshipSelf((String)value);
      }
      break;

    case USE_LVL_RELATION_SHIP_SELF:
      if (value == null) {
        unsetUseLvlRelationShipSelf();
      } else {
        setUseLvlRelationShipSelf((Byte)value);
      }
      break;

    case RELATIONSHIP_FRIEND:
      if (value == null) {
        unsetRelationshipFriend();
      } else {
        setRelationshipFriend((String)value);
      }
      break;

    case USE_LVL_RELATION_SHIP_FRIEND:
      if (value == null) {
        unsetUseLvlRelationShipFriend();
      } else {
        setUseLvlRelationShipFriend((Byte)value);
      }
      break;

    case INTIMACY_VAL:
      if (value == null) {
        unsetIntimacyVal();
      } else {
        setIntimacyVal((Integer)value);
      }
      break;

    case POSE_ID:
      if (value == null) {
        unsetPoseId();
      } else {
        setPoseId((Integer)value);
      }
      break;

    case MOOD_MESSAGE_SELF:
      if (value == null) {
        unsetMoodMessageSelf();
      } else {
        setMoodMessageSelf((String)value);
      }
      break;

    case VOICE_MESSAGE_SELF:
      if (value == null) {
        unsetVoiceMessageSelf();
      } else {
        setVoiceMessageSelf((String)value);
      }
      break;

    case MODE_ID:
      if (value == null) {
        unsetModeId();
      } else {
        setModeId((Integer)value);
      }
      break;

    case STATURE:
      if (value == null) {
        unsetStature();
      } else {
        setStature((Byte)value);
      }
      break;

    case MOOD_MESSAGE_FRIEND:
      if (value == null) {
        unsetMoodMessageFriend();
      } else {
        setMoodMessageFriend((String)value);
      }
      break;

    case VOICE_MESSAGE_FRIEND:
      if (value == null) {
        unsetVoiceMessageFriend();
      } else {
        setVoiceMessageFriend((String)value);
      }
      break;

    case PLAYER_BASE_INFO:
      if (value == null) {
        unsetPlayerBaseInfo();
      } else {
        setPlayerBaseInfo((PlayerBaseInfo)value);
      }
      break;

    case AVATAR_LIST_FRIEND:
      if (value == null) {
        unsetAvatarListFriend();
      } else {
        setAvatarListFriend((List<AvatarInfo>)value);
      }
      break;

    case SPECIAL_DAY:
      if (value == null) {
        unsetSpecialDay();
      } else {
        setSpecialDay((Integer)value);
      }
      break;

    case IS_FIRST_TIME_CHANGE_NICK:
      if (value == null) {
        unsetIsFirstTimeChangeNick();
      } else {
        setIsFirstTimeChangeNick((Boolean)value);
      }
      break;

    case IS_FIRST_TIME_CHANGE_POS:
      if (value == null) {
        unsetIsFirstTimeChangePos();
      } else {
        setIsFirstTimeChangePos((Boolean)value);
      }
      break;

    case IS_ONLINE:
      if (value == null) {
        unsetIsOnline();
      } else {
        setIsOnline((Boolean)value);
      }
      break;

    case PUT_ON_BADGES:
      if (value == null) {
        unsetPutOnBadges();
      } else {
        setPutOnBadges((List<BadgeInfo>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RELATIONSHIP_SELF:
      return getRelationshipSelf();

    case USE_LVL_RELATION_SHIP_SELF:
      return Byte.valueOf(getUseLvlRelationShipSelf());

    case RELATIONSHIP_FRIEND:
      return getRelationshipFriend();

    case USE_LVL_RELATION_SHIP_FRIEND:
      return Byte.valueOf(getUseLvlRelationShipFriend());

    case INTIMACY_VAL:
      return Integer.valueOf(getIntimacyVal());

    case POSE_ID:
      return Integer.valueOf(getPoseId());

    case MOOD_MESSAGE_SELF:
      return getMoodMessageSelf();

    case VOICE_MESSAGE_SELF:
      return getVoiceMessageSelf();

    case MODE_ID:
      return Integer.valueOf(getModeId());

    case STATURE:
      return Byte.valueOf(getStature());

    case MOOD_MESSAGE_FRIEND:
      return getMoodMessageFriend();

    case VOICE_MESSAGE_FRIEND:
      return getVoiceMessageFriend();

    case PLAYER_BASE_INFO:
      return getPlayerBaseInfo();

    case AVATAR_LIST_FRIEND:
      return getAvatarListFriend();

    case SPECIAL_DAY:
      return Integer.valueOf(getSpecialDay());

    case IS_FIRST_TIME_CHANGE_NICK:
      return Boolean.valueOf(isIsFirstTimeChangeNick());

    case IS_FIRST_TIME_CHANGE_POS:
      return Boolean.valueOf(isIsFirstTimeChangePos());

    case IS_ONLINE:
      return Boolean.valueOf(isIsOnline());

    case PUT_ON_BADGES:
      return getPutOnBadges();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RELATIONSHIP_SELF:
      return isSetRelationshipSelf();
    case USE_LVL_RELATION_SHIP_SELF:
      return isSetUseLvlRelationShipSelf();
    case RELATIONSHIP_FRIEND:
      return isSetRelationshipFriend();
    case USE_LVL_RELATION_SHIP_FRIEND:
      return isSetUseLvlRelationShipFriend();
    case INTIMACY_VAL:
      return isSetIntimacyVal();
    case POSE_ID:
      return isSetPoseId();
    case MOOD_MESSAGE_SELF:
      return isSetMoodMessageSelf();
    case VOICE_MESSAGE_SELF:
      return isSetVoiceMessageSelf();
    case MODE_ID:
      return isSetModeId();
    case STATURE:
      return isSetStature();
    case MOOD_MESSAGE_FRIEND:
      return isSetMoodMessageFriend();
    case VOICE_MESSAGE_FRIEND:
      return isSetVoiceMessageFriend();
    case PLAYER_BASE_INFO:
      return isSetPlayerBaseInfo();
    case AVATAR_LIST_FRIEND:
      return isSetAvatarListFriend();
    case SPECIAL_DAY:
      return isSetSpecialDay();
    case IS_FIRST_TIME_CHANGE_NICK:
      return isSetIsFirstTimeChangeNick();
    case IS_FIRST_TIME_CHANGE_POS:
      return isSetIsFirstTimeChangePos();
    case IS_ONLINE:
      return isSetIsOnline();
    case PUT_ON_BADGES:
      return isSetPutOnBadges();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CloseFriendInfo)
      return this.equals((CloseFriendInfo)that);
    return false;
  }

  public boolean equals(CloseFriendInfo that) {
    if (that == null)
      return false;

    boolean this_present_relationshipSelf = true && this.isSetRelationshipSelf();
    boolean that_present_relationshipSelf = true && that.isSetRelationshipSelf();
    if (this_present_relationshipSelf || that_present_relationshipSelf) {
      if (!(this_present_relationshipSelf && that_present_relationshipSelf))
        return false;
      if (!this.relationshipSelf.equals(that.relationshipSelf))
        return false;
    }

    boolean this_present_useLvlRelationShipSelf = true;
    boolean that_present_useLvlRelationShipSelf = true;
    if (this_present_useLvlRelationShipSelf || that_present_useLvlRelationShipSelf) {
      if (!(this_present_useLvlRelationShipSelf && that_present_useLvlRelationShipSelf))
        return false;
      if (this.useLvlRelationShipSelf != that.useLvlRelationShipSelf)
        return false;
    }

    boolean this_present_relationshipFriend = true && this.isSetRelationshipFriend();
    boolean that_present_relationshipFriend = true && that.isSetRelationshipFriend();
    if (this_present_relationshipFriend || that_present_relationshipFriend) {
      if (!(this_present_relationshipFriend && that_present_relationshipFriend))
        return false;
      if (!this.relationshipFriend.equals(that.relationshipFriend))
        return false;
    }

    boolean this_present_useLvlRelationShipFriend = true;
    boolean that_present_useLvlRelationShipFriend = true;
    if (this_present_useLvlRelationShipFriend || that_present_useLvlRelationShipFriend) {
      if (!(this_present_useLvlRelationShipFriend && that_present_useLvlRelationShipFriend))
        return false;
      if (this.useLvlRelationShipFriend != that.useLvlRelationShipFriend)
        return false;
    }

    boolean this_present_intimacyVal = true;
    boolean that_present_intimacyVal = true;
    if (this_present_intimacyVal || that_present_intimacyVal) {
      if (!(this_present_intimacyVal && that_present_intimacyVal))
        return false;
      if (this.intimacyVal != that.intimacyVal)
        return false;
    }

    boolean this_present_poseId = true;
    boolean that_present_poseId = true;
    if (this_present_poseId || that_present_poseId) {
      if (!(this_present_poseId && that_present_poseId))
        return false;
      if (this.poseId != that.poseId)
        return false;
    }

    boolean this_present_moodMessageSelf = true && this.isSetMoodMessageSelf();
    boolean that_present_moodMessageSelf = true && that.isSetMoodMessageSelf();
    if (this_present_moodMessageSelf || that_present_moodMessageSelf) {
      if (!(this_present_moodMessageSelf && that_present_moodMessageSelf))
        return false;
      if (!this.moodMessageSelf.equals(that.moodMessageSelf))
        return false;
    }

    boolean this_present_voiceMessageSelf = true && this.isSetVoiceMessageSelf();
    boolean that_present_voiceMessageSelf = true && that.isSetVoiceMessageSelf();
    if (this_present_voiceMessageSelf || that_present_voiceMessageSelf) {
      if (!(this_present_voiceMessageSelf && that_present_voiceMessageSelf))
        return false;
      if (!this.voiceMessageSelf.equals(that.voiceMessageSelf))
        return false;
    }

    boolean this_present_modeId = true;
    boolean that_present_modeId = true;
    if (this_present_modeId || that_present_modeId) {
      if (!(this_present_modeId && that_present_modeId))
        return false;
      if (this.modeId != that.modeId)
        return false;
    }

    boolean this_present_stature = true;
    boolean that_present_stature = true;
    if (this_present_stature || that_present_stature) {
      if (!(this_present_stature && that_present_stature))
        return false;
      if (this.stature != that.stature)
        return false;
    }

    boolean this_present_moodMessageFriend = true && this.isSetMoodMessageFriend();
    boolean that_present_moodMessageFriend = true && that.isSetMoodMessageFriend();
    if (this_present_moodMessageFriend || that_present_moodMessageFriend) {
      if (!(this_present_moodMessageFriend && that_present_moodMessageFriend))
        return false;
      if (!this.moodMessageFriend.equals(that.moodMessageFriend))
        return false;
    }

    boolean this_present_voiceMessageFriend = true && this.isSetVoiceMessageFriend();
    boolean that_present_voiceMessageFriend = true && that.isSetVoiceMessageFriend();
    if (this_present_voiceMessageFriend || that_present_voiceMessageFriend) {
      if (!(this_present_voiceMessageFriend && that_present_voiceMessageFriend))
        return false;
      if (!this.voiceMessageFriend.equals(that.voiceMessageFriend))
        return false;
    }

    boolean this_present_playerBaseInfo = true && this.isSetPlayerBaseInfo();
    boolean that_present_playerBaseInfo = true && that.isSetPlayerBaseInfo();
    if (this_present_playerBaseInfo || that_present_playerBaseInfo) {
      if (!(this_present_playerBaseInfo && that_present_playerBaseInfo))
        return false;
      if (!this.playerBaseInfo.equals(that.playerBaseInfo))
        return false;
    }

    boolean this_present_avatarListFriend = true && this.isSetAvatarListFriend();
    boolean that_present_avatarListFriend = true && that.isSetAvatarListFriend();
    if (this_present_avatarListFriend || that_present_avatarListFriend) {
      if (!(this_present_avatarListFriend && that_present_avatarListFriend))
        return false;
      if (!this.avatarListFriend.equals(that.avatarListFriend))
        return false;
    }

    boolean this_present_specialDay = true;
    boolean that_present_specialDay = true;
    if (this_present_specialDay || that_present_specialDay) {
      if (!(this_present_specialDay && that_present_specialDay))
        return false;
      if (this.specialDay != that.specialDay)
        return false;
    }

    boolean this_present_isFirstTimeChangeNick = true;
    boolean that_present_isFirstTimeChangeNick = true;
    if (this_present_isFirstTimeChangeNick || that_present_isFirstTimeChangeNick) {
      if (!(this_present_isFirstTimeChangeNick && that_present_isFirstTimeChangeNick))
        return false;
      if (this.isFirstTimeChangeNick != that.isFirstTimeChangeNick)
        return false;
    }

    boolean this_present_isFirstTimeChangePos = true;
    boolean that_present_isFirstTimeChangePos = true;
    if (this_present_isFirstTimeChangePos || that_present_isFirstTimeChangePos) {
      if (!(this_present_isFirstTimeChangePos && that_present_isFirstTimeChangePos))
        return false;
      if (this.isFirstTimeChangePos != that.isFirstTimeChangePos)
        return false;
    }

    boolean this_present_isOnline = true && this.isSetIsOnline();
    boolean that_present_isOnline = true && that.isSetIsOnline();
    if (this_present_isOnline || that_present_isOnline) {
      if (!(this_present_isOnline && that_present_isOnline))
        return false;
      if (this.isOnline != that.isOnline)
        return false;
    }

    boolean this_present_putOnBadges = true && this.isSetPutOnBadges();
    boolean that_present_putOnBadges = true && that.isSetPutOnBadges();
    if (this_present_putOnBadges || that_present_putOnBadges) {
      if (!(this_present_putOnBadges && that_present_putOnBadges))
        return false;
      if (!this.putOnBadges.equals(that.putOnBadges))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(CloseFriendInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CloseFriendInfo typedOther = (CloseFriendInfo)other;

    lastComparison = Boolean.valueOf(isSetRelationshipSelf()).compareTo(typedOther.isSetRelationshipSelf());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelationshipSelf()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relationshipSelf, typedOther.relationshipSelf);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUseLvlRelationShipSelf()).compareTo(typedOther.isSetUseLvlRelationShipSelf());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUseLvlRelationShipSelf()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.useLvlRelationShipSelf, typedOther.useLvlRelationShipSelf);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRelationshipFriend()).compareTo(typedOther.isSetRelationshipFriend());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelationshipFriend()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relationshipFriend, typedOther.relationshipFriend);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUseLvlRelationShipFriend()).compareTo(typedOther.isSetUseLvlRelationShipFriend());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUseLvlRelationShipFriend()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.useLvlRelationShipFriend, typedOther.useLvlRelationShipFriend);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIntimacyVal()).compareTo(typedOther.isSetIntimacyVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntimacyVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intimacyVal, typedOther.intimacyVal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoseId()).compareTo(typedOther.isSetPoseId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoseId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.poseId, typedOther.poseId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMoodMessageSelf()).compareTo(typedOther.isSetMoodMessageSelf());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMoodMessageSelf()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.moodMessageSelf, typedOther.moodMessageSelf);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVoiceMessageSelf()).compareTo(typedOther.isSetVoiceMessageSelf());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVoiceMessageSelf()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.voiceMessageSelf, typedOther.voiceMessageSelf);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetModeId()).compareTo(typedOther.isSetModeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modeId, typedOther.modeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStature()).compareTo(typedOther.isSetStature());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStature()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stature, typedOther.stature);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMoodMessageFriend()).compareTo(typedOther.isSetMoodMessageFriend());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMoodMessageFriend()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.moodMessageFriend, typedOther.moodMessageFriend);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVoiceMessageFriend()).compareTo(typedOther.isSetVoiceMessageFriend());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVoiceMessageFriend()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.voiceMessageFriend, typedOther.voiceMessageFriend);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlayerBaseInfo()).compareTo(typedOther.isSetPlayerBaseInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlayerBaseInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.playerBaseInfo, typedOther.playerBaseInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAvatarListFriend()).compareTo(typedOther.isSetAvatarListFriend());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvatarListFriend()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.avatarListFriend, typedOther.avatarListFriend);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpecialDay()).compareTo(typedOther.isSetSpecialDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpecialDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.specialDay, typedOther.specialDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsFirstTimeChangeNick()).compareTo(typedOther.isSetIsFirstTimeChangeNick());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsFirstTimeChangeNick()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isFirstTimeChangeNick, typedOther.isFirstTimeChangeNick);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsFirstTimeChangePos()).compareTo(typedOther.isSetIsFirstTimeChangePos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsFirstTimeChangePos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isFirstTimeChangePos, typedOther.isFirstTimeChangePos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsOnline()).compareTo(typedOther.isSetIsOnline());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsOnline()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isOnline, typedOther.isOnline);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPutOnBadges()).compareTo(typedOther.isSetPutOnBadges());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPutOnBadges()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.putOnBadges, typedOther.putOnBadges);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CloseFriendInfo(");
    boolean first = true;

    sb.append("relationshipSelf:");
    if (this.relationshipSelf == null) {
      sb.append("null");
    } else {
      sb.append(this.relationshipSelf);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("useLvlRelationShipSelf:");
    sb.append(this.useLvlRelationShipSelf);
    first = false;
    if (!first) sb.append(", ");
    sb.append("relationshipFriend:");
    if (this.relationshipFriend == null) {
      sb.append("null");
    } else {
      sb.append(this.relationshipFriend);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("useLvlRelationShipFriend:");
    sb.append(this.useLvlRelationShipFriend);
    first = false;
    if (!first) sb.append(", ");
    sb.append("intimacyVal:");
    sb.append(this.intimacyVal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("poseId:");
    sb.append(this.poseId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("moodMessageSelf:");
    if (this.moodMessageSelf == null) {
      sb.append("null");
    } else {
      sb.append(this.moodMessageSelf);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("voiceMessageSelf:");
    if (this.voiceMessageSelf == null) {
      sb.append("null");
    } else {
      sb.append(this.voiceMessageSelf);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("modeId:");
    sb.append(this.modeId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("stature:");
    sb.append(this.stature);
    first = false;
    if (!first) sb.append(", ");
    sb.append("moodMessageFriend:");
    if (this.moodMessageFriend == null) {
      sb.append("null");
    } else {
      sb.append(this.moodMessageFriend);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("voiceMessageFriend:");
    if (this.voiceMessageFriend == null) {
      sb.append("null");
    } else {
      sb.append(this.voiceMessageFriend);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("playerBaseInfo:");
    if (this.playerBaseInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.playerBaseInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("avatarListFriend:");
    if (this.avatarListFriend == null) {
      sb.append("null");
    } else {
      sb.append(this.avatarListFriend);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("specialDay:");
    sb.append(this.specialDay);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isFirstTimeChangeNick:");
    sb.append(this.isFirstTimeChangeNick);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isFirstTimeChangePos:");
    sb.append(this.isFirstTimeChangePos);
    first = false;
    if (isSetIsOnline()) {
      if (!first) sb.append(", ");
      sb.append("isOnline:");
      sb.append(this.isOnline);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("putOnBadges:");
    if (this.putOnBadges == null) {
      sb.append("null");
    } else {
      sb.append(this.putOnBadges);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (playerBaseInfo != null) {
      playerBaseInfo.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CloseFriendInfoStandardSchemeFactory implements SchemeFactory {
    public CloseFriendInfoStandardScheme getScheme() {
      return new CloseFriendInfoStandardScheme();
    }
  }

  private static class CloseFriendInfoStandardScheme extends StandardScheme<CloseFriendInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CloseFriendInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RELATIONSHIP_SELF
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.relationshipSelf = iprot.readString();
              struct.setRelationshipSelfIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USE_LVL_RELATION_SHIP_SELF
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.useLvlRelationShipSelf = iprot.readByte();
              struct.setUseLvlRelationShipSelfIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RELATIONSHIP_FRIEND
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.relationshipFriend = iprot.readString();
              struct.setRelationshipFriendIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // USE_LVL_RELATION_SHIP_FRIEND
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.useLvlRelationShipFriend = iprot.readByte();
              struct.setUseLvlRelationShipFriendIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // INTIMACY_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.intimacyVal = iprot.readI32();
              struct.setIntimacyValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // POSE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.poseId = iprot.readI32();
              struct.setPoseIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MOOD_MESSAGE_SELF
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.moodMessageSelf = iprot.readString();
              struct.setMoodMessageSelfIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // VOICE_MESSAGE_SELF
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.voiceMessageSelf = iprot.readString();
              struct.setVoiceMessageSelfIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MODE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.modeId = iprot.readI32();
              struct.setModeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // STATURE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.stature = iprot.readByte();
              struct.setStatureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MOOD_MESSAGE_FRIEND
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.moodMessageFriend = iprot.readString();
              struct.setMoodMessageFriendIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // VOICE_MESSAGE_FRIEND
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.voiceMessageFriend = iprot.readString();
              struct.setVoiceMessageFriendIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PLAYER_BASE_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.playerBaseInfo = new PlayerBaseInfo();
              struct.playerBaseInfo.read(iprot);
              struct.setPlayerBaseInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // AVATAR_LIST_FRIEND
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list562 = iprot.readListBegin();
                struct.avatarListFriend = new ArrayList<AvatarInfo>(_list562.size);
                for (int _i563 = 0; _i563 < _list562.size; ++_i563)
                {
                  AvatarInfo _elem564; // required
                  _elem564 = new AvatarInfo();
                  _elem564.read(iprot);
                  struct.avatarListFriend.add(_elem564);
                }
                iprot.readListEnd();
              }
              struct.setAvatarListFriendIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // SPECIAL_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.specialDay = iprot.readI32();
              struct.setSpecialDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // IS_FIRST_TIME_CHANGE_NICK
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isFirstTimeChangeNick = iprot.readBool();
              struct.setIsFirstTimeChangeNickIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // IS_FIRST_TIME_CHANGE_POS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isFirstTimeChangePos = iprot.readBool();
              struct.setIsFirstTimeChangePosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // IS_ONLINE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isOnline = iprot.readBool();
              struct.setIsOnlineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // PUT_ON_BADGES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list565 = iprot.readListBegin();
                struct.putOnBadges = new ArrayList<BadgeInfo>(_list565.size);
                for (int _i566 = 0; _i566 < _list565.size; ++_i566)
                {
                  BadgeInfo _elem567; // required
                  _elem567 = new BadgeInfo();
                  _elem567.read(iprot);
                  struct.putOnBadges.add(_elem567);
                }
                iprot.readListEnd();
              }
              struct.setPutOnBadgesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CloseFriendInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.relationshipSelf != null) {
        oprot.writeFieldBegin(RELATIONSHIP_SELF_FIELD_DESC);
        oprot.writeString(struct.relationshipSelf);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(USE_LVL_RELATION_SHIP_SELF_FIELD_DESC);
      oprot.writeByte(struct.useLvlRelationShipSelf);
      oprot.writeFieldEnd();
      if (struct.relationshipFriend != null) {
        oprot.writeFieldBegin(RELATIONSHIP_FRIEND_FIELD_DESC);
        oprot.writeString(struct.relationshipFriend);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(USE_LVL_RELATION_SHIP_FRIEND_FIELD_DESC);
      oprot.writeByte(struct.useLvlRelationShipFriend);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INTIMACY_VAL_FIELD_DESC);
      oprot.writeI32(struct.intimacyVal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POSE_ID_FIELD_DESC);
      oprot.writeI32(struct.poseId);
      oprot.writeFieldEnd();
      if (struct.moodMessageSelf != null) {
        oprot.writeFieldBegin(MOOD_MESSAGE_SELF_FIELD_DESC);
        oprot.writeString(struct.moodMessageSelf);
        oprot.writeFieldEnd();
      }
      if (struct.voiceMessageSelf != null) {
        oprot.writeFieldBegin(VOICE_MESSAGE_SELF_FIELD_DESC);
        oprot.writeString(struct.voiceMessageSelf);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MODE_ID_FIELD_DESC);
      oprot.writeI32(struct.modeId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATURE_FIELD_DESC);
      oprot.writeByte(struct.stature);
      oprot.writeFieldEnd();
      if (struct.moodMessageFriend != null) {
        oprot.writeFieldBegin(MOOD_MESSAGE_FRIEND_FIELD_DESC);
        oprot.writeString(struct.moodMessageFriend);
        oprot.writeFieldEnd();
      }
      if (struct.voiceMessageFriend != null) {
        oprot.writeFieldBegin(VOICE_MESSAGE_FRIEND_FIELD_DESC);
        oprot.writeString(struct.voiceMessageFriend);
        oprot.writeFieldEnd();
      }
      if (struct.playerBaseInfo != null) {
        oprot.writeFieldBegin(PLAYER_BASE_INFO_FIELD_DESC);
        struct.playerBaseInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.avatarListFriend != null) {
        oprot.writeFieldBegin(AVATAR_LIST_FRIEND_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.avatarListFriend.size()));
          for (AvatarInfo _iter568 : struct.avatarListFriend)
          {
            _iter568.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SPECIAL_DAY_FIELD_DESC);
      oprot.writeI32(struct.specialDay);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_FIRST_TIME_CHANGE_NICK_FIELD_DESC);
      oprot.writeBool(struct.isFirstTimeChangeNick);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_FIRST_TIME_CHANGE_POS_FIELD_DESC);
      oprot.writeBool(struct.isFirstTimeChangePos);
      oprot.writeFieldEnd();
      if (struct.isSetIsOnline()) {
        oprot.writeFieldBegin(IS_ONLINE_FIELD_DESC);
        oprot.writeBool(struct.isOnline);
        oprot.writeFieldEnd();
      }
      if (struct.putOnBadges != null) {
        oprot.writeFieldBegin(PUT_ON_BADGES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.putOnBadges.size()));
          for (BadgeInfo _iter569 : struct.putOnBadges)
          {
            _iter569.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CloseFriendInfoTupleSchemeFactory implements SchemeFactory {
    public CloseFriendInfoTupleScheme getScheme() {
      return new CloseFriendInfoTupleScheme();
    }
  }

  private static class CloseFriendInfoTupleScheme extends TupleScheme<CloseFriendInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CloseFriendInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRelationshipSelf()) {
        optionals.set(0);
      }
      if (struct.isSetUseLvlRelationShipSelf()) {
        optionals.set(1);
      }
      if (struct.isSetRelationshipFriend()) {
        optionals.set(2);
      }
      if (struct.isSetUseLvlRelationShipFriend()) {
        optionals.set(3);
      }
      if (struct.isSetIntimacyVal()) {
        optionals.set(4);
      }
      if (struct.isSetPoseId()) {
        optionals.set(5);
      }
      if (struct.isSetMoodMessageSelf()) {
        optionals.set(6);
      }
      if (struct.isSetVoiceMessageSelf()) {
        optionals.set(7);
      }
      if (struct.isSetModeId()) {
        optionals.set(8);
      }
      if (struct.isSetStature()) {
        optionals.set(9);
      }
      if (struct.isSetMoodMessageFriend()) {
        optionals.set(10);
      }
      if (struct.isSetVoiceMessageFriend()) {
        optionals.set(11);
      }
      if (struct.isSetPlayerBaseInfo()) {
        optionals.set(12);
      }
      if (struct.isSetAvatarListFriend()) {
        optionals.set(13);
      }
      if (struct.isSetSpecialDay()) {
        optionals.set(14);
      }
      if (struct.isSetIsFirstTimeChangeNick()) {
        optionals.set(15);
      }
      if (struct.isSetIsFirstTimeChangePos()) {
        optionals.set(16);
      }
      if (struct.isSetIsOnline()) {
        optionals.set(17);
      }
      if (struct.isSetPutOnBadges()) {
        optionals.set(18);
      }
      oprot.writeBitSet(optionals, 19);
      if (struct.isSetRelationshipSelf()) {
        oprot.writeString(struct.relationshipSelf);
      }
      if (struct.isSetUseLvlRelationShipSelf()) {
        oprot.writeByte(struct.useLvlRelationShipSelf);
      }
      if (struct.isSetRelationshipFriend()) {
        oprot.writeString(struct.relationshipFriend);
      }
      if (struct.isSetUseLvlRelationShipFriend()) {
        oprot.writeByte(struct.useLvlRelationShipFriend);
      }
      if (struct.isSetIntimacyVal()) {
        oprot.writeI32(struct.intimacyVal);
      }
      if (struct.isSetPoseId()) {
        oprot.writeI32(struct.poseId);
      }
      if (struct.isSetMoodMessageSelf()) {
        oprot.writeString(struct.moodMessageSelf);
      }
      if (struct.isSetVoiceMessageSelf()) {
        oprot.writeString(struct.voiceMessageSelf);
      }
      if (struct.isSetModeId()) {
        oprot.writeI32(struct.modeId);
      }
      if (struct.isSetStature()) {
        oprot.writeByte(struct.stature);
      }
      if (struct.isSetMoodMessageFriend()) {
        oprot.writeString(struct.moodMessageFriend);
      }
      if (struct.isSetVoiceMessageFriend()) {
        oprot.writeString(struct.voiceMessageFriend);
      }
      if (struct.isSetPlayerBaseInfo()) {
        struct.playerBaseInfo.write(oprot);
      }
      if (struct.isSetAvatarListFriend()) {
        {
          oprot.writeI32(struct.avatarListFriend.size());
          for (AvatarInfo _iter570 : struct.avatarListFriend)
          {
            _iter570.write(oprot);
          }
        }
      }
      if (struct.isSetSpecialDay()) {
        oprot.writeI32(struct.specialDay);
      }
      if (struct.isSetIsFirstTimeChangeNick()) {
        oprot.writeBool(struct.isFirstTimeChangeNick);
      }
      if (struct.isSetIsFirstTimeChangePos()) {
        oprot.writeBool(struct.isFirstTimeChangePos);
      }
      if (struct.isSetIsOnline()) {
        oprot.writeBool(struct.isOnline);
      }
      if (struct.isSetPutOnBadges()) {
        {
          oprot.writeI32(struct.putOnBadges.size());
          for (BadgeInfo _iter571 : struct.putOnBadges)
          {
            _iter571.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CloseFriendInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(19);
      if (incoming.get(0)) {
        struct.relationshipSelf = iprot.readString();
        struct.setRelationshipSelfIsSet(true);
      }
      if (incoming.get(1)) {
        struct.useLvlRelationShipSelf = iprot.readByte();
        struct.setUseLvlRelationShipSelfIsSet(true);
      }
      if (incoming.get(2)) {
        struct.relationshipFriend = iprot.readString();
        struct.setRelationshipFriendIsSet(true);
      }
      if (incoming.get(3)) {
        struct.useLvlRelationShipFriend = iprot.readByte();
        struct.setUseLvlRelationShipFriendIsSet(true);
      }
      if (incoming.get(4)) {
        struct.intimacyVal = iprot.readI32();
        struct.setIntimacyValIsSet(true);
      }
      if (incoming.get(5)) {
        struct.poseId = iprot.readI32();
        struct.setPoseIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.moodMessageSelf = iprot.readString();
        struct.setMoodMessageSelfIsSet(true);
      }
      if (incoming.get(7)) {
        struct.voiceMessageSelf = iprot.readString();
        struct.setVoiceMessageSelfIsSet(true);
      }
      if (incoming.get(8)) {
        struct.modeId = iprot.readI32();
        struct.setModeIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.stature = iprot.readByte();
        struct.setStatureIsSet(true);
      }
      if (incoming.get(10)) {
        struct.moodMessageFriend = iprot.readString();
        struct.setMoodMessageFriendIsSet(true);
      }
      if (incoming.get(11)) {
        struct.voiceMessageFriend = iprot.readString();
        struct.setVoiceMessageFriendIsSet(true);
      }
      if (incoming.get(12)) {
        struct.playerBaseInfo = new PlayerBaseInfo();
        struct.playerBaseInfo.read(iprot);
        struct.setPlayerBaseInfoIsSet(true);
      }
      if (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TList _list572 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.avatarListFriend = new ArrayList<AvatarInfo>(_list572.size);
          for (int _i573 = 0; _i573 < _list572.size; ++_i573)
          {
            AvatarInfo _elem574; // required
            _elem574 = new AvatarInfo();
            _elem574.read(iprot);
            struct.avatarListFriend.add(_elem574);
          }
        }
        struct.setAvatarListFriendIsSet(true);
      }
      if (incoming.get(14)) {
        struct.specialDay = iprot.readI32();
        struct.setSpecialDayIsSet(true);
      }
      if (incoming.get(15)) {
        struct.isFirstTimeChangeNick = iprot.readBool();
        struct.setIsFirstTimeChangeNickIsSet(true);
      }
      if (incoming.get(16)) {
        struct.isFirstTimeChangePos = iprot.readBool();
        struct.setIsFirstTimeChangePosIsSet(true);
      }
      if (incoming.get(17)) {
        struct.isOnline = iprot.readBool();
        struct.setIsOnlineIsSet(true);
      }
      if (incoming.get(18)) {
        {
          org.apache.thrift.protocol.TList _list575 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.putOnBadges = new ArrayList<BadgeInfo>(_list575.size);
          for (int _i576 = 0; _i576 < _list575.size; ++_i576)
          {
            BadgeInfo _elem577; // required
            _elem577 = new BadgeInfo();
            _elem577.read(iprot);
            struct.putOnBadges.add(_elem577);
          }
        }
        struct.setPutOnBadgesIsSet(true);
      }
    }
  }

}

