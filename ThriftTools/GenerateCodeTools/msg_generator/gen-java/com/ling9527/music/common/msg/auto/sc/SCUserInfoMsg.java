/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SCUserInfoMsg implements org.apache.thrift.TBase<SCUserInfoMsg, SCUserInfoMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCUserInfoMsg");

  private static final org.apache.thrift.protocol.TField SEX_FIELD_DESC = new org.apache.thrift.protocol.TField("sex", org.apache.thrift.protocol.TType.BYTE, (short)1);
  private static final org.apache.thrift.protocol.TField CHAR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("charId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accountId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField IB_FIELD_DESC = new org.apache.thrift.protocol.TField("ib", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField GOLD_FIELD_DESC = new org.apache.thrift.protocol.TField("gold", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField HEAD_ICON_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("headIconId", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField BODY_ADJ_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("bodyAdjVal", org.apache.thrift.protocol.TType.BYTE, (short)8);
  private static final org.apache.thrift.protocol.TField MODEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("modelId", org.apache.thrift.protocol.TType.BYTE, (short)9);
  private static final org.apache.thrift.protocol.TField VIP_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("vipLevel", org.apache.thrift.protocol.TType.BYTE, (short)10);
  private static final org.apache.thrift.protocol.TField POINT_FIELD_DESC = new org.apache.thrift.protocol.TField("point", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField FLAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("flags", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField CONSTELLATION_FIELD_DESC = new org.apache.thrift.protocol.TField("constellation", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField LUCK_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("luckDay", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField BYTE_COUNTER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("byteCounterList", org.apache.thrift.protocol.TType.LIST, (short)15);
  private static final org.apache.thrift.protocol.TField SHORT_COUNTER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("shortCounterList", org.apache.thrift.protocol.TType.LIST, (short)16);
  private static final org.apache.thrift.protocol.TField INT_COUNTER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("intCounterList", org.apache.thrift.protocol.TType.LIST, (short)17);
  private static final org.apache.thrift.protocol.TField LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("level", org.apache.thrift.protocol.TType.I16, (short)18);
  private static final org.apache.thrift.protocol.TField EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("exp", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField STATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("stature", org.apache.thrift.protocol.TType.BYTE, (short)20);
  private static final org.apache.thrift.protocol.TField COOKIE_FIELD_DESC = new org.apache.thrift.protocol.TField("cookie", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField POPULARITY_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("popularityLevel", org.apache.thrift.protocol.TType.I16, (short)22);
  private static final org.apache.thrift.protocol.TField POPULARITY_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("popularityTotal", org.apache.thrift.protocol.TType.I64, (short)23);
  private static final org.apache.thrift.protocol.TField NEW_CLIENT_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("newClientVersion", org.apache.thrift.protocol.TType.BOOL, (short)24);
  private static final org.apache.thrift.protocol.TField TEMP_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("tempUser", org.apache.thrift.protocol.TType.BOOL, (short)25);
  private static final org.apache.thrift.protocol.TField CUP_FIELD_DESC = new org.apache.thrift.protocol.TField("cup", org.apache.thrift.protocol.TType.I32, (short)26);
  private static final org.apache.thrift.protocol.TField FREE_IB_FIELD_DESC = new org.apache.thrift.protocol.TField("freeIb", org.apache.thrift.protocol.TType.I32, (short)29);
  private static final org.apache.thrift.protocol.TField RECHARGE_IB_FIELD_DESC = new org.apache.thrift.protocol.TField("rechargeIb", org.apache.thrift.protocol.TType.I32, (short)30);
  private static final org.apache.thrift.protocol.TField INT_DAY_LOOP_COUNTER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("intDayLoopCounterList", org.apache.thrift.protocol.TType.LIST, (short)31);
  private static final org.apache.thrift.protocol.TField VIP_DIAMOND_FIELD_DESC = new org.apache.thrift.protocol.TField("vipDiamond", org.apache.thrift.protocol.TType.I32, (short)32);
  private static final org.apache.thrift.protocol.TField SHORT_DAY_LOOP_COUNTER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("shortDayLoopCounterList", org.apache.thrift.protocol.TType.LIST, (short)34);
  private static final org.apache.thrift.protocol.TField BYTE_DAY_LOOP_COUNTER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("byteDayLoopCounterList", org.apache.thrift.protocol.TType.LIST, (short)35);
  private static final org.apache.thrift.protocol.TField ACTIVE_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("activeVal", org.apache.thrift.protocol.TType.I32, (short)36);
  private static final org.apache.thrift.protocol.TField ACTIVE_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("activeLevel", org.apache.thrift.protocol.TType.BYTE, (short)37);
  private static final org.apache.thrift.protocol.TField TOTAL_RECHARGE_FIELD_DESC = new org.apache.thrift.protocol.TField("totalRecharge", org.apache.thrift.protocol.TType.I32, (short)40);
  private static final org.apache.thrift.protocol.TField TAG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tagId", org.apache.thrift.protocol.TType.I16, (short)41);
  private static final org.apache.thrift.protocol.TField AWORD_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("awordVersion", org.apache.thrift.protocol.TType.I32, (short)42);
  private static final org.apache.thrift.protocol.TField GUILD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("guildId", org.apache.thrift.protocol.TType.I64, (short)43);
  private static final org.apache.thrift.protocol.TField GUILD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("guildName", org.apache.thrift.protocol.TType.STRING, (short)44);
  private static final org.apache.thrift.protocol.TField MAIL_PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("mailPageSize", org.apache.thrift.protocol.TType.I32, (short)45);
  private static final org.apache.thrift.protocol.TField NON_POINT_IB_FIELD_DESC = new org.apache.thrift.protocol.TField("nonPointIb", org.apache.thrift.protocol.TType.I32, (short)46);
  private static final org.apache.thrift.protocol.TField BIND_EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("bindEmail", org.apache.thrift.protocol.TType.STRING, (short)47);
  private static final org.apache.thrift.protocol.TField FRIEND_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("friendType", org.apache.thrift.protocol.TType.I32, (short)48);
  private static final org.apache.thrift.protocol.TField SKIN_COLOR_FIELD_DESC = new org.apache.thrift.protocol.TField("skinColor", org.apache.thrift.protocol.TType.I32, (short)49);
  private static final org.apache.thrift.protocol.TField STAR_LIGHT_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("starLightLevel", org.apache.thrift.protocol.TType.I16, (short)50);
  private static final org.apache.thrift.protocol.TField STAR_LIGHTS_FIELD_DESC = new org.apache.thrift.protocol.TField("starLights", org.apache.thrift.protocol.TType.I32, (short)51);
  private static final org.apache.thrift.protocol.TField GAME_SERVER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("gameServerId", org.apache.thrift.protocol.TType.STRING, (short)52);
  private static final org.apache.thrift.protocol.TField GAME_SERVER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("gameServerName", org.apache.thrift.protocol.TType.STRING, (short)53);
  private static final org.apache.thrift.protocol.TField PUT_ON_BADGES_FIELD_DESC = new org.apache.thrift.protocol.TField("putOnBadges", org.apache.thrift.protocol.TType.LIST, (short)54);
  private static final org.apache.thrift.protocol.TField USED_FASHION_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("usedFashionIds", org.apache.thrift.protocol.TType.MAP, (short)55);
  private static final org.apache.thrift.protocol.TField LARGESSE_FIELD_DESC = new org.apache.thrift.protocol.TField("largesse", org.apache.thrift.protocol.TType.I32, (short)56);
  private static final org.apache.thrift.protocol.TField CHARM_FIELD_DESC = new org.apache.thrift.protocol.TField("charm", org.apache.thrift.protocol.TType.I32, (short)57);
  private static final org.apache.thrift.protocol.TField HAS_SIGN_FIELD_DESC = new org.apache.thrift.protocol.TField("hasSign", org.apache.thrift.protocol.TType.BOOL, (short)58);
  private static final org.apache.thrift.protocol.TField GUILD_DEGREE_FIELD_DESC = new org.apache.thrift.protocol.TField("guildDegree", org.apache.thrift.protocol.TType.I32, (short)59);
  private static final org.apache.thrift.protocol.TField ACTIVITY_UISTATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("activityUIStatus", org.apache.thrift.protocol.TType.I32, (short)60);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCUserInfoMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCUserInfoMsgTupleSchemeFactory());
  }

  public byte sex; // required
  public long charId; // required
  public long accountId; // required
  public String name; // required
  public int ib; // required
  public int gold; // required
  public String headIconId; // required
  public byte bodyAdjVal; // required
  public byte modelId; // required
  public byte vipLevel; // required
  public int point; // required
  public ByteBuffer flags; // optional
  /**
   * 
   * @see com.ling9527.music.common.msg.auto.Constellation
   */
  public com.ling9527.music.common.msg.auto.Constellation constellation; // required
  /**
   * 
   * @see com.ling9527.music.common.msg.auto.LuckDay
   */
  public com.ling9527.music.common.msg.auto.LuckDay luckDay; // required
  public List<Byte> byteCounterList; // optional
  public List<Short> shortCounterList; // optional
  public List<Integer> intCounterList; // optional
  public short level; // required
  public int exp; // required
  public byte stature; // required
  public String cookie; // required
  public short popularityLevel; // required
  public long popularityTotal; // required
  public boolean newClientVersion; // required
  public boolean tempUser; // required
  public int cup; // required
  public int freeIb; // required
  public int rechargeIb; // required
  public List<Integer> intDayLoopCounterList; // optional
  public int vipDiamond; // required
  public List<Short> shortDayLoopCounterList; // optional
  public List<Byte> byteDayLoopCounterList; // optional
  public int activeVal; // required
  public byte activeLevel; // required
  public int totalRecharge; // required
  public short tagId; // required
  public int awordVersion; // required
  public long guildId; // required
  public String guildName; // required
  public int mailPageSize; // required
  public int nonPointIb; // required
  public String bindEmail; // required
  public int friendType; // required
  public int skinColor; // required
  public short starLightLevel; // required
  public int starLights; // required
  /**
   * 玩家当前游戏服id
   */
  public String gameServerId; // required
  /**
   * 玩家当前游戏服名
   */
  public String gameServerName; // required
  /**
   * 佩戴的徽章
   */
  public List<com.ling9527.music.common.msg.auto.BadgeInfo> putOnBadges; // required
  /**
   * 使用中的时尚id, key:style val:id
   */
  public Map<Byte,Integer> usedFashionIds; // required
  /**
   * 财力值
   */
  public int largesse; // required
  /**
   * 魅力值
   */
  public int charm; // required
  /**
   * 是否已经签到
   */
  public boolean hasSign; // required
  /**
   * 舞团职位
   * 
   * @see com.ling9527.music.common.msg.auto.GuildDegree
   */
  public com.ling9527.music.common.msg.auto.GuildDegree guildDegree; // required
  /**
   * 活动奖励状态
   * 
   * @see ActivityUIStatus
   */
  public ActivityUIStatus activityUIStatus; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SEX((short)1, "sex"),
    CHAR_ID((short)2, "charId"),
    ACCOUNT_ID((short)3, "accountId"),
    NAME((short)4, "name"),
    IB((short)5, "ib"),
    GOLD((short)6, "gold"),
    HEAD_ICON_ID((short)7, "headIconId"),
    BODY_ADJ_VAL((short)8, "bodyAdjVal"),
    MODEL_ID((short)9, "modelId"),
    VIP_LEVEL((short)10, "vipLevel"),
    POINT((short)11, "point"),
    FLAGS((short)12, "flags"),
    /**
     * 
     * @see com.ling9527.music.common.msg.auto.Constellation
     */
    CONSTELLATION((short)13, "constellation"),
    /**
     * 
     * @see com.ling9527.music.common.msg.auto.LuckDay
     */
    LUCK_DAY((short)14, "luckDay"),
    BYTE_COUNTER_LIST((short)15, "byteCounterList"),
    SHORT_COUNTER_LIST((short)16, "shortCounterList"),
    INT_COUNTER_LIST((short)17, "intCounterList"),
    LEVEL((short)18, "level"),
    EXP((short)19, "exp"),
    STATURE((short)20, "stature"),
    COOKIE((short)21, "cookie"),
    POPULARITY_LEVEL((short)22, "popularityLevel"),
    POPULARITY_TOTAL((short)23, "popularityTotal"),
    NEW_CLIENT_VERSION((short)24, "newClientVersion"),
    TEMP_USER((short)25, "tempUser"),
    CUP((short)26, "cup"),
    FREE_IB((short)29, "freeIb"),
    RECHARGE_IB((short)30, "rechargeIb"),
    INT_DAY_LOOP_COUNTER_LIST((short)31, "intDayLoopCounterList"),
    VIP_DIAMOND((short)32, "vipDiamond"),
    SHORT_DAY_LOOP_COUNTER_LIST((short)34, "shortDayLoopCounterList"),
    BYTE_DAY_LOOP_COUNTER_LIST((short)35, "byteDayLoopCounterList"),
    ACTIVE_VAL((short)36, "activeVal"),
    ACTIVE_LEVEL((short)37, "activeLevel"),
    TOTAL_RECHARGE((short)40, "totalRecharge"),
    TAG_ID((short)41, "tagId"),
    AWORD_VERSION((short)42, "awordVersion"),
    GUILD_ID((short)43, "guildId"),
    GUILD_NAME((short)44, "guildName"),
    MAIL_PAGE_SIZE((short)45, "mailPageSize"),
    NON_POINT_IB((short)46, "nonPointIb"),
    BIND_EMAIL((short)47, "bindEmail"),
    FRIEND_TYPE((short)48, "friendType"),
    SKIN_COLOR((short)49, "skinColor"),
    STAR_LIGHT_LEVEL((short)50, "starLightLevel"),
    STAR_LIGHTS((short)51, "starLights"),
    /**
     * 玩家当前游戏服id
     */
    GAME_SERVER_ID((short)52, "gameServerId"),
    /**
     * 玩家当前游戏服名
     */
    GAME_SERVER_NAME((short)53, "gameServerName"),
    /**
     * 佩戴的徽章
     */
    PUT_ON_BADGES((short)54, "putOnBadges"),
    /**
     * 使用中的时尚id, key:style val:id
     */
    USED_FASHION_IDS((short)55, "usedFashionIds"),
    /**
     * 财力值
     */
    LARGESSE((short)56, "largesse"),
    /**
     * 魅力值
     */
    CHARM((short)57, "charm"),
    /**
     * 是否已经签到
     */
    HAS_SIGN((short)58, "hasSign"),
    /**
     * 舞团职位
     * 
     * @see com.ling9527.music.common.msg.auto.GuildDegree
     */
    GUILD_DEGREE((short)59, "guildDegree"),
    /**
     * 活动奖励状态
     * 
     * @see ActivityUIStatus
     */
    ACTIVITY_UISTATUS((short)60, "activityUIStatus");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SEX
          return SEX;
        case 2: // CHAR_ID
          return CHAR_ID;
        case 3: // ACCOUNT_ID
          return ACCOUNT_ID;
        case 4: // NAME
          return NAME;
        case 5: // IB
          return IB;
        case 6: // GOLD
          return GOLD;
        case 7: // HEAD_ICON_ID
          return HEAD_ICON_ID;
        case 8: // BODY_ADJ_VAL
          return BODY_ADJ_VAL;
        case 9: // MODEL_ID
          return MODEL_ID;
        case 10: // VIP_LEVEL
          return VIP_LEVEL;
        case 11: // POINT
          return POINT;
        case 12: // FLAGS
          return FLAGS;
        case 13: // CONSTELLATION
          return CONSTELLATION;
        case 14: // LUCK_DAY
          return LUCK_DAY;
        case 15: // BYTE_COUNTER_LIST
          return BYTE_COUNTER_LIST;
        case 16: // SHORT_COUNTER_LIST
          return SHORT_COUNTER_LIST;
        case 17: // INT_COUNTER_LIST
          return INT_COUNTER_LIST;
        case 18: // LEVEL
          return LEVEL;
        case 19: // EXP
          return EXP;
        case 20: // STATURE
          return STATURE;
        case 21: // COOKIE
          return COOKIE;
        case 22: // POPULARITY_LEVEL
          return POPULARITY_LEVEL;
        case 23: // POPULARITY_TOTAL
          return POPULARITY_TOTAL;
        case 24: // NEW_CLIENT_VERSION
          return NEW_CLIENT_VERSION;
        case 25: // TEMP_USER
          return TEMP_USER;
        case 26: // CUP
          return CUP;
        case 29: // FREE_IB
          return FREE_IB;
        case 30: // RECHARGE_IB
          return RECHARGE_IB;
        case 31: // INT_DAY_LOOP_COUNTER_LIST
          return INT_DAY_LOOP_COUNTER_LIST;
        case 32: // VIP_DIAMOND
          return VIP_DIAMOND;
        case 34: // SHORT_DAY_LOOP_COUNTER_LIST
          return SHORT_DAY_LOOP_COUNTER_LIST;
        case 35: // BYTE_DAY_LOOP_COUNTER_LIST
          return BYTE_DAY_LOOP_COUNTER_LIST;
        case 36: // ACTIVE_VAL
          return ACTIVE_VAL;
        case 37: // ACTIVE_LEVEL
          return ACTIVE_LEVEL;
        case 40: // TOTAL_RECHARGE
          return TOTAL_RECHARGE;
        case 41: // TAG_ID
          return TAG_ID;
        case 42: // AWORD_VERSION
          return AWORD_VERSION;
        case 43: // GUILD_ID
          return GUILD_ID;
        case 44: // GUILD_NAME
          return GUILD_NAME;
        case 45: // MAIL_PAGE_SIZE
          return MAIL_PAGE_SIZE;
        case 46: // NON_POINT_IB
          return NON_POINT_IB;
        case 47: // BIND_EMAIL
          return BIND_EMAIL;
        case 48: // FRIEND_TYPE
          return FRIEND_TYPE;
        case 49: // SKIN_COLOR
          return SKIN_COLOR;
        case 50: // STAR_LIGHT_LEVEL
          return STAR_LIGHT_LEVEL;
        case 51: // STAR_LIGHTS
          return STAR_LIGHTS;
        case 52: // GAME_SERVER_ID
          return GAME_SERVER_ID;
        case 53: // GAME_SERVER_NAME
          return GAME_SERVER_NAME;
        case 54: // PUT_ON_BADGES
          return PUT_ON_BADGES;
        case 55: // USED_FASHION_IDS
          return USED_FASHION_IDS;
        case 56: // LARGESSE
          return LARGESSE;
        case 57: // CHARM
          return CHARM;
        case 58: // HAS_SIGN
          return HAS_SIGN;
        case 59: // GUILD_DEGREE
          return GUILD_DEGREE;
        case 60: // ACTIVITY_UISTATUS
          return ACTIVITY_UISTATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SEX_ISSET_ID = 0;
  private static final int __CHARID_ISSET_ID = 1;
  private static final int __ACCOUNTID_ISSET_ID = 2;
  private static final int __IB_ISSET_ID = 3;
  private static final int __GOLD_ISSET_ID = 4;
  private static final int __BODYADJVAL_ISSET_ID = 5;
  private static final int __MODELID_ISSET_ID = 6;
  private static final int __VIPLEVEL_ISSET_ID = 7;
  private static final int __POINT_ISSET_ID = 8;
  private static final int __LEVEL_ISSET_ID = 9;
  private static final int __EXP_ISSET_ID = 10;
  private static final int __STATURE_ISSET_ID = 11;
  private static final int __POPULARITYLEVEL_ISSET_ID = 12;
  private static final int __POPULARITYTOTAL_ISSET_ID = 13;
  private static final int __NEWCLIENTVERSION_ISSET_ID = 14;
  private static final int __TEMPUSER_ISSET_ID = 15;
  private static final int __CUP_ISSET_ID = 16;
  private static final int __FREEIB_ISSET_ID = 17;
  private static final int __RECHARGEIB_ISSET_ID = 18;
  private static final int __VIPDIAMOND_ISSET_ID = 19;
  private static final int __ACTIVEVAL_ISSET_ID = 20;
  private static final int __ACTIVELEVEL_ISSET_ID = 21;
  private static final int __TOTALRECHARGE_ISSET_ID = 22;
  private static final int __TAGID_ISSET_ID = 23;
  private static final int __AWORDVERSION_ISSET_ID = 24;
  private static final int __GUILDID_ISSET_ID = 25;
  private static final int __MAILPAGESIZE_ISSET_ID = 26;
  private static final int __NONPOINTIB_ISSET_ID = 27;
  private static final int __FRIENDTYPE_ISSET_ID = 28;
  private static final int __SKINCOLOR_ISSET_ID = 29;
  private static final int __STARLIGHTLEVEL_ISSET_ID = 30;
  private static final int __STARLIGHTS_ISSET_ID = 31;
  private static final int __LARGESSE_ISSET_ID = 32;
  private static final int __CHARM_ISSET_ID = 33;
  private static final int __HASSIGN_ISSET_ID = 34;
  private long __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.FLAGS,_Fields.BYTE_COUNTER_LIST,_Fields.SHORT_COUNTER_LIST,_Fields.INT_COUNTER_LIST,_Fields.INT_DAY_LOOP_COUNTER_LIST,_Fields.SHORT_DAY_LOOP_COUNTER_LIST,_Fields.BYTE_DAY_LOOP_COUNTER_LIST,_Fields.ACTIVITY_UISTATUS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SEX, new org.apache.thrift.meta_data.FieldMetaData("sex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.CHAR_ID, new org.apache.thrift.meta_data.FieldMetaData("charId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("accountId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IB, new org.apache.thrift.meta_data.FieldMetaData("ib", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GOLD, new org.apache.thrift.meta_data.FieldMetaData("gold", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HEAD_ICON_ID, new org.apache.thrift.meta_data.FieldMetaData("headIconId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BODY_ADJ_VAL, new org.apache.thrift.meta_data.FieldMetaData("bodyAdjVal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.MODEL_ID, new org.apache.thrift.meta_data.FieldMetaData("modelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.VIP_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("vipLevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.POINT, new org.apache.thrift.meta_data.FieldMetaData("point", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FLAGS, new org.apache.thrift.meta_data.FieldMetaData("flags", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.CONSTELLATION, new org.apache.thrift.meta_data.FieldMetaData("constellation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.ling9527.music.common.msg.auto.Constellation.class)));
    tmpMap.put(_Fields.LUCK_DAY, new org.apache.thrift.meta_data.FieldMetaData("luckDay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.ling9527.music.common.msg.auto.LuckDay.class)));
    tmpMap.put(_Fields.BYTE_COUNTER_LIST, new org.apache.thrift.meta_data.FieldMetaData("byteCounterList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE))));
    tmpMap.put(_Fields.SHORT_COUNTER_LIST, new org.apache.thrift.meta_data.FieldMetaData("shortCounterList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16))));
    tmpMap.put(_Fields.INT_COUNTER_LIST, new org.apache.thrift.meta_data.FieldMetaData("intCounterList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.LEVEL, new org.apache.thrift.meta_data.FieldMetaData("level", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.EXP, new org.apache.thrift.meta_data.FieldMetaData("exp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATURE, new org.apache.thrift.meta_data.FieldMetaData("stature", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.COOKIE, new org.apache.thrift.meta_data.FieldMetaData("cookie", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POPULARITY_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("popularityLevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.POPULARITY_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("popularityTotal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NEW_CLIENT_VERSION, new org.apache.thrift.meta_data.FieldMetaData("newClientVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TEMP_USER, new org.apache.thrift.meta_data.FieldMetaData("tempUser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CUP, new org.apache.thrift.meta_data.FieldMetaData("cup", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FREE_IB, new org.apache.thrift.meta_data.FieldMetaData("freeIb", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RECHARGE_IB, new org.apache.thrift.meta_data.FieldMetaData("rechargeIb", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INT_DAY_LOOP_COUNTER_LIST, new org.apache.thrift.meta_data.FieldMetaData("intDayLoopCounterList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.VIP_DIAMOND, new org.apache.thrift.meta_data.FieldMetaData("vipDiamond", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SHORT_DAY_LOOP_COUNTER_LIST, new org.apache.thrift.meta_data.FieldMetaData("shortDayLoopCounterList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16))));
    tmpMap.put(_Fields.BYTE_DAY_LOOP_COUNTER_LIST, new org.apache.thrift.meta_data.FieldMetaData("byteDayLoopCounterList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE))));
    tmpMap.put(_Fields.ACTIVE_VAL, new org.apache.thrift.meta_data.FieldMetaData("activeVal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACTIVE_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("activeLevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.TOTAL_RECHARGE, new org.apache.thrift.meta_data.FieldMetaData("totalRecharge", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TAG_ID, new org.apache.thrift.meta_data.FieldMetaData("tagId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.AWORD_VERSION, new org.apache.thrift.meta_data.FieldMetaData("awordVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GUILD_ID, new org.apache.thrift.meta_data.FieldMetaData("guildId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.GUILD_NAME, new org.apache.thrift.meta_data.FieldMetaData("guildName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAIL_PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("mailPageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NON_POINT_IB, new org.apache.thrift.meta_data.FieldMetaData("nonPointIb", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BIND_EMAIL, new org.apache.thrift.meta_data.FieldMetaData("bindEmail", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FRIEND_TYPE, new org.apache.thrift.meta_data.FieldMetaData("friendType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SKIN_COLOR, new org.apache.thrift.meta_data.FieldMetaData("skinColor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STAR_LIGHT_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("starLightLevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.STAR_LIGHTS, new org.apache.thrift.meta_data.FieldMetaData("starLights", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GAME_SERVER_ID, new org.apache.thrift.meta_data.FieldMetaData("gameServerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GAME_SERVER_NAME, new org.apache.thrift.meta_data.FieldMetaData("gameServerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PUT_ON_BADGES, new org.apache.thrift.meta_data.FieldMetaData("putOnBadges", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.BadgeInfo.class))));
    tmpMap.put(_Fields.USED_FASHION_IDS, new org.apache.thrift.meta_data.FieldMetaData("usedFashionIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.LARGESSE, new org.apache.thrift.meta_data.FieldMetaData("largesse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CHARM, new org.apache.thrift.meta_data.FieldMetaData("charm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HAS_SIGN, new org.apache.thrift.meta_data.FieldMetaData("hasSign", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.GUILD_DEGREE, new org.apache.thrift.meta_data.FieldMetaData("guildDegree", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.ling9527.music.common.msg.auto.GuildDegree.class)));
    tmpMap.put(_Fields.ACTIVITY_UISTATUS, new org.apache.thrift.meta_data.FieldMetaData("activityUIStatus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ActivityUIStatus.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCUserInfoMsg.class, metaDataMap);
  }

  public SCUserInfoMsg() {
  }

  public SCUserInfoMsg(
    byte sex,
    long charId,
    long accountId,
    String name,
    int ib,
    int gold,
    String headIconId,
    byte bodyAdjVal,
    byte modelId,
    byte vipLevel,
    int point,
    com.ling9527.music.common.msg.auto.Constellation constellation,
    com.ling9527.music.common.msg.auto.LuckDay luckDay,
    short level,
    int exp,
    byte stature,
    String cookie,
    short popularityLevel,
    long popularityTotal,
    boolean newClientVersion,
    boolean tempUser,
    int cup,
    int freeIb,
    int rechargeIb,
    int vipDiamond,
    int activeVal,
    byte activeLevel,
    int totalRecharge,
    short tagId,
    int awordVersion,
    long guildId,
    String guildName,
    int mailPageSize,
    int nonPointIb,
    String bindEmail,
    int friendType,
    int skinColor,
    short starLightLevel,
    int starLights,
    String gameServerId,
    String gameServerName,
    List<com.ling9527.music.common.msg.auto.BadgeInfo> putOnBadges,
    Map<Byte,Integer> usedFashionIds,
    int largesse,
    int charm,
    boolean hasSign,
    com.ling9527.music.common.msg.auto.GuildDegree guildDegree)
  {
    this();
    this.sex = sex;
    setSexIsSet(true);
    this.charId = charId;
    setCharIdIsSet(true);
    this.accountId = accountId;
    setAccountIdIsSet(true);
    this.name = name;
    this.ib = ib;
    setIbIsSet(true);
    this.gold = gold;
    setGoldIsSet(true);
    this.headIconId = headIconId;
    this.bodyAdjVal = bodyAdjVal;
    setBodyAdjValIsSet(true);
    this.modelId = modelId;
    setModelIdIsSet(true);
    this.vipLevel = vipLevel;
    setVipLevelIsSet(true);
    this.point = point;
    setPointIsSet(true);
    this.constellation = constellation;
    this.luckDay = luckDay;
    this.level = level;
    setLevelIsSet(true);
    this.exp = exp;
    setExpIsSet(true);
    this.stature = stature;
    setStatureIsSet(true);
    this.cookie = cookie;
    this.popularityLevel = popularityLevel;
    setPopularityLevelIsSet(true);
    this.popularityTotal = popularityTotal;
    setPopularityTotalIsSet(true);
    this.newClientVersion = newClientVersion;
    setNewClientVersionIsSet(true);
    this.tempUser = tempUser;
    setTempUserIsSet(true);
    this.cup = cup;
    setCupIsSet(true);
    this.freeIb = freeIb;
    setFreeIbIsSet(true);
    this.rechargeIb = rechargeIb;
    setRechargeIbIsSet(true);
    this.vipDiamond = vipDiamond;
    setVipDiamondIsSet(true);
    this.activeVal = activeVal;
    setActiveValIsSet(true);
    this.activeLevel = activeLevel;
    setActiveLevelIsSet(true);
    this.totalRecharge = totalRecharge;
    setTotalRechargeIsSet(true);
    this.tagId = tagId;
    setTagIdIsSet(true);
    this.awordVersion = awordVersion;
    setAwordVersionIsSet(true);
    this.guildId = guildId;
    setGuildIdIsSet(true);
    this.guildName = guildName;
    this.mailPageSize = mailPageSize;
    setMailPageSizeIsSet(true);
    this.nonPointIb = nonPointIb;
    setNonPointIbIsSet(true);
    this.bindEmail = bindEmail;
    this.friendType = friendType;
    setFriendTypeIsSet(true);
    this.skinColor = skinColor;
    setSkinColorIsSet(true);
    this.starLightLevel = starLightLevel;
    setStarLightLevelIsSet(true);
    this.starLights = starLights;
    setStarLightsIsSet(true);
    this.gameServerId = gameServerId;
    this.gameServerName = gameServerName;
    this.putOnBadges = putOnBadges;
    this.usedFashionIds = usedFashionIds;
    this.largesse = largesse;
    setLargesseIsSet(true);
    this.charm = charm;
    setCharmIsSet(true);
    this.hasSign = hasSign;
    setHasSignIsSet(true);
    this.guildDegree = guildDegree;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCUserInfoMsg(SCUserInfoMsg other) {
    __isset_bitfield = other.__isset_bitfield;
    this.sex = other.sex;
    this.charId = other.charId;
    this.accountId = other.accountId;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.ib = other.ib;
    this.gold = other.gold;
    if (other.isSetHeadIconId()) {
      this.headIconId = other.headIconId;
    }
    this.bodyAdjVal = other.bodyAdjVal;
    this.modelId = other.modelId;
    this.vipLevel = other.vipLevel;
    this.point = other.point;
    if (other.isSetFlags()) {
      this.flags = org.apache.thrift.TBaseHelper.copyBinary(other.flags);
;
    }
    if (other.isSetConstellation()) {
      this.constellation = other.constellation;
    }
    if (other.isSetLuckDay()) {
      this.luckDay = other.luckDay;
    }
    if (other.isSetByteCounterList()) {
      List<Byte> __this__byteCounterList = new ArrayList<Byte>();
      for (Byte other_element : other.byteCounterList) {
        __this__byteCounterList.add(other_element);
      }
      this.byteCounterList = __this__byteCounterList;
    }
    if (other.isSetShortCounterList()) {
      List<Short> __this__shortCounterList = new ArrayList<Short>();
      for (Short other_element : other.shortCounterList) {
        __this__shortCounterList.add(other_element);
      }
      this.shortCounterList = __this__shortCounterList;
    }
    if (other.isSetIntCounterList()) {
      List<Integer> __this__intCounterList = new ArrayList<Integer>();
      for (Integer other_element : other.intCounterList) {
        __this__intCounterList.add(other_element);
      }
      this.intCounterList = __this__intCounterList;
    }
    this.level = other.level;
    this.exp = other.exp;
    this.stature = other.stature;
    if (other.isSetCookie()) {
      this.cookie = other.cookie;
    }
    this.popularityLevel = other.popularityLevel;
    this.popularityTotal = other.popularityTotal;
    this.newClientVersion = other.newClientVersion;
    this.tempUser = other.tempUser;
    this.cup = other.cup;
    this.freeIb = other.freeIb;
    this.rechargeIb = other.rechargeIb;
    if (other.isSetIntDayLoopCounterList()) {
      List<Integer> __this__intDayLoopCounterList = new ArrayList<Integer>();
      for (Integer other_element : other.intDayLoopCounterList) {
        __this__intDayLoopCounterList.add(other_element);
      }
      this.intDayLoopCounterList = __this__intDayLoopCounterList;
    }
    this.vipDiamond = other.vipDiamond;
    if (other.isSetShortDayLoopCounterList()) {
      List<Short> __this__shortDayLoopCounterList = new ArrayList<Short>();
      for (Short other_element : other.shortDayLoopCounterList) {
        __this__shortDayLoopCounterList.add(other_element);
      }
      this.shortDayLoopCounterList = __this__shortDayLoopCounterList;
    }
    if (other.isSetByteDayLoopCounterList()) {
      List<Byte> __this__byteDayLoopCounterList = new ArrayList<Byte>();
      for (Byte other_element : other.byteDayLoopCounterList) {
        __this__byteDayLoopCounterList.add(other_element);
      }
      this.byteDayLoopCounterList = __this__byteDayLoopCounterList;
    }
    this.activeVal = other.activeVal;
    this.activeLevel = other.activeLevel;
    this.totalRecharge = other.totalRecharge;
    this.tagId = other.tagId;
    this.awordVersion = other.awordVersion;
    this.guildId = other.guildId;
    if (other.isSetGuildName()) {
      this.guildName = other.guildName;
    }
    this.mailPageSize = other.mailPageSize;
    this.nonPointIb = other.nonPointIb;
    if (other.isSetBindEmail()) {
      this.bindEmail = other.bindEmail;
    }
    this.friendType = other.friendType;
    this.skinColor = other.skinColor;
    this.starLightLevel = other.starLightLevel;
    this.starLights = other.starLights;
    if (other.isSetGameServerId()) {
      this.gameServerId = other.gameServerId;
    }
    if (other.isSetGameServerName()) {
      this.gameServerName = other.gameServerName;
    }
    if (other.isSetPutOnBadges()) {
      List<com.ling9527.music.common.msg.auto.BadgeInfo> __this__putOnBadges = new ArrayList<com.ling9527.music.common.msg.auto.BadgeInfo>();
      for (com.ling9527.music.common.msg.auto.BadgeInfo other_element : other.putOnBadges) {
        __this__putOnBadges.add(new com.ling9527.music.common.msg.auto.BadgeInfo(other_element));
      }
      this.putOnBadges = __this__putOnBadges;
    }
    if (other.isSetUsedFashionIds()) {
      Map<Byte,Integer> __this__usedFashionIds = new HashMap<Byte,Integer>();
      for (Map.Entry<Byte, Integer> other_element : other.usedFashionIds.entrySet()) {

        Byte other_element_key = other_element.getKey();
        Integer other_element_value = other_element.getValue();

        Byte __this__usedFashionIds_copy_key = other_element_key;

        Integer __this__usedFashionIds_copy_value = other_element_value;

        __this__usedFashionIds.put(__this__usedFashionIds_copy_key, __this__usedFashionIds_copy_value);
      }
      this.usedFashionIds = __this__usedFashionIds;
    }
    this.largesse = other.largesse;
    this.charm = other.charm;
    this.hasSign = other.hasSign;
    if (other.isSetGuildDegree()) {
      this.guildDegree = other.guildDegree;
    }
    if (other.isSetActivityUIStatus()) {
      this.activityUIStatus = other.activityUIStatus;
    }
  }

  public SCUserInfoMsg deepCopy() {
    return new SCUserInfoMsg(this);
  }

  @Override
  public void clear() {
    setSexIsSet(false);
    this.sex = 0;
    setCharIdIsSet(false);
    this.charId = 0;
    setAccountIdIsSet(false);
    this.accountId = 0;
    this.name = null;
    setIbIsSet(false);
    this.ib = 0;
    setGoldIsSet(false);
    this.gold = 0;
    this.headIconId = null;
    setBodyAdjValIsSet(false);
    this.bodyAdjVal = 0;
    setModelIdIsSet(false);
    this.modelId = 0;
    setVipLevelIsSet(false);
    this.vipLevel = 0;
    setPointIsSet(false);
    this.point = 0;
    this.flags = null;
    this.constellation = null;
    this.luckDay = null;
    this.byteCounterList = null;
    this.shortCounterList = null;
    this.intCounterList = null;
    setLevelIsSet(false);
    this.level = 0;
    setExpIsSet(false);
    this.exp = 0;
    setStatureIsSet(false);
    this.stature = 0;
    this.cookie = null;
    setPopularityLevelIsSet(false);
    this.popularityLevel = 0;
    setPopularityTotalIsSet(false);
    this.popularityTotal = 0;
    setNewClientVersionIsSet(false);
    this.newClientVersion = false;
    setTempUserIsSet(false);
    this.tempUser = false;
    setCupIsSet(false);
    this.cup = 0;
    setFreeIbIsSet(false);
    this.freeIb = 0;
    setRechargeIbIsSet(false);
    this.rechargeIb = 0;
    this.intDayLoopCounterList = null;
    setVipDiamondIsSet(false);
    this.vipDiamond = 0;
    this.shortDayLoopCounterList = null;
    this.byteDayLoopCounterList = null;
    setActiveValIsSet(false);
    this.activeVal = 0;
    setActiveLevelIsSet(false);
    this.activeLevel = 0;
    setTotalRechargeIsSet(false);
    this.totalRecharge = 0;
    setTagIdIsSet(false);
    this.tagId = 0;
    setAwordVersionIsSet(false);
    this.awordVersion = 0;
    setGuildIdIsSet(false);
    this.guildId = 0;
    this.guildName = null;
    setMailPageSizeIsSet(false);
    this.mailPageSize = 0;
    setNonPointIbIsSet(false);
    this.nonPointIb = 0;
    this.bindEmail = null;
    setFriendTypeIsSet(false);
    this.friendType = 0;
    setSkinColorIsSet(false);
    this.skinColor = 0;
    setStarLightLevelIsSet(false);
    this.starLightLevel = 0;
    setStarLightsIsSet(false);
    this.starLights = 0;
    this.gameServerId = null;
    this.gameServerName = null;
    this.putOnBadges = null;
    this.usedFashionIds = null;
    setLargesseIsSet(false);
    this.largesse = 0;
    setCharmIsSet(false);
    this.charm = 0;
    setHasSignIsSet(false);
    this.hasSign = false;
    this.guildDegree = null;
    this.activityUIStatus = null;
  }

  public byte getSex() {
    return this.sex;
  }

  public SCUserInfoMsg setSex(byte sex) {
    this.sex = sex;
    setSexIsSet(true);
    return this;
  }

  public void unsetSex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEX_ISSET_ID);
  }

  /** Returns true if field sex is set (has been assigned a value) and false otherwise */
  public boolean isSetSex() {
    return EncodingUtils.testBit(__isset_bitfield, __SEX_ISSET_ID);
  }

  public void setSexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEX_ISSET_ID, value);
  }

  public long getCharId() {
    return this.charId;
  }

  public SCUserInfoMsg setCharId(long charId) {
    this.charId = charId;
    setCharIdIsSet(true);
    return this;
  }

  public void unsetCharId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHARID_ISSET_ID);
  }

  /** Returns true if field charId is set (has been assigned a value) and false otherwise */
  public boolean isSetCharId() {
    return EncodingUtils.testBit(__isset_bitfield, __CHARID_ISSET_ID);
  }

  public void setCharIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHARID_ISSET_ID, value);
  }

  public long getAccountId() {
    return this.accountId;
  }

  public SCUserInfoMsg setAccountId(long accountId) {
    this.accountId = accountId;
    setAccountIdIsSet(true);
    return this;
  }

  public void unsetAccountId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCOUNTID_ISSET_ID);
  }

  /** Returns true if field accountId is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountId() {
    return EncodingUtils.testBit(__isset_bitfield, __ACCOUNTID_ISSET_ID);
  }

  public void setAccountIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCOUNTID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public SCUserInfoMsg setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getIb() {
    return this.ib;
  }

  public SCUserInfoMsg setIb(int ib) {
    this.ib = ib;
    setIbIsSet(true);
    return this;
  }

  public void unsetIb() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IB_ISSET_ID);
  }

  /** Returns true if field ib is set (has been assigned a value) and false otherwise */
  public boolean isSetIb() {
    return EncodingUtils.testBit(__isset_bitfield, __IB_ISSET_ID);
  }

  public void setIbIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IB_ISSET_ID, value);
  }

  public int getGold() {
    return this.gold;
  }

  public SCUserInfoMsg setGold(int gold) {
    this.gold = gold;
    setGoldIsSet(true);
    return this;
  }

  public void unsetGold() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GOLD_ISSET_ID);
  }

  /** Returns true if field gold is set (has been assigned a value) and false otherwise */
  public boolean isSetGold() {
    return EncodingUtils.testBit(__isset_bitfield, __GOLD_ISSET_ID);
  }

  public void setGoldIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GOLD_ISSET_ID, value);
  }

  public String getHeadIconId() {
    return this.headIconId;
  }

  public SCUserInfoMsg setHeadIconId(String headIconId) {
    this.headIconId = headIconId;
    return this;
  }

  public void unsetHeadIconId() {
    this.headIconId = null;
  }

  /** Returns true if field headIconId is set (has been assigned a value) and false otherwise */
  public boolean isSetHeadIconId() {
    return this.headIconId != null;
  }

  public void setHeadIconIdIsSet(boolean value) {
    if (!value) {
      this.headIconId = null;
    }
  }

  public byte getBodyAdjVal() {
    return this.bodyAdjVal;
  }

  public SCUserInfoMsg setBodyAdjVal(byte bodyAdjVal) {
    this.bodyAdjVal = bodyAdjVal;
    setBodyAdjValIsSet(true);
    return this;
  }

  public void unsetBodyAdjVal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BODYADJVAL_ISSET_ID);
  }

  /** Returns true if field bodyAdjVal is set (has been assigned a value) and false otherwise */
  public boolean isSetBodyAdjVal() {
    return EncodingUtils.testBit(__isset_bitfield, __BODYADJVAL_ISSET_ID);
  }

  public void setBodyAdjValIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BODYADJVAL_ISSET_ID, value);
  }

  public byte getModelId() {
    return this.modelId;
  }

  public SCUserInfoMsg setModelId(byte modelId) {
    this.modelId = modelId;
    setModelIdIsSet(true);
    return this;
  }

  public void unsetModelId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MODELID_ISSET_ID);
  }

  /** Returns true if field modelId is set (has been assigned a value) and false otherwise */
  public boolean isSetModelId() {
    return EncodingUtils.testBit(__isset_bitfield, __MODELID_ISSET_ID);
  }

  public void setModelIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MODELID_ISSET_ID, value);
  }

  public byte getVipLevel() {
    return this.vipLevel;
  }

  public SCUserInfoMsg setVipLevel(byte vipLevel) {
    this.vipLevel = vipLevel;
    setVipLevelIsSet(true);
    return this;
  }

  public void unsetVipLevel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIPLEVEL_ISSET_ID);
  }

  /** Returns true if field vipLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetVipLevel() {
    return EncodingUtils.testBit(__isset_bitfield, __VIPLEVEL_ISSET_ID);
  }

  public void setVipLevelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIPLEVEL_ISSET_ID, value);
  }

  public int getPoint() {
    return this.point;
  }

  public SCUserInfoMsg setPoint(int point) {
    this.point = point;
    setPointIsSet(true);
    return this;
  }

  public void unsetPoint() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POINT_ISSET_ID);
  }

  /** Returns true if field point is set (has been assigned a value) and false otherwise */
  public boolean isSetPoint() {
    return EncodingUtils.testBit(__isset_bitfield, __POINT_ISSET_ID);
  }

  public void setPointIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POINT_ISSET_ID, value);
  }

  public byte[] getFlags() {
    setFlags(org.apache.thrift.TBaseHelper.rightSize(flags));
    return flags == null ? null : flags.array();
  }

  public ByteBuffer bufferForFlags() {
    return flags;
  }

  public SCUserInfoMsg setFlags(byte[] flags) {
    setFlags(flags == null ? (ByteBuffer)null : ByteBuffer.wrap(flags));
    return this;
  }

  public SCUserInfoMsg setFlags(ByteBuffer flags) {
    this.flags = flags;
    return this;
  }

  public void unsetFlags() {
    this.flags = null;
  }

  /** Returns true if field flags is set (has been assigned a value) and false otherwise */
  public boolean isSetFlags() {
    return this.flags != null;
  }

  public void setFlagsIsSet(boolean value) {
    if (!value) {
      this.flags = null;
    }
  }

  /**
   * 
   * @see com.ling9527.music.common.msg.auto.Constellation
   */
  public com.ling9527.music.common.msg.auto.Constellation getConstellation() {
    return this.constellation;
  }

  /**
   * 
   * @see com.ling9527.music.common.msg.auto.Constellation
   */
  public SCUserInfoMsg setConstellation(com.ling9527.music.common.msg.auto.Constellation constellation) {
    this.constellation = constellation;
    return this;
  }

  public void unsetConstellation() {
    this.constellation = null;
  }

  /** Returns true if field constellation is set (has been assigned a value) and false otherwise */
  public boolean isSetConstellation() {
    return this.constellation != null;
  }

  public void setConstellationIsSet(boolean value) {
    if (!value) {
      this.constellation = null;
    }
  }

  /**
   * 
   * @see com.ling9527.music.common.msg.auto.LuckDay
   */
  public com.ling9527.music.common.msg.auto.LuckDay getLuckDay() {
    return this.luckDay;
  }

  /**
   * 
   * @see com.ling9527.music.common.msg.auto.LuckDay
   */
  public SCUserInfoMsg setLuckDay(com.ling9527.music.common.msg.auto.LuckDay luckDay) {
    this.luckDay = luckDay;
    return this;
  }

  public void unsetLuckDay() {
    this.luckDay = null;
  }

  /** Returns true if field luckDay is set (has been assigned a value) and false otherwise */
  public boolean isSetLuckDay() {
    return this.luckDay != null;
  }

  public void setLuckDayIsSet(boolean value) {
    if (!value) {
      this.luckDay = null;
    }
  }

  public int getByteCounterListSize() {
    return (this.byteCounterList == null) ? 0 : this.byteCounterList.size();
  }

  public java.util.Iterator<Byte> getByteCounterListIterator() {
    return (this.byteCounterList == null) ? null : this.byteCounterList.iterator();
  }

  public void addToByteCounterList(byte elem) {
    if (this.byteCounterList == null) {
      this.byteCounterList = new ArrayList<Byte>();
    }
    this.byteCounterList.add(elem);
  }

  public List<Byte> getByteCounterList() {
    return this.byteCounterList;
  }

  public SCUserInfoMsg setByteCounterList(List<Byte> byteCounterList) {
    this.byteCounterList = byteCounterList;
    return this;
  }

  public void unsetByteCounterList() {
    this.byteCounterList = null;
  }

  /** Returns true if field byteCounterList is set (has been assigned a value) and false otherwise */
  public boolean isSetByteCounterList() {
    return this.byteCounterList != null;
  }

  public void setByteCounterListIsSet(boolean value) {
    if (!value) {
      this.byteCounterList = null;
    }
  }

  public int getShortCounterListSize() {
    return (this.shortCounterList == null) ? 0 : this.shortCounterList.size();
  }

  public java.util.Iterator<Short> getShortCounterListIterator() {
    return (this.shortCounterList == null) ? null : this.shortCounterList.iterator();
  }

  public void addToShortCounterList(short elem) {
    if (this.shortCounterList == null) {
      this.shortCounterList = new ArrayList<Short>();
    }
    this.shortCounterList.add(elem);
  }

  public List<Short> getShortCounterList() {
    return this.shortCounterList;
  }

  public SCUserInfoMsg setShortCounterList(List<Short> shortCounterList) {
    this.shortCounterList = shortCounterList;
    return this;
  }

  public void unsetShortCounterList() {
    this.shortCounterList = null;
  }

  /** Returns true if field shortCounterList is set (has been assigned a value) and false otherwise */
  public boolean isSetShortCounterList() {
    return this.shortCounterList != null;
  }

  public void setShortCounterListIsSet(boolean value) {
    if (!value) {
      this.shortCounterList = null;
    }
  }

  public int getIntCounterListSize() {
    return (this.intCounterList == null) ? 0 : this.intCounterList.size();
  }

  public java.util.Iterator<Integer> getIntCounterListIterator() {
    return (this.intCounterList == null) ? null : this.intCounterList.iterator();
  }

  public void addToIntCounterList(int elem) {
    if (this.intCounterList == null) {
      this.intCounterList = new ArrayList<Integer>();
    }
    this.intCounterList.add(elem);
  }

  public List<Integer> getIntCounterList() {
    return this.intCounterList;
  }

  public SCUserInfoMsg setIntCounterList(List<Integer> intCounterList) {
    this.intCounterList = intCounterList;
    return this;
  }

  public void unsetIntCounterList() {
    this.intCounterList = null;
  }

  /** Returns true if field intCounterList is set (has been assigned a value) and false otherwise */
  public boolean isSetIntCounterList() {
    return this.intCounterList != null;
  }

  public void setIntCounterListIsSet(boolean value) {
    if (!value) {
      this.intCounterList = null;
    }
  }

  public short getLevel() {
    return this.level;
  }

  public SCUserInfoMsg setLevel(short level) {
    this.level = level;
    setLevelIsSet(true);
    return this;
  }

  public void unsetLevel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEVEL_ISSET_ID);
  }

  /** Returns true if field level is set (has been assigned a value) and false otherwise */
  public boolean isSetLevel() {
    return EncodingUtils.testBit(__isset_bitfield, __LEVEL_ISSET_ID);
  }

  public void setLevelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEVEL_ISSET_ID, value);
  }

  public int getExp() {
    return this.exp;
  }

  public SCUserInfoMsg setExp(int exp) {
    this.exp = exp;
    setExpIsSet(true);
    return this;
  }

  public void unsetExp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXP_ISSET_ID);
  }

  /** Returns true if field exp is set (has been assigned a value) and false otherwise */
  public boolean isSetExp() {
    return EncodingUtils.testBit(__isset_bitfield, __EXP_ISSET_ID);
  }

  public void setExpIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXP_ISSET_ID, value);
  }

  public byte getStature() {
    return this.stature;
  }

  public SCUserInfoMsg setStature(byte stature) {
    this.stature = stature;
    setStatureIsSet(true);
    return this;
  }

  public void unsetStature() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATURE_ISSET_ID);
  }

  /** Returns true if field stature is set (has been assigned a value) and false otherwise */
  public boolean isSetStature() {
    return EncodingUtils.testBit(__isset_bitfield, __STATURE_ISSET_ID);
  }

  public void setStatureIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATURE_ISSET_ID, value);
  }

  public String getCookie() {
    return this.cookie;
  }

  public SCUserInfoMsg setCookie(String cookie) {
    this.cookie = cookie;
    return this;
  }

  public void unsetCookie() {
    this.cookie = null;
  }

  /** Returns true if field cookie is set (has been assigned a value) and false otherwise */
  public boolean isSetCookie() {
    return this.cookie != null;
  }

  public void setCookieIsSet(boolean value) {
    if (!value) {
      this.cookie = null;
    }
  }

  public short getPopularityLevel() {
    return this.popularityLevel;
  }

  public SCUserInfoMsg setPopularityLevel(short popularityLevel) {
    this.popularityLevel = popularityLevel;
    setPopularityLevelIsSet(true);
    return this;
  }

  public void unsetPopularityLevel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POPULARITYLEVEL_ISSET_ID);
  }

  /** Returns true if field popularityLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetPopularityLevel() {
    return EncodingUtils.testBit(__isset_bitfield, __POPULARITYLEVEL_ISSET_ID);
  }

  public void setPopularityLevelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POPULARITYLEVEL_ISSET_ID, value);
  }

  public long getPopularityTotal() {
    return this.popularityTotal;
  }

  public SCUserInfoMsg setPopularityTotal(long popularityTotal) {
    this.popularityTotal = popularityTotal;
    setPopularityTotalIsSet(true);
    return this;
  }

  public void unsetPopularityTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POPULARITYTOTAL_ISSET_ID);
  }

  /** Returns true if field popularityTotal is set (has been assigned a value) and false otherwise */
  public boolean isSetPopularityTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __POPULARITYTOTAL_ISSET_ID);
  }

  public void setPopularityTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POPULARITYTOTAL_ISSET_ID, value);
  }

  public boolean isNewClientVersion() {
    return this.newClientVersion;
  }

  public SCUserInfoMsg setNewClientVersion(boolean newClientVersion) {
    this.newClientVersion = newClientVersion;
    setNewClientVersionIsSet(true);
    return this;
  }

  public void unsetNewClientVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEWCLIENTVERSION_ISSET_ID);
  }

  /** Returns true if field newClientVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetNewClientVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __NEWCLIENTVERSION_ISSET_ID);
  }

  public void setNewClientVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEWCLIENTVERSION_ISSET_ID, value);
  }

  public boolean isTempUser() {
    return this.tempUser;
  }

  public SCUserInfoMsg setTempUser(boolean tempUser) {
    this.tempUser = tempUser;
    setTempUserIsSet(true);
    return this;
  }

  public void unsetTempUser() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TEMPUSER_ISSET_ID);
  }

  /** Returns true if field tempUser is set (has been assigned a value) and false otherwise */
  public boolean isSetTempUser() {
    return EncodingUtils.testBit(__isset_bitfield, __TEMPUSER_ISSET_ID);
  }

  public void setTempUserIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TEMPUSER_ISSET_ID, value);
  }

  public int getCup() {
    return this.cup;
  }

  public SCUserInfoMsg setCup(int cup) {
    this.cup = cup;
    setCupIsSet(true);
    return this;
  }

  public void unsetCup() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CUP_ISSET_ID);
  }

  /** Returns true if field cup is set (has been assigned a value) and false otherwise */
  public boolean isSetCup() {
    return EncodingUtils.testBit(__isset_bitfield, __CUP_ISSET_ID);
  }

  public void setCupIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CUP_ISSET_ID, value);
  }

  public int getFreeIb() {
    return this.freeIb;
  }

  public SCUserInfoMsg setFreeIb(int freeIb) {
    this.freeIb = freeIb;
    setFreeIbIsSet(true);
    return this;
  }

  public void unsetFreeIb() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FREEIB_ISSET_ID);
  }

  /** Returns true if field freeIb is set (has been assigned a value) and false otherwise */
  public boolean isSetFreeIb() {
    return EncodingUtils.testBit(__isset_bitfield, __FREEIB_ISSET_ID);
  }

  public void setFreeIbIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FREEIB_ISSET_ID, value);
  }

  public int getRechargeIb() {
    return this.rechargeIb;
  }

  public SCUserInfoMsg setRechargeIb(int rechargeIb) {
    this.rechargeIb = rechargeIb;
    setRechargeIbIsSet(true);
    return this;
  }

  public void unsetRechargeIb() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECHARGEIB_ISSET_ID);
  }

  /** Returns true if field rechargeIb is set (has been assigned a value) and false otherwise */
  public boolean isSetRechargeIb() {
    return EncodingUtils.testBit(__isset_bitfield, __RECHARGEIB_ISSET_ID);
  }

  public void setRechargeIbIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECHARGEIB_ISSET_ID, value);
  }

  public int getIntDayLoopCounterListSize() {
    return (this.intDayLoopCounterList == null) ? 0 : this.intDayLoopCounterList.size();
  }

  public java.util.Iterator<Integer> getIntDayLoopCounterListIterator() {
    return (this.intDayLoopCounterList == null) ? null : this.intDayLoopCounterList.iterator();
  }

  public void addToIntDayLoopCounterList(int elem) {
    if (this.intDayLoopCounterList == null) {
      this.intDayLoopCounterList = new ArrayList<Integer>();
    }
    this.intDayLoopCounterList.add(elem);
  }

  public List<Integer> getIntDayLoopCounterList() {
    return this.intDayLoopCounterList;
  }

  public SCUserInfoMsg setIntDayLoopCounterList(List<Integer> intDayLoopCounterList) {
    this.intDayLoopCounterList = intDayLoopCounterList;
    return this;
  }

  public void unsetIntDayLoopCounterList() {
    this.intDayLoopCounterList = null;
  }

  /** Returns true if field intDayLoopCounterList is set (has been assigned a value) and false otherwise */
  public boolean isSetIntDayLoopCounterList() {
    return this.intDayLoopCounterList != null;
  }

  public void setIntDayLoopCounterListIsSet(boolean value) {
    if (!value) {
      this.intDayLoopCounterList = null;
    }
  }

  public int getVipDiamond() {
    return this.vipDiamond;
  }

  public SCUserInfoMsg setVipDiamond(int vipDiamond) {
    this.vipDiamond = vipDiamond;
    setVipDiamondIsSet(true);
    return this;
  }

  public void unsetVipDiamond() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIPDIAMOND_ISSET_ID);
  }

  /** Returns true if field vipDiamond is set (has been assigned a value) and false otherwise */
  public boolean isSetVipDiamond() {
    return EncodingUtils.testBit(__isset_bitfield, __VIPDIAMOND_ISSET_ID);
  }

  public void setVipDiamondIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIPDIAMOND_ISSET_ID, value);
  }

  public int getShortDayLoopCounterListSize() {
    return (this.shortDayLoopCounterList == null) ? 0 : this.shortDayLoopCounterList.size();
  }

  public java.util.Iterator<Short> getShortDayLoopCounterListIterator() {
    return (this.shortDayLoopCounterList == null) ? null : this.shortDayLoopCounterList.iterator();
  }

  public void addToShortDayLoopCounterList(short elem) {
    if (this.shortDayLoopCounterList == null) {
      this.shortDayLoopCounterList = new ArrayList<Short>();
    }
    this.shortDayLoopCounterList.add(elem);
  }

  public List<Short> getShortDayLoopCounterList() {
    return this.shortDayLoopCounterList;
  }

  public SCUserInfoMsg setShortDayLoopCounterList(List<Short> shortDayLoopCounterList) {
    this.shortDayLoopCounterList = shortDayLoopCounterList;
    return this;
  }

  public void unsetShortDayLoopCounterList() {
    this.shortDayLoopCounterList = null;
  }

  /** Returns true if field shortDayLoopCounterList is set (has been assigned a value) and false otherwise */
  public boolean isSetShortDayLoopCounterList() {
    return this.shortDayLoopCounterList != null;
  }

  public void setShortDayLoopCounterListIsSet(boolean value) {
    if (!value) {
      this.shortDayLoopCounterList = null;
    }
  }

  public int getByteDayLoopCounterListSize() {
    return (this.byteDayLoopCounterList == null) ? 0 : this.byteDayLoopCounterList.size();
  }

  public java.util.Iterator<Byte> getByteDayLoopCounterListIterator() {
    return (this.byteDayLoopCounterList == null) ? null : this.byteDayLoopCounterList.iterator();
  }

  public void addToByteDayLoopCounterList(byte elem) {
    if (this.byteDayLoopCounterList == null) {
      this.byteDayLoopCounterList = new ArrayList<Byte>();
    }
    this.byteDayLoopCounterList.add(elem);
  }

  public List<Byte> getByteDayLoopCounterList() {
    return this.byteDayLoopCounterList;
  }

  public SCUserInfoMsg setByteDayLoopCounterList(List<Byte> byteDayLoopCounterList) {
    this.byteDayLoopCounterList = byteDayLoopCounterList;
    return this;
  }

  public void unsetByteDayLoopCounterList() {
    this.byteDayLoopCounterList = null;
  }

  /** Returns true if field byteDayLoopCounterList is set (has been assigned a value) and false otherwise */
  public boolean isSetByteDayLoopCounterList() {
    return this.byteDayLoopCounterList != null;
  }

  public void setByteDayLoopCounterListIsSet(boolean value) {
    if (!value) {
      this.byteDayLoopCounterList = null;
    }
  }

  public int getActiveVal() {
    return this.activeVal;
  }

  public SCUserInfoMsg setActiveVal(int activeVal) {
    this.activeVal = activeVal;
    setActiveValIsSet(true);
    return this;
  }

  public void unsetActiveVal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIVEVAL_ISSET_ID);
  }

  /** Returns true if field activeVal is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveVal() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTIVEVAL_ISSET_ID);
  }

  public void setActiveValIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIVEVAL_ISSET_ID, value);
  }

  public byte getActiveLevel() {
    return this.activeLevel;
  }

  public SCUserInfoMsg setActiveLevel(byte activeLevel) {
    this.activeLevel = activeLevel;
    setActiveLevelIsSet(true);
    return this;
  }

  public void unsetActiveLevel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIVELEVEL_ISSET_ID);
  }

  /** Returns true if field activeLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveLevel() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTIVELEVEL_ISSET_ID);
  }

  public void setActiveLevelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIVELEVEL_ISSET_ID, value);
  }

  public int getTotalRecharge() {
    return this.totalRecharge;
  }

  public SCUserInfoMsg setTotalRecharge(int totalRecharge) {
    this.totalRecharge = totalRecharge;
    setTotalRechargeIsSet(true);
    return this;
  }

  public void unsetTotalRecharge() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALRECHARGE_ISSET_ID);
  }

  /** Returns true if field totalRecharge is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalRecharge() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALRECHARGE_ISSET_ID);
  }

  public void setTotalRechargeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALRECHARGE_ISSET_ID, value);
  }

  public short getTagId() {
    return this.tagId;
  }

  public SCUserInfoMsg setTagId(short tagId) {
    this.tagId = tagId;
    setTagIdIsSet(true);
    return this;
  }

  public void unsetTagId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TAGID_ISSET_ID);
  }

  /** Returns true if field tagId is set (has been assigned a value) and false otherwise */
  public boolean isSetTagId() {
    return EncodingUtils.testBit(__isset_bitfield, __TAGID_ISSET_ID);
  }

  public void setTagIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TAGID_ISSET_ID, value);
  }

  public int getAwordVersion() {
    return this.awordVersion;
  }

  public SCUserInfoMsg setAwordVersion(int awordVersion) {
    this.awordVersion = awordVersion;
    setAwordVersionIsSet(true);
    return this;
  }

  public void unsetAwordVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AWORDVERSION_ISSET_ID);
  }

  /** Returns true if field awordVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetAwordVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __AWORDVERSION_ISSET_ID);
  }

  public void setAwordVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AWORDVERSION_ISSET_ID, value);
  }

  public long getGuildId() {
    return this.guildId;
  }

  public SCUserInfoMsg setGuildId(long guildId) {
    this.guildId = guildId;
    setGuildIdIsSet(true);
    return this;
  }

  public void unsetGuildId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GUILDID_ISSET_ID);
  }

  /** Returns true if field guildId is set (has been assigned a value) and false otherwise */
  public boolean isSetGuildId() {
    return EncodingUtils.testBit(__isset_bitfield, __GUILDID_ISSET_ID);
  }

  public void setGuildIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GUILDID_ISSET_ID, value);
  }

  public String getGuildName() {
    return this.guildName;
  }

  public SCUserInfoMsg setGuildName(String guildName) {
    this.guildName = guildName;
    return this;
  }

  public void unsetGuildName() {
    this.guildName = null;
  }

  /** Returns true if field guildName is set (has been assigned a value) and false otherwise */
  public boolean isSetGuildName() {
    return this.guildName != null;
  }

  public void setGuildNameIsSet(boolean value) {
    if (!value) {
      this.guildName = null;
    }
  }

  public int getMailPageSize() {
    return this.mailPageSize;
  }

  public SCUserInfoMsg setMailPageSize(int mailPageSize) {
    this.mailPageSize = mailPageSize;
    setMailPageSizeIsSet(true);
    return this;
  }

  public void unsetMailPageSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAILPAGESIZE_ISSET_ID);
  }

  /** Returns true if field mailPageSize is set (has been assigned a value) and false otherwise */
  public boolean isSetMailPageSize() {
    return EncodingUtils.testBit(__isset_bitfield, __MAILPAGESIZE_ISSET_ID);
  }

  public void setMailPageSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAILPAGESIZE_ISSET_ID, value);
  }

  public int getNonPointIb() {
    return this.nonPointIb;
  }

  public SCUserInfoMsg setNonPointIb(int nonPointIb) {
    this.nonPointIb = nonPointIb;
    setNonPointIbIsSet(true);
    return this;
  }

  public void unsetNonPointIb() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NONPOINTIB_ISSET_ID);
  }

  /** Returns true if field nonPointIb is set (has been assigned a value) and false otherwise */
  public boolean isSetNonPointIb() {
    return EncodingUtils.testBit(__isset_bitfield, __NONPOINTIB_ISSET_ID);
  }

  public void setNonPointIbIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NONPOINTIB_ISSET_ID, value);
  }

  public String getBindEmail() {
    return this.bindEmail;
  }

  public SCUserInfoMsg setBindEmail(String bindEmail) {
    this.bindEmail = bindEmail;
    return this;
  }

  public void unsetBindEmail() {
    this.bindEmail = null;
  }

  /** Returns true if field bindEmail is set (has been assigned a value) and false otherwise */
  public boolean isSetBindEmail() {
    return this.bindEmail != null;
  }

  public void setBindEmailIsSet(boolean value) {
    if (!value) {
      this.bindEmail = null;
    }
  }

  public int getFriendType() {
    return this.friendType;
  }

  public SCUserInfoMsg setFriendType(int friendType) {
    this.friendType = friendType;
    setFriendTypeIsSet(true);
    return this;
  }

  public void unsetFriendType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FRIENDTYPE_ISSET_ID);
  }

  /** Returns true if field friendType is set (has been assigned a value) and false otherwise */
  public boolean isSetFriendType() {
    return EncodingUtils.testBit(__isset_bitfield, __FRIENDTYPE_ISSET_ID);
  }

  public void setFriendTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FRIENDTYPE_ISSET_ID, value);
  }

  public int getSkinColor() {
    return this.skinColor;
  }

  public SCUserInfoMsg setSkinColor(int skinColor) {
    this.skinColor = skinColor;
    setSkinColorIsSet(true);
    return this;
  }

  public void unsetSkinColor() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SKINCOLOR_ISSET_ID);
  }

  /** Returns true if field skinColor is set (has been assigned a value) and false otherwise */
  public boolean isSetSkinColor() {
    return EncodingUtils.testBit(__isset_bitfield, __SKINCOLOR_ISSET_ID);
  }

  public void setSkinColorIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SKINCOLOR_ISSET_ID, value);
  }

  public short getStarLightLevel() {
    return this.starLightLevel;
  }

  public SCUserInfoMsg setStarLightLevel(short starLightLevel) {
    this.starLightLevel = starLightLevel;
    setStarLightLevelIsSet(true);
    return this;
  }

  public void unsetStarLightLevel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARLIGHTLEVEL_ISSET_ID);
  }

  /** Returns true if field starLightLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetStarLightLevel() {
    return EncodingUtils.testBit(__isset_bitfield, __STARLIGHTLEVEL_ISSET_ID);
  }

  public void setStarLightLevelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARLIGHTLEVEL_ISSET_ID, value);
  }

  public int getStarLights() {
    return this.starLights;
  }

  public SCUserInfoMsg setStarLights(int starLights) {
    this.starLights = starLights;
    setStarLightsIsSet(true);
    return this;
  }

  public void unsetStarLights() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARLIGHTS_ISSET_ID);
  }

  /** Returns true if field starLights is set (has been assigned a value) and false otherwise */
  public boolean isSetStarLights() {
    return EncodingUtils.testBit(__isset_bitfield, __STARLIGHTS_ISSET_ID);
  }

  public void setStarLightsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARLIGHTS_ISSET_ID, value);
  }

  /**
   * 玩家当前游戏服id
   */
  public String getGameServerId() {
    return this.gameServerId;
  }

  /**
   * 玩家当前游戏服id
   */
  public SCUserInfoMsg setGameServerId(String gameServerId) {
    this.gameServerId = gameServerId;
    return this;
  }

  public void unsetGameServerId() {
    this.gameServerId = null;
  }

  /** Returns true if field gameServerId is set (has been assigned a value) and false otherwise */
  public boolean isSetGameServerId() {
    return this.gameServerId != null;
  }

  public void setGameServerIdIsSet(boolean value) {
    if (!value) {
      this.gameServerId = null;
    }
  }

  /**
   * 玩家当前游戏服名
   */
  public String getGameServerName() {
    return this.gameServerName;
  }

  /**
   * 玩家当前游戏服名
   */
  public SCUserInfoMsg setGameServerName(String gameServerName) {
    this.gameServerName = gameServerName;
    return this;
  }

  public void unsetGameServerName() {
    this.gameServerName = null;
  }

  /** Returns true if field gameServerName is set (has been assigned a value) and false otherwise */
  public boolean isSetGameServerName() {
    return this.gameServerName != null;
  }

  public void setGameServerNameIsSet(boolean value) {
    if (!value) {
      this.gameServerName = null;
    }
  }

  public int getPutOnBadgesSize() {
    return (this.putOnBadges == null) ? 0 : this.putOnBadges.size();
  }

  public java.util.Iterator<com.ling9527.music.common.msg.auto.BadgeInfo> getPutOnBadgesIterator() {
    return (this.putOnBadges == null) ? null : this.putOnBadges.iterator();
  }

  public void addToPutOnBadges(com.ling9527.music.common.msg.auto.BadgeInfo elem) {
    if (this.putOnBadges == null) {
      this.putOnBadges = new ArrayList<com.ling9527.music.common.msg.auto.BadgeInfo>();
    }
    this.putOnBadges.add(elem);
  }

  /**
   * 佩戴的徽章
   */
  public List<com.ling9527.music.common.msg.auto.BadgeInfo> getPutOnBadges() {
    return this.putOnBadges;
  }

  /**
   * 佩戴的徽章
   */
  public SCUserInfoMsg setPutOnBadges(List<com.ling9527.music.common.msg.auto.BadgeInfo> putOnBadges) {
    this.putOnBadges = putOnBadges;
    return this;
  }

  public void unsetPutOnBadges() {
    this.putOnBadges = null;
  }

  /** Returns true if field putOnBadges is set (has been assigned a value) and false otherwise */
  public boolean isSetPutOnBadges() {
    return this.putOnBadges != null;
  }

  public void setPutOnBadgesIsSet(boolean value) {
    if (!value) {
      this.putOnBadges = null;
    }
  }

  public int getUsedFashionIdsSize() {
    return (this.usedFashionIds == null) ? 0 : this.usedFashionIds.size();
  }

  public void putToUsedFashionIds(byte key, int val) {
    if (this.usedFashionIds == null) {
      this.usedFashionIds = new HashMap<Byte,Integer>();
    }
    this.usedFashionIds.put(key, val);
  }

  /**
   * 使用中的时尚id, key:style val:id
   */
  public Map<Byte,Integer> getUsedFashionIds() {
    return this.usedFashionIds;
  }

  /**
   * 使用中的时尚id, key:style val:id
   */
  public SCUserInfoMsg setUsedFashionIds(Map<Byte,Integer> usedFashionIds) {
    this.usedFashionIds = usedFashionIds;
    return this;
  }

  public void unsetUsedFashionIds() {
    this.usedFashionIds = null;
  }

  /** Returns true if field usedFashionIds is set (has been assigned a value) and false otherwise */
  public boolean isSetUsedFashionIds() {
    return this.usedFashionIds != null;
  }

  public void setUsedFashionIdsIsSet(boolean value) {
    if (!value) {
      this.usedFashionIds = null;
    }
  }

  /**
   * 财力值
   */
  public int getLargesse() {
    return this.largesse;
  }

  /**
   * 财力值
   */
  public SCUserInfoMsg setLargesse(int largesse) {
    this.largesse = largesse;
    setLargesseIsSet(true);
    return this;
  }

  public void unsetLargesse() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LARGESSE_ISSET_ID);
  }

  /** Returns true if field largesse is set (has been assigned a value) and false otherwise */
  public boolean isSetLargesse() {
    return EncodingUtils.testBit(__isset_bitfield, __LARGESSE_ISSET_ID);
  }

  public void setLargesseIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LARGESSE_ISSET_ID, value);
  }

  /**
   * 魅力值
   */
  public int getCharm() {
    return this.charm;
  }

  /**
   * 魅力值
   */
  public SCUserInfoMsg setCharm(int charm) {
    this.charm = charm;
    setCharmIsSet(true);
    return this;
  }

  public void unsetCharm() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHARM_ISSET_ID);
  }

  /** Returns true if field charm is set (has been assigned a value) and false otherwise */
  public boolean isSetCharm() {
    return EncodingUtils.testBit(__isset_bitfield, __CHARM_ISSET_ID);
  }

  public void setCharmIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHARM_ISSET_ID, value);
  }

  /**
   * 是否已经签到
   */
  public boolean isHasSign() {
    return this.hasSign;
  }

  /**
   * 是否已经签到
   */
  public SCUserInfoMsg setHasSign(boolean hasSign) {
    this.hasSign = hasSign;
    setHasSignIsSet(true);
    return this;
  }

  public void unsetHasSign() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HASSIGN_ISSET_ID);
  }

  /** Returns true if field hasSign is set (has been assigned a value) and false otherwise */
  public boolean isSetHasSign() {
    return EncodingUtils.testBit(__isset_bitfield, __HASSIGN_ISSET_ID);
  }

  public void setHasSignIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HASSIGN_ISSET_ID, value);
  }

  /**
   * 舞团职位
   * 
   * @see com.ling9527.music.common.msg.auto.GuildDegree
   */
  public com.ling9527.music.common.msg.auto.GuildDegree getGuildDegree() {
    return this.guildDegree;
  }

  /**
   * 舞团职位
   * 
   * @see com.ling9527.music.common.msg.auto.GuildDegree
   */
  public SCUserInfoMsg setGuildDegree(com.ling9527.music.common.msg.auto.GuildDegree guildDegree) {
    this.guildDegree = guildDegree;
    return this;
  }

  public void unsetGuildDegree() {
    this.guildDegree = null;
  }

  /** Returns true if field guildDegree is set (has been assigned a value) and false otherwise */
  public boolean isSetGuildDegree() {
    return this.guildDegree != null;
  }

  public void setGuildDegreeIsSet(boolean value) {
    if (!value) {
      this.guildDegree = null;
    }
  }

  /**
   * 活动奖励状态
   * 
   * @see ActivityUIStatus
   */
  public ActivityUIStatus getActivityUIStatus() {
    return this.activityUIStatus;
  }

  /**
   * 活动奖励状态
   * 
   * @see ActivityUIStatus
   */
  public SCUserInfoMsg setActivityUIStatus(ActivityUIStatus activityUIStatus) {
    this.activityUIStatus = activityUIStatus;
    return this;
  }

  public void unsetActivityUIStatus() {
    this.activityUIStatus = null;
  }

  /** Returns true if field activityUIStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetActivityUIStatus() {
    return this.activityUIStatus != null;
  }

  public void setActivityUIStatusIsSet(boolean value) {
    if (!value) {
      this.activityUIStatus = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SEX:
      if (value == null) {
        unsetSex();
      } else {
        setSex((Byte)value);
      }
      break;

    case CHAR_ID:
      if (value == null) {
        unsetCharId();
      } else {
        setCharId((Long)value);
      }
      break;

    case ACCOUNT_ID:
      if (value == null) {
        unsetAccountId();
      } else {
        setAccountId((Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case IB:
      if (value == null) {
        unsetIb();
      } else {
        setIb((Integer)value);
      }
      break;

    case GOLD:
      if (value == null) {
        unsetGold();
      } else {
        setGold((Integer)value);
      }
      break;

    case HEAD_ICON_ID:
      if (value == null) {
        unsetHeadIconId();
      } else {
        setHeadIconId((String)value);
      }
      break;

    case BODY_ADJ_VAL:
      if (value == null) {
        unsetBodyAdjVal();
      } else {
        setBodyAdjVal((Byte)value);
      }
      break;

    case MODEL_ID:
      if (value == null) {
        unsetModelId();
      } else {
        setModelId((Byte)value);
      }
      break;

    case VIP_LEVEL:
      if (value == null) {
        unsetVipLevel();
      } else {
        setVipLevel((Byte)value);
      }
      break;

    case POINT:
      if (value == null) {
        unsetPoint();
      } else {
        setPoint((Integer)value);
      }
      break;

    case FLAGS:
      if (value == null) {
        unsetFlags();
      } else {
        setFlags((ByteBuffer)value);
      }
      break;

    case CONSTELLATION:
      if (value == null) {
        unsetConstellation();
      } else {
        setConstellation((com.ling9527.music.common.msg.auto.Constellation)value);
      }
      break;

    case LUCK_DAY:
      if (value == null) {
        unsetLuckDay();
      } else {
        setLuckDay((com.ling9527.music.common.msg.auto.LuckDay)value);
      }
      break;

    case BYTE_COUNTER_LIST:
      if (value == null) {
        unsetByteCounterList();
      } else {
        setByteCounterList((List<Byte>)value);
      }
      break;

    case SHORT_COUNTER_LIST:
      if (value == null) {
        unsetShortCounterList();
      } else {
        setShortCounterList((List<Short>)value);
      }
      break;

    case INT_COUNTER_LIST:
      if (value == null) {
        unsetIntCounterList();
      } else {
        setIntCounterList((List<Integer>)value);
      }
      break;

    case LEVEL:
      if (value == null) {
        unsetLevel();
      } else {
        setLevel((Short)value);
      }
      break;

    case EXP:
      if (value == null) {
        unsetExp();
      } else {
        setExp((Integer)value);
      }
      break;

    case STATURE:
      if (value == null) {
        unsetStature();
      } else {
        setStature((Byte)value);
      }
      break;

    case COOKIE:
      if (value == null) {
        unsetCookie();
      } else {
        setCookie((String)value);
      }
      break;

    case POPULARITY_LEVEL:
      if (value == null) {
        unsetPopularityLevel();
      } else {
        setPopularityLevel((Short)value);
      }
      break;

    case POPULARITY_TOTAL:
      if (value == null) {
        unsetPopularityTotal();
      } else {
        setPopularityTotal((Long)value);
      }
      break;

    case NEW_CLIENT_VERSION:
      if (value == null) {
        unsetNewClientVersion();
      } else {
        setNewClientVersion((Boolean)value);
      }
      break;

    case TEMP_USER:
      if (value == null) {
        unsetTempUser();
      } else {
        setTempUser((Boolean)value);
      }
      break;

    case CUP:
      if (value == null) {
        unsetCup();
      } else {
        setCup((Integer)value);
      }
      break;

    case FREE_IB:
      if (value == null) {
        unsetFreeIb();
      } else {
        setFreeIb((Integer)value);
      }
      break;

    case RECHARGE_IB:
      if (value == null) {
        unsetRechargeIb();
      } else {
        setRechargeIb((Integer)value);
      }
      break;

    case INT_DAY_LOOP_COUNTER_LIST:
      if (value == null) {
        unsetIntDayLoopCounterList();
      } else {
        setIntDayLoopCounterList((List<Integer>)value);
      }
      break;

    case VIP_DIAMOND:
      if (value == null) {
        unsetVipDiamond();
      } else {
        setVipDiamond((Integer)value);
      }
      break;

    case SHORT_DAY_LOOP_COUNTER_LIST:
      if (value == null) {
        unsetShortDayLoopCounterList();
      } else {
        setShortDayLoopCounterList((List<Short>)value);
      }
      break;

    case BYTE_DAY_LOOP_COUNTER_LIST:
      if (value == null) {
        unsetByteDayLoopCounterList();
      } else {
        setByteDayLoopCounterList((List<Byte>)value);
      }
      break;

    case ACTIVE_VAL:
      if (value == null) {
        unsetActiveVal();
      } else {
        setActiveVal((Integer)value);
      }
      break;

    case ACTIVE_LEVEL:
      if (value == null) {
        unsetActiveLevel();
      } else {
        setActiveLevel((Byte)value);
      }
      break;

    case TOTAL_RECHARGE:
      if (value == null) {
        unsetTotalRecharge();
      } else {
        setTotalRecharge((Integer)value);
      }
      break;

    case TAG_ID:
      if (value == null) {
        unsetTagId();
      } else {
        setTagId((Short)value);
      }
      break;

    case AWORD_VERSION:
      if (value == null) {
        unsetAwordVersion();
      } else {
        setAwordVersion((Integer)value);
      }
      break;

    case GUILD_ID:
      if (value == null) {
        unsetGuildId();
      } else {
        setGuildId((Long)value);
      }
      break;

    case GUILD_NAME:
      if (value == null) {
        unsetGuildName();
      } else {
        setGuildName((String)value);
      }
      break;

    case MAIL_PAGE_SIZE:
      if (value == null) {
        unsetMailPageSize();
      } else {
        setMailPageSize((Integer)value);
      }
      break;

    case NON_POINT_IB:
      if (value == null) {
        unsetNonPointIb();
      } else {
        setNonPointIb((Integer)value);
      }
      break;

    case BIND_EMAIL:
      if (value == null) {
        unsetBindEmail();
      } else {
        setBindEmail((String)value);
      }
      break;

    case FRIEND_TYPE:
      if (value == null) {
        unsetFriendType();
      } else {
        setFriendType((Integer)value);
      }
      break;

    case SKIN_COLOR:
      if (value == null) {
        unsetSkinColor();
      } else {
        setSkinColor((Integer)value);
      }
      break;

    case STAR_LIGHT_LEVEL:
      if (value == null) {
        unsetStarLightLevel();
      } else {
        setStarLightLevel((Short)value);
      }
      break;

    case STAR_LIGHTS:
      if (value == null) {
        unsetStarLights();
      } else {
        setStarLights((Integer)value);
      }
      break;

    case GAME_SERVER_ID:
      if (value == null) {
        unsetGameServerId();
      } else {
        setGameServerId((String)value);
      }
      break;

    case GAME_SERVER_NAME:
      if (value == null) {
        unsetGameServerName();
      } else {
        setGameServerName((String)value);
      }
      break;

    case PUT_ON_BADGES:
      if (value == null) {
        unsetPutOnBadges();
      } else {
        setPutOnBadges((List<com.ling9527.music.common.msg.auto.BadgeInfo>)value);
      }
      break;

    case USED_FASHION_IDS:
      if (value == null) {
        unsetUsedFashionIds();
      } else {
        setUsedFashionIds((Map<Byte,Integer>)value);
      }
      break;

    case LARGESSE:
      if (value == null) {
        unsetLargesse();
      } else {
        setLargesse((Integer)value);
      }
      break;

    case CHARM:
      if (value == null) {
        unsetCharm();
      } else {
        setCharm((Integer)value);
      }
      break;

    case HAS_SIGN:
      if (value == null) {
        unsetHasSign();
      } else {
        setHasSign((Boolean)value);
      }
      break;

    case GUILD_DEGREE:
      if (value == null) {
        unsetGuildDegree();
      } else {
        setGuildDegree((com.ling9527.music.common.msg.auto.GuildDegree)value);
      }
      break;

    case ACTIVITY_UISTATUS:
      if (value == null) {
        unsetActivityUIStatus();
      } else {
        setActivityUIStatus((ActivityUIStatus)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SEX:
      return Byte.valueOf(getSex());

    case CHAR_ID:
      return Long.valueOf(getCharId());

    case ACCOUNT_ID:
      return Long.valueOf(getAccountId());

    case NAME:
      return getName();

    case IB:
      return Integer.valueOf(getIb());

    case GOLD:
      return Integer.valueOf(getGold());

    case HEAD_ICON_ID:
      return getHeadIconId();

    case BODY_ADJ_VAL:
      return Byte.valueOf(getBodyAdjVal());

    case MODEL_ID:
      return Byte.valueOf(getModelId());

    case VIP_LEVEL:
      return Byte.valueOf(getVipLevel());

    case POINT:
      return Integer.valueOf(getPoint());

    case FLAGS:
      return getFlags();

    case CONSTELLATION:
      return getConstellation();

    case LUCK_DAY:
      return getLuckDay();

    case BYTE_COUNTER_LIST:
      return getByteCounterList();

    case SHORT_COUNTER_LIST:
      return getShortCounterList();

    case INT_COUNTER_LIST:
      return getIntCounterList();

    case LEVEL:
      return Short.valueOf(getLevel());

    case EXP:
      return Integer.valueOf(getExp());

    case STATURE:
      return Byte.valueOf(getStature());

    case COOKIE:
      return getCookie();

    case POPULARITY_LEVEL:
      return Short.valueOf(getPopularityLevel());

    case POPULARITY_TOTAL:
      return Long.valueOf(getPopularityTotal());

    case NEW_CLIENT_VERSION:
      return Boolean.valueOf(isNewClientVersion());

    case TEMP_USER:
      return Boolean.valueOf(isTempUser());

    case CUP:
      return Integer.valueOf(getCup());

    case FREE_IB:
      return Integer.valueOf(getFreeIb());

    case RECHARGE_IB:
      return Integer.valueOf(getRechargeIb());

    case INT_DAY_LOOP_COUNTER_LIST:
      return getIntDayLoopCounterList();

    case VIP_DIAMOND:
      return Integer.valueOf(getVipDiamond());

    case SHORT_DAY_LOOP_COUNTER_LIST:
      return getShortDayLoopCounterList();

    case BYTE_DAY_LOOP_COUNTER_LIST:
      return getByteDayLoopCounterList();

    case ACTIVE_VAL:
      return Integer.valueOf(getActiveVal());

    case ACTIVE_LEVEL:
      return Byte.valueOf(getActiveLevel());

    case TOTAL_RECHARGE:
      return Integer.valueOf(getTotalRecharge());

    case TAG_ID:
      return Short.valueOf(getTagId());

    case AWORD_VERSION:
      return Integer.valueOf(getAwordVersion());

    case GUILD_ID:
      return Long.valueOf(getGuildId());

    case GUILD_NAME:
      return getGuildName();

    case MAIL_PAGE_SIZE:
      return Integer.valueOf(getMailPageSize());

    case NON_POINT_IB:
      return Integer.valueOf(getNonPointIb());

    case BIND_EMAIL:
      return getBindEmail();

    case FRIEND_TYPE:
      return Integer.valueOf(getFriendType());

    case SKIN_COLOR:
      return Integer.valueOf(getSkinColor());

    case STAR_LIGHT_LEVEL:
      return Short.valueOf(getStarLightLevel());

    case STAR_LIGHTS:
      return Integer.valueOf(getStarLights());

    case GAME_SERVER_ID:
      return getGameServerId();

    case GAME_SERVER_NAME:
      return getGameServerName();

    case PUT_ON_BADGES:
      return getPutOnBadges();

    case USED_FASHION_IDS:
      return getUsedFashionIds();

    case LARGESSE:
      return Integer.valueOf(getLargesse());

    case CHARM:
      return Integer.valueOf(getCharm());

    case HAS_SIGN:
      return Boolean.valueOf(isHasSign());

    case GUILD_DEGREE:
      return getGuildDegree();

    case ACTIVITY_UISTATUS:
      return getActivityUIStatus();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SEX:
      return isSetSex();
    case CHAR_ID:
      return isSetCharId();
    case ACCOUNT_ID:
      return isSetAccountId();
    case NAME:
      return isSetName();
    case IB:
      return isSetIb();
    case GOLD:
      return isSetGold();
    case HEAD_ICON_ID:
      return isSetHeadIconId();
    case BODY_ADJ_VAL:
      return isSetBodyAdjVal();
    case MODEL_ID:
      return isSetModelId();
    case VIP_LEVEL:
      return isSetVipLevel();
    case POINT:
      return isSetPoint();
    case FLAGS:
      return isSetFlags();
    case CONSTELLATION:
      return isSetConstellation();
    case LUCK_DAY:
      return isSetLuckDay();
    case BYTE_COUNTER_LIST:
      return isSetByteCounterList();
    case SHORT_COUNTER_LIST:
      return isSetShortCounterList();
    case INT_COUNTER_LIST:
      return isSetIntCounterList();
    case LEVEL:
      return isSetLevel();
    case EXP:
      return isSetExp();
    case STATURE:
      return isSetStature();
    case COOKIE:
      return isSetCookie();
    case POPULARITY_LEVEL:
      return isSetPopularityLevel();
    case POPULARITY_TOTAL:
      return isSetPopularityTotal();
    case NEW_CLIENT_VERSION:
      return isSetNewClientVersion();
    case TEMP_USER:
      return isSetTempUser();
    case CUP:
      return isSetCup();
    case FREE_IB:
      return isSetFreeIb();
    case RECHARGE_IB:
      return isSetRechargeIb();
    case INT_DAY_LOOP_COUNTER_LIST:
      return isSetIntDayLoopCounterList();
    case VIP_DIAMOND:
      return isSetVipDiamond();
    case SHORT_DAY_LOOP_COUNTER_LIST:
      return isSetShortDayLoopCounterList();
    case BYTE_DAY_LOOP_COUNTER_LIST:
      return isSetByteDayLoopCounterList();
    case ACTIVE_VAL:
      return isSetActiveVal();
    case ACTIVE_LEVEL:
      return isSetActiveLevel();
    case TOTAL_RECHARGE:
      return isSetTotalRecharge();
    case TAG_ID:
      return isSetTagId();
    case AWORD_VERSION:
      return isSetAwordVersion();
    case GUILD_ID:
      return isSetGuildId();
    case GUILD_NAME:
      return isSetGuildName();
    case MAIL_PAGE_SIZE:
      return isSetMailPageSize();
    case NON_POINT_IB:
      return isSetNonPointIb();
    case BIND_EMAIL:
      return isSetBindEmail();
    case FRIEND_TYPE:
      return isSetFriendType();
    case SKIN_COLOR:
      return isSetSkinColor();
    case STAR_LIGHT_LEVEL:
      return isSetStarLightLevel();
    case STAR_LIGHTS:
      return isSetStarLights();
    case GAME_SERVER_ID:
      return isSetGameServerId();
    case GAME_SERVER_NAME:
      return isSetGameServerName();
    case PUT_ON_BADGES:
      return isSetPutOnBadges();
    case USED_FASHION_IDS:
      return isSetUsedFashionIds();
    case LARGESSE:
      return isSetLargesse();
    case CHARM:
      return isSetCharm();
    case HAS_SIGN:
      return isSetHasSign();
    case GUILD_DEGREE:
      return isSetGuildDegree();
    case ACTIVITY_UISTATUS:
      return isSetActivityUIStatus();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCUserInfoMsg)
      return this.equals((SCUserInfoMsg)that);
    return false;
  }

  public boolean equals(SCUserInfoMsg that) {
    if (that == null)
      return false;

    boolean this_present_sex = true;
    boolean that_present_sex = true;
    if (this_present_sex || that_present_sex) {
      if (!(this_present_sex && that_present_sex))
        return false;
      if (this.sex != that.sex)
        return false;
    }

    boolean this_present_charId = true;
    boolean that_present_charId = true;
    if (this_present_charId || that_present_charId) {
      if (!(this_present_charId && that_present_charId))
        return false;
      if (this.charId != that.charId)
        return false;
    }

    boolean this_present_accountId = true;
    boolean that_present_accountId = true;
    if (this_present_accountId || that_present_accountId) {
      if (!(this_present_accountId && that_present_accountId))
        return false;
      if (this.accountId != that.accountId)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_ib = true;
    boolean that_present_ib = true;
    if (this_present_ib || that_present_ib) {
      if (!(this_present_ib && that_present_ib))
        return false;
      if (this.ib != that.ib)
        return false;
    }

    boolean this_present_gold = true;
    boolean that_present_gold = true;
    if (this_present_gold || that_present_gold) {
      if (!(this_present_gold && that_present_gold))
        return false;
      if (this.gold != that.gold)
        return false;
    }

    boolean this_present_headIconId = true && this.isSetHeadIconId();
    boolean that_present_headIconId = true && that.isSetHeadIconId();
    if (this_present_headIconId || that_present_headIconId) {
      if (!(this_present_headIconId && that_present_headIconId))
        return false;
      if (!this.headIconId.equals(that.headIconId))
        return false;
    }

    boolean this_present_bodyAdjVal = true;
    boolean that_present_bodyAdjVal = true;
    if (this_present_bodyAdjVal || that_present_bodyAdjVal) {
      if (!(this_present_bodyAdjVal && that_present_bodyAdjVal))
        return false;
      if (this.bodyAdjVal != that.bodyAdjVal)
        return false;
    }

    boolean this_present_modelId = true;
    boolean that_present_modelId = true;
    if (this_present_modelId || that_present_modelId) {
      if (!(this_present_modelId && that_present_modelId))
        return false;
      if (this.modelId != that.modelId)
        return false;
    }

    boolean this_present_vipLevel = true;
    boolean that_present_vipLevel = true;
    if (this_present_vipLevel || that_present_vipLevel) {
      if (!(this_present_vipLevel && that_present_vipLevel))
        return false;
      if (this.vipLevel != that.vipLevel)
        return false;
    }

    boolean this_present_point = true;
    boolean that_present_point = true;
    if (this_present_point || that_present_point) {
      if (!(this_present_point && that_present_point))
        return false;
      if (this.point != that.point)
        return false;
    }

    boolean this_present_flags = true && this.isSetFlags();
    boolean that_present_flags = true && that.isSetFlags();
    if (this_present_flags || that_present_flags) {
      if (!(this_present_flags && that_present_flags))
        return false;
      if (!this.flags.equals(that.flags))
        return false;
    }

    boolean this_present_constellation = true && this.isSetConstellation();
    boolean that_present_constellation = true && that.isSetConstellation();
    if (this_present_constellation || that_present_constellation) {
      if (!(this_present_constellation && that_present_constellation))
        return false;
      if (!this.constellation.equals(that.constellation))
        return false;
    }

    boolean this_present_luckDay = true && this.isSetLuckDay();
    boolean that_present_luckDay = true && that.isSetLuckDay();
    if (this_present_luckDay || that_present_luckDay) {
      if (!(this_present_luckDay && that_present_luckDay))
        return false;
      if (!this.luckDay.equals(that.luckDay))
        return false;
    }

    boolean this_present_byteCounterList = true && this.isSetByteCounterList();
    boolean that_present_byteCounterList = true && that.isSetByteCounterList();
    if (this_present_byteCounterList || that_present_byteCounterList) {
      if (!(this_present_byteCounterList && that_present_byteCounterList))
        return false;
      if (!this.byteCounterList.equals(that.byteCounterList))
        return false;
    }

    boolean this_present_shortCounterList = true && this.isSetShortCounterList();
    boolean that_present_shortCounterList = true && that.isSetShortCounterList();
    if (this_present_shortCounterList || that_present_shortCounterList) {
      if (!(this_present_shortCounterList && that_present_shortCounterList))
        return false;
      if (!this.shortCounterList.equals(that.shortCounterList))
        return false;
    }

    boolean this_present_intCounterList = true && this.isSetIntCounterList();
    boolean that_present_intCounterList = true && that.isSetIntCounterList();
    if (this_present_intCounterList || that_present_intCounterList) {
      if (!(this_present_intCounterList && that_present_intCounterList))
        return false;
      if (!this.intCounterList.equals(that.intCounterList))
        return false;
    }

    boolean this_present_level = true;
    boolean that_present_level = true;
    if (this_present_level || that_present_level) {
      if (!(this_present_level && that_present_level))
        return false;
      if (this.level != that.level)
        return false;
    }

    boolean this_present_exp = true;
    boolean that_present_exp = true;
    if (this_present_exp || that_present_exp) {
      if (!(this_present_exp && that_present_exp))
        return false;
      if (this.exp != that.exp)
        return false;
    }

    boolean this_present_stature = true;
    boolean that_present_stature = true;
    if (this_present_stature || that_present_stature) {
      if (!(this_present_stature && that_present_stature))
        return false;
      if (this.stature != that.stature)
        return false;
    }

    boolean this_present_cookie = true && this.isSetCookie();
    boolean that_present_cookie = true && that.isSetCookie();
    if (this_present_cookie || that_present_cookie) {
      if (!(this_present_cookie && that_present_cookie))
        return false;
      if (!this.cookie.equals(that.cookie))
        return false;
    }

    boolean this_present_popularityLevel = true;
    boolean that_present_popularityLevel = true;
    if (this_present_popularityLevel || that_present_popularityLevel) {
      if (!(this_present_popularityLevel && that_present_popularityLevel))
        return false;
      if (this.popularityLevel != that.popularityLevel)
        return false;
    }

    boolean this_present_popularityTotal = true;
    boolean that_present_popularityTotal = true;
    if (this_present_popularityTotal || that_present_popularityTotal) {
      if (!(this_present_popularityTotal && that_present_popularityTotal))
        return false;
      if (this.popularityTotal != that.popularityTotal)
        return false;
    }

    boolean this_present_newClientVersion = true;
    boolean that_present_newClientVersion = true;
    if (this_present_newClientVersion || that_present_newClientVersion) {
      if (!(this_present_newClientVersion && that_present_newClientVersion))
        return false;
      if (this.newClientVersion != that.newClientVersion)
        return false;
    }

    boolean this_present_tempUser = true;
    boolean that_present_tempUser = true;
    if (this_present_tempUser || that_present_tempUser) {
      if (!(this_present_tempUser && that_present_tempUser))
        return false;
      if (this.tempUser != that.tempUser)
        return false;
    }

    boolean this_present_cup = true;
    boolean that_present_cup = true;
    if (this_present_cup || that_present_cup) {
      if (!(this_present_cup && that_present_cup))
        return false;
      if (this.cup != that.cup)
        return false;
    }

    boolean this_present_freeIb = true;
    boolean that_present_freeIb = true;
    if (this_present_freeIb || that_present_freeIb) {
      if (!(this_present_freeIb && that_present_freeIb))
        return false;
      if (this.freeIb != that.freeIb)
        return false;
    }

    boolean this_present_rechargeIb = true;
    boolean that_present_rechargeIb = true;
    if (this_present_rechargeIb || that_present_rechargeIb) {
      if (!(this_present_rechargeIb && that_present_rechargeIb))
        return false;
      if (this.rechargeIb != that.rechargeIb)
        return false;
    }

    boolean this_present_intDayLoopCounterList = true && this.isSetIntDayLoopCounterList();
    boolean that_present_intDayLoopCounterList = true && that.isSetIntDayLoopCounterList();
    if (this_present_intDayLoopCounterList || that_present_intDayLoopCounterList) {
      if (!(this_present_intDayLoopCounterList && that_present_intDayLoopCounterList))
        return false;
      if (!this.intDayLoopCounterList.equals(that.intDayLoopCounterList))
        return false;
    }

    boolean this_present_vipDiamond = true;
    boolean that_present_vipDiamond = true;
    if (this_present_vipDiamond || that_present_vipDiamond) {
      if (!(this_present_vipDiamond && that_present_vipDiamond))
        return false;
      if (this.vipDiamond != that.vipDiamond)
        return false;
    }

    boolean this_present_shortDayLoopCounterList = true && this.isSetShortDayLoopCounterList();
    boolean that_present_shortDayLoopCounterList = true && that.isSetShortDayLoopCounterList();
    if (this_present_shortDayLoopCounterList || that_present_shortDayLoopCounterList) {
      if (!(this_present_shortDayLoopCounterList && that_present_shortDayLoopCounterList))
        return false;
      if (!this.shortDayLoopCounterList.equals(that.shortDayLoopCounterList))
        return false;
    }

    boolean this_present_byteDayLoopCounterList = true && this.isSetByteDayLoopCounterList();
    boolean that_present_byteDayLoopCounterList = true && that.isSetByteDayLoopCounterList();
    if (this_present_byteDayLoopCounterList || that_present_byteDayLoopCounterList) {
      if (!(this_present_byteDayLoopCounterList && that_present_byteDayLoopCounterList))
        return false;
      if (!this.byteDayLoopCounterList.equals(that.byteDayLoopCounterList))
        return false;
    }

    boolean this_present_activeVal = true;
    boolean that_present_activeVal = true;
    if (this_present_activeVal || that_present_activeVal) {
      if (!(this_present_activeVal && that_present_activeVal))
        return false;
      if (this.activeVal != that.activeVal)
        return false;
    }

    boolean this_present_activeLevel = true;
    boolean that_present_activeLevel = true;
    if (this_present_activeLevel || that_present_activeLevel) {
      if (!(this_present_activeLevel && that_present_activeLevel))
        return false;
      if (this.activeLevel != that.activeLevel)
        return false;
    }

    boolean this_present_totalRecharge = true;
    boolean that_present_totalRecharge = true;
    if (this_present_totalRecharge || that_present_totalRecharge) {
      if (!(this_present_totalRecharge && that_present_totalRecharge))
        return false;
      if (this.totalRecharge != that.totalRecharge)
        return false;
    }

    boolean this_present_tagId = true;
    boolean that_present_tagId = true;
    if (this_present_tagId || that_present_tagId) {
      if (!(this_present_tagId && that_present_tagId))
        return false;
      if (this.tagId != that.tagId)
        return false;
    }

    boolean this_present_awordVersion = true;
    boolean that_present_awordVersion = true;
    if (this_present_awordVersion || that_present_awordVersion) {
      if (!(this_present_awordVersion && that_present_awordVersion))
        return false;
      if (this.awordVersion != that.awordVersion)
        return false;
    }

    boolean this_present_guildId = true;
    boolean that_present_guildId = true;
    if (this_present_guildId || that_present_guildId) {
      if (!(this_present_guildId && that_present_guildId))
        return false;
      if (this.guildId != that.guildId)
        return false;
    }

    boolean this_present_guildName = true && this.isSetGuildName();
    boolean that_present_guildName = true && that.isSetGuildName();
    if (this_present_guildName || that_present_guildName) {
      if (!(this_present_guildName && that_present_guildName))
        return false;
      if (!this.guildName.equals(that.guildName))
        return false;
    }

    boolean this_present_mailPageSize = true;
    boolean that_present_mailPageSize = true;
    if (this_present_mailPageSize || that_present_mailPageSize) {
      if (!(this_present_mailPageSize && that_present_mailPageSize))
        return false;
      if (this.mailPageSize != that.mailPageSize)
        return false;
    }

    boolean this_present_nonPointIb = true;
    boolean that_present_nonPointIb = true;
    if (this_present_nonPointIb || that_present_nonPointIb) {
      if (!(this_present_nonPointIb && that_present_nonPointIb))
        return false;
      if (this.nonPointIb != that.nonPointIb)
        return false;
    }

    boolean this_present_bindEmail = true && this.isSetBindEmail();
    boolean that_present_bindEmail = true && that.isSetBindEmail();
    if (this_present_bindEmail || that_present_bindEmail) {
      if (!(this_present_bindEmail && that_present_bindEmail))
        return false;
      if (!this.bindEmail.equals(that.bindEmail))
        return false;
    }

    boolean this_present_friendType = true;
    boolean that_present_friendType = true;
    if (this_present_friendType || that_present_friendType) {
      if (!(this_present_friendType && that_present_friendType))
        return false;
      if (this.friendType != that.friendType)
        return false;
    }

    boolean this_present_skinColor = true;
    boolean that_present_skinColor = true;
    if (this_present_skinColor || that_present_skinColor) {
      if (!(this_present_skinColor && that_present_skinColor))
        return false;
      if (this.skinColor != that.skinColor)
        return false;
    }

    boolean this_present_starLightLevel = true;
    boolean that_present_starLightLevel = true;
    if (this_present_starLightLevel || that_present_starLightLevel) {
      if (!(this_present_starLightLevel && that_present_starLightLevel))
        return false;
      if (this.starLightLevel != that.starLightLevel)
        return false;
    }

    boolean this_present_starLights = true;
    boolean that_present_starLights = true;
    if (this_present_starLights || that_present_starLights) {
      if (!(this_present_starLights && that_present_starLights))
        return false;
      if (this.starLights != that.starLights)
        return false;
    }

    boolean this_present_gameServerId = true && this.isSetGameServerId();
    boolean that_present_gameServerId = true && that.isSetGameServerId();
    if (this_present_gameServerId || that_present_gameServerId) {
      if (!(this_present_gameServerId && that_present_gameServerId))
        return false;
      if (!this.gameServerId.equals(that.gameServerId))
        return false;
    }

    boolean this_present_gameServerName = true && this.isSetGameServerName();
    boolean that_present_gameServerName = true && that.isSetGameServerName();
    if (this_present_gameServerName || that_present_gameServerName) {
      if (!(this_present_gameServerName && that_present_gameServerName))
        return false;
      if (!this.gameServerName.equals(that.gameServerName))
        return false;
    }

    boolean this_present_putOnBadges = true && this.isSetPutOnBadges();
    boolean that_present_putOnBadges = true && that.isSetPutOnBadges();
    if (this_present_putOnBadges || that_present_putOnBadges) {
      if (!(this_present_putOnBadges && that_present_putOnBadges))
        return false;
      if (!this.putOnBadges.equals(that.putOnBadges))
        return false;
    }

    boolean this_present_usedFashionIds = true && this.isSetUsedFashionIds();
    boolean that_present_usedFashionIds = true && that.isSetUsedFashionIds();
    if (this_present_usedFashionIds || that_present_usedFashionIds) {
      if (!(this_present_usedFashionIds && that_present_usedFashionIds))
        return false;
      if (!this.usedFashionIds.equals(that.usedFashionIds))
        return false;
    }

    boolean this_present_largesse = true;
    boolean that_present_largesse = true;
    if (this_present_largesse || that_present_largesse) {
      if (!(this_present_largesse && that_present_largesse))
        return false;
      if (this.largesse != that.largesse)
        return false;
    }

    boolean this_present_charm = true;
    boolean that_present_charm = true;
    if (this_present_charm || that_present_charm) {
      if (!(this_present_charm && that_present_charm))
        return false;
      if (this.charm != that.charm)
        return false;
    }

    boolean this_present_hasSign = true;
    boolean that_present_hasSign = true;
    if (this_present_hasSign || that_present_hasSign) {
      if (!(this_present_hasSign && that_present_hasSign))
        return false;
      if (this.hasSign != that.hasSign)
        return false;
    }

    boolean this_present_guildDegree = true && this.isSetGuildDegree();
    boolean that_present_guildDegree = true && that.isSetGuildDegree();
    if (this_present_guildDegree || that_present_guildDegree) {
      if (!(this_present_guildDegree && that_present_guildDegree))
        return false;
      if (!this.guildDegree.equals(that.guildDegree))
        return false;
    }

    boolean this_present_activityUIStatus = true && this.isSetActivityUIStatus();
    boolean that_present_activityUIStatus = true && that.isSetActivityUIStatus();
    if (this_present_activityUIStatus || that_present_activityUIStatus) {
      if (!(this_present_activityUIStatus && that_present_activityUIStatus))
        return false;
      if (!this.activityUIStatus.equals(that.activityUIStatus))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCUserInfoMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCUserInfoMsg typedOther = (SCUserInfoMsg)other;

    lastComparison = Boolean.valueOf(isSetSex()).compareTo(typedOther.isSetSex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sex, typedOther.sex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCharId()).compareTo(typedOther.isSetCharId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCharId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.charId, typedOther.charId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccountId()).compareTo(typedOther.isSetAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountId, typedOther.accountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIb()).compareTo(typedOther.isSetIb());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIb()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ib, typedOther.ib);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGold()).compareTo(typedOther.isSetGold());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGold()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gold, typedOther.gold);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeadIconId()).compareTo(typedOther.isSetHeadIconId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeadIconId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.headIconId, typedOther.headIconId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBodyAdjVal()).compareTo(typedOther.isSetBodyAdjVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBodyAdjVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bodyAdjVal, typedOther.bodyAdjVal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetModelId()).compareTo(typedOther.isSetModelId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModelId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelId, typedOther.modelId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVipLevel()).compareTo(typedOther.isSetVipLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVipLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vipLevel, typedOther.vipLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoint()).compareTo(typedOther.isSetPoint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.point, typedOther.point);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlags()).compareTo(typedOther.isSetFlags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flags, typedOther.flags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConstellation()).compareTo(typedOther.isSetConstellation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConstellation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.constellation, typedOther.constellation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLuckDay()).compareTo(typedOther.isSetLuckDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLuckDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.luckDay, typedOther.luckDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetByteCounterList()).compareTo(typedOther.isSetByteCounterList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetByteCounterList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.byteCounterList, typedOther.byteCounterList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShortCounterList()).compareTo(typedOther.isSetShortCounterList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShortCounterList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shortCounterList, typedOther.shortCounterList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIntCounterList()).compareTo(typedOther.isSetIntCounterList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntCounterList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intCounterList, typedOther.intCounterList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLevel()).compareTo(typedOther.isSetLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.level, typedOther.level);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExp()).compareTo(typedOther.isSetExp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exp, typedOther.exp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStature()).compareTo(typedOther.isSetStature());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStature()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stature, typedOther.stature);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCookie()).compareTo(typedOther.isSetCookie());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCookie()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cookie, typedOther.cookie);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPopularityLevel()).compareTo(typedOther.isSetPopularityLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPopularityLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.popularityLevel, typedOther.popularityLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPopularityTotal()).compareTo(typedOther.isSetPopularityTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPopularityTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.popularityTotal, typedOther.popularityTotal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNewClientVersion()).compareTo(typedOther.isSetNewClientVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewClientVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newClientVersion, typedOther.newClientVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTempUser()).compareTo(typedOther.isSetTempUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTempUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tempUser, typedOther.tempUser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCup()).compareTo(typedOther.isSetCup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCup()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cup, typedOther.cup);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFreeIb()).compareTo(typedOther.isSetFreeIb());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFreeIb()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.freeIb, typedOther.freeIb);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRechargeIb()).compareTo(typedOther.isSetRechargeIb());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRechargeIb()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rechargeIb, typedOther.rechargeIb);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIntDayLoopCounterList()).compareTo(typedOther.isSetIntDayLoopCounterList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntDayLoopCounterList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intDayLoopCounterList, typedOther.intDayLoopCounterList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVipDiamond()).compareTo(typedOther.isSetVipDiamond());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVipDiamond()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vipDiamond, typedOther.vipDiamond);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShortDayLoopCounterList()).compareTo(typedOther.isSetShortDayLoopCounterList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShortDayLoopCounterList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shortDayLoopCounterList, typedOther.shortDayLoopCounterList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetByteDayLoopCounterList()).compareTo(typedOther.isSetByteDayLoopCounterList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetByteDayLoopCounterList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.byteDayLoopCounterList, typedOther.byteDayLoopCounterList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveVal()).compareTo(typedOther.isSetActiveVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeVal, typedOther.activeVal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveLevel()).compareTo(typedOther.isSetActiveLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeLevel, typedOther.activeLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalRecharge()).compareTo(typedOther.isSetTotalRecharge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalRecharge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalRecharge, typedOther.totalRecharge);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTagId()).compareTo(typedOther.isSetTagId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTagId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagId, typedOther.tagId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAwordVersion()).compareTo(typedOther.isSetAwordVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAwordVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.awordVersion, typedOther.awordVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGuildId()).compareTo(typedOther.isSetGuildId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGuildId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.guildId, typedOther.guildId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGuildName()).compareTo(typedOther.isSetGuildName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGuildName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.guildName, typedOther.guildName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMailPageSize()).compareTo(typedOther.isSetMailPageSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMailPageSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mailPageSize, typedOther.mailPageSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNonPointIb()).compareTo(typedOther.isSetNonPointIb());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNonPointIb()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nonPointIb, typedOther.nonPointIb);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBindEmail()).compareTo(typedOther.isSetBindEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBindEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bindEmail, typedOther.bindEmail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFriendType()).compareTo(typedOther.isSetFriendType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFriendType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.friendType, typedOther.friendType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSkinColor()).compareTo(typedOther.isSetSkinColor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSkinColor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.skinColor, typedOther.skinColor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStarLightLevel()).compareTo(typedOther.isSetStarLightLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStarLightLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.starLightLevel, typedOther.starLightLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStarLights()).compareTo(typedOther.isSetStarLights());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStarLights()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.starLights, typedOther.starLights);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGameServerId()).compareTo(typedOther.isSetGameServerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGameServerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameServerId, typedOther.gameServerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGameServerName()).compareTo(typedOther.isSetGameServerName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGameServerName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameServerName, typedOther.gameServerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPutOnBadges()).compareTo(typedOther.isSetPutOnBadges());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPutOnBadges()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.putOnBadges, typedOther.putOnBadges);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsedFashionIds()).compareTo(typedOther.isSetUsedFashionIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsedFashionIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.usedFashionIds, typedOther.usedFashionIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLargesse()).compareTo(typedOther.isSetLargesse());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLargesse()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.largesse, typedOther.largesse);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCharm()).compareTo(typedOther.isSetCharm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCharm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.charm, typedOther.charm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHasSign()).compareTo(typedOther.isSetHasSign());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHasSign()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasSign, typedOther.hasSign);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGuildDegree()).compareTo(typedOther.isSetGuildDegree());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGuildDegree()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.guildDegree, typedOther.guildDegree);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActivityUIStatus()).compareTo(typedOther.isSetActivityUIStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActivityUIStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activityUIStatus, typedOther.activityUIStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCUserInfoMsg(");
    boolean first = true;

    sb.append("sex:");
    sb.append(this.sex);
    first = false;
    if (!first) sb.append(", ");
    sb.append("charId:");
    sb.append(this.charId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("accountId:");
    sb.append(this.accountId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ib:");
    sb.append(this.ib);
    first = false;
    if (!first) sb.append(", ");
    sb.append("gold:");
    sb.append(this.gold);
    first = false;
    if (!first) sb.append(", ");
    sb.append("headIconId:");
    if (this.headIconId == null) {
      sb.append("null");
    } else {
      sb.append(this.headIconId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bodyAdjVal:");
    sb.append(this.bodyAdjVal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("modelId:");
    sb.append(this.modelId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vipLevel:");
    sb.append(this.vipLevel);
    first = false;
    if (!first) sb.append(", ");
    sb.append("point:");
    sb.append(this.point);
    first = false;
    if (isSetFlags()) {
      if (!first) sb.append(", ");
      sb.append("flags:");
      if (this.flags == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.flags, sb);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("constellation:");
    if (this.constellation == null) {
      sb.append("null");
    } else {
      sb.append(this.constellation);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("luckDay:");
    if (this.luckDay == null) {
      sb.append("null");
    } else {
      sb.append(this.luckDay);
    }
    first = false;
    if (isSetByteCounterList()) {
      if (!first) sb.append(", ");
      sb.append("byteCounterList:");
      if (this.byteCounterList == null) {
        sb.append("null");
      } else {
        sb.append(this.byteCounterList);
      }
      first = false;
    }
    if (isSetShortCounterList()) {
      if (!first) sb.append(", ");
      sb.append("shortCounterList:");
      if (this.shortCounterList == null) {
        sb.append("null");
      } else {
        sb.append(this.shortCounterList);
      }
      first = false;
    }
    if (isSetIntCounterList()) {
      if (!first) sb.append(", ");
      sb.append("intCounterList:");
      if (this.intCounterList == null) {
        sb.append("null");
      } else {
        sb.append(this.intCounterList);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("level:");
    sb.append(this.level);
    first = false;
    if (!first) sb.append(", ");
    sb.append("exp:");
    sb.append(this.exp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("stature:");
    sb.append(this.stature);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cookie:");
    if (this.cookie == null) {
      sb.append("null");
    } else {
      sb.append(this.cookie);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("popularityLevel:");
    sb.append(this.popularityLevel);
    first = false;
    if (!first) sb.append(", ");
    sb.append("popularityTotal:");
    sb.append(this.popularityTotal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("newClientVersion:");
    sb.append(this.newClientVersion);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tempUser:");
    sb.append(this.tempUser);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cup:");
    sb.append(this.cup);
    first = false;
    if (!first) sb.append(", ");
    sb.append("freeIb:");
    sb.append(this.freeIb);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rechargeIb:");
    sb.append(this.rechargeIb);
    first = false;
    if (isSetIntDayLoopCounterList()) {
      if (!first) sb.append(", ");
      sb.append("intDayLoopCounterList:");
      if (this.intDayLoopCounterList == null) {
        sb.append("null");
      } else {
        sb.append(this.intDayLoopCounterList);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("vipDiamond:");
    sb.append(this.vipDiamond);
    first = false;
    if (isSetShortDayLoopCounterList()) {
      if (!first) sb.append(", ");
      sb.append("shortDayLoopCounterList:");
      if (this.shortDayLoopCounterList == null) {
        sb.append("null");
      } else {
        sb.append(this.shortDayLoopCounterList);
      }
      first = false;
    }
    if (isSetByteDayLoopCounterList()) {
      if (!first) sb.append(", ");
      sb.append("byteDayLoopCounterList:");
      if (this.byteDayLoopCounterList == null) {
        sb.append("null");
      } else {
        sb.append(this.byteDayLoopCounterList);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("activeVal:");
    sb.append(this.activeVal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("activeLevel:");
    sb.append(this.activeLevel);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalRecharge:");
    sb.append(this.totalRecharge);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tagId:");
    sb.append(this.tagId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("awordVersion:");
    sb.append(this.awordVersion);
    first = false;
    if (!first) sb.append(", ");
    sb.append("guildId:");
    sb.append(this.guildId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("guildName:");
    if (this.guildName == null) {
      sb.append("null");
    } else {
      sb.append(this.guildName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mailPageSize:");
    sb.append(this.mailPageSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nonPointIb:");
    sb.append(this.nonPointIb);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bindEmail:");
    if (this.bindEmail == null) {
      sb.append("null");
    } else {
      sb.append(this.bindEmail);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("friendType:");
    sb.append(this.friendType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("skinColor:");
    sb.append(this.skinColor);
    first = false;
    if (!first) sb.append(", ");
    sb.append("starLightLevel:");
    sb.append(this.starLightLevel);
    first = false;
    if (!first) sb.append(", ");
    sb.append("starLights:");
    sb.append(this.starLights);
    first = false;
    if (!first) sb.append(", ");
    sb.append("gameServerId:");
    if (this.gameServerId == null) {
      sb.append("null");
    } else {
      sb.append(this.gameServerId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("gameServerName:");
    if (this.gameServerName == null) {
      sb.append("null");
    } else {
      sb.append(this.gameServerName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("putOnBadges:");
    if (this.putOnBadges == null) {
      sb.append("null");
    } else {
      sb.append(this.putOnBadges);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("usedFashionIds:");
    if (this.usedFashionIds == null) {
      sb.append("null");
    } else {
      sb.append(this.usedFashionIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("largesse:");
    sb.append(this.largesse);
    first = false;
    if (!first) sb.append(", ");
    sb.append("charm:");
    sb.append(this.charm);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hasSign:");
    sb.append(this.hasSign);
    first = false;
    if (!first) sb.append(", ");
    sb.append("guildDegree:");
    if (this.guildDegree == null) {
      sb.append("null");
    } else {
      sb.append(this.guildDegree);
    }
    first = false;
    if (isSetActivityUIStatus()) {
      if (!first) sb.append(", ");
      sb.append("activityUIStatus:");
      if (this.activityUIStatus == null) {
        sb.append("null");
      } else {
        sb.append(this.activityUIStatus);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCUserInfoMsgStandardSchemeFactory implements SchemeFactory {
    public SCUserInfoMsgStandardScheme getScheme() {
      return new SCUserInfoMsgStandardScheme();
    }
  }

  private static class SCUserInfoMsgStandardScheme extends StandardScheme<SCUserInfoMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCUserInfoMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SEX
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.sex = iprot.readByte();
              struct.setSexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CHAR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.charId = iprot.readI64();
              struct.setCharIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.accountId = iprot.readI64();
              struct.setAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IB
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ib = iprot.readI32();
              struct.setIbIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // GOLD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.gold = iprot.readI32();
              struct.setGoldIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // HEAD_ICON_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.headIconId = iprot.readString();
              struct.setHeadIconIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BODY_ADJ_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.bodyAdjVal = iprot.readByte();
              struct.setBodyAdjValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MODEL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.modelId = iprot.readByte();
              struct.setModelIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // VIP_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.vipLevel = iprot.readByte();
              struct.setVipLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // POINT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.point = iprot.readI32();
              struct.setPointIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // FLAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.flags = iprot.readBinary();
              struct.setFlagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CONSTELLATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.constellation = com.ling9527.music.common.msg.auto.Constellation.findByValue(iprot.readI32());
              struct.setConstellationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // LUCK_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.luckDay = com.ling9527.music.common.msg.auto.LuckDay.findByValue(iprot.readI32());
              struct.setLuckDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // BYTE_COUNTER_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                struct.byteCounterList = new ArrayList<Byte>(_list48.size);
                for (int _i49 = 0; _i49 < _list48.size; ++_i49)
                {
                  byte _elem50; // required
                  _elem50 = iprot.readByte();
                  struct.byteCounterList.add(_elem50);
                }
                iprot.readListEnd();
              }
              struct.setByteCounterListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // SHORT_COUNTER_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list51 = iprot.readListBegin();
                struct.shortCounterList = new ArrayList<Short>(_list51.size);
                for (int _i52 = 0; _i52 < _list51.size; ++_i52)
                {
                  short _elem53; // required
                  _elem53 = iprot.readI16();
                  struct.shortCounterList.add(_elem53);
                }
                iprot.readListEnd();
              }
              struct.setShortCounterListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // INT_COUNTER_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list54 = iprot.readListBegin();
                struct.intCounterList = new ArrayList<Integer>(_list54.size);
                for (int _i55 = 0; _i55 < _list54.size; ++_i55)
                {
                  int _elem56; // required
                  _elem56 = iprot.readI32();
                  struct.intCounterList.add(_elem56);
                }
                iprot.readListEnd();
              }
              struct.setIntCounterListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.level = iprot.readI16();
              struct.setLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // EXP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.exp = iprot.readI32();
              struct.setExpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // STATURE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.stature = iprot.readByte();
              struct.setStatureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // COOKIE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cookie = iprot.readString();
              struct.setCookieIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // POPULARITY_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.popularityLevel = iprot.readI16();
              struct.setPopularityLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // POPULARITY_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.popularityTotal = iprot.readI64();
              struct.setPopularityTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // NEW_CLIENT_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.newClientVersion = iprot.readBool();
              struct.setNewClientVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // TEMP_USER
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.tempUser = iprot.readBool();
              struct.setTempUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // CUP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cup = iprot.readI32();
              struct.setCupIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // FREE_IB
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.freeIb = iprot.readI32();
              struct.setFreeIbIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // RECHARGE_IB
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rechargeIb = iprot.readI32();
              struct.setRechargeIbIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // INT_DAY_LOOP_COUNTER_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list57 = iprot.readListBegin();
                struct.intDayLoopCounterList = new ArrayList<Integer>(_list57.size);
                for (int _i58 = 0; _i58 < _list57.size; ++_i58)
                {
                  int _elem59; // required
                  _elem59 = iprot.readI32();
                  struct.intDayLoopCounterList.add(_elem59);
                }
                iprot.readListEnd();
              }
              struct.setIntDayLoopCounterListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // VIP_DIAMOND
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.vipDiamond = iprot.readI32();
              struct.setVipDiamondIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // SHORT_DAY_LOOP_COUNTER_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list60 = iprot.readListBegin();
                struct.shortDayLoopCounterList = new ArrayList<Short>(_list60.size);
                for (int _i61 = 0; _i61 < _list60.size; ++_i61)
                {
                  short _elem62; // required
                  _elem62 = iprot.readI16();
                  struct.shortDayLoopCounterList.add(_elem62);
                }
                iprot.readListEnd();
              }
              struct.setShortDayLoopCounterListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // BYTE_DAY_LOOP_COUNTER_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list63 = iprot.readListBegin();
                struct.byteDayLoopCounterList = new ArrayList<Byte>(_list63.size);
                for (int _i64 = 0; _i64 < _list63.size; ++_i64)
                {
                  byte _elem65; // required
                  _elem65 = iprot.readByte();
                  struct.byteDayLoopCounterList.add(_elem65);
                }
                iprot.readListEnd();
              }
              struct.setByteDayLoopCounterListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // ACTIVE_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.activeVal = iprot.readI32();
              struct.setActiveValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // ACTIVE_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.activeLevel = iprot.readByte();
              struct.setActiveLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // TOTAL_RECHARGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalRecharge = iprot.readI32();
              struct.setTotalRechargeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // TAG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.tagId = iprot.readI16();
              struct.setTagIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 42: // AWORD_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.awordVersion = iprot.readI32();
              struct.setAwordVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 43: // GUILD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.guildId = iprot.readI64();
              struct.setGuildIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 44: // GUILD_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.guildName = iprot.readString();
              struct.setGuildNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 45: // MAIL_PAGE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mailPageSize = iprot.readI32();
              struct.setMailPageSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 46: // NON_POINT_IB
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.nonPointIb = iprot.readI32();
              struct.setNonPointIbIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 47: // BIND_EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bindEmail = iprot.readString();
              struct.setBindEmailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 48: // FRIEND_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.friendType = iprot.readI32();
              struct.setFriendTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 49: // SKIN_COLOR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.skinColor = iprot.readI32();
              struct.setSkinColorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 50: // STAR_LIGHT_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.starLightLevel = iprot.readI16();
              struct.setStarLightLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 51: // STAR_LIGHTS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.starLights = iprot.readI32();
              struct.setStarLightsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 52: // GAME_SERVER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.gameServerId = iprot.readString();
              struct.setGameServerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 53: // GAME_SERVER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.gameServerName = iprot.readString();
              struct.setGameServerNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 54: // PUT_ON_BADGES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list66 = iprot.readListBegin();
                struct.putOnBadges = new ArrayList<com.ling9527.music.common.msg.auto.BadgeInfo>(_list66.size);
                for (int _i67 = 0; _i67 < _list66.size; ++_i67)
                {
                  com.ling9527.music.common.msg.auto.BadgeInfo _elem68; // required
                  _elem68 = new com.ling9527.music.common.msg.auto.BadgeInfo();
                  _elem68.read(iprot);
                  struct.putOnBadges.add(_elem68);
                }
                iprot.readListEnd();
              }
              struct.setPutOnBadgesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 55: // USED_FASHION_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map69 = iprot.readMapBegin();
                struct.usedFashionIds = new HashMap<Byte,Integer>(2*_map69.size);
                for (int _i70 = 0; _i70 < _map69.size; ++_i70)
                {
                  byte _key71; // required
                  int _val72; // required
                  _key71 = iprot.readByte();
                  _val72 = iprot.readI32();
                  struct.usedFashionIds.put(_key71, _val72);
                }
                iprot.readMapEnd();
              }
              struct.setUsedFashionIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 56: // LARGESSE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.largesse = iprot.readI32();
              struct.setLargesseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 57: // CHARM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.charm = iprot.readI32();
              struct.setCharmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 58: // HAS_SIGN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.hasSign = iprot.readBool();
              struct.setHasSignIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 59: // GUILD_DEGREE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.guildDegree = com.ling9527.music.common.msg.auto.GuildDegree.findByValue(iprot.readI32());
              struct.setGuildDegreeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 60: // ACTIVITY_UISTATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.activityUIStatus = ActivityUIStatus.findByValue(iprot.readI32());
              struct.setActivityUIStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCUserInfoMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SEX_FIELD_DESC);
      oprot.writeByte(struct.sex);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CHAR_ID_FIELD_DESC);
      oprot.writeI64(struct.charId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACCOUNT_ID_FIELD_DESC);
      oprot.writeI64(struct.accountId);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IB_FIELD_DESC);
      oprot.writeI32(struct.ib);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GOLD_FIELD_DESC);
      oprot.writeI32(struct.gold);
      oprot.writeFieldEnd();
      if (struct.headIconId != null) {
        oprot.writeFieldBegin(HEAD_ICON_ID_FIELD_DESC);
        oprot.writeString(struct.headIconId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BODY_ADJ_VAL_FIELD_DESC);
      oprot.writeByte(struct.bodyAdjVal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MODEL_ID_FIELD_DESC);
      oprot.writeByte(struct.modelId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VIP_LEVEL_FIELD_DESC);
      oprot.writeByte(struct.vipLevel);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POINT_FIELD_DESC);
      oprot.writeI32(struct.point);
      oprot.writeFieldEnd();
      if (struct.flags != null) {
        if (struct.isSetFlags()) {
          oprot.writeFieldBegin(FLAGS_FIELD_DESC);
          oprot.writeBinary(struct.flags);
          oprot.writeFieldEnd();
        }
      }
      if (struct.constellation != null) {
        oprot.writeFieldBegin(CONSTELLATION_FIELD_DESC);
        oprot.writeI32(struct.constellation.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.luckDay != null) {
        oprot.writeFieldBegin(LUCK_DAY_FIELD_DESC);
        oprot.writeI32(struct.luckDay.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.byteCounterList != null) {
        if (struct.isSetByteCounterList()) {
          oprot.writeFieldBegin(BYTE_COUNTER_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BYTE, struct.byteCounterList.size()));
            for (byte _iter73 : struct.byteCounterList)
            {
              oprot.writeByte(_iter73);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.shortCounterList != null) {
        if (struct.isSetShortCounterList()) {
          oprot.writeFieldBegin(SHORT_COUNTER_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, struct.shortCounterList.size()));
            for (short _iter74 : struct.shortCounterList)
            {
              oprot.writeI16(_iter74);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.intCounterList != null) {
        if (struct.isSetIntCounterList()) {
          oprot.writeFieldBegin(INT_COUNTER_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.intCounterList.size()));
            for (int _iter75 : struct.intCounterList)
            {
              oprot.writeI32(_iter75);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(LEVEL_FIELD_DESC);
      oprot.writeI16(struct.level);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXP_FIELD_DESC);
      oprot.writeI32(struct.exp);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATURE_FIELD_DESC);
      oprot.writeByte(struct.stature);
      oprot.writeFieldEnd();
      if (struct.cookie != null) {
        oprot.writeFieldBegin(COOKIE_FIELD_DESC);
        oprot.writeString(struct.cookie);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(POPULARITY_LEVEL_FIELD_DESC);
      oprot.writeI16(struct.popularityLevel);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POPULARITY_TOTAL_FIELD_DESC);
      oprot.writeI64(struct.popularityTotal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NEW_CLIENT_VERSION_FIELD_DESC);
      oprot.writeBool(struct.newClientVersion);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TEMP_USER_FIELD_DESC);
      oprot.writeBool(struct.tempUser);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CUP_FIELD_DESC);
      oprot.writeI32(struct.cup);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FREE_IB_FIELD_DESC);
      oprot.writeI32(struct.freeIb);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECHARGE_IB_FIELD_DESC);
      oprot.writeI32(struct.rechargeIb);
      oprot.writeFieldEnd();
      if (struct.intDayLoopCounterList != null) {
        if (struct.isSetIntDayLoopCounterList()) {
          oprot.writeFieldBegin(INT_DAY_LOOP_COUNTER_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.intDayLoopCounterList.size()));
            for (int _iter76 : struct.intDayLoopCounterList)
            {
              oprot.writeI32(_iter76);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(VIP_DIAMOND_FIELD_DESC);
      oprot.writeI32(struct.vipDiamond);
      oprot.writeFieldEnd();
      if (struct.shortDayLoopCounterList != null) {
        if (struct.isSetShortDayLoopCounterList()) {
          oprot.writeFieldBegin(SHORT_DAY_LOOP_COUNTER_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, struct.shortDayLoopCounterList.size()));
            for (short _iter77 : struct.shortDayLoopCounterList)
            {
              oprot.writeI16(_iter77);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.byteDayLoopCounterList != null) {
        if (struct.isSetByteDayLoopCounterList()) {
          oprot.writeFieldBegin(BYTE_DAY_LOOP_COUNTER_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BYTE, struct.byteDayLoopCounterList.size()));
            for (byte _iter78 : struct.byteDayLoopCounterList)
            {
              oprot.writeByte(_iter78);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(ACTIVE_VAL_FIELD_DESC);
      oprot.writeI32(struct.activeVal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACTIVE_LEVEL_FIELD_DESC);
      oprot.writeByte(struct.activeLevel);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_RECHARGE_FIELD_DESC);
      oprot.writeI32(struct.totalRecharge);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TAG_ID_FIELD_DESC);
      oprot.writeI16(struct.tagId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AWORD_VERSION_FIELD_DESC);
      oprot.writeI32(struct.awordVersion);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GUILD_ID_FIELD_DESC);
      oprot.writeI64(struct.guildId);
      oprot.writeFieldEnd();
      if (struct.guildName != null) {
        oprot.writeFieldBegin(GUILD_NAME_FIELD_DESC);
        oprot.writeString(struct.guildName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MAIL_PAGE_SIZE_FIELD_DESC);
      oprot.writeI32(struct.mailPageSize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NON_POINT_IB_FIELD_DESC);
      oprot.writeI32(struct.nonPointIb);
      oprot.writeFieldEnd();
      if (struct.bindEmail != null) {
        oprot.writeFieldBegin(BIND_EMAIL_FIELD_DESC);
        oprot.writeString(struct.bindEmail);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FRIEND_TYPE_FIELD_DESC);
      oprot.writeI32(struct.friendType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SKIN_COLOR_FIELD_DESC);
      oprot.writeI32(struct.skinColor);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STAR_LIGHT_LEVEL_FIELD_DESC);
      oprot.writeI16(struct.starLightLevel);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STAR_LIGHTS_FIELD_DESC);
      oprot.writeI32(struct.starLights);
      oprot.writeFieldEnd();
      if (struct.gameServerId != null) {
        oprot.writeFieldBegin(GAME_SERVER_ID_FIELD_DESC);
        oprot.writeString(struct.gameServerId);
        oprot.writeFieldEnd();
      }
      if (struct.gameServerName != null) {
        oprot.writeFieldBegin(GAME_SERVER_NAME_FIELD_DESC);
        oprot.writeString(struct.gameServerName);
        oprot.writeFieldEnd();
      }
      if (struct.putOnBadges != null) {
        oprot.writeFieldBegin(PUT_ON_BADGES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.putOnBadges.size()));
          for (com.ling9527.music.common.msg.auto.BadgeInfo _iter79 : struct.putOnBadges)
          {
            _iter79.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.usedFashionIds != null) {
        oprot.writeFieldBegin(USED_FASHION_IDS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.BYTE, org.apache.thrift.protocol.TType.I32, struct.usedFashionIds.size()));
          for (Map.Entry<Byte, Integer> _iter80 : struct.usedFashionIds.entrySet())
          {
            oprot.writeByte(_iter80.getKey());
            oprot.writeI32(_iter80.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LARGESSE_FIELD_DESC);
      oprot.writeI32(struct.largesse);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CHARM_FIELD_DESC);
      oprot.writeI32(struct.charm);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HAS_SIGN_FIELD_DESC);
      oprot.writeBool(struct.hasSign);
      oprot.writeFieldEnd();
      if (struct.guildDegree != null) {
        oprot.writeFieldBegin(GUILD_DEGREE_FIELD_DESC);
        oprot.writeI32(struct.guildDegree.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.activityUIStatus != null) {
        if (struct.isSetActivityUIStatus()) {
          oprot.writeFieldBegin(ACTIVITY_UISTATUS_FIELD_DESC);
          oprot.writeI32(struct.activityUIStatus.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCUserInfoMsgTupleSchemeFactory implements SchemeFactory {
    public SCUserInfoMsgTupleScheme getScheme() {
      return new SCUserInfoMsgTupleScheme();
    }
  }

  private static class SCUserInfoMsgTupleScheme extends TupleScheme<SCUserInfoMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCUserInfoMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSex()) {
        optionals.set(0);
      }
      if (struct.isSetCharId()) {
        optionals.set(1);
      }
      if (struct.isSetAccountId()) {
        optionals.set(2);
      }
      if (struct.isSetName()) {
        optionals.set(3);
      }
      if (struct.isSetIb()) {
        optionals.set(4);
      }
      if (struct.isSetGold()) {
        optionals.set(5);
      }
      if (struct.isSetHeadIconId()) {
        optionals.set(6);
      }
      if (struct.isSetBodyAdjVal()) {
        optionals.set(7);
      }
      if (struct.isSetModelId()) {
        optionals.set(8);
      }
      if (struct.isSetVipLevel()) {
        optionals.set(9);
      }
      if (struct.isSetPoint()) {
        optionals.set(10);
      }
      if (struct.isSetFlags()) {
        optionals.set(11);
      }
      if (struct.isSetConstellation()) {
        optionals.set(12);
      }
      if (struct.isSetLuckDay()) {
        optionals.set(13);
      }
      if (struct.isSetByteCounterList()) {
        optionals.set(14);
      }
      if (struct.isSetShortCounterList()) {
        optionals.set(15);
      }
      if (struct.isSetIntCounterList()) {
        optionals.set(16);
      }
      if (struct.isSetLevel()) {
        optionals.set(17);
      }
      if (struct.isSetExp()) {
        optionals.set(18);
      }
      if (struct.isSetStature()) {
        optionals.set(19);
      }
      if (struct.isSetCookie()) {
        optionals.set(20);
      }
      if (struct.isSetPopularityLevel()) {
        optionals.set(21);
      }
      if (struct.isSetPopularityTotal()) {
        optionals.set(22);
      }
      if (struct.isSetNewClientVersion()) {
        optionals.set(23);
      }
      if (struct.isSetTempUser()) {
        optionals.set(24);
      }
      if (struct.isSetCup()) {
        optionals.set(25);
      }
      if (struct.isSetFreeIb()) {
        optionals.set(26);
      }
      if (struct.isSetRechargeIb()) {
        optionals.set(27);
      }
      if (struct.isSetIntDayLoopCounterList()) {
        optionals.set(28);
      }
      if (struct.isSetVipDiamond()) {
        optionals.set(29);
      }
      if (struct.isSetShortDayLoopCounterList()) {
        optionals.set(30);
      }
      if (struct.isSetByteDayLoopCounterList()) {
        optionals.set(31);
      }
      if (struct.isSetActiveVal()) {
        optionals.set(32);
      }
      if (struct.isSetActiveLevel()) {
        optionals.set(33);
      }
      if (struct.isSetTotalRecharge()) {
        optionals.set(34);
      }
      if (struct.isSetTagId()) {
        optionals.set(35);
      }
      if (struct.isSetAwordVersion()) {
        optionals.set(36);
      }
      if (struct.isSetGuildId()) {
        optionals.set(37);
      }
      if (struct.isSetGuildName()) {
        optionals.set(38);
      }
      if (struct.isSetMailPageSize()) {
        optionals.set(39);
      }
      if (struct.isSetNonPointIb()) {
        optionals.set(40);
      }
      if (struct.isSetBindEmail()) {
        optionals.set(41);
      }
      if (struct.isSetFriendType()) {
        optionals.set(42);
      }
      if (struct.isSetSkinColor()) {
        optionals.set(43);
      }
      if (struct.isSetStarLightLevel()) {
        optionals.set(44);
      }
      if (struct.isSetStarLights()) {
        optionals.set(45);
      }
      if (struct.isSetGameServerId()) {
        optionals.set(46);
      }
      if (struct.isSetGameServerName()) {
        optionals.set(47);
      }
      if (struct.isSetPutOnBadges()) {
        optionals.set(48);
      }
      if (struct.isSetUsedFashionIds()) {
        optionals.set(49);
      }
      if (struct.isSetLargesse()) {
        optionals.set(50);
      }
      if (struct.isSetCharm()) {
        optionals.set(51);
      }
      if (struct.isSetHasSign()) {
        optionals.set(52);
      }
      if (struct.isSetGuildDegree()) {
        optionals.set(53);
      }
      if (struct.isSetActivityUIStatus()) {
        optionals.set(54);
      }
      oprot.writeBitSet(optionals, 55);
      if (struct.isSetSex()) {
        oprot.writeByte(struct.sex);
      }
      if (struct.isSetCharId()) {
        oprot.writeI64(struct.charId);
      }
      if (struct.isSetAccountId()) {
        oprot.writeI64(struct.accountId);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetIb()) {
        oprot.writeI32(struct.ib);
      }
      if (struct.isSetGold()) {
        oprot.writeI32(struct.gold);
      }
      if (struct.isSetHeadIconId()) {
        oprot.writeString(struct.headIconId);
      }
      if (struct.isSetBodyAdjVal()) {
        oprot.writeByte(struct.bodyAdjVal);
      }
      if (struct.isSetModelId()) {
        oprot.writeByte(struct.modelId);
      }
      if (struct.isSetVipLevel()) {
        oprot.writeByte(struct.vipLevel);
      }
      if (struct.isSetPoint()) {
        oprot.writeI32(struct.point);
      }
      if (struct.isSetFlags()) {
        oprot.writeBinary(struct.flags);
      }
      if (struct.isSetConstellation()) {
        oprot.writeI32(struct.constellation.getValue());
      }
      if (struct.isSetLuckDay()) {
        oprot.writeI32(struct.luckDay.getValue());
      }
      if (struct.isSetByteCounterList()) {
        {
          oprot.writeI32(struct.byteCounterList.size());
          for (byte _iter81 : struct.byteCounterList)
          {
            oprot.writeByte(_iter81);
          }
        }
      }
      if (struct.isSetShortCounterList()) {
        {
          oprot.writeI32(struct.shortCounterList.size());
          for (short _iter82 : struct.shortCounterList)
          {
            oprot.writeI16(_iter82);
          }
        }
      }
      if (struct.isSetIntCounterList()) {
        {
          oprot.writeI32(struct.intCounterList.size());
          for (int _iter83 : struct.intCounterList)
          {
            oprot.writeI32(_iter83);
          }
        }
      }
      if (struct.isSetLevel()) {
        oprot.writeI16(struct.level);
      }
      if (struct.isSetExp()) {
        oprot.writeI32(struct.exp);
      }
      if (struct.isSetStature()) {
        oprot.writeByte(struct.stature);
      }
      if (struct.isSetCookie()) {
        oprot.writeString(struct.cookie);
      }
      if (struct.isSetPopularityLevel()) {
        oprot.writeI16(struct.popularityLevel);
      }
      if (struct.isSetPopularityTotal()) {
        oprot.writeI64(struct.popularityTotal);
      }
      if (struct.isSetNewClientVersion()) {
        oprot.writeBool(struct.newClientVersion);
      }
      if (struct.isSetTempUser()) {
        oprot.writeBool(struct.tempUser);
      }
      if (struct.isSetCup()) {
        oprot.writeI32(struct.cup);
      }
      if (struct.isSetFreeIb()) {
        oprot.writeI32(struct.freeIb);
      }
      if (struct.isSetRechargeIb()) {
        oprot.writeI32(struct.rechargeIb);
      }
      if (struct.isSetIntDayLoopCounterList()) {
        {
          oprot.writeI32(struct.intDayLoopCounterList.size());
          for (int _iter84 : struct.intDayLoopCounterList)
          {
            oprot.writeI32(_iter84);
          }
        }
      }
      if (struct.isSetVipDiamond()) {
        oprot.writeI32(struct.vipDiamond);
      }
      if (struct.isSetShortDayLoopCounterList()) {
        {
          oprot.writeI32(struct.shortDayLoopCounterList.size());
          for (short _iter85 : struct.shortDayLoopCounterList)
          {
            oprot.writeI16(_iter85);
          }
        }
      }
      if (struct.isSetByteDayLoopCounterList()) {
        {
          oprot.writeI32(struct.byteDayLoopCounterList.size());
          for (byte _iter86 : struct.byteDayLoopCounterList)
          {
            oprot.writeByte(_iter86);
          }
        }
      }
      if (struct.isSetActiveVal()) {
        oprot.writeI32(struct.activeVal);
      }
      if (struct.isSetActiveLevel()) {
        oprot.writeByte(struct.activeLevel);
      }
      if (struct.isSetTotalRecharge()) {
        oprot.writeI32(struct.totalRecharge);
      }
      if (struct.isSetTagId()) {
        oprot.writeI16(struct.tagId);
      }
      if (struct.isSetAwordVersion()) {
        oprot.writeI32(struct.awordVersion);
      }
      if (struct.isSetGuildId()) {
        oprot.writeI64(struct.guildId);
      }
      if (struct.isSetGuildName()) {
        oprot.writeString(struct.guildName);
      }
      if (struct.isSetMailPageSize()) {
        oprot.writeI32(struct.mailPageSize);
      }
      if (struct.isSetNonPointIb()) {
        oprot.writeI32(struct.nonPointIb);
      }
      if (struct.isSetBindEmail()) {
        oprot.writeString(struct.bindEmail);
      }
      if (struct.isSetFriendType()) {
        oprot.writeI32(struct.friendType);
      }
      if (struct.isSetSkinColor()) {
        oprot.writeI32(struct.skinColor);
      }
      if (struct.isSetStarLightLevel()) {
        oprot.writeI16(struct.starLightLevel);
      }
      if (struct.isSetStarLights()) {
        oprot.writeI32(struct.starLights);
      }
      if (struct.isSetGameServerId()) {
        oprot.writeString(struct.gameServerId);
      }
      if (struct.isSetGameServerName()) {
        oprot.writeString(struct.gameServerName);
      }
      if (struct.isSetPutOnBadges()) {
        {
          oprot.writeI32(struct.putOnBadges.size());
          for (com.ling9527.music.common.msg.auto.BadgeInfo _iter87 : struct.putOnBadges)
          {
            _iter87.write(oprot);
          }
        }
      }
      if (struct.isSetUsedFashionIds()) {
        {
          oprot.writeI32(struct.usedFashionIds.size());
          for (Map.Entry<Byte, Integer> _iter88 : struct.usedFashionIds.entrySet())
          {
            oprot.writeByte(_iter88.getKey());
            oprot.writeI32(_iter88.getValue());
          }
        }
      }
      if (struct.isSetLargesse()) {
        oprot.writeI32(struct.largesse);
      }
      if (struct.isSetCharm()) {
        oprot.writeI32(struct.charm);
      }
      if (struct.isSetHasSign()) {
        oprot.writeBool(struct.hasSign);
      }
      if (struct.isSetGuildDegree()) {
        oprot.writeI32(struct.guildDegree.getValue());
      }
      if (struct.isSetActivityUIStatus()) {
        oprot.writeI32(struct.activityUIStatus.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCUserInfoMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(55);
      if (incoming.get(0)) {
        struct.sex = iprot.readByte();
        struct.setSexIsSet(true);
      }
      if (incoming.get(1)) {
        struct.charId = iprot.readI64();
        struct.setCharIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.accountId = iprot.readI64();
        struct.setAccountIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.ib = iprot.readI32();
        struct.setIbIsSet(true);
      }
      if (incoming.get(5)) {
        struct.gold = iprot.readI32();
        struct.setGoldIsSet(true);
      }
      if (incoming.get(6)) {
        struct.headIconId = iprot.readString();
        struct.setHeadIconIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.bodyAdjVal = iprot.readByte();
        struct.setBodyAdjValIsSet(true);
      }
      if (incoming.get(8)) {
        struct.modelId = iprot.readByte();
        struct.setModelIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.vipLevel = iprot.readByte();
        struct.setVipLevelIsSet(true);
      }
      if (incoming.get(10)) {
        struct.point = iprot.readI32();
        struct.setPointIsSet(true);
      }
      if (incoming.get(11)) {
        struct.flags = iprot.readBinary();
        struct.setFlagsIsSet(true);
      }
      if (incoming.get(12)) {
        struct.constellation = com.ling9527.music.common.msg.auto.Constellation.findByValue(iprot.readI32());
        struct.setConstellationIsSet(true);
      }
      if (incoming.get(13)) {
        struct.luckDay = com.ling9527.music.common.msg.auto.LuckDay.findByValue(iprot.readI32());
        struct.setLuckDayIsSet(true);
      }
      if (incoming.get(14)) {
        {
          org.apache.thrift.protocol.TList _list89 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BYTE, iprot.readI32());
          struct.byteCounterList = new ArrayList<Byte>(_list89.size);
          for (int _i90 = 0; _i90 < _list89.size; ++_i90)
          {
            byte _elem91; // required
            _elem91 = iprot.readByte();
            struct.byteCounterList.add(_elem91);
          }
        }
        struct.setByteCounterListIsSet(true);
      }
      if (incoming.get(15)) {
        {
          org.apache.thrift.protocol.TList _list92 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, iprot.readI32());
          struct.shortCounterList = new ArrayList<Short>(_list92.size);
          for (int _i93 = 0; _i93 < _list92.size; ++_i93)
          {
            short _elem94; // required
            _elem94 = iprot.readI16();
            struct.shortCounterList.add(_elem94);
          }
        }
        struct.setShortCounterListIsSet(true);
      }
      if (incoming.get(16)) {
        {
          org.apache.thrift.protocol.TList _list95 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.intCounterList = new ArrayList<Integer>(_list95.size);
          for (int _i96 = 0; _i96 < _list95.size; ++_i96)
          {
            int _elem97; // required
            _elem97 = iprot.readI32();
            struct.intCounterList.add(_elem97);
          }
        }
        struct.setIntCounterListIsSet(true);
      }
      if (incoming.get(17)) {
        struct.level = iprot.readI16();
        struct.setLevelIsSet(true);
      }
      if (incoming.get(18)) {
        struct.exp = iprot.readI32();
        struct.setExpIsSet(true);
      }
      if (incoming.get(19)) {
        struct.stature = iprot.readByte();
        struct.setStatureIsSet(true);
      }
      if (incoming.get(20)) {
        struct.cookie = iprot.readString();
        struct.setCookieIsSet(true);
      }
      if (incoming.get(21)) {
        struct.popularityLevel = iprot.readI16();
        struct.setPopularityLevelIsSet(true);
      }
      if (incoming.get(22)) {
        struct.popularityTotal = iprot.readI64();
        struct.setPopularityTotalIsSet(true);
      }
      if (incoming.get(23)) {
        struct.newClientVersion = iprot.readBool();
        struct.setNewClientVersionIsSet(true);
      }
      if (incoming.get(24)) {
        struct.tempUser = iprot.readBool();
        struct.setTempUserIsSet(true);
      }
      if (incoming.get(25)) {
        struct.cup = iprot.readI32();
        struct.setCupIsSet(true);
      }
      if (incoming.get(26)) {
        struct.freeIb = iprot.readI32();
        struct.setFreeIbIsSet(true);
      }
      if (incoming.get(27)) {
        struct.rechargeIb = iprot.readI32();
        struct.setRechargeIbIsSet(true);
      }
      if (incoming.get(28)) {
        {
          org.apache.thrift.protocol.TList _list98 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.intDayLoopCounterList = new ArrayList<Integer>(_list98.size);
          for (int _i99 = 0; _i99 < _list98.size; ++_i99)
          {
            int _elem100; // required
            _elem100 = iprot.readI32();
            struct.intDayLoopCounterList.add(_elem100);
          }
        }
        struct.setIntDayLoopCounterListIsSet(true);
      }
      if (incoming.get(29)) {
        struct.vipDiamond = iprot.readI32();
        struct.setVipDiamondIsSet(true);
      }
      if (incoming.get(30)) {
        {
          org.apache.thrift.protocol.TList _list101 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, iprot.readI32());
          struct.shortDayLoopCounterList = new ArrayList<Short>(_list101.size);
          for (int _i102 = 0; _i102 < _list101.size; ++_i102)
          {
            short _elem103; // required
            _elem103 = iprot.readI16();
            struct.shortDayLoopCounterList.add(_elem103);
          }
        }
        struct.setShortDayLoopCounterListIsSet(true);
      }
      if (incoming.get(31)) {
        {
          org.apache.thrift.protocol.TList _list104 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BYTE, iprot.readI32());
          struct.byteDayLoopCounterList = new ArrayList<Byte>(_list104.size);
          for (int _i105 = 0; _i105 < _list104.size; ++_i105)
          {
            byte _elem106; // required
            _elem106 = iprot.readByte();
            struct.byteDayLoopCounterList.add(_elem106);
          }
        }
        struct.setByteDayLoopCounterListIsSet(true);
      }
      if (incoming.get(32)) {
        struct.activeVal = iprot.readI32();
        struct.setActiveValIsSet(true);
      }
      if (incoming.get(33)) {
        struct.activeLevel = iprot.readByte();
        struct.setActiveLevelIsSet(true);
      }
      if (incoming.get(34)) {
        struct.totalRecharge = iprot.readI32();
        struct.setTotalRechargeIsSet(true);
      }
      if (incoming.get(35)) {
        struct.tagId = iprot.readI16();
        struct.setTagIdIsSet(true);
      }
      if (incoming.get(36)) {
        struct.awordVersion = iprot.readI32();
        struct.setAwordVersionIsSet(true);
      }
      if (incoming.get(37)) {
        struct.guildId = iprot.readI64();
        struct.setGuildIdIsSet(true);
      }
      if (incoming.get(38)) {
        struct.guildName = iprot.readString();
        struct.setGuildNameIsSet(true);
      }
      if (incoming.get(39)) {
        struct.mailPageSize = iprot.readI32();
        struct.setMailPageSizeIsSet(true);
      }
      if (incoming.get(40)) {
        struct.nonPointIb = iprot.readI32();
        struct.setNonPointIbIsSet(true);
      }
      if (incoming.get(41)) {
        struct.bindEmail = iprot.readString();
        struct.setBindEmailIsSet(true);
      }
      if (incoming.get(42)) {
        struct.friendType = iprot.readI32();
        struct.setFriendTypeIsSet(true);
      }
      if (incoming.get(43)) {
        struct.skinColor = iprot.readI32();
        struct.setSkinColorIsSet(true);
      }
      if (incoming.get(44)) {
        struct.starLightLevel = iprot.readI16();
        struct.setStarLightLevelIsSet(true);
      }
      if (incoming.get(45)) {
        struct.starLights = iprot.readI32();
        struct.setStarLightsIsSet(true);
      }
      if (incoming.get(46)) {
        struct.gameServerId = iprot.readString();
        struct.setGameServerIdIsSet(true);
      }
      if (incoming.get(47)) {
        struct.gameServerName = iprot.readString();
        struct.setGameServerNameIsSet(true);
      }
      if (incoming.get(48)) {
        {
          org.apache.thrift.protocol.TList _list107 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.putOnBadges = new ArrayList<com.ling9527.music.common.msg.auto.BadgeInfo>(_list107.size);
          for (int _i108 = 0; _i108 < _list107.size; ++_i108)
          {
            com.ling9527.music.common.msg.auto.BadgeInfo _elem109; // required
            _elem109 = new com.ling9527.music.common.msg.auto.BadgeInfo();
            _elem109.read(iprot);
            struct.putOnBadges.add(_elem109);
          }
        }
        struct.setPutOnBadgesIsSet(true);
      }
      if (incoming.get(49)) {
        {
          org.apache.thrift.protocol.TMap _map110 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.BYTE, org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.usedFashionIds = new HashMap<Byte,Integer>(2*_map110.size);
          for (int _i111 = 0; _i111 < _map110.size; ++_i111)
          {
            byte _key112; // required
            int _val113; // required
            _key112 = iprot.readByte();
            _val113 = iprot.readI32();
            struct.usedFashionIds.put(_key112, _val113);
          }
        }
        struct.setUsedFashionIdsIsSet(true);
      }
      if (incoming.get(50)) {
        struct.largesse = iprot.readI32();
        struct.setLargesseIsSet(true);
      }
      if (incoming.get(51)) {
        struct.charm = iprot.readI32();
        struct.setCharmIsSet(true);
      }
      if (incoming.get(52)) {
        struct.hasSign = iprot.readBool();
        struct.setHasSignIsSet(true);
      }
      if (incoming.get(53)) {
        struct.guildDegree = com.ling9527.music.common.msg.auto.GuildDegree.findByValue(iprot.readI32());
        struct.setGuildDegreeIsSet(true);
      }
      if (incoming.get(54)) {
        struct.activityUIStatus = ActivityUIStatus.findByValue(iprot.readI32());
        struct.setActivityUIStatusIsSet(true);
      }
    }
  }

}

