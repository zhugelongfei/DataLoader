/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DynamicInputInfo implements org.apache.thrift.TBase<DynamicInputInfo, DynamicInputInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DynamicInputInfo");

  private static final org.apache.thrift.protocol.TField INPUT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("inputType", org.apache.thrift.protocol.TType.BYTE, (short)1);
  private static final org.apache.thrift.protocol.TField RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("result", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField COMBO_FIELD_DESC = new org.apache.thrift.protocol.TField("combo", org.apache.thrift.protocol.TType.BYTE, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DynamicInputInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DynamicInputInfoTupleSchemeFactory());
  }

  public byte inputType; // required
  public byte result; // required
  public byte combo; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INPUT_TYPE((short)1, "inputType"),
    RESULT((short)2, "result"),
    COMBO((short)3, "combo");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INPUT_TYPE
          return INPUT_TYPE;
        case 2: // RESULT
          return RESULT;
        case 3: // COMBO
          return COMBO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INPUTTYPE_ISSET_ID = 0;
  private static final int __RESULT_ISSET_ID = 1;
  private static final int __COMBO_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INPUT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("inputType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.RESULT, new org.apache.thrift.meta_data.FieldMetaData("result", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.COMBO, new org.apache.thrift.meta_data.FieldMetaData("combo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DynamicInputInfo.class, metaDataMap);
  }

  public DynamicInputInfo() {
  }

  public DynamicInputInfo(
    byte inputType,
    byte result,
    byte combo)
  {
    this();
    this.inputType = inputType;
    setInputTypeIsSet(true);
    this.result = result;
    setResultIsSet(true);
    this.combo = combo;
    setComboIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DynamicInputInfo(DynamicInputInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.inputType = other.inputType;
    this.result = other.result;
    this.combo = other.combo;
  }

  public DynamicInputInfo deepCopy() {
    return new DynamicInputInfo(this);
  }

  @Override
  public void clear() {
    setInputTypeIsSet(false);
    this.inputType = 0;
    setResultIsSet(false);
    this.result = 0;
    setComboIsSet(false);
    this.combo = 0;
  }

  public byte getInputType() {
    return this.inputType;
  }

  public DynamicInputInfo setInputType(byte inputType) {
    this.inputType = inputType;
    setInputTypeIsSet(true);
    return this;
  }

  public void unsetInputType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INPUTTYPE_ISSET_ID);
  }

  /** Returns true if field inputType is set (has been assigned a value) and false otherwise */
  public boolean isSetInputType() {
    return EncodingUtils.testBit(__isset_bitfield, __INPUTTYPE_ISSET_ID);
  }

  public void setInputTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INPUTTYPE_ISSET_ID, value);
  }

  public byte getResult() {
    return this.result;
  }

  public DynamicInputInfo setResult(byte result) {
    this.result = result;
    setResultIsSet(true);
    return this;
  }

  public void unsetResult() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RESULT_ISSET_ID);
  }

  /** Returns true if field result is set (has been assigned a value) and false otherwise */
  public boolean isSetResult() {
    return EncodingUtils.testBit(__isset_bitfield, __RESULT_ISSET_ID);
  }

  public void setResultIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RESULT_ISSET_ID, value);
  }

  public byte getCombo() {
    return this.combo;
  }

  public DynamicInputInfo setCombo(byte combo) {
    this.combo = combo;
    setComboIsSet(true);
    return this;
  }

  public void unsetCombo() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMBO_ISSET_ID);
  }

  /** Returns true if field combo is set (has been assigned a value) and false otherwise */
  public boolean isSetCombo() {
    return EncodingUtils.testBit(__isset_bitfield, __COMBO_ISSET_ID);
  }

  public void setComboIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMBO_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INPUT_TYPE:
      if (value == null) {
        unsetInputType();
      } else {
        setInputType((Byte)value);
      }
      break;

    case RESULT:
      if (value == null) {
        unsetResult();
      } else {
        setResult((Byte)value);
      }
      break;

    case COMBO:
      if (value == null) {
        unsetCombo();
      } else {
        setCombo((Byte)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INPUT_TYPE:
      return Byte.valueOf(getInputType());

    case RESULT:
      return Byte.valueOf(getResult());

    case COMBO:
      return Byte.valueOf(getCombo());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INPUT_TYPE:
      return isSetInputType();
    case RESULT:
      return isSetResult();
    case COMBO:
      return isSetCombo();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DynamicInputInfo)
      return this.equals((DynamicInputInfo)that);
    return false;
  }

  public boolean equals(DynamicInputInfo that) {
    if (that == null)
      return false;

    boolean this_present_inputType = true;
    boolean that_present_inputType = true;
    if (this_present_inputType || that_present_inputType) {
      if (!(this_present_inputType && that_present_inputType))
        return false;
      if (this.inputType != that.inputType)
        return false;
    }

    boolean this_present_result = true;
    boolean that_present_result = true;
    if (this_present_result || that_present_result) {
      if (!(this_present_result && that_present_result))
        return false;
      if (this.result != that.result)
        return false;
    }

    boolean this_present_combo = true;
    boolean that_present_combo = true;
    if (this_present_combo || that_present_combo) {
      if (!(this_present_combo && that_present_combo))
        return false;
      if (this.combo != that.combo)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(DynamicInputInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    DynamicInputInfo typedOther = (DynamicInputInfo)other;

    lastComparison = Boolean.valueOf(isSetInputType()).compareTo(typedOther.isSetInputType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInputType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inputType, typedOther.inputType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResult()).compareTo(typedOther.isSetResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.result, typedOther.result);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCombo()).compareTo(typedOther.isSetCombo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCombo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.combo, typedOther.combo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DynamicInputInfo(");
    boolean first = true;

    sb.append("inputType:");
    sb.append(this.inputType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("result:");
    sb.append(this.result);
    first = false;
    if (!first) sb.append(", ");
    sb.append("combo:");
    sb.append(this.combo);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DynamicInputInfoStandardSchemeFactory implements SchemeFactory {
    public DynamicInputInfoStandardScheme getScheme() {
      return new DynamicInputInfoStandardScheme();
    }
  }

  private static class DynamicInputInfoStandardScheme extends StandardScheme<DynamicInputInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DynamicInputInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INPUT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.inputType = iprot.readByte();
              struct.setInputTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.result = iprot.readByte();
              struct.setResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMBO
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.combo = iprot.readByte();
              struct.setComboIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DynamicInputInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(INPUT_TYPE_FIELD_DESC);
      oprot.writeByte(struct.inputType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RESULT_FIELD_DESC);
      oprot.writeByte(struct.result);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COMBO_FIELD_DESC);
      oprot.writeByte(struct.combo);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DynamicInputInfoTupleSchemeFactory implements SchemeFactory {
    public DynamicInputInfoTupleScheme getScheme() {
      return new DynamicInputInfoTupleScheme();
    }
  }

  private static class DynamicInputInfoTupleScheme extends TupleScheme<DynamicInputInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DynamicInputInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetInputType()) {
        optionals.set(0);
      }
      if (struct.isSetResult()) {
        optionals.set(1);
      }
      if (struct.isSetCombo()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetInputType()) {
        oprot.writeByte(struct.inputType);
      }
      if (struct.isSetResult()) {
        oprot.writeByte(struct.result);
      }
      if (struct.isSetCombo()) {
        oprot.writeByte(struct.combo);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DynamicInputInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.inputType = iprot.readByte();
        struct.setInputTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.result = iprot.readByte();
        struct.setResultIsSet(true);
      }
      if (incoming.get(2)) {
        struct.combo = iprot.readByte();
        struct.setComboIsSet(true);
      }
    }
  }

}

