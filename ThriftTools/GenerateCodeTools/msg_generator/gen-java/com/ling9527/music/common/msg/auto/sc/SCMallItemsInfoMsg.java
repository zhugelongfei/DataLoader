/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SCMallItemsInfoMsg implements org.apache.thrift.TBase<SCMallItemsInfoMsg, SCMallItemsInfoMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCMallItemsInfoMsg");

  private static final org.apache.thrift.protocol.TField FIRST_CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("firstCategory", org.apache.thrift.protocol.TType.BYTE, (short)1);
  private static final org.apache.thrift.protocol.TField SECOND_CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("secondCategory", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField THIRD_CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("thirdCategory", org.apache.thrift.protocol.TType.BYTE, (short)3);
  private static final org.apache.thrift.protocol.TField SEX_FIELD_DESC = new org.apache.thrift.protocol.TField("sex", org.apache.thrift.protocol.TType.BYTE, (short)4);
  private static final org.apache.thrift.protocol.TField SORT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("sortType", org.apache.thrift.protocol.TType.BYTE, (short)5);
  private static final org.apache.thrift.protocol.TField MALL_ITEM_PAGE_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("mallItemPageInfos", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField IS_LIMIT_MALL_FIELD_DESC = new org.apache.thrift.protocol.TField("isLimitMall", org.apache.thrift.protocol.TType.BOOL, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCMallItemsInfoMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCMallItemsInfoMsgTupleSchemeFactory());
  }

  public byte firstCategory; // optional
  public byte secondCategory; // optional
  public byte thirdCategory; // optional
  public byte sex; // optional
  public byte sortType; // optional
  /**
   * 商城物品分页信息
   */
  public com.ling9527.music.common.msg.auto.CommonDataPageInfos mallItemPageInfos; // required
  /**
   * 是否限时商城
   */
  public boolean isLimitMall; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FIRST_CATEGORY((short)1, "firstCategory"),
    SECOND_CATEGORY((short)2, "secondCategory"),
    THIRD_CATEGORY((short)3, "thirdCategory"),
    SEX((short)4, "sex"),
    SORT_TYPE((short)5, "sortType"),
    /**
     * 商城物品分页信息
     */
    MALL_ITEM_PAGE_INFOS((short)6, "mallItemPageInfos"),
    /**
     * 是否限时商城
     */
    IS_LIMIT_MALL((short)7, "isLimitMall");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FIRST_CATEGORY
          return FIRST_CATEGORY;
        case 2: // SECOND_CATEGORY
          return SECOND_CATEGORY;
        case 3: // THIRD_CATEGORY
          return THIRD_CATEGORY;
        case 4: // SEX
          return SEX;
        case 5: // SORT_TYPE
          return SORT_TYPE;
        case 6: // MALL_ITEM_PAGE_INFOS
          return MALL_ITEM_PAGE_INFOS;
        case 7: // IS_LIMIT_MALL
          return IS_LIMIT_MALL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FIRSTCATEGORY_ISSET_ID = 0;
  private static final int __SECONDCATEGORY_ISSET_ID = 1;
  private static final int __THIRDCATEGORY_ISSET_ID = 2;
  private static final int __SEX_ISSET_ID = 3;
  private static final int __SORTTYPE_ISSET_ID = 4;
  private static final int __ISLIMITMALL_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.FIRST_CATEGORY,_Fields.SECOND_CATEGORY,_Fields.THIRD_CATEGORY,_Fields.SEX,_Fields.SORT_TYPE,_Fields.IS_LIMIT_MALL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FIRST_CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("firstCategory", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.SECOND_CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("secondCategory", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.THIRD_CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("thirdCategory", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.SEX, new org.apache.thrift.meta_data.FieldMetaData("sex", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.SORT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("sortType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.MALL_ITEM_PAGE_INFOS, new org.apache.thrift.meta_data.FieldMetaData("mallItemPageInfos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.CommonDataPageInfos.class)));
    tmpMap.put(_Fields.IS_LIMIT_MALL, new org.apache.thrift.meta_data.FieldMetaData("isLimitMall", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCMallItemsInfoMsg.class, metaDataMap);
  }

  public SCMallItemsInfoMsg() {
  }

  public SCMallItemsInfoMsg(
    com.ling9527.music.common.msg.auto.CommonDataPageInfos mallItemPageInfos)
  {
    this();
    this.mallItemPageInfos = mallItemPageInfos;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCMallItemsInfoMsg(SCMallItemsInfoMsg other) {
    __isset_bitfield = other.__isset_bitfield;
    this.firstCategory = other.firstCategory;
    this.secondCategory = other.secondCategory;
    this.thirdCategory = other.thirdCategory;
    this.sex = other.sex;
    this.sortType = other.sortType;
    if (other.isSetMallItemPageInfos()) {
      this.mallItemPageInfos = new com.ling9527.music.common.msg.auto.CommonDataPageInfos(other.mallItemPageInfos);
    }
    this.isLimitMall = other.isLimitMall;
  }

  public SCMallItemsInfoMsg deepCopy() {
    return new SCMallItemsInfoMsg(this);
  }

  @Override
  public void clear() {
    setFirstCategoryIsSet(false);
    this.firstCategory = 0;
    setSecondCategoryIsSet(false);
    this.secondCategory = 0;
    setThirdCategoryIsSet(false);
    this.thirdCategory = 0;
    setSexIsSet(false);
    this.sex = 0;
    setSortTypeIsSet(false);
    this.sortType = 0;
    this.mallItemPageInfos = null;
    setIsLimitMallIsSet(false);
    this.isLimitMall = false;
  }

  public byte getFirstCategory() {
    return this.firstCategory;
  }

  public SCMallItemsInfoMsg setFirstCategory(byte firstCategory) {
    this.firstCategory = firstCategory;
    setFirstCategoryIsSet(true);
    return this;
  }

  public void unsetFirstCategory() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIRSTCATEGORY_ISSET_ID);
  }

  /** Returns true if field firstCategory is set (has been assigned a value) and false otherwise */
  public boolean isSetFirstCategory() {
    return EncodingUtils.testBit(__isset_bitfield, __FIRSTCATEGORY_ISSET_ID);
  }

  public void setFirstCategoryIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIRSTCATEGORY_ISSET_ID, value);
  }

  public byte getSecondCategory() {
    return this.secondCategory;
  }

  public SCMallItemsInfoMsg setSecondCategory(byte secondCategory) {
    this.secondCategory = secondCategory;
    setSecondCategoryIsSet(true);
    return this;
  }

  public void unsetSecondCategory() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SECONDCATEGORY_ISSET_ID);
  }

  /** Returns true if field secondCategory is set (has been assigned a value) and false otherwise */
  public boolean isSetSecondCategory() {
    return EncodingUtils.testBit(__isset_bitfield, __SECONDCATEGORY_ISSET_ID);
  }

  public void setSecondCategoryIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SECONDCATEGORY_ISSET_ID, value);
  }

  public byte getThirdCategory() {
    return this.thirdCategory;
  }

  public SCMallItemsInfoMsg setThirdCategory(byte thirdCategory) {
    this.thirdCategory = thirdCategory;
    setThirdCategoryIsSet(true);
    return this;
  }

  public void unsetThirdCategory() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __THIRDCATEGORY_ISSET_ID);
  }

  /** Returns true if field thirdCategory is set (has been assigned a value) and false otherwise */
  public boolean isSetThirdCategory() {
    return EncodingUtils.testBit(__isset_bitfield, __THIRDCATEGORY_ISSET_ID);
  }

  public void setThirdCategoryIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __THIRDCATEGORY_ISSET_ID, value);
  }

  public byte getSex() {
    return this.sex;
  }

  public SCMallItemsInfoMsg setSex(byte sex) {
    this.sex = sex;
    setSexIsSet(true);
    return this;
  }

  public void unsetSex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEX_ISSET_ID);
  }

  /** Returns true if field sex is set (has been assigned a value) and false otherwise */
  public boolean isSetSex() {
    return EncodingUtils.testBit(__isset_bitfield, __SEX_ISSET_ID);
  }

  public void setSexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEX_ISSET_ID, value);
  }

  public byte getSortType() {
    return this.sortType;
  }

  public SCMallItemsInfoMsg setSortType(byte sortType) {
    this.sortType = sortType;
    setSortTypeIsSet(true);
    return this;
  }

  public void unsetSortType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SORTTYPE_ISSET_ID);
  }

  /** Returns true if field sortType is set (has been assigned a value) and false otherwise */
  public boolean isSetSortType() {
    return EncodingUtils.testBit(__isset_bitfield, __SORTTYPE_ISSET_ID);
  }

  public void setSortTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SORTTYPE_ISSET_ID, value);
  }

  /**
   * 商城物品分页信息
   */
  public com.ling9527.music.common.msg.auto.CommonDataPageInfos getMallItemPageInfos() {
    return this.mallItemPageInfos;
  }

  /**
   * 商城物品分页信息
   */
  public SCMallItemsInfoMsg setMallItemPageInfos(com.ling9527.music.common.msg.auto.CommonDataPageInfos mallItemPageInfos) {
    this.mallItemPageInfos = mallItemPageInfos;
    return this;
  }

  public void unsetMallItemPageInfos() {
    this.mallItemPageInfos = null;
  }

  /** Returns true if field mallItemPageInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetMallItemPageInfos() {
    return this.mallItemPageInfos != null;
  }

  public void setMallItemPageInfosIsSet(boolean value) {
    if (!value) {
      this.mallItemPageInfos = null;
    }
  }

  /**
   * 是否限时商城
   */
  public boolean isIsLimitMall() {
    return this.isLimitMall;
  }

  /**
   * 是否限时商城
   */
  public SCMallItemsInfoMsg setIsLimitMall(boolean isLimitMall) {
    this.isLimitMall = isLimitMall;
    setIsLimitMallIsSet(true);
    return this;
  }

  public void unsetIsLimitMall() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISLIMITMALL_ISSET_ID);
  }

  /** Returns true if field isLimitMall is set (has been assigned a value) and false otherwise */
  public boolean isSetIsLimitMall() {
    return EncodingUtils.testBit(__isset_bitfield, __ISLIMITMALL_ISSET_ID);
  }

  public void setIsLimitMallIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISLIMITMALL_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FIRST_CATEGORY:
      if (value == null) {
        unsetFirstCategory();
      } else {
        setFirstCategory((Byte)value);
      }
      break;

    case SECOND_CATEGORY:
      if (value == null) {
        unsetSecondCategory();
      } else {
        setSecondCategory((Byte)value);
      }
      break;

    case THIRD_CATEGORY:
      if (value == null) {
        unsetThirdCategory();
      } else {
        setThirdCategory((Byte)value);
      }
      break;

    case SEX:
      if (value == null) {
        unsetSex();
      } else {
        setSex((Byte)value);
      }
      break;

    case SORT_TYPE:
      if (value == null) {
        unsetSortType();
      } else {
        setSortType((Byte)value);
      }
      break;

    case MALL_ITEM_PAGE_INFOS:
      if (value == null) {
        unsetMallItemPageInfos();
      } else {
        setMallItemPageInfos((com.ling9527.music.common.msg.auto.CommonDataPageInfos)value);
      }
      break;

    case IS_LIMIT_MALL:
      if (value == null) {
        unsetIsLimitMall();
      } else {
        setIsLimitMall((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FIRST_CATEGORY:
      return Byte.valueOf(getFirstCategory());

    case SECOND_CATEGORY:
      return Byte.valueOf(getSecondCategory());

    case THIRD_CATEGORY:
      return Byte.valueOf(getThirdCategory());

    case SEX:
      return Byte.valueOf(getSex());

    case SORT_TYPE:
      return Byte.valueOf(getSortType());

    case MALL_ITEM_PAGE_INFOS:
      return getMallItemPageInfos();

    case IS_LIMIT_MALL:
      return Boolean.valueOf(isIsLimitMall());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FIRST_CATEGORY:
      return isSetFirstCategory();
    case SECOND_CATEGORY:
      return isSetSecondCategory();
    case THIRD_CATEGORY:
      return isSetThirdCategory();
    case SEX:
      return isSetSex();
    case SORT_TYPE:
      return isSetSortType();
    case MALL_ITEM_PAGE_INFOS:
      return isSetMallItemPageInfos();
    case IS_LIMIT_MALL:
      return isSetIsLimitMall();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCMallItemsInfoMsg)
      return this.equals((SCMallItemsInfoMsg)that);
    return false;
  }

  public boolean equals(SCMallItemsInfoMsg that) {
    if (that == null)
      return false;

    boolean this_present_firstCategory = true && this.isSetFirstCategory();
    boolean that_present_firstCategory = true && that.isSetFirstCategory();
    if (this_present_firstCategory || that_present_firstCategory) {
      if (!(this_present_firstCategory && that_present_firstCategory))
        return false;
      if (this.firstCategory != that.firstCategory)
        return false;
    }

    boolean this_present_secondCategory = true && this.isSetSecondCategory();
    boolean that_present_secondCategory = true && that.isSetSecondCategory();
    if (this_present_secondCategory || that_present_secondCategory) {
      if (!(this_present_secondCategory && that_present_secondCategory))
        return false;
      if (this.secondCategory != that.secondCategory)
        return false;
    }

    boolean this_present_thirdCategory = true && this.isSetThirdCategory();
    boolean that_present_thirdCategory = true && that.isSetThirdCategory();
    if (this_present_thirdCategory || that_present_thirdCategory) {
      if (!(this_present_thirdCategory && that_present_thirdCategory))
        return false;
      if (this.thirdCategory != that.thirdCategory)
        return false;
    }

    boolean this_present_sex = true && this.isSetSex();
    boolean that_present_sex = true && that.isSetSex();
    if (this_present_sex || that_present_sex) {
      if (!(this_present_sex && that_present_sex))
        return false;
      if (this.sex != that.sex)
        return false;
    }

    boolean this_present_sortType = true && this.isSetSortType();
    boolean that_present_sortType = true && that.isSetSortType();
    if (this_present_sortType || that_present_sortType) {
      if (!(this_present_sortType && that_present_sortType))
        return false;
      if (this.sortType != that.sortType)
        return false;
    }

    boolean this_present_mallItemPageInfos = true && this.isSetMallItemPageInfos();
    boolean that_present_mallItemPageInfos = true && that.isSetMallItemPageInfos();
    if (this_present_mallItemPageInfos || that_present_mallItemPageInfos) {
      if (!(this_present_mallItemPageInfos && that_present_mallItemPageInfos))
        return false;
      if (!this.mallItemPageInfos.equals(that.mallItemPageInfos))
        return false;
    }

    boolean this_present_isLimitMall = true && this.isSetIsLimitMall();
    boolean that_present_isLimitMall = true && that.isSetIsLimitMall();
    if (this_present_isLimitMall || that_present_isLimitMall) {
      if (!(this_present_isLimitMall && that_present_isLimitMall))
        return false;
      if (this.isLimitMall != that.isLimitMall)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCMallItemsInfoMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCMallItemsInfoMsg typedOther = (SCMallItemsInfoMsg)other;

    lastComparison = Boolean.valueOf(isSetFirstCategory()).compareTo(typedOther.isSetFirstCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFirstCategory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firstCategory, typedOther.firstCategory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSecondCategory()).compareTo(typedOther.isSetSecondCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSecondCategory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secondCategory, typedOther.secondCategory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThirdCategory()).compareTo(typedOther.isSetThirdCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThirdCategory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thirdCategory, typedOther.thirdCategory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSex()).compareTo(typedOther.isSetSex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sex, typedOther.sex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSortType()).compareTo(typedOther.isSetSortType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSortType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortType, typedOther.sortType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMallItemPageInfos()).compareTo(typedOther.isSetMallItemPageInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMallItemPageInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mallItemPageInfos, typedOther.mallItemPageInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsLimitMall()).compareTo(typedOther.isSetIsLimitMall());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsLimitMall()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isLimitMall, typedOther.isLimitMall);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCMallItemsInfoMsg(");
    boolean first = true;

    if (isSetFirstCategory()) {
      sb.append("firstCategory:");
      sb.append(this.firstCategory);
      first = false;
    }
    if (isSetSecondCategory()) {
      if (!first) sb.append(", ");
      sb.append("secondCategory:");
      sb.append(this.secondCategory);
      first = false;
    }
    if (isSetThirdCategory()) {
      if (!first) sb.append(", ");
      sb.append("thirdCategory:");
      sb.append(this.thirdCategory);
      first = false;
    }
    if (isSetSex()) {
      if (!first) sb.append(", ");
      sb.append("sex:");
      sb.append(this.sex);
      first = false;
    }
    if (isSetSortType()) {
      if (!first) sb.append(", ");
      sb.append("sortType:");
      sb.append(this.sortType);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("mallItemPageInfos:");
    if (this.mallItemPageInfos == null) {
      sb.append("null");
    } else {
      sb.append(this.mallItemPageInfos);
    }
    first = false;
    if (isSetIsLimitMall()) {
      if (!first) sb.append(", ");
      sb.append("isLimitMall:");
      sb.append(this.isLimitMall);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (mallItemPageInfos != null) {
      mallItemPageInfos.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCMallItemsInfoMsgStandardSchemeFactory implements SchemeFactory {
    public SCMallItemsInfoMsgStandardScheme getScheme() {
      return new SCMallItemsInfoMsgStandardScheme();
    }
  }

  private static class SCMallItemsInfoMsgStandardScheme extends StandardScheme<SCMallItemsInfoMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCMallItemsInfoMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FIRST_CATEGORY
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.firstCategory = iprot.readByte();
              struct.setFirstCategoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SECOND_CATEGORY
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.secondCategory = iprot.readByte();
              struct.setSecondCategoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // THIRD_CATEGORY
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.thirdCategory = iprot.readByte();
              struct.setThirdCategoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SEX
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.sex = iprot.readByte();
              struct.setSexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SORT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.sortType = iprot.readByte();
              struct.setSortTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MALL_ITEM_PAGE_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.mallItemPageInfos = new com.ling9527.music.common.msg.auto.CommonDataPageInfos();
              struct.mallItemPageInfos.read(iprot);
              struct.setMallItemPageInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IS_LIMIT_MALL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isLimitMall = iprot.readBool();
              struct.setIsLimitMallIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCMallItemsInfoMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetFirstCategory()) {
        oprot.writeFieldBegin(FIRST_CATEGORY_FIELD_DESC);
        oprot.writeByte(struct.firstCategory);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSecondCategory()) {
        oprot.writeFieldBegin(SECOND_CATEGORY_FIELD_DESC);
        oprot.writeByte(struct.secondCategory);
        oprot.writeFieldEnd();
      }
      if (struct.isSetThirdCategory()) {
        oprot.writeFieldBegin(THIRD_CATEGORY_FIELD_DESC);
        oprot.writeByte(struct.thirdCategory);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSex()) {
        oprot.writeFieldBegin(SEX_FIELD_DESC);
        oprot.writeByte(struct.sex);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSortType()) {
        oprot.writeFieldBegin(SORT_TYPE_FIELD_DESC);
        oprot.writeByte(struct.sortType);
        oprot.writeFieldEnd();
      }
      if (struct.mallItemPageInfos != null) {
        oprot.writeFieldBegin(MALL_ITEM_PAGE_INFOS_FIELD_DESC);
        struct.mallItemPageInfos.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsLimitMall()) {
        oprot.writeFieldBegin(IS_LIMIT_MALL_FIELD_DESC);
        oprot.writeBool(struct.isLimitMall);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCMallItemsInfoMsgTupleSchemeFactory implements SchemeFactory {
    public SCMallItemsInfoMsgTupleScheme getScheme() {
      return new SCMallItemsInfoMsgTupleScheme();
    }
  }

  private static class SCMallItemsInfoMsgTupleScheme extends TupleScheme<SCMallItemsInfoMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCMallItemsInfoMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetFirstCategory()) {
        optionals.set(0);
      }
      if (struct.isSetSecondCategory()) {
        optionals.set(1);
      }
      if (struct.isSetThirdCategory()) {
        optionals.set(2);
      }
      if (struct.isSetSex()) {
        optionals.set(3);
      }
      if (struct.isSetSortType()) {
        optionals.set(4);
      }
      if (struct.isSetMallItemPageInfos()) {
        optionals.set(5);
      }
      if (struct.isSetIsLimitMall()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetFirstCategory()) {
        oprot.writeByte(struct.firstCategory);
      }
      if (struct.isSetSecondCategory()) {
        oprot.writeByte(struct.secondCategory);
      }
      if (struct.isSetThirdCategory()) {
        oprot.writeByte(struct.thirdCategory);
      }
      if (struct.isSetSex()) {
        oprot.writeByte(struct.sex);
      }
      if (struct.isSetSortType()) {
        oprot.writeByte(struct.sortType);
      }
      if (struct.isSetMallItemPageInfos()) {
        struct.mallItemPageInfos.write(oprot);
      }
      if (struct.isSetIsLimitMall()) {
        oprot.writeBool(struct.isLimitMall);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCMallItemsInfoMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.firstCategory = iprot.readByte();
        struct.setFirstCategoryIsSet(true);
      }
      if (incoming.get(1)) {
        struct.secondCategory = iprot.readByte();
        struct.setSecondCategoryIsSet(true);
      }
      if (incoming.get(2)) {
        struct.thirdCategory = iprot.readByte();
        struct.setThirdCategoryIsSet(true);
      }
      if (incoming.get(3)) {
        struct.sex = iprot.readByte();
        struct.setSexIsSet(true);
      }
      if (incoming.get(4)) {
        struct.sortType = iprot.readByte();
        struct.setSortTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.mallItemPageInfos = new com.ling9527.music.common.msg.auto.CommonDataPageInfos();
        struct.mallItemPageInfos.read(iprot);
        struct.setMallItemPageInfosIsSet(true);
      }
      if (incoming.get(6)) {
        struct.isLimitMall = iprot.readBool();
        struct.setIsLimitMallIsSet(true);
      }
    }
  }

}

