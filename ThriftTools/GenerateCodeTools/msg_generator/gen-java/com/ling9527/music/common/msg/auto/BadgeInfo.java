/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 徽章信息
 */
public class BadgeInfo implements org.apache.thrift.TBase<BadgeInfo, BadgeInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BadgeInfo");

  private static final org.apache.thrift.protocol.TField POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("position", org.apache.thrift.protocol.TType.I16, (short)1);
  private static final org.apache.thrift.protocol.TField BADGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("badgeId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField VALID_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("validTime", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField IS_NEW_FIELD_DESC = new org.apache.thrift.protocol.TField("isNew", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField HAS_PUT_ON_FIELD_DESC = new org.apache.thrift.protocol.TField("hasPutOn", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I32, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BadgeInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BadgeInfoTupleSchemeFactory());
  }

  /**
   * 位置
   */
  public short position; // required
  /**
   * 徽章id, 未佩戴为0, 表示徽章栏解锁
   */
  public int badgeId; // required
  /**
   * 有效截止时间, 0为永久
   */
  public long validTime; // optional
  /**
   * 是否新获得
   */
  public boolean isNew; // optional
  /**
   * 是否穿戴过
   */
  public boolean hasPutOn; // optional
  /**
   * 徽章创建时间(s)
   */
  public int createTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 位置
     */
    POSITION((short)1, "position"),
    /**
     * 徽章id, 未佩戴为0, 表示徽章栏解锁
     */
    BADGE_ID((short)2, "badgeId"),
    /**
     * 有效截止时间, 0为永久
     */
    VALID_TIME((short)3, "validTime"),
    /**
     * 是否新获得
     */
    IS_NEW((short)4, "isNew"),
    /**
     * 是否穿戴过
     */
    HAS_PUT_ON((short)5, "hasPutOn"),
    /**
     * 徽章创建时间(s)
     */
    CREATE_TIME((short)6, "createTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // POSITION
          return POSITION;
        case 2: // BADGE_ID
          return BADGE_ID;
        case 3: // VALID_TIME
          return VALID_TIME;
        case 4: // IS_NEW
          return IS_NEW;
        case 5: // HAS_PUT_ON
          return HAS_PUT_ON;
        case 6: // CREATE_TIME
          return CREATE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __POSITION_ISSET_ID = 0;
  private static final int __BADGEID_ISSET_ID = 1;
  private static final int __VALIDTIME_ISSET_ID = 2;
  private static final int __ISNEW_ISSET_ID = 3;
  private static final int __HASPUTON_ISSET_ID = 4;
  private static final int __CREATETIME_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.VALID_TIME,_Fields.IS_NEW,_Fields.HAS_PUT_ON};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.POSITION, new org.apache.thrift.meta_data.FieldMetaData("position", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.BADGE_ID, new org.apache.thrift.meta_data.FieldMetaData("badgeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VALID_TIME, new org.apache.thrift.meta_data.FieldMetaData("validTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IS_NEW, new org.apache.thrift.meta_data.FieldMetaData("isNew", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.HAS_PUT_ON, new org.apache.thrift.meta_data.FieldMetaData("hasPutOn", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BadgeInfo.class, metaDataMap);
  }

  public BadgeInfo() {
  }

  public BadgeInfo(
    short position,
    int badgeId,
    int createTime)
  {
    this();
    this.position = position;
    setPositionIsSet(true);
    this.badgeId = badgeId;
    setBadgeIdIsSet(true);
    this.createTime = createTime;
    setCreateTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BadgeInfo(BadgeInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.position = other.position;
    this.badgeId = other.badgeId;
    this.validTime = other.validTime;
    this.isNew = other.isNew;
    this.hasPutOn = other.hasPutOn;
    this.createTime = other.createTime;
  }

  public BadgeInfo deepCopy() {
    return new BadgeInfo(this);
  }

  @Override
  public void clear() {
    setPositionIsSet(false);
    this.position = 0;
    setBadgeIdIsSet(false);
    this.badgeId = 0;
    setValidTimeIsSet(false);
    this.validTime = 0;
    setIsNewIsSet(false);
    this.isNew = false;
    setHasPutOnIsSet(false);
    this.hasPutOn = false;
    setCreateTimeIsSet(false);
    this.createTime = 0;
  }

  /**
   * 位置
   */
  public short getPosition() {
    return this.position;
  }

  /**
   * 位置
   */
  public BadgeInfo setPosition(short position) {
    this.position = position;
    setPositionIsSet(true);
    return this;
  }

  public void unsetPosition() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITION_ISSET_ID);
  }

  /** Returns true if field position is set (has been assigned a value) and false otherwise */
  public boolean isSetPosition() {
    return EncodingUtils.testBit(__isset_bitfield, __POSITION_ISSET_ID);
  }

  public void setPositionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITION_ISSET_ID, value);
  }

  /**
   * 徽章id, 未佩戴为0, 表示徽章栏解锁
   */
  public int getBadgeId() {
    return this.badgeId;
  }

  /**
   * 徽章id, 未佩戴为0, 表示徽章栏解锁
   */
  public BadgeInfo setBadgeId(int badgeId) {
    this.badgeId = badgeId;
    setBadgeIdIsSet(true);
    return this;
  }

  public void unsetBadgeId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BADGEID_ISSET_ID);
  }

  /** Returns true if field badgeId is set (has been assigned a value) and false otherwise */
  public boolean isSetBadgeId() {
    return EncodingUtils.testBit(__isset_bitfield, __BADGEID_ISSET_ID);
  }

  public void setBadgeIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BADGEID_ISSET_ID, value);
  }

  /**
   * 有效截止时间, 0为永久
   */
  public long getValidTime() {
    return this.validTime;
  }

  /**
   * 有效截止时间, 0为永久
   */
  public BadgeInfo setValidTime(long validTime) {
    this.validTime = validTime;
    setValidTimeIsSet(true);
    return this;
  }

  public void unsetValidTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VALIDTIME_ISSET_ID);
  }

  /** Returns true if field validTime is set (has been assigned a value) and false otherwise */
  public boolean isSetValidTime() {
    return EncodingUtils.testBit(__isset_bitfield, __VALIDTIME_ISSET_ID);
  }

  public void setValidTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VALIDTIME_ISSET_ID, value);
  }

  /**
   * 是否新获得
   */
  public boolean isIsNew() {
    return this.isNew;
  }

  /**
   * 是否新获得
   */
  public BadgeInfo setIsNew(boolean isNew) {
    this.isNew = isNew;
    setIsNewIsSet(true);
    return this;
  }

  public void unsetIsNew() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISNEW_ISSET_ID);
  }

  /** Returns true if field isNew is set (has been assigned a value) and false otherwise */
  public boolean isSetIsNew() {
    return EncodingUtils.testBit(__isset_bitfield, __ISNEW_ISSET_ID);
  }

  public void setIsNewIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISNEW_ISSET_ID, value);
  }

  /**
   * 是否穿戴过
   */
  public boolean isHasPutOn() {
    return this.hasPutOn;
  }

  /**
   * 是否穿戴过
   */
  public BadgeInfo setHasPutOn(boolean hasPutOn) {
    this.hasPutOn = hasPutOn;
    setHasPutOnIsSet(true);
    return this;
  }

  public void unsetHasPutOn() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HASPUTON_ISSET_ID);
  }

  /** Returns true if field hasPutOn is set (has been assigned a value) and false otherwise */
  public boolean isSetHasPutOn() {
    return EncodingUtils.testBit(__isset_bitfield, __HASPUTON_ISSET_ID);
  }

  public void setHasPutOnIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HASPUTON_ISSET_ID, value);
  }

  /**
   * 徽章创建时间(s)
   */
  public int getCreateTime() {
    return this.createTime;
  }

  /**
   * 徽章创建时间(s)
   */
  public BadgeInfo setCreateTime(int createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case POSITION:
      if (value == null) {
        unsetPosition();
      } else {
        setPosition((Short)value);
      }
      break;

    case BADGE_ID:
      if (value == null) {
        unsetBadgeId();
      } else {
        setBadgeId((Integer)value);
      }
      break;

    case VALID_TIME:
      if (value == null) {
        unsetValidTime();
      } else {
        setValidTime((Long)value);
      }
      break;

    case IS_NEW:
      if (value == null) {
        unsetIsNew();
      } else {
        setIsNew((Boolean)value);
      }
      break;

    case HAS_PUT_ON:
      if (value == null) {
        unsetHasPutOn();
      } else {
        setHasPutOn((Boolean)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case POSITION:
      return Short.valueOf(getPosition());

    case BADGE_ID:
      return Integer.valueOf(getBadgeId());

    case VALID_TIME:
      return Long.valueOf(getValidTime());

    case IS_NEW:
      return Boolean.valueOf(isIsNew());

    case HAS_PUT_ON:
      return Boolean.valueOf(isHasPutOn());

    case CREATE_TIME:
      return Integer.valueOf(getCreateTime());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case POSITION:
      return isSetPosition();
    case BADGE_ID:
      return isSetBadgeId();
    case VALID_TIME:
      return isSetValidTime();
    case IS_NEW:
      return isSetIsNew();
    case HAS_PUT_ON:
      return isSetHasPutOn();
    case CREATE_TIME:
      return isSetCreateTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BadgeInfo)
      return this.equals((BadgeInfo)that);
    return false;
  }

  public boolean equals(BadgeInfo that) {
    if (that == null)
      return false;

    boolean this_present_position = true;
    boolean that_present_position = true;
    if (this_present_position || that_present_position) {
      if (!(this_present_position && that_present_position))
        return false;
      if (this.position != that.position)
        return false;
    }

    boolean this_present_badgeId = true;
    boolean that_present_badgeId = true;
    if (this_present_badgeId || that_present_badgeId) {
      if (!(this_present_badgeId && that_present_badgeId))
        return false;
      if (this.badgeId != that.badgeId)
        return false;
    }

    boolean this_present_validTime = true && this.isSetValidTime();
    boolean that_present_validTime = true && that.isSetValidTime();
    if (this_present_validTime || that_present_validTime) {
      if (!(this_present_validTime && that_present_validTime))
        return false;
      if (this.validTime != that.validTime)
        return false;
    }

    boolean this_present_isNew = true && this.isSetIsNew();
    boolean that_present_isNew = true && that.isSetIsNew();
    if (this_present_isNew || that_present_isNew) {
      if (!(this_present_isNew && that_present_isNew))
        return false;
      if (this.isNew != that.isNew)
        return false;
    }

    boolean this_present_hasPutOn = true && this.isSetHasPutOn();
    boolean that_present_hasPutOn = true && that.isSetHasPutOn();
    if (this_present_hasPutOn || that_present_hasPutOn) {
      if (!(this_present_hasPutOn && that_present_hasPutOn))
        return false;
      if (this.hasPutOn != that.hasPutOn)
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(BadgeInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    BadgeInfo typedOther = (BadgeInfo)other;

    lastComparison = Boolean.valueOf(isSetPosition()).compareTo(typedOther.isSetPosition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPosition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.position, typedOther.position);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBadgeId()).compareTo(typedOther.isSetBadgeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBadgeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.badgeId, typedOther.badgeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValidTime()).compareTo(typedOther.isSetValidTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValidTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validTime, typedOther.validTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsNew()).compareTo(typedOther.isSetIsNew());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsNew()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isNew, typedOther.isNew);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHasPutOn()).compareTo(typedOther.isSetHasPutOn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHasPutOn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasPutOn, typedOther.hasPutOn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(typedOther.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, typedOther.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BadgeInfo(");
    boolean first = true;

    sb.append("position:");
    sb.append(this.position);
    first = false;
    if (!first) sb.append(", ");
    sb.append("badgeId:");
    sb.append(this.badgeId);
    first = false;
    if (isSetValidTime()) {
      if (!first) sb.append(", ");
      sb.append("validTime:");
      sb.append(this.validTime);
      first = false;
    }
    if (isSetIsNew()) {
      if (!first) sb.append(", ");
      sb.append("isNew:");
      sb.append(this.isNew);
      first = false;
    }
    if (isSetHasPutOn()) {
      if (!first) sb.append(", ");
      sb.append("hasPutOn:");
      sb.append(this.hasPutOn);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BadgeInfoStandardSchemeFactory implements SchemeFactory {
    public BadgeInfoStandardScheme getScheme() {
      return new BadgeInfoStandardScheme();
    }
  }

  private static class BadgeInfoStandardScheme extends StandardScheme<BadgeInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BadgeInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // POSITION
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.position = iprot.readI16();
              struct.setPositionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BADGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.badgeId = iprot.readI32();
              struct.setBadgeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VALID_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.validTime = iprot.readI64();
              struct.setValidTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IS_NEW
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isNew = iprot.readBool();
              struct.setIsNewIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // HAS_PUT_ON
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.hasPutOn = iprot.readBool();
              struct.setHasPutOnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createTime = iprot.readI32();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BadgeInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(POSITION_FIELD_DESC);
      oprot.writeI16(struct.position);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BADGE_ID_FIELD_DESC);
      oprot.writeI32(struct.badgeId);
      oprot.writeFieldEnd();
      if (struct.isSetValidTime()) {
        oprot.writeFieldBegin(VALID_TIME_FIELD_DESC);
        oprot.writeI64(struct.validTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsNew()) {
        oprot.writeFieldBegin(IS_NEW_FIELD_DESC);
        oprot.writeBool(struct.isNew);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHasPutOn()) {
        oprot.writeFieldBegin(HAS_PUT_ON_FIELD_DESC);
        oprot.writeBool(struct.hasPutOn);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI32(struct.createTime);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BadgeInfoTupleSchemeFactory implements SchemeFactory {
    public BadgeInfoTupleScheme getScheme() {
      return new BadgeInfoTupleScheme();
    }
  }

  private static class BadgeInfoTupleScheme extends TupleScheme<BadgeInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BadgeInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPosition()) {
        optionals.set(0);
      }
      if (struct.isSetBadgeId()) {
        optionals.set(1);
      }
      if (struct.isSetValidTime()) {
        optionals.set(2);
      }
      if (struct.isSetIsNew()) {
        optionals.set(3);
      }
      if (struct.isSetHasPutOn()) {
        optionals.set(4);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetPosition()) {
        oprot.writeI16(struct.position);
      }
      if (struct.isSetBadgeId()) {
        oprot.writeI32(struct.badgeId);
      }
      if (struct.isSetValidTime()) {
        oprot.writeI64(struct.validTime);
      }
      if (struct.isSetIsNew()) {
        oprot.writeBool(struct.isNew);
      }
      if (struct.isSetHasPutOn()) {
        oprot.writeBool(struct.hasPutOn);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI32(struct.createTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BadgeInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.position = iprot.readI16();
        struct.setPositionIsSet(true);
      }
      if (incoming.get(1)) {
        struct.badgeId = iprot.readI32();
        struct.setBadgeIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.validTime = iprot.readI64();
        struct.setValidTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.isNew = iprot.readBool();
        struct.setIsNewIsSet(true);
      }
      if (incoming.get(4)) {
        struct.hasPutOn = iprot.readBool();
        struct.setHasPutOnIsSet(true);
      }
      if (incoming.get(5)) {
        struct.createTime = iprot.readI32();
        struct.setCreateTimeIsSet(true);
      }
    }
  }

}

