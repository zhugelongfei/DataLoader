/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SCBodyItemsInfoMsg implements org.apache.thrift.TBase<SCBodyItemsInfoMsg, SCBodyItemsInfoMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCBodyItemsInfoMsg");

  private static final org.apache.thrift.protocol.TField AVATAR_ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("avatarItems", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField VIP_AVATAR_INFO_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("vipAvatarInfoList", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCBodyItemsInfoMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCBodyItemsInfoMsgTupleSchemeFactory());
  }

  public List<com.ling9527.music.common.msg.auto.AvatarItemInfo> avatarItems; // required
  public List<com.ling9527.music.common.msg.auto.AvatarInfo> vipAvatarInfoList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    AVATAR_ITEMS((short)1, "avatarItems"),
    VIP_AVATAR_INFO_LIST((short)2, "vipAvatarInfoList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // AVATAR_ITEMS
          return AVATAR_ITEMS;
        case 2: // VIP_AVATAR_INFO_LIST
          return VIP_AVATAR_INFO_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.AVATAR_ITEMS, new org.apache.thrift.meta_data.FieldMetaData("avatarItems", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.AvatarItemInfo.class))));
    tmpMap.put(_Fields.VIP_AVATAR_INFO_LIST, new org.apache.thrift.meta_data.FieldMetaData("vipAvatarInfoList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.AvatarInfo.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCBodyItemsInfoMsg.class, metaDataMap);
  }

  public SCBodyItemsInfoMsg() {
  }

  public SCBodyItemsInfoMsg(
    List<com.ling9527.music.common.msg.auto.AvatarItemInfo> avatarItems,
    List<com.ling9527.music.common.msg.auto.AvatarInfo> vipAvatarInfoList)
  {
    this();
    this.avatarItems = avatarItems;
    this.vipAvatarInfoList = vipAvatarInfoList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCBodyItemsInfoMsg(SCBodyItemsInfoMsg other) {
    if (other.isSetAvatarItems()) {
      List<com.ling9527.music.common.msg.auto.AvatarItemInfo> __this__avatarItems = new ArrayList<com.ling9527.music.common.msg.auto.AvatarItemInfo>();
      for (com.ling9527.music.common.msg.auto.AvatarItemInfo other_element : other.avatarItems) {
        __this__avatarItems.add(new com.ling9527.music.common.msg.auto.AvatarItemInfo(other_element));
      }
      this.avatarItems = __this__avatarItems;
    }
    if (other.isSetVipAvatarInfoList()) {
      List<com.ling9527.music.common.msg.auto.AvatarInfo> __this__vipAvatarInfoList = new ArrayList<com.ling9527.music.common.msg.auto.AvatarInfo>();
      for (com.ling9527.music.common.msg.auto.AvatarInfo other_element : other.vipAvatarInfoList) {
        __this__vipAvatarInfoList.add(new com.ling9527.music.common.msg.auto.AvatarInfo(other_element));
      }
      this.vipAvatarInfoList = __this__vipAvatarInfoList;
    }
  }

  public SCBodyItemsInfoMsg deepCopy() {
    return new SCBodyItemsInfoMsg(this);
  }

  @Override
  public void clear() {
    this.avatarItems = null;
    this.vipAvatarInfoList = null;
  }

  public int getAvatarItemsSize() {
    return (this.avatarItems == null) ? 0 : this.avatarItems.size();
  }

  public java.util.Iterator<com.ling9527.music.common.msg.auto.AvatarItemInfo> getAvatarItemsIterator() {
    return (this.avatarItems == null) ? null : this.avatarItems.iterator();
  }

  public void addToAvatarItems(com.ling9527.music.common.msg.auto.AvatarItemInfo elem) {
    if (this.avatarItems == null) {
      this.avatarItems = new ArrayList<com.ling9527.music.common.msg.auto.AvatarItemInfo>();
    }
    this.avatarItems.add(elem);
  }

  public List<com.ling9527.music.common.msg.auto.AvatarItemInfo> getAvatarItems() {
    return this.avatarItems;
  }

  public SCBodyItemsInfoMsg setAvatarItems(List<com.ling9527.music.common.msg.auto.AvatarItemInfo> avatarItems) {
    this.avatarItems = avatarItems;
    return this;
  }

  public void unsetAvatarItems() {
    this.avatarItems = null;
  }

  /** Returns true if field avatarItems is set (has been assigned a value) and false otherwise */
  public boolean isSetAvatarItems() {
    return this.avatarItems != null;
  }

  public void setAvatarItemsIsSet(boolean value) {
    if (!value) {
      this.avatarItems = null;
    }
  }

  public int getVipAvatarInfoListSize() {
    return (this.vipAvatarInfoList == null) ? 0 : this.vipAvatarInfoList.size();
  }

  public java.util.Iterator<com.ling9527.music.common.msg.auto.AvatarInfo> getVipAvatarInfoListIterator() {
    return (this.vipAvatarInfoList == null) ? null : this.vipAvatarInfoList.iterator();
  }

  public void addToVipAvatarInfoList(com.ling9527.music.common.msg.auto.AvatarInfo elem) {
    if (this.vipAvatarInfoList == null) {
      this.vipAvatarInfoList = new ArrayList<com.ling9527.music.common.msg.auto.AvatarInfo>();
    }
    this.vipAvatarInfoList.add(elem);
  }

  public List<com.ling9527.music.common.msg.auto.AvatarInfo> getVipAvatarInfoList() {
    return this.vipAvatarInfoList;
  }

  public SCBodyItemsInfoMsg setVipAvatarInfoList(List<com.ling9527.music.common.msg.auto.AvatarInfo> vipAvatarInfoList) {
    this.vipAvatarInfoList = vipAvatarInfoList;
    return this;
  }

  public void unsetVipAvatarInfoList() {
    this.vipAvatarInfoList = null;
  }

  /** Returns true if field vipAvatarInfoList is set (has been assigned a value) and false otherwise */
  public boolean isSetVipAvatarInfoList() {
    return this.vipAvatarInfoList != null;
  }

  public void setVipAvatarInfoListIsSet(boolean value) {
    if (!value) {
      this.vipAvatarInfoList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case AVATAR_ITEMS:
      if (value == null) {
        unsetAvatarItems();
      } else {
        setAvatarItems((List<com.ling9527.music.common.msg.auto.AvatarItemInfo>)value);
      }
      break;

    case VIP_AVATAR_INFO_LIST:
      if (value == null) {
        unsetVipAvatarInfoList();
      } else {
        setVipAvatarInfoList((List<com.ling9527.music.common.msg.auto.AvatarInfo>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case AVATAR_ITEMS:
      return getAvatarItems();

    case VIP_AVATAR_INFO_LIST:
      return getVipAvatarInfoList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case AVATAR_ITEMS:
      return isSetAvatarItems();
    case VIP_AVATAR_INFO_LIST:
      return isSetVipAvatarInfoList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCBodyItemsInfoMsg)
      return this.equals((SCBodyItemsInfoMsg)that);
    return false;
  }

  public boolean equals(SCBodyItemsInfoMsg that) {
    if (that == null)
      return false;

    boolean this_present_avatarItems = true && this.isSetAvatarItems();
    boolean that_present_avatarItems = true && that.isSetAvatarItems();
    if (this_present_avatarItems || that_present_avatarItems) {
      if (!(this_present_avatarItems && that_present_avatarItems))
        return false;
      if (!this.avatarItems.equals(that.avatarItems))
        return false;
    }

    boolean this_present_vipAvatarInfoList = true && this.isSetVipAvatarInfoList();
    boolean that_present_vipAvatarInfoList = true && that.isSetVipAvatarInfoList();
    if (this_present_vipAvatarInfoList || that_present_vipAvatarInfoList) {
      if (!(this_present_vipAvatarInfoList && that_present_vipAvatarInfoList))
        return false;
      if (!this.vipAvatarInfoList.equals(that.vipAvatarInfoList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCBodyItemsInfoMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCBodyItemsInfoMsg typedOther = (SCBodyItemsInfoMsg)other;

    lastComparison = Boolean.valueOf(isSetAvatarItems()).compareTo(typedOther.isSetAvatarItems());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvatarItems()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.avatarItems, typedOther.avatarItems);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVipAvatarInfoList()).compareTo(typedOther.isSetVipAvatarInfoList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVipAvatarInfoList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vipAvatarInfoList, typedOther.vipAvatarInfoList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCBodyItemsInfoMsg(");
    boolean first = true;

    sb.append("avatarItems:");
    if (this.avatarItems == null) {
      sb.append("null");
    } else {
      sb.append(this.avatarItems);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("vipAvatarInfoList:");
    if (this.vipAvatarInfoList == null) {
      sb.append("null");
    } else {
      sb.append(this.vipAvatarInfoList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCBodyItemsInfoMsgStandardSchemeFactory implements SchemeFactory {
    public SCBodyItemsInfoMsgStandardScheme getScheme() {
      return new SCBodyItemsInfoMsgStandardScheme();
    }
  }

  private static class SCBodyItemsInfoMsgStandardScheme extends StandardScheme<SCBodyItemsInfoMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCBodyItemsInfoMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // AVATAR_ITEMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.avatarItems = new ArrayList<com.ling9527.music.common.msg.auto.AvatarItemInfo>(_list16.size);
                for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                {
                  com.ling9527.music.common.msg.auto.AvatarItemInfo _elem18; // required
                  _elem18 = new com.ling9527.music.common.msg.auto.AvatarItemInfo();
                  _elem18.read(iprot);
                  struct.avatarItems.add(_elem18);
                }
                iprot.readListEnd();
              }
              struct.setAvatarItemsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VIP_AVATAR_INFO_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list19 = iprot.readListBegin();
                struct.vipAvatarInfoList = new ArrayList<com.ling9527.music.common.msg.auto.AvatarInfo>(_list19.size);
                for (int _i20 = 0; _i20 < _list19.size; ++_i20)
                {
                  com.ling9527.music.common.msg.auto.AvatarInfo _elem21; // required
                  _elem21 = new com.ling9527.music.common.msg.auto.AvatarInfo();
                  _elem21.read(iprot);
                  struct.vipAvatarInfoList.add(_elem21);
                }
                iprot.readListEnd();
              }
              struct.setVipAvatarInfoListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCBodyItemsInfoMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.avatarItems != null) {
        oprot.writeFieldBegin(AVATAR_ITEMS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.avatarItems.size()));
          for (com.ling9527.music.common.msg.auto.AvatarItemInfo _iter22 : struct.avatarItems)
          {
            _iter22.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.vipAvatarInfoList != null) {
        oprot.writeFieldBegin(VIP_AVATAR_INFO_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.vipAvatarInfoList.size()));
          for (com.ling9527.music.common.msg.auto.AvatarInfo _iter23 : struct.vipAvatarInfoList)
          {
            _iter23.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCBodyItemsInfoMsgTupleSchemeFactory implements SchemeFactory {
    public SCBodyItemsInfoMsgTupleScheme getScheme() {
      return new SCBodyItemsInfoMsgTupleScheme();
    }
  }

  private static class SCBodyItemsInfoMsgTupleScheme extends TupleScheme<SCBodyItemsInfoMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCBodyItemsInfoMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAvatarItems()) {
        optionals.set(0);
      }
      if (struct.isSetVipAvatarInfoList()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetAvatarItems()) {
        {
          oprot.writeI32(struct.avatarItems.size());
          for (com.ling9527.music.common.msg.auto.AvatarItemInfo _iter24 : struct.avatarItems)
          {
            _iter24.write(oprot);
          }
        }
      }
      if (struct.isSetVipAvatarInfoList()) {
        {
          oprot.writeI32(struct.vipAvatarInfoList.size());
          for (com.ling9527.music.common.msg.auto.AvatarInfo _iter25 : struct.vipAvatarInfoList)
          {
            _iter25.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCBodyItemsInfoMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list26 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.avatarItems = new ArrayList<com.ling9527.music.common.msg.auto.AvatarItemInfo>(_list26.size);
          for (int _i27 = 0; _i27 < _list26.size; ++_i27)
          {
            com.ling9527.music.common.msg.auto.AvatarItemInfo _elem28; // required
            _elem28 = new com.ling9527.music.common.msg.auto.AvatarItemInfo();
            _elem28.read(iprot);
            struct.avatarItems.add(_elem28);
          }
        }
        struct.setAvatarItemsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.vipAvatarInfoList = new ArrayList<com.ling9527.music.common.msg.auto.AvatarInfo>(_list29.size);
          for (int _i30 = 0; _i30 < _list29.size; ++_i30)
          {
            com.ling9527.music.common.msg.auto.AvatarInfo _elem31; // required
            _elem31 = new com.ling9527.music.common.msg.auto.AvatarInfo();
            _elem31.read(iprot);
            struct.vipAvatarInfoList.add(_elem31);
          }
        }
        struct.setVipAvatarInfoListIsSet(true);
      }
    }
  }

}

