/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 名片简要信息
 */
public class SimpleBusinessCardInfo implements org.apache.thrift.TBase<SimpleBusinessCardInfo, SimpleBusinessCardInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SimpleBusinessCardInfo");

  private static final org.apache.thrift.protocol.TField CHAR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("charId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SEX_FIELD_DESC = new org.apache.thrift.protocol.TField("sex", org.apache.thrift.protocol.TType.BYTE, (short)3);
  private static final org.apache.thrift.protocol.TField HEAD_ICON_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("headIconId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField RELATION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("relationType", org.apache.thrift.protocol.TType.BYTE, (short)5);
  private static final org.apache.thrift.protocol.TField RELATION_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("relationVal", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("location", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField OPEN_FIELD_DESC = new org.apache.thrift.protocol.TField("open", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField MOOD_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("moodMessage", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField MOOD_MESSAGE_BY_VOICE_FIELD_DESC = new org.apache.thrift.protocol.TField("moodMessageByVoice", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField IS_ONLINE_FIELD_DESC = new org.apache.thrift.protocol.TField("isOnline", org.apache.thrift.protocol.TType.BOOL, (short)11);
  private static final org.apache.thrift.protocol.TField LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("level", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField GUILD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("guildName", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField TAG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tagId", org.apache.thrift.protocol.TType.I16, (short)14);
  private static final org.apache.thrift.protocol.TField VIP_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("vipLevel", org.apache.thrift.protocol.TType.BYTE, (short)15);
  private static final org.apache.thrift.protocol.TField CARD_FASHION_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("cardFashionIds", org.apache.thrift.protocol.TType.MAP, (short)16);
  private static final org.apache.thrift.protocol.TField LONGITUDE_FIELD_DESC = new org.apache.thrift.protocol.TField("longitude", org.apache.thrift.protocol.TType.DOUBLE, (short)17);
  private static final org.apache.thrift.protocol.TField LATITUDE_FIELD_DESC = new org.apache.thrift.protocol.TField("latitude", org.apache.thrift.protocol.TType.DOUBLE, (short)18);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SimpleBusinessCardInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SimpleBusinessCardInfoTupleSchemeFactory());
  }

  public long charId; // required
  public String name; // required
  public byte sex; // required
  public String headIconId; // required
  /**
   * 好友关系, 无关系为-1
   */
  public byte relationType; // required
  /**
   * 好友关系值， 如亲密度
   */
  public int relationVal; // optional
  public String location; // optional
  public boolean open; // optional
  public String moodMessage; // optional
  public String moodMessageByVoice; // optional
  public boolean isOnline; // required
  public int level; // optional
  /**
   * 舞团名
   */
  public String guildName; // optional
  public short tagId; // optional
  public byte vipLevel; // required
  /**
   * 使用中的名片时尚id, key:style val:高32位id | 低32位有效期
   */
  public Map<Byte,Long> cardFashionIds; // optional
  public double longitude; // optional
  public double latitude; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CHAR_ID((short)1, "charId"),
    NAME((short)2, "name"),
    SEX((short)3, "sex"),
    HEAD_ICON_ID((short)4, "headIconId"),
    /**
     * 好友关系, 无关系为-1
     */
    RELATION_TYPE((short)5, "relationType"),
    /**
     * 好友关系值， 如亲密度
     */
    RELATION_VAL((short)6, "relationVal"),
    LOCATION((short)7, "location"),
    OPEN((short)8, "open"),
    MOOD_MESSAGE((short)9, "moodMessage"),
    MOOD_MESSAGE_BY_VOICE((short)10, "moodMessageByVoice"),
    IS_ONLINE((short)11, "isOnline"),
    LEVEL((short)12, "level"),
    /**
     * 舞团名
     */
    GUILD_NAME((short)13, "guildName"),
    TAG_ID((short)14, "tagId"),
    VIP_LEVEL((short)15, "vipLevel"),
    /**
     * 使用中的名片时尚id, key:style val:高32位id | 低32位有效期
     */
    CARD_FASHION_IDS((short)16, "cardFashionIds"),
    LONGITUDE((short)17, "longitude"),
    LATITUDE((short)18, "latitude");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CHAR_ID
          return CHAR_ID;
        case 2: // NAME
          return NAME;
        case 3: // SEX
          return SEX;
        case 4: // HEAD_ICON_ID
          return HEAD_ICON_ID;
        case 5: // RELATION_TYPE
          return RELATION_TYPE;
        case 6: // RELATION_VAL
          return RELATION_VAL;
        case 7: // LOCATION
          return LOCATION;
        case 8: // OPEN
          return OPEN;
        case 9: // MOOD_MESSAGE
          return MOOD_MESSAGE;
        case 10: // MOOD_MESSAGE_BY_VOICE
          return MOOD_MESSAGE_BY_VOICE;
        case 11: // IS_ONLINE
          return IS_ONLINE;
        case 12: // LEVEL
          return LEVEL;
        case 13: // GUILD_NAME
          return GUILD_NAME;
        case 14: // TAG_ID
          return TAG_ID;
        case 15: // VIP_LEVEL
          return VIP_LEVEL;
        case 16: // CARD_FASHION_IDS
          return CARD_FASHION_IDS;
        case 17: // LONGITUDE
          return LONGITUDE;
        case 18: // LATITUDE
          return LATITUDE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CHARID_ISSET_ID = 0;
  private static final int __SEX_ISSET_ID = 1;
  private static final int __RELATIONTYPE_ISSET_ID = 2;
  private static final int __RELATIONVAL_ISSET_ID = 3;
  private static final int __OPEN_ISSET_ID = 4;
  private static final int __ISONLINE_ISSET_ID = 5;
  private static final int __LEVEL_ISSET_ID = 6;
  private static final int __TAGID_ISSET_ID = 7;
  private static final int __VIPLEVEL_ISSET_ID = 8;
  private static final int __LONGITUDE_ISSET_ID = 9;
  private static final int __LATITUDE_ISSET_ID = 10;
  private short __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.RELATION_VAL,_Fields.LOCATION,_Fields.OPEN,_Fields.MOOD_MESSAGE,_Fields.MOOD_MESSAGE_BY_VOICE,_Fields.LEVEL,_Fields.GUILD_NAME,_Fields.TAG_ID,_Fields.CARD_FASHION_IDS,_Fields.LONGITUDE,_Fields.LATITUDE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CHAR_ID, new org.apache.thrift.meta_data.FieldMetaData("charId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEX, new org.apache.thrift.meta_data.FieldMetaData("sex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.HEAD_ICON_ID, new org.apache.thrift.meta_data.FieldMetaData("headIconId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RELATION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("relationType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.RELATION_VAL, new org.apache.thrift.meta_data.FieldMetaData("relationVal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOCATION, new org.apache.thrift.meta_data.FieldMetaData("location", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPEN, new org.apache.thrift.meta_data.FieldMetaData("open", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.MOOD_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("moodMessage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MOOD_MESSAGE_BY_VOICE, new org.apache.thrift.meta_data.FieldMetaData("moodMessageByVoice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_ONLINE, new org.apache.thrift.meta_data.FieldMetaData("isOnline", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.LEVEL, new org.apache.thrift.meta_data.FieldMetaData("level", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GUILD_NAME, new org.apache.thrift.meta_data.FieldMetaData("guildName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TAG_ID, new org.apache.thrift.meta_data.FieldMetaData("tagId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.VIP_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("vipLevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.CARD_FASHION_IDS, new org.apache.thrift.meta_data.FieldMetaData("cardFashionIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.LONGITUDE, new org.apache.thrift.meta_data.FieldMetaData("longitude", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LATITUDE, new org.apache.thrift.meta_data.FieldMetaData("latitude", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SimpleBusinessCardInfo.class, metaDataMap);
  }

  public SimpleBusinessCardInfo() {
  }

  public SimpleBusinessCardInfo(
    long charId,
    String name,
    byte sex,
    String headIconId,
    byte relationType,
    boolean isOnline,
    byte vipLevel)
  {
    this();
    this.charId = charId;
    setCharIdIsSet(true);
    this.name = name;
    this.sex = sex;
    setSexIsSet(true);
    this.headIconId = headIconId;
    this.relationType = relationType;
    setRelationTypeIsSet(true);
    this.isOnline = isOnline;
    setIsOnlineIsSet(true);
    this.vipLevel = vipLevel;
    setVipLevelIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SimpleBusinessCardInfo(SimpleBusinessCardInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.charId = other.charId;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.sex = other.sex;
    if (other.isSetHeadIconId()) {
      this.headIconId = other.headIconId;
    }
    this.relationType = other.relationType;
    this.relationVal = other.relationVal;
    if (other.isSetLocation()) {
      this.location = other.location;
    }
    this.open = other.open;
    if (other.isSetMoodMessage()) {
      this.moodMessage = other.moodMessage;
    }
    if (other.isSetMoodMessageByVoice()) {
      this.moodMessageByVoice = other.moodMessageByVoice;
    }
    this.isOnline = other.isOnline;
    this.level = other.level;
    if (other.isSetGuildName()) {
      this.guildName = other.guildName;
    }
    this.tagId = other.tagId;
    this.vipLevel = other.vipLevel;
    if (other.isSetCardFashionIds()) {
      Map<Byte,Long> __this__cardFashionIds = new HashMap<Byte,Long>();
      for (Map.Entry<Byte, Long> other_element : other.cardFashionIds.entrySet()) {

        Byte other_element_key = other_element.getKey();
        Long other_element_value = other_element.getValue();

        Byte __this__cardFashionIds_copy_key = other_element_key;

        Long __this__cardFashionIds_copy_value = other_element_value;

        __this__cardFashionIds.put(__this__cardFashionIds_copy_key, __this__cardFashionIds_copy_value);
      }
      this.cardFashionIds = __this__cardFashionIds;
    }
    this.longitude = other.longitude;
    this.latitude = other.latitude;
  }

  public SimpleBusinessCardInfo deepCopy() {
    return new SimpleBusinessCardInfo(this);
  }

  @Override
  public void clear() {
    setCharIdIsSet(false);
    this.charId = 0;
    this.name = null;
    setSexIsSet(false);
    this.sex = 0;
    this.headIconId = null;
    setRelationTypeIsSet(false);
    this.relationType = 0;
    setRelationValIsSet(false);
    this.relationVal = 0;
    this.location = null;
    setOpenIsSet(false);
    this.open = false;
    this.moodMessage = null;
    this.moodMessageByVoice = null;
    setIsOnlineIsSet(false);
    this.isOnline = false;
    setLevelIsSet(false);
    this.level = 0;
    this.guildName = null;
    setTagIdIsSet(false);
    this.tagId = 0;
    setVipLevelIsSet(false);
    this.vipLevel = 0;
    this.cardFashionIds = null;
    setLongitudeIsSet(false);
    this.longitude = 0.0;
    setLatitudeIsSet(false);
    this.latitude = 0.0;
  }

  public long getCharId() {
    return this.charId;
  }

  public SimpleBusinessCardInfo setCharId(long charId) {
    this.charId = charId;
    setCharIdIsSet(true);
    return this;
  }

  public void unsetCharId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHARID_ISSET_ID);
  }

  /** Returns true if field charId is set (has been assigned a value) and false otherwise */
  public boolean isSetCharId() {
    return EncodingUtils.testBit(__isset_bitfield, __CHARID_ISSET_ID);
  }

  public void setCharIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHARID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public SimpleBusinessCardInfo setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public byte getSex() {
    return this.sex;
  }

  public SimpleBusinessCardInfo setSex(byte sex) {
    this.sex = sex;
    setSexIsSet(true);
    return this;
  }

  public void unsetSex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEX_ISSET_ID);
  }

  /** Returns true if field sex is set (has been assigned a value) and false otherwise */
  public boolean isSetSex() {
    return EncodingUtils.testBit(__isset_bitfield, __SEX_ISSET_ID);
  }

  public void setSexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEX_ISSET_ID, value);
  }

  public String getHeadIconId() {
    return this.headIconId;
  }

  public SimpleBusinessCardInfo setHeadIconId(String headIconId) {
    this.headIconId = headIconId;
    return this;
  }

  public void unsetHeadIconId() {
    this.headIconId = null;
  }

  /** Returns true if field headIconId is set (has been assigned a value) and false otherwise */
  public boolean isSetHeadIconId() {
    return this.headIconId != null;
  }

  public void setHeadIconIdIsSet(boolean value) {
    if (!value) {
      this.headIconId = null;
    }
  }

  /**
   * 好友关系, 无关系为-1
   */
  public byte getRelationType() {
    return this.relationType;
  }

  /**
   * 好友关系, 无关系为-1
   */
  public SimpleBusinessCardInfo setRelationType(byte relationType) {
    this.relationType = relationType;
    setRelationTypeIsSet(true);
    return this;
  }

  public void unsetRelationType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RELATIONTYPE_ISSET_ID);
  }

  /** Returns true if field relationType is set (has been assigned a value) and false otherwise */
  public boolean isSetRelationType() {
    return EncodingUtils.testBit(__isset_bitfield, __RELATIONTYPE_ISSET_ID);
  }

  public void setRelationTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RELATIONTYPE_ISSET_ID, value);
  }

  /**
   * 好友关系值， 如亲密度
   */
  public int getRelationVal() {
    return this.relationVal;
  }

  /**
   * 好友关系值， 如亲密度
   */
  public SimpleBusinessCardInfo setRelationVal(int relationVal) {
    this.relationVal = relationVal;
    setRelationValIsSet(true);
    return this;
  }

  public void unsetRelationVal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RELATIONVAL_ISSET_ID);
  }

  /** Returns true if field relationVal is set (has been assigned a value) and false otherwise */
  public boolean isSetRelationVal() {
    return EncodingUtils.testBit(__isset_bitfield, __RELATIONVAL_ISSET_ID);
  }

  public void setRelationValIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RELATIONVAL_ISSET_ID, value);
  }

  public String getLocation() {
    return this.location;
  }

  public SimpleBusinessCardInfo setLocation(String location) {
    this.location = location;
    return this;
  }

  public void unsetLocation() {
    this.location = null;
  }

  /** Returns true if field location is set (has been assigned a value) and false otherwise */
  public boolean isSetLocation() {
    return this.location != null;
  }

  public void setLocationIsSet(boolean value) {
    if (!value) {
      this.location = null;
    }
  }

  public boolean isOpen() {
    return this.open;
  }

  public SimpleBusinessCardInfo setOpen(boolean open) {
    this.open = open;
    setOpenIsSet(true);
    return this;
  }

  public void unsetOpen() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPEN_ISSET_ID);
  }

  /** Returns true if field open is set (has been assigned a value) and false otherwise */
  public boolean isSetOpen() {
    return EncodingUtils.testBit(__isset_bitfield, __OPEN_ISSET_ID);
  }

  public void setOpenIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPEN_ISSET_ID, value);
  }

  public String getMoodMessage() {
    return this.moodMessage;
  }

  public SimpleBusinessCardInfo setMoodMessage(String moodMessage) {
    this.moodMessage = moodMessage;
    return this;
  }

  public void unsetMoodMessage() {
    this.moodMessage = null;
  }

  /** Returns true if field moodMessage is set (has been assigned a value) and false otherwise */
  public boolean isSetMoodMessage() {
    return this.moodMessage != null;
  }

  public void setMoodMessageIsSet(boolean value) {
    if (!value) {
      this.moodMessage = null;
    }
  }

  public String getMoodMessageByVoice() {
    return this.moodMessageByVoice;
  }

  public SimpleBusinessCardInfo setMoodMessageByVoice(String moodMessageByVoice) {
    this.moodMessageByVoice = moodMessageByVoice;
    return this;
  }

  public void unsetMoodMessageByVoice() {
    this.moodMessageByVoice = null;
  }

  /** Returns true if field moodMessageByVoice is set (has been assigned a value) and false otherwise */
  public boolean isSetMoodMessageByVoice() {
    return this.moodMessageByVoice != null;
  }

  public void setMoodMessageByVoiceIsSet(boolean value) {
    if (!value) {
      this.moodMessageByVoice = null;
    }
  }

  public boolean isIsOnline() {
    return this.isOnline;
  }

  public SimpleBusinessCardInfo setIsOnline(boolean isOnline) {
    this.isOnline = isOnline;
    setIsOnlineIsSet(true);
    return this;
  }

  public void unsetIsOnline() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISONLINE_ISSET_ID);
  }

  /** Returns true if field isOnline is set (has been assigned a value) and false otherwise */
  public boolean isSetIsOnline() {
    return EncodingUtils.testBit(__isset_bitfield, __ISONLINE_ISSET_ID);
  }

  public void setIsOnlineIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISONLINE_ISSET_ID, value);
  }

  public int getLevel() {
    return this.level;
  }

  public SimpleBusinessCardInfo setLevel(int level) {
    this.level = level;
    setLevelIsSet(true);
    return this;
  }

  public void unsetLevel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEVEL_ISSET_ID);
  }

  /** Returns true if field level is set (has been assigned a value) and false otherwise */
  public boolean isSetLevel() {
    return EncodingUtils.testBit(__isset_bitfield, __LEVEL_ISSET_ID);
  }

  public void setLevelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEVEL_ISSET_ID, value);
  }

  /**
   * 舞团名
   */
  public String getGuildName() {
    return this.guildName;
  }

  /**
   * 舞团名
   */
  public SimpleBusinessCardInfo setGuildName(String guildName) {
    this.guildName = guildName;
    return this;
  }

  public void unsetGuildName() {
    this.guildName = null;
  }

  /** Returns true if field guildName is set (has been assigned a value) and false otherwise */
  public boolean isSetGuildName() {
    return this.guildName != null;
  }

  public void setGuildNameIsSet(boolean value) {
    if (!value) {
      this.guildName = null;
    }
  }

  public short getTagId() {
    return this.tagId;
  }

  public SimpleBusinessCardInfo setTagId(short tagId) {
    this.tagId = tagId;
    setTagIdIsSet(true);
    return this;
  }

  public void unsetTagId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TAGID_ISSET_ID);
  }

  /** Returns true if field tagId is set (has been assigned a value) and false otherwise */
  public boolean isSetTagId() {
    return EncodingUtils.testBit(__isset_bitfield, __TAGID_ISSET_ID);
  }

  public void setTagIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TAGID_ISSET_ID, value);
  }

  public byte getVipLevel() {
    return this.vipLevel;
  }

  public SimpleBusinessCardInfo setVipLevel(byte vipLevel) {
    this.vipLevel = vipLevel;
    setVipLevelIsSet(true);
    return this;
  }

  public void unsetVipLevel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIPLEVEL_ISSET_ID);
  }

  /** Returns true if field vipLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetVipLevel() {
    return EncodingUtils.testBit(__isset_bitfield, __VIPLEVEL_ISSET_ID);
  }

  public void setVipLevelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIPLEVEL_ISSET_ID, value);
  }

  public int getCardFashionIdsSize() {
    return (this.cardFashionIds == null) ? 0 : this.cardFashionIds.size();
  }

  public void putToCardFashionIds(byte key, long val) {
    if (this.cardFashionIds == null) {
      this.cardFashionIds = new HashMap<Byte,Long>();
    }
    this.cardFashionIds.put(key, val);
  }

  /**
   * 使用中的名片时尚id, key:style val:高32位id | 低32位有效期
   */
  public Map<Byte,Long> getCardFashionIds() {
    return this.cardFashionIds;
  }

  /**
   * 使用中的名片时尚id, key:style val:高32位id | 低32位有效期
   */
  public SimpleBusinessCardInfo setCardFashionIds(Map<Byte,Long> cardFashionIds) {
    this.cardFashionIds = cardFashionIds;
    return this;
  }

  public void unsetCardFashionIds() {
    this.cardFashionIds = null;
  }

  /** Returns true if field cardFashionIds is set (has been assigned a value) and false otherwise */
  public boolean isSetCardFashionIds() {
    return this.cardFashionIds != null;
  }

  public void setCardFashionIdsIsSet(boolean value) {
    if (!value) {
      this.cardFashionIds = null;
    }
  }

  public double getLongitude() {
    return this.longitude;
  }

  public SimpleBusinessCardInfo setLongitude(double longitude) {
    this.longitude = longitude;
    setLongitudeIsSet(true);
    return this;
  }

  public void unsetLongitude() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LONGITUDE_ISSET_ID);
  }

  /** Returns true if field longitude is set (has been assigned a value) and false otherwise */
  public boolean isSetLongitude() {
    return EncodingUtils.testBit(__isset_bitfield, __LONGITUDE_ISSET_ID);
  }

  public void setLongitudeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LONGITUDE_ISSET_ID, value);
  }

  public double getLatitude() {
    return this.latitude;
  }

  public SimpleBusinessCardInfo setLatitude(double latitude) {
    this.latitude = latitude;
    setLatitudeIsSet(true);
    return this;
  }

  public void unsetLatitude() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LATITUDE_ISSET_ID);
  }

  /** Returns true if field latitude is set (has been assigned a value) and false otherwise */
  public boolean isSetLatitude() {
    return EncodingUtils.testBit(__isset_bitfield, __LATITUDE_ISSET_ID);
  }

  public void setLatitudeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LATITUDE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CHAR_ID:
      if (value == null) {
        unsetCharId();
      } else {
        setCharId((Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case SEX:
      if (value == null) {
        unsetSex();
      } else {
        setSex((Byte)value);
      }
      break;

    case HEAD_ICON_ID:
      if (value == null) {
        unsetHeadIconId();
      } else {
        setHeadIconId((String)value);
      }
      break;

    case RELATION_TYPE:
      if (value == null) {
        unsetRelationType();
      } else {
        setRelationType((Byte)value);
      }
      break;

    case RELATION_VAL:
      if (value == null) {
        unsetRelationVal();
      } else {
        setRelationVal((Integer)value);
      }
      break;

    case LOCATION:
      if (value == null) {
        unsetLocation();
      } else {
        setLocation((String)value);
      }
      break;

    case OPEN:
      if (value == null) {
        unsetOpen();
      } else {
        setOpen((Boolean)value);
      }
      break;

    case MOOD_MESSAGE:
      if (value == null) {
        unsetMoodMessage();
      } else {
        setMoodMessage((String)value);
      }
      break;

    case MOOD_MESSAGE_BY_VOICE:
      if (value == null) {
        unsetMoodMessageByVoice();
      } else {
        setMoodMessageByVoice((String)value);
      }
      break;

    case IS_ONLINE:
      if (value == null) {
        unsetIsOnline();
      } else {
        setIsOnline((Boolean)value);
      }
      break;

    case LEVEL:
      if (value == null) {
        unsetLevel();
      } else {
        setLevel((Integer)value);
      }
      break;

    case GUILD_NAME:
      if (value == null) {
        unsetGuildName();
      } else {
        setGuildName((String)value);
      }
      break;

    case TAG_ID:
      if (value == null) {
        unsetTagId();
      } else {
        setTagId((Short)value);
      }
      break;

    case VIP_LEVEL:
      if (value == null) {
        unsetVipLevel();
      } else {
        setVipLevel((Byte)value);
      }
      break;

    case CARD_FASHION_IDS:
      if (value == null) {
        unsetCardFashionIds();
      } else {
        setCardFashionIds((Map<Byte,Long>)value);
      }
      break;

    case LONGITUDE:
      if (value == null) {
        unsetLongitude();
      } else {
        setLongitude((Double)value);
      }
      break;

    case LATITUDE:
      if (value == null) {
        unsetLatitude();
      } else {
        setLatitude((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CHAR_ID:
      return Long.valueOf(getCharId());

    case NAME:
      return getName();

    case SEX:
      return Byte.valueOf(getSex());

    case HEAD_ICON_ID:
      return getHeadIconId();

    case RELATION_TYPE:
      return Byte.valueOf(getRelationType());

    case RELATION_VAL:
      return Integer.valueOf(getRelationVal());

    case LOCATION:
      return getLocation();

    case OPEN:
      return Boolean.valueOf(isOpen());

    case MOOD_MESSAGE:
      return getMoodMessage();

    case MOOD_MESSAGE_BY_VOICE:
      return getMoodMessageByVoice();

    case IS_ONLINE:
      return Boolean.valueOf(isIsOnline());

    case LEVEL:
      return Integer.valueOf(getLevel());

    case GUILD_NAME:
      return getGuildName();

    case TAG_ID:
      return Short.valueOf(getTagId());

    case VIP_LEVEL:
      return Byte.valueOf(getVipLevel());

    case CARD_FASHION_IDS:
      return getCardFashionIds();

    case LONGITUDE:
      return Double.valueOf(getLongitude());

    case LATITUDE:
      return Double.valueOf(getLatitude());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CHAR_ID:
      return isSetCharId();
    case NAME:
      return isSetName();
    case SEX:
      return isSetSex();
    case HEAD_ICON_ID:
      return isSetHeadIconId();
    case RELATION_TYPE:
      return isSetRelationType();
    case RELATION_VAL:
      return isSetRelationVal();
    case LOCATION:
      return isSetLocation();
    case OPEN:
      return isSetOpen();
    case MOOD_MESSAGE:
      return isSetMoodMessage();
    case MOOD_MESSAGE_BY_VOICE:
      return isSetMoodMessageByVoice();
    case IS_ONLINE:
      return isSetIsOnline();
    case LEVEL:
      return isSetLevel();
    case GUILD_NAME:
      return isSetGuildName();
    case TAG_ID:
      return isSetTagId();
    case VIP_LEVEL:
      return isSetVipLevel();
    case CARD_FASHION_IDS:
      return isSetCardFashionIds();
    case LONGITUDE:
      return isSetLongitude();
    case LATITUDE:
      return isSetLatitude();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SimpleBusinessCardInfo)
      return this.equals((SimpleBusinessCardInfo)that);
    return false;
  }

  public boolean equals(SimpleBusinessCardInfo that) {
    if (that == null)
      return false;

    boolean this_present_charId = true;
    boolean that_present_charId = true;
    if (this_present_charId || that_present_charId) {
      if (!(this_present_charId && that_present_charId))
        return false;
      if (this.charId != that.charId)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_sex = true;
    boolean that_present_sex = true;
    if (this_present_sex || that_present_sex) {
      if (!(this_present_sex && that_present_sex))
        return false;
      if (this.sex != that.sex)
        return false;
    }

    boolean this_present_headIconId = true && this.isSetHeadIconId();
    boolean that_present_headIconId = true && that.isSetHeadIconId();
    if (this_present_headIconId || that_present_headIconId) {
      if (!(this_present_headIconId && that_present_headIconId))
        return false;
      if (!this.headIconId.equals(that.headIconId))
        return false;
    }

    boolean this_present_relationType = true;
    boolean that_present_relationType = true;
    if (this_present_relationType || that_present_relationType) {
      if (!(this_present_relationType && that_present_relationType))
        return false;
      if (this.relationType != that.relationType)
        return false;
    }

    boolean this_present_relationVal = true && this.isSetRelationVal();
    boolean that_present_relationVal = true && that.isSetRelationVal();
    if (this_present_relationVal || that_present_relationVal) {
      if (!(this_present_relationVal && that_present_relationVal))
        return false;
      if (this.relationVal != that.relationVal)
        return false;
    }

    boolean this_present_location = true && this.isSetLocation();
    boolean that_present_location = true && that.isSetLocation();
    if (this_present_location || that_present_location) {
      if (!(this_present_location && that_present_location))
        return false;
      if (!this.location.equals(that.location))
        return false;
    }

    boolean this_present_open = true && this.isSetOpen();
    boolean that_present_open = true && that.isSetOpen();
    if (this_present_open || that_present_open) {
      if (!(this_present_open && that_present_open))
        return false;
      if (this.open != that.open)
        return false;
    }

    boolean this_present_moodMessage = true && this.isSetMoodMessage();
    boolean that_present_moodMessage = true && that.isSetMoodMessage();
    if (this_present_moodMessage || that_present_moodMessage) {
      if (!(this_present_moodMessage && that_present_moodMessage))
        return false;
      if (!this.moodMessage.equals(that.moodMessage))
        return false;
    }

    boolean this_present_moodMessageByVoice = true && this.isSetMoodMessageByVoice();
    boolean that_present_moodMessageByVoice = true && that.isSetMoodMessageByVoice();
    if (this_present_moodMessageByVoice || that_present_moodMessageByVoice) {
      if (!(this_present_moodMessageByVoice && that_present_moodMessageByVoice))
        return false;
      if (!this.moodMessageByVoice.equals(that.moodMessageByVoice))
        return false;
    }

    boolean this_present_isOnline = true;
    boolean that_present_isOnline = true;
    if (this_present_isOnline || that_present_isOnline) {
      if (!(this_present_isOnline && that_present_isOnline))
        return false;
      if (this.isOnline != that.isOnline)
        return false;
    }

    boolean this_present_level = true && this.isSetLevel();
    boolean that_present_level = true && that.isSetLevel();
    if (this_present_level || that_present_level) {
      if (!(this_present_level && that_present_level))
        return false;
      if (this.level != that.level)
        return false;
    }

    boolean this_present_guildName = true && this.isSetGuildName();
    boolean that_present_guildName = true && that.isSetGuildName();
    if (this_present_guildName || that_present_guildName) {
      if (!(this_present_guildName && that_present_guildName))
        return false;
      if (!this.guildName.equals(that.guildName))
        return false;
    }

    boolean this_present_tagId = true && this.isSetTagId();
    boolean that_present_tagId = true && that.isSetTagId();
    if (this_present_tagId || that_present_tagId) {
      if (!(this_present_tagId && that_present_tagId))
        return false;
      if (this.tagId != that.tagId)
        return false;
    }

    boolean this_present_vipLevel = true;
    boolean that_present_vipLevel = true;
    if (this_present_vipLevel || that_present_vipLevel) {
      if (!(this_present_vipLevel && that_present_vipLevel))
        return false;
      if (this.vipLevel != that.vipLevel)
        return false;
    }

    boolean this_present_cardFashionIds = true && this.isSetCardFashionIds();
    boolean that_present_cardFashionIds = true && that.isSetCardFashionIds();
    if (this_present_cardFashionIds || that_present_cardFashionIds) {
      if (!(this_present_cardFashionIds && that_present_cardFashionIds))
        return false;
      if (!this.cardFashionIds.equals(that.cardFashionIds))
        return false;
    }

    boolean this_present_longitude = true && this.isSetLongitude();
    boolean that_present_longitude = true && that.isSetLongitude();
    if (this_present_longitude || that_present_longitude) {
      if (!(this_present_longitude && that_present_longitude))
        return false;
      if (this.longitude != that.longitude)
        return false;
    }

    boolean this_present_latitude = true && this.isSetLatitude();
    boolean that_present_latitude = true && that.isSetLatitude();
    if (this_present_latitude || that_present_latitude) {
      if (!(this_present_latitude && that_present_latitude))
        return false;
      if (this.latitude != that.latitude)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SimpleBusinessCardInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SimpleBusinessCardInfo typedOther = (SimpleBusinessCardInfo)other;

    lastComparison = Boolean.valueOf(isSetCharId()).compareTo(typedOther.isSetCharId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCharId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.charId, typedOther.charId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSex()).compareTo(typedOther.isSetSex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sex, typedOther.sex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeadIconId()).compareTo(typedOther.isSetHeadIconId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeadIconId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.headIconId, typedOther.headIconId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRelationType()).compareTo(typedOther.isSetRelationType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelationType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relationType, typedOther.relationType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRelationVal()).compareTo(typedOther.isSetRelationVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelationVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relationVal, typedOther.relationVal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocation()).compareTo(typedOther.isSetLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.location, typedOther.location);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpen()).compareTo(typedOther.isSetOpen());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpen()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.open, typedOther.open);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMoodMessage()).compareTo(typedOther.isSetMoodMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMoodMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.moodMessage, typedOther.moodMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMoodMessageByVoice()).compareTo(typedOther.isSetMoodMessageByVoice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMoodMessageByVoice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.moodMessageByVoice, typedOther.moodMessageByVoice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsOnline()).compareTo(typedOther.isSetIsOnline());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsOnline()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isOnline, typedOther.isOnline);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLevel()).compareTo(typedOther.isSetLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.level, typedOther.level);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGuildName()).compareTo(typedOther.isSetGuildName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGuildName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.guildName, typedOther.guildName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTagId()).compareTo(typedOther.isSetTagId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTagId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagId, typedOther.tagId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVipLevel()).compareTo(typedOther.isSetVipLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVipLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vipLevel, typedOther.vipLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCardFashionIds()).compareTo(typedOther.isSetCardFashionIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCardFashionIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cardFashionIds, typedOther.cardFashionIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLongitude()).compareTo(typedOther.isSetLongitude());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLongitude()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.longitude, typedOther.longitude);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLatitude()).compareTo(typedOther.isSetLatitude());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLatitude()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.latitude, typedOther.latitude);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SimpleBusinessCardInfo(");
    boolean first = true;

    sb.append("charId:");
    sb.append(this.charId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sex:");
    sb.append(this.sex);
    first = false;
    if (!first) sb.append(", ");
    sb.append("headIconId:");
    if (this.headIconId == null) {
      sb.append("null");
    } else {
      sb.append(this.headIconId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("relationType:");
    sb.append(this.relationType);
    first = false;
    if (isSetRelationVal()) {
      if (!first) sb.append(", ");
      sb.append("relationVal:");
      sb.append(this.relationVal);
      first = false;
    }
    if (isSetLocation()) {
      if (!first) sb.append(", ");
      sb.append("location:");
      if (this.location == null) {
        sb.append("null");
      } else {
        sb.append(this.location);
      }
      first = false;
    }
    if (isSetOpen()) {
      if (!first) sb.append(", ");
      sb.append("open:");
      sb.append(this.open);
      first = false;
    }
    if (isSetMoodMessage()) {
      if (!first) sb.append(", ");
      sb.append("moodMessage:");
      if (this.moodMessage == null) {
        sb.append("null");
      } else {
        sb.append(this.moodMessage);
      }
      first = false;
    }
    if (isSetMoodMessageByVoice()) {
      if (!first) sb.append(", ");
      sb.append("moodMessageByVoice:");
      if (this.moodMessageByVoice == null) {
        sb.append("null");
      } else {
        sb.append(this.moodMessageByVoice);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("isOnline:");
    sb.append(this.isOnline);
    first = false;
    if (isSetLevel()) {
      if (!first) sb.append(", ");
      sb.append("level:");
      sb.append(this.level);
      first = false;
    }
    if (isSetGuildName()) {
      if (!first) sb.append(", ");
      sb.append("guildName:");
      if (this.guildName == null) {
        sb.append("null");
      } else {
        sb.append(this.guildName);
      }
      first = false;
    }
    if (isSetTagId()) {
      if (!first) sb.append(", ");
      sb.append("tagId:");
      sb.append(this.tagId);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("vipLevel:");
    sb.append(this.vipLevel);
    first = false;
    if (isSetCardFashionIds()) {
      if (!first) sb.append(", ");
      sb.append("cardFashionIds:");
      if (this.cardFashionIds == null) {
        sb.append("null");
      } else {
        sb.append(this.cardFashionIds);
      }
      first = false;
    }
    if (isSetLongitude()) {
      if (!first) sb.append(", ");
      sb.append("longitude:");
      sb.append(this.longitude);
      first = false;
    }
    if (isSetLatitude()) {
      if (!first) sb.append(", ");
      sb.append("latitude:");
      sb.append(this.latitude);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SimpleBusinessCardInfoStandardSchemeFactory implements SchemeFactory {
    public SimpleBusinessCardInfoStandardScheme getScheme() {
      return new SimpleBusinessCardInfoStandardScheme();
    }
  }

  private static class SimpleBusinessCardInfoStandardScheme extends StandardScheme<SimpleBusinessCardInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SimpleBusinessCardInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CHAR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.charId = iprot.readI64();
              struct.setCharIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SEX
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.sex = iprot.readByte();
              struct.setSexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // HEAD_ICON_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.headIconId = iprot.readString();
              struct.setHeadIconIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RELATION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.relationType = iprot.readByte();
              struct.setRelationTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RELATION_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.relationVal = iprot.readI32();
              struct.setRelationValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.location = iprot.readString();
              struct.setLocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // OPEN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.open = iprot.readBool();
              struct.setOpenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MOOD_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.moodMessage = iprot.readString();
              struct.setMoodMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MOOD_MESSAGE_BY_VOICE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.moodMessageByVoice = iprot.readString();
              struct.setMoodMessageByVoiceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // IS_ONLINE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isOnline = iprot.readBool();
              struct.setIsOnlineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.level = iprot.readI32();
              struct.setLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // GUILD_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.guildName = iprot.readString();
              struct.setGuildNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // TAG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.tagId = iprot.readI16();
              struct.setTagIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // VIP_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.vipLevel = iprot.readByte();
              struct.setVipLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // CARD_FASHION_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map204 = iprot.readMapBegin();
                struct.cardFashionIds = new HashMap<Byte,Long>(2*_map204.size);
                for (int _i205 = 0; _i205 < _map204.size; ++_i205)
                {
                  byte _key206; // required
                  long _val207; // required
                  _key206 = iprot.readByte();
                  _val207 = iprot.readI64();
                  struct.cardFashionIds.put(_key206, _val207);
                }
                iprot.readMapEnd();
              }
              struct.setCardFashionIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // LONGITUDE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.longitude = iprot.readDouble();
              struct.setLongitudeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // LATITUDE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.latitude = iprot.readDouble();
              struct.setLatitudeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SimpleBusinessCardInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CHAR_ID_FIELD_DESC);
      oprot.writeI64(struct.charId);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SEX_FIELD_DESC);
      oprot.writeByte(struct.sex);
      oprot.writeFieldEnd();
      if (struct.headIconId != null) {
        oprot.writeFieldBegin(HEAD_ICON_ID_FIELD_DESC);
        oprot.writeString(struct.headIconId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RELATION_TYPE_FIELD_DESC);
      oprot.writeByte(struct.relationType);
      oprot.writeFieldEnd();
      if (struct.isSetRelationVal()) {
        oprot.writeFieldBegin(RELATION_VAL_FIELD_DESC);
        oprot.writeI32(struct.relationVal);
        oprot.writeFieldEnd();
      }
      if (struct.location != null) {
        if (struct.isSetLocation()) {
          oprot.writeFieldBegin(LOCATION_FIELD_DESC);
          oprot.writeString(struct.location);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOpen()) {
        oprot.writeFieldBegin(OPEN_FIELD_DESC);
        oprot.writeBool(struct.open);
        oprot.writeFieldEnd();
      }
      if (struct.moodMessage != null) {
        if (struct.isSetMoodMessage()) {
          oprot.writeFieldBegin(MOOD_MESSAGE_FIELD_DESC);
          oprot.writeString(struct.moodMessage);
          oprot.writeFieldEnd();
        }
      }
      if (struct.moodMessageByVoice != null) {
        if (struct.isSetMoodMessageByVoice()) {
          oprot.writeFieldBegin(MOOD_MESSAGE_BY_VOICE_FIELD_DESC);
          oprot.writeString(struct.moodMessageByVoice);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(IS_ONLINE_FIELD_DESC);
      oprot.writeBool(struct.isOnline);
      oprot.writeFieldEnd();
      if (struct.isSetLevel()) {
        oprot.writeFieldBegin(LEVEL_FIELD_DESC);
        oprot.writeI32(struct.level);
        oprot.writeFieldEnd();
      }
      if (struct.guildName != null) {
        if (struct.isSetGuildName()) {
          oprot.writeFieldBegin(GUILD_NAME_FIELD_DESC);
          oprot.writeString(struct.guildName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTagId()) {
        oprot.writeFieldBegin(TAG_ID_FIELD_DESC);
        oprot.writeI16(struct.tagId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(VIP_LEVEL_FIELD_DESC);
      oprot.writeByte(struct.vipLevel);
      oprot.writeFieldEnd();
      if (struct.cardFashionIds != null) {
        if (struct.isSetCardFashionIds()) {
          oprot.writeFieldBegin(CARD_FASHION_IDS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.BYTE, org.apache.thrift.protocol.TType.I64, struct.cardFashionIds.size()));
            for (Map.Entry<Byte, Long> _iter208 : struct.cardFashionIds.entrySet())
            {
              oprot.writeByte(_iter208.getKey());
              oprot.writeI64(_iter208.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLongitude()) {
        oprot.writeFieldBegin(LONGITUDE_FIELD_DESC);
        oprot.writeDouble(struct.longitude);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLatitude()) {
        oprot.writeFieldBegin(LATITUDE_FIELD_DESC);
        oprot.writeDouble(struct.latitude);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SimpleBusinessCardInfoTupleSchemeFactory implements SchemeFactory {
    public SimpleBusinessCardInfoTupleScheme getScheme() {
      return new SimpleBusinessCardInfoTupleScheme();
    }
  }

  private static class SimpleBusinessCardInfoTupleScheme extends TupleScheme<SimpleBusinessCardInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SimpleBusinessCardInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCharId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetSex()) {
        optionals.set(2);
      }
      if (struct.isSetHeadIconId()) {
        optionals.set(3);
      }
      if (struct.isSetRelationType()) {
        optionals.set(4);
      }
      if (struct.isSetRelationVal()) {
        optionals.set(5);
      }
      if (struct.isSetLocation()) {
        optionals.set(6);
      }
      if (struct.isSetOpen()) {
        optionals.set(7);
      }
      if (struct.isSetMoodMessage()) {
        optionals.set(8);
      }
      if (struct.isSetMoodMessageByVoice()) {
        optionals.set(9);
      }
      if (struct.isSetIsOnline()) {
        optionals.set(10);
      }
      if (struct.isSetLevel()) {
        optionals.set(11);
      }
      if (struct.isSetGuildName()) {
        optionals.set(12);
      }
      if (struct.isSetTagId()) {
        optionals.set(13);
      }
      if (struct.isSetVipLevel()) {
        optionals.set(14);
      }
      if (struct.isSetCardFashionIds()) {
        optionals.set(15);
      }
      if (struct.isSetLongitude()) {
        optionals.set(16);
      }
      if (struct.isSetLatitude()) {
        optionals.set(17);
      }
      oprot.writeBitSet(optionals, 18);
      if (struct.isSetCharId()) {
        oprot.writeI64(struct.charId);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetSex()) {
        oprot.writeByte(struct.sex);
      }
      if (struct.isSetHeadIconId()) {
        oprot.writeString(struct.headIconId);
      }
      if (struct.isSetRelationType()) {
        oprot.writeByte(struct.relationType);
      }
      if (struct.isSetRelationVal()) {
        oprot.writeI32(struct.relationVal);
      }
      if (struct.isSetLocation()) {
        oprot.writeString(struct.location);
      }
      if (struct.isSetOpen()) {
        oprot.writeBool(struct.open);
      }
      if (struct.isSetMoodMessage()) {
        oprot.writeString(struct.moodMessage);
      }
      if (struct.isSetMoodMessageByVoice()) {
        oprot.writeString(struct.moodMessageByVoice);
      }
      if (struct.isSetIsOnline()) {
        oprot.writeBool(struct.isOnline);
      }
      if (struct.isSetLevel()) {
        oprot.writeI32(struct.level);
      }
      if (struct.isSetGuildName()) {
        oprot.writeString(struct.guildName);
      }
      if (struct.isSetTagId()) {
        oprot.writeI16(struct.tagId);
      }
      if (struct.isSetVipLevel()) {
        oprot.writeByte(struct.vipLevel);
      }
      if (struct.isSetCardFashionIds()) {
        {
          oprot.writeI32(struct.cardFashionIds.size());
          for (Map.Entry<Byte, Long> _iter209 : struct.cardFashionIds.entrySet())
          {
            oprot.writeByte(_iter209.getKey());
            oprot.writeI64(_iter209.getValue());
          }
        }
      }
      if (struct.isSetLongitude()) {
        oprot.writeDouble(struct.longitude);
      }
      if (struct.isSetLatitude()) {
        oprot.writeDouble(struct.latitude);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SimpleBusinessCardInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(18);
      if (incoming.get(0)) {
        struct.charId = iprot.readI64();
        struct.setCharIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.sex = iprot.readByte();
        struct.setSexIsSet(true);
      }
      if (incoming.get(3)) {
        struct.headIconId = iprot.readString();
        struct.setHeadIconIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.relationType = iprot.readByte();
        struct.setRelationTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.relationVal = iprot.readI32();
        struct.setRelationValIsSet(true);
      }
      if (incoming.get(6)) {
        struct.location = iprot.readString();
        struct.setLocationIsSet(true);
      }
      if (incoming.get(7)) {
        struct.open = iprot.readBool();
        struct.setOpenIsSet(true);
      }
      if (incoming.get(8)) {
        struct.moodMessage = iprot.readString();
        struct.setMoodMessageIsSet(true);
      }
      if (incoming.get(9)) {
        struct.moodMessageByVoice = iprot.readString();
        struct.setMoodMessageByVoiceIsSet(true);
      }
      if (incoming.get(10)) {
        struct.isOnline = iprot.readBool();
        struct.setIsOnlineIsSet(true);
      }
      if (incoming.get(11)) {
        struct.level = iprot.readI32();
        struct.setLevelIsSet(true);
      }
      if (incoming.get(12)) {
        struct.guildName = iprot.readString();
        struct.setGuildNameIsSet(true);
      }
      if (incoming.get(13)) {
        struct.tagId = iprot.readI16();
        struct.setTagIdIsSet(true);
      }
      if (incoming.get(14)) {
        struct.vipLevel = iprot.readByte();
        struct.setVipLevelIsSet(true);
      }
      if (incoming.get(15)) {
        {
          org.apache.thrift.protocol.TMap _map210 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.BYTE, org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.cardFashionIds = new HashMap<Byte,Long>(2*_map210.size);
          for (int _i211 = 0; _i211 < _map210.size; ++_i211)
          {
            byte _key212; // required
            long _val213; // required
            _key212 = iprot.readByte();
            _val213 = iprot.readI64();
            struct.cardFashionIds.put(_key212, _val213);
          }
        }
        struct.setCardFashionIdsIsSet(true);
      }
      if (incoming.get(16)) {
        struct.longitude = iprot.readDouble();
        struct.setLongitudeIsSet(true);
      }
      if (incoming.get(17)) {
        struct.latitude = iprot.readDouble();
        struct.setLatitudeIsSet(true);
      }
    }
  }

}

