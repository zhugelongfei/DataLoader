/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SCReturnDanceRoomMsg implements org.apache.thrift.TBase<SCReturnDanceRoomMsg, SCReturnDanceRoomMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCReturnDanceRoomMsg");

  private static final org.apache.thrift.protocol.TField CHAR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("charId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField DANCE_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("danceState", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("mode", org.apache.thrift.protocol.TType.BYTE, (short)3);
  private static final org.apache.thrift.protocol.TField SONG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("songId", org.apache.thrift.protocol.TType.I16, (short)4);
  private static final org.apache.thrift.protocol.TField SONG_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("songLevel", org.apache.thrift.protocol.TType.BYTE, (short)5);
  private static final org.apache.thrift.protocol.TField START_ACTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("startActionId", org.apache.thrift.protocol.TType.I16, (short)6);
  private static final org.apache.thrift.protocol.TField FINISH_ACTION_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("finishActionIds", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField STAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("stageId", org.apache.thrift.protocol.TType.BYTE, (short)8);
  private static final org.apache.thrift.protocol.TField LIGHT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lightId", org.apache.thrift.protocol.TType.BYTE, (short)9);
  private static final org.apache.thrift.protocol.TField CUR_DURING_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("curDuringTime", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField PARTNERS_FIELD_DESC = new org.apache.thrift.protocol.TField("partners", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField MARKS_FIELD_DESC = new org.apache.thrift.protocol.TField("marks", org.apache.thrift.protocol.TType.LIST, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCReturnDanceRoomMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCReturnDanceRoomMsgTupleSchemeFactory());
  }

  public long charId; // required
  /**
   * 0:Dancing outside  1:Ready Dance  2:Dance within
   */
  public byte danceState; // required
  public byte mode; // required
  public short songId; // required
  public byte songLevel; // required
  public short startActionId; // required
  public List<Short> finishActionIds; // required
  public byte stageId; // required
  public byte lightId; // required
  public int curDuringTime; // required
  public List<com.ling9527.music.common.msg.auto.PartnerInfo> partners; // required
  public List<com.ling9527.music.common.msg.auto.DanceMarkInfo> marks; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CHAR_ID((short)1, "charId"),
    /**
     * 0:Dancing outside  1:Ready Dance  2:Dance within
     */
    DANCE_STATE((short)2, "danceState"),
    MODE((short)3, "mode"),
    SONG_ID((short)4, "songId"),
    SONG_LEVEL((short)5, "songLevel"),
    START_ACTION_ID((short)6, "startActionId"),
    FINISH_ACTION_IDS((short)7, "finishActionIds"),
    STAGE_ID((short)8, "stageId"),
    LIGHT_ID((short)9, "lightId"),
    CUR_DURING_TIME((short)10, "curDuringTime"),
    PARTNERS((short)11, "partners"),
    MARKS((short)12, "marks");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CHAR_ID
          return CHAR_ID;
        case 2: // DANCE_STATE
          return DANCE_STATE;
        case 3: // MODE
          return MODE;
        case 4: // SONG_ID
          return SONG_ID;
        case 5: // SONG_LEVEL
          return SONG_LEVEL;
        case 6: // START_ACTION_ID
          return START_ACTION_ID;
        case 7: // FINISH_ACTION_IDS
          return FINISH_ACTION_IDS;
        case 8: // STAGE_ID
          return STAGE_ID;
        case 9: // LIGHT_ID
          return LIGHT_ID;
        case 10: // CUR_DURING_TIME
          return CUR_DURING_TIME;
        case 11: // PARTNERS
          return PARTNERS;
        case 12: // MARKS
          return MARKS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CHARID_ISSET_ID = 0;
  private static final int __DANCESTATE_ISSET_ID = 1;
  private static final int __MODE_ISSET_ID = 2;
  private static final int __SONGID_ISSET_ID = 3;
  private static final int __SONGLEVEL_ISSET_ID = 4;
  private static final int __STARTACTIONID_ISSET_ID = 5;
  private static final int __STAGEID_ISSET_ID = 6;
  private static final int __LIGHTID_ISSET_ID = 7;
  private static final int __CURDURINGTIME_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CHAR_ID, new org.apache.thrift.meta_data.FieldMetaData("charId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DANCE_STATE, new org.apache.thrift.meta_data.FieldMetaData("danceState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.MODE, new org.apache.thrift.meta_data.FieldMetaData("mode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.SONG_ID, new org.apache.thrift.meta_data.FieldMetaData("songId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.SONG_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("songLevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.START_ACTION_ID, new org.apache.thrift.meta_data.FieldMetaData("startActionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.FINISH_ACTION_IDS, new org.apache.thrift.meta_data.FieldMetaData("finishActionIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16))));
    tmpMap.put(_Fields.STAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("stageId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.LIGHT_ID, new org.apache.thrift.meta_data.FieldMetaData("lightId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.CUR_DURING_TIME, new org.apache.thrift.meta_data.FieldMetaData("curDuringTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARTNERS, new org.apache.thrift.meta_data.FieldMetaData("partners", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.PartnerInfo.class))));
    tmpMap.put(_Fields.MARKS, new org.apache.thrift.meta_data.FieldMetaData("marks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.DanceMarkInfo.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCReturnDanceRoomMsg.class, metaDataMap);
  }

  public SCReturnDanceRoomMsg() {
  }

  public SCReturnDanceRoomMsg(
    long charId,
    byte danceState,
    byte mode,
    short songId,
    byte songLevel,
    short startActionId,
    List<Short> finishActionIds,
    byte stageId,
    byte lightId,
    int curDuringTime,
    List<com.ling9527.music.common.msg.auto.PartnerInfo> partners,
    List<com.ling9527.music.common.msg.auto.DanceMarkInfo> marks)
  {
    this();
    this.charId = charId;
    setCharIdIsSet(true);
    this.danceState = danceState;
    setDanceStateIsSet(true);
    this.mode = mode;
    setModeIsSet(true);
    this.songId = songId;
    setSongIdIsSet(true);
    this.songLevel = songLevel;
    setSongLevelIsSet(true);
    this.startActionId = startActionId;
    setStartActionIdIsSet(true);
    this.finishActionIds = finishActionIds;
    this.stageId = stageId;
    setStageIdIsSet(true);
    this.lightId = lightId;
    setLightIdIsSet(true);
    this.curDuringTime = curDuringTime;
    setCurDuringTimeIsSet(true);
    this.partners = partners;
    this.marks = marks;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCReturnDanceRoomMsg(SCReturnDanceRoomMsg other) {
    __isset_bitfield = other.__isset_bitfield;
    this.charId = other.charId;
    this.danceState = other.danceState;
    this.mode = other.mode;
    this.songId = other.songId;
    this.songLevel = other.songLevel;
    this.startActionId = other.startActionId;
    if (other.isSetFinishActionIds()) {
      List<Short> __this__finishActionIds = new ArrayList<Short>();
      for (Short other_element : other.finishActionIds) {
        __this__finishActionIds.add(other_element);
      }
      this.finishActionIds = __this__finishActionIds;
    }
    this.stageId = other.stageId;
    this.lightId = other.lightId;
    this.curDuringTime = other.curDuringTime;
    if (other.isSetPartners()) {
      List<com.ling9527.music.common.msg.auto.PartnerInfo> __this__partners = new ArrayList<com.ling9527.music.common.msg.auto.PartnerInfo>();
      for (com.ling9527.music.common.msg.auto.PartnerInfo other_element : other.partners) {
        __this__partners.add(new com.ling9527.music.common.msg.auto.PartnerInfo(other_element));
      }
      this.partners = __this__partners;
    }
    if (other.isSetMarks()) {
      List<com.ling9527.music.common.msg.auto.DanceMarkInfo> __this__marks = new ArrayList<com.ling9527.music.common.msg.auto.DanceMarkInfo>();
      for (com.ling9527.music.common.msg.auto.DanceMarkInfo other_element : other.marks) {
        __this__marks.add(new com.ling9527.music.common.msg.auto.DanceMarkInfo(other_element));
      }
      this.marks = __this__marks;
    }
  }

  public SCReturnDanceRoomMsg deepCopy() {
    return new SCReturnDanceRoomMsg(this);
  }

  @Override
  public void clear() {
    setCharIdIsSet(false);
    this.charId = 0;
    setDanceStateIsSet(false);
    this.danceState = 0;
    setModeIsSet(false);
    this.mode = 0;
    setSongIdIsSet(false);
    this.songId = 0;
    setSongLevelIsSet(false);
    this.songLevel = 0;
    setStartActionIdIsSet(false);
    this.startActionId = 0;
    this.finishActionIds = null;
    setStageIdIsSet(false);
    this.stageId = 0;
    setLightIdIsSet(false);
    this.lightId = 0;
    setCurDuringTimeIsSet(false);
    this.curDuringTime = 0;
    this.partners = null;
    this.marks = null;
  }

  public long getCharId() {
    return this.charId;
  }

  public SCReturnDanceRoomMsg setCharId(long charId) {
    this.charId = charId;
    setCharIdIsSet(true);
    return this;
  }

  public void unsetCharId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHARID_ISSET_ID);
  }

  /** Returns true if field charId is set (has been assigned a value) and false otherwise */
  public boolean isSetCharId() {
    return EncodingUtils.testBit(__isset_bitfield, __CHARID_ISSET_ID);
  }

  public void setCharIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHARID_ISSET_ID, value);
  }

  /**
   * 0:Dancing outside  1:Ready Dance  2:Dance within
   */
  public byte getDanceState() {
    return this.danceState;
  }

  /**
   * 0:Dancing outside  1:Ready Dance  2:Dance within
   */
  public SCReturnDanceRoomMsg setDanceState(byte danceState) {
    this.danceState = danceState;
    setDanceStateIsSet(true);
    return this;
  }

  public void unsetDanceState() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DANCESTATE_ISSET_ID);
  }

  /** Returns true if field danceState is set (has been assigned a value) and false otherwise */
  public boolean isSetDanceState() {
    return EncodingUtils.testBit(__isset_bitfield, __DANCESTATE_ISSET_ID);
  }

  public void setDanceStateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DANCESTATE_ISSET_ID, value);
  }

  public byte getMode() {
    return this.mode;
  }

  public SCReturnDanceRoomMsg setMode(byte mode) {
    this.mode = mode;
    setModeIsSet(true);
    return this;
  }

  public void unsetMode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MODE_ISSET_ID);
  }

  /** Returns true if field mode is set (has been assigned a value) and false otherwise */
  public boolean isSetMode() {
    return EncodingUtils.testBit(__isset_bitfield, __MODE_ISSET_ID);
  }

  public void setModeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MODE_ISSET_ID, value);
  }

  public short getSongId() {
    return this.songId;
  }

  public SCReturnDanceRoomMsg setSongId(short songId) {
    this.songId = songId;
    setSongIdIsSet(true);
    return this;
  }

  public void unsetSongId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SONGID_ISSET_ID);
  }

  /** Returns true if field songId is set (has been assigned a value) and false otherwise */
  public boolean isSetSongId() {
    return EncodingUtils.testBit(__isset_bitfield, __SONGID_ISSET_ID);
  }

  public void setSongIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SONGID_ISSET_ID, value);
  }

  public byte getSongLevel() {
    return this.songLevel;
  }

  public SCReturnDanceRoomMsg setSongLevel(byte songLevel) {
    this.songLevel = songLevel;
    setSongLevelIsSet(true);
    return this;
  }

  public void unsetSongLevel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SONGLEVEL_ISSET_ID);
  }

  /** Returns true if field songLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetSongLevel() {
    return EncodingUtils.testBit(__isset_bitfield, __SONGLEVEL_ISSET_ID);
  }

  public void setSongLevelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SONGLEVEL_ISSET_ID, value);
  }

  public short getStartActionId() {
    return this.startActionId;
  }

  public SCReturnDanceRoomMsg setStartActionId(short startActionId) {
    this.startActionId = startActionId;
    setStartActionIdIsSet(true);
    return this;
  }

  public void unsetStartActionId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTACTIONID_ISSET_ID);
  }

  /** Returns true if field startActionId is set (has been assigned a value) and false otherwise */
  public boolean isSetStartActionId() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTACTIONID_ISSET_ID);
  }

  public void setStartActionIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTACTIONID_ISSET_ID, value);
  }

  public int getFinishActionIdsSize() {
    return (this.finishActionIds == null) ? 0 : this.finishActionIds.size();
  }

  public java.util.Iterator<Short> getFinishActionIdsIterator() {
    return (this.finishActionIds == null) ? null : this.finishActionIds.iterator();
  }

  public void addToFinishActionIds(short elem) {
    if (this.finishActionIds == null) {
      this.finishActionIds = new ArrayList<Short>();
    }
    this.finishActionIds.add(elem);
  }

  public List<Short> getFinishActionIds() {
    return this.finishActionIds;
  }

  public SCReturnDanceRoomMsg setFinishActionIds(List<Short> finishActionIds) {
    this.finishActionIds = finishActionIds;
    return this;
  }

  public void unsetFinishActionIds() {
    this.finishActionIds = null;
  }

  /** Returns true if field finishActionIds is set (has been assigned a value) and false otherwise */
  public boolean isSetFinishActionIds() {
    return this.finishActionIds != null;
  }

  public void setFinishActionIdsIsSet(boolean value) {
    if (!value) {
      this.finishActionIds = null;
    }
  }

  public byte getStageId() {
    return this.stageId;
  }

  public SCReturnDanceRoomMsg setStageId(byte stageId) {
    this.stageId = stageId;
    setStageIdIsSet(true);
    return this;
  }

  public void unsetStageId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STAGEID_ISSET_ID);
  }

  /** Returns true if field stageId is set (has been assigned a value) and false otherwise */
  public boolean isSetStageId() {
    return EncodingUtils.testBit(__isset_bitfield, __STAGEID_ISSET_ID);
  }

  public void setStageIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STAGEID_ISSET_ID, value);
  }

  public byte getLightId() {
    return this.lightId;
  }

  public SCReturnDanceRoomMsg setLightId(byte lightId) {
    this.lightId = lightId;
    setLightIdIsSet(true);
    return this;
  }

  public void unsetLightId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIGHTID_ISSET_ID);
  }

  /** Returns true if field lightId is set (has been assigned a value) and false otherwise */
  public boolean isSetLightId() {
    return EncodingUtils.testBit(__isset_bitfield, __LIGHTID_ISSET_ID);
  }

  public void setLightIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIGHTID_ISSET_ID, value);
  }

  public int getCurDuringTime() {
    return this.curDuringTime;
  }

  public SCReturnDanceRoomMsg setCurDuringTime(int curDuringTime) {
    this.curDuringTime = curDuringTime;
    setCurDuringTimeIsSet(true);
    return this;
  }

  public void unsetCurDuringTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURDURINGTIME_ISSET_ID);
  }

  /** Returns true if field curDuringTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCurDuringTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CURDURINGTIME_ISSET_ID);
  }

  public void setCurDuringTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURDURINGTIME_ISSET_ID, value);
  }

  public int getPartnersSize() {
    return (this.partners == null) ? 0 : this.partners.size();
  }

  public java.util.Iterator<com.ling9527.music.common.msg.auto.PartnerInfo> getPartnersIterator() {
    return (this.partners == null) ? null : this.partners.iterator();
  }

  public void addToPartners(com.ling9527.music.common.msg.auto.PartnerInfo elem) {
    if (this.partners == null) {
      this.partners = new ArrayList<com.ling9527.music.common.msg.auto.PartnerInfo>();
    }
    this.partners.add(elem);
  }

  public List<com.ling9527.music.common.msg.auto.PartnerInfo> getPartners() {
    return this.partners;
  }

  public SCReturnDanceRoomMsg setPartners(List<com.ling9527.music.common.msg.auto.PartnerInfo> partners) {
    this.partners = partners;
    return this;
  }

  public void unsetPartners() {
    this.partners = null;
  }

  /** Returns true if field partners is set (has been assigned a value) and false otherwise */
  public boolean isSetPartners() {
    return this.partners != null;
  }

  public void setPartnersIsSet(boolean value) {
    if (!value) {
      this.partners = null;
    }
  }

  public int getMarksSize() {
    return (this.marks == null) ? 0 : this.marks.size();
  }

  public java.util.Iterator<com.ling9527.music.common.msg.auto.DanceMarkInfo> getMarksIterator() {
    return (this.marks == null) ? null : this.marks.iterator();
  }

  public void addToMarks(com.ling9527.music.common.msg.auto.DanceMarkInfo elem) {
    if (this.marks == null) {
      this.marks = new ArrayList<com.ling9527.music.common.msg.auto.DanceMarkInfo>();
    }
    this.marks.add(elem);
  }

  public List<com.ling9527.music.common.msg.auto.DanceMarkInfo> getMarks() {
    return this.marks;
  }

  public SCReturnDanceRoomMsg setMarks(List<com.ling9527.music.common.msg.auto.DanceMarkInfo> marks) {
    this.marks = marks;
    return this;
  }

  public void unsetMarks() {
    this.marks = null;
  }

  /** Returns true if field marks is set (has been assigned a value) and false otherwise */
  public boolean isSetMarks() {
    return this.marks != null;
  }

  public void setMarksIsSet(boolean value) {
    if (!value) {
      this.marks = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CHAR_ID:
      if (value == null) {
        unsetCharId();
      } else {
        setCharId((Long)value);
      }
      break;

    case DANCE_STATE:
      if (value == null) {
        unsetDanceState();
      } else {
        setDanceState((Byte)value);
      }
      break;

    case MODE:
      if (value == null) {
        unsetMode();
      } else {
        setMode((Byte)value);
      }
      break;

    case SONG_ID:
      if (value == null) {
        unsetSongId();
      } else {
        setSongId((Short)value);
      }
      break;

    case SONG_LEVEL:
      if (value == null) {
        unsetSongLevel();
      } else {
        setSongLevel((Byte)value);
      }
      break;

    case START_ACTION_ID:
      if (value == null) {
        unsetStartActionId();
      } else {
        setStartActionId((Short)value);
      }
      break;

    case FINISH_ACTION_IDS:
      if (value == null) {
        unsetFinishActionIds();
      } else {
        setFinishActionIds((List<Short>)value);
      }
      break;

    case STAGE_ID:
      if (value == null) {
        unsetStageId();
      } else {
        setStageId((Byte)value);
      }
      break;

    case LIGHT_ID:
      if (value == null) {
        unsetLightId();
      } else {
        setLightId((Byte)value);
      }
      break;

    case CUR_DURING_TIME:
      if (value == null) {
        unsetCurDuringTime();
      } else {
        setCurDuringTime((Integer)value);
      }
      break;

    case PARTNERS:
      if (value == null) {
        unsetPartners();
      } else {
        setPartners((List<com.ling9527.music.common.msg.auto.PartnerInfo>)value);
      }
      break;

    case MARKS:
      if (value == null) {
        unsetMarks();
      } else {
        setMarks((List<com.ling9527.music.common.msg.auto.DanceMarkInfo>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CHAR_ID:
      return Long.valueOf(getCharId());

    case DANCE_STATE:
      return Byte.valueOf(getDanceState());

    case MODE:
      return Byte.valueOf(getMode());

    case SONG_ID:
      return Short.valueOf(getSongId());

    case SONG_LEVEL:
      return Byte.valueOf(getSongLevel());

    case START_ACTION_ID:
      return Short.valueOf(getStartActionId());

    case FINISH_ACTION_IDS:
      return getFinishActionIds();

    case STAGE_ID:
      return Byte.valueOf(getStageId());

    case LIGHT_ID:
      return Byte.valueOf(getLightId());

    case CUR_DURING_TIME:
      return Integer.valueOf(getCurDuringTime());

    case PARTNERS:
      return getPartners();

    case MARKS:
      return getMarks();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CHAR_ID:
      return isSetCharId();
    case DANCE_STATE:
      return isSetDanceState();
    case MODE:
      return isSetMode();
    case SONG_ID:
      return isSetSongId();
    case SONG_LEVEL:
      return isSetSongLevel();
    case START_ACTION_ID:
      return isSetStartActionId();
    case FINISH_ACTION_IDS:
      return isSetFinishActionIds();
    case STAGE_ID:
      return isSetStageId();
    case LIGHT_ID:
      return isSetLightId();
    case CUR_DURING_TIME:
      return isSetCurDuringTime();
    case PARTNERS:
      return isSetPartners();
    case MARKS:
      return isSetMarks();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCReturnDanceRoomMsg)
      return this.equals((SCReturnDanceRoomMsg)that);
    return false;
  }

  public boolean equals(SCReturnDanceRoomMsg that) {
    if (that == null)
      return false;

    boolean this_present_charId = true;
    boolean that_present_charId = true;
    if (this_present_charId || that_present_charId) {
      if (!(this_present_charId && that_present_charId))
        return false;
      if (this.charId != that.charId)
        return false;
    }

    boolean this_present_danceState = true;
    boolean that_present_danceState = true;
    if (this_present_danceState || that_present_danceState) {
      if (!(this_present_danceState && that_present_danceState))
        return false;
      if (this.danceState != that.danceState)
        return false;
    }

    boolean this_present_mode = true;
    boolean that_present_mode = true;
    if (this_present_mode || that_present_mode) {
      if (!(this_present_mode && that_present_mode))
        return false;
      if (this.mode != that.mode)
        return false;
    }

    boolean this_present_songId = true;
    boolean that_present_songId = true;
    if (this_present_songId || that_present_songId) {
      if (!(this_present_songId && that_present_songId))
        return false;
      if (this.songId != that.songId)
        return false;
    }

    boolean this_present_songLevel = true;
    boolean that_present_songLevel = true;
    if (this_present_songLevel || that_present_songLevel) {
      if (!(this_present_songLevel && that_present_songLevel))
        return false;
      if (this.songLevel != that.songLevel)
        return false;
    }

    boolean this_present_startActionId = true;
    boolean that_present_startActionId = true;
    if (this_present_startActionId || that_present_startActionId) {
      if (!(this_present_startActionId && that_present_startActionId))
        return false;
      if (this.startActionId != that.startActionId)
        return false;
    }

    boolean this_present_finishActionIds = true && this.isSetFinishActionIds();
    boolean that_present_finishActionIds = true && that.isSetFinishActionIds();
    if (this_present_finishActionIds || that_present_finishActionIds) {
      if (!(this_present_finishActionIds && that_present_finishActionIds))
        return false;
      if (!this.finishActionIds.equals(that.finishActionIds))
        return false;
    }

    boolean this_present_stageId = true;
    boolean that_present_stageId = true;
    if (this_present_stageId || that_present_stageId) {
      if (!(this_present_stageId && that_present_stageId))
        return false;
      if (this.stageId != that.stageId)
        return false;
    }

    boolean this_present_lightId = true;
    boolean that_present_lightId = true;
    if (this_present_lightId || that_present_lightId) {
      if (!(this_present_lightId && that_present_lightId))
        return false;
      if (this.lightId != that.lightId)
        return false;
    }

    boolean this_present_curDuringTime = true;
    boolean that_present_curDuringTime = true;
    if (this_present_curDuringTime || that_present_curDuringTime) {
      if (!(this_present_curDuringTime && that_present_curDuringTime))
        return false;
      if (this.curDuringTime != that.curDuringTime)
        return false;
    }

    boolean this_present_partners = true && this.isSetPartners();
    boolean that_present_partners = true && that.isSetPartners();
    if (this_present_partners || that_present_partners) {
      if (!(this_present_partners && that_present_partners))
        return false;
      if (!this.partners.equals(that.partners))
        return false;
    }

    boolean this_present_marks = true && this.isSetMarks();
    boolean that_present_marks = true && that.isSetMarks();
    if (this_present_marks || that_present_marks) {
      if (!(this_present_marks && that_present_marks))
        return false;
      if (!this.marks.equals(that.marks))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCReturnDanceRoomMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCReturnDanceRoomMsg typedOther = (SCReturnDanceRoomMsg)other;

    lastComparison = Boolean.valueOf(isSetCharId()).compareTo(typedOther.isSetCharId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCharId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.charId, typedOther.charId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDanceState()).compareTo(typedOther.isSetDanceState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDanceState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.danceState, typedOther.danceState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMode()).compareTo(typedOther.isSetMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mode, typedOther.mode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSongId()).compareTo(typedOther.isSetSongId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSongId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.songId, typedOther.songId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSongLevel()).compareTo(typedOther.isSetSongLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSongLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.songLevel, typedOther.songLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartActionId()).compareTo(typedOther.isSetStartActionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartActionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startActionId, typedOther.startActionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFinishActionIds()).compareTo(typedOther.isSetFinishActionIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFinishActionIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.finishActionIds, typedOther.finishActionIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStageId()).compareTo(typedOther.isSetStageId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStageId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stageId, typedOther.stageId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLightId()).compareTo(typedOther.isSetLightId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLightId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lightId, typedOther.lightId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurDuringTime()).compareTo(typedOther.isSetCurDuringTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurDuringTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.curDuringTime, typedOther.curDuringTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartners()).compareTo(typedOther.isSetPartners());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartners()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partners, typedOther.partners);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMarks()).compareTo(typedOther.isSetMarks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMarks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.marks, typedOther.marks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCReturnDanceRoomMsg(");
    boolean first = true;

    sb.append("charId:");
    sb.append(this.charId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("danceState:");
    sb.append(this.danceState);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mode:");
    sb.append(this.mode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("songId:");
    sb.append(this.songId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("songLevel:");
    sb.append(this.songLevel);
    first = false;
    if (!first) sb.append(", ");
    sb.append("startActionId:");
    sb.append(this.startActionId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("finishActionIds:");
    if (this.finishActionIds == null) {
      sb.append("null");
    } else {
      sb.append(this.finishActionIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stageId:");
    sb.append(this.stageId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lightId:");
    sb.append(this.lightId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("curDuringTime:");
    sb.append(this.curDuringTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("partners:");
    if (this.partners == null) {
      sb.append("null");
    } else {
      sb.append(this.partners);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("marks:");
    if (this.marks == null) {
      sb.append("null");
    } else {
      sb.append(this.marks);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCReturnDanceRoomMsgStandardSchemeFactory implements SchemeFactory {
    public SCReturnDanceRoomMsgStandardScheme getScheme() {
      return new SCReturnDanceRoomMsgStandardScheme();
    }
  }

  private static class SCReturnDanceRoomMsgStandardScheme extends StandardScheme<SCReturnDanceRoomMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCReturnDanceRoomMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CHAR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.charId = iprot.readI64();
              struct.setCharIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DANCE_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.danceState = iprot.readByte();
              struct.setDanceStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.mode = iprot.readByte();
              struct.setModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SONG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.songId = iprot.readI16();
              struct.setSongIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SONG_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.songLevel = iprot.readByte();
              struct.setSongLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // START_ACTION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.startActionId = iprot.readI16();
              struct.setStartActionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FINISH_ACTION_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                struct.finishActionIds = new ArrayList<Short>(_list48.size);
                for (int _i49 = 0; _i49 < _list48.size; ++_i49)
                {
                  short _elem50; // required
                  _elem50 = iprot.readI16();
                  struct.finishActionIds.add(_elem50);
                }
                iprot.readListEnd();
              }
              struct.setFinishActionIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // STAGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.stageId = iprot.readByte();
              struct.setStageIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LIGHT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.lightId = iprot.readByte();
              struct.setLightIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CUR_DURING_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.curDuringTime = iprot.readI32();
              struct.setCurDuringTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PARTNERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list51 = iprot.readListBegin();
                struct.partners = new ArrayList<com.ling9527.music.common.msg.auto.PartnerInfo>(_list51.size);
                for (int _i52 = 0; _i52 < _list51.size; ++_i52)
                {
                  com.ling9527.music.common.msg.auto.PartnerInfo _elem53; // required
                  _elem53 = new com.ling9527.music.common.msg.auto.PartnerInfo();
                  _elem53.read(iprot);
                  struct.partners.add(_elem53);
                }
                iprot.readListEnd();
              }
              struct.setPartnersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // MARKS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list54 = iprot.readListBegin();
                struct.marks = new ArrayList<com.ling9527.music.common.msg.auto.DanceMarkInfo>(_list54.size);
                for (int _i55 = 0; _i55 < _list54.size; ++_i55)
                {
                  com.ling9527.music.common.msg.auto.DanceMarkInfo _elem56; // required
                  _elem56 = new com.ling9527.music.common.msg.auto.DanceMarkInfo();
                  _elem56.read(iprot);
                  struct.marks.add(_elem56);
                }
                iprot.readListEnd();
              }
              struct.setMarksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCReturnDanceRoomMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CHAR_ID_FIELD_DESC);
      oprot.writeI64(struct.charId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DANCE_STATE_FIELD_DESC);
      oprot.writeByte(struct.danceState);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MODE_FIELD_DESC);
      oprot.writeByte(struct.mode);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SONG_ID_FIELD_DESC);
      oprot.writeI16(struct.songId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SONG_LEVEL_FIELD_DESC);
      oprot.writeByte(struct.songLevel);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(START_ACTION_ID_FIELD_DESC);
      oprot.writeI16(struct.startActionId);
      oprot.writeFieldEnd();
      if (struct.finishActionIds != null) {
        oprot.writeFieldBegin(FINISH_ACTION_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, struct.finishActionIds.size()));
          for (short _iter57 : struct.finishActionIds)
          {
            oprot.writeI16(_iter57);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STAGE_ID_FIELD_DESC);
      oprot.writeByte(struct.stageId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LIGHT_ID_FIELD_DESC);
      oprot.writeByte(struct.lightId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CUR_DURING_TIME_FIELD_DESC);
      oprot.writeI32(struct.curDuringTime);
      oprot.writeFieldEnd();
      if (struct.partners != null) {
        oprot.writeFieldBegin(PARTNERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.partners.size()));
          for (com.ling9527.music.common.msg.auto.PartnerInfo _iter58 : struct.partners)
          {
            _iter58.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.marks != null) {
        oprot.writeFieldBegin(MARKS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.marks.size()));
          for (com.ling9527.music.common.msg.auto.DanceMarkInfo _iter59 : struct.marks)
          {
            _iter59.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCReturnDanceRoomMsgTupleSchemeFactory implements SchemeFactory {
    public SCReturnDanceRoomMsgTupleScheme getScheme() {
      return new SCReturnDanceRoomMsgTupleScheme();
    }
  }

  private static class SCReturnDanceRoomMsgTupleScheme extends TupleScheme<SCReturnDanceRoomMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCReturnDanceRoomMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCharId()) {
        optionals.set(0);
      }
      if (struct.isSetDanceState()) {
        optionals.set(1);
      }
      if (struct.isSetMode()) {
        optionals.set(2);
      }
      if (struct.isSetSongId()) {
        optionals.set(3);
      }
      if (struct.isSetSongLevel()) {
        optionals.set(4);
      }
      if (struct.isSetStartActionId()) {
        optionals.set(5);
      }
      if (struct.isSetFinishActionIds()) {
        optionals.set(6);
      }
      if (struct.isSetStageId()) {
        optionals.set(7);
      }
      if (struct.isSetLightId()) {
        optionals.set(8);
      }
      if (struct.isSetCurDuringTime()) {
        optionals.set(9);
      }
      if (struct.isSetPartners()) {
        optionals.set(10);
      }
      if (struct.isSetMarks()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetCharId()) {
        oprot.writeI64(struct.charId);
      }
      if (struct.isSetDanceState()) {
        oprot.writeByte(struct.danceState);
      }
      if (struct.isSetMode()) {
        oprot.writeByte(struct.mode);
      }
      if (struct.isSetSongId()) {
        oprot.writeI16(struct.songId);
      }
      if (struct.isSetSongLevel()) {
        oprot.writeByte(struct.songLevel);
      }
      if (struct.isSetStartActionId()) {
        oprot.writeI16(struct.startActionId);
      }
      if (struct.isSetFinishActionIds()) {
        {
          oprot.writeI32(struct.finishActionIds.size());
          for (short _iter60 : struct.finishActionIds)
          {
            oprot.writeI16(_iter60);
          }
        }
      }
      if (struct.isSetStageId()) {
        oprot.writeByte(struct.stageId);
      }
      if (struct.isSetLightId()) {
        oprot.writeByte(struct.lightId);
      }
      if (struct.isSetCurDuringTime()) {
        oprot.writeI32(struct.curDuringTime);
      }
      if (struct.isSetPartners()) {
        {
          oprot.writeI32(struct.partners.size());
          for (com.ling9527.music.common.msg.auto.PartnerInfo _iter61 : struct.partners)
          {
            _iter61.write(oprot);
          }
        }
      }
      if (struct.isSetMarks()) {
        {
          oprot.writeI32(struct.marks.size());
          for (com.ling9527.music.common.msg.auto.DanceMarkInfo _iter62 : struct.marks)
          {
            _iter62.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCReturnDanceRoomMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.charId = iprot.readI64();
        struct.setCharIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.danceState = iprot.readByte();
        struct.setDanceStateIsSet(true);
      }
      if (incoming.get(2)) {
        struct.mode = iprot.readByte();
        struct.setModeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.songId = iprot.readI16();
        struct.setSongIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.songLevel = iprot.readByte();
        struct.setSongLevelIsSet(true);
      }
      if (incoming.get(5)) {
        struct.startActionId = iprot.readI16();
        struct.setStartActionIdIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list63 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, iprot.readI32());
          struct.finishActionIds = new ArrayList<Short>(_list63.size);
          for (int _i64 = 0; _i64 < _list63.size; ++_i64)
          {
            short _elem65; // required
            _elem65 = iprot.readI16();
            struct.finishActionIds.add(_elem65);
          }
        }
        struct.setFinishActionIdsIsSet(true);
      }
      if (incoming.get(7)) {
        struct.stageId = iprot.readByte();
        struct.setStageIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.lightId = iprot.readByte();
        struct.setLightIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.curDuringTime = iprot.readI32();
        struct.setCurDuringTimeIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list66 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.partners = new ArrayList<com.ling9527.music.common.msg.auto.PartnerInfo>(_list66.size);
          for (int _i67 = 0; _i67 < _list66.size; ++_i67)
          {
            com.ling9527.music.common.msg.auto.PartnerInfo _elem68; // required
            _elem68 = new com.ling9527.music.common.msg.auto.PartnerInfo();
            _elem68.read(iprot);
            struct.partners.add(_elem68);
          }
        }
        struct.setPartnersIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.marks = new ArrayList<com.ling9527.music.common.msg.auto.DanceMarkInfo>(_list69.size);
          for (int _i70 = 0; _i70 < _list69.size; ++_i70)
          {
            com.ling9527.music.common.msg.auto.DanceMarkInfo _elem71; // required
            _elem71 = new com.ling9527.music.common.msg.auto.DanceMarkInfo();
            _elem71.read(iprot);
            struct.marks.add(_elem71);
          }
        }
        struct.setMarksIsSet(true);
      }
    }
  }

}

