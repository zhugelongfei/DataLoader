/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.cs;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CSUserPasswdMsg implements org.apache.thrift.TBase<CSUserPasswdMsg, CSUserPasswdMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CSUserPasswdMsg");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PASSWD_FIELD_DESC = new org.apache.thrift.protocol.TField("passwd", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField MAC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("macId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DEVICE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceType", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField DEVICE_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceVersion", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField DEVICE_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceMode", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField F_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("fVal", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField RESOURCE_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceVersion", org.apache.thrift.protocol.TType.I16, (short)10);
  private static final org.apache.thrift.protocol.TField DEVICE_FIELD_DESC = new org.apache.thrift.protocol.TField("device", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField RECONNECT_FIELD_DESC = new org.apache.thrift.protocol.TField("reconnect", org.apache.thrift.protocol.TType.BOOL, (short)12);
  private static final org.apache.thrift.protocol.TField GS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("gsId", org.apache.thrift.protocol.TType.STRING, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CSUserPasswdMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CSUserPasswdMsgTupleSchemeFactory());
  }

  public String name; // required
  public String passwd; // required
  public String deviceId; // required
  public String macId; // required
  public String deviceType; // required
  public String deviceVersion; // required
  public String version; // required
  public String deviceMode; // required
  public String fVal; // required
  public short resourceVersion; // required
  public String device; // required
  public boolean reconnect; // required
  public String gsId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    PASSWD((short)2, "passwd"),
    DEVICE_ID((short)3, "deviceId"),
    MAC_ID((short)4, "macId"),
    DEVICE_TYPE((short)5, "deviceType"),
    DEVICE_VERSION((short)6, "deviceVersion"),
    VERSION((short)7, "version"),
    DEVICE_MODE((short)8, "deviceMode"),
    F_VAL((short)9, "fVal"),
    RESOURCE_VERSION((short)10, "resourceVersion"),
    DEVICE((short)11, "device"),
    RECONNECT((short)12, "reconnect"),
    GS_ID((short)13, "gsId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // PASSWD
          return PASSWD;
        case 3: // DEVICE_ID
          return DEVICE_ID;
        case 4: // MAC_ID
          return MAC_ID;
        case 5: // DEVICE_TYPE
          return DEVICE_TYPE;
        case 6: // DEVICE_VERSION
          return DEVICE_VERSION;
        case 7: // VERSION
          return VERSION;
        case 8: // DEVICE_MODE
          return DEVICE_MODE;
        case 9: // F_VAL
          return F_VAL;
        case 10: // RESOURCE_VERSION
          return RESOURCE_VERSION;
        case 11: // DEVICE
          return DEVICE;
        case 12: // RECONNECT
          return RECONNECT;
        case 13: // GS_ID
          return GS_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RESOURCEVERSION_ISSET_ID = 0;
  private static final int __RECONNECT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PASSWD, new org.apache.thrift.meta_data.FieldMetaData("passwd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAC_ID, new org.apache.thrift.meta_data.FieldMetaData("macId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEVICE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("deviceType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEVICE_VERSION, new org.apache.thrift.meta_data.FieldMetaData("deviceVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEVICE_MODE, new org.apache.thrift.meta_data.FieldMetaData("deviceMode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.F_VAL, new org.apache.thrift.meta_data.FieldMetaData("fVal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESOURCE_VERSION, new org.apache.thrift.meta_data.FieldMetaData("resourceVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.DEVICE, new org.apache.thrift.meta_data.FieldMetaData("device", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECONNECT, new org.apache.thrift.meta_data.FieldMetaData("reconnect", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.GS_ID, new org.apache.thrift.meta_data.FieldMetaData("gsId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CSUserPasswdMsg.class, metaDataMap);
  }

  public CSUserPasswdMsg() {
  }

  public CSUserPasswdMsg(
    String name,
    String passwd,
    String deviceId,
    String macId,
    String deviceType,
    String deviceVersion,
    String version,
    String deviceMode,
    String fVal,
    short resourceVersion,
    String device,
    boolean reconnect,
    String gsId)
  {
    this();
    this.name = name;
    this.passwd = passwd;
    this.deviceId = deviceId;
    this.macId = macId;
    this.deviceType = deviceType;
    this.deviceVersion = deviceVersion;
    this.version = version;
    this.deviceMode = deviceMode;
    this.fVal = fVal;
    this.resourceVersion = resourceVersion;
    setResourceVersionIsSet(true);
    this.device = device;
    this.reconnect = reconnect;
    setReconnectIsSet(true);
    this.gsId = gsId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CSUserPasswdMsg(CSUserPasswdMsg other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetPasswd()) {
      this.passwd = other.passwd;
    }
    if (other.isSetDeviceId()) {
      this.deviceId = other.deviceId;
    }
    if (other.isSetMacId()) {
      this.macId = other.macId;
    }
    if (other.isSetDeviceType()) {
      this.deviceType = other.deviceType;
    }
    if (other.isSetDeviceVersion()) {
      this.deviceVersion = other.deviceVersion;
    }
    if (other.isSetVersion()) {
      this.version = other.version;
    }
    if (other.isSetDeviceMode()) {
      this.deviceMode = other.deviceMode;
    }
    if (other.isSetFVal()) {
      this.fVal = other.fVal;
    }
    this.resourceVersion = other.resourceVersion;
    if (other.isSetDevice()) {
      this.device = other.device;
    }
    this.reconnect = other.reconnect;
    if (other.isSetGsId()) {
      this.gsId = other.gsId;
    }
  }

  public CSUserPasswdMsg deepCopy() {
    return new CSUserPasswdMsg(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.passwd = null;
    this.deviceId = null;
    this.macId = null;
    this.deviceType = null;
    this.deviceVersion = null;
    this.version = null;
    this.deviceMode = null;
    this.fVal = null;
    setResourceVersionIsSet(false);
    this.resourceVersion = 0;
    this.device = null;
    setReconnectIsSet(false);
    this.reconnect = false;
    this.gsId = null;
  }

  public String getName() {
    return this.name;
  }

  public CSUserPasswdMsg setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getPasswd() {
    return this.passwd;
  }

  public CSUserPasswdMsg setPasswd(String passwd) {
    this.passwd = passwd;
    return this;
  }

  public void unsetPasswd() {
    this.passwd = null;
  }

  /** Returns true if field passwd is set (has been assigned a value) and false otherwise */
  public boolean isSetPasswd() {
    return this.passwd != null;
  }

  public void setPasswdIsSet(boolean value) {
    if (!value) {
      this.passwd = null;
    }
  }

  public String getDeviceId() {
    return this.deviceId;
  }

  public CSUserPasswdMsg setDeviceId(String deviceId) {
    this.deviceId = deviceId;
    return this;
  }

  public void unsetDeviceId() {
    this.deviceId = null;
  }

  /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceId() {
    return this.deviceId != null;
  }

  public void setDeviceIdIsSet(boolean value) {
    if (!value) {
      this.deviceId = null;
    }
  }

  public String getMacId() {
    return this.macId;
  }

  public CSUserPasswdMsg setMacId(String macId) {
    this.macId = macId;
    return this;
  }

  public void unsetMacId() {
    this.macId = null;
  }

  /** Returns true if field macId is set (has been assigned a value) and false otherwise */
  public boolean isSetMacId() {
    return this.macId != null;
  }

  public void setMacIdIsSet(boolean value) {
    if (!value) {
      this.macId = null;
    }
  }

  public String getDeviceType() {
    return this.deviceType;
  }

  public CSUserPasswdMsg setDeviceType(String deviceType) {
    this.deviceType = deviceType;
    return this;
  }

  public void unsetDeviceType() {
    this.deviceType = null;
  }

  /** Returns true if field deviceType is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceType() {
    return this.deviceType != null;
  }

  public void setDeviceTypeIsSet(boolean value) {
    if (!value) {
      this.deviceType = null;
    }
  }

  public String getDeviceVersion() {
    return this.deviceVersion;
  }

  public CSUserPasswdMsg setDeviceVersion(String deviceVersion) {
    this.deviceVersion = deviceVersion;
    return this;
  }

  public void unsetDeviceVersion() {
    this.deviceVersion = null;
  }

  /** Returns true if field deviceVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceVersion() {
    return this.deviceVersion != null;
  }

  public void setDeviceVersionIsSet(boolean value) {
    if (!value) {
      this.deviceVersion = null;
    }
  }

  public String getVersion() {
    return this.version;
  }

  public CSUserPasswdMsg setVersion(String version) {
    this.version = version;
    return this;
  }

  public void unsetVersion() {
    this.version = null;
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return this.version != null;
  }

  public void setVersionIsSet(boolean value) {
    if (!value) {
      this.version = null;
    }
  }

  public String getDeviceMode() {
    return this.deviceMode;
  }

  public CSUserPasswdMsg setDeviceMode(String deviceMode) {
    this.deviceMode = deviceMode;
    return this;
  }

  public void unsetDeviceMode() {
    this.deviceMode = null;
  }

  /** Returns true if field deviceMode is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceMode() {
    return this.deviceMode != null;
  }

  public void setDeviceModeIsSet(boolean value) {
    if (!value) {
      this.deviceMode = null;
    }
  }

  public String getFVal() {
    return this.fVal;
  }

  public CSUserPasswdMsg setFVal(String fVal) {
    this.fVal = fVal;
    return this;
  }

  public void unsetFVal() {
    this.fVal = null;
  }

  /** Returns true if field fVal is set (has been assigned a value) and false otherwise */
  public boolean isSetFVal() {
    return this.fVal != null;
  }

  public void setFValIsSet(boolean value) {
    if (!value) {
      this.fVal = null;
    }
  }

  public short getResourceVersion() {
    return this.resourceVersion;
  }

  public CSUserPasswdMsg setResourceVersion(short resourceVersion) {
    this.resourceVersion = resourceVersion;
    setResourceVersionIsSet(true);
    return this;
  }

  public void unsetResourceVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RESOURCEVERSION_ISSET_ID);
  }

  /** Returns true if field resourceVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetResourceVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __RESOURCEVERSION_ISSET_ID);
  }

  public void setResourceVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RESOURCEVERSION_ISSET_ID, value);
  }

  public String getDevice() {
    return this.device;
  }

  public CSUserPasswdMsg setDevice(String device) {
    this.device = device;
    return this;
  }

  public void unsetDevice() {
    this.device = null;
  }

  /** Returns true if field device is set (has been assigned a value) and false otherwise */
  public boolean isSetDevice() {
    return this.device != null;
  }

  public void setDeviceIsSet(boolean value) {
    if (!value) {
      this.device = null;
    }
  }

  public boolean isReconnect() {
    return this.reconnect;
  }

  public CSUserPasswdMsg setReconnect(boolean reconnect) {
    this.reconnect = reconnect;
    setReconnectIsSet(true);
    return this;
  }

  public void unsetReconnect() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECONNECT_ISSET_ID);
  }

  /** Returns true if field reconnect is set (has been assigned a value) and false otherwise */
  public boolean isSetReconnect() {
    return EncodingUtils.testBit(__isset_bitfield, __RECONNECT_ISSET_ID);
  }

  public void setReconnectIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECONNECT_ISSET_ID, value);
  }

  public String getGsId() {
    return this.gsId;
  }

  public CSUserPasswdMsg setGsId(String gsId) {
    this.gsId = gsId;
    return this;
  }

  public void unsetGsId() {
    this.gsId = null;
  }

  /** Returns true if field gsId is set (has been assigned a value) and false otherwise */
  public boolean isSetGsId() {
    return this.gsId != null;
  }

  public void setGsIdIsSet(boolean value) {
    if (!value) {
      this.gsId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case PASSWD:
      if (value == null) {
        unsetPasswd();
      } else {
        setPasswd((String)value);
      }
      break;

    case DEVICE_ID:
      if (value == null) {
        unsetDeviceId();
      } else {
        setDeviceId((String)value);
      }
      break;

    case MAC_ID:
      if (value == null) {
        unsetMacId();
      } else {
        setMacId((String)value);
      }
      break;

    case DEVICE_TYPE:
      if (value == null) {
        unsetDeviceType();
      } else {
        setDeviceType((String)value);
      }
      break;

    case DEVICE_VERSION:
      if (value == null) {
        unsetDeviceVersion();
      } else {
        setDeviceVersion((String)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((String)value);
      }
      break;

    case DEVICE_MODE:
      if (value == null) {
        unsetDeviceMode();
      } else {
        setDeviceMode((String)value);
      }
      break;

    case F_VAL:
      if (value == null) {
        unsetFVal();
      } else {
        setFVal((String)value);
      }
      break;

    case RESOURCE_VERSION:
      if (value == null) {
        unsetResourceVersion();
      } else {
        setResourceVersion((Short)value);
      }
      break;

    case DEVICE:
      if (value == null) {
        unsetDevice();
      } else {
        setDevice((String)value);
      }
      break;

    case RECONNECT:
      if (value == null) {
        unsetReconnect();
      } else {
        setReconnect((Boolean)value);
      }
      break;

    case GS_ID:
      if (value == null) {
        unsetGsId();
      } else {
        setGsId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case PASSWD:
      return getPasswd();

    case DEVICE_ID:
      return getDeviceId();

    case MAC_ID:
      return getMacId();

    case DEVICE_TYPE:
      return getDeviceType();

    case DEVICE_VERSION:
      return getDeviceVersion();

    case VERSION:
      return getVersion();

    case DEVICE_MODE:
      return getDeviceMode();

    case F_VAL:
      return getFVal();

    case RESOURCE_VERSION:
      return Short.valueOf(getResourceVersion());

    case DEVICE:
      return getDevice();

    case RECONNECT:
      return Boolean.valueOf(isReconnect());

    case GS_ID:
      return getGsId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case PASSWD:
      return isSetPasswd();
    case DEVICE_ID:
      return isSetDeviceId();
    case MAC_ID:
      return isSetMacId();
    case DEVICE_TYPE:
      return isSetDeviceType();
    case DEVICE_VERSION:
      return isSetDeviceVersion();
    case VERSION:
      return isSetVersion();
    case DEVICE_MODE:
      return isSetDeviceMode();
    case F_VAL:
      return isSetFVal();
    case RESOURCE_VERSION:
      return isSetResourceVersion();
    case DEVICE:
      return isSetDevice();
    case RECONNECT:
      return isSetReconnect();
    case GS_ID:
      return isSetGsId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CSUserPasswdMsg)
      return this.equals((CSUserPasswdMsg)that);
    return false;
  }

  public boolean equals(CSUserPasswdMsg that) {
    if (that == null)
      return false;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_passwd = true && this.isSetPasswd();
    boolean that_present_passwd = true && that.isSetPasswd();
    if (this_present_passwd || that_present_passwd) {
      if (!(this_present_passwd && that_present_passwd))
        return false;
      if (!this.passwd.equals(that.passwd))
        return false;
    }

    boolean this_present_deviceId = true && this.isSetDeviceId();
    boolean that_present_deviceId = true && that.isSetDeviceId();
    if (this_present_deviceId || that_present_deviceId) {
      if (!(this_present_deviceId && that_present_deviceId))
        return false;
      if (!this.deviceId.equals(that.deviceId))
        return false;
    }

    boolean this_present_macId = true && this.isSetMacId();
    boolean that_present_macId = true && that.isSetMacId();
    if (this_present_macId || that_present_macId) {
      if (!(this_present_macId && that_present_macId))
        return false;
      if (!this.macId.equals(that.macId))
        return false;
    }

    boolean this_present_deviceType = true && this.isSetDeviceType();
    boolean that_present_deviceType = true && that.isSetDeviceType();
    if (this_present_deviceType || that_present_deviceType) {
      if (!(this_present_deviceType && that_present_deviceType))
        return false;
      if (!this.deviceType.equals(that.deviceType))
        return false;
    }

    boolean this_present_deviceVersion = true && this.isSetDeviceVersion();
    boolean that_present_deviceVersion = true && that.isSetDeviceVersion();
    if (this_present_deviceVersion || that_present_deviceVersion) {
      if (!(this_present_deviceVersion && that_present_deviceVersion))
        return false;
      if (!this.deviceVersion.equals(that.deviceVersion))
        return false;
    }

    boolean this_present_version = true && this.isSetVersion();
    boolean that_present_version = true && that.isSetVersion();
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (!this.version.equals(that.version))
        return false;
    }

    boolean this_present_deviceMode = true && this.isSetDeviceMode();
    boolean that_present_deviceMode = true && that.isSetDeviceMode();
    if (this_present_deviceMode || that_present_deviceMode) {
      if (!(this_present_deviceMode && that_present_deviceMode))
        return false;
      if (!this.deviceMode.equals(that.deviceMode))
        return false;
    }

    boolean this_present_fVal = true && this.isSetFVal();
    boolean that_present_fVal = true && that.isSetFVal();
    if (this_present_fVal || that_present_fVal) {
      if (!(this_present_fVal && that_present_fVal))
        return false;
      if (!this.fVal.equals(that.fVal))
        return false;
    }

    boolean this_present_resourceVersion = true;
    boolean that_present_resourceVersion = true;
    if (this_present_resourceVersion || that_present_resourceVersion) {
      if (!(this_present_resourceVersion && that_present_resourceVersion))
        return false;
      if (this.resourceVersion != that.resourceVersion)
        return false;
    }

    boolean this_present_device = true && this.isSetDevice();
    boolean that_present_device = true && that.isSetDevice();
    if (this_present_device || that_present_device) {
      if (!(this_present_device && that_present_device))
        return false;
      if (!this.device.equals(that.device))
        return false;
    }

    boolean this_present_reconnect = true;
    boolean that_present_reconnect = true;
    if (this_present_reconnect || that_present_reconnect) {
      if (!(this_present_reconnect && that_present_reconnect))
        return false;
      if (this.reconnect != that.reconnect)
        return false;
    }

    boolean this_present_gsId = true && this.isSetGsId();
    boolean that_present_gsId = true && that.isSetGsId();
    if (this_present_gsId || that_present_gsId) {
      if (!(this_present_gsId && that_present_gsId))
        return false;
      if (!this.gsId.equals(that.gsId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(CSUserPasswdMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CSUserPasswdMsg typedOther = (CSUserPasswdMsg)other;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPasswd()).compareTo(typedOther.isSetPasswd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPasswd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.passwd, typedOther.passwd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeviceId()).compareTo(typedOther.isSetDeviceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, typedOther.deviceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMacId()).compareTo(typedOther.isSetMacId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMacId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.macId, typedOther.macId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeviceType()).compareTo(typedOther.isSetDeviceType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceType, typedOther.deviceType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeviceVersion()).compareTo(typedOther.isSetDeviceVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceVersion, typedOther.deviceVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(typedOther.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, typedOther.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeviceMode()).compareTo(typedOther.isSetDeviceMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceMode, typedOther.deviceMode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFVal()).compareTo(typedOther.isSetFVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fVal, typedOther.fVal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResourceVersion()).compareTo(typedOther.isSetResourceVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResourceVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceVersion, typedOther.resourceVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDevice()).compareTo(typedOther.isSetDevice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDevice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.device, typedOther.device);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReconnect()).compareTo(typedOther.isSetReconnect());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReconnect()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reconnect, typedOther.reconnect);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGsId()).compareTo(typedOther.isSetGsId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGsId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gsId, typedOther.gsId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CSUserPasswdMsg(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("passwd:");
    if (this.passwd == null) {
      sb.append("null");
    } else {
      sb.append(this.passwd);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deviceId:");
    if (this.deviceId == null) {
      sb.append("null");
    } else {
      sb.append(this.deviceId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("macId:");
    if (this.macId == null) {
      sb.append("null");
    } else {
      sb.append(this.macId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deviceType:");
    if (this.deviceType == null) {
      sb.append("null");
    } else {
      sb.append(this.deviceType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deviceVersion:");
    if (this.deviceVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.deviceVersion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("version:");
    if (this.version == null) {
      sb.append("null");
    } else {
      sb.append(this.version);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deviceMode:");
    if (this.deviceMode == null) {
      sb.append("null");
    } else {
      sb.append(this.deviceMode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fVal:");
    if (this.fVal == null) {
      sb.append("null");
    } else {
      sb.append(this.fVal);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("resourceVersion:");
    sb.append(this.resourceVersion);
    first = false;
    if (!first) sb.append(", ");
    sb.append("device:");
    if (this.device == null) {
      sb.append("null");
    } else {
      sb.append(this.device);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reconnect:");
    sb.append(this.reconnect);
    first = false;
    if (!first) sb.append(", ");
    sb.append("gsId:");
    if (this.gsId == null) {
      sb.append("null");
    } else {
      sb.append(this.gsId);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CSUserPasswdMsgStandardSchemeFactory implements SchemeFactory {
    public CSUserPasswdMsgStandardScheme getScheme() {
      return new CSUserPasswdMsgStandardScheme();
    }
  }

  private static class CSUserPasswdMsgStandardScheme extends StandardScheme<CSUserPasswdMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CSUserPasswdMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PASSWD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.passwd = iprot.readString();
              struct.setPasswdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DEVICE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deviceId = iprot.readString();
              struct.setDeviceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MAC_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.macId = iprot.readString();
              struct.setMacIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DEVICE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deviceType = iprot.readString();
              struct.setDeviceTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DEVICE_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deviceVersion = iprot.readString();
              struct.setDeviceVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.version = iprot.readString();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DEVICE_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deviceMode = iprot.readString();
              struct.setDeviceModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // F_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fVal = iprot.readString();
              struct.setFValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // RESOURCE_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.resourceVersion = iprot.readI16();
              struct.setResourceVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DEVICE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.device = iprot.readString();
              struct.setDeviceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // RECONNECT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.reconnect = iprot.readBool();
              struct.setReconnectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // GS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.gsId = iprot.readString();
              struct.setGsIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CSUserPasswdMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.passwd != null) {
        oprot.writeFieldBegin(PASSWD_FIELD_DESC);
        oprot.writeString(struct.passwd);
        oprot.writeFieldEnd();
      }
      if (struct.deviceId != null) {
        oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
        oprot.writeString(struct.deviceId);
        oprot.writeFieldEnd();
      }
      if (struct.macId != null) {
        oprot.writeFieldBegin(MAC_ID_FIELD_DESC);
        oprot.writeString(struct.macId);
        oprot.writeFieldEnd();
      }
      if (struct.deviceType != null) {
        oprot.writeFieldBegin(DEVICE_TYPE_FIELD_DESC);
        oprot.writeString(struct.deviceType);
        oprot.writeFieldEnd();
      }
      if (struct.deviceVersion != null) {
        oprot.writeFieldBegin(DEVICE_VERSION_FIELD_DESC);
        oprot.writeString(struct.deviceVersion);
        oprot.writeFieldEnd();
      }
      if (struct.version != null) {
        oprot.writeFieldBegin(VERSION_FIELD_DESC);
        oprot.writeString(struct.version);
        oprot.writeFieldEnd();
      }
      if (struct.deviceMode != null) {
        oprot.writeFieldBegin(DEVICE_MODE_FIELD_DESC);
        oprot.writeString(struct.deviceMode);
        oprot.writeFieldEnd();
      }
      if (struct.fVal != null) {
        oprot.writeFieldBegin(F_VAL_FIELD_DESC);
        oprot.writeString(struct.fVal);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RESOURCE_VERSION_FIELD_DESC);
      oprot.writeI16(struct.resourceVersion);
      oprot.writeFieldEnd();
      if (struct.device != null) {
        oprot.writeFieldBegin(DEVICE_FIELD_DESC);
        oprot.writeString(struct.device);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RECONNECT_FIELD_DESC);
      oprot.writeBool(struct.reconnect);
      oprot.writeFieldEnd();
      if (struct.gsId != null) {
        oprot.writeFieldBegin(GS_ID_FIELD_DESC);
        oprot.writeString(struct.gsId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CSUserPasswdMsgTupleSchemeFactory implements SchemeFactory {
    public CSUserPasswdMsgTupleScheme getScheme() {
      return new CSUserPasswdMsgTupleScheme();
    }
  }

  private static class CSUserPasswdMsgTupleScheme extends TupleScheme<CSUserPasswdMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CSUserPasswdMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetPasswd()) {
        optionals.set(1);
      }
      if (struct.isSetDeviceId()) {
        optionals.set(2);
      }
      if (struct.isSetMacId()) {
        optionals.set(3);
      }
      if (struct.isSetDeviceType()) {
        optionals.set(4);
      }
      if (struct.isSetDeviceVersion()) {
        optionals.set(5);
      }
      if (struct.isSetVersion()) {
        optionals.set(6);
      }
      if (struct.isSetDeviceMode()) {
        optionals.set(7);
      }
      if (struct.isSetFVal()) {
        optionals.set(8);
      }
      if (struct.isSetResourceVersion()) {
        optionals.set(9);
      }
      if (struct.isSetDevice()) {
        optionals.set(10);
      }
      if (struct.isSetReconnect()) {
        optionals.set(11);
      }
      if (struct.isSetGsId()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetPasswd()) {
        oprot.writeString(struct.passwd);
      }
      if (struct.isSetDeviceId()) {
        oprot.writeString(struct.deviceId);
      }
      if (struct.isSetMacId()) {
        oprot.writeString(struct.macId);
      }
      if (struct.isSetDeviceType()) {
        oprot.writeString(struct.deviceType);
      }
      if (struct.isSetDeviceVersion()) {
        oprot.writeString(struct.deviceVersion);
      }
      if (struct.isSetVersion()) {
        oprot.writeString(struct.version);
      }
      if (struct.isSetDeviceMode()) {
        oprot.writeString(struct.deviceMode);
      }
      if (struct.isSetFVal()) {
        oprot.writeString(struct.fVal);
      }
      if (struct.isSetResourceVersion()) {
        oprot.writeI16(struct.resourceVersion);
      }
      if (struct.isSetDevice()) {
        oprot.writeString(struct.device);
      }
      if (struct.isSetReconnect()) {
        oprot.writeBool(struct.reconnect);
      }
      if (struct.isSetGsId()) {
        oprot.writeString(struct.gsId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CSUserPasswdMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.passwd = iprot.readString();
        struct.setPasswdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.deviceId = iprot.readString();
        struct.setDeviceIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.macId = iprot.readString();
        struct.setMacIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.deviceType = iprot.readString();
        struct.setDeviceTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.deviceVersion = iprot.readString();
        struct.setDeviceVersionIsSet(true);
      }
      if (incoming.get(6)) {
        struct.version = iprot.readString();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(7)) {
        struct.deviceMode = iprot.readString();
        struct.setDeviceModeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.fVal = iprot.readString();
        struct.setFValIsSet(true);
      }
      if (incoming.get(9)) {
        struct.resourceVersion = iprot.readI16();
        struct.setResourceVersionIsSet(true);
      }
      if (incoming.get(10)) {
        struct.device = iprot.readString();
        struct.setDeviceIsSet(true);
      }
      if (incoming.get(11)) {
        struct.reconnect = iprot.readBool();
        struct.setReconnectIsSet(true);
      }
      if (incoming.get(12)) {
        struct.gsId = iprot.readString();
        struct.setGsIdIsSet(true);
      }
    }
  }

}

