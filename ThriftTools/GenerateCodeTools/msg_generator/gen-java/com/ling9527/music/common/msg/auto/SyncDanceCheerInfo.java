/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 舞蹈同步欢呼值信息
 */
public class SyncDanceCheerInfo implements org.apache.thrift.TBase<SyncDanceCheerInfo, SyncDanceCheerInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SyncDanceCheerInfo");

  private static final org.apache.thrift.protocol.TField SELF_MATCH_EXTRA_PASS_CONDS_FIELD_DESC = new org.apache.thrift.protocol.TField("selfMatchExtraPassConds", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField TOTAL_CHEER_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("totalCheerVal", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SELF_CHEER_VAL_RATIO_FIELD_DESC = new org.apache.thrift.protocol.TField("selfCheerValRatio", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField NPC_TOTAL_CHEER_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("npcTotalCheerVal", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SyncDanceCheerInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SyncDanceCheerInfoTupleSchemeFactory());
  }

  /**
   * 自己是否满足额外通关条件
   */
  public boolean selfMatchExtraPassConds; // optional
  /**
   * 当前总欢呼值
   */
  public int totalCheerVal; // required
  /**
   * 自己贡献欢呼值占比*1000取整
   */
  public int selfCheerValRatio; // required
  /**
   * npc当前总欢呼值
   */
  public int npcTotalCheerVal; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 自己是否满足额外通关条件
     */
    SELF_MATCH_EXTRA_PASS_CONDS((short)1, "selfMatchExtraPassConds"),
    /**
     * 当前总欢呼值
     */
    TOTAL_CHEER_VAL((short)2, "totalCheerVal"),
    /**
     * 自己贡献欢呼值占比*1000取整
     */
    SELF_CHEER_VAL_RATIO((short)3, "selfCheerValRatio"),
    /**
     * npc当前总欢呼值
     */
    NPC_TOTAL_CHEER_VAL((short)4, "npcTotalCheerVal");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SELF_MATCH_EXTRA_PASS_CONDS
          return SELF_MATCH_EXTRA_PASS_CONDS;
        case 2: // TOTAL_CHEER_VAL
          return TOTAL_CHEER_VAL;
        case 3: // SELF_CHEER_VAL_RATIO
          return SELF_CHEER_VAL_RATIO;
        case 4: // NPC_TOTAL_CHEER_VAL
          return NPC_TOTAL_CHEER_VAL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SELFMATCHEXTRAPASSCONDS_ISSET_ID = 0;
  private static final int __TOTALCHEERVAL_ISSET_ID = 1;
  private static final int __SELFCHEERVALRATIO_ISSET_ID = 2;
  private static final int __NPCTOTALCHEERVAL_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.SELF_MATCH_EXTRA_PASS_CONDS,_Fields.NPC_TOTAL_CHEER_VAL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SELF_MATCH_EXTRA_PASS_CONDS, new org.apache.thrift.meta_data.FieldMetaData("selfMatchExtraPassConds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TOTAL_CHEER_VAL, new org.apache.thrift.meta_data.FieldMetaData("totalCheerVal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SELF_CHEER_VAL_RATIO, new org.apache.thrift.meta_data.FieldMetaData("selfCheerValRatio", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NPC_TOTAL_CHEER_VAL, new org.apache.thrift.meta_data.FieldMetaData("npcTotalCheerVal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SyncDanceCheerInfo.class, metaDataMap);
  }

  public SyncDanceCheerInfo() {
  }

  public SyncDanceCheerInfo(
    int totalCheerVal,
    int selfCheerValRatio)
  {
    this();
    this.totalCheerVal = totalCheerVal;
    setTotalCheerValIsSet(true);
    this.selfCheerValRatio = selfCheerValRatio;
    setSelfCheerValRatioIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SyncDanceCheerInfo(SyncDanceCheerInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.selfMatchExtraPassConds = other.selfMatchExtraPassConds;
    this.totalCheerVal = other.totalCheerVal;
    this.selfCheerValRatio = other.selfCheerValRatio;
    this.npcTotalCheerVal = other.npcTotalCheerVal;
  }

  public SyncDanceCheerInfo deepCopy() {
    return new SyncDanceCheerInfo(this);
  }

  @Override
  public void clear() {
    setSelfMatchExtraPassCondsIsSet(false);
    this.selfMatchExtraPassConds = false;
    setTotalCheerValIsSet(false);
    this.totalCheerVal = 0;
    setSelfCheerValRatioIsSet(false);
    this.selfCheerValRatio = 0;
    setNpcTotalCheerValIsSet(false);
    this.npcTotalCheerVal = 0;
  }

  /**
   * 自己是否满足额外通关条件
   */
  public boolean isSelfMatchExtraPassConds() {
    return this.selfMatchExtraPassConds;
  }

  /**
   * 自己是否满足额外通关条件
   */
  public SyncDanceCheerInfo setSelfMatchExtraPassConds(boolean selfMatchExtraPassConds) {
    this.selfMatchExtraPassConds = selfMatchExtraPassConds;
    setSelfMatchExtraPassCondsIsSet(true);
    return this;
  }

  public void unsetSelfMatchExtraPassConds() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SELFMATCHEXTRAPASSCONDS_ISSET_ID);
  }

  /** Returns true if field selfMatchExtraPassConds is set (has been assigned a value) and false otherwise */
  public boolean isSetSelfMatchExtraPassConds() {
    return EncodingUtils.testBit(__isset_bitfield, __SELFMATCHEXTRAPASSCONDS_ISSET_ID);
  }

  public void setSelfMatchExtraPassCondsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SELFMATCHEXTRAPASSCONDS_ISSET_ID, value);
  }

  /**
   * 当前总欢呼值
   */
  public int getTotalCheerVal() {
    return this.totalCheerVal;
  }

  /**
   * 当前总欢呼值
   */
  public SyncDanceCheerInfo setTotalCheerVal(int totalCheerVal) {
    this.totalCheerVal = totalCheerVal;
    setTotalCheerValIsSet(true);
    return this;
  }

  public void unsetTotalCheerVal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALCHEERVAL_ISSET_ID);
  }

  /** Returns true if field totalCheerVal is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalCheerVal() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALCHEERVAL_ISSET_ID);
  }

  public void setTotalCheerValIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALCHEERVAL_ISSET_ID, value);
  }

  /**
   * 自己贡献欢呼值占比*1000取整
   */
  public int getSelfCheerValRatio() {
    return this.selfCheerValRatio;
  }

  /**
   * 自己贡献欢呼值占比*1000取整
   */
  public SyncDanceCheerInfo setSelfCheerValRatio(int selfCheerValRatio) {
    this.selfCheerValRatio = selfCheerValRatio;
    setSelfCheerValRatioIsSet(true);
    return this;
  }

  public void unsetSelfCheerValRatio() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SELFCHEERVALRATIO_ISSET_ID);
  }

  /** Returns true if field selfCheerValRatio is set (has been assigned a value) and false otherwise */
  public boolean isSetSelfCheerValRatio() {
    return EncodingUtils.testBit(__isset_bitfield, __SELFCHEERVALRATIO_ISSET_ID);
  }

  public void setSelfCheerValRatioIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SELFCHEERVALRATIO_ISSET_ID, value);
  }

  /**
   * npc当前总欢呼值
   */
  public int getNpcTotalCheerVal() {
    return this.npcTotalCheerVal;
  }

  /**
   * npc当前总欢呼值
   */
  public SyncDanceCheerInfo setNpcTotalCheerVal(int npcTotalCheerVal) {
    this.npcTotalCheerVal = npcTotalCheerVal;
    setNpcTotalCheerValIsSet(true);
    return this;
  }

  public void unsetNpcTotalCheerVal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NPCTOTALCHEERVAL_ISSET_ID);
  }

  /** Returns true if field npcTotalCheerVal is set (has been assigned a value) and false otherwise */
  public boolean isSetNpcTotalCheerVal() {
    return EncodingUtils.testBit(__isset_bitfield, __NPCTOTALCHEERVAL_ISSET_ID);
  }

  public void setNpcTotalCheerValIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NPCTOTALCHEERVAL_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SELF_MATCH_EXTRA_PASS_CONDS:
      if (value == null) {
        unsetSelfMatchExtraPassConds();
      } else {
        setSelfMatchExtraPassConds((Boolean)value);
      }
      break;

    case TOTAL_CHEER_VAL:
      if (value == null) {
        unsetTotalCheerVal();
      } else {
        setTotalCheerVal((Integer)value);
      }
      break;

    case SELF_CHEER_VAL_RATIO:
      if (value == null) {
        unsetSelfCheerValRatio();
      } else {
        setSelfCheerValRatio((Integer)value);
      }
      break;

    case NPC_TOTAL_CHEER_VAL:
      if (value == null) {
        unsetNpcTotalCheerVal();
      } else {
        setNpcTotalCheerVal((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SELF_MATCH_EXTRA_PASS_CONDS:
      return Boolean.valueOf(isSelfMatchExtraPassConds());

    case TOTAL_CHEER_VAL:
      return Integer.valueOf(getTotalCheerVal());

    case SELF_CHEER_VAL_RATIO:
      return Integer.valueOf(getSelfCheerValRatio());

    case NPC_TOTAL_CHEER_VAL:
      return Integer.valueOf(getNpcTotalCheerVal());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SELF_MATCH_EXTRA_PASS_CONDS:
      return isSetSelfMatchExtraPassConds();
    case TOTAL_CHEER_VAL:
      return isSetTotalCheerVal();
    case SELF_CHEER_VAL_RATIO:
      return isSetSelfCheerValRatio();
    case NPC_TOTAL_CHEER_VAL:
      return isSetNpcTotalCheerVal();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SyncDanceCheerInfo)
      return this.equals((SyncDanceCheerInfo)that);
    return false;
  }

  public boolean equals(SyncDanceCheerInfo that) {
    if (that == null)
      return false;

    boolean this_present_selfMatchExtraPassConds = true && this.isSetSelfMatchExtraPassConds();
    boolean that_present_selfMatchExtraPassConds = true && that.isSetSelfMatchExtraPassConds();
    if (this_present_selfMatchExtraPassConds || that_present_selfMatchExtraPassConds) {
      if (!(this_present_selfMatchExtraPassConds && that_present_selfMatchExtraPassConds))
        return false;
      if (this.selfMatchExtraPassConds != that.selfMatchExtraPassConds)
        return false;
    }

    boolean this_present_totalCheerVal = true;
    boolean that_present_totalCheerVal = true;
    if (this_present_totalCheerVal || that_present_totalCheerVal) {
      if (!(this_present_totalCheerVal && that_present_totalCheerVal))
        return false;
      if (this.totalCheerVal != that.totalCheerVal)
        return false;
    }

    boolean this_present_selfCheerValRatio = true;
    boolean that_present_selfCheerValRatio = true;
    if (this_present_selfCheerValRatio || that_present_selfCheerValRatio) {
      if (!(this_present_selfCheerValRatio && that_present_selfCheerValRatio))
        return false;
      if (this.selfCheerValRatio != that.selfCheerValRatio)
        return false;
    }

    boolean this_present_npcTotalCheerVal = true && this.isSetNpcTotalCheerVal();
    boolean that_present_npcTotalCheerVal = true && that.isSetNpcTotalCheerVal();
    if (this_present_npcTotalCheerVal || that_present_npcTotalCheerVal) {
      if (!(this_present_npcTotalCheerVal && that_present_npcTotalCheerVal))
        return false;
      if (this.npcTotalCheerVal != that.npcTotalCheerVal)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SyncDanceCheerInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SyncDanceCheerInfo typedOther = (SyncDanceCheerInfo)other;

    lastComparison = Boolean.valueOf(isSetSelfMatchExtraPassConds()).compareTo(typedOther.isSetSelfMatchExtraPassConds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSelfMatchExtraPassConds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.selfMatchExtraPassConds, typedOther.selfMatchExtraPassConds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalCheerVal()).compareTo(typedOther.isSetTotalCheerVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalCheerVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalCheerVal, typedOther.totalCheerVal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSelfCheerValRatio()).compareTo(typedOther.isSetSelfCheerValRatio());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSelfCheerValRatio()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.selfCheerValRatio, typedOther.selfCheerValRatio);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNpcTotalCheerVal()).compareTo(typedOther.isSetNpcTotalCheerVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNpcTotalCheerVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.npcTotalCheerVal, typedOther.npcTotalCheerVal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SyncDanceCheerInfo(");
    boolean first = true;

    if (isSetSelfMatchExtraPassConds()) {
      sb.append("selfMatchExtraPassConds:");
      sb.append(this.selfMatchExtraPassConds);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("totalCheerVal:");
    sb.append(this.totalCheerVal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("selfCheerValRatio:");
    sb.append(this.selfCheerValRatio);
    first = false;
    if (isSetNpcTotalCheerVal()) {
      if (!first) sb.append(", ");
      sb.append("npcTotalCheerVal:");
      sb.append(this.npcTotalCheerVal);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SyncDanceCheerInfoStandardSchemeFactory implements SchemeFactory {
    public SyncDanceCheerInfoStandardScheme getScheme() {
      return new SyncDanceCheerInfoStandardScheme();
    }
  }

  private static class SyncDanceCheerInfoStandardScheme extends StandardScheme<SyncDanceCheerInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SyncDanceCheerInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SELF_MATCH_EXTRA_PASS_CONDS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.selfMatchExtraPassConds = iprot.readBool();
              struct.setSelfMatchExtraPassCondsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TOTAL_CHEER_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalCheerVal = iprot.readI32();
              struct.setTotalCheerValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SELF_CHEER_VAL_RATIO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.selfCheerValRatio = iprot.readI32();
              struct.setSelfCheerValRatioIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NPC_TOTAL_CHEER_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.npcTotalCheerVal = iprot.readI32();
              struct.setNpcTotalCheerValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SyncDanceCheerInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetSelfMatchExtraPassConds()) {
        oprot.writeFieldBegin(SELF_MATCH_EXTRA_PASS_CONDS_FIELD_DESC);
        oprot.writeBool(struct.selfMatchExtraPassConds);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TOTAL_CHEER_VAL_FIELD_DESC);
      oprot.writeI32(struct.totalCheerVal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SELF_CHEER_VAL_RATIO_FIELD_DESC);
      oprot.writeI32(struct.selfCheerValRatio);
      oprot.writeFieldEnd();
      if (struct.isSetNpcTotalCheerVal()) {
        oprot.writeFieldBegin(NPC_TOTAL_CHEER_VAL_FIELD_DESC);
        oprot.writeI32(struct.npcTotalCheerVal);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SyncDanceCheerInfoTupleSchemeFactory implements SchemeFactory {
    public SyncDanceCheerInfoTupleScheme getScheme() {
      return new SyncDanceCheerInfoTupleScheme();
    }
  }

  private static class SyncDanceCheerInfoTupleScheme extends TupleScheme<SyncDanceCheerInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SyncDanceCheerInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSelfMatchExtraPassConds()) {
        optionals.set(0);
      }
      if (struct.isSetTotalCheerVal()) {
        optionals.set(1);
      }
      if (struct.isSetSelfCheerValRatio()) {
        optionals.set(2);
      }
      if (struct.isSetNpcTotalCheerVal()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetSelfMatchExtraPassConds()) {
        oprot.writeBool(struct.selfMatchExtraPassConds);
      }
      if (struct.isSetTotalCheerVal()) {
        oprot.writeI32(struct.totalCheerVal);
      }
      if (struct.isSetSelfCheerValRatio()) {
        oprot.writeI32(struct.selfCheerValRatio);
      }
      if (struct.isSetNpcTotalCheerVal()) {
        oprot.writeI32(struct.npcTotalCheerVal);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SyncDanceCheerInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.selfMatchExtraPassConds = iprot.readBool();
        struct.setSelfMatchExtraPassCondsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.totalCheerVal = iprot.readI32();
        struct.setTotalCheerValIsSet(true);
      }
      if (incoming.get(2)) {
        struct.selfCheerValRatio = iprot.readI32();
        struct.setSelfCheerValRatioIsSet(true);
      }
      if (incoming.get(3)) {
        struct.npcTotalCheerVal = iprot.readI32();
        struct.setNpcTotalCheerValIsSet(true);
      }
    }
  }

}

