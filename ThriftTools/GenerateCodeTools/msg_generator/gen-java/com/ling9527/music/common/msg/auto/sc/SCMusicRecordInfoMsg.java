/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SCMusicRecordInfoMsg implements org.apache.thrift.TBase<SCMusicRecordInfoMsg, SCMusicRecordInfoMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCMusicRecordInfoMsg");

  private static final org.apache.thrift.protocol.TField MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("mode", org.apache.thrift.protocol.TType.BYTE, (short)1);
  private static final org.apache.thrift.protocol.TField MUSIC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("musicId", org.apache.thrift.protocol.TType.I16, (short)2);
  private static final org.apache.thrift.protocol.TField RECORD_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("recordInfos", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("level", org.apache.thrift.protocol.TType.BYTE, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCMusicRecordInfoMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCMusicRecordInfoMsgTupleSchemeFactory());
  }

  public byte mode; // required
  public short musicId; // required
  public List<com.ling9527.music.common.msg.auto.MusicRecordInfo> recordInfos; // required
  public byte level; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MODE((short)1, "mode"),
    MUSIC_ID((short)2, "musicId"),
    RECORD_INFOS((short)3, "recordInfos"),
    LEVEL((short)4, "level");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MODE
          return MODE;
        case 2: // MUSIC_ID
          return MUSIC_ID;
        case 3: // RECORD_INFOS
          return RECORD_INFOS;
        case 4: // LEVEL
          return LEVEL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MODE_ISSET_ID = 0;
  private static final int __MUSICID_ISSET_ID = 1;
  private static final int __LEVEL_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MODE, new org.apache.thrift.meta_data.FieldMetaData("mode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.MUSIC_ID, new org.apache.thrift.meta_data.FieldMetaData("musicId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.RECORD_INFOS, new org.apache.thrift.meta_data.FieldMetaData("recordInfos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.MusicRecordInfo.class))));
    tmpMap.put(_Fields.LEVEL, new org.apache.thrift.meta_data.FieldMetaData("level", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCMusicRecordInfoMsg.class, metaDataMap);
  }

  public SCMusicRecordInfoMsg() {
  }

  public SCMusicRecordInfoMsg(
    byte mode,
    short musicId,
    List<com.ling9527.music.common.msg.auto.MusicRecordInfo> recordInfos,
    byte level)
  {
    this();
    this.mode = mode;
    setModeIsSet(true);
    this.musicId = musicId;
    setMusicIdIsSet(true);
    this.recordInfos = recordInfos;
    this.level = level;
    setLevelIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCMusicRecordInfoMsg(SCMusicRecordInfoMsg other) {
    __isset_bitfield = other.__isset_bitfield;
    this.mode = other.mode;
    this.musicId = other.musicId;
    if (other.isSetRecordInfos()) {
      List<com.ling9527.music.common.msg.auto.MusicRecordInfo> __this__recordInfos = new ArrayList<com.ling9527.music.common.msg.auto.MusicRecordInfo>();
      for (com.ling9527.music.common.msg.auto.MusicRecordInfo other_element : other.recordInfos) {
        __this__recordInfos.add(new com.ling9527.music.common.msg.auto.MusicRecordInfo(other_element));
      }
      this.recordInfos = __this__recordInfos;
    }
    this.level = other.level;
  }

  public SCMusicRecordInfoMsg deepCopy() {
    return new SCMusicRecordInfoMsg(this);
  }

  @Override
  public void clear() {
    setModeIsSet(false);
    this.mode = 0;
    setMusicIdIsSet(false);
    this.musicId = 0;
    this.recordInfos = null;
    setLevelIsSet(false);
    this.level = 0;
  }

  public byte getMode() {
    return this.mode;
  }

  public SCMusicRecordInfoMsg setMode(byte mode) {
    this.mode = mode;
    setModeIsSet(true);
    return this;
  }

  public void unsetMode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MODE_ISSET_ID);
  }

  /** Returns true if field mode is set (has been assigned a value) and false otherwise */
  public boolean isSetMode() {
    return EncodingUtils.testBit(__isset_bitfield, __MODE_ISSET_ID);
  }

  public void setModeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MODE_ISSET_ID, value);
  }

  public short getMusicId() {
    return this.musicId;
  }

  public SCMusicRecordInfoMsg setMusicId(short musicId) {
    this.musicId = musicId;
    setMusicIdIsSet(true);
    return this;
  }

  public void unsetMusicId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MUSICID_ISSET_ID);
  }

  /** Returns true if field musicId is set (has been assigned a value) and false otherwise */
  public boolean isSetMusicId() {
    return EncodingUtils.testBit(__isset_bitfield, __MUSICID_ISSET_ID);
  }

  public void setMusicIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MUSICID_ISSET_ID, value);
  }

  public int getRecordInfosSize() {
    return (this.recordInfos == null) ? 0 : this.recordInfos.size();
  }

  public java.util.Iterator<com.ling9527.music.common.msg.auto.MusicRecordInfo> getRecordInfosIterator() {
    return (this.recordInfos == null) ? null : this.recordInfos.iterator();
  }

  public void addToRecordInfos(com.ling9527.music.common.msg.auto.MusicRecordInfo elem) {
    if (this.recordInfos == null) {
      this.recordInfos = new ArrayList<com.ling9527.music.common.msg.auto.MusicRecordInfo>();
    }
    this.recordInfos.add(elem);
  }

  public List<com.ling9527.music.common.msg.auto.MusicRecordInfo> getRecordInfos() {
    return this.recordInfos;
  }

  public SCMusicRecordInfoMsg setRecordInfos(List<com.ling9527.music.common.msg.auto.MusicRecordInfo> recordInfos) {
    this.recordInfos = recordInfos;
    return this;
  }

  public void unsetRecordInfos() {
    this.recordInfos = null;
  }

  /** Returns true if field recordInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetRecordInfos() {
    return this.recordInfos != null;
  }

  public void setRecordInfosIsSet(boolean value) {
    if (!value) {
      this.recordInfos = null;
    }
  }

  public byte getLevel() {
    return this.level;
  }

  public SCMusicRecordInfoMsg setLevel(byte level) {
    this.level = level;
    setLevelIsSet(true);
    return this;
  }

  public void unsetLevel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEVEL_ISSET_ID);
  }

  /** Returns true if field level is set (has been assigned a value) and false otherwise */
  public boolean isSetLevel() {
    return EncodingUtils.testBit(__isset_bitfield, __LEVEL_ISSET_ID);
  }

  public void setLevelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEVEL_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MODE:
      if (value == null) {
        unsetMode();
      } else {
        setMode((Byte)value);
      }
      break;

    case MUSIC_ID:
      if (value == null) {
        unsetMusicId();
      } else {
        setMusicId((Short)value);
      }
      break;

    case RECORD_INFOS:
      if (value == null) {
        unsetRecordInfos();
      } else {
        setRecordInfos((List<com.ling9527.music.common.msg.auto.MusicRecordInfo>)value);
      }
      break;

    case LEVEL:
      if (value == null) {
        unsetLevel();
      } else {
        setLevel((Byte)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MODE:
      return Byte.valueOf(getMode());

    case MUSIC_ID:
      return Short.valueOf(getMusicId());

    case RECORD_INFOS:
      return getRecordInfos();

    case LEVEL:
      return Byte.valueOf(getLevel());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MODE:
      return isSetMode();
    case MUSIC_ID:
      return isSetMusicId();
    case RECORD_INFOS:
      return isSetRecordInfos();
    case LEVEL:
      return isSetLevel();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCMusicRecordInfoMsg)
      return this.equals((SCMusicRecordInfoMsg)that);
    return false;
  }

  public boolean equals(SCMusicRecordInfoMsg that) {
    if (that == null)
      return false;

    boolean this_present_mode = true;
    boolean that_present_mode = true;
    if (this_present_mode || that_present_mode) {
      if (!(this_present_mode && that_present_mode))
        return false;
      if (this.mode != that.mode)
        return false;
    }

    boolean this_present_musicId = true;
    boolean that_present_musicId = true;
    if (this_present_musicId || that_present_musicId) {
      if (!(this_present_musicId && that_present_musicId))
        return false;
      if (this.musicId != that.musicId)
        return false;
    }

    boolean this_present_recordInfos = true && this.isSetRecordInfos();
    boolean that_present_recordInfos = true && that.isSetRecordInfos();
    if (this_present_recordInfos || that_present_recordInfos) {
      if (!(this_present_recordInfos && that_present_recordInfos))
        return false;
      if (!this.recordInfos.equals(that.recordInfos))
        return false;
    }

    boolean this_present_level = true;
    boolean that_present_level = true;
    if (this_present_level || that_present_level) {
      if (!(this_present_level && that_present_level))
        return false;
      if (this.level != that.level)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCMusicRecordInfoMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCMusicRecordInfoMsg typedOther = (SCMusicRecordInfoMsg)other;

    lastComparison = Boolean.valueOf(isSetMode()).compareTo(typedOther.isSetMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mode, typedOther.mode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMusicId()).compareTo(typedOther.isSetMusicId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMusicId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.musicId, typedOther.musicId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecordInfos()).compareTo(typedOther.isSetRecordInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecordInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recordInfos, typedOther.recordInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLevel()).compareTo(typedOther.isSetLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.level, typedOther.level);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCMusicRecordInfoMsg(");
    boolean first = true;

    sb.append("mode:");
    sb.append(this.mode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("musicId:");
    sb.append(this.musicId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recordInfos:");
    if (this.recordInfos == null) {
      sb.append("null");
    } else {
      sb.append(this.recordInfos);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("level:");
    sb.append(this.level);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCMusicRecordInfoMsgStandardSchemeFactory implements SchemeFactory {
    public SCMusicRecordInfoMsgStandardScheme getScheme() {
      return new SCMusicRecordInfoMsgStandardScheme();
    }
  }

  private static class SCMusicRecordInfoMsgStandardScheme extends StandardScheme<SCMusicRecordInfoMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCMusicRecordInfoMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.mode = iprot.readByte();
              struct.setModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MUSIC_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.musicId = iprot.readI16();
              struct.setMusicIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RECORD_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.recordInfos = new ArrayList<com.ling9527.music.common.msg.auto.MusicRecordInfo>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  com.ling9527.music.common.msg.auto.MusicRecordInfo _elem2; // required
                  _elem2 = new com.ling9527.music.common.msg.auto.MusicRecordInfo();
                  _elem2.read(iprot);
                  struct.recordInfos.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setRecordInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.level = iprot.readByte();
              struct.setLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCMusicRecordInfoMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MODE_FIELD_DESC);
      oprot.writeByte(struct.mode);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MUSIC_ID_FIELD_DESC);
      oprot.writeI16(struct.musicId);
      oprot.writeFieldEnd();
      if (struct.recordInfos != null) {
        oprot.writeFieldBegin(RECORD_INFOS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.recordInfos.size()));
          for (com.ling9527.music.common.msg.auto.MusicRecordInfo _iter3 : struct.recordInfos)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LEVEL_FIELD_DESC);
      oprot.writeByte(struct.level);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCMusicRecordInfoMsgTupleSchemeFactory implements SchemeFactory {
    public SCMusicRecordInfoMsgTupleScheme getScheme() {
      return new SCMusicRecordInfoMsgTupleScheme();
    }
  }

  private static class SCMusicRecordInfoMsgTupleScheme extends TupleScheme<SCMusicRecordInfoMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCMusicRecordInfoMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMode()) {
        optionals.set(0);
      }
      if (struct.isSetMusicId()) {
        optionals.set(1);
      }
      if (struct.isSetRecordInfos()) {
        optionals.set(2);
      }
      if (struct.isSetLevel()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetMode()) {
        oprot.writeByte(struct.mode);
      }
      if (struct.isSetMusicId()) {
        oprot.writeI16(struct.musicId);
      }
      if (struct.isSetRecordInfos()) {
        {
          oprot.writeI32(struct.recordInfos.size());
          for (com.ling9527.music.common.msg.auto.MusicRecordInfo _iter4 : struct.recordInfos)
          {
            _iter4.write(oprot);
          }
        }
      }
      if (struct.isSetLevel()) {
        oprot.writeByte(struct.level);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCMusicRecordInfoMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.mode = iprot.readByte();
        struct.setModeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.musicId = iprot.readI16();
        struct.setMusicIdIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.recordInfos = new ArrayList<com.ling9527.music.common.msg.auto.MusicRecordInfo>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            com.ling9527.music.common.msg.auto.MusicRecordInfo _elem7; // required
            _elem7 = new com.ling9527.music.common.msg.auto.MusicRecordInfo();
            _elem7.read(iprot);
            struct.recordInfos.add(_elem7);
          }
        }
        struct.setRecordInfosIsSet(true);
      }
      if (incoming.get(3)) {
        struct.level = iprot.readByte();
        struct.setLevelIsSet(true);
      }
    }
  }

}

