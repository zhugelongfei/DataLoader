/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto.sc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 更新徽章信息
 */
public class SCUpdateBadgeInfo implements org.apache.thrift.TBase<SCUpdateBadgeInfo, SCUpdateBadgeInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SCUpdateBadgeInfo");

  private static final org.apache.thrift.protocol.TField PUT_ON_BADGE_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("putOnBadgeInfos", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField SAVED_BADGE_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("savedBadgeInfos", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SCUpdateBadgeInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SCUpdateBadgeInfoTupleSchemeFactory());
  }

  /**
   * 佩戴徽章信息
   */
  public List<com.ling9527.music.common.msg.auto.BadgeInfo> putOnBadgeInfos; // optional
  /**
   * 收藏徽章信息
   */
  public List<com.ling9527.music.common.msg.auto.BadgeInfo> savedBadgeInfos; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 佩戴徽章信息
     */
    PUT_ON_BADGE_INFOS((short)1, "putOnBadgeInfos"),
    /**
     * 收藏徽章信息
     */
    SAVED_BADGE_INFOS((short)2, "savedBadgeInfos");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PUT_ON_BADGE_INFOS
          return PUT_ON_BADGE_INFOS;
        case 2: // SAVED_BADGE_INFOS
          return SAVED_BADGE_INFOS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.PUT_ON_BADGE_INFOS,_Fields.SAVED_BADGE_INFOS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PUT_ON_BADGE_INFOS, new org.apache.thrift.meta_data.FieldMetaData("putOnBadgeInfos", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.BadgeInfo.class))));
    tmpMap.put(_Fields.SAVED_BADGE_INFOS, new org.apache.thrift.meta_data.FieldMetaData("savedBadgeInfos", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ling9527.music.common.msg.auto.BadgeInfo.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SCUpdateBadgeInfo.class, metaDataMap);
  }

  public SCUpdateBadgeInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SCUpdateBadgeInfo(SCUpdateBadgeInfo other) {
    if (other.isSetPutOnBadgeInfos()) {
      List<com.ling9527.music.common.msg.auto.BadgeInfo> __this__putOnBadgeInfos = new ArrayList<com.ling9527.music.common.msg.auto.BadgeInfo>();
      for (com.ling9527.music.common.msg.auto.BadgeInfo other_element : other.putOnBadgeInfos) {
        __this__putOnBadgeInfos.add(new com.ling9527.music.common.msg.auto.BadgeInfo(other_element));
      }
      this.putOnBadgeInfos = __this__putOnBadgeInfos;
    }
    if (other.isSetSavedBadgeInfos()) {
      List<com.ling9527.music.common.msg.auto.BadgeInfo> __this__savedBadgeInfos = new ArrayList<com.ling9527.music.common.msg.auto.BadgeInfo>();
      for (com.ling9527.music.common.msg.auto.BadgeInfo other_element : other.savedBadgeInfos) {
        __this__savedBadgeInfos.add(new com.ling9527.music.common.msg.auto.BadgeInfo(other_element));
      }
      this.savedBadgeInfos = __this__savedBadgeInfos;
    }
  }

  public SCUpdateBadgeInfo deepCopy() {
    return new SCUpdateBadgeInfo(this);
  }

  @Override
  public void clear() {
    this.putOnBadgeInfos = null;
    this.savedBadgeInfos = null;
  }

  public int getPutOnBadgeInfosSize() {
    return (this.putOnBadgeInfos == null) ? 0 : this.putOnBadgeInfos.size();
  }

  public java.util.Iterator<com.ling9527.music.common.msg.auto.BadgeInfo> getPutOnBadgeInfosIterator() {
    return (this.putOnBadgeInfos == null) ? null : this.putOnBadgeInfos.iterator();
  }

  public void addToPutOnBadgeInfos(com.ling9527.music.common.msg.auto.BadgeInfo elem) {
    if (this.putOnBadgeInfos == null) {
      this.putOnBadgeInfos = new ArrayList<com.ling9527.music.common.msg.auto.BadgeInfo>();
    }
    this.putOnBadgeInfos.add(elem);
  }

  /**
   * 佩戴徽章信息
   */
  public List<com.ling9527.music.common.msg.auto.BadgeInfo> getPutOnBadgeInfos() {
    return this.putOnBadgeInfos;
  }

  /**
   * 佩戴徽章信息
   */
  public SCUpdateBadgeInfo setPutOnBadgeInfos(List<com.ling9527.music.common.msg.auto.BadgeInfo> putOnBadgeInfos) {
    this.putOnBadgeInfos = putOnBadgeInfos;
    return this;
  }

  public void unsetPutOnBadgeInfos() {
    this.putOnBadgeInfos = null;
  }

  /** Returns true if field putOnBadgeInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetPutOnBadgeInfos() {
    return this.putOnBadgeInfos != null;
  }

  public void setPutOnBadgeInfosIsSet(boolean value) {
    if (!value) {
      this.putOnBadgeInfos = null;
    }
  }

  public int getSavedBadgeInfosSize() {
    return (this.savedBadgeInfos == null) ? 0 : this.savedBadgeInfos.size();
  }

  public java.util.Iterator<com.ling9527.music.common.msg.auto.BadgeInfo> getSavedBadgeInfosIterator() {
    return (this.savedBadgeInfos == null) ? null : this.savedBadgeInfos.iterator();
  }

  public void addToSavedBadgeInfos(com.ling9527.music.common.msg.auto.BadgeInfo elem) {
    if (this.savedBadgeInfos == null) {
      this.savedBadgeInfos = new ArrayList<com.ling9527.music.common.msg.auto.BadgeInfo>();
    }
    this.savedBadgeInfos.add(elem);
  }

  /**
   * 收藏徽章信息
   */
  public List<com.ling9527.music.common.msg.auto.BadgeInfo> getSavedBadgeInfos() {
    return this.savedBadgeInfos;
  }

  /**
   * 收藏徽章信息
   */
  public SCUpdateBadgeInfo setSavedBadgeInfos(List<com.ling9527.music.common.msg.auto.BadgeInfo> savedBadgeInfos) {
    this.savedBadgeInfos = savedBadgeInfos;
    return this;
  }

  public void unsetSavedBadgeInfos() {
    this.savedBadgeInfos = null;
  }

  /** Returns true if field savedBadgeInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetSavedBadgeInfos() {
    return this.savedBadgeInfos != null;
  }

  public void setSavedBadgeInfosIsSet(boolean value) {
    if (!value) {
      this.savedBadgeInfos = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PUT_ON_BADGE_INFOS:
      if (value == null) {
        unsetPutOnBadgeInfos();
      } else {
        setPutOnBadgeInfos((List<com.ling9527.music.common.msg.auto.BadgeInfo>)value);
      }
      break;

    case SAVED_BADGE_INFOS:
      if (value == null) {
        unsetSavedBadgeInfos();
      } else {
        setSavedBadgeInfos((List<com.ling9527.music.common.msg.auto.BadgeInfo>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PUT_ON_BADGE_INFOS:
      return getPutOnBadgeInfos();

    case SAVED_BADGE_INFOS:
      return getSavedBadgeInfos();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PUT_ON_BADGE_INFOS:
      return isSetPutOnBadgeInfos();
    case SAVED_BADGE_INFOS:
      return isSetSavedBadgeInfos();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SCUpdateBadgeInfo)
      return this.equals((SCUpdateBadgeInfo)that);
    return false;
  }

  public boolean equals(SCUpdateBadgeInfo that) {
    if (that == null)
      return false;

    boolean this_present_putOnBadgeInfos = true && this.isSetPutOnBadgeInfos();
    boolean that_present_putOnBadgeInfos = true && that.isSetPutOnBadgeInfos();
    if (this_present_putOnBadgeInfos || that_present_putOnBadgeInfos) {
      if (!(this_present_putOnBadgeInfos && that_present_putOnBadgeInfos))
        return false;
      if (!this.putOnBadgeInfos.equals(that.putOnBadgeInfos))
        return false;
    }

    boolean this_present_savedBadgeInfos = true && this.isSetSavedBadgeInfos();
    boolean that_present_savedBadgeInfos = true && that.isSetSavedBadgeInfos();
    if (this_present_savedBadgeInfos || that_present_savedBadgeInfos) {
      if (!(this_present_savedBadgeInfos && that_present_savedBadgeInfos))
        return false;
      if (!this.savedBadgeInfos.equals(that.savedBadgeInfos))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SCUpdateBadgeInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SCUpdateBadgeInfo typedOther = (SCUpdateBadgeInfo)other;

    lastComparison = Boolean.valueOf(isSetPutOnBadgeInfos()).compareTo(typedOther.isSetPutOnBadgeInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPutOnBadgeInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.putOnBadgeInfos, typedOther.putOnBadgeInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSavedBadgeInfos()).compareTo(typedOther.isSetSavedBadgeInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSavedBadgeInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.savedBadgeInfos, typedOther.savedBadgeInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SCUpdateBadgeInfo(");
    boolean first = true;

    if (isSetPutOnBadgeInfos()) {
      sb.append("putOnBadgeInfos:");
      if (this.putOnBadgeInfos == null) {
        sb.append("null");
      } else {
        sb.append(this.putOnBadgeInfos);
      }
      first = false;
    }
    if (isSetSavedBadgeInfos()) {
      if (!first) sb.append(", ");
      sb.append("savedBadgeInfos:");
      if (this.savedBadgeInfos == null) {
        sb.append("null");
      } else {
        sb.append(this.savedBadgeInfos);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SCUpdateBadgeInfoStandardSchemeFactory implements SchemeFactory {
    public SCUpdateBadgeInfoStandardScheme getScheme() {
      return new SCUpdateBadgeInfoStandardScheme();
    }
  }

  private static class SCUpdateBadgeInfoStandardScheme extends StandardScheme<SCUpdateBadgeInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SCUpdateBadgeInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PUT_ON_BADGE_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.putOnBadgeInfos = new ArrayList<com.ling9527.music.common.msg.auto.BadgeInfo>(_list16.size);
                for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                {
                  com.ling9527.music.common.msg.auto.BadgeInfo _elem18; // required
                  _elem18 = new com.ling9527.music.common.msg.auto.BadgeInfo();
                  _elem18.read(iprot);
                  struct.putOnBadgeInfos.add(_elem18);
                }
                iprot.readListEnd();
              }
              struct.setPutOnBadgeInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SAVED_BADGE_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list19 = iprot.readListBegin();
                struct.savedBadgeInfos = new ArrayList<com.ling9527.music.common.msg.auto.BadgeInfo>(_list19.size);
                for (int _i20 = 0; _i20 < _list19.size; ++_i20)
                {
                  com.ling9527.music.common.msg.auto.BadgeInfo _elem21; // required
                  _elem21 = new com.ling9527.music.common.msg.auto.BadgeInfo();
                  _elem21.read(iprot);
                  struct.savedBadgeInfos.add(_elem21);
                }
                iprot.readListEnd();
              }
              struct.setSavedBadgeInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SCUpdateBadgeInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.putOnBadgeInfos != null) {
        if (struct.isSetPutOnBadgeInfos()) {
          oprot.writeFieldBegin(PUT_ON_BADGE_INFOS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.putOnBadgeInfos.size()));
            for (com.ling9527.music.common.msg.auto.BadgeInfo _iter22 : struct.putOnBadgeInfos)
            {
              _iter22.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.savedBadgeInfos != null) {
        if (struct.isSetSavedBadgeInfos()) {
          oprot.writeFieldBegin(SAVED_BADGE_INFOS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.savedBadgeInfos.size()));
            for (com.ling9527.music.common.msg.auto.BadgeInfo _iter23 : struct.savedBadgeInfos)
            {
              _iter23.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SCUpdateBadgeInfoTupleSchemeFactory implements SchemeFactory {
    public SCUpdateBadgeInfoTupleScheme getScheme() {
      return new SCUpdateBadgeInfoTupleScheme();
    }
  }

  private static class SCUpdateBadgeInfoTupleScheme extends TupleScheme<SCUpdateBadgeInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SCUpdateBadgeInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPutOnBadgeInfos()) {
        optionals.set(0);
      }
      if (struct.isSetSavedBadgeInfos()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetPutOnBadgeInfos()) {
        {
          oprot.writeI32(struct.putOnBadgeInfos.size());
          for (com.ling9527.music.common.msg.auto.BadgeInfo _iter24 : struct.putOnBadgeInfos)
          {
            _iter24.write(oprot);
          }
        }
      }
      if (struct.isSetSavedBadgeInfos()) {
        {
          oprot.writeI32(struct.savedBadgeInfos.size());
          for (com.ling9527.music.common.msg.auto.BadgeInfo _iter25 : struct.savedBadgeInfos)
          {
            _iter25.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SCUpdateBadgeInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list26 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.putOnBadgeInfos = new ArrayList<com.ling9527.music.common.msg.auto.BadgeInfo>(_list26.size);
          for (int _i27 = 0; _i27 < _list26.size; ++_i27)
          {
            com.ling9527.music.common.msg.auto.BadgeInfo _elem28; // required
            _elem28 = new com.ling9527.music.common.msg.auto.BadgeInfo();
            _elem28.read(iprot);
            struct.putOnBadgeInfos.add(_elem28);
          }
        }
        struct.setPutOnBadgeInfosIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.savedBadgeInfos = new ArrayList<com.ling9527.music.common.msg.auto.BadgeInfo>(_list29.size);
          for (int _i30 = 0; _i30 < _list29.size; ++_i30)
          {
            com.ling9527.music.common.msg.auto.BadgeInfo _elem31; // required
            _elem31 = new com.ling9527.music.common.msg.auto.BadgeInfo();
            _elem31.read(iprot);
            struct.savedBadgeInfos.add(_elem31);
          }
        }
        struct.setSavedBadgeInfosIsSet(true);
      }
    }
  }

}

