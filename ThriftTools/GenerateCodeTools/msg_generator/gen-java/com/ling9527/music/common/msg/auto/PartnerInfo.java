/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ling9527.music.common.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PartnerInfo implements org.apache.thrift.TBase<PartnerInfo, PartnerInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PartnerInfo");

  private static final org.apache.thrift.protocol.TField MODEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("modelId", org.apache.thrift.protocol.TType.I16, (short)1);
  private static final org.apache.thrift.protocol.TField BODY_ADJ_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("bodyAdjVal", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField AVATAR_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("avatarInfos", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField ROBOT_FIELD_DESC = new org.apache.thrift.protocol.TField("robot", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField ROBOT_SCORE_FIELD_DESC = new org.apache.thrift.protocol.TField("robotScore", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField ROBOT_KEY_RESULT_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("robotKeyResultList", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField STATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("stature", org.apache.thrift.protocol.TType.BYTE, (short)7);
  private static final org.apache.thrift.protocol.TField RANK_FIELD_DESC = new org.apache.thrift.protocol.TField("rank", org.apache.thrift.protocol.TType.I16, (short)8);
  private static final org.apache.thrift.protocol.TField PLAYER_BASE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("playerBaseInfo", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField SKIN_COLOR_FIELD_DESC = new org.apache.thrift.protocol.TField("skinColor", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField PUT_ON_BADGES_FIELD_DESC = new org.apache.thrift.protocol.TField("putOnBadges", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField DANCE_FASHION_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("danceFashionIds", org.apache.thrift.protocol.TType.MAP, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PartnerInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PartnerInfoTupleSchemeFactory());
  }

  public short modelId; // required
  public byte bodyAdjVal; // required
  public List<AvatarInfo> avatarInfos; // required
  public boolean robot; // required
  public int robotScore; // required
  /**
   * only traditional mode
   */
  public List<Byte> robotKeyResultList; // required
  public byte stature; // required
  public short rank; // required
  public PlayerBaseInfo playerBaseInfo; // required
  public int skinColor; // required
  /**
   * 佩戴的徽章
   */
  public List<BadgeInfo> putOnBadges; // required
  /**
   * 使用中的个人展示时尚id key:style val:id
   */
  public Map<Byte,Integer> danceFashionIds; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MODEL_ID((short)1, "modelId"),
    BODY_ADJ_VAL((short)2, "bodyAdjVal"),
    AVATAR_INFOS((short)3, "avatarInfos"),
    ROBOT((short)4, "robot"),
    ROBOT_SCORE((short)5, "robotScore"),
    /**
     * only traditional mode
     */
    ROBOT_KEY_RESULT_LIST((short)6, "robotKeyResultList"),
    STATURE((short)7, "stature"),
    RANK((short)8, "rank"),
    PLAYER_BASE_INFO((short)10, "playerBaseInfo"),
    SKIN_COLOR((short)11, "skinColor"),
    /**
     * 佩戴的徽章
     */
    PUT_ON_BADGES((short)12, "putOnBadges"),
    /**
     * 使用中的个人展示时尚id key:style val:id
     */
    DANCE_FASHION_IDS((short)13, "danceFashionIds");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MODEL_ID
          return MODEL_ID;
        case 2: // BODY_ADJ_VAL
          return BODY_ADJ_VAL;
        case 3: // AVATAR_INFOS
          return AVATAR_INFOS;
        case 4: // ROBOT
          return ROBOT;
        case 5: // ROBOT_SCORE
          return ROBOT_SCORE;
        case 6: // ROBOT_KEY_RESULT_LIST
          return ROBOT_KEY_RESULT_LIST;
        case 7: // STATURE
          return STATURE;
        case 8: // RANK
          return RANK;
        case 10: // PLAYER_BASE_INFO
          return PLAYER_BASE_INFO;
        case 11: // SKIN_COLOR
          return SKIN_COLOR;
        case 12: // PUT_ON_BADGES
          return PUT_ON_BADGES;
        case 13: // DANCE_FASHION_IDS
          return DANCE_FASHION_IDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MODELID_ISSET_ID = 0;
  private static final int __BODYADJVAL_ISSET_ID = 1;
  private static final int __ROBOT_ISSET_ID = 2;
  private static final int __ROBOTSCORE_ISSET_ID = 3;
  private static final int __STATURE_ISSET_ID = 4;
  private static final int __RANK_ISSET_ID = 5;
  private static final int __SKINCOLOR_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MODEL_ID, new org.apache.thrift.meta_data.FieldMetaData("modelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.BODY_ADJ_VAL, new org.apache.thrift.meta_data.FieldMetaData("bodyAdjVal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.AVATAR_INFOS, new org.apache.thrift.meta_data.FieldMetaData("avatarInfos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AvatarInfo.class))));
    tmpMap.put(_Fields.ROBOT, new org.apache.thrift.meta_data.FieldMetaData("robot", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ROBOT_SCORE, new org.apache.thrift.meta_data.FieldMetaData("robotScore", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROBOT_KEY_RESULT_LIST, new org.apache.thrift.meta_data.FieldMetaData("robotKeyResultList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE))));
    tmpMap.put(_Fields.STATURE, new org.apache.thrift.meta_data.FieldMetaData("stature", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.RANK, new org.apache.thrift.meta_data.FieldMetaData("rank", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.PLAYER_BASE_INFO, new org.apache.thrift.meta_data.FieldMetaData("playerBaseInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PlayerBaseInfo.class)));
    tmpMap.put(_Fields.SKIN_COLOR, new org.apache.thrift.meta_data.FieldMetaData("skinColor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PUT_ON_BADGES, new org.apache.thrift.meta_data.FieldMetaData("putOnBadges", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BadgeInfo.class))));
    tmpMap.put(_Fields.DANCE_FASHION_IDS, new org.apache.thrift.meta_data.FieldMetaData("danceFashionIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PartnerInfo.class, metaDataMap);
  }

  public PartnerInfo() {
  }

  public PartnerInfo(
    short modelId,
    byte bodyAdjVal,
    List<AvatarInfo> avatarInfos,
    boolean robot,
    int robotScore,
    List<Byte> robotKeyResultList,
    byte stature,
    short rank,
    PlayerBaseInfo playerBaseInfo,
    int skinColor,
    List<BadgeInfo> putOnBadges,
    Map<Byte,Integer> danceFashionIds)
  {
    this();
    this.modelId = modelId;
    setModelIdIsSet(true);
    this.bodyAdjVal = bodyAdjVal;
    setBodyAdjValIsSet(true);
    this.avatarInfos = avatarInfos;
    this.robot = robot;
    setRobotIsSet(true);
    this.robotScore = robotScore;
    setRobotScoreIsSet(true);
    this.robotKeyResultList = robotKeyResultList;
    this.stature = stature;
    setStatureIsSet(true);
    this.rank = rank;
    setRankIsSet(true);
    this.playerBaseInfo = playerBaseInfo;
    this.skinColor = skinColor;
    setSkinColorIsSet(true);
    this.putOnBadges = putOnBadges;
    this.danceFashionIds = danceFashionIds;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PartnerInfo(PartnerInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.modelId = other.modelId;
    this.bodyAdjVal = other.bodyAdjVal;
    if (other.isSetAvatarInfos()) {
      List<AvatarInfo> __this__avatarInfos = new ArrayList<AvatarInfo>();
      for (AvatarInfo other_element : other.avatarInfos) {
        __this__avatarInfos.add(new AvatarInfo(other_element));
      }
      this.avatarInfos = __this__avatarInfos;
    }
    this.robot = other.robot;
    this.robotScore = other.robotScore;
    if (other.isSetRobotKeyResultList()) {
      List<Byte> __this__robotKeyResultList = new ArrayList<Byte>();
      for (Byte other_element : other.robotKeyResultList) {
        __this__robotKeyResultList.add(other_element);
      }
      this.robotKeyResultList = __this__robotKeyResultList;
    }
    this.stature = other.stature;
    this.rank = other.rank;
    if (other.isSetPlayerBaseInfo()) {
      this.playerBaseInfo = new PlayerBaseInfo(other.playerBaseInfo);
    }
    this.skinColor = other.skinColor;
    if (other.isSetPutOnBadges()) {
      List<BadgeInfo> __this__putOnBadges = new ArrayList<BadgeInfo>();
      for (BadgeInfo other_element : other.putOnBadges) {
        __this__putOnBadges.add(new BadgeInfo(other_element));
      }
      this.putOnBadges = __this__putOnBadges;
    }
    if (other.isSetDanceFashionIds()) {
      Map<Byte,Integer> __this__danceFashionIds = new HashMap<Byte,Integer>();
      for (Map.Entry<Byte, Integer> other_element : other.danceFashionIds.entrySet()) {

        Byte other_element_key = other_element.getKey();
        Integer other_element_value = other_element.getValue();

        Byte __this__danceFashionIds_copy_key = other_element_key;

        Integer __this__danceFashionIds_copy_value = other_element_value;

        __this__danceFashionIds.put(__this__danceFashionIds_copy_key, __this__danceFashionIds_copy_value);
      }
      this.danceFashionIds = __this__danceFashionIds;
    }
  }

  public PartnerInfo deepCopy() {
    return new PartnerInfo(this);
  }

  @Override
  public void clear() {
    setModelIdIsSet(false);
    this.modelId = 0;
    setBodyAdjValIsSet(false);
    this.bodyAdjVal = 0;
    this.avatarInfos = null;
    setRobotIsSet(false);
    this.robot = false;
    setRobotScoreIsSet(false);
    this.robotScore = 0;
    this.robotKeyResultList = null;
    setStatureIsSet(false);
    this.stature = 0;
    setRankIsSet(false);
    this.rank = 0;
    this.playerBaseInfo = null;
    setSkinColorIsSet(false);
    this.skinColor = 0;
    this.putOnBadges = null;
    this.danceFashionIds = null;
  }

  public short getModelId() {
    return this.modelId;
  }

  public PartnerInfo setModelId(short modelId) {
    this.modelId = modelId;
    setModelIdIsSet(true);
    return this;
  }

  public void unsetModelId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MODELID_ISSET_ID);
  }

  /** Returns true if field modelId is set (has been assigned a value) and false otherwise */
  public boolean isSetModelId() {
    return EncodingUtils.testBit(__isset_bitfield, __MODELID_ISSET_ID);
  }

  public void setModelIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MODELID_ISSET_ID, value);
  }

  public byte getBodyAdjVal() {
    return this.bodyAdjVal;
  }

  public PartnerInfo setBodyAdjVal(byte bodyAdjVal) {
    this.bodyAdjVal = bodyAdjVal;
    setBodyAdjValIsSet(true);
    return this;
  }

  public void unsetBodyAdjVal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BODYADJVAL_ISSET_ID);
  }

  /** Returns true if field bodyAdjVal is set (has been assigned a value) and false otherwise */
  public boolean isSetBodyAdjVal() {
    return EncodingUtils.testBit(__isset_bitfield, __BODYADJVAL_ISSET_ID);
  }

  public void setBodyAdjValIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BODYADJVAL_ISSET_ID, value);
  }

  public int getAvatarInfosSize() {
    return (this.avatarInfos == null) ? 0 : this.avatarInfos.size();
  }

  public java.util.Iterator<AvatarInfo> getAvatarInfosIterator() {
    return (this.avatarInfos == null) ? null : this.avatarInfos.iterator();
  }

  public void addToAvatarInfos(AvatarInfo elem) {
    if (this.avatarInfos == null) {
      this.avatarInfos = new ArrayList<AvatarInfo>();
    }
    this.avatarInfos.add(elem);
  }

  public List<AvatarInfo> getAvatarInfos() {
    return this.avatarInfos;
  }

  public PartnerInfo setAvatarInfos(List<AvatarInfo> avatarInfos) {
    this.avatarInfos = avatarInfos;
    return this;
  }

  public void unsetAvatarInfos() {
    this.avatarInfos = null;
  }

  /** Returns true if field avatarInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetAvatarInfos() {
    return this.avatarInfos != null;
  }

  public void setAvatarInfosIsSet(boolean value) {
    if (!value) {
      this.avatarInfos = null;
    }
  }

  public boolean isRobot() {
    return this.robot;
  }

  public PartnerInfo setRobot(boolean robot) {
    this.robot = robot;
    setRobotIsSet(true);
    return this;
  }

  public void unsetRobot() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROBOT_ISSET_ID);
  }

  /** Returns true if field robot is set (has been assigned a value) and false otherwise */
  public boolean isSetRobot() {
    return EncodingUtils.testBit(__isset_bitfield, __ROBOT_ISSET_ID);
  }

  public void setRobotIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROBOT_ISSET_ID, value);
  }

  public int getRobotScore() {
    return this.robotScore;
  }

  public PartnerInfo setRobotScore(int robotScore) {
    this.robotScore = robotScore;
    setRobotScoreIsSet(true);
    return this;
  }

  public void unsetRobotScore() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROBOTSCORE_ISSET_ID);
  }

  /** Returns true if field robotScore is set (has been assigned a value) and false otherwise */
  public boolean isSetRobotScore() {
    return EncodingUtils.testBit(__isset_bitfield, __ROBOTSCORE_ISSET_ID);
  }

  public void setRobotScoreIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROBOTSCORE_ISSET_ID, value);
  }

  public int getRobotKeyResultListSize() {
    return (this.robotKeyResultList == null) ? 0 : this.robotKeyResultList.size();
  }

  public java.util.Iterator<Byte> getRobotKeyResultListIterator() {
    return (this.robotKeyResultList == null) ? null : this.robotKeyResultList.iterator();
  }

  public void addToRobotKeyResultList(byte elem) {
    if (this.robotKeyResultList == null) {
      this.robotKeyResultList = new ArrayList<Byte>();
    }
    this.robotKeyResultList.add(elem);
  }

  /**
   * only traditional mode
   */
  public List<Byte> getRobotKeyResultList() {
    return this.robotKeyResultList;
  }

  /**
   * only traditional mode
   */
  public PartnerInfo setRobotKeyResultList(List<Byte> robotKeyResultList) {
    this.robotKeyResultList = robotKeyResultList;
    return this;
  }

  public void unsetRobotKeyResultList() {
    this.robotKeyResultList = null;
  }

  /** Returns true if field robotKeyResultList is set (has been assigned a value) and false otherwise */
  public boolean isSetRobotKeyResultList() {
    return this.robotKeyResultList != null;
  }

  public void setRobotKeyResultListIsSet(boolean value) {
    if (!value) {
      this.robotKeyResultList = null;
    }
  }

  public byte getStature() {
    return this.stature;
  }

  public PartnerInfo setStature(byte stature) {
    this.stature = stature;
    setStatureIsSet(true);
    return this;
  }

  public void unsetStature() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATURE_ISSET_ID);
  }

  /** Returns true if field stature is set (has been assigned a value) and false otherwise */
  public boolean isSetStature() {
    return EncodingUtils.testBit(__isset_bitfield, __STATURE_ISSET_ID);
  }

  public void setStatureIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATURE_ISSET_ID, value);
  }

  public short getRank() {
    return this.rank;
  }

  public PartnerInfo setRank(short rank) {
    this.rank = rank;
    setRankIsSet(true);
    return this;
  }

  public void unsetRank() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RANK_ISSET_ID);
  }

  /** Returns true if field rank is set (has been assigned a value) and false otherwise */
  public boolean isSetRank() {
    return EncodingUtils.testBit(__isset_bitfield, __RANK_ISSET_ID);
  }

  public void setRankIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RANK_ISSET_ID, value);
  }

  public PlayerBaseInfo getPlayerBaseInfo() {
    return this.playerBaseInfo;
  }

  public PartnerInfo setPlayerBaseInfo(PlayerBaseInfo playerBaseInfo) {
    this.playerBaseInfo = playerBaseInfo;
    return this;
  }

  public void unsetPlayerBaseInfo() {
    this.playerBaseInfo = null;
  }

  /** Returns true if field playerBaseInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetPlayerBaseInfo() {
    return this.playerBaseInfo != null;
  }

  public void setPlayerBaseInfoIsSet(boolean value) {
    if (!value) {
      this.playerBaseInfo = null;
    }
  }

  public int getSkinColor() {
    return this.skinColor;
  }

  public PartnerInfo setSkinColor(int skinColor) {
    this.skinColor = skinColor;
    setSkinColorIsSet(true);
    return this;
  }

  public void unsetSkinColor() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SKINCOLOR_ISSET_ID);
  }

  /** Returns true if field skinColor is set (has been assigned a value) and false otherwise */
  public boolean isSetSkinColor() {
    return EncodingUtils.testBit(__isset_bitfield, __SKINCOLOR_ISSET_ID);
  }

  public void setSkinColorIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SKINCOLOR_ISSET_ID, value);
  }

  public int getPutOnBadgesSize() {
    return (this.putOnBadges == null) ? 0 : this.putOnBadges.size();
  }

  public java.util.Iterator<BadgeInfo> getPutOnBadgesIterator() {
    return (this.putOnBadges == null) ? null : this.putOnBadges.iterator();
  }

  public void addToPutOnBadges(BadgeInfo elem) {
    if (this.putOnBadges == null) {
      this.putOnBadges = new ArrayList<BadgeInfo>();
    }
    this.putOnBadges.add(elem);
  }

  /**
   * 佩戴的徽章
   */
  public List<BadgeInfo> getPutOnBadges() {
    return this.putOnBadges;
  }

  /**
   * 佩戴的徽章
   */
  public PartnerInfo setPutOnBadges(List<BadgeInfo> putOnBadges) {
    this.putOnBadges = putOnBadges;
    return this;
  }

  public void unsetPutOnBadges() {
    this.putOnBadges = null;
  }

  /** Returns true if field putOnBadges is set (has been assigned a value) and false otherwise */
  public boolean isSetPutOnBadges() {
    return this.putOnBadges != null;
  }

  public void setPutOnBadgesIsSet(boolean value) {
    if (!value) {
      this.putOnBadges = null;
    }
  }

  public int getDanceFashionIdsSize() {
    return (this.danceFashionIds == null) ? 0 : this.danceFashionIds.size();
  }

  public void putToDanceFashionIds(byte key, int val) {
    if (this.danceFashionIds == null) {
      this.danceFashionIds = new HashMap<Byte,Integer>();
    }
    this.danceFashionIds.put(key, val);
  }

  /**
   * 使用中的个人展示时尚id key:style val:id
   */
  public Map<Byte,Integer> getDanceFashionIds() {
    return this.danceFashionIds;
  }

  /**
   * 使用中的个人展示时尚id key:style val:id
   */
  public PartnerInfo setDanceFashionIds(Map<Byte,Integer> danceFashionIds) {
    this.danceFashionIds = danceFashionIds;
    return this;
  }

  public void unsetDanceFashionIds() {
    this.danceFashionIds = null;
  }

  /** Returns true if field danceFashionIds is set (has been assigned a value) and false otherwise */
  public boolean isSetDanceFashionIds() {
    return this.danceFashionIds != null;
  }

  public void setDanceFashionIdsIsSet(boolean value) {
    if (!value) {
      this.danceFashionIds = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MODEL_ID:
      if (value == null) {
        unsetModelId();
      } else {
        setModelId((Short)value);
      }
      break;

    case BODY_ADJ_VAL:
      if (value == null) {
        unsetBodyAdjVal();
      } else {
        setBodyAdjVal((Byte)value);
      }
      break;

    case AVATAR_INFOS:
      if (value == null) {
        unsetAvatarInfos();
      } else {
        setAvatarInfos((List<AvatarInfo>)value);
      }
      break;

    case ROBOT:
      if (value == null) {
        unsetRobot();
      } else {
        setRobot((Boolean)value);
      }
      break;

    case ROBOT_SCORE:
      if (value == null) {
        unsetRobotScore();
      } else {
        setRobotScore((Integer)value);
      }
      break;

    case ROBOT_KEY_RESULT_LIST:
      if (value == null) {
        unsetRobotKeyResultList();
      } else {
        setRobotKeyResultList((List<Byte>)value);
      }
      break;

    case STATURE:
      if (value == null) {
        unsetStature();
      } else {
        setStature((Byte)value);
      }
      break;

    case RANK:
      if (value == null) {
        unsetRank();
      } else {
        setRank((Short)value);
      }
      break;

    case PLAYER_BASE_INFO:
      if (value == null) {
        unsetPlayerBaseInfo();
      } else {
        setPlayerBaseInfo((PlayerBaseInfo)value);
      }
      break;

    case SKIN_COLOR:
      if (value == null) {
        unsetSkinColor();
      } else {
        setSkinColor((Integer)value);
      }
      break;

    case PUT_ON_BADGES:
      if (value == null) {
        unsetPutOnBadges();
      } else {
        setPutOnBadges((List<BadgeInfo>)value);
      }
      break;

    case DANCE_FASHION_IDS:
      if (value == null) {
        unsetDanceFashionIds();
      } else {
        setDanceFashionIds((Map<Byte,Integer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MODEL_ID:
      return Short.valueOf(getModelId());

    case BODY_ADJ_VAL:
      return Byte.valueOf(getBodyAdjVal());

    case AVATAR_INFOS:
      return getAvatarInfos();

    case ROBOT:
      return Boolean.valueOf(isRobot());

    case ROBOT_SCORE:
      return Integer.valueOf(getRobotScore());

    case ROBOT_KEY_RESULT_LIST:
      return getRobotKeyResultList();

    case STATURE:
      return Byte.valueOf(getStature());

    case RANK:
      return Short.valueOf(getRank());

    case PLAYER_BASE_INFO:
      return getPlayerBaseInfo();

    case SKIN_COLOR:
      return Integer.valueOf(getSkinColor());

    case PUT_ON_BADGES:
      return getPutOnBadges();

    case DANCE_FASHION_IDS:
      return getDanceFashionIds();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MODEL_ID:
      return isSetModelId();
    case BODY_ADJ_VAL:
      return isSetBodyAdjVal();
    case AVATAR_INFOS:
      return isSetAvatarInfos();
    case ROBOT:
      return isSetRobot();
    case ROBOT_SCORE:
      return isSetRobotScore();
    case ROBOT_KEY_RESULT_LIST:
      return isSetRobotKeyResultList();
    case STATURE:
      return isSetStature();
    case RANK:
      return isSetRank();
    case PLAYER_BASE_INFO:
      return isSetPlayerBaseInfo();
    case SKIN_COLOR:
      return isSetSkinColor();
    case PUT_ON_BADGES:
      return isSetPutOnBadges();
    case DANCE_FASHION_IDS:
      return isSetDanceFashionIds();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PartnerInfo)
      return this.equals((PartnerInfo)that);
    return false;
  }

  public boolean equals(PartnerInfo that) {
    if (that == null)
      return false;

    boolean this_present_modelId = true;
    boolean that_present_modelId = true;
    if (this_present_modelId || that_present_modelId) {
      if (!(this_present_modelId && that_present_modelId))
        return false;
      if (this.modelId != that.modelId)
        return false;
    }

    boolean this_present_bodyAdjVal = true;
    boolean that_present_bodyAdjVal = true;
    if (this_present_bodyAdjVal || that_present_bodyAdjVal) {
      if (!(this_present_bodyAdjVal && that_present_bodyAdjVal))
        return false;
      if (this.bodyAdjVal != that.bodyAdjVal)
        return false;
    }

    boolean this_present_avatarInfos = true && this.isSetAvatarInfos();
    boolean that_present_avatarInfos = true && that.isSetAvatarInfos();
    if (this_present_avatarInfos || that_present_avatarInfos) {
      if (!(this_present_avatarInfos && that_present_avatarInfos))
        return false;
      if (!this.avatarInfos.equals(that.avatarInfos))
        return false;
    }

    boolean this_present_robot = true;
    boolean that_present_robot = true;
    if (this_present_robot || that_present_robot) {
      if (!(this_present_robot && that_present_robot))
        return false;
      if (this.robot != that.robot)
        return false;
    }

    boolean this_present_robotScore = true;
    boolean that_present_robotScore = true;
    if (this_present_robotScore || that_present_robotScore) {
      if (!(this_present_robotScore && that_present_robotScore))
        return false;
      if (this.robotScore != that.robotScore)
        return false;
    }

    boolean this_present_robotKeyResultList = true && this.isSetRobotKeyResultList();
    boolean that_present_robotKeyResultList = true && that.isSetRobotKeyResultList();
    if (this_present_robotKeyResultList || that_present_robotKeyResultList) {
      if (!(this_present_robotKeyResultList && that_present_robotKeyResultList))
        return false;
      if (!this.robotKeyResultList.equals(that.robotKeyResultList))
        return false;
    }

    boolean this_present_stature = true;
    boolean that_present_stature = true;
    if (this_present_stature || that_present_stature) {
      if (!(this_present_stature && that_present_stature))
        return false;
      if (this.stature != that.stature)
        return false;
    }

    boolean this_present_rank = true;
    boolean that_present_rank = true;
    if (this_present_rank || that_present_rank) {
      if (!(this_present_rank && that_present_rank))
        return false;
      if (this.rank != that.rank)
        return false;
    }

    boolean this_present_playerBaseInfo = true && this.isSetPlayerBaseInfo();
    boolean that_present_playerBaseInfo = true && that.isSetPlayerBaseInfo();
    if (this_present_playerBaseInfo || that_present_playerBaseInfo) {
      if (!(this_present_playerBaseInfo && that_present_playerBaseInfo))
        return false;
      if (!this.playerBaseInfo.equals(that.playerBaseInfo))
        return false;
    }

    boolean this_present_skinColor = true;
    boolean that_present_skinColor = true;
    if (this_present_skinColor || that_present_skinColor) {
      if (!(this_present_skinColor && that_present_skinColor))
        return false;
      if (this.skinColor != that.skinColor)
        return false;
    }

    boolean this_present_putOnBadges = true && this.isSetPutOnBadges();
    boolean that_present_putOnBadges = true && that.isSetPutOnBadges();
    if (this_present_putOnBadges || that_present_putOnBadges) {
      if (!(this_present_putOnBadges && that_present_putOnBadges))
        return false;
      if (!this.putOnBadges.equals(that.putOnBadges))
        return false;
    }

    boolean this_present_danceFashionIds = true && this.isSetDanceFashionIds();
    boolean that_present_danceFashionIds = true && that.isSetDanceFashionIds();
    if (this_present_danceFashionIds || that_present_danceFashionIds) {
      if (!(this_present_danceFashionIds && that_present_danceFashionIds))
        return false;
      if (!this.danceFashionIds.equals(that.danceFashionIds))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(PartnerInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    PartnerInfo typedOther = (PartnerInfo)other;

    lastComparison = Boolean.valueOf(isSetModelId()).compareTo(typedOther.isSetModelId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModelId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelId, typedOther.modelId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBodyAdjVal()).compareTo(typedOther.isSetBodyAdjVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBodyAdjVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bodyAdjVal, typedOther.bodyAdjVal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAvatarInfos()).compareTo(typedOther.isSetAvatarInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvatarInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.avatarInfos, typedOther.avatarInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRobot()).compareTo(typedOther.isSetRobot());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRobot()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.robot, typedOther.robot);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRobotScore()).compareTo(typedOther.isSetRobotScore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRobotScore()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.robotScore, typedOther.robotScore);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRobotKeyResultList()).compareTo(typedOther.isSetRobotKeyResultList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRobotKeyResultList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.robotKeyResultList, typedOther.robotKeyResultList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStature()).compareTo(typedOther.isSetStature());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStature()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stature, typedOther.stature);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRank()).compareTo(typedOther.isSetRank());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRank()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rank, typedOther.rank);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlayerBaseInfo()).compareTo(typedOther.isSetPlayerBaseInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlayerBaseInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.playerBaseInfo, typedOther.playerBaseInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSkinColor()).compareTo(typedOther.isSetSkinColor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSkinColor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.skinColor, typedOther.skinColor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPutOnBadges()).compareTo(typedOther.isSetPutOnBadges());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPutOnBadges()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.putOnBadges, typedOther.putOnBadges);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDanceFashionIds()).compareTo(typedOther.isSetDanceFashionIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDanceFashionIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.danceFashionIds, typedOther.danceFashionIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PartnerInfo(");
    boolean first = true;

    sb.append("modelId:");
    sb.append(this.modelId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bodyAdjVal:");
    sb.append(this.bodyAdjVal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("avatarInfos:");
    if (this.avatarInfos == null) {
      sb.append("null");
    } else {
      sb.append(this.avatarInfos);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("robot:");
    sb.append(this.robot);
    first = false;
    if (!first) sb.append(", ");
    sb.append("robotScore:");
    sb.append(this.robotScore);
    first = false;
    if (!first) sb.append(", ");
    sb.append("robotKeyResultList:");
    if (this.robotKeyResultList == null) {
      sb.append("null");
    } else {
      sb.append(this.robotKeyResultList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stature:");
    sb.append(this.stature);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rank:");
    sb.append(this.rank);
    first = false;
    if (!first) sb.append(", ");
    sb.append("playerBaseInfo:");
    if (this.playerBaseInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.playerBaseInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("skinColor:");
    sb.append(this.skinColor);
    first = false;
    if (!first) sb.append(", ");
    sb.append("putOnBadges:");
    if (this.putOnBadges == null) {
      sb.append("null");
    } else {
      sb.append(this.putOnBadges);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("danceFashionIds:");
    if (this.danceFashionIds == null) {
      sb.append("null");
    } else {
      sb.append(this.danceFashionIds);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (playerBaseInfo != null) {
      playerBaseInfo.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PartnerInfoStandardSchemeFactory implements SchemeFactory {
    public PartnerInfoStandardScheme getScheme() {
      return new PartnerInfoStandardScheme();
    }
  }

  private static class PartnerInfoStandardScheme extends StandardScheme<PartnerInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PartnerInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MODEL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.modelId = iprot.readI16();
              struct.setModelIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BODY_ADJ_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.bodyAdjVal = iprot.readByte();
              struct.setBodyAdjValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // AVATAR_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list106 = iprot.readListBegin();
                struct.avatarInfos = new ArrayList<AvatarInfo>(_list106.size);
                for (int _i107 = 0; _i107 < _list106.size; ++_i107)
                {
                  AvatarInfo _elem108; // required
                  _elem108 = new AvatarInfo();
                  _elem108.read(iprot);
                  struct.avatarInfos.add(_elem108);
                }
                iprot.readListEnd();
              }
              struct.setAvatarInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ROBOT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.robot = iprot.readBool();
              struct.setRobotIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ROBOT_SCORE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.robotScore = iprot.readI32();
              struct.setRobotScoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ROBOT_KEY_RESULT_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list109 = iprot.readListBegin();
                struct.robotKeyResultList = new ArrayList<Byte>(_list109.size);
                for (int _i110 = 0; _i110 < _list109.size; ++_i110)
                {
                  byte _elem111; // required
                  _elem111 = iprot.readByte();
                  struct.robotKeyResultList.add(_elem111);
                }
                iprot.readListEnd();
              }
              struct.setRobotKeyResultListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // STATURE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.stature = iprot.readByte();
              struct.setStatureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // RANK
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.rank = iprot.readI16();
              struct.setRankIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PLAYER_BASE_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.playerBaseInfo = new PlayerBaseInfo();
              struct.playerBaseInfo.read(iprot);
              struct.setPlayerBaseInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SKIN_COLOR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.skinColor = iprot.readI32();
              struct.setSkinColorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PUT_ON_BADGES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list112 = iprot.readListBegin();
                struct.putOnBadges = new ArrayList<BadgeInfo>(_list112.size);
                for (int _i113 = 0; _i113 < _list112.size; ++_i113)
                {
                  BadgeInfo _elem114; // required
                  _elem114 = new BadgeInfo();
                  _elem114.read(iprot);
                  struct.putOnBadges.add(_elem114);
                }
                iprot.readListEnd();
              }
              struct.setPutOnBadgesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // DANCE_FASHION_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map115 = iprot.readMapBegin();
                struct.danceFashionIds = new HashMap<Byte,Integer>(2*_map115.size);
                for (int _i116 = 0; _i116 < _map115.size; ++_i116)
                {
                  byte _key117; // required
                  int _val118; // required
                  _key117 = iprot.readByte();
                  _val118 = iprot.readI32();
                  struct.danceFashionIds.put(_key117, _val118);
                }
                iprot.readMapEnd();
              }
              struct.setDanceFashionIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PartnerInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MODEL_ID_FIELD_DESC);
      oprot.writeI16(struct.modelId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BODY_ADJ_VAL_FIELD_DESC);
      oprot.writeByte(struct.bodyAdjVal);
      oprot.writeFieldEnd();
      if (struct.avatarInfos != null) {
        oprot.writeFieldBegin(AVATAR_INFOS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.avatarInfos.size()));
          for (AvatarInfo _iter119 : struct.avatarInfos)
          {
            _iter119.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ROBOT_FIELD_DESC);
      oprot.writeBool(struct.robot);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROBOT_SCORE_FIELD_DESC);
      oprot.writeI32(struct.robotScore);
      oprot.writeFieldEnd();
      if (struct.robotKeyResultList != null) {
        oprot.writeFieldBegin(ROBOT_KEY_RESULT_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BYTE, struct.robotKeyResultList.size()));
          for (byte _iter120 : struct.robotKeyResultList)
          {
            oprot.writeByte(_iter120);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATURE_FIELD_DESC);
      oprot.writeByte(struct.stature);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RANK_FIELD_DESC);
      oprot.writeI16(struct.rank);
      oprot.writeFieldEnd();
      if (struct.playerBaseInfo != null) {
        oprot.writeFieldBegin(PLAYER_BASE_INFO_FIELD_DESC);
        struct.playerBaseInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SKIN_COLOR_FIELD_DESC);
      oprot.writeI32(struct.skinColor);
      oprot.writeFieldEnd();
      if (struct.putOnBadges != null) {
        oprot.writeFieldBegin(PUT_ON_BADGES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.putOnBadges.size()));
          for (BadgeInfo _iter121 : struct.putOnBadges)
          {
            _iter121.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.danceFashionIds != null) {
        oprot.writeFieldBegin(DANCE_FASHION_IDS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.BYTE, org.apache.thrift.protocol.TType.I32, struct.danceFashionIds.size()));
          for (Map.Entry<Byte, Integer> _iter122 : struct.danceFashionIds.entrySet())
          {
            oprot.writeByte(_iter122.getKey());
            oprot.writeI32(_iter122.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PartnerInfoTupleSchemeFactory implements SchemeFactory {
    public PartnerInfoTupleScheme getScheme() {
      return new PartnerInfoTupleScheme();
    }
  }

  private static class PartnerInfoTupleScheme extends TupleScheme<PartnerInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PartnerInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetModelId()) {
        optionals.set(0);
      }
      if (struct.isSetBodyAdjVal()) {
        optionals.set(1);
      }
      if (struct.isSetAvatarInfos()) {
        optionals.set(2);
      }
      if (struct.isSetRobot()) {
        optionals.set(3);
      }
      if (struct.isSetRobotScore()) {
        optionals.set(4);
      }
      if (struct.isSetRobotKeyResultList()) {
        optionals.set(5);
      }
      if (struct.isSetStature()) {
        optionals.set(6);
      }
      if (struct.isSetRank()) {
        optionals.set(7);
      }
      if (struct.isSetPlayerBaseInfo()) {
        optionals.set(8);
      }
      if (struct.isSetSkinColor()) {
        optionals.set(9);
      }
      if (struct.isSetPutOnBadges()) {
        optionals.set(10);
      }
      if (struct.isSetDanceFashionIds()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetModelId()) {
        oprot.writeI16(struct.modelId);
      }
      if (struct.isSetBodyAdjVal()) {
        oprot.writeByte(struct.bodyAdjVal);
      }
      if (struct.isSetAvatarInfos()) {
        {
          oprot.writeI32(struct.avatarInfos.size());
          for (AvatarInfo _iter123 : struct.avatarInfos)
          {
            _iter123.write(oprot);
          }
        }
      }
      if (struct.isSetRobot()) {
        oprot.writeBool(struct.robot);
      }
      if (struct.isSetRobotScore()) {
        oprot.writeI32(struct.robotScore);
      }
      if (struct.isSetRobotKeyResultList()) {
        {
          oprot.writeI32(struct.robotKeyResultList.size());
          for (byte _iter124 : struct.robotKeyResultList)
          {
            oprot.writeByte(_iter124);
          }
        }
      }
      if (struct.isSetStature()) {
        oprot.writeByte(struct.stature);
      }
      if (struct.isSetRank()) {
        oprot.writeI16(struct.rank);
      }
      if (struct.isSetPlayerBaseInfo()) {
        struct.playerBaseInfo.write(oprot);
      }
      if (struct.isSetSkinColor()) {
        oprot.writeI32(struct.skinColor);
      }
      if (struct.isSetPutOnBadges()) {
        {
          oprot.writeI32(struct.putOnBadges.size());
          for (BadgeInfo _iter125 : struct.putOnBadges)
          {
            _iter125.write(oprot);
          }
        }
      }
      if (struct.isSetDanceFashionIds()) {
        {
          oprot.writeI32(struct.danceFashionIds.size());
          for (Map.Entry<Byte, Integer> _iter126 : struct.danceFashionIds.entrySet())
          {
            oprot.writeByte(_iter126.getKey());
            oprot.writeI32(_iter126.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PartnerInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.modelId = iprot.readI16();
        struct.setModelIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.bodyAdjVal = iprot.readByte();
        struct.setBodyAdjValIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list127 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.avatarInfos = new ArrayList<AvatarInfo>(_list127.size);
          for (int _i128 = 0; _i128 < _list127.size; ++_i128)
          {
            AvatarInfo _elem129; // required
            _elem129 = new AvatarInfo();
            _elem129.read(iprot);
            struct.avatarInfos.add(_elem129);
          }
        }
        struct.setAvatarInfosIsSet(true);
      }
      if (incoming.get(3)) {
        struct.robot = iprot.readBool();
        struct.setRobotIsSet(true);
      }
      if (incoming.get(4)) {
        struct.robotScore = iprot.readI32();
        struct.setRobotScoreIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list130 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BYTE, iprot.readI32());
          struct.robotKeyResultList = new ArrayList<Byte>(_list130.size);
          for (int _i131 = 0; _i131 < _list130.size; ++_i131)
          {
            byte _elem132; // required
            _elem132 = iprot.readByte();
            struct.robotKeyResultList.add(_elem132);
          }
        }
        struct.setRobotKeyResultListIsSet(true);
      }
      if (incoming.get(6)) {
        struct.stature = iprot.readByte();
        struct.setStatureIsSet(true);
      }
      if (incoming.get(7)) {
        struct.rank = iprot.readI16();
        struct.setRankIsSet(true);
      }
      if (incoming.get(8)) {
        struct.playerBaseInfo = new PlayerBaseInfo();
        struct.playerBaseInfo.read(iprot);
        struct.setPlayerBaseInfoIsSet(true);
      }
      if (incoming.get(9)) {
        struct.skinColor = iprot.readI32();
        struct.setSkinColorIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list133 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.putOnBadges = new ArrayList<BadgeInfo>(_list133.size);
          for (int _i134 = 0; _i134 < _list133.size; ++_i134)
          {
            BadgeInfo _elem135; // required
            _elem135 = new BadgeInfo();
            _elem135.read(iprot);
            struct.putOnBadges.add(_elem135);
          }
        }
        struct.setPutOnBadgesIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TMap _map136 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.BYTE, org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.danceFashionIds = new HashMap<Byte,Integer>(2*_map136.size);
          for (int _i137 = 0; _i137 < _map136.size; ++_i137)
          {
            byte _key138; // required
            int _val139; // required
            _key138 = iprot.readByte();
            _val139 = iprot.readI32();
            struct.danceFashionIds.put(_key138, _val139);
          }
        }
        struct.setDanceFashionIdsIsSet(true);
      }
    }
  }

}

