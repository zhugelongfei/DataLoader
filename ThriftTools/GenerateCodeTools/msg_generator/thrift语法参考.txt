Thrift常见的数据类型：

1.基本类型（括号内为对应的Java类型）：
bool（boolean）: 布尔类型(TRUE or FALSE)
byte（byte）: 8位带符号整数
i16（short）: 16位带符号整数
i32（int）: 32位带符号整数
i64（long）: 64位带符号整数
double（double）: 64位浮点数
string（String）: 采用UTF-8编码的字符串

2.特殊类型（括号内为对应的Java类型）：
binary（ByteBuffer）：未经过编码的字节流

3.Structs（结构）：
struct定义了一个很普通的OOP对象，但是没有继承特性。

struct UserProfile {
1: i32 uid,
2: string name,
3: string blurb
}

如果变量有默认值，可以直接写在定义文件里:

struct UserProfile {
1: i32 uid = 1,
2: string name = "User1",
3: string blurb
}

4.容器，除了上面提到的基本数据类型，Thrift还支持以下容器类型：
list(java.util.ArrayList)：
set(java.util.HashSet)：
map（java.util.HashMap）：

用法如下：
struct Node {
1: i32 id,
2: string name,
3: list<i32> subNodeList,
4: map<i32,string> subNodeMap,
5: set<i32> subNodeSet
}

包含定义的其他Object:
struct SubNode {
1: i32 uid,
2: string name,
3: i32 pid
}

struct Node {
1: i32 uid,
2: string name,
3: list<subNode> subNodes
}

5.枚举类型
可以像C/C++那样定义枚举类型，如：
enum TweetType {
TWEET,      
RETWEET = 2,
DM = 0xa,  
REPLY 
}    

6.注释
Thrfit支持shell注释风格，C/C++语言中单行或者多行注释风格
# This is a valid comment.
 
/*
 
* This is a multi-line comment.
 
* Just like in C.
 
*/
 
// C++/Java style single-line comments work just as well.

7.命名空间
Thrift中的命名空间同C++中的namespace和java中的package类似，它们均提供了一种组织（隔离）代码的方式。因为每种语言均有自己的命名空间定义方式（如python中有module），thrift允许开发者针对特定语言定义namespace：

namespace cpp com.example.project 
 
namespace java com.example.project 
说明：
a．  转化成namespace com { namespace example { namespace project {
b．  转换成package com.example.project

8   文件包含
Thrift允许thrift文件包含，用户需要使用thrift文件名作为前缀访问被包含的对象，如：

include "tweet.thrift"      
 
...
 
struct TweetSearchResult {
 
1: list<tweet.Tweet> tweets
 
}
说明：
a．  thrift文件名要用双引号包含，末尾没有逗号或者分号
b．  注意tweet前缀

9   常量
Thrift允许用户定义常量，复杂的类型和结构体可使用JSON形式表示。
const i32 INT_CONST = 1234;  
 
const map<string,string> MAP_CONST = {"hello": "world", "goodnight": "moon"}
说明：
a．  分号是可选的，可有可无；支持十六进制赋值。