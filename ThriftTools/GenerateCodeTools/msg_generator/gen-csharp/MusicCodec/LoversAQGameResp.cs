/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class LoversAQGameResp : TBase
  {
    private Dictionary<long, byte> _indexMap;
    private byte _result;
    private int _mark;

    public Dictionary<long, byte> IndexMap
    {
      get
      {
        return _indexMap;
      }
      set
      {
        __isset.indexMap = true;
        this._indexMap = value;
      }
    }

    public byte Result
    {
      get
      {
        return _result;
      }
      set
      {
        __isset.result = true;
        this._result = value;
      }
    }

    public int Mark
    {
      get
      {
        return _mark;
      }
      set
      {
        __isset.mark = true;
        this._mark = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool indexMap;
      public bool result;
      public bool mark;
    }

    public LoversAQGameResp() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Map) {
              {
                IndexMap = new Dictionary<long, byte>();
                TMap _map252 = iprot.ReadMapBegin();
                for( int _i253 = 0; _i253 < _map252.Count; ++_i253)
                {
                  long _key254;
                  byte _val255;
                  _key254 = iprot.ReadI64();
                  _val255 = iprot.ReadByte();
                  IndexMap[_key254] = _val255;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Byte) {
              Result = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Mark = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("LoversAQGameResp");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (IndexMap != null && __isset.indexMap) {
        field.Name = "indexMap";
        field.Type = TType.Map;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I64, TType.Byte, IndexMap.Count));
          foreach (long _iter256 in IndexMap.Keys)
          {
            oprot.WriteI64(_iter256);
            oprot.WriteByte(IndexMap[_iter256]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.result) {
        field.Name = "result";
        field.Type = TType.Byte;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Result);
        oprot.WriteFieldEnd();
      }
      if (__isset.mark) {
        field.Name = "mark";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Mark);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("LoversAQGameResp(");
      sb.Append("IndexMap: ");
      sb.Append(IndexMap);
      sb.Append(",Result: ");
      sb.Append(Result);
      sb.Append(",Mark: ");
      sb.Append(Mark);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
