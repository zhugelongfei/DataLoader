/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class BuyItemInfo : TBase
  {
    private int _itemId;
    private byte _validTimeType;
    private int _count;
    private AvatarDiyArea _diyareas;
    private int _remainTime;

    public int ItemId
    {
      get
      {
        return _itemId;
      }
      set
      {
        __isset.itemId = true;
        this._itemId = value;
      }
    }

    public byte ValidTimeType
    {
      get
      {
        return _validTimeType;
      }
      set
      {
        __isset.validTimeType = true;
        this._validTimeType = value;
      }
    }

    public int Count
    {
      get
      {
        return _count;
      }
      set
      {
        __isset.count = true;
        this._count = value;
      }
    }

    public AvatarDiyArea Diyareas
    {
      get
      {
        return _diyareas;
      }
      set
      {
        __isset.diyareas = true;
        this._diyareas = value;
      }
    }

    public int RemainTime
    {
      get
      {
        return _remainTime;
      }
      set
      {
        __isset.remainTime = true;
        this._remainTime = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool itemId;
      public bool validTimeType;
      public bool count;
      public bool diyareas;
      public bool remainTime;
    }

    public BuyItemInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              ItemId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Byte) {
              ValidTimeType = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Count = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Struct) {
              Diyareas = new AvatarDiyArea();
              Diyareas.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              RemainTime = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("BuyItemInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.itemId) {
        field.Name = "itemId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ItemId);
        oprot.WriteFieldEnd();
      }
      if (__isset.validTimeType) {
        field.Name = "validTimeType";
        field.Type = TType.Byte;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(ValidTimeType);
        oprot.WriteFieldEnd();
      }
      if (__isset.count) {
        field.Name = "count";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Count);
        oprot.WriteFieldEnd();
      }
      if (Diyareas != null && __isset.diyareas) {
        field.Name = "diyareas";
        field.Type = TType.Struct;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        Diyareas.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.remainTime) {
        field.Name = "remainTime";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(RemainTime);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("BuyItemInfo(");
      sb.Append("ItemId: ");
      sb.Append(ItemId);
      sb.Append(",ValidTimeType: ");
      sb.Append(ValidTimeType);
      sb.Append(",Count: ");
      sb.Append(Count);
      sb.Append(",Diyareas: ");
      sb.Append(Diyareas== null ? "<null>" : Diyareas.ToString());
      sb.Append(",RemainTime: ");
      sb.Append(RemainTime);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
