/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class AvatarDiyAreaItem : TBase
  {
    private int _colorId;
    private double _aplha;
    private double _brightness;
    private byte _area;

    public int ColorId
    {
      get
      {
        return _colorId;
      }
      set
      {
        __isset.colorId = true;
        this._colorId = value;
      }
    }

    public double Aplha
    {
      get
      {
        return _aplha;
      }
      set
      {
        __isset.aplha = true;
        this._aplha = value;
      }
    }

    public double Brightness
    {
      get
      {
        return _brightness;
      }
      set
      {
        __isset.brightness = true;
        this._brightness = value;
      }
    }

    public byte Area
    {
      get
      {
        return _area;
      }
      set
      {
        __isset.area = true;
        this._area = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool colorId;
      public bool aplha;
      public bool brightness;
      public bool area;
    }

    public AvatarDiyAreaItem() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              ColorId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Double) {
              Aplha = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Double) {
              Brightness = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Byte) {
              Area = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("AvatarDiyAreaItem");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.colorId) {
        field.Name = "colorId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ColorId);
        oprot.WriteFieldEnd();
      }
      if (__isset.aplha) {
        field.Name = "aplha";
        field.Type = TType.Double;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Aplha);
        oprot.WriteFieldEnd();
      }
      if (__isset.brightness) {
        field.Name = "brightness";
        field.Type = TType.Double;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Brightness);
        oprot.WriteFieldEnd();
      }
      if (__isset.area) {
        field.Name = "area";
        field.Type = TType.Byte;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Area);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("AvatarDiyAreaItem(");
      sb.Append("ColorId: ");
      sb.Append(ColorId);
      sb.Append(",Aplha: ");
      sb.Append(Aplha);
      sb.Append(",Brightness: ");
      sb.Append(Brightness);
      sb.Append(",Area: ");
      sb.Append(Area);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
