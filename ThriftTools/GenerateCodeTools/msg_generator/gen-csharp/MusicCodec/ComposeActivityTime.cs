/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ComposeActivityTime : TBase
  {
    private short _beginHour;
    private short _beginMinute;
    private short _endHour;
    private short _endMinute;

    public short BeginHour
    {
      get
      {
        return _beginHour;
      }
      set
      {
        __isset.beginHour = true;
        this._beginHour = value;
      }
    }

    public short BeginMinute
    {
      get
      {
        return _beginMinute;
      }
      set
      {
        __isset.beginMinute = true;
        this._beginMinute = value;
      }
    }

    public short EndHour
    {
      get
      {
        return _endHour;
      }
      set
      {
        __isset.endHour = true;
        this._endHour = value;
      }
    }

    public short EndMinute
    {
      get
      {
        return _endMinute;
      }
      set
      {
        __isset.endMinute = true;
        this._endMinute = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool beginHour;
      public bool beginMinute;
      public bool endHour;
      public bool endMinute;
    }

    public ComposeActivityTime() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I16) {
              BeginHour = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I16) {
              BeginMinute = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I16) {
              EndHour = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I16) {
              EndMinute = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ComposeActivityTime");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.beginHour) {
        field.Name = "beginHour";
        field.Type = TType.I16;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(BeginHour);
        oprot.WriteFieldEnd();
      }
      if (__isset.beginMinute) {
        field.Name = "beginMinute";
        field.Type = TType.I16;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(BeginMinute);
        oprot.WriteFieldEnd();
      }
      if (__isset.endHour) {
        field.Name = "endHour";
        field.Type = TType.I16;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(EndHour);
        oprot.WriteFieldEnd();
      }
      if (__isset.endMinute) {
        field.Name = "endMinute";
        field.Type = TType.I16;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(EndMinute);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ComposeActivityTime(");
      sb.Append("BeginHour: ");
      sb.Append(BeginHour);
      sb.Append(",BeginMinute: ");
      sb.Append(BeginMinute);
      sb.Append(",EndHour: ");
      sb.Append(EndHour);
      sb.Append(",EndMinute: ");
      sb.Append(EndMinute);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
