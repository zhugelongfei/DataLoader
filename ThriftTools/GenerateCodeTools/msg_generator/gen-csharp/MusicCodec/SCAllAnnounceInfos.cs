/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  /// <summary>
  /// 通告信息
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SCAllAnnounceInfos : TBase
  {
    private int _announceVersion;
    private byte _availableTimes;
    private int _announceGold;
    private List<MusicCodec.AnnounceData> _announceList;
    private short _nextRefreshTime;

    public int AnnounceVersion
    {
      get
      {
        return _announceVersion;
      }
      set
      {
        __isset.announceVersion = true;
        this._announceVersion = value;
      }
    }

    public byte AvailableTimes
    {
      get
      {
        return _availableTimes;
      }
      set
      {
        __isset.availableTimes = true;
        this._availableTimes = value;
      }
    }

    public int AnnounceGold
    {
      get
      {
        return _announceGold;
      }
      set
      {
        __isset.announceGold = true;
        this._announceGold = value;
      }
    }

    public List<MusicCodec.AnnounceData> AnnounceList
    {
      get
      {
        return _announceList;
      }
      set
      {
        __isset.announceList = true;
        this._announceList = value;
      }
    }

    /// <summary>
    /// 下次刷新时间(HHmm)
    /// </summary>
    public short NextRefreshTime
    {
      get
      {
        return _nextRefreshTime;
      }
      set
      {
        __isset.nextRefreshTime = true;
        this._nextRefreshTime = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool announceVersion;
      public bool availableTimes;
      public bool announceGold;
      public bool announceList;
      public bool nextRefreshTime;
    }

    public SCAllAnnounceInfos() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              AnnounceVersion = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Byte) {
              AvailableTimes = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              AnnounceGold = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.List) {
              {
                AnnounceList = new List<MusicCodec.AnnounceData>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  MusicCodec.AnnounceData _elem2 = new MusicCodec.AnnounceData();
                  _elem2 = new MusicCodec.AnnounceData();
                  _elem2.Read(iprot);
                  AnnounceList.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I16) {
              NextRefreshTime = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
ClientLog.Instance.LogError("This function is deleted.");
}

    


  }

}
