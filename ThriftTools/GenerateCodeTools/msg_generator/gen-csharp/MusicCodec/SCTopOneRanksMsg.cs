/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  /// <summary>
  /// 排行榜第一名信息
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SCTopOneRanksMsg : TBase
  {
    private Dictionary<short, MusicCodec.RankInfo> _topOneRankInfos;
    private int _validTime;
    private byte _panelId;

    /// <summary>
    /// 排行榜类型 - 上榜玩家信息
    /// </summary>
    public Dictionary<short, MusicCodec.RankInfo> TopOneRankInfos
    {
      get
      {
        return _topOneRankInfos;
      }
      set
      {
        __isset.topOneRankInfos = true;
        this._topOneRankInfos = value;
      }
    }

    /// <summary>
    /// 有效截止时间（从1970.1.1开始的秒数）
    /// </summary>
    public int ValidTime
    {
      get
      {
        return _validTime;
      }
      set
      {
        __isset.validTime = true;
        this._validTime = value;
      }
    }

    /// <summary>
    /// 客户端记录所在面板
    /// </summary>
    public byte PanelId
    {
      get
      {
        return _panelId;
      }
      set
      {
        __isset.panelId = true;
        this._panelId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool topOneRankInfos;
      public bool validTime;
      public bool panelId;
    }

    public SCTopOneRanksMsg() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Map) {
              {
                TopOneRankInfos = new Dictionary<short, MusicCodec.RankInfo>();
                TMap _map0 = iprot.ReadMapBegin();
                for( int _i1 = 0; _i1 < _map0.Count; ++_i1)
                {
                  short _key2;
                  MusicCodec.RankInfo _val3;
                  _key2 = iprot.ReadI16();
                  _val3 = new MusicCodec.RankInfo();
                  _val3.Read(iprot);
                  TopOneRankInfos[_key2] = _val3;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              ValidTime = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Byte) {
              PanelId = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
ClientLog.Instance.LogError("This function is deleted.");
}

    


  }

}
