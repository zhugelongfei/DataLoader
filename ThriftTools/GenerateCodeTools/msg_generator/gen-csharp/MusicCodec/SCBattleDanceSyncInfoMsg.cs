/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SCBattleDanceSyncInfoMsg : TBase
  {
    private byte _partIndex;
    private byte _inputIndex;
    private long _charId;
    private byte _keyResult;
    private int _totalMark;
    private byte _inputDataIndex;
    private int _partMark;
    private short _curCombo;

    public byte PartIndex
    {
      get
      {
        return _partIndex;
      }
      set
      {
        __isset.partIndex = true;
        this._partIndex = value;
      }
    }

    public byte InputIndex
    {
      get
      {
        return _inputIndex;
      }
      set
      {
        __isset.inputIndex = true;
        this._inputIndex = value;
      }
    }

    public long CharId
    {
      get
      {
        return _charId;
      }
      set
      {
        __isset.charId = true;
        this._charId = value;
      }
    }

    /// <summary>
    /// 1-miss 2-good 3-great 4-perfect
    /// </summary>
    public byte KeyResult
    {
      get
      {
        return _keyResult;
      }
      set
      {
        __isset.keyResult = true;
        this._keyResult = value;
      }
    }

    public int TotalMark
    {
      get
      {
        return _totalMark;
      }
      set
      {
        __isset.totalMark = true;
        this._totalMark = value;
      }
    }

    public byte InputDataIndex
    {
      get
      {
        return _inputDataIndex;
      }
      set
      {
        __isset.inputDataIndex = true;
        this._inputDataIndex = value;
      }
    }

    public int PartMark
    {
      get
      {
        return _partMark;
      }
      set
      {
        __isset.partMark = true;
        this._partMark = value;
      }
    }

    public short CurCombo
    {
      get
      {
        return _curCombo;
      }
      set
      {
        __isset.curCombo = true;
        this._curCombo = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool partIndex;
      public bool inputIndex;
      public bool charId;
      public bool keyResult;
      public bool totalMark;
      public bool inputDataIndex;
      public bool partMark;
      public bool curCombo;
    }

    public SCBattleDanceSyncInfoMsg() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Byte) {
              PartIndex = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Byte) {
              InputIndex = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              CharId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Byte) {
              KeyResult = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              TotalMark = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Byte) {
              InputDataIndex = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              PartMark = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I16) {
              CurCombo = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
ClientLog.Instance.LogError("This function is deleted.");
}

    


  }

}
