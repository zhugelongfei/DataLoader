/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  /// <summary>
  /// 名片简要信息
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SimpleBusinessCardInfo : TBase
  {
    private long _charId;
    private string _name;
    private byte _sex;
    private string _headIconId;
    private byte _relationType;
    private int _relationVal;
    private string _location;
    private bool _open;
    private string _moodMessage;
    private string _moodMessageByVoice;
    private bool _isOnline;
    private int _level;
    private string _guildName;
    private short _tagId;
    private byte _vipLevel;
    private Dictionary<byte, long> _cardFashionIds;
    private double _longitude;
    private double _latitude;

    public long CharId
    {
      get
      {
        return _charId;
      }
      set
      {
        __isset.charId = true;
        this._charId = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public byte Sex
    {
      get
      {
        return _sex;
      }
      set
      {
        __isset.sex = true;
        this._sex = value;
      }
    }

    public string HeadIconId
    {
      get
      {
        return _headIconId;
      }
      set
      {
        __isset.headIconId = true;
        this._headIconId = value;
      }
    }

    /// <summary>
    /// 好友关系, 无关系为-1
    /// </summary>
    public byte RelationType
    {
      get
      {
        return _relationType;
      }
      set
      {
        __isset.relationType = true;
        this._relationType = value;
      }
    }

    /// <summary>
    /// 好友关系值， 如亲密度
    /// </summary>
    public int RelationVal
    {
      get
      {
        return _relationVal;
      }
      set
      {
        __isset.relationVal = true;
        this._relationVal = value;
      }
    }

    public string Location
    {
      get
      {
        return _location;
      }
      set
      {
        __isset.location = true;
        this._location = value;
      }
    }

    public bool Open
    {
      get
      {
        return _open;
      }
      set
      {
        __isset.open = true;
        this._open = value;
      }
    }

    public string MoodMessage
    {
      get
      {
        return _moodMessage;
      }
      set
      {
        __isset.moodMessage = true;
        this._moodMessage = value;
      }
    }

    public string MoodMessageByVoice
    {
      get
      {
        return _moodMessageByVoice;
      }
      set
      {
        __isset.moodMessageByVoice = true;
        this._moodMessageByVoice = value;
      }
    }

    public bool IsOnline
    {
      get
      {
        return _isOnline;
      }
      set
      {
        __isset.isOnline = true;
        this._isOnline = value;
      }
    }

    public int Level
    {
      get
      {
        return _level;
      }
      set
      {
        __isset.level = true;
        this._level = value;
      }
    }

    /// <summary>
    /// 舞团名
    /// </summary>
    public string GuildName
    {
      get
      {
        return _guildName;
      }
      set
      {
        __isset.guildName = true;
        this._guildName = value;
      }
    }

    public short TagId
    {
      get
      {
        return _tagId;
      }
      set
      {
        __isset.tagId = true;
        this._tagId = value;
      }
    }

    public byte VipLevel
    {
      get
      {
        return _vipLevel;
      }
      set
      {
        __isset.vipLevel = true;
        this._vipLevel = value;
      }
    }

    /// <summary>
    /// 使用中的名片时尚id, key:style val:高32位id | 低32位有效期
    /// </summary>
    public Dictionary<byte, long> CardFashionIds
    {
      get
      {
        return _cardFashionIds;
      }
      set
      {
        __isset.cardFashionIds = true;
        this._cardFashionIds = value;
      }
    }

    public double Longitude
    {
      get
      {
        return _longitude;
      }
      set
      {
        __isset.longitude = true;
        this._longitude = value;
      }
    }

    public double Latitude
    {
      get
      {
        return _latitude;
      }
      set
      {
        __isset.latitude = true;
        this._latitude = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool charId;
      public bool name;
      public bool sex;
      public bool headIconId;
      public bool relationType;
      public bool relationVal;
      public bool location;
      public bool open;
      public bool moodMessage;
      public bool moodMessageByVoice;
      public bool isOnline;
      public bool level;
      public bool guildName;
      public bool tagId;
      public bool vipLevel;
      public bool cardFashionIds;
      public bool longitude;
      public bool latitude;
    }

    public SimpleBusinessCardInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              CharId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Byte) {
              Sex = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              HeadIconId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Byte) {
              RelationType = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              RelationVal = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              Location = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Bool) {
              Open = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.String) {
              MoodMessage = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.String) {
              MoodMessageByVoice = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.Bool) {
              IsOnline = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.I32) {
              Level = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.String) {
              GuildName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.I16) {
              TagId = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.Byte) {
              VipLevel = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 16:
            if (field.Type == TType.Map) {
              {
                CardFashionIds = new Dictionary<byte, long>();
                TMap _map102 = iprot.ReadMapBegin();
                for( int _i103 = 0; _i103 < _map102.Count; ++_i103)
                {
                  byte _key104;
                  long _val105;
                  _key104 = iprot.ReadByte();
                  _val105 = iprot.ReadI64();
                  CardFashionIds[_key104] = _val105;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 17:
            if (field.Type == TType.Double) {
              Longitude = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 18:
            if (field.Type == TType.Double) {
              Latitude = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("SimpleBusinessCardInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.charId) {
        field.Name = "charId";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CharId);
        oprot.WriteFieldEnd();
      }
      if (Name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
      }
      if (__isset.sex) {
        field.Name = "sex";
        field.Type = TType.Byte;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Sex);
        oprot.WriteFieldEnd();
      }
      if (HeadIconId != null && __isset.headIconId) {
        field.Name = "headIconId";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(HeadIconId);
        oprot.WriteFieldEnd();
      }
      if (__isset.relationType) {
        field.Name = "relationType";
        field.Type = TType.Byte;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(RelationType);
        oprot.WriteFieldEnd();
      }
      if (__isset.relationVal) {
        field.Name = "relationVal";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(RelationVal);
        oprot.WriteFieldEnd();
      }
      if (Location != null && __isset.location) {
        field.Name = "location";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Location);
        oprot.WriteFieldEnd();
      }
      if (__isset.open) {
        field.Name = "open";
        field.Type = TType.Bool;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Open);
        oprot.WriteFieldEnd();
      }
      if (MoodMessage != null && __isset.moodMessage) {
        field.Name = "moodMessage";
        field.Type = TType.String;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(MoodMessage);
        oprot.WriteFieldEnd();
      }
      if (MoodMessageByVoice != null && __isset.moodMessageByVoice) {
        field.Name = "moodMessageByVoice";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(MoodMessageByVoice);
        oprot.WriteFieldEnd();
      }
      if (__isset.isOnline) {
        field.Name = "isOnline";
        field.Type = TType.Bool;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsOnline);
        oprot.WriteFieldEnd();
      }
      if (__isset.level) {
        field.Name = "level";
        field.Type = TType.I32;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Level);
        oprot.WriteFieldEnd();
      }
      if (GuildName != null && __isset.guildName) {
        field.Name = "guildName";
        field.Type = TType.String;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(GuildName);
        oprot.WriteFieldEnd();
      }
      if (__isset.tagId) {
        field.Name = "tagId";
        field.Type = TType.I16;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(TagId);
        oprot.WriteFieldEnd();
      }
      if (__isset.vipLevel) {
        field.Name = "vipLevel";
        field.Type = TType.Byte;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(VipLevel);
        oprot.WriteFieldEnd();
      }
      if (CardFashionIds != null && __isset.cardFashionIds) {
        field.Name = "cardFashionIds";
        field.Type = TType.Map;
        field.ID = 16;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.Byte, TType.I64, CardFashionIds.Count));
          foreach (byte _iter106 in CardFashionIds.Keys)
          {
            oprot.WriteByte(_iter106);
            oprot.WriteI64(CardFashionIds[_iter106]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.longitude) {
        field.Name = "longitude";
        field.Type = TType.Double;
        field.ID = 17;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Longitude);
        oprot.WriteFieldEnd();
      }
      if (__isset.latitude) {
        field.Name = "latitude";
        field.Type = TType.Double;
        field.ID = 18;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Latitude);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("SimpleBusinessCardInfo(");
      sb.Append("CharId: ");
      sb.Append(CharId);
      sb.Append(",Name: ");
      sb.Append(Name);
      sb.Append(",Sex: ");
      sb.Append(Sex);
      sb.Append(",HeadIconId: ");
      sb.Append(HeadIconId);
      sb.Append(",RelationType: ");
      sb.Append(RelationType);
      sb.Append(",RelationVal: ");
      sb.Append(RelationVal);
      sb.Append(",Location: ");
      sb.Append(Location);
      sb.Append(",Open: ");
      sb.Append(Open);
      sb.Append(",MoodMessage: ");
      sb.Append(MoodMessage);
      sb.Append(",MoodMessageByVoice: ");
      sb.Append(MoodMessageByVoice);
      sb.Append(",IsOnline: ");
      sb.Append(IsOnline);
      sb.Append(",Level: ");
      sb.Append(Level);
      sb.Append(",GuildName: ");
      sb.Append(GuildName);
      sb.Append(",TagId: ");
      sb.Append(TagId);
      sb.Append(",VipLevel: ");
      sb.Append(VipLevel);
      sb.Append(",CardFashionIds: ");
      sb.Append(CardFashionIds);
      sb.Append(",Longitude: ");
      sb.Append(Longitude);
      sb.Append(",Latitude: ");
      sb.Append(Latitude);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
