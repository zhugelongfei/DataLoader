/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  /// <summary>
  /// 切换广场区域
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CSChangeGroundArea : TBase
  {
    private byte _targetGroundStatus;
    private double _posX;
    private double _posY;
    private double _posZ;

    /// <summary>
    /// 目标区域GroundPlayerStatus
    /// </summary>
    public byte TargetGroundStatus
    {
      get
      {
        return _targetGroundStatus;
      }
      set
      {
        __isset.targetGroundStatus = true;
        this._targetGroundStatus = value;
      }
    }

    /// <summary>
    /// 新的坐标
    /// </summary>
    public double PosX
    {
      get
      {
        return _posX;
      }
      set
      {
        __isset.posX = true;
        this._posX = value;
      }
    }

    public double PosY
    {
      get
      {
        return _posY;
      }
      set
      {
        __isset.posY = true;
        this._posY = value;
      }
    }

    public double PosZ
    {
      get
      {
        return _posZ;
      }
      set
      {
        __isset.posZ = true;
        this._posZ = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool targetGroundStatus;
      public bool posX;
      public bool posY;
      public bool posZ;
    }

    public CSChangeGroundArea() {
    }

    public void Read (TProtocol iprot)
    {
ClientLog.Instance.LogError("This function is deleted.");
}

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("CSChangeGroundArea");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.targetGroundStatus) {
        field.Name = "targetGroundStatus";
        field.Type = TType.Byte;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(TargetGroundStatus);
        oprot.WriteFieldEnd();
      }
      if (__isset.posX) {
        field.Name = "posX";
        field.Type = TType.Double;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(PosX);
        oprot.WriteFieldEnd();
      }
      if (__isset.posY) {
        field.Name = "posY";
        field.Type = TType.Double;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(PosY);
        oprot.WriteFieldEnd();
      }
      if (__isset.posZ) {
        field.Name = "posZ";
        field.Type = TType.Double;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(PosZ);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    


  }

}
