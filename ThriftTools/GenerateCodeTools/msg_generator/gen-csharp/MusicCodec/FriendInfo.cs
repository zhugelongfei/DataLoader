/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class FriendInfo : TBase
  {
    private SimpleBusinessCardInfo _simpleCardInfo;
    private bool _twoWay;
    private int _intimacy;

    public SimpleBusinessCardInfo SimpleCardInfo
    {
      get
      {
        return _simpleCardInfo;
      }
      set
      {
        __isset.simpleCardInfo = true;
        this._simpleCardInfo = value;
      }
    }

    public bool TwoWay
    {
      get
      {
        return _twoWay;
      }
      set
      {
        __isset.twoWay = true;
        this._twoWay = value;
      }
    }

    public int Intimacy
    {
      get
      {
        return _intimacy;
      }
      set
      {
        __isset.intimacy = true;
        this._intimacy = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool simpleCardInfo;
      public bool twoWay;
      public bool intimacy;
    }

    public FriendInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              SimpleCardInfo = new SimpleBusinessCardInfo();
              SimpleCardInfo.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Bool) {
              TwoWay = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Intimacy = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("FriendInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (SimpleCardInfo != null && __isset.simpleCardInfo) {
        field.Name = "simpleCardInfo";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        SimpleCardInfo.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.twoWay) {
        field.Name = "twoWay";
        field.Type = TType.Bool;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(TwoWay);
        oprot.WriteFieldEnd();
      }
      if (__isset.intimacy) {
        field.Name = "intimacy";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Intimacy);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("FriendInfo(");
      sb.Append("SimpleCardInfo: ");
      sb.Append(SimpleCardInfo== null ? "<null>" : SimpleCardInfo.ToString());
      sb.Append(",TwoWay: ");
      sb.Append(TwoWay);
      sb.Append(",Intimacy: ");
      sb.Append(Intimacy);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
