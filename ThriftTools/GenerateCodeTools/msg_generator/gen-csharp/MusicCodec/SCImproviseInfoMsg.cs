/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  /// <summary>
  /// 即兴表演信息
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SCImproviseInfoMsg : TBase
  {
    private short _dailyLeftPlayCount;
    private int _randTaskId;
    private byte _finishStatus;
    private int _perfPrizeCoupon;
    private int _starLightLvlPrizeCoupon;
    private int _perfCoupon;

    /// <summary>
    /// 进入剩余完成次数
    /// </summary>
    public short DailyLeftPlayCount
    {
      get
      {
        return _dailyLeftPlayCount;
      }
      set
      {
        __isset.dailyLeftPlayCount = true;
        this._dailyLeftPlayCount = value;
      }
    }

    /// <summary>
    /// 随机任务id, 为0表示还未领取
    /// </summary>
    public int RandTaskId
    {
      get
      {
        return _randTaskId;
      }
      set
      {
        __isset.randTaskId = true;
        this._randTaskId = value;
      }
    }

    /// <summary>
    /// 完成状态0-未完成 1-已完成
    /// </summary>
    public byte FinishStatus
    {
      get
      {
        return _finishStatus;
      }
      set
      {
        __isset.finishStatus = true;
        this._finishStatus = value;
      }
    }

    /// <summary>
    /// 演出奖励
    /// </summary>
    public int PerfPrizeCoupon
    {
      get
      {
        return _perfPrizeCoupon;
      }
      set
      {
        __isset.perfPrizeCoupon = true;
        this._perfPrizeCoupon = value;
      }
    }

    /// <summary>
    /// 星光等级奖励
    /// </summary>
    public int StarLightLvlPrizeCoupon
    {
      get
      {
        return _starLightLvlPrizeCoupon;
      }
      set
      {
        __isset.starLightLvlPrizeCoupon = true;
        this._starLightLvlPrizeCoupon = value;
      }
    }

    /// <summary>
    /// 当前演出券
    /// </summary>
    public int PerfCoupon
    {
      get
      {
        return _perfCoupon;
      }
      set
      {
        __isset.perfCoupon = true;
        this._perfCoupon = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool dailyLeftPlayCount;
      public bool randTaskId;
      public bool finishStatus;
      public bool perfPrizeCoupon;
      public bool starLightLvlPrizeCoupon;
      public bool perfCoupon;
    }

    public SCImproviseInfoMsg() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I16) {
              DailyLeftPlayCount = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              RandTaskId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Byte) {
              FinishStatus = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              PerfPrizeCoupon = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              StarLightLvlPrizeCoupon = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              PerfCoupon = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
ClientLog.Instance.LogError("This function is deleted.");
}

    


  }

}
