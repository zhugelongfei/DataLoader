/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  /// <summary>
  /// 婚礼动态祝福新婚夫妻成功
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SCDynamicWeddingBlessSucc : TBase
  {
    private long _bridegroomId;
    private long _brideId;
    private int _blessVal;

    /// <summary>
    /// 新郎角色id
    /// </summary>
    public long BridegroomId
    {
      get
      {
        return _bridegroomId;
      }
      set
      {
        __isset.bridegroomId = true;
        this._bridegroomId = value;
      }
    }

    /// <summary>
    /// 新娘角色id
    /// </summary>
    public long BrideId
    {
      get
      {
        return _brideId;
      }
      set
      {
        __isset.brideId = true;
        this._brideId = value;
      }
    }

    /// <summary>
    /// 当前祝福值
    /// </summary>
    public int BlessVal
    {
      get
      {
        return _blessVal;
      }
      set
      {
        __isset.blessVal = true;
        this._blessVal = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool bridegroomId;
      public bool brideId;
      public bool blessVal;
    }

    public SCDynamicWeddingBlessSucc() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              BridegroomId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I64) {
              BrideId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              BlessVal = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
ClientLog.Instance.LogError("This function is deleted.");
}

    


  }

}
