/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SCJoinDanceRoomMsg : TBase
  {
    private string _passwd;
    private byte _mode;
    private byte _songLvl;
    private short _songId;
    private List<MusicCodec.RoomMemberInfo> _members;
    private bool _quickStart;
    private int _roomId;
    private long _leaderCharId;
    private bool _vip;
    private bool _watch;
    private MusicCodec.RoomChannel _channel;
    private short _maxMemberSize;
    private int _waitingScene;
    private MusicCodec.CreateRoomType _roomType;
    private int _startingScene;
    private short _chapterId;
    private short _raidId;
    private string _roomTitle;
    private MusicCodec.SCRefreshSpring _showSpringInfo;
    private int _wedBlessVal;
    private int _weddingvalidTime;
    private bool _weddingFinish;
    private MusicCodec.SCUpdateAnnounceInfos _updateAnnounceInfos;
    private byte _weddingStep;
    private long _brideID;
    private long _bridegroomID;

    public string Passwd
    {
      get
      {
        return _passwd;
      }
      set
      {
        __isset.passwd = true;
        this._passwd = value;
      }
    }

    public byte Mode
    {
      get
      {
        return _mode;
      }
      set
      {
        __isset.mode = true;
        this._mode = value;
      }
    }

    public byte SongLvl
    {
      get
      {
        return _songLvl;
      }
      set
      {
        __isset.songLvl = true;
        this._songLvl = value;
      }
    }

    public short SongId
    {
      get
      {
        return _songId;
      }
      set
      {
        __isset.songId = true;
        this._songId = value;
      }
    }

    public List<MusicCodec.RoomMemberInfo> Members
    {
      get
      {
        return _members;
      }
      set
      {
        __isset.members = true;
        this._members = value;
      }
    }

    public bool QuickStart
    {
      get
      {
        return _quickStart;
      }
      set
      {
        __isset.quickStart = true;
        this._quickStart = value;
      }
    }

    public int RoomId
    {
      get
      {
        return _roomId;
      }
      set
      {
        __isset.roomId = true;
        this._roomId = value;
      }
    }

    public long LeaderCharId
    {
      get
      {
        return _leaderCharId;
      }
      set
      {
        __isset.leaderCharId = true;
        this._leaderCharId = value;
      }
    }

    public bool Vip
    {
      get
      {
        return _vip;
      }
      set
      {
        __isset.vip = true;
        this._vip = value;
      }
    }

    public bool Watch
    {
      get
      {
        return _watch;
      }
      set
      {
        __isset.watch = true;
        this._watch = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="MusicCodec.RoomChannel"/>
    /// </summary>
    public MusicCodec.RoomChannel Channel
    {
      get
      {
        return _channel;
      }
      set
      {
        __isset.channel = true;
        this._channel = value;
      }
    }

    public short MaxMemberSize
    {
      get
      {
        return _maxMemberSize;
      }
      set
      {
        __isset.maxMemberSize = true;
        this._maxMemberSize = value;
      }
    }

    /// <summary>
    /// 等待场景
    /// </summary>
    public int WaitingScene
    {
      get
      {
        return _waitingScene;
      }
      set
      {
        __isset.waitingScene = true;
        this._waitingScene = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="MusicCodec.CreateRoomType"/>
    /// </summary>
    public MusicCodec.CreateRoomType RoomType
    {
      get
      {
        return _roomType;
      }
      set
      {
        __isset.roomType = true;
        this._roomType = value;
      }
    }

    /// <summary>
    /// 开始场景
    /// </summary>
    public int StartingScene
    {
      get
      {
        return _startingScene;
      }
      set
      {
        __isset.startingScene = true;
        this._startingScene = value;
      }
    }

    public short ChapterId
    {
      get
      {
        return _chapterId;
      }
      set
      {
        __isset.chapterId = true;
        this._chapterId = value;
      }
    }

    public short RaidId
    {
      get
      {
        return _raidId;
      }
      set
      {
        __isset.raidId = true;
        this._raidId = value;
      }
    }

    /// <summary>
    /// 房间名
    /// </summary>
    public string RoomTitle
    {
      get
      {
        return _roomTitle;
      }
      set
      {
        __isset.roomTitle = true;
        this._roomTitle = value;
      }
    }

    /// <summary>
    /// 刷新出的泉眼
    /// </summary>
    public MusicCodec.SCRefreshSpring ShowSpringInfo
    {
      get
      {
        return _showSpringInfo;
      }
      set
      {
        __isset.showSpringInfo = true;
        this._showSpringInfo = value;
      }
    }

    /// <summary>
    /// 当前婚礼祝福值
    /// </summary>
    public int WedBlessVal
    {
      get
      {
        return _wedBlessVal;
      }
      set
      {
        __isset.wedBlessVal = true;
        this._wedBlessVal = value;
      }
    }

    /// <summary>
    /// 当前婚礼截止时间(/1000)
    /// </summary>
    public int WeddingvalidTime
    {
      get
      {
        return _weddingvalidTime;
      }
      set
      {
        __isset.weddingvalidTime = true;
        this._weddingvalidTime = value;
      }
    }

    /// <summary>
    /// 婚礼是否完成
    /// </summary>
    public bool WeddingFinish
    {
      get
      {
        return _weddingFinish;
      }
      set
      {
        __isset.weddingFinish = true;
        this._weddingFinish = value;
      }
    }

    /// <summary>
    /// 通告信息更新
    /// </summary>
    public MusicCodec.SCUpdateAnnounceInfos UpdateAnnounceInfos
    {
      get
      {
        return _updateAnnounceInfos;
      }
      set
      {
        __isset.updateAnnounceInfos = true;
        this._updateAnnounceInfos = value;
      }
    }

    /// <summary>
    /// 当前婚礼步骤
    /// </summary>
    public byte WeddingStep
    {
      get
      {
        return _weddingStep;
      }
      set
      {
        __isset.weddingStep = true;
        this._weddingStep = value;
      }
    }

    /// <summary>
    /// 婚礼新娘ID
    /// </summary>
    public long BrideID
    {
      get
      {
        return _brideID;
      }
      set
      {
        __isset.brideID = true;
        this._brideID = value;
      }
    }

    /// <summary>
    /// 婚礼新郎ID
    /// </summary>
    public long BridegroomID
    {
      get
      {
        return _bridegroomID;
      }
      set
      {
        __isset.bridegroomID = true;
        this._bridegroomID = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool passwd;
      public bool mode;
      public bool songLvl;
      public bool songId;
      public bool members;
      public bool quickStart;
      public bool roomId;
      public bool leaderCharId;
      public bool vip;
      public bool watch;
      public bool channel;
      public bool maxMemberSize;
      public bool waitingScene;
      public bool roomType;
      public bool startingScene;
      public bool chapterId;
      public bool raidId;
      public bool roomTitle;
      public bool showSpringInfo;
      public bool wedBlessVal;
      public bool weddingvalidTime;
      public bool weddingFinish;
      public bool updateAnnounceInfos;
      public bool weddingStep;
      public bool brideID;
      public bool bridegroomID;
    }

    public SCJoinDanceRoomMsg() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Passwd = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Byte) {
              Mode = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Byte) {
              SongLvl = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I16) {
              SongId = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.List) {
              {
                Members = new List<MusicCodec.RoomMemberInfo>();
                TList _list4 = iprot.ReadListBegin();
                for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                {
                  MusicCodec.RoomMemberInfo _elem6 = new MusicCodec.RoomMemberInfo();
                  _elem6 = new MusicCodec.RoomMemberInfo();
                  _elem6.Read(iprot);
                  Members.Add(_elem6);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Bool) {
              QuickStart = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              RoomId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I64) {
              LeaderCharId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.Bool) {
              Vip = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.Bool) {
              Watch = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I32) {
              Channel = (MusicCodec.RoomChannel)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.I16) {
              MaxMemberSize = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.I32) {
              WaitingScene = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.I32) {
              RoomType = (MusicCodec.CreateRoomType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.I32) {
              StartingScene = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 16:
            if (field.Type == TType.I16) {
              ChapterId = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 18:
            if (field.Type == TType.I16) {
              RaidId = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 19:
            if (field.Type == TType.String) {
              RoomTitle = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.Struct) {
              ShowSpringInfo = new MusicCodec.SCRefreshSpring();
              ShowSpringInfo.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 21:
            if (field.Type == TType.I32) {
              WedBlessVal = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 22:
            if (field.Type == TType.I32) {
              WeddingvalidTime = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 23:
            if (field.Type == TType.Bool) {
              WeddingFinish = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 24:
            if (field.Type == TType.Struct) {
              UpdateAnnounceInfos = new MusicCodec.SCUpdateAnnounceInfos();
              UpdateAnnounceInfos.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 25:
            if (field.Type == TType.Byte) {
              WeddingStep = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 26:
            if (field.Type == TType.I64) {
              BrideID = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 27:
            if (field.Type == TType.I64) {
              BridegroomID = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
ClientLog.Instance.LogError("This function is deleted.");
}

    


  }

}
