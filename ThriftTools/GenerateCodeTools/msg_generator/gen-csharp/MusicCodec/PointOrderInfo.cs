/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class PointOrderInfo : TBase
  {
    private long _orderId;
    private int _costPoint;
    private long _createTime;
    private short _status;

    public long OrderId
    {
      get
      {
        return _orderId;
      }
      set
      {
        __isset.orderId = true;
        this._orderId = value;
      }
    }

    public int CostPoint
    {
      get
      {
        return _costPoint;
      }
      set
      {
        __isset.costPoint = true;
        this._costPoint = value;
      }
    }

    public long CreateTime
    {
      get
      {
        return _createTime;
      }
      set
      {
        __isset.createTime = true;
        this._createTime = value;
      }
    }

    public short Status
    {
      get
      {
        return _status;
      }
      set
      {
        __isset.status = true;
        this._status = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool orderId;
      public bool costPoint;
      public bool createTime;
      public bool status;
    }

    public PointOrderInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              OrderId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              CostPoint = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              CreateTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I16) {
              Status = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("PointOrderInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.orderId) {
        field.Name = "orderId";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(OrderId);
        oprot.WriteFieldEnd();
      }
      if (__isset.costPoint) {
        field.Name = "costPoint";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(CostPoint);
        oprot.WriteFieldEnd();
      }
      if (__isset.createTime) {
        field.Name = "createTime";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CreateTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.status) {
        field.Name = "status";
        field.Type = TType.I16;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(Status);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("PointOrderInfo(");
      sb.Append("OrderId: ");
      sb.Append(OrderId);
      sb.Append(",CostPoint: ");
      sb.Append(CostPoint);
      sb.Append(",CreateTime: ");
      sb.Append(CreateTime);
      sb.Append(",Status: ");
      sb.Append(Status);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
