/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SCDanceInputStatusMsg : TBase
  {
    private Dictionary<long, byte> _statusMap;

    /// <summary>
    /// 1:all combo 2:all perfect combo
    /// </summary>
    public Dictionary<long, byte> StatusMap
    {
      get
      {
        return _statusMap;
      }
      set
      {
        __isset.statusMap = true;
        this._statusMap = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool statusMap;
    }

    public SCDanceInputStatusMsg() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Map) {
              {
                StatusMap = new Dictionary<long, byte>();
                TMap _map52 = iprot.ReadMapBegin();
                for( int _i53 = 0; _i53 < _map52.Count; ++_i53)
                {
                  long _key54;
                  byte _val55;
                  _key54 = iprot.ReadI64();
                  _val55 = iprot.ReadByte();
                  StatusMap[_key54] = _val55;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
ClientLog.Instance.LogError("This function is deleted.");
}

    


  }

}
