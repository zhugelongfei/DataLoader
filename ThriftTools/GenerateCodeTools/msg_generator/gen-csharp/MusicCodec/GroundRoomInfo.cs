/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  /// <summary>
  /// 广场房间信息
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class GroundRoomInfo : TBase
  {
    private byte _lockState;
    private int _roomId;
    private string _title;
    private PlayerBaseInfo _leaderBaseInfo;
    private byte _curMaleCount;
    private byte _curFemaleCount;
    private byte _maxMemeberCount;
    private bool _isStick;

    /// <summary>
    /// 0-无密码 1-有密码
    /// </summary>
    public byte LockState
    {
      get
      {
        return _lockState;
      }
      set
      {
        __isset.lockState = true;
        this._lockState = value;
      }
    }

    public int RoomId
    {
      get
      {
        return _roomId;
      }
      set
      {
        __isset.roomId = true;
        this._roomId = value;
      }
    }

    public string Title
    {
      get
      {
        return _title;
      }
      set
      {
        __isset.title = true;
        this._title = value;
      }
    }

    public PlayerBaseInfo LeaderBaseInfo
    {
      get
      {
        return _leaderBaseInfo;
      }
      set
      {
        __isset.leaderBaseInfo = true;
        this._leaderBaseInfo = value;
      }
    }

    public byte CurMaleCount
    {
      get
      {
        return _curMaleCount;
      }
      set
      {
        __isset.curMaleCount = true;
        this._curMaleCount = value;
      }
    }

    public byte CurFemaleCount
    {
      get
      {
        return _curFemaleCount;
      }
      set
      {
        __isset.curFemaleCount = true;
        this._curFemaleCount = value;
      }
    }

    public byte MaxMemeberCount
    {
      get
      {
        return _maxMemeberCount;
      }
      set
      {
        __isset.maxMemeberCount = true;
        this._maxMemeberCount = value;
      }
    }

    public bool IsStick
    {
      get
      {
        return _isStick;
      }
      set
      {
        __isset.isStick = true;
        this._isStick = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool lockState;
      public bool roomId;
      public bool title;
      public bool leaderBaseInfo;
      public bool curMaleCount;
      public bool curFemaleCount;
      public bool maxMemeberCount;
      public bool isStick;
    }

    public GroundRoomInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Byte) {
              LockState = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              RoomId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Title = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Struct) {
              LeaderBaseInfo = new PlayerBaseInfo();
              LeaderBaseInfo.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Byte) {
              CurMaleCount = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Byte) {
              CurFemaleCount = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Byte) {
              MaxMemeberCount = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Bool) {
              IsStick = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("GroundRoomInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.lockState) {
        field.Name = "lockState";
        field.Type = TType.Byte;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(LockState);
        oprot.WriteFieldEnd();
      }
      if (__isset.roomId) {
        field.Name = "roomId";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(RoomId);
        oprot.WriteFieldEnd();
      }
      if (Title != null && __isset.title) {
        field.Name = "title";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Title);
        oprot.WriteFieldEnd();
      }
      if (LeaderBaseInfo != null && __isset.leaderBaseInfo) {
        field.Name = "leaderBaseInfo";
        field.Type = TType.Struct;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        LeaderBaseInfo.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.curMaleCount) {
        field.Name = "curMaleCount";
        field.Type = TType.Byte;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(CurMaleCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.curFemaleCount) {
        field.Name = "curFemaleCount";
        field.Type = TType.Byte;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(CurFemaleCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.maxMemeberCount) {
        field.Name = "maxMemeberCount";
        field.Type = TType.Byte;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(MaxMemeberCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.isStick) {
        field.Name = "isStick";
        field.Type = TType.Bool;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsStick);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("GroundRoomInfo(");
      sb.Append("LockState: ");
      sb.Append(LockState);
      sb.Append(",RoomId: ");
      sb.Append(RoomId);
      sb.Append(",Title: ");
      sb.Append(Title);
      sb.Append(",LeaderBaseInfo: ");
      sb.Append(LeaderBaseInfo== null ? "<null>" : LeaderBaseInfo.ToString());
      sb.Append(",CurMaleCount: ");
      sb.Append(CurMaleCount);
      sb.Append(",CurFemaleCount: ");
      sb.Append(CurFemaleCount);
      sb.Append(",MaxMemeberCount: ");
      sb.Append(MaxMemeberCount);
      sb.Append(",IsStick: ");
      sb.Append(IsStick);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
