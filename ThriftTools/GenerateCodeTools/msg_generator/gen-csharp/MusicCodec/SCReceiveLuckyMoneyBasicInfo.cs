/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  /// <summary>
  /// 我收到红包的基本信息
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SCReceiveLuckyMoneyBasicInfo : TBase
  {
    private int _totalAmount;
    private int _totalNumber;
    private short _startIndex;
    private List<ReceiveLuckyMoneyBasicInfo> _basicInfo;

    /// <summary>
    /// 收到红包的总数额
    /// </summary>
    public int TotalAmount
    {
      get
      {
        return _totalAmount;
      }
      set
      {
        __isset.totalAmount = true;
        this._totalAmount = value;
      }
    }

    /// <summary>
    /// 红包总个数
    /// </summary>
    public int TotalNumber
    {
      get
      {
        return _totalNumber;
      }
      set
      {
        __isset.totalNumber = true;
        this._totalNumber = value;
      }
    }

    /// <summary>
    /// 当前索引
    /// </summary>
    public short StartIndex
    {
      get
      {
        return _startIndex;
      }
      set
      {
        __isset.startIndex = true;
        this._startIndex = value;
      }
    }

    /// <summary>
    /// 收到红包的基本信息
    /// </summary>
    public List<ReceiveLuckyMoneyBasicInfo> BasicInfo
    {
      get
      {
        return _basicInfo;
      }
      set
      {
        __isset.basicInfo = true;
        this._basicInfo = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool totalAmount;
      public bool totalNumber;
      public bool startIndex;
      public bool basicInfo;
    }

    public SCReceiveLuckyMoneyBasicInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              TotalAmount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              TotalNumber = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I16) {
              StartIndex = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.List) {
              {
                BasicInfo = new List<ReceiveLuckyMoneyBasicInfo>();
                TList _list8 = iprot.ReadListBegin();
                for( int _i9 = 0; _i9 < _list8.Count; ++_i9)
                {
                  ReceiveLuckyMoneyBasicInfo _elem10 = new ReceiveLuckyMoneyBasicInfo();
                  _elem10 = new ReceiveLuckyMoneyBasicInfo();
                  _elem10.Read(iprot);
                  BasicInfo.Add(_elem10);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
ClientLog.Instance.LogError("This function is deleted.");
}

    


  }

}
