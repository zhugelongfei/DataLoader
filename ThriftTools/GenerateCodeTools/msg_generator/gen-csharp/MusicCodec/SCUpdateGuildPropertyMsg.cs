/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SCUpdateGuildPropertyMsg : TBase
  {
    private int _donateValue;
    private MusicCodec.GuildDegree _degree;
    private int _guildGold;
    private int _lastSignInTime;
    private int _memHonor;
    private int _signDays;
    private bool _hasSigned;
    private int _weekContribution;
    private int _donateTimes;

    public int DonateValue
    {
      get
      {
        return _donateValue;
      }
      set
      {
        __isset.donateValue = true;
        this._donateValue = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="MusicCodec.GuildDegree"/>
    /// </summary>
    public MusicCodec.GuildDegree Degree
    {
      get
      {
        return _degree;
      }
      set
      {
        __isset.degree = true;
        this._degree = value;
      }
    }

    public int GuildGold
    {
      get
      {
        return _guildGold;
      }
      set
      {
        __isset.guildGold = true;
        this._guildGold = value;
      }
    }

    public int LastSignInTime
    {
      get
      {
        return _lastSignInTime;
      }
      set
      {
        __isset.lastSignInTime = true;
        this._lastSignInTime = value;
      }
    }

    public int MemHonor
    {
      get
      {
        return _memHonor;
      }
      set
      {
        __isset.memHonor = true;
        this._memHonor = value;
      }
    }

    public int SignDays
    {
      get
      {
        return _signDays;
      }
      set
      {
        __isset.signDays = true;
        this._signDays = value;
      }
    }

    public bool HasSigned
    {
      get
      {
        return _hasSigned;
      }
      set
      {
        __isset.hasSigned = true;
        this._hasSigned = value;
      }
    }

    public int WeekContribution
    {
      get
      {
        return _weekContribution;
      }
      set
      {
        __isset.weekContribution = true;
        this._weekContribution = value;
      }
    }

    public int DonateTimes
    {
      get
      {
        return _donateTimes;
      }
      set
      {
        __isset.donateTimes = true;
        this._donateTimes = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool donateValue;
      public bool degree;
      public bool guildGold;
      public bool lastSignInTime;
      public bool memHonor;
      public bool signDays;
      public bool hasSigned;
      public bool weekContribution;
      public bool donateTimes;
    }

    public SCUpdateGuildPropertyMsg() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              DonateValue = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Degree = (MusicCodec.GuildDegree)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              GuildGold = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              LastSignInTime = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              MemHonor = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              SignDays = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Bool) {
              HasSigned = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              WeekContribution = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I32) {
              DonateTimes = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
ClientLog.Instance.LogError("This function is deleted.");
}

    


  }

}
