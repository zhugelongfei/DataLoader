/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  /// <summary>
  /// 活动详情
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ActivityDetailInfo : TBase
  {
    private int _activityId;
    private string _activityTitle;
    private string _timeDesc;
    private string _content;
    private int _uiType;
    private string _uiPackage;
    private List<ActivityTargetInfo> _targetInfos;

    public int ActivityId
    {
      get
      {
        return _activityId;
      }
      set
      {
        __isset.activityId = true;
        this._activityId = value;
      }
    }

    /// <summary>
    /// 标题
    /// </summary>
    public string ActivityTitle
    {
      get
      {
        return _activityTitle;
      }
      set
      {
        __isset.activityTitle = true;
        this._activityTitle = value;
      }
    }

    /// <summary>
    /// 时间描述
    /// </summary>
    public string TimeDesc
    {
      get
      {
        return _timeDesc;
      }
      set
      {
        __isset.timeDesc = true;
        this._timeDesc = value;
      }
    }

    /// <summary>
    /// 内容说明
    /// </summary>
    public string Content
    {
      get
      {
        return _content;
      }
      set
      {
        __isset.content = true;
        this._content = value;
      }
    }

    /// <summary>
    /// ui类型
    /// </summary>
    public int UiType
    {
      get
      {
        return _uiType;
      }
      set
      {
        __isset.uiType = true;
        this._uiType = value;
      }
    }

    /// <summary>
    /// 使用其他UIPackage显示的活动
    /// </summary>
    public string UiPackage
    {
      get
      {
        return _uiPackage;
      }
      set
      {
        __isset.uiPackage = true;
        this._uiPackage = value;
      }
    }

    /// <summary>
    /// 活动目标列表信息
    /// </summary>
    public List<ActivityTargetInfo> TargetInfos
    {
      get
      {
        return _targetInfos;
      }
      set
      {
        __isset.targetInfos = true;
        this._targetInfos = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool activityId;
      public bool activityTitle;
      public bool timeDesc;
      public bool content;
      public bool uiType;
      public bool uiPackage;
      public bool targetInfos;
    }

    public ActivityDetailInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              ActivityId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              ActivityTitle = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              TimeDesc = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Content = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              UiType = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              UiPackage = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.List) {
              {
                TargetInfos = new List<ActivityTargetInfo>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  ActivityTargetInfo _elem2 = new ActivityTargetInfo();
                  _elem2 = new ActivityTargetInfo();
                  _elem2.Read(iprot);
                  TargetInfos.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ActivityDetailInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.activityId) {
        field.Name = "activityId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ActivityId);
        oprot.WriteFieldEnd();
      }
      if (ActivityTitle != null && __isset.activityTitle) {
        field.Name = "activityTitle";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ActivityTitle);
        oprot.WriteFieldEnd();
      }
      if (TimeDesc != null && __isset.timeDesc) {
        field.Name = "timeDesc";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(TimeDesc);
        oprot.WriteFieldEnd();
      }
      if (Content != null && __isset.content) {
        field.Name = "content";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Content);
        oprot.WriteFieldEnd();
      }
      if (__isset.uiType) {
        field.Name = "uiType";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(UiType);
        oprot.WriteFieldEnd();
      }
      if (UiPackage != null && __isset.uiPackage) {
        field.Name = "uiPackage";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(UiPackage);
        oprot.WriteFieldEnd();
      }
      if (TargetInfos != null && __isset.targetInfos) {
        field.Name = "targetInfos";
        field.Type = TType.List;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, TargetInfos.Count));
          foreach (ActivityTargetInfo _iter3 in TargetInfos)
          {
            _iter3.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ActivityDetailInfo(");
      sb.Append("ActivityId: ");
      sb.Append(ActivityId);
      sb.Append(",ActivityTitle: ");
      sb.Append(ActivityTitle);
      sb.Append(",TimeDesc: ");
      sb.Append(TimeDesc);
      sb.Append(",Content: ");
      sb.Append(Content);
      sb.Append(",UiType: ");
      sb.Append(UiType);
      sb.Append(",UiPackage: ");
      sb.Append(UiPackage);
      sb.Append(",TargetInfos: ");
      sb.Append(TargetInfos);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
