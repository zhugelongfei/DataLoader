/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class BuyItemInfos : TBase
  {
    private List<BuyItemInfo> _items;
    private List<MoneyPrize> _moneyPrizeList;

    public List<BuyItemInfo> Items
    {
      get
      {
        return _items;
      }
      set
      {
        __isset.items = true;
        this._items = value;
      }
    }

    public List<MoneyPrize> MoneyPrizeList
    {
      get
      {
        return _moneyPrizeList;
      }
      set
      {
        __isset.moneyPrizeList = true;
        this._moneyPrizeList = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool items;
      public bool moneyPrizeList;
    }

    public BuyItemInfos() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                Items = new List<BuyItemInfo>();
                TList _list90 = iprot.ReadListBegin();
                for( int _i91 = 0; _i91 < _list90.Count; ++_i91)
                {
                  BuyItemInfo _elem92 = new BuyItemInfo();
                  _elem92 = new BuyItemInfo();
                  _elem92.Read(iprot);
                  Items.Add(_elem92);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                MoneyPrizeList = new List<MoneyPrize>();
                TList _list93 = iprot.ReadListBegin();
                for( int _i94 = 0; _i94 < _list93.Count; ++_i94)
                {
                  MoneyPrize _elem95 = new MoneyPrize();
                  _elem95 = new MoneyPrize();
                  _elem95.Read(iprot);
                  MoneyPrizeList.Add(_elem95);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("BuyItemInfos");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Items != null && __isset.items) {
        field.Name = "items";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Items.Count));
          foreach (BuyItemInfo _iter96 in Items)
          {
            _iter96.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (MoneyPrizeList != null && __isset.moneyPrizeList) {
        field.Name = "moneyPrizeList";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, MoneyPrizeList.Count));
          foreach (MoneyPrize _iter97 in MoneyPrizeList)
          {
            _iter97.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("BuyItemInfos(");
      sb.Append("Items: ");
      sb.Append(Items);
      sb.Append(",MoneyPrizeList: ");
      sb.Append(MoneyPrizeList);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
