/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class GameNotice : TBase
  {
    private string _pageUrl;
    private string _buttonName;
    private string _detailUrl;
    private string _name;

    public string PageUrl
    {
      get
      {
        return _pageUrl;
      }
      set
      {
        __isset.pageUrl = true;
        this._pageUrl = value;
      }
    }

    public string ButtonName
    {
      get
      {
        return _buttonName;
      }
      set
      {
        __isset.buttonName = true;
        this._buttonName = value;
      }
    }

    public string DetailUrl
    {
      get
      {
        return _detailUrl;
      }
      set
      {
        __isset.detailUrl = true;
        this._detailUrl = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool pageUrl;
      public bool buttonName;
      public bool detailUrl;
      public bool name;
    }

    public GameNotice() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              PageUrl = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              ButtonName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              DetailUrl = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("GameNotice");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (PageUrl != null && __isset.pageUrl) {
        field.Name = "pageUrl";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(PageUrl);
        oprot.WriteFieldEnd();
      }
      if (ButtonName != null && __isset.buttonName) {
        field.Name = "buttonName";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ButtonName);
        oprot.WriteFieldEnd();
      }
      if (DetailUrl != null && __isset.detailUrl) {
        field.Name = "detailUrl";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DetailUrl);
        oprot.WriteFieldEnd();
      }
      if (Name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("GameNotice(");
      sb.Append("PageUrl: ");
      sb.Append(PageUrl);
      sb.Append(",ButtonName: ");
      sb.Append(ButtonName);
      sb.Append(",DetailUrl: ");
      sb.Append(DetailUrl);
      sb.Append(",Name: ");
      sb.Append(Name);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
