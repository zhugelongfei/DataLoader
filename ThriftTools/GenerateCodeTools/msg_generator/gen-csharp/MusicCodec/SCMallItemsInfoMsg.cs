/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SCMallItemsInfoMsg : TBase
  {
    private byte _firstCategory;
    private byte _secondCategory;
    private byte _thirdCategory;
    private byte _sex;
    private byte _sortType;
    private MusicCodec.CommonDataPageInfos _mallItemPageInfos;
    private bool _isLimitMall;

    public byte FirstCategory
    {
      get
      {
        return _firstCategory;
      }
      set
      {
        __isset.firstCategory = true;
        this._firstCategory = value;
      }
    }

    public byte SecondCategory
    {
      get
      {
        return _secondCategory;
      }
      set
      {
        __isset.secondCategory = true;
        this._secondCategory = value;
      }
    }

    public byte ThirdCategory
    {
      get
      {
        return _thirdCategory;
      }
      set
      {
        __isset.thirdCategory = true;
        this._thirdCategory = value;
      }
    }

    public byte Sex
    {
      get
      {
        return _sex;
      }
      set
      {
        __isset.sex = true;
        this._sex = value;
      }
    }

    public byte SortType
    {
      get
      {
        return _sortType;
      }
      set
      {
        __isset.sortType = true;
        this._sortType = value;
      }
    }

    /// <summary>
    /// 商城物品分页信息
    /// </summary>
    public MusicCodec.CommonDataPageInfos MallItemPageInfos
    {
      get
      {
        return _mallItemPageInfos;
      }
      set
      {
        __isset.mallItemPageInfos = true;
        this._mallItemPageInfos = value;
      }
    }

    /// <summary>
    /// 是否限时商城
    /// </summary>
    public bool IsLimitMall
    {
      get
      {
        return _isLimitMall;
      }
      set
      {
        __isset.isLimitMall = true;
        this._isLimitMall = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool firstCategory;
      public bool secondCategory;
      public bool thirdCategory;
      public bool sex;
      public bool sortType;
      public bool mallItemPageInfos;
      public bool isLimitMall;
    }

    public SCMallItemsInfoMsg() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Byte) {
              FirstCategory = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Byte) {
              SecondCategory = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Byte) {
              ThirdCategory = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Byte) {
              Sex = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Byte) {
              SortType = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Struct) {
              MallItemPageInfos = new MusicCodec.CommonDataPageInfos();
              MallItemPageInfos.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Bool) {
              IsLimitMall = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
ClientLog.Instance.LogError("This function is deleted.");
}

    


  }

}
