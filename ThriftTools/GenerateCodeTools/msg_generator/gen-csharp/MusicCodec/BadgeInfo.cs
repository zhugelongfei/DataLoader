/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  /// <summary>
  /// 徽章信息
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class BadgeInfo : TBase
  {
    private short _position;
    private int _badgeId;
    private long _validTime;
    private bool _isNew;
    private bool _hasPutOn;
    private int _createTime;

    /// <summary>
    /// 位置
    /// </summary>
    public short Position
    {
      get
      {
        return _position;
      }
      set
      {
        __isset.position = true;
        this._position = value;
      }
    }

    /// <summary>
    /// 徽章id, 未佩戴为0, 表示徽章栏解锁
    /// </summary>
    public int BadgeId
    {
      get
      {
        return _badgeId;
      }
      set
      {
        __isset.badgeId = true;
        this._badgeId = value;
      }
    }

    /// <summary>
    /// 有效截止时间, 0为永久
    /// </summary>
    public long ValidTime
    {
      get
      {
        return _validTime;
      }
      set
      {
        __isset.validTime = true;
        this._validTime = value;
      }
    }

    /// <summary>
    /// 是否新获得
    /// </summary>
    public bool IsNew
    {
      get
      {
        return _isNew;
      }
      set
      {
        __isset.isNew = true;
        this._isNew = value;
      }
    }

    /// <summary>
    /// 是否穿戴过
    /// </summary>
    public bool HasPutOn
    {
      get
      {
        return _hasPutOn;
      }
      set
      {
        __isset.hasPutOn = true;
        this._hasPutOn = value;
      }
    }

    /// <summary>
    /// 徽章创建时间(s)
    /// </summary>
    public int CreateTime
    {
      get
      {
        return _createTime;
      }
      set
      {
        __isset.createTime = true;
        this._createTime = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool position;
      public bool badgeId;
      public bool validTime;
      public bool isNew;
      public bool hasPutOn;
      public bool createTime;
    }

    public BadgeInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I16) {
              Position = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              BadgeId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              ValidTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Bool) {
              IsNew = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Bool) {
              HasPutOn = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              CreateTime = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("BadgeInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.position) {
        field.Name = "position";
        field.Type = TType.I16;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(Position);
        oprot.WriteFieldEnd();
      }
      if (__isset.badgeId) {
        field.Name = "badgeId";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(BadgeId);
        oprot.WriteFieldEnd();
      }
      if (__isset.validTime) {
        field.Name = "validTime";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(ValidTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.isNew) {
        field.Name = "isNew";
        field.Type = TType.Bool;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsNew);
        oprot.WriteFieldEnd();
      }
      if (__isset.hasPutOn) {
        field.Name = "hasPutOn";
        field.Type = TType.Bool;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(HasPutOn);
        oprot.WriteFieldEnd();
      }
      if (__isset.createTime) {
        field.Name = "createTime";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(CreateTime);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("BadgeInfo(");
      sb.Append("Position: ");
      sb.Append(Position);
      sb.Append(",BadgeId: ");
      sb.Append(BadgeId);
      sb.Append(",ValidTime: ");
      sb.Append(ValidTime);
      sb.Append(",IsNew: ");
      sb.Append(IsNew);
      sb.Append(",HasPutOn: ");
      sb.Append(HasPutOn);
      sb.Append(",CreateTime: ");
      sb.Append(CreateTime);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
