/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SimplePartnerInfo : TBase
  {
    private long _charId;
    private short _startActionId;
    private List<short> _finishActionIds;

    public long CharId
    {
      get
      {
        return _charId;
      }
      set
      {
        __isset.charId = true;
        this._charId = value;
      }
    }

    public short StartActionId
    {
      get
      {
        return _startActionId;
      }
      set
      {
        __isset.startActionId = true;
        this._startActionId = value;
      }
    }

    public List<short> FinishActionIds
    {
      get
      {
        return _finishActionIds;
      }
      set
      {
        __isset.finishActionIds = true;
        this._finishActionIds = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool charId;
      public bool startActionId;
      public bool finishActionIds;
    }

    public SimplePartnerInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              CharId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I16) {
              StartActionId = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                FinishActionIds = new List<short>();
                TList _list29 = iprot.ReadListBegin();
                for( int _i30 = 0; _i30 < _list29.Count; ++_i30)
                {
                  short _elem31 = 0;
                  _elem31 = iprot.ReadI16();
                  FinishActionIds.Add(_elem31);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("SimplePartnerInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.charId) {
        field.Name = "charId";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CharId);
        oprot.WriteFieldEnd();
      }
      if (__isset.startActionId) {
        field.Name = "startActionId";
        field.Type = TType.I16;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(StartActionId);
        oprot.WriteFieldEnd();
      }
      if (FinishActionIds != null && __isset.finishActionIds) {
        field.Name = "finishActionIds";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I16, FinishActionIds.Count));
          foreach (short _iter32 in FinishActionIds)
          {
            oprot.WriteI16(_iter32);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("SimplePartnerInfo(");
      sb.Append("CharId: ");
      sb.Append(CharId);
      sb.Append(",StartActionId: ");
      sb.Append(StartActionId);
      sb.Append(",FinishActionIds: ");
      sb.Append(FinishActionIds);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
