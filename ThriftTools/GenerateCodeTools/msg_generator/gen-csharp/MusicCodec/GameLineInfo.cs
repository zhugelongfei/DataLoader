/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  /// <summary>
  /// 游戏线信息
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class GameLineInfo : TBase
  {
    private string _serverId;
    private string _serverName;
    private GameLineStatusType _status;
    private byte _onlineRatio;

    /// <summary>
    /// 游戏线id
    /// </summary>
    public string ServerId
    {
      get
      {
        return _serverId;
      }
      set
      {
        __isset.serverId = true;
        this._serverId = value;
      }
    }

    /// <summary>
    /// 游戏线名称
    /// </summary>
    public string ServerName
    {
      get
      {
        return _serverName;
      }
      set
      {
        __isset.serverName = true;
        this._serverName = value;
      }
    }

    /// <summary>
    /// 游戏线状态
    /// 
    /// <seealso cref="GameLineStatusType"/>
    /// </summary>
    public GameLineStatusType Status
    {
      get
      {
        return _status;
      }
      set
      {
        __isset.status = true;
        this._status = value;
      }
    }

    /// <summary>
    /// 在线占上限比例(0-100)
    /// </summary>
    public byte OnlineRatio
    {
      get
      {
        return _onlineRatio;
      }
      set
      {
        __isset.onlineRatio = true;
        this._onlineRatio = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool serverId;
      public bool serverName;
      public bool status;
      public bool onlineRatio;
    }

    public GameLineInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              ServerId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              ServerName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Status = (GameLineStatusType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Byte) {
              OnlineRatio = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("GameLineInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (ServerId != null && __isset.serverId) {
        field.Name = "serverId";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ServerId);
        oprot.WriteFieldEnd();
      }
      if (ServerName != null && __isset.serverName) {
        field.Name = "serverName";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ServerName);
        oprot.WriteFieldEnd();
      }
      if (__isset.status) {
        field.Name = "status";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)Status);
        oprot.WriteFieldEnd();
      }
      if (__isset.onlineRatio) {
        field.Name = "onlineRatio";
        field.Type = TType.Byte;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(OnlineRatio);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("GameLineInfo(");
      sb.Append("ServerId: ");
      sb.Append(ServerId);
      sb.Append(",ServerName: ");
      sb.Append(ServerName);
      sb.Append(",Status: ");
      sb.Append(Status);
      sb.Append(",OnlineRatio: ");
      sb.Append(OnlineRatio);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
