/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  /// <summary>
  /// 客户端在login_gate验证通过后，凭返回的gameSession到游戏服验证登录
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CSTokenLoginMsg : TBase
  {
    private string _deviceId;
    private string _macId;
    private string _deviceType;
    private string _deviceVersion;
    private string _devicePlatform;
    private string _deviceModel;
    private string _version;
    private string _appChannel;
    private string _channelName;
    private string _channelPlatform;
    private string _channelUdid;
    private string _gameSession;
    private bool _isReconnect;
    private string _gsId;
    private string _networkIsp;
    private string _networkType;
    private int _deviceHeight;
    private int _deviceWidth;
    private short _rootMark;
    private string _sdkVersion;
    private string _cpid;

    /// <summary>
    /// 设备uuid
    /// </summary>
    public string DeviceId
    {
      get
      {
        return _deviceId;
      }
      set
      {
        __isset.deviceId = true;
        this._deviceId = value;
      }
    }

    public string MacId
    {
      get
      {
        return _macId;
      }
      set
      {
        __isset.macId = true;
        this._macId = value;
      }
    }

    public string DeviceType
    {
      get
      {
        return _deviceType;
      }
      set
      {
        __isset.deviceType = true;
        this._deviceType = value;
      }
    }

    public string DeviceVersion
    {
      get
      {
        return _deviceVersion;
      }
      set
      {
        __isset.deviceVersion = true;
        this._deviceVersion = value;
      }
    }

    /// <summary>
    /// 设备平台
    /// </summary>
    public string DevicePlatform
    {
      get
      {
        return _devicePlatform;
      }
      set
      {
        __isset.devicePlatform = true;
        this._devicePlatform = value;
      }
    }

    /// <summary>
    /// 设备型号
    /// </summary>
    public string DeviceModel
    {
      get
      {
        return _deviceModel;
      }
      set
      {
        __isset.deviceModel = true;
        this._deviceModel = value;
      }
    }

    /// <summary>
    /// 客户端版本号
    /// </summary>
    public string Version
    {
      get
      {
        return _version;
      }
      set
      {
        __isset.version = true;
        this._version = value;
      }
    }

    /// <summary>
    /// 运营渠道
    /// </summary>
    public string AppChannel
    {
      get
      {
        return _appChannel;
      }
      set
      {
        __isset.appChannel = true;
        this._appChannel = value;
      }
    }

    /// <summary>
    /// 登录渠道
    /// </summary>
    public string ChannelName
    {
      get
      {
        return _channelName;
      }
      set
      {
        __isset.channelName = true;
        this._channelName = value;
      }
    }

    /// <summary>
    /// 渠道sdk获得的平台
    /// </summary>
    public string ChannelPlatform
    {
      get
      {
        return _channelPlatform;
      }
      set
      {
        __isset.channelPlatform = true;
        this._channelPlatform = value;
      }
    }

    /// <summary>
    /// 玩家登录的移动设备号，通过UniSDK提供的接口获取
    /// </summary>
    public string ChannelUdid
    {
      get
      {
        return _channelUdid;
      }
      set
      {
        __isset.channelUdid = true;
        this._channelUdid = value;
      }
    }

    /// <summary>
    /// 游戏自己维护的session
    /// </summary>
    public string GameSession
    {
      get
      {
        return _gameSession;
      }
      set
      {
        __isset.gameSession = true;
        this._gameSession = value;
      }
    }

    /// <summary>
    /// 是否断线重连
    /// </summary>
    public bool IsReconnect
    {
      get
      {
        return _isReconnect;
      }
      set
      {
        __isset.isReconnect = true;
        this._isReconnect = value;
      }
    }

    /// <summary>
    /// 登录的游戏服id
    /// </summary>
    public string GsId
    {
      get
      {
        return _gsId;
      }
      set
      {
        __isset.gsId = true;
        this._gsId = value;
      }
    }

    /// <summary>
    /// 网络运营商
    /// </summary>
    public string NetworkIsp
    {
      get
      {
        return _networkIsp;
      }
      set
      {
        __isset.networkIsp = true;
        this._networkIsp = value;
      }
    }

    /// <summary>
    /// 网络类型
    /// </summary>
    public string NetworkType
    {
      get
      {
        return _networkType;
      }
      set
      {
        __isset.networkType = true;
        this._networkType = value;
      }
    }

    public int DeviceHeight
    {
      get
      {
        return _deviceHeight;
      }
      set
      {
        __isset.deviceHeight = true;
        this._deviceHeight = value;
      }
    }

    public int DeviceWidth
    {
      get
      {
        return _deviceWidth;
      }
      set
      {
        __isset.deviceWidth = true;
        this._deviceWidth = value;
      }
    }

    /// <summary>
    /// root 越狱标记 0为非越狱(安卓root),1为越狱(安卓rootroot),2为模拟器
    /// </summary>
    public short RootMark
    {
      get
      {
        return _rootMark;
      }
      set
      {
        __isset.rootMark = true;
        this._rootMark = value;
      }
    }

    /// <summary>
    /// sdk 版本
    /// </summary>
    public string SdkVersion
    {
      get
      {
        return _sdkVersion;
      }
      set
      {
        __isset.sdkVersion = true;
        this._sdkVersion = value;
      }
    }

    /// <summary>
    /// cpid
    /// </summary>
    public string Cpid
    {
      get
      {
        return _cpid;
      }
      set
      {
        __isset.cpid = true;
        this._cpid = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool deviceId;
      public bool macId;
      public bool deviceType;
      public bool deviceVersion;
      public bool devicePlatform;
      public bool deviceModel;
      public bool version;
      public bool appChannel;
      public bool channelName;
      public bool channelPlatform;
      public bool channelUdid;
      public bool gameSession;
      public bool isReconnect;
      public bool gsId;
      public bool networkIsp;
      public bool networkType;
      public bool deviceHeight;
      public bool deviceWidth;
      public bool rootMark;
      public bool sdkVersion;
      public bool cpid;
    }

    public CSTokenLoginMsg() {
    }

    public void Read (TProtocol iprot)
    {
ClientLog.Instance.LogError("This function is deleted.");
}

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("CSTokenLoginMsg");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (DeviceId != null && __isset.deviceId) {
        field.Name = "deviceId";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DeviceId);
        oprot.WriteFieldEnd();
      }
      if (MacId != null && __isset.macId) {
        field.Name = "macId";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(MacId);
        oprot.WriteFieldEnd();
      }
      if (DeviceType != null && __isset.deviceType) {
        field.Name = "deviceType";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DeviceType);
        oprot.WriteFieldEnd();
      }
      if (DeviceVersion != null && __isset.deviceVersion) {
        field.Name = "deviceVersion";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DeviceVersion);
        oprot.WriteFieldEnd();
      }
      if (DevicePlatform != null && __isset.devicePlatform) {
        field.Name = "devicePlatform";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DevicePlatform);
        oprot.WriteFieldEnd();
      }
      if (DeviceModel != null && __isset.deviceModel) {
        field.Name = "deviceModel";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DeviceModel);
        oprot.WriteFieldEnd();
      }
      if (Version != null && __isset.version) {
        field.Name = "version";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Version);
        oprot.WriteFieldEnd();
      }
      if (AppChannel != null && __isset.appChannel) {
        field.Name = "appChannel";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(AppChannel);
        oprot.WriteFieldEnd();
      }
      if (ChannelName != null && __isset.channelName) {
        field.Name = "channelName";
        field.Type = TType.String;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ChannelName);
        oprot.WriteFieldEnd();
      }
      if (ChannelPlatform != null && __isset.channelPlatform) {
        field.Name = "channelPlatform";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ChannelPlatform);
        oprot.WriteFieldEnd();
      }
      if (ChannelUdid != null && __isset.channelUdid) {
        field.Name = "channelUdid";
        field.Type = TType.String;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ChannelUdid);
        oprot.WriteFieldEnd();
      }
      if (GameSession != null && __isset.gameSession) {
        field.Name = "gameSession";
        field.Type = TType.String;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(GameSession);
        oprot.WriteFieldEnd();
      }
      if (__isset.isReconnect) {
        field.Name = "isReconnect";
        field.Type = TType.Bool;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsReconnect);
        oprot.WriteFieldEnd();
      }
      if (GsId != null && __isset.gsId) {
        field.Name = "gsId";
        field.Type = TType.String;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(GsId);
        oprot.WriteFieldEnd();
      }
      if (NetworkIsp != null && __isset.networkIsp) {
        field.Name = "networkIsp";
        field.Type = TType.String;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(NetworkIsp);
        oprot.WriteFieldEnd();
      }
      if (NetworkType != null && __isset.networkType) {
        field.Name = "networkType";
        field.Type = TType.String;
        field.ID = 16;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(NetworkType);
        oprot.WriteFieldEnd();
      }
      if (__isset.deviceHeight) {
        field.Name = "deviceHeight";
        field.Type = TType.I32;
        field.ID = 17;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DeviceHeight);
        oprot.WriteFieldEnd();
      }
      if (__isset.deviceWidth) {
        field.Name = "deviceWidth";
        field.Type = TType.I32;
        field.ID = 18;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DeviceWidth);
        oprot.WriteFieldEnd();
      }
      if (__isset.rootMark) {
        field.Name = "rootMark";
        field.Type = TType.I16;
        field.ID = 19;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(RootMark);
        oprot.WriteFieldEnd();
      }
      if (SdkVersion != null && __isset.sdkVersion) {
        field.Name = "sdkVersion";
        field.Type = TType.String;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(SdkVersion);
        oprot.WriteFieldEnd();
      }
      if (Cpid != null && __isset.cpid) {
        field.Name = "cpid";
        field.Type = TType.String;
        field.ID = 21;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Cpid);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    


  }

}
