/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ConmmonSignInAward : TBase
  {
    private int _dayIndex;
    private int _maleAwardType;
    private int _maleAwardItemId;
    private int _maleAwardItemAmount;
    private int _femaleAwardType;
    private int _femaleAwardItemId;
    private int _femaleAwardItemAmount;
    private List<VipSignAward> _vipAward;

    public int DayIndex
    {
      get
      {
        return _dayIndex;
      }
      set
      {
        __isset.dayIndex = true;
        this._dayIndex = value;
      }
    }

    public int MaleAwardType
    {
      get
      {
        return _maleAwardType;
      }
      set
      {
        __isset.maleAwardType = true;
        this._maleAwardType = value;
      }
    }

    public int MaleAwardItemId
    {
      get
      {
        return _maleAwardItemId;
      }
      set
      {
        __isset.maleAwardItemId = true;
        this._maleAwardItemId = value;
      }
    }

    public int MaleAwardItemAmount
    {
      get
      {
        return _maleAwardItemAmount;
      }
      set
      {
        __isset.maleAwardItemAmount = true;
        this._maleAwardItemAmount = value;
      }
    }

    public int FemaleAwardType
    {
      get
      {
        return _femaleAwardType;
      }
      set
      {
        __isset.femaleAwardType = true;
        this._femaleAwardType = value;
      }
    }

    public int FemaleAwardItemId
    {
      get
      {
        return _femaleAwardItemId;
      }
      set
      {
        __isset.femaleAwardItemId = true;
        this._femaleAwardItemId = value;
      }
    }

    public int FemaleAwardItemAmount
    {
      get
      {
        return _femaleAwardItemAmount;
      }
      set
      {
        __isset.femaleAwardItemAmount = true;
        this._femaleAwardItemAmount = value;
      }
    }

    public List<VipSignAward> VipAward
    {
      get
      {
        return _vipAward;
      }
      set
      {
        __isset.vipAward = true;
        this._vipAward = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool dayIndex;
      public bool maleAwardType;
      public bool maleAwardItemId;
      public bool maleAwardItemAmount;
      public bool femaleAwardType;
      public bool femaleAwardItemId;
      public bool femaleAwardItemAmount;
      public bool vipAward;
    }

    public ConmmonSignInAward() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              DayIndex = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              MaleAwardType = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              MaleAwardItemId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              MaleAwardItemAmount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              FemaleAwardType = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              FemaleAwardItemId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              FemaleAwardItemAmount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.List) {
              {
                VipAward = new List<VipSignAward>();
                TList _list8 = iprot.ReadListBegin();
                for( int _i9 = 0; _i9 < _list8.Count; ++_i9)
                {
                  VipSignAward _elem10 = new VipSignAward();
                  _elem10 = new VipSignAward();
                  _elem10.Read(iprot);
                  VipAward.Add(_elem10);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ConmmonSignInAward");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.dayIndex) {
        field.Name = "dayIndex";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DayIndex);
        oprot.WriteFieldEnd();
      }
      if (__isset.maleAwardType) {
        field.Name = "maleAwardType";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MaleAwardType);
        oprot.WriteFieldEnd();
      }
      if (__isset.maleAwardItemId) {
        field.Name = "maleAwardItemId";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MaleAwardItemId);
        oprot.WriteFieldEnd();
      }
      if (__isset.maleAwardItemAmount) {
        field.Name = "maleAwardItemAmount";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MaleAwardItemAmount);
        oprot.WriteFieldEnd();
      }
      if (__isset.femaleAwardType) {
        field.Name = "femaleAwardType";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(FemaleAwardType);
        oprot.WriteFieldEnd();
      }
      if (__isset.femaleAwardItemId) {
        field.Name = "femaleAwardItemId";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(FemaleAwardItemId);
        oprot.WriteFieldEnd();
      }
      if (__isset.femaleAwardItemAmount) {
        field.Name = "femaleAwardItemAmount";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(FemaleAwardItemAmount);
        oprot.WriteFieldEnd();
      }
      if (VipAward != null && __isset.vipAward) {
        field.Name = "vipAward";
        field.Type = TType.List;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, VipAward.Count));
          foreach (VipSignAward _iter11 in VipAward)
          {
            _iter11.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ConmmonSignInAward(");
      sb.Append("DayIndex: ");
      sb.Append(DayIndex);
      sb.Append(",MaleAwardType: ");
      sb.Append(MaleAwardType);
      sb.Append(",MaleAwardItemId: ");
      sb.Append(MaleAwardItemId);
      sb.Append(",MaleAwardItemAmount: ");
      sb.Append(MaleAwardItemAmount);
      sb.Append(",FemaleAwardType: ");
      sb.Append(FemaleAwardType);
      sb.Append(",FemaleAwardItemId: ");
      sb.Append(FemaleAwardItemId);
      sb.Append(",FemaleAwardItemAmount: ");
      sb.Append(FemaleAwardItemAmount);
      sb.Append(",VipAward: ");
      sb.Append(VipAward);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
