/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SCReturnDanceRoomMsg : TBase
  {
    private long _charId;
    private byte _danceState;
    private byte _mode;
    private short _songId;
    private byte _songLevel;
    private short _startActionId;
    private List<short> _finishActionIds;
    private byte _stageId;
    private byte _lightId;
    private int _curDuringTime;
    private List<MusicCodec.PartnerInfo> _partners;
    private List<MusicCodec.DanceMarkInfo> _marks;

    public long CharId
    {
      get
      {
        return _charId;
      }
      set
      {
        __isset.charId = true;
        this._charId = value;
      }
    }

    /// <summary>
    /// 0:Dancing outside  1:Ready Dance  2:Dance within
    /// </summary>
    public byte DanceState
    {
      get
      {
        return _danceState;
      }
      set
      {
        __isset.danceState = true;
        this._danceState = value;
      }
    }

    public byte Mode
    {
      get
      {
        return _mode;
      }
      set
      {
        __isset.mode = true;
        this._mode = value;
      }
    }

    public short SongId
    {
      get
      {
        return _songId;
      }
      set
      {
        __isset.songId = true;
        this._songId = value;
      }
    }

    public byte SongLevel
    {
      get
      {
        return _songLevel;
      }
      set
      {
        __isset.songLevel = true;
        this._songLevel = value;
      }
    }

    public short StartActionId
    {
      get
      {
        return _startActionId;
      }
      set
      {
        __isset.startActionId = true;
        this._startActionId = value;
      }
    }

    public List<short> FinishActionIds
    {
      get
      {
        return _finishActionIds;
      }
      set
      {
        __isset.finishActionIds = true;
        this._finishActionIds = value;
      }
    }

    public byte StageId
    {
      get
      {
        return _stageId;
      }
      set
      {
        __isset.stageId = true;
        this._stageId = value;
      }
    }

    public byte LightId
    {
      get
      {
        return _lightId;
      }
      set
      {
        __isset.lightId = true;
        this._lightId = value;
      }
    }

    public int CurDuringTime
    {
      get
      {
        return _curDuringTime;
      }
      set
      {
        __isset.curDuringTime = true;
        this._curDuringTime = value;
      }
    }

    public List<MusicCodec.PartnerInfo> Partners
    {
      get
      {
        return _partners;
      }
      set
      {
        __isset.partners = true;
        this._partners = value;
      }
    }

    public List<MusicCodec.DanceMarkInfo> Marks
    {
      get
      {
        return _marks;
      }
      set
      {
        __isset.marks = true;
        this._marks = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool charId;
      public bool danceState;
      public bool mode;
      public bool songId;
      public bool songLevel;
      public bool startActionId;
      public bool finishActionIds;
      public bool stageId;
      public bool lightId;
      public bool curDuringTime;
      public bool partners;
      public bool marks;
    }

    public SCReturnDanceRoomMsg() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              CharId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Byte) {
              DanceState = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Byte) {
              Mode = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I16) {
              SongId = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Byte) {
              SongLevel = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I16) {
              StartActionId = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.List) {
              {
                FinishActionIds = new List<short>();
                TList _list24 = iprot.ReadListBegin();
                for( int _i25 = 0; _i25 < _list24.Count; ++_i25)
                {
                  short _elem26 = 0;
                  _elem26 = iprot.ReadI16();
                  FinishActionIds.Add(_elem26);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Byte) {
              StageId = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.Byte) {
              LightId = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I32) {
              CurDuringTime = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.List) {
              {
                Partners = new List<MusicCodec.PartnerInfo>();
                TList _list27 = iprot.ReadListBegin();
                for( int _i28 = 0; _i28 < _list27.Count; ++_i28)
                {
                  MusicCodec.PartnerInfo _elem29 = new MusicCodec.PartnerInfo();
                  _elem29 = new MusicCodec.PartnerInfo();
                  _elem29.Read(iprot);
                  Partners.Add(_elem29);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.List) {
              {
                Marks = new List<MusicCodec.DanceMarkInfo>();
                TList _list30 = iprot.ReadListBegin();
                for( int _i31 = 0; _i31 < _list30.Count; ++_i31)
                {
                  MusicCodec.DanceMarkInfo _elem32 = new MusicCodec.DanceMarkInfo();
                  _elem32 = new MusicCodec.DanceMarkInfo();
                  _elem32.Read(iprot);
                  Marks.Add(_elem32);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
ClientLog.Instance.LogError("This function is deleted.");
}

    


  }

}
