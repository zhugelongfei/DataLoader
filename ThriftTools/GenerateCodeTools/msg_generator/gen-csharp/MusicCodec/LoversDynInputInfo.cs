/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class LoversDynInputInfo : TBase
  {
    private byte _inputType;
    private byte _result;
    private byte _combo;

    public byte InputType
    {
      get
      {
        return _inputType;
      }
      set
      {
        __isset.inputType = true;
        this._inputType = value;
      }
    }

    public byte Result
    {
      get
      {
        return _result;
      }
      set
      {
        __isset.result = true;
        this._result = value;
      }
    }

    public byte Combo
    {
      get
      {
        return _combo;
      }
      set
      {
        __isset.combo = true;
        this._combo = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool inputType;
      public bool result;
      public bool combo;
    }

    public LoversDynInputInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Byte) {
              InputType = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Byte) {
              Result = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Byte) {
              Combo = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("LoversDynInputInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.inputType) {
        field.Name = "inputType";
        field.Type = TType.Byte;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(InputType);
        oprot.WriteFieldEnd();
      }
      if (__isset.result) {
        field.Name = "result";
        field.Type = TType.Byte;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Result);
        oprot.WriteFieldEnd();
      }
      if (__isset.combo) {
        field.Name = "combo";
        field.Type = TType.Byte;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Combo);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("LoversDynInputInfo(");
      sb.Append("InputType: ");
      sb.Append(InputType);
      sb.Append(",Result: ");
      sb.Append(Result);
      sb.Append(",Combo: ");
      sb.Append(Combo);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
