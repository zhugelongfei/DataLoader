/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class BattleFinishInfo : TBase
  {
    private short _maxPerfectCombo;
    private short _maxCombo;
    private short _perfect;
    private short _great;
    private short _good;
    private short _mss;
    private short _coupon;
    private List<BattleTeamResult> _teams;

    public short MaxPerfectCombo
    {
      get
      {
        return _maxPerfectCombo;
      }
      set
      {
        __isset.maxPerfectCombo = true;
        this._maxPerfectCombo = value;
      }
    }

    public short MaxCombo
    {
      get
      {
        return _maxCombo;
      }
      set
      {
        __isset.maxCombo = true;
        this._maxCombo = value;
      }
    }

    public short Perfect
    {
      get
      {
        return _perfect;
      }
      set
      {
        __isset.perfect = true;
        this._perfect = value;
      }
    }

    public short Great
    {
      get
      {
        return _great;
      }
      set
      {
        __isset.great = true;
        this._great = value;
      }
    }

    public short Good
    {
      get
      {
        return _good;
      }
      set
      {
        __isset.good = true;
        this._good = value;
      }
    }

    public short Mss
    {
      get
      {
        return _mss;
      }
      set
      {
        __isset.mss = true;
        this._mss = value;
      }
    }

    public short Coupon
    {
      get
      {
        return _coupon;
      }
      set
      {
        __isset.coupon = true;
        this._coupon = value;
      }
    }

    public List<BattleTeamResult> Teams
    {
      get
      {
        return _teams;
      }
      set
      {
        __isset.teams = true;
        this._teams = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool maxPerfectCombo;
      public bool maxCombo;
      public bool perfect;
      public bool great;
      public bool good;
      public bool mss;
      public bool coupon;
      public bool teams;
    }

    public BattleFinishInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I16) {
              MaxPerfectCombo = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I16) {
              MaxCombo = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I16) {
              Perfect = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I16) {
              Great = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I16) {
              Good = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I16) {
              Mss = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I16) {
              Coupon = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.List) {
              {
                Teams = new List<BattleTeamResult>();
                TList _list45 = iprot.ReadListBegin();
                for( int _i46 = 0; _i46 < _list45.Count; ++_i46)
                {
                  BattleTeamResult _elem47 = new BattleTeamResult();
                  _elem47 = new BattleTeamResult();
                  _elem47.Read(iprot);
                  Teams.Add(_elem47);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("BattleFinishInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.maxPerfectCombo) {
        field.Name = "maxPerfectCombo";
        field.Type = TType.I16;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(MaxPerfectCombo);
        oprot.WriteFieldEnd();
      }
      if (__isset.maxCombo) {
        field.Name = "maxCombo";
        field.Type = TType.I16;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(MaxCombo);
        oprot.WriteFieldEnd();
      }
      if (__isset.perfect) {
        field.Name = "perfect";
        field.Type = TType.I16;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(Perfect);
        oprot.WriteFieldEnd();
      }
      if (__isset.great) {
        field.Name = "great";
        field.Type = TType.I16;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(Great);
        oprot.WriteFieldEnd();
      }
      if (__isset.good) {
        field.Name = "good";
        field.Type = TType.I16;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(Good);
        oprot.WriteFieldEnd();
      }
      if (__isset.mss) {
        field.Name = "mss";
        field.Type = TType.I16;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(Mss);
        oprot.WriteFieldEnd();
      }
      if (__isset.coupon) {
        field.Name = "coupon";
        field.Type = TType.I16;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(Coupon);
        oprot.WriteFieldEnd();
      }
      if (Teams != null && __isset.teams) {
        field.Name = "teams";
        field.Type = TType.List;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Teams.Count));
          foreach (BattleTeamResult _iter48 in Teams)
          {
            _iter48.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("BattleFinishInfo(");
      sb.Append("MaxPerfectCombo: ");
      sb.Append(MaxPerfectCombo);
      sb.Append(",MaxCombo: ");
      sb.Append(MaxCombo);
      sb.Append(",Perfect: ");
      sb.Append(Perfect);
      sb.Append(",Great: ");
      sb.Append(Great);
      sb.Append(",Good: ");
      sb.Append(Good);
      sb.Append(",Mss: ");
      sb.Append(Mss);
      sb.Append(",Coupon: ");
      sb.Append(Coupon);
      sb.Append(",Teams: ");
      sb.Append(Teams);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
