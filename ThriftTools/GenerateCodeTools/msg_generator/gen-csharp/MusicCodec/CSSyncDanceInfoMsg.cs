/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CSSyncDanceInfoMsg : TBase
  {
    private short _duringTime;
    private List<byte> _keyResult;
    private short _combos;
    private int _totalMark;
    private MusicCodec.DynamicInput _dynamicInput;
    private MusicCodec.TraditionalInput _traditionalInput;
    private MusicCodec.LoversDynInput _loversDynInput;
    private MusicCodec.LoversTrdInput _loversTrdInput;

    public short DuringTime
    {
      get
      {
        return _duringTime;
      }
      set
      {
        __isset.duringTime = true;
        this._duringTime = value;
      }
    }

    public List<byte> KeyResult
    {
      get
      {
        return _keyResult;
      }
      set
      {
        __isset.keyResult = true;
        this._keyResult = value;
      }
    }

    public short Combos
    {
      get
      {
        return _combos;
      }
      set
      {
        __isset.combos = true;
        this._combos = value;
      }
    }

    public int TotalMark
    {
      get
      {
        return _totalMark;
      }
      set
      {
        __isset.totalMark = true;
        this._totalMark = value;
      }
    }

    public MusicCodec.DynamicInput DynamicInput
    {
      get
      {
        return _dynamicInput;
      }
      set
      {
        __isset.dynamicInput = true;
        this._dynamicInput = value;
      }
    }

    public MusicCodec.TraditionalInput TraditionalInput
    {
      get
      {
        return _traditionalInput;
      }
      set
      {
        __isset.traditionalInput = true;
        this._traditionalInput = value;
      }
    }

    public MusicCodec.LoversDynInput LoversDynInput
    {
      get
      {
        return _loversDynInput;
      }
      set
      {
        __isset.loversDynInput = true;
        this._loversDynInput = value;
      }
    }

    public MusicCodec.LoversTrdInput LoversTrdInput
    {
      get
      {
        return _loversTrdInput;
      }
      set
      {
        __isset.loversTrdInput = true;
        this._loversTrdInput = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool duringTime;
      public bool keyResult;
      public bool combos;
      public bool totalMark;
      public bool dynamicInput;
      public bool traditionalInput;
      public bool loversDynInput;
      public bool loversTrdInput;
    }

    public CSSyncDanceInfoMsg() {
    }

    public void Read (TProtocol iprot)
    {
ClientLog.Instance.LogError("This function is deleted.");
}

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("CSSyncDanceInfoMsg");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.duringTime) {
        field.Name = "duringTime";
        field.Type = TType.I16;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(DuringTime);
        oprot.WriteFieldEnd();
      }
      if (KeyResult != null && __isset.keyResult) {
        field.Name = "keyResult";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Byte, KeyResult.Count));
          foreach (byte _iter3 in KeyResult)
          {
            oprot.WriteByte(_iter3);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.combos) {
        field.Name = "combos";
        field.Type = TType.I16;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(Combos);
        oprot.WriteFieldEnd();
      }
      if (__isset.totalMark) {
        field.Name = "totalMark";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TotalMark);
        oprot.WriteFieldEnd();
      }
      if (DynamicInput != null && __isset.dynamicInput) {
        field.Name = "dynamicInput";
        field.Type = TType.Struct;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        DynamicInput.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (TraditionalInput != null && __isset.traditionalInput) {
        field.Name = "traditionalInput";
        field.Type = TType.Struct;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        TraditionalInput.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (LoversDynInput != null && __isset.loversDynInput) {
        field.Name = "loversDynInput";
        field.Type = TType.Struct;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        LoversDynInput.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (LoversTrdInput != null && __isset.loversTrdInput) {
        field.Name = "loversTrdInput";
        field.Type = TType.Struct;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        LoversTrdInput.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    


  }

}
