/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SCGetCollectExchangePrizeResultMsg : TBase
  {
    private short _activityId;
    private byte _index;
    private bool _result;
    private int _exchangedCount;
    private int _exchangeTotalCount;
    private int _dayExchangedCount;
    private int _datExchangeTotalCount;

    public short ActivityId
    {
      get
      {
        return _activityId;
      }
      set
      {
        __isset.activityId = true;
        this._activityId = value;
      }
    }

    public byte Index
    {
      get
      {
        return _index;
      }
      set
      {
        __isset.index = true;
        this._index = value;
      }
    }

    public bool Result
    {
      get
      {
        return _result;
      }
      set
      {
        __isset.result = true;
        this._result = value;
      }
    }

    public int ExchangedCount
    {
      get
      {
        return _exchangedCount;
      }
      set
      {
        __isset.exchangedCount = true;
        this._exchangedCount = value;
      }
    }

    public int ExchangeTotalCount
    {
      get
      {
        return _exchangeTotalCount;
      }
      set
      {
        __isset.exchangeTotalCount = true;
        this._exchangeTotalCount = value;
      }
    }

    public int DayExchangedCount
    {
      get
      {
        return _dayExchangedCount;
      }
      set
      {
        __isset.dayExchangedCount = true;
        this._dayExchangedCount = value;
      }
    }

    public int DatExchangeTotalCount
    {
      get
      {
        return _datExchangeTotalCount;
      }
      set
      {
        __isset.datExchangeTotalCount = true;
        this._datExchangeTotalCount = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool activityId;
      public bool index;
      public bool result;
      public bool exchangedCount;
      public bool exchangeTotalCount;
      public bool dayExchangedCount;
      public bool datExchangeTotalCount;
    }

    public SCGetCollectExchangePrizeResultMsg() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I16) {
              ActivityId = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Byte) {
              Index = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Bool) {
              Result = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              ExchangedCount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              ExchangeTotalCount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              DayExchangedCount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              DatExchangeTotalCount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
ClientLog.Instance.LogError("This function is deleted.");
}

    


  }

}
