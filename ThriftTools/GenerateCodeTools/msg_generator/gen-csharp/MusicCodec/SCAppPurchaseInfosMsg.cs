/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  /// <summary>
  /// 套餐信息
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SCAppPurchaseInfosMsg : TBase
  {
    private byte _version;
    private List<MusicCodec.InAppPurchaseInfo> _purchaseInfos;
    private List<int> _firstRechargeInfo;

    /// <summary>
    /// 版本
    /// </summary>
    public byte Version
    {
      get
      {
        return _version;
      }
      set
      {
        __isset.version = true;
        this._version = value;
      }
    }

    /// <summary>
    /// 套餐信息
    /// </summary>
    public List<MusicCodec.InAppPurchaseInfo> PurchaseInfos
    {
      get
      {
        return _purchaseInfos;
      }
      set
      {
        __isset.purchaseInfos = true;
        this._purchaseInfos = value;
      }
    }

    /// <summary>
    /// 首充信息
    /// </summary>
    public List<int> FirstRechargeInfo
    {
      get
      {
        return _firstRechargeInfo;
      }
      set
      {
        __isset.firstRechargeInfo = true;
        this._firstRechargeInfo = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool version;
      public bool purchaseInfos;
      public bool firstRechargeInfo;
    }

    public SCAppPurchaseInfosMsg() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Byte) {
              Version = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                PurchaseInfos = new List<MusicCodec.InAppPurchaseInfo>();
                TList _list4 = iprot.ReadListBegin();
                for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                {
                  MusicCodec.InAppPurchaseInfo _elem6 = new MusicCodec.InAppPurchaseInfo();
                  _elem6 = new MusicCodec.InAppPurchaseInfo();
                  _elem6.Read(iprot);
                  PurchaseInfos.Add(_elem6);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                FirstRechargeInfo = new List<int>();
                TList _list7 = iprot.ReadListBegin();
                for( int _i8 = 0; _i8 < _list7.Count; ++_i8)
                {
                  int _elem9 = 0;
                  _elem9 = iprot.ReadI32();
                  FirstRechargeInfo.Add(_elem9);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
ClientLog.Instance.LogError("This function is deleted.");
}

    


  }

}
