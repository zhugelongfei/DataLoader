/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  /// <summary>
  /// 游戏奖励信息
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class PrizeInfo : TBase
  {
    private List<NumberPrize> _numberPrizes;
    private List<MoneyPrize> _MoneyPrizes;
    private List<BadgePrize> _badgePrizes;
    private List<FashionPrize> _fashionPrizes;
    private List<ItemPrize> _itemPrizes;

    /// <summary>
    /// numberPrizes和moneyPrizes互斥， 同时只会存在一种， 为了兼容之前消息
    /// </summary>
    public List<NumberPrize> NumberPrizes
    {
      get
      {
        return _numberPrizes;
      }
      set
      {
        __isset.numberPrizes = true;
        this._numberPrizes = value;
      }
    }

    public List<MoneyPrize> MoneyPrizes
    {
      get
      {
        return _MoneyPrizes;
      }
      set
      {
        __isset.MoneyPrizes = true;
        this._MoneyPrizes = value;
      }
    }

    public List<BadgePrize> BadgePrizes
    {
      get
      {
        return _badgePrizes;
      }
      set
      {
        __isset.badgePrizes = true;
        this._badgePrizes = value;
      }
    }

    public List<FashionPrize> FashionPrizes
    {
      get
      {
        return _fashionPrizes;
      }
      set
      {
        __isset.fashionPrizes = true;
        this._fashionPrizes = value;
      }
    }

    public List<ItemPrize> ItemPrizes
    {
      get
      {
        return _itemPrizes;
      }
      set
      {
        __isset.itemPrizes = true;
        this._itemPrizes = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool numberPrizes;
      public bool MoneyPrizes;
      public bool badgePrizes;
      public bool fashionPrizes;
      public bool itemPrizes;
    }

    public PrizeInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                NumberPrizes = new List<NumberPrize>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  NumberPrize _elem2 = new NumberPrize();
                  _elem2 = new NumberPrize();
                  _elem2.Read(iprot);
                  NumberPrizes.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                MoneyPrizes = new List<MoneyPrize>();
                TList _list3 = iprot.ReadListBegin();
                for( int _i4 = 0; _i4 < _list3.Count; ++_i4)
                {
                  MoneyPrize _elem5 = new MoneyPrize();
                  _elem5 = new MoneyPrize();
                  _elem5.Read(iprot);
                  MoneyPrizes.Add(_elem5);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                BadgePrizes = new List<BadgePrize>();
                TList _list6 = iprot.ReadListBegin();
                for( int _i7 = 0; _i7 < _list6.Count; ++_i7)
                {
                  BadgePrize _elem8 = new BadgePrize();
                  _elem8 = new BadgePrize();
                  _elem8.Read(iprot);
                  BadgePrizes.Add(_elem8);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.List) {
              {
                FashionPrizes = new List<FashionPrize>();
                TList _list9 = iprot.ReadListBegin();
                for( int _i10 = 0; _i10 < _list9.Count; ++_i10)
                {
                  FashionPrize _elem11 = new FashionPrize();
                  _elem11 = new FashionPrize();
                  _elem11.Read(iprot);
                  FashionPrizes.Add(_elem11);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.List) {
              {
                ItemPrizes = new List<ItemPrize>();
                TList _list12 = iprot.ReadListBegin();
                for( int _i13 = 0; _i13 < _list12.Count; ++_i13)
                {
                  ItemPrize _elem14 = new ItemPrize();
                  _elem14 = new ItemPrize();
                  _elem14.Read(iprot);
                  ItemPrizes.Add(_elem14);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("PrizeInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (NumberPrizes != null && __isset.numberPrizes) {
        field.Name = "numberPrizes";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, NumberPrizes.Count));
          foreach (NumberPrize _iter15 in NumberPrizes)
          {
            _iter15.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (MoneyPrizes != null && __isset.MoneyPrizes) {
        field.Name = "MoneyPrizes";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, MoneyPrizes.Count));
          foreach (MoneyPrize _iter16 in MoneyPrizes)
          {
            _iter16.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (BadgePrizes != null && __isset.badgePrizes) {
        field.Name = "badgePrizes";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, BadgePrizes.Count));
          foreach (BadgePrize _iter17 in BadgePrizes)
          {
            _iter17.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (FashionPrizes != null && __isset.fashionPrizes) {
        field.Name = "fashionPrizes";
        field.Type = TType.List;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, FashionPrizes.Count));
          foreach (FashionPrize _iter18 in FashionPrizes)
          {
            _iter18.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (ItemPrizes != null && __isset.itemPrizes) {
        field.Name = "itemPrizes";
        field.Type = TType.List;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, ItemPrizes.Count));
          foreach (ItemPrize _iter19 in ItemPrizes)
          {
            _iter19.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("PrizeInfo(");
      sb.Append("NumberPrizes: ");
      sb.Append(NumberPrizes);
      sb.Append(",MoneyPrizes: ");
      sb.Append(MoneyPrizes);
      sb.Append(",BadgePrizes: ");
      sb.Append(BadgePrizes);
      sb.Append(",FashionPrizes: ");
      sb.Append(FashionPrizes);
      sb.Append(",ItemPrizes: ");
      sb.Append(ItemPrizes);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
