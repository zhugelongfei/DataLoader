/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class DanceMarkInfo : TBase
  {
    private string _name;
    private int _mark;
    private byte _grade;
    private string _location;
    private double _longitude;
    private double _latitude;
    private short _perfectCount;
    private short _greatCount;
    private short _goodCount;
    private short _missCount;
    private short _maxCombo;
    private short _maxPerfectCombo;
    private short _masterPerfectCount;
    private int _appendMasterPerfectMark;
    private PlayerBaseInfo _playerBaseInfo;
    private byte _rank;

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public int Mark
    {
      get
      {
        return _mark;
      }
      set
      {
        __isset.mark = true;
        this._mark = value;
      }
    }

    public byte Grade
    {
      get
      {
        return _grade;
      }
      set
      {
        __isset.grade = true;
        this._grade = value;
      }
    }

    public string Location
    {
      get
      {
        return _location;
      }
      set
      {
        __isset.location = true;
        this._location = value;
      }
    }

    public double Longitude
    {
      get
      {
        return _longitude;
      }
      set
      {
        __isset.longitude = true;
        this._longitude = value;
      }
    }

    public double Latitude
    {
      get
      {
        return _latitude;
      }
      set
      {
        __isset.latitude = true;
        this._latitude = value;
      }
    }

    public short PerfectCount
    {
      get
      {
        return _perfectCount;
      }
      set
      {
        __isset.perfectCount = true;
        this._perfectCount = value;
      }
    }

    public short GreatCount
    {
      get
      {
        return _greatCount;
      }
      set
      {
        __isset.greatCount = true;
        this._greatCount = value;
      }
    }

    public short GoodCount
    {
      get
      {
        return _goodCount;
      }
      set
      {
        __isset.goodCount = true;
        this._goodCount = value;
      }
    }

    public short MissCount
    {
      get
      {
        return _missCount;
      }
      set
      {
        __isset.missCount = true;
        this._missCount = value;
      }
    }

    public short MaxCombo
    {
      get
      {
        return _maxCombo;
      }
      set
      {
        __isset.maxCombo = true;
        this._maxCombo = value;
      }
    }

    public short MaxPerfectCombo
    {
      get
      {
        return _maxPerfectCombo;
      }
      set
      {
        __isset.maxPerfectCombo = true;
        this._maxPerfectCombo = value;
      }
    }

    public short MasterPerfectCount
    {
      get
      {
        return _masterPerfectCount;
      }
      set
      {
        __isset.masterPerfectCount = true;
        this._masterPerfectCount = value;
      }
    }

    public int AppendMasterPerfectMark
    {
      get
      {
        return _appendMasterPerfectMark;
      }
      set
      {
        __isset.appendMasterPerfectMark = true;
        this._appendMasterPerfectMark = value;
      }
    }

    public PlayerBaseInfo PlayerBaseInfo
    {
      get
      {
        return _playerBaseInfo;
      }
      set
      {
        __isset.playerBaseInfo = true;
        this._playerBaseInfo = value;
      }
    }

    public byte Rank
    {
      get
      {
        return _rank;
      }
      set
      {
        __isset.rank = true;
        this._rank = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool name;
      public bool mark;
      public bool grade;
      public bool location;
      public bool longitude;
      public bool latitude;
      public bool perfectCount;
      public bool greatCount;
      public bool goodCount;
      public bool missCount;
      public bool maxCombo;
      public bool maxPerfectCombo;
      public bool masterPerfectCount;
      public bool appendMasterPerfectMark;
      public bool playerBaseInfo;
      public bool rank;
    }

    public DanceMarkInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Mark = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Byte) {
              Grade = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Location = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Double) {
              Longitude = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Double) {
              Latitude = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I16) {
              PerfectCount = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I16) {
              GreatCount = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I16) {
              GoodCount = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I16) {
              MissCount = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I16) {
              MaxCombo = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.I16) {
              MaxPerfectCombo = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.I16) {
              MasterPerfectCount = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.I32) {
              AppendMasterPerfectMark = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.Struct) {
              PlayerBaseInfo = new PlayerBaseInfo();
              PlayerBaseInfo.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 16:
            if (field.Type == TType.Byte) {
              Rank = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("DanceMarkInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
      }
      if (__isset.mark) {
        field.Name = "mark";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Mark);
        oprot.WriteFieldEnd();
      }
      if (__isset.grade) {
        field.Name = "grade";
        field.Type = TType.Byte;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Grade);
        oprot.WriteFieldEnd();
      }
      if (Location != null && __isset.location) {
        field.Name = "location";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Location);
        oprot.WriteFieldEnd();
      }
      if (__isset.longitude) {
        field.Name = "longitude";
        field.Type = TType.Double;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Longitude);
        oprot.WriteFieldEnd();
      }
      if (__isset.latitude) {
        field.Name = "latitude";
        field.Type = TType.Double;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Latitude);
        oprot.WriteFieldEnd();
      }
      if (__isset.perfectCount) {
        field.Name = "perfectCount";
        field.Type = TType.I16;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(PerfectCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.greatCount) {
        field.Name = "greatCount";
        field.Type = TType.I16;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(GreatCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.goodCount) {
        field.Name = "goodCount";
        field.Type = TType.I16;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(GoodCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.missCount) {
        field.Name = "missCount";
        field.Type = TType.I16;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(MissCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.maxCombo) {
        field.Name = "maxCombo";
        field.Type = TType.I16;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(MaxCombo);
        oprot.WriteFieldEnd();
      }
      if (__isset.maxPerfectCombo) {
        field.Name = "maxPerfectCombo";
        field.Type = TType.I16;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(MaxPerfectCombo);
        oprot.WriteFieldEnd();
      }
      if (__isset.masterPerfectCount) {
        field.Name = "masterPerfectCount";
        field.Type = TType.I16;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(MasterPerfectCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.appendMasterPerfectMark) {
        field.Name = "appendMasterPerfectMark";
        field.Type = TType.I32;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(AppendMasterPerfectMark);
        oprot.WriteFieldEnd();
      }
      if (PlayerBaseInfo != null && __isset.playerBaseInfo) {
        field.Name = "playerBaseInfo";
        field.Type = TType.Struct;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        PlayerBaseInfo.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.rank) {
        field.Name = "rank";
        field.Type = TType.Byte;
        field.ID = 16;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Rank);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("DanceMarkInfo(");
      sb.Append("Name: ");
      sb.Append(Name);
      sb.Append(",Mark: ");
      sb.Append(Mark);
      sb.Append(",Grade: ");
      sb.Append(Grade);
      sb.Append(",Location: ");
      sb.Append(Location);
      sb.Append(",Longitude: ");
      sb.Append(Longitude);
      sb.Append(",Latitude: ");
      sb.Append(Latitude);
      sb.Append(",PerfectCount: ");
      sb.Append(PerfectCount);
      sb.Append(",GreatCount: ");
      sb.Append(GreatCount);
      sb.Append(",GoodCount: ");
      sb.Append(GoodCount);
      sb.Append(",MissCount: ");
      sb.Append(MissCount);
      sb.Append(",MaxCombo: ");
      sb.Append(MaxCombo);
      sb.Append(",MaxPerfectCombo: ");
      sb.Append(MaxPerfectCombo);
      sb.Append(",MasterPerfectCount: ");
      sb.Append(MasterPerfectCount);
      sb.Append(",AppendMasterPerfectMark: ");
      sb.Append(AppendMasterPerfectMark);
      sb.Append(",PlayerBaseInfo: ");
      sb.Append(PlayerBaseInfo== null ? "<null>" : PlayerBaseInfo.ToString());
      sb.Append(",Rank: ");
      sb.Append(Rank);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
