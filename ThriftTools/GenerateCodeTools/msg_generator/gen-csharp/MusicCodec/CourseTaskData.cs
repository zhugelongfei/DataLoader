/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CourseTaskData : TBase
  {
    private int _courseId;
    private CourseTaskState _state;
    private List<CourseTaskProcess> _couterProcessList;
    private List<CourseTaskProcess> _otherProcessList;
    private PrizeInfo _prizeInfos;
    private byte _courseVersion;

    public int CourseId
    {
      get
      {
        return _courseId;
      }
      set
      {
        __isset.courseId = true;
        this._courseId = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="CourseTaskState"/>
    /// </summary>
    public CourseTaskState State
    {
      get
      {
        return _state;
      }
      set
      {
        __isset.state = true;
        this._state = value;
      }
    }

    public List<CourseTaskProcess> CouterProcessList
    {
      get
      {
        return _couterProcessList;
      }
      set
      {
        __isset.couterProcessList = true;
        this._couterProcessList = value;
      }
    }

    public List<CourseTaskProcess> OtherProcessList
    {
      get
      {
        return _otherProcessList;
      }
      set
      {
        __isset.otherProcessList = true;
        this._otherProcessList = value;
      }
    }

    /// <summary>
    /// ½±Àø
    /// </summary>
    public PrizeInfo PrizeInfos
    {
      get
      {
        return _prizeInfos;
      }
      set
      {
        __isset.prizeInfos = true;
        this._prizeInfos = value;
      }
    }

    public byte CourseVersion
    {
      get
      {
        return _courseVersion;
      }
      set
      {
        __isset.courseVersion = true;
        this._courseVersion = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool courseId;
      public bool state;
      public bool couterProcessList;
      public bool otherProcessList;
      public bool prizeInfos;
      public bool courseVersion;
    }

    public CourseTaskData() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              CourseId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              State = (CourseTaskState)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                CouterProcessList = new List<CourseTaskProcess>();
                TList _list195 = iprot.ReadListBegin();
                for( int _i196 = 0; _i196 < _list195.Count; ++_i196)
                {
                  CourseTaskProcess _elem197 = new CourseTaskProcess();
                  _elem197 = new CourseTaskProcess();
                  _elem197.Read(iprot);
                  CouterProcessList.Add(_elem197);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.List) {
              {
                OtherProcessList = new List<CourseTaskProcess>();
                TList _list198 = iprot.ReadListBegin();
                for( int _i199 = 0; _i199 < _list198.Count; ++_i199)
                {
                  CourseTaskProcess _elem200 = new CourseTaskProcess();
                  _elem200 = new CourseTaskProcess();
                  _elem200.Read(iprot);
                  OtherProcessList.Add(_elem200);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Struct) {
              PrizeInfos = new PrizeInfo();
              PrizeInfos.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Byte) {
              CourseVersion = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("CourseTaskData");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.courseId) {
        field.Name = "courseId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(CourseId);
        oprot.WriteFieldEnd();
      }
      if (__isset.state) {
        field.Name = "state";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)State);
        oprot.WriteFieldEnd();
      }
      if (CouterProcessList != null && __isset.couterProcessList) {
        field.Name = "couterProcessList";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, CouterProcessList.Count));
          foreach (CourseTaskProcess _iter201 in CouterProcessList)
          {
            _iter201.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (OtherProcessList != null && __isset.otherProcessList) {
        field.Name = "otherProcessList";
        field.Type = TType.List;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, OtherProcessList.Count));
          foreach (CourseTaskProcess _iter202 in OtherProcessList)
          {
            _iter202.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (PrizeInfos != null && __isset.prizeInfos) {
        field.Name = "prizeInfos";
        field.Type = TType.Struct;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        PrizeInfos.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.courseVersion) {
        field.Name = "courseVersion";
        field.Type = TType.Byte;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(CourseVersion);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("CourseTaskData(");
      sb.Append("CourseId: ");
      sb.Append(CourseId);
      sb.Append(",State: ");
      sb.Append(State);
      sb.Append(",CouterProcessList: ");
      sb.Append(CouterProcessList);
      sb.Append(",OtherProcessList: ");
      sb.Append(OtherProcessList);
      sb.Append(",PrizeInfos: ");
      sb.Append(PrizeInfos== null ? "<null>" : PrizeInfos.ToString());
      sb.Append(",CourseVersion: ");
      sb.Append(CourseVersion);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
