/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  /// <summary>
  /// 即兴表演随机任务
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SCImproviseRandTasks : TBase
  {
    private List<int> _randTaskIds;
    private int _choicedTaskId;
    private int _perfPrizeCoupon;

    /// <summary>
    /// 随机任务id列表
    /// </summary>
    public List<int> RandTaskIds
    {
      get
      {
        return _randTaskIds;
      }
      set
      {
        __isset.randTaskIds = true;
        this._randTaskIds = value;
      }
    }

    /// <summary>
    /// 选择的随机任务id
    /// </summary>
    public int ChoicedTaskId
    {
      get
      {
        return _choicedTaskId;
      }
      set
      {
        __isset.choicedTaskId = true;
        this._choicedTaskId = value;
      }
    }

    /// <summary>
    /// 演出奖励
    /// </summary>
    public int PerfPrizeCoupon
    {
      get
      {
        return _perfPrizeCoupon;
      }
      set
      {
        __isset.perfPrizeCoupon = true;
        this._perfPrizeCoupon = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool randTaskIds;
      public bool choicedTaskId;
      public bool perfPrizeCoupon;
    }

    public SCImproviseRandTasks() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                RandTaskIds = new List<int>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  int _elem2 = 0;
                  _elem2 = iprot.ReadI32();
                  RandTaskIds.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              ChoicedTaskId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              PerfPrizeCoupon = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
ClientLog.Instance.LogError("This function is deleted.");
}

    


  }

}
