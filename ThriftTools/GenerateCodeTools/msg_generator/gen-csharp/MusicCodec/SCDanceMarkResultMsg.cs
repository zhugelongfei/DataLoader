/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SCDanceMarkResultMsg : TBase
  {
    private List<MusicCodec.DanceMarkInfo> _marks;
    private short _coupon;
    private MusicCodec.BattleFinishInfo _battleInfo;
    private short _exp;
    private short _cup;
    private short _appendCoupon;
    private short _appendExp;
    private List<MusicCodec.ItemPrize> _cardItemPrizes;
    private int _totalPerfect;
    private int _totalGreat;
    private int _totalGood;
    private int _totalMiss;
    private int _totalMark;
    private int _totalMaxPerfectCombo;
    private int _totalMaxCombo;
    private int _totalMarkRate;
    private int _totalMasterPerfectRate;
    private byte _avgGrade;
    private byte _totalStars;
    private MusicCodec.TourDancePassResult _tourDanceResultMsg;
    private MusicCodec.AnnouncePassInfo _announcePassInfo;

    /// <summary>
    /// all dancer's rank
    /// </summary>
    public List<MusicCodec.DanceMarkInfo> Marks
    {
      get
      {
        return _marks;
      }
      set
      {
        __isset.marks = true;
        this._marks = value;
      }
    }

    public short Coupon
    {
      get
      {
        return _coupon;
      }
      set
      {
        __isset.coupon = true;
        this._coupon = value;
      }
    }

    public MusicCodec.BattleFinishInfo BattleInfo
    {
      get
      {
        return _battleInfo;
      }
      set
      {
        __isset.battleInfo = true;
        this._battleInfo = value;
      }
    }

    public short Exp
    {
      get
      {
        return _exp;
      }
      set
      {
        __isset.exp = true;
        this._exp = value;
      }
    }

    public short Cup
    {
      get
      {
        return _cup;
      }
      set
      {
        __isset.cup = true;
        this._cup = value;
      }
    }

    public short AppendCoupon
    {
      get
      {
        return _appendCoupon;
      }
      set
      {
        __isset.appendCoupon = true;
        this._appendCoupon = value;
      }
    }

    public short AppendExp
    {
      get
      {
        return _appendExp;
      }
      set
      {
        __isset.appendExp = true;
        this._appendExp = value;
      }
    }

    public List<MusicCodec.ItemPrize> CardItemPrizes
    {
      get
      {
        return _cardItemPrizes;
      }
      set
      {
        __isset.cardItemPrizes = true;
        this._cardItemPrizes = value;
      }
    }

    public int TotalPerfect
    {
      get
      {
        return _totalPerfect;
      }
      set
      {
        __isset.totalPerfect = true;
        this._totalPerfect = value;
      }
    }

    public int TotalGreat
    {
      get
      {
        return _totalGreat;
      }
      set
      {
        __isset.totalGreat = true;
        this._totalGreat = value;
      }
    }

    public int TotalGood
    {
      get
      {
        return _totalGood;
      }
      set
      {
        __isset.totalGood = true;
        this._totalGood = value;
      }
    }

    public int TotalMiss
    {
      get
      {
        return _totalMiss;
      }
      set
      {
        __isset.totalMiss = true;
        this._totalMiss = value;
      }
    }

    public int TotalMark
    {
      get
      {
        return _totalMark;
      }
      set
      {
        __isset.totalMark = true;
        this._totalMark = value;
      }
    }

    public int TotalMaxPerfectCombo
    {
      get
      {
        return _totalMaxPerfectCombo;
      }
      set
      {
        __isset.totalMaxPerfectCombo = true;
        this._totalMaxPerfectCombo = value;
      }
    }

    public int TotalMaxCombo
    {
      get
      {
        return _totalMaxCombo;
      }
      set
      {
        __isset.totalMaxCombo = true;
        this._totalMaxCombo = value;
      }
    }

    public int TotalMarkRate
    {
      get
      {
        return _totalMarkRate;
      }
      set
      {
        __isset.totalMarkRate = true;
        this._totalMarkRate = value;
      }
    }

    public int TotalMasterPerfectRate
    {
      get
      {
        return _totalMasterPerfectRate;
      }
      set
      {
        __isset.totalMasterPerfectRate = true;
        this._totalMasterPerfectRate = value;
      }
    }

    public byte AvgGrade
    {
      get
      {
        return _avgGrade;
      }
      set
      {
        __isset.avgGrade = true;
        this._avgGrade = value;
      }
    }

    public byte TotalStars
    {
      get
      {
        return _totalStars;
      }
      set
      {
        __isset.totalStars = true;
        this._totalStars = value;
      }
    }

    public MusicCodec.TourDancePassResult TourDanceResultMsg
    {
      get
      {
        return _tourDanceResultMsg;
      }
      set
      {
        __isset.tourDanceResultMsg = true;
        this._tourDanceResultMsg = value;
      }
    }

    public MusicCodec.AnnouncePassInfo AnnouncePassInfo
    {
      get
      {
        return _announcePassInfo;
      }
      set
      {
        __isset.announcePassInfo = true;
        this._announcePassInfo = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool marks;
      public bool coupon;
      public bool battleInfo;
      public bool exp;
      public bool cup;
      public bool appendCoupon;
      public bool appendExp;
      public bool cardItemPrizes;
      public bool totalPerfect;
      public bool totalGreat;
      public bool totalGood;
      public bool totalMiss;
      public bool totalMark;
      public bool totalMaxPerfectCombo;
      public bool totalMaxCombo;
      public bool totalMarkRate;
      public bool totalMasterPerfectRate;
      public bool avgGrade;
      public bool totalStars;
      public bool tourDanceResultMsg;
      public bool announcePassInfo;
    }

    public SCDanceMarkResultMsg() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                Marks = new List<MusicCodec.DanceMarkInfo>();
                TList _list16 = iprot.ReadListBegin();
                for( int _i17 = 0; _i17 < _list16.Count; ++_i17)
                {
                  MusicCodec.DanceMarkInfo _elem18 = new MusicCodec.DanceMarkInfo();
                  _elem18 = new MusicCodec.DanceMarkInfo();
                  _elem18.Read(iprot);
                  Marks.Add(_elem18);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I16) {
              Coupon = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Struct) {
              BattleInfo = new MusicCodec.BattleFinishInfo();
              BattleInfo.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I16) {
              Exp = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I16) {
              Cup = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I16) {
              AppendCoupon = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I16) {
              AppendExp = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.List) {
              {
                CardItemPrizes = new List<MusicCodec.ItemPrize>();
                TList _list19 = iprot.ReadListBegin();
                for( int _i20 = 0; _i20 < _list19.Count; ++_i20)
                {
                  MusicCodec.ItemPrize _elem21 = new MusicCodec.ItemPrize();
                  _elem21 = new MusicCodec.ItemPrize();
                  _elem21.Read(iprot);
                  CardItemPrizes.Add(_elem21);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I32) {
              TotalPerfect = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I32) {
              TotalGreat = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I32) {
              TotalGood = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.I32) {
              TotalMiss = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.I32) {
              TotalMark = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.I32) {
              TotalMaxPerfectCombo = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.I32) {
              TotalMaxCombo = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 16:
            if (field.Type == TType.I32) {
              TotalMarkRate = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 17:
            if (field.Type == TType.I32) {
              TotalMasterPerfectRate = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 18:
            if (field.Type == TType.Byte) {
              AvgGrade = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 19:
            if (field.Type == TType.Byte) {
              TotalStars = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.Struct) {
              TourDanceResultMsg = new MusicCodec.TourDancePassResult();
              TourDanceResultMsg.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 22:
            if (field.Type == TType.Struct) {
              AnnouncePassInfo = new MusicCodec.AnnouncePassInfo();
              AnnouncePassInfo.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
ClientLog.Instance.LogError("This function is deleted.");
}

    


  }

}
