/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SCChapterInfoResultMsg : TBase
  {
    private int _chapterTaskId;
    private int _chapterNameId;
    private int _musicid;
    private byte _level;
    private byte _mode;
    private List<MusicCodec.CourseTaskProcess> _couterProcessList;
    private MusicCodec.PrizeInfo _oneStarPrizeInfos;
    private MusicCodec.PrizeInfo _twoStarPrizeInfos;
    private MusicCodec.PrizeInfo _threeStarPrizeInfos;
    private MusicCodec.ChapterOperType _operType;

    public int ChapterTaskId
    {
      get
      {
        return _chapterTaskId;
      }
      set
      {
        __isset.chapterTaskId = true;
        this._chapterTaskId = value;
      }
    }

    public int ChapterNameId
    {
      get
      {
        return _chapterNameId;
      }
      set
      {
        __isset.chapterNameId = true;
        this._chapterNameId = value;
      }
    }

    public int Musicid
    {
      get
      {
        return _musicid;
      }
      set
      {
        __isset.musicid = true;
        this._musicid = value;
      }
    }

    public byte Level
    {
      get
      {
        return _level;
      }
      set
      {
        __isset.level = true;
        this._level = value;
      }
    }

    public byte Mode
    {
      get
      {
        return _mode;
      }
      set
      {
        __isset.mode = true;
        this._mode = value;
      }
    }

    public List<MusicCodec.CourseTaskProcess> CouterProcessList
    {
      get
      {
        return _couterProcessList;
      }
      set
      {
        __isset.couterProcessList = true;
        this._couterProcessList = value;
      }
    }

    /// <summary>
    /// 1ÐÇ½±Àø
    /// </summary>
    public MusicCodec.PrizeInfo OneStarPrizeInfos
    {
      get
      {
        return _oneStarPrizeInfos;
      }
      set
      {
        __isset.oneStarPrizeInfos = true;
        this._oneStarPrizeInfos = value;
      }
    }

    /// <summary>
    /// 2ÐÇ½±Àø
    /// </summary>
    public MusicCodec.PrizeInfo TwoStarPrizeInfos
    {
      get
      {
        return _twoStarPrizeInfos;
      }
      set
      {
        __isset.twoStarPrizeInfos = true;
        this._twoStarPrizeInfos = value;
      }
    }

    /// <summary>
    /// 3ÐÇ½±Àø
    /// </summary>
    public MusicCodec.PrizeInfo ThreeStarPrizeInfos
    {
      get
      {
        return _threeStarPrizeInfos;
      }
      set
      {
        __isset.threeStarPrizeInfos = true;
        this._threeStarPrizeInfos = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="MusicCodec.ChapterOperType"/>
    /// </summary>
    public MusicCodec.ChapterOperType OperType
    {
      get
      {
        return _operType;
      }
      set
      {
        __isset.operType = true;
        this._operType = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool chapterTaskId;
      public bool chapterNameId;
      public bool musicid;
      public bool level;
      public bool mode;
      public bool couterProcessList;
      public bool oneStarPrizeInfos;
      public bool twoStarPrizeInfos;
      public bool threeStarPrizeInfos;
      public bool operType;
    }

    public SCChapterInfoResultMsg() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              ChapterTaskId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              ChapterNameId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Musicid = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Byte) {
              Level = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Byte) {
              Mode = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.List) {
              {
                CouterProcessList = new List<MusicCodec.CourseTaskProcess>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  MusicCodec.CourseTaskProcess _elem2 = new MusicCodec.CourseTaskProcess();
                  _elem2 = new MusicCodec.CourseTaskProcess();
                  _elem2.Read(iprot);
                  CouterProcessList.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Struct) {
              OneStarPrizeInfos = new MusicCodec.PrizeInfo();
              OneStarPrizeInfos.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Struct) {
              TwoStarPrizeInfos = new MusicCodec.PrizeInfo();
              TwoStarPrizeInfos.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.Struct) {
              ThreeStarPrizeInfos = new MusicCodec.PrizeInfo();
              ThreeStarPrizeInfos.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I32) {
              OperType = (MusicCodec.ChapterOperType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
ClientLog.Instance.LogError("This function is deleted.");
}

    


  }

}
