/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  /// <summary>
  /// 舞蹈房间信息
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class DanceRoomInfo : TBase
  {
    private byte _lockState;
    private byte _mode;
    private byte _memberSexInfo;
    private int _roomId;
    private string _title;
    private bool _watch;
    private short _curDanceSize;
    private short _curWatchSize;
    private short _songId;
    private byte _lvl;
    private PlayerBaseInfo _leaderBaseInfo;
    private RoomState _state;
    private short _maxWatchSize;
    private CreateRoomType _roomType;
    private bool _isStick;

    public byte LockState
    {
      get
      {
        return _lockState;
      }
      set
      {
        __isset.lockState = true;
        this._lockState = value;
      }
    }

    public byte Mode
    {
      get
      {
        return _mode;
      }
      set
      {
        __isset.mode = true;
        this._mode = value;
      }
    }

    public byte MemberSexInfo
    {
      get
      {
        return _memberSexInfo;
      }
      set
      {
        __isset.memberSexInfo = true;
        this._memberSexInfo = value;
      }
    }

    public int RoomId
    {
      get
      {
        return _roomId;
      }
      set
      {
        __isset.roomId = true;
        this._roomId = value;
      }
    }

    public string Title
    {
      get
      {
        return _title;
      }
      set
      {
        __isset.title = true;
        this._title = value;
      }
    }

    public bool Watch
    {
      get
      {
        return _watch;
      }
      set
      {
        __isset.watch = true;
        this._watch = value;
      }
    }

    public short CurDanceSize
    {
      get
      {
        return _curDanceSize;
      }
      set
      {
        __isset.curDanceSize = true;
        this._curDanceSize = value;
      }
    }

    public short CurWatchSize
    {
      get
      {
        return _curWatchSize;
      }
      set
      {
        __isset.curWatchSize = true;
        this._curWatchSize = value;
      }
    }

    public short SongId
    {
      get
      {
        return _songId;
      }
      set
      {
        __isset.songId = true;
        this._songId = value;
      }
    }

    public byte Lvl
    {
      get
      {
        return _lvl;
      }
      set
      {
        __isset.lvl = true;
        this._lvl = value;
      }
    }

    public PlayerBaseInfo LeaderBaseInfo
    {
      get
      {
        return _leaderBaseInfo;
      }
      set
      {
        __isset.leaderBaseInfo = true;
        this._leaderBaseInfo = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="RoomState"/>
    /// </summary>
    public RoomState State
    {
      get
      {
        return _state;
      }
      set
      {
        __isset.state = true;
        this._state = value;
      }
    }

    public short MaxWatchSize
    {
      get
      {
        return _maxWatchSize;
      }
      set
      {
        __isset.maxWatchSize = true;
        this._maxWatchSize = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="CreateRoomType"/>
    /// </summary>
    public CreateRoomType RoomType
    {
      get
      {
        return _roomType;
      }
      set
      {
        __isset.roomType = true;
        this._roomType = value;
      }
    }

    public bool IsStick
    {
      get
      {
        return _isStick;
      }
      set
      {
        __isset.isStick = true;
        this._isStick = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool lockState;
      public bool mode;
      public bool memberSexInfo;
      public bool roomId;
      public bool title;
      public bool watch;
      public bool curDanceSize;
      public bool curWatchSize;
      public bool songId;
      public bool lvl;
      public bool leaderBaseInfo;
      public bool state;
      public bool maxWatchSize;
      public bool roomType;
      public bool isStick;
    }

    public DanceRoomInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Byte) {
              LockState = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Byte) {
              Mode = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Byte) {
              MemberSexInfo = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              RoomId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              Title = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Bool) {
              Watch = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I16) {
              CurDanceSize = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I16) {
              CurWatchSize = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I16) {
              SongId = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.Byte) {
              Lvl = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.Struct) {
              LeaderBaseInfo = new PlayerBaseInfo();
              LeaderBaseInfo.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.I32) {
              State = (RoomState)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.I16) {
              MaxWatchSize = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.I32) {
              RoomType = (CreateRoomType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.Bool) {
              IsStick = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("DanceRoomInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.lockState) {
        field.Name = "lockState";
        field.Type = TType.Byte;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(LockState);
        oprot.WriteFieldEnd();
      }
      if (__isset.mode) {
        field.Name = "mode";
        field.Type = TType.Byte;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Mode);
        oprot.WriteFieldEnd();
      }
      if (__isset.memberSexInfo) {
        field.Name = "memberSexInfo";
        field.Type = TType.Byte;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(MemberSexInfo);
        oprot.WriteFieldEnd();
      }
      if (__isset.roomId) {
        field.Name = "roomId";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(RoomId);
        oprot.WriteFieldEnd();
      }
      if (Title != null && __isset.title) {
        field.Name = "title";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Title);
        oprot.WriteFieldEnd();
      }
      if (__isset.watch) {
        field.Name = "watch";
        field.Type = TType.Bool;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Watch);
        oprot.WriteFieldEnd();
      }
      if (__isset.curDanceSize) {
        field.Name = "curDanceSize";
        field.Type = TType.I16;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(CurDanceSize);
        oprot.WriteFieldEnd();
      }
      if (__isset.curWatchSize) {
        field.Name = "curWatchSize";
        field.Type = TType.I16;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(CurWatchSize);
        oprot.WriteFieldEnd();
      }
      if (__isset.songId) {
        field.Name = "songId";
        field.Type = TType.I16;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(SongId);
        oprot.WriteFieldEnd();
      }
      if (__isset.lvl) {
        field.Name = "lvl";
        field.Type = TType.Byte;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Lvl);
        oprot.WriteFieldEnd();
      }
      if (LeaderBaseInfo != null && __isset.leaderBaseInfo) {
        field.Name = "leaderBaseInfo";
        field.Type = TType.Struct;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        LeaderBaseInfo.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.state) {
        field.Name = "state";
        field.Type = TType.I32;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)State);
        oprot.WriteFieldEnd();
      }
      if (__isset.maxWatchSize) {
        field.Name = "maxWatchSize";
        field.Type = TType.I16;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(MaxWatchSize);
        oprot.WriteFieldEnd();
      }
      if (__isset.roomType) {
        field.Name = "roomType";
        field.Type = TType.I32;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)RoomType);
        oprot.WriteFieldEnd();
      }
      if (__isset.isStick) {
        field.Name = "isStick";
        field.Type = TType.Bool;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsStick);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("DanceRoomInfo(");
      sb.Append("LockState: ");
      sb.Append(LockState);
      sb.Append(",Mode: ");
      sb.Append(Mode);
      sb.Append(",MemberSexInfo: ");
      sb.Append(MemberSexInfo);
      sb.Append(",RoomId: ");
      sb.Append(RoomId);
      sb.Append(",Title: ");
      sb.Append(Title);
      sb.Append(",Watch: ");
      sb.Append(Watch);
      sb.Append(",CurDanceSize: ");
      sb.Append(CurDanceSize);
      sb.Append(",CurWatchSize: ");
      sb.Append(CurWatchSize);
      sb.Append(",SongId: ");
      sb.Append(SongId);
      sb.Append(",Lvl: ");
      sb.Append(Lvl);
      sb.Append(",LeaderBaseInfo: ");
      sb.Append(LeaderBaseInfo== null ? "<null>" : LeaderBaseInfo.ToString());
      sb.Append(",State: ");
      sb.Append(State);
      sb.Append(",MaxWatchSize: ");
      sb.Append(MaxWatchSize);
      sb.Append(",RoomType: ");
      sb.Append(RoomType);
      sb.Append(",IsStick: ");
      sb.Append(IsStick);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
