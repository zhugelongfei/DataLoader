/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  /// <summary>
  /// 巡演关卡详细信息
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SCTourRaidDetailMsg : TBase
  {
    private short _chapterId;
    private short _raidId;
    private int _musicId;
    private List<MusicCodec.PassCond> _oneSPassConds;
    private List<MusicCodec.PassCond> _twoSPassConds;
    private List<MusicCodec.PassCond> _threeSPassConds;
    private List<MusicCodec.PassCond> _extraPassConds;
    private MusicCodec.PrizeInfo _prizeInfos;
    private MusicCodec.PrizeInfo _extraPrizeInfos;
    private int _cantPlayTipId;
    private List<string> _cantPlayTipArgvs;
    private int _allPassTipId;

    /// <summary>
    /// 章节id
    /// </summary>
    public short ChapterId
    {
      get
      {
        return _chapterId;
      }
      set
      {
        __isset.chapterId = true;
        this._chapterId = value;
      }
    }

    /// <summary>
    /// 关卡id
    /// </summary>
    public short RaidId
    {
      get
      {
        return _raidId;
      }
      set
      {
        __isset.raidId = true;
        this._raidId = value;
      }
    }

    /// <summary>
    /// 音乐id
    /// </summary>
    public int MusicId
    {
      get
      {
        return _musicId;
      }
      set
      {
        __isset.musicId = true;
        this._musicId = value;
      }
    }

    /// <summary>
    /// 1s普通通关条件信息
    /// </summary>
    public List<MusicCodec.PassCond> OneSPassConds
    {
      get
      {
        return _oneSPassConds;
      }
      set
      {
        __isset.oneSPassConds = true;
        this._oneSPassConds = value;
      }
    }

    /// <summary>
    /// 2s普通通关条件信息
    /// </summary>
    public List<MusicCodec.PassCond> TwoSPassConds
    {
      get
      {
        return _twoSPassConds;
      }
      set
      {
        __isset.twoSPassConds = true;
        this._twoSPassConds = value;
      }
    }

    /// <summary>
    /// 3s普通通关条件信息
    /// </summary>
    public List<MusicCodec.PassCond> ThreeSPassConds
    {
      get
      {
        return _threeSPassConds;
      }
      set
      {
        __isset.threeSPassConds = true;
        this._threeSPassConds = value;
      }
    }

    /// <summary>
    /// 额外通关条件信息
    /// </summary>
    public List<MusicCodec.PassCond> ExtraPassConds
    {
      get
      {
        return _extraPassConds;
      }
      set
      {
        __isset.extraPassConds = true;
        this._extraPassConds = value;
      }
    }

    /// <summary>
    /// 通关奖励
    /// </summary>
    public MusicCodec.PrizeInfo PrizeInfos
    {
      get
      {
        return _prizeInfos;
      }
      set
      {
        __isset.prizeInfos = true;
        this._prizeInfos = value;
      }
    }

    /// <summary>
    /// 额外奖励
    /// </summary>
    public MusicCodec.PrizeInfo ExtraPrizeInfos
    {
      get
      {
        return _extraPrizeInfos;
      }
      set
      {
        __isset.extraPrizeInfos = true;
        this._extraPrizeInfos = value;
      }
    }

    /// <summary>
    /// 不能进行的提示id
    /// </summary>
    public int CantPlayTipId
    {
      get
      {
        return _cantPlayTipId;
      }
      set
      {
        __isset.cantPlayTipId = true;
        this._cantPlayTipId = value;
      }
    }

    /// <summary>
    /// 不能进行的提示参数
    /// </summary>
    public List<string> CantPlayTipArgvs
    {
      get
      {
        return _cantPlayTipArgvs;
      }
      set
      {
        __isset.cantPlayTipArgvs = true;
        this._cantPlayTipArgvs = value;
      }
    }

    /// <summary>
    /// 3s通关， 不能进行关卡提示
    /// </summary>
    public int AllPassTipId
    {
      get
      {
        return _allPassTipId;
      }
      set
      {
        __isset.allPassTipId = true;
        this._allPassTipId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool chapterId;
      public bool raidId;
      public bool musicId;
      public bool oneSPassConds;
      public bool twoSPassConds;
      public bool threeSPassConds;
      public bool extraPassConds;
      public bool prizeInfos;
      public bool extraPrizeInfos;
      public bool cantPlayTipId;
      public bool cantPlayTipArgvs;
      public bool allPassTipId;
    }

    public SCTourRaidDetailMsg() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I16) {
              ChapterId = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I16) {
              RaidId = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              MusicId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.List) {
              {
                OneSPassConds = new List<MusicCodec.PassCond>();
                TList _list12 = iprot.ReadListBegin();
                for( int _i13 = 0; _i13 < _list12.Count; ++_i13)
                {
                  MusicCodec.PassCond _elem14 = new MusicCodec.PassCond();
                  _elem14 = new MusicCodec.PassCond();
                  _elem14.Read(iprot);
                  OneSPassConds.Add(_elem14);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.List) {
              {
                TwoSPassConds = new List<MusicCodec.PassCond>();
                TList _list15 = iprot.ReadListBegin();
                for( int _i16 = 0; _i16 < _list15.Count; ++_i16)
                {
                  MusicCodec.PassCond _elem17 = new MusicCodec.PassCond();
                  _elem17 = new MusicCodec.PassCond();
                  _elem17.Read(iprot);
                  TwoSPassConds.Add(_elem17);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.List) {
              {
                ThreeSPassConds = new List<MusicCodec.PassCond>();
                TList _list18 = iprot.ReadListBegin();
                for( int _i19 = 0; _i19 < _list18.Count; ++_i19)
                {
                  MusicCodec.PassCond _elem20 = new MusicCodec.PassCond();
                  _elem20 = new MusicCodec.PassCond();
                  _elem20.Read(iprot);
                  ThreeSPassConds.Add(_elem20);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.List) {
              {
                ExtraPassConds = new List<MusicCodec.PassCond>();
                TList _list21 = iprot.ReadListBegin();
                for( int _i22 = 0; _i22 < _list21.Count; ++_i22)
                {
                  MusicCodec.PassCond _elem23 = new MusicCodec.PassCond();
                  _elem23 = new MusicCodec.PassCond();
                  _elem23.Read(iprot);
                  ExtraPassConds.Add(_elem23);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Struct) {
              PrizeInfos = new MusicCodec.PrizeInfo();
              PrizeInfos.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.Struct) {
              ExtraPrizeInfos = new MusicCodec.PrizeInfo();
              ExtraPrizeInfos.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I32) {
              CantPlayTipId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.List) {
              {
                CantPlayTipArgvs = new List<string>();
                TList _list24 = iprot.ReadListBegin();
                for( int _i25 = 0; _i25 < _list24.Count; ++_i25)
                {
                  string _elem26 = null;
                  _elem26 = iprot.ReadString();
                  CantPlayTipArgvs.Add(_elem26);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.I32) {
              AllPassTipId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
ClientLog.Instance.LogError("This function is deleted.");
}

    


  }

}
