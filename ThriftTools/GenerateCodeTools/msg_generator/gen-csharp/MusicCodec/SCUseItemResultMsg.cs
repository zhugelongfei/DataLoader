/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SCUseItemResultMsg : TBase
  {
    private long _instanceId;
    private bool _result;
    private List<long> _targetCharIds;
    private long _userCharId;
    private List<MusicCodec.FuncParam> _funcRespParamList;
    private int _failMessageId;
    private List<string> _argv;

    public long InstanceId
    {
      get
      {
        return _instanceId;
      }
      set
      {
        __isset.instanceId = true;
        this._instanceId = value;
      }
    }

    public bool Result
    {
      get
      {
        return _result;
      }
      set
      {
        __isset.result = true;
        this._result = value;
      }
    }

    public List<long> TargetCharIds
    {
      get
      {
        return _targetCharIds;
      }
      set
      {
        __isset.targetCharIds = true;
        this._targetCharIds = value;
      }
    }

    public long UserCharId
    {
      get
      {
        return _userCharId;
      }
      set
      {
        __isset.userCharId = true;
        this._userCharId = value;
      }
    }

    public List<MusicCodec.FuncParam> FuncRespParamList
    {
      get
      {
        return _funcRespParamList;
      }
      set
      {
        __isset.funcRespParamList = true;
        this._funcRespParamList = value;
      }
    }

    public int FailMessageId
    {
      get
      {
        return _failMessageId;
      }
      set
      {
        __isset.failMessageId = true;
        this._failMessageId = value;
      }
    }

    public List<string> Argv
    {
      get
      {
        return _argv;
      }
      set
      {
        __isset.argv = true;
        this._argv = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool instanceId;
      public bool result;
      public bool targetCharIds;
      public bool userCharId;
      public bool funcRespParamList;
      public bool failMessageId;
      public bool argv;
    }

    public SCUseItemResultMsg() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              InstanceId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Bool) {
              Result = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                TargetCharIds = new List<long>();
                TList _list24 = iprot.ReadListBegin();
                for( int _i25 = 0; _i25 < _list24.Count; ++_i25)
                {
                  long _elem26 = 0;
                  _elem26 = iprot.ReadI64();
                  TargetCharIds.Add(_elem26);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I64) {
              UserCharId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.List) {
              {
                FuncRespParamList = new List<MusicCodec.FuncParam>();
                TList _list27 = iprot.ReadListBegin();
                for( int _i28 = 0; _i28 < _list27.Count; ++_i28)
                {
                  MusicCodec.FuncParam _elem29 = new MusicCodec.FuncParam();
                  _elem29 = new MusicCodec.FuncParam();
                  _elem29.Read(iprot);
                  FuncRespParamList.Add(_elem29);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              FailMessageId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.List) {
              {
                Argv = new List<string>();
                TList _list30 = iprot.ReadListBegin();
                for( int _i31 = 0; _i31 < _list30.Count; ++_i31)
                {
                  string _elem32 = null;
                  _elem32 = iprot.ReadString();
                  Argv.Add(_elem32);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
ClientLog.Instance.LogError("This function is deleted.");
}

    


  }

}
