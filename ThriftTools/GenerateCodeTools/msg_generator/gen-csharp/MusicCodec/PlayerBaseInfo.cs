/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class PlayerBaseInfo : TBase
  {
    private long _charId;
    private string _name;
    private byte _sex;
    private string _headIcon;
    private int _level;
    private short _popLevel;
    private byte _vipLevel;
    private short _tagId;
    private long _guildId;
    private string _guildName;
    private Dictionary<byte, int> _baseFashionIds;

    public long CharId
    {
      get
      {
        return _charId;
      }
      set
      {
        __isset.charId = true;
        this._charId = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public byte Sex
    {
      get
      {
        return _sex;
      }
      set
      {
        __isset.sex = true;
        this._sex = value;
      }
    }

    public string HeadIcon
    {
      get
      {
        return _headIcon;
      }
      set
      {
        __isset.headIcon = true;
        this._headIcon = value;
      }
    }

    public int Level
    {
      get
      {
        return _level;
      }
      set
      {
        __isset.level = true;
        this._level = value;
      }
    }

    public short PopLevel
    {
      get
      {
        return _popLevel;
      }
      set
      {
        __isset.popLevel = true;
        this._popLevel = value;
      }
    }

    public byte VipLevel
    {
      get
      {
        return _vipLevel;
      }
      set
      {
        __isset.vipLevel = true;
        this._vipLevel = value;
      }
    }

    public short TagId
    {
      get
      {
        return _tagId;
      }
      set
      {
        __isset.tagId = true;
        this._tagId = value;
      }
    }

    public long GuildId
    {
      get
      {
        return _guildId;
      }
      set
      {
        __isset.guildId = true;
        this._guildId = value;
      }
    }

    public string GuildName
    {
      get
      {
        return _guildName;
      }
      set
      {
        __isset.guildName = true;
        this._guildName = value;
      }
    }

    /// <summary>
    /// 时尚特权效果及头像框key:style val:id
    /// </summary>
    public Dictionary<byte, int> BaseFashionIds
    {
      get
      {
        return _baseFashionIds;
      }
      set
      {
        __isset.baseFashionIds = true;
        this._baseFashionIds = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool charId;
      public bool name;
      public bool sex;
      public bool headIcon;
      public bool level;
      public bool popLevel;
      public bool vipLevel;
      public bool tagId;
      public bool guildId;
      public bool guildName;
      public bool baseFashionIds;
    }

    public PlayerBaseInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              CharId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Byte) {
              Sex = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              HeadIcon = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              Level = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I16) {
              PopLevel = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Byte) {
              VipLevel = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I16) {
              TagId = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I64) {
              GuildId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.String) {
              GuildName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.Map) {
              {
                BaseFashionIds = new Dictionary<byte, int>();
                TMap _map20 = iprot.ReadMapBegin();
                for( int _i21 = 0; _i21 < _map20.Count; ++_i21)
                {
                  byte _key22;
                  int _val23;
                  _key22 = iprot.ReadByte();
                  _val23 = iprot.ReadI32();
                  BaseFashionIds[_key22] = _val23;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("PlayerBaseInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.charId) {
        field.Name = "charId";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CharId);
        oprot.WriteFieldEnd();
      }
      if (Name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
      }
      if (__isset.sex) {
        field.Name = "sex";
        field.Type = TType.Byte;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Sex);
        oprot.WriteFieldEnd();
      }
      if (HeadIcon != null && __isset.headIcon) {
        field.Name = "headIcon";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(HeadIcon);
        oprot.WriteFieldEnd();
      }
      if (__isset.level) {
        field.Name = "level";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Level);
        oprot.WriteFieldEnd();
      }
      if (__isset.popLevel) {
        field.Name = "popLevel";
        field.Type = TType.I16;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(PopLevel);
        oprot.WriteFieldEnd();
      }
      if (__isset.vipLevel) {
        field.Name = "vipLevel";
        field.Type = TType.Byte;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(VipLevel);
        oprot.WriteFieldEnd();
      }
      if (__isset.tagId) {
        field.Name = "tagId";
        field.Type = TType.I16;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(TagId);
        oprot.WriteFieldEnd();
      }
      if (__isset.guildId) {
        field.Name = "guildId";
        field.Type = TType.I64;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(GuildId);
        oprot.WriteFieldEnd();
      }
      if (GuildName != null && __isset.guildName) {
        field.Name = "guildName";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(GuildName);
        oprot.WriteFieldEnd();
      }
      if (BaseFashionIds != null && __isset.baseFashionIds) {
        field.Name = "baseFashionIds";
        field.Type = TType.Map;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.Byte, TType.I32, BaseFashionIds.Count));
          foreach (byte _iter24 in BaseFashionIds.Keys)
          {
            oprot.WriteByte(_iter24);
            oprot.WriteI32(BaseFashionIds[_iter24]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("PlayerBaseInfo(");
      sb.Append("CharId: ");
      sb.Append(CharId);
      sb.Append(",Name: ");
      sb.Append(Name);
      sb.Append(",Sex: ");
      sb.Append(Sex);
      sb.Append(",HeadIcon: ");
      sb.Append(HeadIcon);
      sb.Append(",Level: ");
      sb.Append(Level);
      sb.Append(",PopLevel: ");
      sb.Append(PopLevel);
      sb.Append(",VipLevel: ");
      sb.Append(VipLevel);
      sb.Append(",TagId: ");
      sb.Append(TagId);
      sb.Append(",GuildId: ");
      sb.Append(GuildId);
      sb.Append(",GuildName: ");
      sb.Append(GuildName);
      sb.Append(",BaseFashionIds: ");
      sb.Append(BaseFashionIds);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
