/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  /// <summary>
  /// 首充返回消息
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SCFirstRechargeInfo : TBase
  {
    private MusicCodec.FirstRechargeAwardState _state;
    private MusicCodec.PrizeInfo _prizeInfo;
    private byte _version;
    private string _desc;
    private int _specialId;

    /// <summary>
    /// 领取状态 true:领取 false:未领取
    /// 
    /// <seealso cref="MusicCodec.FirstRechargeAwardState"/>
    /// </summary>
    public MusicCodec.FirstRechargeAwardState State
    {
      get
      {
        return _state;
      }
      set
      {
        __isset.state = true;
        this._state = value;
      }
    }

    /// <summary>
    /// 首充奖励
    /// </summary>
    public MusicCodec.PrizeInfo PrizeInfo
    {
      get
      {
        return _prizeInfo;
      }
      set
      {
        __isset.prizeInfo = true;
        this._prizeInfo = value;
      }
    }

    /// <summary>
    /// 版本号
    /// </summary>
    public byte Version
    {
      get
      {
        return _version;
      }
      set
      {
        __isset.version = true;
        this._version = value;
      }
    }

    /// <summary>
    /// 活动信息描述
    /// </summary>
    public string Desc
    {
      get
      {
        return _desc;
      }
      set
      {
        __isset.desc = true;
        this._desc = value;
      }
    }

    /// <summary>
    /// 特效ID
    /// </summary>
    public int SpecialId
    {
      get
      {
        return _specialId;
      }
      set
      {
        __isset.specialId = true;
        this._specialId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool state;
      public bool prizeInfo;
      public bool version;
      public bool desc;
      public bool specialId;
    }

    public SCFirstRechargeInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              State = (MusicCodec.FirstRechargeAwardState)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              PrizeInfo = new MusicCodec.PrizeInfo();
              PrizeInfo.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Byte) {
              Version = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Desc = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              SpecialId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
ClientLog.Instance.LogError("This function is deleted.");
}

    


  }

}
