/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  /// <summary>
  /// 排行榜信息
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SCRankListMsg : TBase
  {
    private short _rankType;
    private List<MusicCodec.RankInfo> _rankInfoList;
    private int _selfRank;
    private long _selfScore;
    private int _startRank;
    private int _endRank;
    private int _rankCount;
    private MusicCodec.RankMusicQueryParam _muiscQueryParam;
    private int _validTime;

    public short RankType
    {
      get
      {
        return _rankType;
      }
      set
      {
        __isset.rankType = true;
        this._rankType = value;
      }
    }

    public List<MusicCodec.RankInfo> RankInfoList
    {
      get
      {
        return _rankInfoList;
      }
      set
      {
        __isset.rankInfoList = true;
        this._rankInfoList = value;
      }
    }

    public int SelfRank
    {
      get
      {
        return _selfRank;
      }
      set
      {
        __isset.selfRank = true;
        this._selfRank = value;
      }
    }

    public long SelfScore
    {
      get
      {
        return _selfScore;
      }
      set
      {
        __isset.selfScore = true;
        this._selfScore = value;
      }
    }

    public int StartRank
    {
      get
      {
        return _startRank;
      }
      set
      {
        __isset.startRank = true;
        this._startRank = value;
      }
    }

    public int EndRank
    {
      get
      {
        return _endRank;
      }
      set
      {
        __isset.endRank = true;
        this._endRank = value;
      }
    }

    public int RankCount
    {
      get
      {
        return _rankCount;
      }
      set
      {
        __isset.rankCount = true;
        this._rankCount = value;
      }
    }

    public MusicCodec.RankMusicQueryParam MuiscQueryParam
    {
      get
      {
        return _muiscQueryParam;
      }
      set
      {
        __isset.muiscQueryParam = true;
        this._muiscQueryParam = value;
      }
    }

    /// <summary>
    /// 有效截止时间（从1970.1.1开始的秒数）
    /// </summary>
    public int ValidTime
    {
      get
      {
        return _validTime;
      }
      set
      {
        __isset.validTime = true;
        this._validTime = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool rankType;
      public bool rankInfoList;
      public bool selfRank;
      public bool selfScore;
      public bool startRank;
      public bool endRank;
      public bool rankCount;
      public bool muiscQueryParam;
      public bool validTime;
    }

    public SCRankListMsg() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I16) {
              RankType = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                RankInfoList = new List<MusicCodec.RankInfo>();
                TList _list5 = iprot.ReadListBegin();
                for( int _i6 = 0; _i6 < _list5.Count; ++_i6)
                {
                  MusicCodec.RankInfo _elem7 = new MusicCodec.RankInfo();
                  _elem7 = new MusicCodec.RankInfo();
                  _elem7.Read(iprot);
                  RankInfoList.Add(_elem7);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              SelfRank = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I64) {
              SelfScore = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              StartRank = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              EndRank = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              RankCount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Struct) {
              MuiscQueryParam = new MusicCodec.RankMusicQueryParam();
              MuiscQueryParam.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I32) {
              ValidTime = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
ClientLog.Instance.LogError("This function is deleted.");
}

    


  }

}
