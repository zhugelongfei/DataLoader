/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  /// <summary>
  /// 红包详细信息
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SCLuckyMoneyDetialInfo : TBase
  {
    private long _luckyMoneyId;
    private MusicCodec.PlayerBaseInfo _sender;
    private int _totalNumber;
    private int _receivedNumber;
    private int _totalAmount;
    private string _words;
    private MusicCodec.LuckyMoneyType _type;
    private SCLuckyMoneyReceiverInfos _receivers;
    private int _receiveAmount;

    /// <summary>
    /// 红包ID
    /// </summary>
    public long LuckyMoneyId
    {
      get
      {
        return _luckyMoneyId;
      }
      set
      {
        __isset.luckyMoneyId = true;
        this._luckyMoneyId = value;
      }
    }

    /// <summary>
    /// 发送者信息
    /// </summary>
    public MusicCodec.PlayerBaseInfo Sender
    {
      get
      {
        return _sender;
      }
      set
      {
        __isset.sender = true;
        this._sender = value;
      }
    }

    /// <summary>
    /// 总个数
    /// </summary>
    public int TotalNumber
    {
      get
      {
        return _totalNumber;
      }
      set
      {
        __isset.totalNumber = true;
        this._totalNumber = value;
      }
    }

    /// <summary>
    /// 已经领取个数
    /// </summary>
    public int ReceivedNumber
    {
      get
      {
        return _receivedNumber;
      }
      set
      {
        __isset.receivedNumber = true;
        this._receivedNumber = value;
      }
    }

    /// <summary>
    /// 总金额
    /// </summary>
    public int TotalAmount
    {
      get
      {
        return _totalAmount;
      }
      set
      {
        __isset.totalAmount = true;
        this._totalAmount = value;
      }
    }

    /// <summary>
    /// 红包寄语
    /// </summary>
    public string Words
    {
      get
      {
        return _words;
      }
      set
      {
        __isset.words = true;
        this._words = value;
      }
    }

    /// <summary>
    /// 红包类型
    /// 
    /// <seealso cref="MusicCodec.LuckyMoneyType"/>
    /// </summary>
    public MusicCodec.LuckyMoneyType Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    /// <summary>
    /// 接受者信息
    /// </summary>
    public SCLuckyMoneyReceiverInfos Receivers
    {
      get
      {
        return _receivers;
      }
      set
      {
        __isset.receivers = true;
        this._receivers = value;
      }
    }

    /// <summary>
    /// 已经领取金额
    /// </summary>
    public int ReceiveAmount
    {
      get
      {
        return _receiveAmount;
      }
      set
      {
        __isset.receiveAmount = true;
        this._receiveAmount = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool luckyMoneyId;
      public bool sender;
      public bool totalNumber;
      public bool receivedNumber;
      public bool totalAmount;
      public bool words;
      public bool type;
      public bool receivers;
      public bool receiveAmount;
    }

    public SCLuckyMoneyDetialInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              LuckyMoneyId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              Sender = new MusicCodec.PlayerBaseInfo();
              Sender.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              TotalNumber = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              ReceivedNumber = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              TotalAmount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              Words = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              Type = (MusicCodec.LuckyMoneyType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Struct) {
              Receivers = new SCLuckyMoneyReceiverInfos();
              Receivers.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I32) {
              ReceiveAmount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
ClientLog.Instance.LogError("This function is deleted.");
}

    


  }

}
