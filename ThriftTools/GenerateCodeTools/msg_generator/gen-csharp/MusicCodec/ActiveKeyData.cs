/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ActiveKeyData : TBase
  {
    private short _activiyId;
    private string _activityName;
    private string _content;
    private MoneyPrize _moneyCost;
    private ItemPrize _itemPrize;
    private int _numberRemain;
    private int _numberMax;

    public short ActiviyId
    {
      get
      {
        return _activiyId;
      }
      set
      {
        __isset.activiyId = true;
        this._activiyId = value;
      }
    }

    public string ActivityName
    {
      get
      {
        return _activityName;
      }
      set
      {
        __isset.activityName = true;
        this._activityName = value;
      }
    }

    public string Content
    {
      get
      {
        return _content;
      }
      set
      {
        __isset.content = true;
        this._content = value;
      }
    }

    public MoneyPrize MoneyCost
    {
      get
      {
        return _moneyCost;
      }
      set
      {
        __isset.moneyCost = true;
        this._moneyCost = value;
      }
    }

    public ItemPrize ItemPrize
    {
      get
      {
        return _itemPrize;
      }
      set
      {
        __isset.itemPrize = true;
        this._itemPrize = value;
      }
    }

    public int NumberRemain
    {
      get
      {
        return _numberRemain;
      }
      set
      {
        __isset.numberRemain = true;
        this._numberRemain = value;
      }
    }

    public int NumberMax
    {
      get
      {
        return _numberMax;
      }
      set
      {
        __isset.numberMax = true;
        this._numberMax = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool activiyId;
      public bool activityName;
      public bool content;
      public bool moneyCost;
      public bool itemPrize;
      public bool numberRemain;
      public bool numberMax;
    }

    public ActiveKeyData() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I16) {
              ActiviyId = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              ActivityName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Content = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Struct) {
              MoneyCost = new MoneyPrize();
              MoneyCost.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Struct) {
              ItemPrize = new ItemPrize();
              ItemPrize.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              NumberRemain = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              NumberMax = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ActiveKeyData");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.activiyId) {
        field.Name = "activiyId";
        field.Type = TType.I16;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(ActiviyId);
        oprot.WriteFieldEnd();
      }
      if (ActivityName != null && __isset.activityName) {
        field.Name = "activityName";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ActivityName);
        oprot.WriteFieldEnd();
      }
      if (Content != null && __isset.content) {
        field.Name = "content";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Content);
        oprot.WriteFieldEnd();
      }
      if (MoneyCost != null && __isset.moneyCost) {
        field.Name = "moneyCost";
        field.Type = TType.Struct;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        MoneyCost.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (ItemPrize != null && __isset.itemPrize) {
        field.Name = "itemPrize";
        field.Type = TType.Struct;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        ItemPrize.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.numberRemain) {
        field.Name = "numberRemain";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NumberRemain);
        oprot.WriteFieldEnd();
      }
      if (__isset.numberMax) {
        field.Name = "numberMax";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NumberMax);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ActiveKeyData(");
      sb.Append("ActiviyId: ");
      sb.Append(ActiviyId);
      sb.Append(",ActivityName: ");
      sb.Append(ActivityName);
      sb.Append(",Content: ");
      sb.Append(Content);
      sb.Append(",MoneyCost: ");
      sb.Append(MoneyCost== null ? "<null>" : MoneyCost.ToString());
      sb.Append(",ItemPrize: ");
      sb.Append(ItemPrize== null ? "<null>" : ItemPrize.ToString());
      sb.Append(",NumberRemain: ");
      sb.Append(NumberRemain);
      sb.Append(",NumberMax: ");
      sb.Append(NumberMax);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
