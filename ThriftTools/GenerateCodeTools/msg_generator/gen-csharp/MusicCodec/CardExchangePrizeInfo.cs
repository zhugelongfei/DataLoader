/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CardExchangePrizeInfo : TBase
  {
    private string _title;
    private string _content;
    private byte _index;
    private string _prizeName;
    private PrizeInfo _prizeInfos;
    private List<CardItemInfo> _cardList;
    private int _exchangedCount;
    private int _exchangeTotalCount;

    public string Title
    {
      get
      {
        return _title;
      }
      set
      {
        __isset.title = true;
        this._title = value;
      }
    }

    public string Content
    {
      get
      {
        return _content;
      }
      set
      {
        __isset.content = true;
        this._content = value;
      }
    }

    public byte Index
    {
      get
      {
        return _index;
      }
      set
      {
        __isset.index = true;
        this._index = value;
      }
    }

    public string PrizeName
    {
      get
      {
        return _prizeName;
      }
      set
      {
        __isset.prizeName = true;
        this._prizeName = value;
      }
    }

    /// <summary>
    /// ½±Àø
    /// </summary>
    public PrizeInfo PrizeInfos
    {
      get
      {
        return _prizeInfos;
      }
      set
      {
        __isset.prizeInfos = true;
        this._prizeInfos = value;
      }
    }

    public List<CardItemInfo> CardList
    {
      get
      {
        return _cardList;
      }
      set
      {
        __isset.cardList = true;
        this._cardList = value;
      }
    }

    public int ExchangedCount
    {
      get
      {
        return _exchangedCount;
      }
      set
      {
        __isset.exchangedCount = true;
        this._exchangedCount = value;
      }
    }

    public int ExchangeTotalCount
    {
      get
      {
        return _exchangeTotalCount;
      }
      set
      {
        __isset.exchangeTotalCount = true;
        this._exchangeTotalCount = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool title;
      public bool content;
      public bool index;
      public bool prizeName;
      public bool prizeInfos;
      public bool cardList;
      public bool exchangedCount;
      public bool exchangeTotalCount;
    }

    public CardExchangePrizeInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Title = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Content = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Byte) {
              Index = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              PrizeName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Struct) {
              PrizeInfos = new PrizeInfo();
              PrizeInfos.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.List) {
              {
                CardList = new List<CardItemInfo>();
                TList _list223 = iprot.ReadListBegin();
                for( int _i224 = 0; _i224 < _list223.Count; ++_i224)
                {
                  CardItemInfo _elem225 = new CardItemInfo();
                  _elem225 = new CardItemInfo();
                  _elem225.Read(iprot);
                  CardList.Add(_elem225);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              ExchangedCount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              ExchangeTotalCount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("CardExchangePrizeInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Title != null && __isset.title) {
        field.Name = "title";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Title);
        oprot.WriteFieldEnd();
      }
      if (Content != null && __isset.content) {
        field.Name = "content";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Content);
        oprot.WriteFieldEnd();
      }
      if (__isset.index) {
        field.Name = "index";
        field.Type = TType.Byte;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Index);
        oprot.WriteFieldEnd();
      }
      if (PrizeName != null && __isset.prizeName) {
        field.Name = "prizeName";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(PrizeName);
        oprot.WriteFieldEnd();
      }
      if (PrizeInfos != null && __isset.prizeInfos) {
        field.Name = "prizeInfos";
        field.Type = TType.Struct;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        PrizeInfos.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (CardList != null && __isset.cardList) {
        field.Name = "cardList";
        field.Type = TType.List;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, CardList.Count));
          foreach (CardItemInfo _iter226 in CardList)
          {
            _iter226.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.exchangedCount) {
        field.Name = "exchangedCount";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ExchangedCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.exchangeTotalCount) {
        field.Name = "exchangeTotalCount";
        field.Type = TType.I32;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ExchangeTotalCount);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("CardExchangePrizeInfo(");
      sb.Append("Title: ");
      sb.Append(Title);
      sb.Append(",Content: ");
      sb.Append(Content);
      sb.Append(",Index: ");
      sb.Append(Index);
      sb.Append(",PrizeName: ");
      sb.Append(PrizeName);
      sb.Append(",PrizeInfos: ");
      sb.Append(PrizeInfos== null ? "<null>" : PrizeInfos.ToString());
      sb.Append(",CardList: ");
      sb.Append(CardList);
      sb.Append(",ExchangedCount: ");
      sb.Append(ExchangedCount);
      sb.Append(",ExchangeTotalCount: ");
      sb.Append(ExchangeTotalCount);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
