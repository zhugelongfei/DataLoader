/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  /// <summary>
  /// 舞蹈欢呼值初始信息
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class DanceCheerInitInfo : TBase
  {
    private List<int> _rankCheerVals;
    private int _initCheerVal;
    private List<PassCond> _extraPassConds;
    private int _npcInitCheerVal;
    private List<int> _npcSkillIds;

    /// <summary>
    /// s,ss,sss对应欢呼值
    /// </summary>
    public List<int> RankCheerVals
    {
      get
      {
        return _rankCheerVals;
      }
      set
      {
        __isset.rankCheerVals = true;
        this._rankCheerVals = value;
      }
    }

    /// <summary>
    /// 初始欢呼值
    /// </summary>
    public int InitCheerVal
    {
      get
      {
        return _initCheerVal;
      }
      set
      {
        __isset.initCheerVal = true;
        this._initCheerVal = value;
      }
    }

    /// <summary>
    /// 额外通关条件信息
    /// </summary>
    public List<PassCond> ExtraPassConds
    {
      get
      {
        return _extraPassConds;
      }
      set
      {
        __isset.extraPassConds = true;
        this._extraPassConds = value;
      }
    }

    /// <summary>
    /// npc初始欢呼值
    /// </summary>
    public int NpcInitCheerVal
    {
      get
      {
        return _npcInitCheerVal;
      }
      set
      {
        __isset.npcInitCheerVal = true;
        this._npcInitCheerVal = value;
      }
    }

    /// <summary>
    /// npc释放技能序列
    /// </summary>
    public List<int> NpcSkillIds
    {
      get
      {
        return _npcSkillIds;
      }
      set
      {
        __isset.npcSkillIds = true;
        this._npcSkillIds = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool rankCheerVals;
      public bool initCheerVal;
      public bool extraPassConds;
      public bool npcInitCheerVal;
      public bool npcSkillIds;
    }

    public DanceCheerInitInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                RankCheerVals = new List<int>();
                TList _list298 = iprot.ReadListBegin();
                for( int _i299 = 0; _i299 < _list298.Count; ++_i299)
                {
                  int _elem300 = 0;
                  _elem300 = iprot.ReadI32();
                  RankCheerVals.Add(_elem300);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              InitCheerVal = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                ExtraPassConds = new List<PassCond>();
                TList _list301 = iprot.ReadListBegin();
                for( int _i302 = 0; _i302 < _list301.Count; ++_i302)
                {
                  PassCond _elem303 = new PassCond();
                  _elem303 = new PassCond();
                  _elem303.Read(iprot);
                  ExtraPassConds.Add(_elem303);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              NpcInitCheerVal = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.List) {
              {
                NpcSkillIds = new List<int>();
                TList _list304 = iprot.ReadListBegin();
                for( int _i305 = 0; _i305 < _list304.Count; ++_i305)
                {
                  int _elem306 = 0;
                  _elem306 = iprot.ReadI32();
                  NpcSkillIds.Add(_elem306);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("DanceCheerInitInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (RankCheerVals != null && __isset.rankCheerVals) {
        field.Name = "rankCheerVals";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, RankCheerVals.Count));
          foreach (int _iter307 in RankCheerVals)
          {
            oprot.WriteI32(_iter307);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.initCheerVal) {
        field.Name = "initCheerVal";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(InitCheerVal);
        oprot.WriteFieldEnd();
      }
      if (ExtraPassConds != null && __isset.extraPassConds) {
        field.Name = "extraPassConds";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, ExtraPassConds.Count));
          foreach (PassCond _iter308 in ExtraPassConds)
          {
            _iter308.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.npcInitCheerVal) {
        field.Name = "npcInitCheerVal";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NpcInitCheerVal);
        oprot.WriteFieldEnd();
      }
      if (NpcSkillIds != null && __isset.npcSkillIds) {
        field.Name = "npcSkillIds";
        field.Type = TType.List;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, NpcSkillIds.Count));
          foreach (int _iter309 in NpcSkillIds)
          {
            oprot.WriteI32(_iter309);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("DanceCheerInitInfo(");
      sb.Append("RankCheerVals: ");
      sb.Append(RankCheerVals);
      sb.Append(",InitCheerVal: ");
      sb.Append(InitCheerVal);
      sb.Append(",ExtraPassConds: ");
      sb.Append(ExtraPassConds);
      sb.Append(",NpcInitCheerVal: ");
      sb.Append(NpcInitCheerVal);
      sb.Append(",NpcSkillIds: ");
      sb.Append(NpcSkillIds);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
