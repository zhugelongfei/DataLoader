/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CourseTaskProcess : TBase
  {
    private int _messageId;
    private int _intCount;
    private int _maxIntCount;
    private double _doubleCount;
    private double _maxDoubleCount;

    public int MessageId
    {
      get
      {
        return _messageId;
      }
      set
      {
        __isset.messageId = true;
        this._messageId = value;
      }
    }

    public int IntCount
    {
      get
      {
        return _intCount;
      }
      set
      {
        __isset.intCount = true;
        this._intCount = value;
      }
    }

    public int MaxIntCount
    {
      get
      {
        return _maxIntCount;
      }
      set
      {
        __isset.maxIntCount = true;
        this._maxIntCount = value;
      }
    }

    public double DoubleCount
    {
      get
      {
        return _doubleCount;
      }
      set
      {
        __isset.doubleCount = true;
        this._doubleCount = value;
      }
    }

    public double MaxDoubleCount
    {
      get
      {
        return _maxDoubleCount;
      }
      set
      {
        __isset.maxDoubleCount = true;
        this._maxDoubleCount = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool messageId;
      public bool intCount;
      public bool maxIntCount;
      public bool doubleCount;
      public bool maxDoubleCount;
    }

    public CourseTaskProcess() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              MessageId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              IntCount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              MaxIntCount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Double) {
              DoubleCount = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Double) {
              MaxDoubleCount = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("CourseTaskProcess");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.messageId) {
        field.Name = "messageId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MessageId);
        oprot.WriteFieldEnd();
      }
      if (__isset.intCount) {
        field.Name = "intCount";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(IntCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.maxIntCount) {
        field.Name = "maxIntCount";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MaxIntCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.doubleCount) {
        field.Name = "doubleCount";
        field.Type = TType.Double;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(DoubleCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.maxDoubleCount) {
        field.Name = "maxDoubleCount";
        field.Type = TType.Double;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(MaxDoubleCount);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("CourseTaskProcess(");
      sb.Append("MessageId: ");
      sb.Append(MessageId);
      sb.Append(",IntCount: ");
      sb.Append(IntCount);
      sb.Append(",MaxIntCount: ");
      sb.Append(MaxIntCount);
      sb.Append(",DoubleCount: ");
      sb.Append(DoubleCount);
      sb.Append(",MaxDoubleCount: ");
      sb.Append(MaxDoubleCount);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
