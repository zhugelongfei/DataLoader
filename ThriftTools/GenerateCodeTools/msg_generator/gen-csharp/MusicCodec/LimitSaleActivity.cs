/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class LimitSaleActivity : TBase
  {
    private int _sortId;
    private int _activityId;
    private string _name;
    private string _description;
    private int _limitVipLevel;
    private List<LimitSaleTime> _limitTime;

    public int SortId
    {
      get
      {
        return _sortId;
      }
      set
      {
        __isset.sortId = true;
        this._sortId = value;
      }
    }

    public int ActivityId
    {
      get
      {
        return _activityId;
      }
      set
      {
        __isset.activityId = true;
        this._activityId = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public string Description
    {
      get
      {
        return _description;
      }
      set
      {
        __isset.description = true;
        this._description = value;
      }
    }

    public int LimitVipLevel
    {
      get
      {
        return _limitVipLevel;
      }
      set
      {
        __isset.limitVipLevel = true;
        this._limitVipLevel = value;
      }
    }

    public List<LimitSaleTime> LimitTime
    {
      get
      {
        return _limitTime;
      }
      set
      {
        __isset.limitTime = true;
        this._limitTime = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool sortId;
      public bool activityId;
      public bool name;
      public bool description;
      public bool limitVipLevel;
      public bool limitTime;
    }

    public LimitSaleActivity() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              SortId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              ActivityId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Description = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              LimitVipLevel = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.List) {
              {
                LimitTime = new List<LimitSaleTime>();
                TList _list294 = iprot.ReadListBegin();
                for( int _i295 = 0; _i295 < _list294.Count; ++_i295)
                {
                  LimitSaleTime _elem296 = new LimitSaleTime();
                  _elem296 = new LimitSaleTime();
                  _elem296.Read(iprot);
                  LimitTime.Add(_elem296);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("LimitSaleActivity");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.sortId) {
        field.Name = "sortId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SortId);
        oprot.WriteFieldEnd();
      }
      if (__isset.activityId) {
        field.Name = "activityId";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ActivityId);
        oprot.WriteFieldEnd();
      }
      if (Name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
      }
      if (Description != null && __isset.description) {
        field.Name = "description";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Description);
        oprot.WriteFieldEnd();
      }
      if (__isset.limitVipLevel) {
        field.Name = "limitVipLevel";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(LimitVipLevel);
        oprot.WriteFieldEnd();
      }
      if (LimitTime != null && __isset.limitTime) {
        field.Name = "limitTime";
        field.Type = TType.List;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, LimitTime.Count));
          foreach (LimitSaleTime _iter297 in LimitTime)
          {
            _iter297.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("LimitSaleActivity(");
      sb.Append("SortId: ");
      sb.Append(SortId);
      sb.Append(",ActivityId: ");
      sb.Append(ActivityId);
      sb.Append(",Name: ");
      sb.Append(Name);
      sb.Append(",Description: ");
      sb.Append(Description);
      sb.Append(",LimitVipLevel: ");
      sb.Append(LimitVipLevel);
      sb.Append(",LimitTime: ");
      sb.Append(LimitTime);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
