/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SCUpdateGuildBaseInfoMsg : TBase
  {
    private string _guildName;
    private MusicCodec.GuildMemInfo _leaderInfo;
    private string _guildIcon;
    private string _noticeBoard;
    private short _memberCount;
    private short _averageLevel;
    private long _popularityCount;
    private int _vipExpCount;
    private short _limitCount;
    private int _honor;
    private int _level;
    private int _assistantCount;
    private byte[] _flags;
    private List<byte> _byteDayLoopCounterList;
    private List<short> _shortDayLoopCounterList;
    private List<int> _intDayLoopCounterList;
    private List<int> _intCounterList;
    private int _guildExp;
    private int _honorLevel;

    public string GuildName
    {
      get
      {
        return _guildName;
      }
      set
      {
        __isset.guildName = true;
        this._guildName = value;
      }
    }

    public MusicCodec.GuildMemInfo LeaderInfo
    {
      get
      {
        return _leaderInfo;
      }
      set
      {
        __isset.leaderInfo = true;
        this._leaderInfo = value;
      }
    }

    public string GuildIcon
    {
      get
      {
        return _guildIcon;
      }
      set
      {
        __isset.guildIcon = true;
        this._guildIcon = value;
      }
    }

    public string NoticeBoard
    {
      get
      {
        return _noticeBoard;
      }
      set
      {
        __isset.noticeBoard = true;
        this._noticeBoard = value;
      }
    }

    public short MemberCount
    {
      get
      {
        return _memberCount;
      }
      set
      {
        __isset.memberCount = true;
        this._memberCount = value;
      }
    }

    public short AverageLevel
    {
      get
      {
        return _averageLevel;
      }
      set
      {
        __isset.averageLevel = true;
        this._averageLevel = value;
      }
    }

    public long PopularityCount
    {
      get
      {
        return _popularityCount;
      }
      set
      {
        __isset.popularityCount = true;
        this._popularityCount = value;
      }
    }

    public int VipExpCount
    {
      get
      {
        return _vipExpCount;
      }
      set
      {
        __isset.vipExpCount = true;
        this._vipExpCount = value;
      }
    }

    public short LimitCount
    {
      get
      {
        return _limitCount;
      }
      set
      {
        __isset.limitCount = true;
        this._limitCount = value;
      }
    }

    public int Honor
    {
      get
      {
        return _honor;
      }
      set
      {
        __isset.honor = true;
        this._honor = value;
      }
    }

    public int Level
    {
      get
      {
        return _level;
      }
      set
      {
        __isset.level = true;
        this._level = value;
      }
    }

    public int AssistantCount
    {
      get
      {
        return _assistantCount;
      }
      set
      {
        __isset.assistantCount = true;
        this._assistantCount = value;
      }
    }

    public byte[] Flags
    {
      get
      {
        return _flags;
      }
      set
      {
        __isset.flags = true;
        this._flags = value;
      }
    }

    public List<byte> ByteDayLoopCounterList
    {
      get
      {
        return _byteDayLoopCounterList;
      }
      set
      {
        __isset.byteDayLoopCounterList = true;
        this._byteDayLoopCounterList = value;
      }
    }

    public List<short> ShortDayLoopCounterList
    {
      get
      {
        return _shortDayLoopCounterList;
      }
      set
      {
        __isset.shortDayLoopCounterList = true;
        this._shortDayLoopCounterList = value;
      }
    }

    public List<int> IntDayLoopCounterList
    {
      get
      {
        return _intDayLoopCounterList;
      }
      set
      {
        __isset.intDayLoopCounterList = true;
        this._intDayLoopCounterList = value;
      }
    }

    public List<int> IntCounterList
    {
      get
      {
        return _intCounterList;
      }
      set
      {
        __isset.intCounterList = true;
        this._intCounterList = value;
      }
    }

    public int GuildExp
    {
      get
      {
        return _guildExp;
      }
      set
      {
        __isset.guildExp = true;
        this._guildExp = value;
      }
    }

    public int HonorLevel
    {
      get
      {
        return _honorLevel;
      }
      set
      {
        __isset.honorLevel = true;
        this._honorLevel = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool guildName;
      public bool leaderInfo;
      public bool guildIcon;
      public bool noticeBoard;
      public bool memberCount;
      public bool averageLevel;
      public bool popularityCount;
      public bool vipExpCount;
      public bool limitCount;
      public bool honor;
      public bool level;
      public bool assistantCount;
      public bool flags;
      public bool byteDayLoopCounterList;
      public bool shortDayLoopCounterList;
      public bool intDayLoopCounterList;
      public bool intCounterList;
      public bool guildExp;
      public bool honorLevel;
    }

    public SCUpdateGuildBaseInfoMsg() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              GuildName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              LeaderInfo = new MusicCodec.GuildMemInfo();
              LeaderInfo.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              GuildIcon = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              NoticeBoard = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I16) {
              MemberCount = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I16) {
              AverageLevel = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I64) {
              PopularityCount = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              VipExpCount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I16) {
              LimitCount = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I32) {
              Honor = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I32) {
              Level = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.I32) {
              AssistantCount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.String) {
              Flags = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.List) {
              {
                ByteDayLoopCounterList = new List<byte>();
                TList _list12 = iprot.ReadListBegin();
                for( int _i13 = 0; _i13 < _list12.Count; ++_i13)
                {
                  byte _elem14 = 0;
                  _elem14 = iprot.ReadByte();
                  ByteDayLoopCounterList.Add(_elem14);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.List) {
              {
                ShortDayLoopCounterList = new List<short>();
                TList _list15 = iprot.ReadListBegin();
                for( int _i16 = 0; _i16 < _list15.Count; ++_i16)
                {
                  short _elem17 = 0;
                  _elem17 = iprot.ReadI16();
                  ShortDayLoopCounterList.Add(_elem17);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 16:
            if (field.Type == TType.List) {
              {
                IntDayLoopCounterList = new List<int>();
                TList _list18 = iprot.ReadListBegin();
                for( int _i19 = 0; _i19 < _list18.Count; ++_i19)
                {
                  int _elem20 = 0;
                  _elem20 = iprot.ReadI32();
                  IntDayLoopCounterList.Add(_elem20);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 17:
            if (field.Type == TType.List) {
              {
                IntCounterList = new List<int>();
                TList _list21 = iprot.ReadListBegin();
                for( int _i22 = 0; _i22 < _list21.Count; ++_i22)
                {
                  int _elem23 = 0;
                  _elem23 = iprot.ReadI32();
                  IntCounterList.Add(_elem23);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 18:
            if (field.Type == TType.I32) {
              GuildExp = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 19:
            if (field.Type == TType.I32) {
              HonorLevel = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
ClientLog.Instance.LogError("This function is deleted.");
}

    


  }

}
