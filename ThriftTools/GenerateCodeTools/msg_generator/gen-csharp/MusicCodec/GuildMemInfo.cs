/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class GuildMemInfo : TBase
  {
    private PlayerBaseInfo _playBaseInfo;
    private string _moodMessage;
    private GuildDegree _degree;
    private double _longitude;
    private double _latitude;
    private bool _online;
    private int _lastSignInDate;
    private int _donateValue;
    private bool _open;
    private string _location;
    private int _lastWeekDonation;
    private int _signInDays;

    public PlayerBaseInfo PlayBaseInfo
    {
      get
      {
        return _playBaseInfo;
      }
      set
      {
        __isset.playBaseInfo = true;
        this._playBaseInfo = value;
      }
    }

    public string MoodMessage
    {
      get
      {
        return _moodMessage;
      }
      set
      {
        __isset.moodMessage = true;
        this._moodMessage = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="GuildDegree"/>
    /// </summary>
    public GuildDegree Degree
    {
      get
      {
        return _degree;
      }
      set
      {
        __isset.degree = true;
        this._degree = value;
      }
    }

    public double Longitude
    {
      get
      {
        return _longitude;
      }
      set
      {
        __isset.longitude = true;
        this._longitude = value;
      }
    }

    public double Latitude
    {
      get
      {
        return _latitude;
      }
      set
      {
        __isset.latitude = true;
        this._latitude = value;
      }
    }

    public bool Online
    {
      get
      {
        return _online;
      }
      set
      {
        __isset.online = true;
        this._online = value;
      }
    }

    public int LastSignInDate
    {
      get
      {
        return _lastSignInDate;
      }
      set
      {
        __isset.lastSignInDate = true;
        this._lastSignInDate = value;
      }
    }

    public int DonateValue
    {
      get
      {
        return _donateValue;
      }
      set
      {
        __isset.donateValue = true;
        this._donateValue = value;
      }
    }

    public bool Open
    {
      get
      {
        return _open;
      }
      set
      {
        __isset.open = true;
        this._open = value;
      }
    }

    public string Location
    {
      get
      {
        return _location;
      }
      set
      {
        __isset.location = true;
        this._location = value;
      }
    }

    public int LastWeekDonation
    {
      get
      {
        return _lastWeekDonation;
      }
      set
      {
        __isset.lastWeekDonation = true;
        this._lastWeekDonation = value;
      }
    }

    public int SignInDays
    {
      get
      {
        return _signInDays;
      }
      set
      {
        __isset.signInDays = true;
        this._signInDays = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool playBaseInfo;
      public bool moodMessage;
      public bool degree;
      public bool longitude;
      public bool latitude;
      public bool online;
      public bool lastSignInDate;
      public bool donateValue;
      public bool open;
      public bool location;
      public bool lastWeekDonation;
      public bool signInDays;
    }

    public GuildMemInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              PlayBaseInfo = new PlayerBaseInfo();
              PlayBaseInfo.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              MoodMessage = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Degree = (GuildDegree)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Double) {
              Longitude = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Double) {
              Latitude = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Bool) {
              Online = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              LastSignInDate = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              DonateValue = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.Bool) {
              Open = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.String) {
              Location = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I32) {
              LastWeekDonation = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.I32) {
              SignInDays = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("GuildMemInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (PlayBaseInfo != null && __isset.playBaseInfo) {
        field.Name = "playBaseInfo";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        PlayBaseInfo.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (MoodMessage != null && __isset.moodMessage) {
        field.Name = "moodMessage";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(MoodMessage);
        oprot.WriteFieldEnd();
      }
      if (__isset.degree) {
        field.Name = "degree";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)Degree);
        oprot.WriteFieldEnd();
      }
      if (__isset.longitude) {
        field.Name = "longitude";
        field.Type = TType.Double;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Longitude);
        oprot.WriteFieldEnd();
      }
      if (__isset.latitude) {
        field.Name = "latitude";
        field.Type = TType.Double;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Latitude);
        oprot.WriteFieldEnd();
      }
      if (__isset.online) {
        field.Name = "online";
        field.Type = TType.Bool;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Online);
        oprot.WriteFieldEnd();
      }
      if (__isset.lastSignInDate) {
        field.Name = "lastSignInDate";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(LastSignInDate);
        oprot.WriteFieldEnd();
      }
      if (__isset.donateValue) {
        field.Name = "donateValue";
        field.Type = TType.I32;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DonateValue);
        oprot.WriteFieldEnd();
      }
      if (__isset.open) {
        field.Name = "open";
        field.Type = TType.Bool;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Open);
        oprot.WriteFieldEnd();
      }
      if (Location != null && __isset.location) {
        field.Name = "location";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Location);
        oprot.WriteFieldEnd();
      }
      if (__isset.lastWeekDonation) {
        field.Name = "lastWeekDonation";
        field.Type = TType.I32;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(LastWeekDonation);
        oprot.WriteFieldEnd();
      }
      if (__isset.signInDays) {
        field.Name = "signInDays";
        field.Type = TType.I32;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SignInDays);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("GuildMemInfo(");
      sb.Append("PlayBaseInfo: ");
      sb.Append(PlayBaseInfo== null ? "<null>" : PlayBaseInfo.ToString());
      sb.Append(",MoodMessage: ");
      sb.Append(MoodMessage);
      sb.Append(",Degree: ");
      sb.Append(Degree);
      sb.Append(",Longitude: ");
      sb.Append(Longitude);
      sb.Append(",Latitude: ");
      sb.Append(Latitude);
      sb.Append(",Online: ");
      sb.Append(Online);
      sb.Append(",LastSignInDate: ");
      sb.Append(LastSignInDate);
      sb.Append(",DonateValue: ");
      sb.Append(DonateValue);
      sb.Append(",Open: ");
      sb.Append(Open);
      sb.Append(",Location: ");
      sb.Append(Location);
      sb.Append(",LastWeekDonation: ");
      sb.Append(LastWeekDonation);
      sb.Append(",SignInDays: ");
      sb.Append(SignInDays);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
