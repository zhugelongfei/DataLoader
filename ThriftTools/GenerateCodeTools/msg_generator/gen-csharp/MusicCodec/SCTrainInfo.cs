/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  /// <summary>
  /// 训练信息
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SCTrainInfo : TBase
  {
    private int _version;
    private short _starLvl;
    private short _todayLeftTrainCount;
    private short _todayBuyTrainCount;
    private Dictionary<byte, TrainOccupationData> _occuptionDatas;

    /// <summary>
    /// 更新客户端版本号
    /// </summary>
    public int Version
    {
      get
      {
        return _version;
      }
      set
      {
        __isset.version = true;
        this._version = value;
      }
    }

    /// <summary>
    /// 当前星光等级
    /// </summary>
    public short StarLvl
    {
      get
      {
        return _starLvl;
      }
      set
      {
        __isset.starLvl = true;
        this._starLvl = value;
      }
    }

    /// <summary>
    /// 今天剩余训练次数
    /// </summary>
    public short TodayLeftTrainCount
    {
      get
      {
        return _todayLeftTrainCount;
      }
      set
      {
        __isset.todayLeftTrainCount = true;
        this._todayLeftTrainCount = value;
      }
    }

    /// <summary>
    /// 今天购买训练次数
    /// </summary>
    public short TodayBuyTrainCount
    {
      get
      {
        return _todayBuyTrainCount;
      }
      set
      {
        __isset.todayBuyTrainCount = true;
        this._todayBuyTrainCount = value;
      }
    }

    /// <summary>
    /// 各职业ETrainOccupation等级经验数据
    /// </summary>
    public Dictionary<byte, TrainOccupationData> OccuptionDatas
    {
      get
      {
        return _occuptionDatas;
      }
      set
      {
        __isset.occuptionDatas = true;
        this._occuptionDatas = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool version;
      public bool starLvl;
      public bool todayLeftTrainCount;
      public bool todayBuyTrainCount;
      public bool occuptionDatas;
    }

    public SCTrainInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Version = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I16) {
              StarLvl = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I16) {
              TodayLeftTrainCount = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I16) {
              TodayBuyTrainCount = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Map) {
              {
                OccuptionDatas = new Dictionary<byte, TrainOccupationData>();
                TMap _map0 = iprot.ReadMapBegin();
                for( int _i1 = 0; _i1 < _map0.Count; ++_i1)
                {
                  byte _key2;
                  TrainOccupationData _val3;
                  _key2 = iprot.ReadByte();
                  _val3 = new TrainOccupationData();
                  _val3.Read(iprot);
                  OccuptionDatas[_key2] = _val3;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
ClientLog.Instance.LogError("This function is deleted.");
}

    


  }

}
