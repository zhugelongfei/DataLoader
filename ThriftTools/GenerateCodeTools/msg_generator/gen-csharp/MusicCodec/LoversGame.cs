/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class LoversGame : TBase
  {
    private byte _gameType;
    private short _gameId;
    private Dictionary<long, byte> _aqIndexMap;
    private List<byte> _answerIndexList;

    public byte GameType
    {
      get
      {
        return _gameType;
      }
      set
      {
        __isset.gameType = true;
        this._gameType = value;
      }
    }

    public short GameId
    {
      get
      {
        return _gameId;
      }
      set
      {
        __isset.gameId = true;
        this._gameId = value;
      }
    }

    public Dictionary<long, byte> AqIndexMap
    {
      get
      {
        return _aqIndexMap;
      }
      set
      {
        __isset.aqIndexMap = true;
        this._aqIndexMap = value;
      }
    }

    public List<byte> AnswerIndexList
    {
      get
      {
        return _answerIndexList;
      }
      set
      {
        __isset.answerIndexList = true;
        this._answerIndexList = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool gameType;
      public bool gameId;
      public bool aqIndexMap;
      public bool answerIndexList;
    }

    public LoversGame() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Byte) {
              GameType = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I16) {
              GameId = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Map) {
              {
                AqIndexMap = new Dictionary<long, byte>();
                TMap _map243 = iprot.ReadMapBegin();
                for( int _i244 = 0; _i244 < _map243.Count; ++_i244)
                {
                  long _key245;
                  byte _val246;
                  _key245 = iprot.ReadI64();
                  _val246 = iprot.ReadByte();
                  AqIndexMap[_key245] = _val246;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.List) {
              {
                AnswerIndexList = new List<byte>();
                TList _list247 = iprot.ReadListBegin();
                for( int _i248 = 0; _i248 < _list247.Count; ++_i248)
                {
                  byte _elem249 = 0;
                  _elem249 = iprot.ReadByte();
                  AnswerIndexList.Add(_elem249);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("LoversGame");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.gameType) {
        field.Name = "gameType";
        field.Type = TType.Byte;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(GameType);
        oprot.WriteFieldEnd();
      }
      if (__isset.gameId) {
        field.Name = "gameId";
        field.Type = TType.I16;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(GameId);
        oprot.WriteFieldEnd();
      }
      if (AqIndexMap != null && __isset.aqIndexMap) {
        field.Name = "aqIndexMap";
        field.Type = TType.Map;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I64, TType.Byte, AqIndexMap.Count));
          foreach (long _iter250 in AqIndexMap.Keys)
          {
            oprot.WriteI64(_iter250);
            oprot.WriteByte(AqIndexMap[_iter250]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (AnswerIndexList != null && __isset.answerIndexList) {
        field.Name = "answerIndexList";
        field.Type = TType.List;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Byte, AnswerIndexList.Count));
          foreach (byte _iter251 in AnswerIndexList)
          {
            oprot.WriteByte(_iter251);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("LoversGame(");
      sb.Append("GameType: ");
      sb.Append(GameType);
      sb.Append(",GameId: ");
      sb.Append(GameId);
      sb.Append(",AqIndexMap: ");
      sb.Append(AqIndexMap);
      sb.Append(",AnswerIndexList: ");
      sb.Append(AnswerIndexList);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
