/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class PartnerInfo : TBase
  {
    private short _modelId;
    private byte _bodyAdjVal;
    private List<AvatarInfo> _avatarInfos;
    private bool _robot;
    private int _robotScore;
    private List<byte> _robotKeyResultList;
    private byte _stature;
    private short _rank;
    private PlayerBaseInfo _playerBaseInfo;
    private int _skinColor;
    private List<BadgeInfo> _putOnBadges;
    private Dictionary<byte, int> _danceFashionIds;

    public short ModelId
    {
      get
      {
        return _modelId;
      }
      set
      {
        __isset.modelId = true;
        this._modelId = value;
      }
    }

    public byte BodyAdjVal
    {
      get
      {
        return _bodyAdjVal;
      }
      set
      {
        __isset.bodyAdjVal = true;
        this._bodyAdjVal = value;
      }
    }

    public List<AvatarInfo> AvatarInfos
    {
      get
      {
        return _avatarInfos;
      }
      set
      {
        __isset.avatarInfos = true;
        this._avatarInfos = value;
      }
    }

    public bool Robot
    {
      get
      {
        return _robot;
      }
      set
      {
        __isset.robot = true;
        this._robot = value;
      }
    }

    public int RobotScore
    {
      get
      {
        return _robotScore;
      }
      set
      {
        __isset.robotScore = true;
        this._robotScore = value;
      }
    }

    /// <summary>
    /// only traditional mode
    /// </summary>
    public List<byte> RobotKeyResultList
    {
      get
      {
        return _robotKeyResultList;
      }
      set
      {
        __isset.robotKeyResultList = true;
        this._robotKeyResultList = value;
      }
    }

    public byte Stature
    {
      get
      {
        return _stature;
      }
      set
      {
        __isset.stature = true;
        this._stature = value;
      }
    }

    public short Rank
    {
      get
      {
        return _rank;
      }
      set
      {
        __isset.rank = true;
        this._rank = value;
      }
    }

    public PlayerBaseInfo PlayerBaseInfo
    {
      get
      {
        return _playerBaseInfo;
      }
      set
      {
        __isset.playerBaseInfo = true;
        this._playerBaseInfo = value;
      }
    }

    public int SkinColor
    {
      get
      {
        return _skinColor;
      }
      set
      {
        __isset.skinColor = true;
        this._skinColor = value;
      }
    }

    /// <summary>
    /// 佩戴的徽章
    /// </summary>
    public List<BadgeInfo> PutOnBadges
    {
      get
      {
        return _putOnBadges;
      }
      set
      {
        __isset.putOnBadges = true;
        this._putOnBadges = value;
      }
    }

    /// <summary>
    /// 使用中的个人展示时尚id key:style val:id
    /// </summary>
    public Dictionary<byte, int> DanceFashionIds
    {
      get
      {
        return _danceFashionIds;
      }
      set
      {
        __isset.danceFashionIds = true;
        this._danceFashionIds = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool modelId;
      public bool bodyAdjVal;
      public bool avatarInfos;
      public bool robot;
      public bool robotScore;
      public bool robotKeyResultList;
      public bool stature;
      public bool rank;
      public bool playerBaseInfo;
      public bool skinColor;
      public bool putOnBadges;
      public bool danceFashionIds;
    }

    public PartnerInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I16) {
              ModelId = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Byte) {
              BodyAdjVal = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                AvatarInfos = new List<AvatarInfo>();
                TList _list53 = iprot.ReadListBegin();
                for( int _i54 = 0; _i54 < _list53.Count; ++_i54)
                {
                  AvatarInfo _elem55 = new AvatarInfo();
                  _elem55 = new AvatarInfo();
                  _elem55.Read(iprot);
                  AvatarInfos.Add(_elem55);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Bool) {
              Robot = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              RobotScore = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.List) {
              {
                RobotKeyResultList = new List<byte>();
                TList _list56 = iprot.ReadListBegin();
                for( int _i57 = 0; _i57 < _list56.Count; ++_i57)
                {
                  byte _elem58 = 0;
                  _elem58 = iprot.ReadByte();
                  RobotKeyResultList.Add(_elem58);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Byte) {
              Stature = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I16) {
              Rank = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.Struct) {
              PlayerBaseInfo = new PlayerBaseInfo();
              PlayerBaseInfo.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I32) {
              SkinColor = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.List) {
              {
                PutOnBadges = new List<BadgeInfo>();
                TList _list59 = iprot.ReadListBegin();
                for( int _i60 = 0; _i60 < _list59.Count; ++_i60)
                {
                  BadgeInfo _elem61 = new BadgeInfo();
                  _elem61 = new BadgeInfo();
                  _elem61.Read(iprot);
                  PutOnBadges.Add(_elem61);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.Map) {
              {
                DanceFashionIds = new Dictionary<byte, int>();
                TMap _map62 = iprot.ReadMapBegin();
                for( int _i63 = 0; _i63 < _map62.Count; ++_i63)
                {
                  byte _key64;
                  int _val65;
                  _key64 = iprot.ReadByte();
                  _val65 = iprot.ReadI32();
                  DanceFashionIds[_key64] = _val65;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("PartnerInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.modelId) {
        field.Name = "modelId";
        field.Type = TType.I16;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(ModelId);
        oprot.WriteFieldEnd();
      }
      if (__isset.bodyAdjVal) {
        field.Name = "bodyAdjVal";
        field.Type = TType.Byte;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(BodyAdjVal);
        oprot.WriteFieldEnd();
      }
      if (AvatarInfos != null && __isset.avatarInfos) {
        field.Name = "avatarInfos";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, AvatarInfos.Count));
          foreach (AvatarInfo _iter66 in AvatarInfos)
          {
            _iter66.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.robot) {
        field.Name = "robot";
        field.Type = TType.Bool;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Robot);
        oprot.WriteFieldEnd();
      }
      if (__isset.robotScore) {
        field.Name = "robotScore";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(RobotScore);
        oprot.WriteFieldEnd();
      }
      if (RobotKeyResultList != null && __isset.robotKeyResultList) {
        field.Name = "robotKeyResultList";
        field.Type = TType.List;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Byte, RobotKeyResultList.Count));
          foreach (byte _iter67 in RobotKeyResultList)
          {
            oprot.WriteByte(_iter67);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.stature) {
        field.Name = "stature";
        field.Type = TType.Byte;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Stature);
        oprot.WriteFieldEnd();
      }
      if (__isset.rank) {
        field.Name = "rank";
        field.Type = TType.I16;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(Rank);
        oprot.WriteFieldEnd();
      }
      if (PlayerBaseInfo != null && __isset.playerBaseInfo) {
        field.Name = "playerBaseInfo";
        field.Type = TType.Struct;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        PlayerBaseInfo.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.skinColor) {
        field.Name = "skinColor";
        field.Type = TType.I32;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SkinColor);
        oprot.WriteFieldEnd();
      }
      if (PutOnBadges != null && __isset.putOnBadges) {
        field.Name = "putOnBadges";
        field.Type = TType.List;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, PutOnBadges.Count));
          foreach (BadgeInfo _iter68 in PutOnBadges)
          {
            _iter68.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (DanceFashionIds != null && __isset.danceFashionIds) {
        field.Name = "danceFashionIds";
        field.Type = TType.Map;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.Byte, TType.I32, DanceFashionIds.Count));
          foreach (byte _iter69 in DanceFashionIds.Keys)
          {
            oprot.WriteByte(_iter69);
            oprot.WriteI32(DanceFashionIds[_iter69]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("PartnerInfo(");
      sb.Append("ModelId: ");
      sb.Append(ModelId);
      sb.Append(",BodyAdjVal: ");
      sb.Append(BodyAdjVal);
      sb.Append(",AvatarInfos: ");
      sb.Append(AvatarInfos);
      sb.Append(",Robot: ");
      sb.Append(Robot);
      sb.Append(",RobotScore: ");
      sb.Append(RobotScore);
      sb.Append(",RobotKeyResultList: ");
      sb.Append(RobotKeyResultList);
      sb.Append(",Stature: ");
      sb.Append(Stature);
      sb.Append(",Rank: ");
      sb.Append(Rank);
      sb.Append(",PlayerBaseInfo: ");
      sb.Append(PlayerBaseInfo== null ? "<null>" : PlayerBaseInfo.ToString());
      sb.Append(",SkinColor: ");
      sb.Append(SkinColor);
      sb.Append(",PutOnBadges: ");
      sb.Append(PutOnBadges);
      sb.Append(",DanceFashionIds: ");
      sb.Append(DanceFashionIds);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
