/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  /// <summary>
  /// 名片详细信息，用做缓存使用，方便有人查询好友时快速读取
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class BusinessCardInfo : TBase
  {
    private long _charId;
    private string _name;
    private string _birthday;
    private byte _sex;
    private string _headIconId;
    private byte _constellationId;
    private string _location;
    private long _popularityTotal;
    private long _charmTotal;
    private string _moodMessage;
    private List<AvatarInfo> _avatarList;
    private int _vipDiamond;
    private int _level;
    private int _dynamicCount;
    private int _dynamicWinCount;
    private int _traditionalCount;
    private int _traditionalWinCount;
    private int _battleCount;
    private int _battleWinCount;
    private string _moodMessageByVoice;
    private int _point;
    private double _longitude;
    private double _latitude;
    private byte _modelId;
    private bool _open;
    private byte _stature;
    private int _height;
    private int _weight;
    private int _financialTotal;
    private int _giftTotal;
    private int _praiseTotal;
    private int _cupTotal;
    private short _popularityLevel;
    private int _largesse;
    private int _charm;
    private short _tagId;
    private string _gsId;
    private byte _vipLevel;
    private long _guildId;
    private string _guildName;
    private int _vipExp;
    private int _skinColor;
    private int _starLights;
    private int _starLightLvl;
    private int _exp;
    private long _popularityLvl;
    private List<JewelryInfo> _jewelryInfos;
    private int _beAddedFriends;
    private List<SimpleBusinessCardInfo> _relationInfos;
    private bool _online;
    private Dictionary<byte, long> _cardFashionIds;
    private List<BadgeInfo> _putOnBadges;
    private int _fashion;
    private long _theOneCharId;
    private long _userId;

    public long CharId
    {
      get
      {
        return _charId;
      }
      set
      {
        __isset.charId = true;
        this._charId = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    /// <summary>
    /// format yyyy-MM-dd HH:mm:ss timestamp accurate to the second. (1981-06-01 00:00:00)
    /// </summary>
    public string Birthday
    {
      get
      {
        return _birthday;
      }
      set
      {
        __isset.birthday = true;
        this._birthday = value;
      }
    }

    public byte Sex
    {
      get
      {
        return _sex;
      }
      set
      {
        __isset.sex = true;
        this._sex = value;
      }
    }

    public string HeadIconId
    {
      get
      {
        return _headIconId;
      }
      set
      {
        __isset.headIconId = true;
        this._headIconId = value;
      }
    }

    /// <summary>
    /// 星座索引
    /// </summary>
    public byte ConstellationId
    {
      get
      {
        return _constellationId;
      }
      set
      {
        __isset.constellationId = true;
        this._constellationId = value;
      }
    }

    public string Location
    {
      get
      {
        return _location;
      }
      set
      {
        __isset.location = true;
        this._location = value;
      }
    }

    public long PopularityTotal
    {
      get
      {
        return _popularityTotal;
      }
      set
      {
        __isset.popularityTotal = true;
        this._popularityTotal = value;
      }
    }

    public long CharmTotal
    {
      get
      {
        return _charmTotal;
      }
      set
      {
        __isset.charmTotal = true;
        this._charmTotal = value;
      }
    }

    public string MoodMessage
    {
      get
      {
        return _moodMessage;
      }
      set
      {
        __isset.moodMessage = true;
        this._moodMessage = value;
      }
    }

    public List<AvatarInfo> AvatarList
    {
      get
      {
        return _avatarList;
      }
      set
      {
        __isset.avatarList = true;
        this._avatarList = value;
      }
    }

    public int VipDiamond
    {
      get
      {
        return _vipDiamond;
      }
      set
      {
        __isset.vipDiamond = true;
        this._vipDiamond = value;
      }
    }

    public int Level
    {
      get
      {
        return _level;
      }
      set
      {
        __isset.level = true;
        this._level = value;
      }
    }

    public int DynamicCount
    {
      get
      {
        return _dynamicCount;
      }
      set
      {
        __isset.dynamicCount = true;
        this._dynamicCount = value;
      }
    }

    public int DynamicWinCount
    {
      get
      {
        return _dynamicWinCount;
      }
      set
      {
        __isset.dynamicWinCount = true;
        this._dynamicWinCount = value;
      }
    }

    public int TraditionalCount
    {
      get
      {
        return _traditionalCount;
      }
      set
      {
        __isset.traditionalCount = true;
        this._traditionalCount = value;
      }
    }

    public int TraditionalWinCount
    {
      get
      {
        return _traditionalWinCount;
      }
      set
      {
        __isset.traditionalWinCount = true;
        this._traditionalWinCount = value;
      }
    }

    public int BattleCount
    {
      get
      {
        return _battleCount;
      }
      set
      {
        __isset.battleCount = true;
        this._battleCount = value;
      }
    }

    public int BattleWinCount
    {
      get
      {
        return _battleWinCount;
      }
      set
      {
        __isset.battleWinCount = true;
        this._battleWinCount = value;
      }
    }

    public string MoodMessageByVoice
    {
      get
      {
        return _moodMessageByVoice;
      }
      set
      {
        __isset.moodMessageByVoice = true;
        this._moodMessageByVoice = value;
      }
    }

    public int Point
    {
      get
      {
        return _point;
      }
      set
      {
        __isset.point = true;
        this._point = value;
      }
    }

    public double Longitude
    {
      get
      {
        return _longitude;
      }
      set
      {
        __isset.longitude = true;
        this._longitude = value;
      }
    }

    public double Latitude
    {
      get
      {
        return _latitude;
      }
      set
      {
        __isset.latitude = true;
        this._latitude = value;
      }
    }

    public byte ModelId
    {
      get
      {
        return _modelId;
      }
      set
      {
        __isset.modelId = true;
        this._modelId = value;
      }
    }

    public bool Open
    {
      get
      {
        return _open;
      }
      set
      {
        __isset.open = true;
        this._open = value;
      }
    }

    public byte Stature
    {
      get
      {
        return _stature;
      }
      set
      {
        __isset.stature = true;
        this._stature = value;
      }
    }

    public int Height
    {
      get
      {
        return _height;
      }
      set
      {
        __isset.height = true;
        this._height = value;
      }
    }

    public int Weight
    {
      get
      {
        return _weight;
      }
      set
      {
        __isset.weight = true;
        this._weight = value;
      }
    }

    public int FinancialTotal
    {
      get
      {
        return _financialTotal;
      }
      set
      {
        __isset.financialTotal = true;
        this._financialTotal = value;
      }
    }

    public int GiftTotal
    {
      get
      {
        return _giftTotal;
      }
      set
      {
        __isset.giftTotal = true;
        this._giftTotal = value;
      }
    }

    public int PraiseTotal
    {
      get
      {
        return _praiseTotal;
      }
      set
      {
        __isset.praiseTotal = true;
        this._praiseTotal = value;
      }
    }

    public int CupTotal
    {
      get
      {
        return _cupTotal;
      }
      set
      {
        __isset.cupTotal = true;
        this._cupTotal = value;
      }
    }

    public short PopularityLevel
    {
      get
      {
        return _popularityLevel;
      }
      set
      {
        __isset.popularityLevel = true;
        this._popularityLevel = value;
      }
    }

    public int Largesse
    {
      get
      {
        return _largesse;
      }
      set
      {
        __isset.largesse = true;
        this._largesse = value;
      }
    }

    public int Charm
    {
      get
      {
        return _charm;
      }
      set
      {
        __isset.charm = true;
        this._charm = value;
      }
    }

    public short TagId
    {
      get
      {
        return _tagId;
      }
      set
      {
        __isset.tagId = true;
        this._tagId = value;
      }
    }

    public string GsId
    {
      get
      {
        return _gsId;
      }
      set
      {
        __isset.gsId = true;
        this._gsId = value;
      }
    }

    public byte VipLevel
    {
      get
      {
        return _vipLevel;
      }
      set
      {
        __isset.vipLevel = true;
        this._vipLevel = value;
      }
    }

    public long GuildId
    {
      get
      {
        return _guildId;
      }
      set
      {
        __isset.guildId = true;
        this._guildId = value;
      }
    }

    public string GuildName
    {
      get
      {
        return _guildName;
      }
      set
      {
        __isset.guildName = true;
        this._guildName = value;
      }
    }

    public int VipExp
    {
      get
      {
        return _vipExp;
      }
      set
      {
        __isset.vipExp = true;
        this._vipExp = value;
      }
    }

    public int SkinColor
    {
      get
      {
        return _skinColor;
      }
      set
      {
        __isset.skinColor = true;
        this._skinColor = value;
      }
    }

    public int StarLights
    {
      get
      {
        return _starLights;
      }
      set
      {
        __isset.starLights = true;
        this._starLights = value;
      }
    }

    public int StarLightLvl
    {
      get
      {
        return _starLightLvl;
      }
      set
      {
        __isset.starLightLvl = true;
        this._starLightLvl = value;
      }
    }

    public int Exp
    {
      get
      {
        return _exp;
      }
      set
      {
        __isset.exp = true;
        this._exp = value;
      }
    }

    public long PopularityLvl
    {
      get
      {
        return _popularityLvl;
      }
      set
      {
        __isset.popularityLvl = true;
        this._popularityLvl = value;
      }
    }

    /// <summary>
    /// 首饰盒简要信息
    /// </summary>
    public List<JewelryInfo> JewelryInfos
    {
      get
      {
        return _jewelryInfos;
      }
      set
      {
        __isset.jewelryInfos = true;
        this._jewelryInfos = value;
      }
    }

    /// <summary>
    /// 被关注数量
    /// </summary>
    public int BeAddedFriends
    {
      get
      {
        return _beAddedFriends;
      }
      set
      {
        __isset.beAddedFriends = true;
        this._beAddedFriends = value;
      }
    }

    /// <summary>
    /// 社交关系简要信息
    /// </summary>
    public List<SimpleBusinessCardInfo> RelationInfos
    {
      get
      {
        return _relationInfos;
      }
      set
      {
        __isset.relationInfos = true;
        this._relationInfos = value;
      }
    }

    public bool Online
    {
      get
      {
        return _online;
      }
      set
      {
        __isset.online = true;
        this._online = value;
      }
    }

    /// <summary>
    /// 使用中的名片时尚id, key:style val:高32位id | 低32位有效期
    /// </summary>
    public Dictionary<byte, long> CardFashionIds
    {
      get
      {
        return _cardFashionIds;
      }
      set
      {
        __isset.cardFashionIds = true;
        this._cardFashionIds = value;
      }
    }

    /// <summary>
    /// 佩戴的徽章
    /// </summary>
    public List<BadgeInfo> PutOnBadges
    {
      get
      {
        return _putOnBadges;
      }
      set
      {
        __isset.putOnBadges = true;
        this._putOnBadges = value;
      }
    }

    public int Fashion
    {
      get
      {
        return _fashion;
      }
      set
      {
        __isset.fashion = true;
        this._fashion = value;
      }
    }

    public long TheOneCharId
    {
      get
      {
        return _theOneCharId;
      }
      set
      {
        __isset.theOneCharId = true;
        this._theOneCharId = value;
      }
    }

    /// <summary>
    /// 用户id, 显示用
    /// </summary>
    public long UserId
    {
      get
      {
        return _userId;
      }
      set
      {
        __isset.userId = true;
        this._userId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool charId;
      public bool name;
      public bool birthday;
      public bool sex;
      public bool headIconId;
      public bool constellationId;
      public bool location;
      public bool popularityTotal;
      public bool charmTotal;
      public bool moodMessage;
      public bool avatarList;
      public bool vipDiamond;
      public bool level;
      public bool dynamicCount;
      public bool dynamicWinCount;
      public bool traditionalCount;
      public bool traditionalWinCount;
      public bool battleCount;
      public bool battleWinCount;
      public bool moodMessageByVoice;
      public bool point;
      public bool longitude;
      public bool latitude;
      public bool modelId;
      public bool open;
      public bool stature;
      public bool height;
      public bool weight;
      public bool financialTotal;
      public bool giftTotal;
      public bool praiseTotal;
      public bool cupTotal;
      public bool popularityLevel;
      public bool largesse;
      public bool charm;
      public bool tagId;
      public bool gsId;
      public bool vipLevel;
      public bool guildId;
      public bool guildName;
      public bool vipExp;
      public bool skinColor;
      public bool starLights;
      public bool starLightLvl;
      public bool exp;
      public bool popularityLvl;
      public bool jewelryInfos;
      public bool beAddedFriends;
      public bool relationInfos;
      public bool online;
      public bool cardFashionIds;
      public bool putOnBadges;
      public bool fashion;
      public bool theOneCharId;
      public bool userId;
    }

    public BusinessCardInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              CharId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Birthday = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Byte) {
              Sex = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              HeadIconId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Byte) {
              ConstellationId = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              Location = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I64) {
              PopularityTotal = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I64) {
              CharmTotal = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.String) {
              MoodMessage = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.List) {
              {
                AvatarList = new List<AvatarInfo>();
                TList _list107 = iprot.ReadListBegin();
                for( int _i108 = 0; _i108 < _list107.Count; ++_i108)
                {
                  AvatarInfo _elem109 = new AvatarInfo();
                  _elem109 = new AvatarInfo();
                  _elem109.Read(iprot);
                  AvatarList.Add(_elem109);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.I32) {
              VipDiamond = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.I32) {
              Level = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 16:
            if (field.Type == TType.I32) {
              DynamicCount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 17:
            if (field.Type == TType.I32) {
              DynamicWinCount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 18:
            if (field.Type == TType.I32) {
              TraditionalCount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 19:
            if (field.Type == TType.I32) {
              TraditionalWinCount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.I32) {
              BattleCount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 21:
            if (field.Type == TType.I32) {
              BattleWinCount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 22:
            if (field.Type == TType.String) {
              MoodMessageByVoice = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 23:
            if (field.Type == TType.I32) {
              Point = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 24:
            if (field.Type == TType.Double) {
              Longitude = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 25:
            if (field.Type == TType.Double) {
              Latitude = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 28:
            if (field.Type == TType.Byte) {
              ModelId = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 29:
            if (field.Type == TType.Bool) {
              Open = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 31:
            if (field.Type == TType.Byte) {
              Stature = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 32:
            if (field.Type == TType.I32) {
              Height = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 33:
            if (field.Type == TType.I32) {
              Weight = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 34:
            if (field.Type == TType.I32) {
              FinancialTotal = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 35:
            if (field.Type == TType.I32) {
              GiftTotal = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 36:
            if (field.Type == TType.I32) {
              PraiseTotal = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 37:
            if (field.Type == TType.I32) {
              CupTotal = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 38:
            if (field.Type == TType.I16) {
              PopularityLevel = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 42:
            if (field.Type == TType.I32) {
              Largesse = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 43:
            if (field.Type == TType.I32) {
              Charm = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 44:
            if (field.Type == TType.I16) {
              TagId = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 45:
            if (field.Type == TType.String) {
              GsId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 46:
            if (field.Type == TType.Byte) {
              VipLevel = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 47:
            if (field.Type == TType.I64) {
              GuildId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 48:
            if (field.Type == TType.String) {
              GuildName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 49:
            if (field.Type == TType.I32) {
              VipExp = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 50:
            if (field.Type == TType.I32) {
              SkinColor = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 51:
            if (field.Type == TType.I32) {
              StarLights = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 52:
            if (field.Type == TType.I32) {
              StarLightLvl = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 53:
            if (field.Type == TType.I32) {
              Exp = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 54:
            if (field.Type == TType.I64) {
              PopularityLvl = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 55:
            if (field.Type == TType.List) {
              {
                JewelryInfos = new List<JewelryInfo>();
                TList _list110 = iprot.ReadListBegin();
                for( int _i111 = 0; _i111 < _list110.Count; ++_i111)
                {
                  JewelryInfo _elem112 = new JewelryInfo();
                  _elem112 = new JewelryInfo();
                  _elem112.Read(iprot);
                  JewelryInfos.Add(_elem112);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 56:
            if (field.Type == TType.I32) {
              BeAddedFriends = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 57:
            if (field.Type == TType.List) {
              {
                RelationInfos = new List<SimpleBusinessCardInfo>();
                TList _list113 = iprot.ReadListBegin();
                for( int _i114 = 0; _i114 < _list113.Count; ++_i114)
                {
                  SimpleBusinessCardInfo _elem115 = new SimpleBusinessCardInfo();
                  _elem115 = new SimpleBusinessCardInfo();
                  _elem115.Read(iprot);
                  RelationInfos.Add(_elem115);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 58:
            if (field.Type == TType.Bool) {
              Online = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 59:
            if (field.Type == TType.Map) {
              {
                CardFashionIds = new Dictionary<byte, long>();
                TMap _map116 = iprot.ReadMapBegin();
                for( int _i117 = 0; _i117 < _map116.Count; ++_i117)
                {
                  byte _key118;
                  long _val119;
                  _key118 = iprot.ReadByte();
                  _val119 = iprot.ReadI64();
                  CardFashionIds[_key118] = _val119;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 60:
            if (field.Type == TType.List) {
              {
                PutOnBadges = new List<BadgeInfo>();
                TList _list120 = iprot.ReadListBegin();
                for( int _i121 = 0; _i121 < _list120.Count; ++_i121)
                {
                  BadgeInfo _elem122 = new BadgeInfo();
                  _elem122 = new BadgeInfo();
                  _elem122.Read(iprot);
                  PutOnBadges.Add(_elem122);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 61:
            if (field.Type == TType.I32) {
              Fashion = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 62:
            if (field.Type == TType.I64) {
              TheOneCharId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 63:
            if (field.Type == TType.I64) {
              UserId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("BusinessCardInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.charId) {
        field.Name = "charId";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CharId);
        oprot.WriteFieldEnd();
      }
      if (Name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
      }
      if (Birthday != null && __isset.birthday) {
        field.Name = "birthday";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Birthday);
        oprot.WriteFieldEnd();
      }
      if (__isset.sex) {
        field.Name = "sex";
        field.Type = TType.Byte;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Sex);
        oprot.WriteFieldEnd();
      }
      if (HeadIconId != null && __isset.headIconId) {
        field.Name = "headIconId";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(HeadIconId);
        oprot.WriteFieldEnd();
      }
      if (__isset.constellationId) {
        field.Name = "constellationId";
        field.Type = TType.Byte;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(ConstellationId);
        oprot.WriteFieldEnd();
      }
      if (Location != null && __isset.location) {
        field.Name = "location";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Location);
        oprot.WriteFieldEnd();
      }
      if (__isset.popularityTotal) {
        field.Name = "popularityTotal";
        field.Type = TType.I64;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(PopularityTotal);
        oprot.WriteFieldEnd();
      }
      if (__isset.charmTotal) {
        field.Name = "charmTotal";
        field.Type = TType.I64;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CharmTotal);
        oprot.WriteFieldEnd();
      }
      if (MoodMessage != null && __isset.moodMessage) {
        field.Name = "moodMessage";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(MoodMessage);
        oprot.WriteFieldEnd();
      }
      if (AvatarList != null && __isset.avatarList) {
        field.Name = "avatarList";
        field.Type = TType.List;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, AvatarList.Count));
          foreach (AvatarInfo _iter123 in AvatarList)
          {
            _iter123.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.vipDiamond) {
        field.Name = "vipDiamond";
        field.Type = TType.I32;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(VipDiamond);
        oprot.WriteFieldEnd();
      }
      if (__isset.level) {
        field.Name = "level";
        field.Type = TType.I32;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Level);
        oprot.WriteFieldEnd();
      }
      if (__isset.dynamicCount) {
        field.Name = "dynamicCount";
        field.Type = TType.I32;
        field.ID = 16;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DynamicCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.dynamicWinCount) {
        field.Name = "dynamicWinCount";
        field.Type = TType.I32;
        field.ID = 17;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DynamicWinCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.traditionalCount) {
        field.Name = "traditionalCount";
        field.Type = TType.I32;
        field.ID = 18;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TraditionalCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.traditionalWinCount) {
        field.Name = "traditionalWinCount";
        field.Type = TType.I32;
        field.ID = 19;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TraditionalWinCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.battleCount) {
        field.Name = "battleCount";
        field.Type = TType.I32;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(BattleCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.battleWinCount) {
        field.Name = "battleWinCount";
        field.Type = TType.I32;
        field.ID = 21;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(BattleWinCount);
        oprot.WriteFieldEnd();
      }
      if (MoodMessageByVoice != null && __isset.moodMessageByVoice) {
        field.Name = "moodMessageByVoice";
        field.Type = TType.String;
        field.ID = 22;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(MoodMessageByVoice);
        oprot.WriteFieldEnd();
      }
      if (__isset.point) {
        field.Name = "point";
        field.Type = TType.I32;
        field.ID = 23;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Point);
        oprot.WriteFieldEnd();
      }
      if (__isset.longitude) {
        field.Name = "longitude";
        field.Type = TType.Double;
        field.ID = 24;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Longitude);
        oprot.WriteFieldEnd();
      }
      if (__isset.latitude) {
        field.Name = "latitude";
        field.Type = TType.Double;
        field.ID = 25;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Latitude);
        oprot.WriteFieldEnd();
      }
      if (__isset.modelId) {
        field.Name = "modelId";
        field.Type = TType.Byte;
        field.ID = 28;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(ModelId);
        oprot.WriteFieldEnd();
      }
      if (__isset.open) {
        field.Name = "open";
        field.Type = TType.Bool;
        field.ID = 29;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Open);
        oprot.WriteFieldEnd();
      }
      if (__isset.stature) {
        field.Name = "stature";
        field.Type = TType.Byte;
        field.ID = 31;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Stature);
        oprot.WriteFieldEnd();
      }
      if (__isset.height) {
        field.Name = "height";
        field.Type = TType.I32;
        field.ID = 32;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Height);
        oprot.WriteFieldEnd();
      }
      if (__isset.weight) {
        field.Name = "weight";
        field.Type = TType.I32;
        field.ID = 33;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Weight);
        oprot.WriteFieldEnd();
      }
      if (__isset.financialTotal) {
        field.Name = "financialTotal";
        field.Type = TType.I32;
        field.ID = 34;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(FinancialTotal);
        oprot.WriteFieldEnd();
      }
      if (__isset.giftTotal) {
        field.Name = "giftTotal";
        field.Type = TType.I32;
        field.ID = 35;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(GiftTotal);
        oprot.WriteFieldEnd();
      }
      if (__isset.praiseTotal) {
        field.Name = "praiseTotal";
        field.Type = TType.I32;
        field.ID = 36;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(PraiseTotal);
        oprot.WriteFieldEnd();
      }
      if (__isset.cupTotal) {
        field.Name = "cupTotal";
        field.Type = TType.I32;
        field.ID = 37;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(CupTotal);
        oprot.WriteFieldEnd();
      }
      if (__isset.popularityLevel) {
        field.Name = "popularityLevel";
        field.Type = TType.I16;
        field.ID = 38;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(PopularityLevel);
        oprot.WriteFieldEnd();
      }
      if (__isset.largesse) {
        field.Name = "largesse";
        field.Type = TType.I32;
        field.ID = 42;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Largesse);
        oprot.WriteFieldEnd();
      }
      if (__isset.charm) {
        field.Name = "charm";
        field.Type = TType.I32;
        field.ID = 43;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Charm);
        oprot.WriteFieldEnd();
      }
      if (__isset.tagId) {
        field.Name = "tagId";
        field.Type = TType.I16;
        field.ID = 44;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(TagId);
        oprot.WriteFieldEnd();
      }
      if (GsId != null && __isset.gsId) {
        field.Name = "gsId";
        field.Type = TType.String;
        field.ID = 45;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(GsId);
        oprot.WriteFieldEnd();
      }
      if (__isset.vipLevel) {
        field.Name = "vipLevel";
        field.Type = TType.Byte;
        field.ID = 46;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(VipLevel);
        oprot.WriteFieldEnd();
      }
      if (__isset.guildId) {
        field.Name = "guildId";
        field.Type = TType.I64;
        field.ID = 47;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(GuildId);
        oprot.WriteFieldEnd();
      }
      if (GuildName != null && __isset.guildName) {
        field.Name = "guildName";
        field.Type = TType.String;
        field.ID = 48;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(GuildName);
        oprot.WriteFieldEnd();
      }
      if (__isset.vipExp) {
        field.Name = "vipExp";
        field.Type = TType.I32;
        field.ID = 49;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(VipExp);
        oprot.WriteFieldEnd();
      }
      if (__isset.skinColor) {
        field.Name = "skinColor";
        field.Type = TType.I32;
        field.ID = 50;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SkinColor);
        oprot.WriteFieldEnd();
      }
      if (__isset.starLights) {
        field.Name = "starLights";
        field.Type = TType.I32;
        field.ID = 51;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(StarLights);
        oprot.WriteFieldEnd();
      }
      if (__isset.starLightLvl) {
        field.Name = "starLightLvl";
        field.Type = TType.I32;
        field.ID = 52;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(StarLightLvl);
        oprot.WriteFieldEnd();
      }
      if (__isset.exp) {
        field.Name = "exp";
        field.Type = TType.I32;
        field.ID = 53;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Exp);
        oprot.WriteFieldEnd();
      }
      if (__isset.popularityLvl) {
        field.Name = "popularityLvl";
        field.Type = TType.I64;
        field.ID = 54;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(PopularityLvl);
        oprot.WriteFieldEnd();
      }
      if (JewelryInfos != null && __isset.jewelryInfos) {
        field.Name = "jewelryInfos";
        field.Type = TType.List;
        field.ID = 55;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, JewelryInfos.Count));
          foreach (JewelryInfo _iter124 in JewelryInfos)
          {
            _iter124.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.beAddedFriends) {
        field.Name = "beAddedFriends";
        field.Type = TType.I32;
        field.ID = 56;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(BeAddedFriends);
        oprot.WriteFieldEnd();
      }
      if (RelationInfos != null && __isset.relationInfos) {
        field.Name = "relationInfos";
        field.Type = TType.List;
        field.ID = 57;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, RelationInfos.Count));
          foreach (SimpleBusinessCardInfo _iter125 in RelationInfos)
          {
            _iter125.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.online) {
        field.Name = "online";
        field.Type = TType.Bool;
        field.ID = 58;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Online);
        oprot.WriteFieldEnd();
      }
      if (CardFashionIds != null && __isset.cardFashionIds) {
        field.Name = "cardFashionIds";
        field.Type = TType.Map;
        field.ID = 59;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.Byte, TType.I64, CardFashionIds.Count));
          foreach (byte _iter126 in CardFashionIds.Keys)
          {
            oprot.WriteByte(_iter126);
            oprot.WriteI64(CardFashionIds[_iter126]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (PutOnBadges != null && __isset.putOnBadges) {
        field.Name = "putOnBadges";
        field.Type = TType.List;
        field.ID = 60;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, PutOnBadges.Count));
          foreach (BadgeInfo _iter127 in PutOnBadges)
          {
            _iter127.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.fashion) {
        field.Name = "fashion";
        field.Type = TType.I32;
        field.ID = 61;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Fashion);
        oprot.WriteFieldEnd();
      }
      if (__isset.theOneCharId) {
        field.Name = "theOneCharId";
        field.Type = TType.I64;
        field.ID = 62;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(TheOneCharId);
        oprot.WriteFieldEnd();
      }
      if (__isset.userId) {
        field.Name = "userId";
        field.Type = TType.I64;
        field.ID = 63;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(UserId);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("BusinessCardInfo(");
      sb.Append("CharId: ");
      sb.Append(CharId);
      sb.Append(",Name: ");
      sb.Append(Name);
      sb.Append(",Birthday: ");
      sb.Append(Birthday);
      sb.Append(",Sex: ");
      sb.Append(Sex);
      sb.Append(",HeadIconId: ");
      sb.Append(HeadIconId);
      sb.Append(",ConstellationId: ");
      sb.Append(ConstellationId);
      sb.Append(",Location: ");
      sb.Append(Location);
      sb.Append(",PopularityTotal: ");
      sb.Append(PopularityTotal);
      sb.Append(",CharmTotal: ");
      sb.Append(CharmTotal);
      sb.Append(",MoodMessage: ");
      sb.Append(MoodMessage);
      sb.Append(",AvatarList: ");
      sb.Append(AvatarList);
      sb.Append(",VipDiamond: ");
      sb.Append(VipDiamond);
      sb.Append(",Level: ");
      sb.Append(Level);
      sb.Append(",DynamicCount: ");
      sb.Append(DynamicCount);
      sb.Append(",DynamicWinCount: ");
      sb.Append(DynamicWinCount);
      sb.Append(",TraditionalCount: ");
      sb.Append(TraditionalCount);
      sb.Append(",TraditionalWinCount: ");
      sb.Append(TraditionalWinCount);
      sb.Append(",BattleCount: ");
      sb.Append(BattleCount);
      sb.Append(",BattleWinCount: ");
      sb.Append(BattleWinCount);
      sb.Append(",MoodMessageByVoice: ");
      sb.Append(MoodMessageByVoice);
      sb.Append(",Point: ");
      sb.Append(Point);
      sb.Append(",Longitude: ");
      sb.Append(Longitude);
      sb.Append(",Latitude: ");
      sb.Append(Latitude);
      sb.Append(",ModelId: ");
      sb.Append(ModelId);
      sb.Append(",Open: ");
      sb.Append(Open);
      sb.Append(",Stature: ");
      sb.Append(Stature);
      sb.Append(",Height: ");
      sb.Append(Height);
      sb.Append(",Weight: ");
      sb.Append(Weight);
      sb.Append(",FinancialTotal: ");
      sb.Append(FinancialTotal);
      sb.Append(",GiftTotal: ");
      sb.Append(GiftTotal);
      sb.Append(",PraiseTotal: ");
      sb.Append(PraiseTotal);
      sb.Append(",CupTotal: ");
      sb.Append(CupTotal);
      sb.Append(",PopularityLevel: ");
      sb.Append(PopularityLevel);
      sb.Append(",Largesse: ");
      sb.Append(Largesse);
      sb.Append(",Charm: ");
      sb.Append(Charm);
      sb.Append(",TagId: ");
      sb.Append(TagId);
      sb.Append(",GsId: ");
      sb.Append(GsId);
      sb.Append(",VipLevel: ");
      sb.Append(VipLevel);
      sb.Append(",GuildId: ");
      sb.Append(GuildId);
      sb.Append(",GuildName: ");
      sb.Append(GuildName);
      sb.Append(",VipExp: ");
      sb.Append(VipExp);
      sb.Append(",SkinColor: ");
      sb.Append(SkinColor);
      sb.Append(",StarLights: ");
      sb.Append(StarLights);
      sb.Append(",StarLightLvl: ");
      sb.Append(StarLightLvl);
      sb.Append(",Exp: ");
      sb.Append(Exp);
      sb.Append(",PopularityLvl: ");
      sb.Append(PopularityLvl);
      sb.Append(",JewelryInfos: ");
      sb.Append(JewelryInfos);
      sb.Append(",BeAddedFriends: ");
      sb.Append(BeAddedFriends);
      sb.Append(",RelationInfos: ");
      sb.Append(RelationInfos);
      sb.Append(",Online: ");
      sb.Append(Online);
      sb.Append(",CardFashionIds: ");
      sb.Append(CardFashionIds);
      sb.Append(",PutOnBadges: ");
      sb.Append(PutOnBadges);
      sb.Append(",Fashion: ");
      sb.Append(Fashion);
      sb.Append(",TheOneCharId: ");
      sb.Append(TheOneCharId);
      sb.Append(",UserId: ");
      sb.Append(UserId);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
