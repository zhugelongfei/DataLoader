/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SCClickMoveMsg : TBase
  {
    private long _charId;
    private double _startX;
    private double _startY;
    private double _startZ;
    private double _endX;
    private double _endY;
    private double _endZ;

    public long CharId
    {
      get
      {
        return _charId;
      }
      set
      {
        __isset.charId = true;
        this._charId = value;
      }
    }

    public double StartX
    {
      get
      {
        return _startX;
      }
      set
      {
        __isset.startX = true;
        this._startX = value;
      }
    }

    public double StartY
    {
      get
      {
        return _startY;
      }
      set
      {
        __isset.startY = true;
        this._startY = value;
      }
    }

    public double StartZ
    {
      get
      {
        return _startZ;
      }
      set
      {
        __isset.startZ = true;
        this._startZ = value;
      }
    }

    public double EndX
    {
      get
      {
        return _endX;
      }
      set
      {
        __isset.endX = true;
        this._endX = value;
      }
    }

    public double EndY
    {
      get
      {
        return _endY;
      }
      set
      {
        __isset.endY = true;
        this._endY = value;
      }
    }

    public double EndZ
    {
      get
      {
        return _endZ;
      }
      set
      {
        __isset.endZ = true;
        this._endZ = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool charId;
      public bool startX;
      public bool startY;
      public bool startZ;
      public bool endX;
      public bool endY;
      public bool endZ;
    }

    public SCClickMoveMsg() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              CharId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Double) {
              StartX = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Double) {
              StartY = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Double) {
              StartZ = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Double) {
              EndX = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Double) {
              EndY = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Double) {
              EndZ = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
ClientLog.Instance.LogError("This function is deleted.");
}

    


  }

}
