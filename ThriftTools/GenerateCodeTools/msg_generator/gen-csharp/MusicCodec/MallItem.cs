/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class MallItem : TBase
  {
    private int _itemId;
    private int _itemType;
    private int _state;
    private string _itemName;
    private int _foreverCurrencyCount;
    private int _foreverCurrencyType;
    private int _monthCurrencyCount;
    private int _monthCurrencyType;
    private int _weekCurrencyCount;
    private int _weekCurrencyType;
    private bool _limit;
    private int _remainCount;
    private byte _sex;
    private byte _discount;
    private bool _useBindIb;
    private int _returnPoint;

    public int ItemId
    {
      get
      {
        return _itemId;
      }
      set
      {
        __isset.itemId = true;
        this._itemId = value;
      }
    }

    public int ItemType
    {
      get
      {
        return _itemType;
      }
      set
      {
        __isset.itemType = true;
        this._itemType = value;
      }
    }

    public int State
    {
      get
      {
        return _state;
      }
      set
      {
        __isset.state = true;
        this._state = value;
      }
    }

    public string ItemName
    {
      get
      {
        return _itemName;
      }
      set
      {
        __isset.itemName = true;
        this._itemName = value;
      }
    }

    public int ForeverCurrencyCount
    {
      get
      {
        return _foreverCurrencyCount;
      }
      set
      {
        __isset.foreverCurrencyCount = true;
        this._foreverCurrencyCount = value;
      }
    }

    public int ForeverCurrencyType
    {
      get
      {
        return _foreverCurrencyType;
      }
      set
      {
        __isset.foreverCurrencyType = true;
        this._foreverCurrencyType = value;
      }
    }

    public int MonthCurrencyCount
    {
      get
      {
        return _monthCurrencyCount;
      }
      set
      {
        __isset.monthCurrencyCount = true;
        this._monthCurrencyCount = value;
      }
    }

    public int MonthCurrencyType
    {
      get
      {
        return _monthCurrencyType;
      }
      set
      {
        __isset.monthCurrencyType = true;
        this._monthCurrencyType = value;
      }
    }

    public int WeekCurrencyCount
    {
      get
      {
        return _weekCurrencyCount;
      }
      set
      {
        __isset.weekCurrencyCount = true;
        this._weekCurrencyCount = value;
      }
    }

    public int WeekCurrencyType
    {
      get
      {
        return _weekCurrencyType;
      }
      set
      {
        __isset.weekCurrencyType = true;
        this._weekCurrencyType = value;
      }
    }

    public bool Limit
    {
      get
      {
        return _limit;
      }
      set
      {
        __isset.limit = true;
        this._limit = value;
      }
    }

    public int RemainCount
    {
      get
      {
        return _remainCount;
      }
      set
      {
        __isset.remainCount = true;
        this._remainCount = value;
      }
    }

    public byte Sex
    {
      get
      {
        return _sex;
      }
      set
      {
        __isset.sex = true;
        this._sex = value;
      }
    }

    public byte Discount
    {
      get
      {
        return _discount;
      }
      set
      {
        __isset.discount = true;
        this._discount = value;
      }
    }

    public bool UseBindIb
    {
      get
      {
        return _useBindIb;
      }
      set
      {
        __isset.useBindIb = true;
        this._useBindIb = value;
      }
    }

    public int ReturnPoint
    {
      get
      {
        return _returnPoint;
      }
      set
      {
        __isset.returnPoint = true;
        this._returnPoint = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool itemId;
      public bool itemType;
      public bool state;
      public bool itemName;
      public bool foreverCurrencyCount;
      public bool foreverCurrencyType;
      public bool monthCurrencyCount;
      public bool monthCurrencyType;
      public bool weekCurrencyCount;
      public bool weekCurrencyType;
      public bool limit;
      public bool remainCount;
      public bool sex;
      public bool discount;
      public bool useBindIb;
      public bool returnPoint;
    }

    public MallItem() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              ItemId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              ItemType = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              State = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              ItemName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              ForeverCurrencyCount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              ForeverCurrencyType = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              MonthCurrencyCount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              MonthCurrencyType = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I32) {
              WeekCurrencyCount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I32) {
              WeekCurrencyType = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.Bool) {
              Limit = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.I32) {
              RemainCount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.Byte) {
              Sex = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.Byte) {
              Discount = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.Bool) {
              UseBindIb = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 16:
            if (field.Type == TType.I32) {
              ReturnPoint = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("MallItem");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.itemId) {
        field.Name = "itemId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ItemId);
        oprot.WriteFieldEnd();
      }
      if (__isset.itemType) {
        field.Name = "itemType";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ItemType);
        oprot.WriteFieldEnd();
      }
      if (__isset.state) {
        field.Name = "state";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(State);
        oprot.WriteFieldEnd();
      }
      if (ItemName != null && __isset.itemName) {
        field.Name = "itemName";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ItemName);
        oprot.WriteFieldEnd();
      }
      if (__isset.foreverCurrencyCount) {
        field.Name = "foreverCurrencyCount";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ForeverCurrencyCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.foreverCurrencyType) {
        field.Name = "foreverCurrencyType";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ForeverCurrencyType);
        oprot.WriteFieldEnd();
      }
      if (__isset.monthCurrencyCount) {
        field.Name = "monthCurrencyCount";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MonthCurrencyCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.monthCurrencyType) {
        field.Name = "monthCurrencyType";
        field.Type = TType.I32;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MonthCurrencyType);
        oprot.WriteFieldEnd();
      }
      if (__isset.weekCurrencyCount) {
        field.Name = "weekCurrencyCount";
        field.Type = TType.I32;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(WeekCurrencyCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.weekCurrencyType) {
        field.Name = "weekCurrencyType";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(WeekCurrencyType);
        oprot.WriteFieldEnd();
      }
      if (__isset.limit) {
        field.Name = "limit";
        field.Type = TType.Bool;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Limit);
        oprot.WriteFieldEnd();
      }
      if (__isset.remainCount) {
        field.Name = "remainCount";
        field.Type = TType.I32;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(RemainCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.sex) {
        field.Name = "sex";
        field.Type = TType.Byte;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Sex);
        oprot.WriteFieldEnd();
      }
      if (__isset.discount) {
        field.Name = "discount";
        field.Type = TType.Byte;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Discount);
        oprot.WriteFieldEnd();
      }
      if (__isset.useBindIb) {
        field.Name = "useBindIb";
        field.Type = TType.Bool;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(UseBindIb);
        oprot.WriteFieldEnd();
      }
      if (__isset.returnPoint) {
        field.Name = "returnPoint";
        field.Type = TType.I32;
        field.ID = 16;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ReturnPoint);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("MallItem(");
      sb.Append("ItemId: ");
      sb.Append(ItemId);
      sb.Append(",ItemType: ");
      sb.Append(ItemType);
      sb.Append(",State: ");
      sb.Append(State);
      sb.Append(",ItemName: ");
      sb.Append(ItemName);
      sb.Append(",ForeverCurrencyCount: ");
      sb.Append(ForeverCurrencyCount);
      sb.Append(",ForeverCurrencyType: ");
      sb.Append(ForeverCurrencyType);
      sb.Append(",MonthCurrencyCount: ");
      sb.Append(MonthCurrencyCount);
      sb.Append(",MonthCurrencyType: ");
      sb.Append(MonthCurrencyType);
      sb.Append(",WeekCurrencyCount: ");
      sb.Append(WeekCurrencyCount);
      sb.Append(",WeekCurrencyType: ");
      sb.Append(WeekCurrencyType);
      sb.Append(",Limit: ");
      sb.Append(Limit);
      sb.Append(",RemainCount: ");
      sb.Append(RemainCount);
      sb.Append(",Sex: ");
      sb.Append(Sex);
      sb.Append(",Discount: ");
      sb.Append(Discount);
      sb.Append(",UseBindIb: ");
      sb.Append(UseBindIb);
      sb.Append(",ReturnPoint: ");
      sb.Append(ReturnPoint);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
