/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  /// <summary>
  /// 签到信息
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SCSignInInfoMsg : TBase
  {
    private int _version;
    private byte _month;
    private byte _signInDays;
    private bool _isSignedToday;

    /// <summary>
    /// 签到信息版本号
    /// </summary>
    public int Version
    {
      get
      {
        return _version;
      }
      set
      {
        __isset.version = true;
        this._version = value;
      }
    }

    /// <summary>
    /// 签到月份
    /// </summary>
    public byte Month
    {
      get
      {
        return _month;
      }
      set
      {
        __isset.month = true;
        this._month = value;
      }
    }

    /// <summary>
    /// 累计签到天数
    /// </summary>
    public byte SignInDays
    {
      get
      {
        return _signInDays;
      }
      set
      {
        __isset.signInDays = true;
        this._signInDays = value;
      }
    }

    /// <summary>
    /// 今天是否签到
    /// </summary>
    public bool IsSignedToday
    {
      get
      {
        return _isSignedToday;
      }
      set
      {
        __isset.isSignedToday = true;
        this._isSignedToday = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool version;
      public bool month;
      public bool signInDays;
      public bool isSignedToday;
    }

    public SCSignInInfoMsg() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Version = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Byte) {
              Month = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Byte) {
              SignInDays = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Bool) {
              IsSignedToday = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
ClientLog.Instance.LogError("This function is deleted.");
}

    


  }

}
