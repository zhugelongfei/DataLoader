/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TouchRecordInfo : TBase
  {
    private string _personTouching;
    private string _personTouched;
    private int _touchingTime;
    private byte _touchingPosition;

    public string PersonTouching
    {
      get
      {
        return _personTouching;
      }
      set
      {
        __isset.personTouching = true;
        this._personTouching = value;
      }
    }

    public string PersonTouched
    {
      get
      {
        return _personTouched;
      }
      set
      {
        __isset.personTouched = true;
        this._personTouched = value;
      }
    }

    public int TouchingTime
    {
      get
      {
        return _touchingTime;
      }
      set
      {
        __isset.touchingTime = true;
        this._touchingTime = value;
      }
    }

    public byte TouchingPosition
    {
      get
      {
        return _touchingPosition;
      }
      set
      {
        __isset.touchingPosition = true;
        this._touchingPosition = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool personTouching;
      public bool personTouched;
      public bool touchingTime;
      public bool touchingPosition;
    }

    public TouchRecordInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              PersonTouching = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              PersonTouched = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              TouchingTime = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Byte) {
              TouchingPosition = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("TouchRecordInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (PersonTouching != null && __isset.personTouching) {
        field.Name = "personTouching";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(PersonTouching);
        oprot.WriteFieldEnd();
      }
      if (PersonTouched != null && __isset.personTouched) {
        field.Name = "personTouched";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(PersonTouched);
        oprot.WriteFieldEnd();
      }
      if (__isset.touchingTime) {
        field.Name = "touchingTime";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TouchingTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.touchingPosition) {
        field.Name = "touchingPosition";
        field.Type = TType.Byte;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(TouchingPosition);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("TouchRecordInfo(");
      sb.Append("PersonTouching: ");
      sb.Append(PersonTouching);
      sb.Append(",PersonTouched: ");
      sb.Append(PersonTouched);
      sb.Append(",TouchingTime: ");
      sb.Append(TouchingTime);
      sb.Append(",TouchingPosition: ");
      sb.Append(TouchingPosition);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
