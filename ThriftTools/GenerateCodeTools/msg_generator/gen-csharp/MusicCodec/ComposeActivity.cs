/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ComposeActivity : TBase
  {
    private short _activityId;
    private string _activityName;
    private string _description;
    private CourseTaskData _exchangeCourse;
    private long _beginTime;
    private long _endTime;
    private List<ComposeActivityTime> _dayLimitTime;
    private List<ComposeItemIndex> _itemIds;
    private byte _type;

    public short ActivityId
    {
      get
      {
        return _activityId;
      }
      set
      {
        __isset.activityId = true;
        this._activityId = value;
      }
    }

    public string ActivityName
    {
      get
      {
        return _activityName;
      }
      set
      {
        __isset.activityName = true;
        this._activityName = value;
      }
    }

    public string Description
    {
      get
      {
        return _description;
      }
      set
      {
        __isset.description = true;
        this._description = value;
      }
    }

    public CourseTaskData ExchangeCourse
    {
      get
      {
        return _exchangeCourse;
      }
      set
      {
        __isset.exchangeCourse = true;
        this._exchangeCourse = value;
      }
    }

    public long BeginTime
    {
      get
      {
        return _beginTime;
      }
      set
      {
        __isset.beginTime = true;
        this._beginTime = value;
      }
    }

    public long EndTime
    {
      get
      {
        return _endTime;
      }
      set
      {
        __isset.endTime = true;
        this._endTime = value;
      }
    }

    public List<ComposeActivityTime> DayLimitTime
    {
      get
      {
        return _dayLimitTime;
      }
      set
      {
        __isset.dayLimitTime = true;
        this._dayLimitTime = value;
      }
    }

    public List<ComposeItemIndex> ItemIds
    {
      get
      {
        return _itemIds;
      }
      set
      {
        __isset.itemIds = true;
        this._itemIds = value;
      }
    }

    public byte Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool activityId;
      public bool activityName;
      public bool description;
      public bool exchangeCourse;
      public bool beginTime;
      public bool endTime;
      public bool dayLimitTime;
      public bool itemIds;
      public bool type;
    }

    public ComposeActivity() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I16) {
              ActivityId = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              ActivityName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Description = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Struct) {
              ExchangeCourse = new CourseTaskData();
              ExchangeCourse.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I64) {
              BeginTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I64) {
              EndTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.List) {
              {
                DayLimitTime = new List<ComposeActivityTime>();
                TList _list269 = iprot.ReadListBegin();
                for( int _i270 = 0; _i270 < _list269.Count; ++_i270)
                {
                  ComposeActivityTime _elem271 = new ComposeActivityTime();
                  _elem271 = new ComposeActivityTime();
                  _elem271.Read(iprot);
                  DayLimitTime.Add(_elem271);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.List) {
              {
                ItemIds = new List<ComposeItemIndex>();
                TList _list272 = iprot.ReadListBegin();
                for( int _i273 = 0; _i273 < _list272.Count; ++_i273)
                {
                  ComposeItemIndex _elem274 = new ComposeItemIndex();
                  _elem274 = new ComposeItemIndex();
                  _elem274.Read(iprot);
                  ItemIds.Add(_elem274);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.Byte) {
              Type = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ComposeActivity");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.activityId) {
        field.Name = "activityId";
        field.Type = TType.I16;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(ActivityId);
        oprot.WriteFieldEnd();
      }
      if (ActivityName != null && __isset.activityName) {
        field.Name = "activityName";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ActivityName);
        oprot.WriteFieldEnd();
      }
      if (Description != null && __isset.description) {
        field.Name = "description";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Description);
        oprot.WriteFieldEnd();
      }
      if (ExchangeCourse != null && __isset.exchangeCourse) {
        field.Name = "exchangeCourse";
        field.Type = TType.Struct;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        ExchangeCourse.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.beginTime) {
        field.Name = "beginTime";
        field.Type = TType.I64;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(BeginTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.endTime) {
        field.Name = "endTime";
        field.Type = TType.I64;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(EndTime);
        oprot.WriteFieldEnd();
      }
      if (DayLimitTime != null && __isset.dayLimitTime) {
        field.Name = "dayLimitTime";
        field.Type = TType.List;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, DayLimitTime.Count));
          foreach (ComposeActivityTime _iter275 in DayLimitTime)
          {
            _iter275.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (ItemIds != null && __isset.itemIds) {
        field.Name = "itemIds";
        field.Type = TType.List;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, ItemIds.Count));
          foreach (ComposeItemIndex _iter276 in ItemIds)
          {
            _iter276.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.type) {
        field.Name = "type";
        field.Type = TType.Byte;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Type);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ComposeActivity(");
      sb.Append("ActivityId: ");
      sb.Append(ActivityId);
      sb.Append(",ActivityName: ");
      sb.Append(ActivityName);
      sb.Append(",Description: ");
      sb.Append(Description);
      sb.Append(",ExchangeCourse: ");
      sb.Append(ExchangeCourse== null ? "<null>" : ExchangeCourse.ToString());
      sb.Append(",BeginTime: ");
      sb.Append(BeginTime);
      sb.Append(",EndTime: ");
      sb.Append(EndTime);
      sb.Append(",DayLimitTime: ");
      sb.Append(DayLimitTime);
      sb.Append(",ItemIds: ");
      sb.Append(ItemIds);
      sb.Append(",Type: ");
      sb.Append(Type);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
