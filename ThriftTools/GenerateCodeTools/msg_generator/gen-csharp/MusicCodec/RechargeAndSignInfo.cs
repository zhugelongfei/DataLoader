/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class RechargeAndSignInfo : TBase
  {
    private GMActivityType _type;
    private GMActivitySubType _subType;
    private long _beginTime;
    private long _endTime;
    private List<ActivityPrizeInfo> _prizeList;
    private string _content;

    /// <summary>
    /// 
    /// <seealso cref="GMActivityType"/>
    /// </summary>
    public GMActivityType Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="GMActivitySubType"/>
    /// </summary>
    public GMActivitySubType SubType
    {
      get
      {
        return _subType;
      }
      set
      {
        __isset.subType = true;
        this._subType = value;
      }
    }

    public long BeginTime
    {
      get
      {
        return _beginTime;
      }
      set
      {
        __isset.beginTime = true;
        this._beginTime = value;
      }
    }

    public long EndTime
    {
      get
      {
        return _endTime;
      }
      set
      {
        __isset.endTime = true;
        this._endTime = value;
      }
    }

    public List<ActivityPrizeInfo> PrizeList
    {
      get
      {
        return _prizeList;
      }
      set
      {
        __isset.prizeList = true;
        this._prizeList = value;
      }
    }

    public string Content
    {
      get
      {
        return _content;
      }
      set
      {
        __isset.content = true;
        this._content = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool type;
      public bool subType;
      public bool beginTime;
      public bool endTime;
      public bool prizeList;
      public bool content;
    }

    public RechargeAndSignInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Type = (GMActivityType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              SubType = (GMActivitySubType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              BeginTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I64) {
              EndTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.List) {
              {
                PrizeList = new List<ActivityPrizeInfo>();
                TList _list166 = iprot.ReadListBegin();
                for( int _i167 = 0; _i167 < _list166.Count; ++_i167)
                {
                  ActivityPrizeInfo _elem168 = new ActivityPrizeInfo();
                  _elem168 = new ActivityPrizeInfo();
                  _elem168.Read(iprot);
                  PrizeList.Add(_elem168);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              Content = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("RechargeAndSignInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.type) {
        field.Name = "type";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)Type);
        oprot.WriteFieldEnd();
      }
      if (__isset.subType) {
        field.Name = "subType";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)SubType);
        oprot.WriteFieldEnd();
      }
      if (__isset.beginTime) {
        field.Name = "beginTime";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(BeginTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.endTime) {
        field.Name = "endTime";
        field.Type = TType.I64;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(EndTime);
        oprot.WriteFieldEnd();
      }
      if (PrizeList != null && __isset.prizeList) {
        field.Name = "prizeList";
        field.Type = TType.List;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, PrizeList.Count));
          foreach (ActivityPrizeInfo _iter169 in PrizeList)
          {
            _iter169.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Content != null && __isset.content) {
        field.Name = "content";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Content);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("RechargeAndSignInfo(");
      sb.Append("Type: ");
      sb.Append(Type);
      sb.Append(",SubType: ");
      sb.Append(SubType);
      sb.Append(",BeginTime: ");
      sb.Append(BeginTime);
      sb.Append(",EndTime: ");
      sb.Append(EndTime);
      sb.Append(",PrizeList: ");
      sb.Append(PrizeList);
      sb.Append(",Content: ");
      sb.Append(Content);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
