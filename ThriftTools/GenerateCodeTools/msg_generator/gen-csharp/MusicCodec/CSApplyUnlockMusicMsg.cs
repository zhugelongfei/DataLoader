/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CSApplyUnlockMusicMsg : TBase
  {
    private List<short> _musices;
    private MusicCodec.UnlockType _unlockType;

    public List<short> Musices
    {
      get
      {
        return _musices;
      }
      set
      {
        __isset.musices = true;
        this._musices = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="MusicCodec.UnlockType"/>
    /// </summary>
    public MusicCodec.UnlockType UnlockType
    {
      get
      {
        return _unlockType;
      }
      set
      {
        __isset.unlockType = true;
        this._unlockType = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool musices;
      public bool unlockType;
    }

    public CSApplyUnlockMusicMsg() {
    }

    public void Read (TProtocol iprot)
    {
ClientLog.Instance.LogError("This function is deleted.");
}

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("CSApplyUnlockMusicMsg");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Musices != null && __isset.musices) {
        field.Name = "musices";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I16, Musices.Count));
          foreach (short _iter7 in Musices)
          {
            oprot.WriteI16(_iter7);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.unlockType) {
        field.Name = "unlockType";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)UnlockType);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    


  }

}
