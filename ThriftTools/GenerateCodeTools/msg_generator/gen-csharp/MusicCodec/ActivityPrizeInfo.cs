/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ActivityPrizeInfo : TBase
  {
    private byte _index;
    private bool _canGetPrize;
    private List<string> _completedParam;
    private List<string> _param;
    private string _content;
    private PrizeInfo _prizeInfos;

    public byte Index
    {
      get
      {
        return _index;
      }
      set
      {
        __isset.index = true;
        this._index = value;
      }
    }

    public bool CanGetPrize
    {
      get
      {
        return _canGetPrize;
      }
      set
      {
        __isset.canGetPrize = true;
        this._canGetPrize = value;
      }
    }

    public List<string> CompletedParam
    {
      get
      {
        return _completedParam;
      }
      set
      {
        __isset.completedParam = true;
        this._completedParam = value;
      }
    }

    public List<string> Param
    {
      get
      {
        return _param;
      }
      set
      {
        __isset.param = true;
        this._param = value;
      }
    }

    public string Content
    {
      get
      {
        return _content;
      }
      set
      {
        __isset.content = true;
        this._content = value;
      }
    }

    public PrizeInfo PrizeInfos
    {
      get
      {
        return _prizeInfos;
      }
      set
      {
        __isset.prizeInfos = true;
        this._prizeInfos = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool index;
      public bool canGetPrize;
      public bool completedParam;
      public bool param;
      public bool content;
      public bool prizeInfos;
    }

    public ActivityPrizeInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Byte) {
              Index = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Bool) {
              CanGetPrize = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                CompletedParam = new List<string>();
                TList _list158 = iprot.ReadListBegin();
                for( int _i159 = 0; _i159 < _list158.Count; ++_i159)
                {
                  string _elem160 = null;
                  _elem160 = iprot.ReadString();
                  CompletedParam.Add(_elem160);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.List) {
              {
                Param = new List<string>();
                TList _list161 = iprot.ReadListBegin();
                for( int _i162 = 0; _i162 < _list161.Count; ++_i162)
                {
                  string _elem163 = null;
                  _elem163 = iprot.ReadString();
                  Param.Add(_elem163);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              Content = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Struct) {
              PrizeInfos = new PrizeInfo();
              PrizeInfos.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ActivityPrizeInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.index) {
        field.Name = "index";
        field.Type = TType.Byte;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Index);
        oprot.WriteFieldEnd();
      }
      if (__isset.canGetPrize) {
        field.Name = "canGetPrize";
        field.Type = TType.Bool;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(CanGetPrize);
        oprot.WriteFieldEnd();
      }
      if (CompletedParam != null && __isset.completedParam) {
        field.Name = "completedParam";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, CompletedParam.Count));
          foreach (string _iter164 in CompletedParam)
          {
            oprot.WriteString(_iter164);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Param != null && __isset.param) {
        field.Name = "param";
        field.Type = TType.List;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, Param.Count));
          foreach (string _iter165 in Param)
          {
            oprot.WriteString(_iter165);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Content != null && __isset.content) {
        field.Name = "content";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Content);
        oprot.WriteFieldEnd();
      }
      if (PrizeInfos != null && __isset.prizeInfos) {
        field.Name = "prizeInfos";
        field.Type = TType.Struct;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        PrizeInfos.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ActivityPrizeInfo(");
      sb.Append("Index: ");
      sb.Append(Index);
      sb.Append(",CanGetPrize: ");
      sb.Append(CanGetPrize);
      sb.Append(",CompletedParam: ");
      sb.Append(CompletedParam);
      sb.Append(",Param: ");
      sb.Append(Param);
      sb.Append(",Content: ");
      sb.Append(Content);
      sb.Append(",PrizeInfos: ");
      sb.Append(PrizeInfos== null ? "<null>" : PrizeInfos.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }

}
