/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  /// <summary>
  /// 显示名片指定信息类型详情
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SCShowBusinessCardDetailMsg : TBase
  {
    private long _charId;
    private short _totalJewelryCount;
    private short _curJewelryPageNum;
    private List<MusicCodec.JewelryInfo> _jewelryInfos;
    private short _totalRelationCount;
    private short _curRelationPageNum;
    private List<MusicCodec.SimpleBusinessCardInfo> _relationInfos;

    public long CharId
    {
      get
      {
        return _charId;
      }
      set
      {
        __isset.charId = true;
        this._charId = value;
      }
    }

    public short TotalJewelryCount
    {
      get
      {
        return _totalJewelryCount;
      }
      set
      {
        __isset.totalJewelryCount = true;
        this._totalJewelryCount = value;
      }
    }

    public short CurJewelryPageNum
    {
      get
      {
        return _curJewelryPageNum;
      }
      set
      {
        __isset.curJewelryPageNum = true;
        this._curJewelryPageNum = value;
      }
    }

    /// <summary>
    /// 首饰盒信息
    /// </summary>
    public List<MusicCodec.JewelryInfo> JewelryInfos
    {
      get
      {
        return _jewelryInfos;
      }
      set
      {
        __isset.jewelryInfos = true;
        this._jewelryInfos = value;
      }
    }

    public short TotalRelationCount
    {
      get
      {
        return _totalRelationCount;
      }
      set
      {
        __isset.totalRelationCount = true;
        this._totalRelationCount = value;
      }
    }

    public short CurRelationPageNum
    {
      get
      {
        return _curRelationPageNum;
      }
      set
      {
        __isset.curRelationPageNum = true;
        this._curRelationPageNum = value;
      }
    }

    /// <summary>
    /// 社交关系信息
    /// </summary>
    public List<MusicCodec.SimpleBusinessCardInfo> RelationInfos
    {
      get
      {
        return _relationInfos;
      }
      set
      {
        __isset.relationInfos = true;
        this._relationInfos = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool charId;
      public bool totalJewelryCount;
      public bool curJewelryPageNum;
      public bool jewelryInfos;
      public bool totalRelationCount;
      public bool curRelationPageNum;
      public bool relationInfos;
    }

    public SCShowBusinessCardDetailMsg() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              CharId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I16) {
              TotalJewelryCount = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I16) {
              CurJewelryPageNum = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.List) {
              {
                JewelryInfos = new List<MusicCodec.JewelryInfo>();
                TList _list12 = iprot.ReadListBegin();
                for( int _i13 = 0; _i13 < _list12.Count; ++_i13)
                {
                  MusicCodec.JewelryInfo _elem14 = new MusicCodec.JewelryInfo();
                  _elem14 = new MusicCodec.JewelryInfo();
                  _elem14.Read(iprot);
                  JewelryInfos.Add(_elem14);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I16) {
              TotalRelationCount = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I16) {
              CurRelationPageNum = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.List) {
              {
                RelationInfos = new List<MusicCodec.SimpleBusinessCardInfo>();
                TList _list15 = iprot.ReadListBegin();
                for( int _i16 = 0; _i16 < _list15.Count; ++_i16)
                {
                  MusicCodec.SimpleBusinessCardInfo _elem17 = new MusicCodec.SimpleBusinessCardInfo();
                  _elem17 = new MusicCodec.SimpleBusinessCardInfo();
                  _elem17.Read(iprot);
                  RelationInfos.Add(_elem17);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
ClientLog.Instance.LogError("This function is deleted.");
}

    


  }

}
