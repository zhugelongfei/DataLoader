/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SCRestartDanceMsg : TBase
  {
    private int _randParam;
    private short _startActionId;
    private List<short> _finishActionIds;
    private byte _stageId;
    private byte _lightId;
    private List<MusicCodec.SimplePartnerInfo> _simplePartnerInfos;

    public int RandParam
    {
      get
      {
        return _randParam;
      }
      set
      {
        __isset.randParam = true;
        this._randParam = value;
      }
    }

    public short StartActionId
    {
      get
      {
        return _startActionId;
      }
      set
      {
        __isset.startActionId = true;
        this._startActionId = value;
      }
    }

    public List<short> FinishActionIds
    {
      get
      {
        return _finishActionIds;
      }
      set
      {
        __isset.finishActionIds = true;
        this._finishActionIds = value;
      }
    }

    public byte StageId
    {
      get
      {
        return _stageId;
      }
      set
      {
        __isset.stageId = true;
        this._stageId = value;
      }
    }

    public byte LightId
    {
      get
      {
        return _lightId;
      }
      set
      {
        __isset.lightId = true;
        this._lightId = value;
      }
    }

    public List<MusicCodec.SimplePartnerInfo> SimplePartnerInfos
    {
      get
      {
        return _simplePartnerInfos;
      }
      set
      {
        __isset.simplePartnerInfos = true;
        this._simplePartnerInfos = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool randParam;
      public bool startActionId;
      public bool finishActionIds;
      public bool stageId;
      public bool lightId;
      public bool simplePartnerInfos;
    }

    public SCRestartDanceMsg() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              RandParam = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I16) {
              StartActionId = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                FinishActionIds = new List<short>();
                TList _list4 = iprot.ReadListBegin();
                for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                {
                  short _elem6 = 0;
                  _elem6 = iprot.ReadI16();
                  FinishActionIds.Add(_elem6);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Byte) {
              StageId = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Byte) {
              LightId = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.List) {
              {
                SimplePartnerInfos = new List<MusicCodec.SimplePartnerInfo>();
                TList _list7 = iprot.ReadListBegin();
                for( int _i8 = 0; _i8 < _list7.Count; ++_i8)
                {
                  MusicCodec.SimplePartnerInfo _elem9 = new MusicCodec.SimplePartnerInfo();
                  _elem9 = new MusicCodec.SimplePartnerInfo();
                  _elem9.Read(iprot);
                  SimplePartnerInfos.Add(_elem9);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
ClientLog.Instance.LogError("This function is deleted.");
}

    


  }

}
