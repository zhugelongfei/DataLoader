/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SlotData : TBase
  {
    private Dictionary<long, int> _fixedPrizeTime;
    private int _diamondPoolSize;
    private int _bindDiamondPoolSize;
    private int _goldPoolSize;

    public Dictionary<long, int> FixedPrizeTime
    {
      get
      {
        return _fixedPrizeTime;
      }
      set
      {
        __isset.fixedPrizeTime = true;
        this._fixedPrizeTime = value;
      }
    }

    public int DiamondPoolSize
    {
      get
      {
        return _diamondPoolSize;
      }
      set
      {
        __isset.diamondPoolSize = true;
        this._diamondPoolSize = value;
      }
    }

    public int BindDiamondPoolSize
    {
      get
      {
        return _bindDiamondPoolSize;
      }
      set
      {
        __isset.bindDiamondPoolSize = true;
        this._bindDiamondPoolSize = value;
      }
    }

    public int GoldPoolSize
    {
      get
      {
        return _goldPoolSize;
      }
      set
      {
        __isset.goldPoolSize = true;
        this._goldPoolSize = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool fixedPrizeTime;
      public bool diamondPoolSize;
      public bool bindDiamondPoolSize;
      public bool goldPoolSize;
    }

    public SlotData() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Map) {
              {
                FixedPrizeTime = new Dictionary<long, int>();
                TMap _map289 = iprot.ReadMapBegin();
                for( int _i290 = 0; _i290 < _map289.Count; ++_i290)
                {
                  long _key291;
                  int _val292;
                  _key291 = iprot.ReadI64();
                  _val292 = iprot.ReadI32();
                  FixedPrizeTime[_key291] = _val292;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              DiamondPoolSize = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              BindDiamondPoolSize = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              GoldPoolSize = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("SlotData");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (FixedPrizeTime != null && __isset.fixedPrizeTime) {
        field.Name = "fixedPrizeTime";
        field.Type = TType.Map;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I64, TType.I32, FixedPrizeTime.Count));
          foreach (long _iter293 in FixedPrizeTime.Keys)
          {
            oprot.WriteI64(_iter293);
            oprot.WriteI32(FixedPrizeTime[_iter293]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.diamondPoolSize) {
        field.Name = "diamondPoolSize";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DiamondPoolSize);
        oprot.WriteFieldEnd();
      }
      if (__isset.bindDiamondPoolSize) {
        field.Name = "bindDiamondPoolSize";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(BindDiamondPoolSize);
        oprot.WriteFieldEnd();
      }
      if (__isset.goldPoolSize) {
        field.Name = "goldPoolSize";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(GoldPoolSize);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("SlotData(");
      sb.Append("FixedPrizeTime: ");
      sb.Append(FixedPrizeTime);
      sb.Append(",DiamondPoolSize: ");
      sb.Append(DiamondPoolSize);
      sb.Append(",BindDiamondPoolSize: ");
      sb.Append(BindDiamondPoolSize);
      sb.Append(",GoldPoolSize: ");
      sb.Append(GoldPoolSize);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
