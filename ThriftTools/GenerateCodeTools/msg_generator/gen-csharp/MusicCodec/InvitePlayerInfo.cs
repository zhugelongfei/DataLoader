/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class InvitePlayerInfo : TBase
  {
    private byte _sex;
    private long _charId;
    private string _name;
    private string _headIconId;
    private byte _relation;
    private Dictionary<byte, int> _nameHeadFashionIds;
    private byte _vipLvl;
    private short _tagId;

    public byte Sex
    {
      get
      {
        return _sex;
      }
      set
      {
        __isset.sex = true;
        this._sex = value;
      }
    }

    public long CharId
    {
      get
      {
        return _charId;
      }
      set
      {
        __isset.charId = true;
        this._charId = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public string HeadIconId
    {
      get
      {
        return _headIconId;
      }
      set
      {
        __isset.headIconId = true;
        this._headIconId = value;
      }
    }

    public byte Relation
    {
      get
      {
        return _relation;
      }
      set
      {
        __isset.relation = true;
        this._relation = value;
      }
    }

    /// <summary>
    /// 使用中的名字和头像框时尚id key:style val:id
    /// </summary>
    public Dictionary<byte, int> NameHeadFashionIds
    {
      get
      {
        return _nameHeadFashionIds;
      }
      set
      {
        __isset.nameHeadFashionIds = true;
        this._nameHeadFashionIds = value;
      }
    }

    public byte VipLvl
    {
      get
      {
        return _vipLvl;
      }
      set
      {
        __isset.vipLvl = true;
        this._vipLvl = value;
      }
    }

    public short TagId
    {
      get
      {
        return _tagId;
      }
      set
      {
        __isset.tagId = true;
        this._tagId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool sex;
      public bool charId;
      public bool name;
      public bool headIconId;
      public bool relation;
      public bool nameHeadFashionIds;
      public bool vipLvl;
      public bool tagId;
    }

    public InvitePlayerInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Byte) {
              Sex = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I64) {
              CharId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              HeadIconId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Byte) {
              Relation = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Map) {
              {
                NameHeadFashionIds = new Dictionary<byte, int>();
                TMap _map141 = iprot.ReadMapBegin();
                for( int _i142 = 0; _i142 < _map141.Count; ++_i142)
                {
                  byte _key143;
                  int _val144;
                  _key143 = iprot.ReadByte();
                  _val144 = iprot.ReadI32();
                  NameHeadFashionIds[_key143] = _val144;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Byte) {
              VipLvl = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I16) {
              TagId = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("InvitePlayerInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.sex) {
        field.Name = "sex";
        field.Type = TType.Byte;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Sex);
        oprot.WriteFieldEnd();
      }
      if (__isset.charId) {
        field.Name = "charId";
        field.Type = TType.I64;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CharId);
        oprot.WriteFieldEnd();
      }
      if (Name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
      }
      if (HeadIconId != null && __isset.headIconId) {
        field.Name = "headIconId";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(HeadIconId);
        oprot.WriteFieldEnd();
      }
      if (__isset.relation) {
        field.Name = "relation";
        field.Type = TType.Byte;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Relation);
        oprot.WriteFieldEnd();
      }
      if (NameHeadFashionIds != null && __isset.nameHeadFashionIds) {
        field.Name = "nameHeadFashionIds";
        field.Type = TType.Map;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.Byte, TType.I32, NameHeadFashionIds.Count));
          foreach (byte _iter145 in NameHeadFashionIds.Keys)
          {
            oprot.WriteByte(_iter145);
            oprot.WriteI32(NameHeadFashionIds[_iter145]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.vipLvl) {
        field.Name = "vipLvl";
        field.Type = TType.Byte;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(VipLvl);
        oprot.WriteFieldEnd();
      }
      if (__isset.tagId) {
        field.Name = "tagId";
        field.Type = TType.I16;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(TagId);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("InvitePlayerInfo(");
      sb.Append("Sex: ");
      sb.Append(Sex);
      sb.Append(",CharId: ");
      sb.Append(CharId);
      sb.Append(",Name: ");
      sb.Append(Name);
      sb.Append(",HeadIconId: ");
      sb.Append(HeadIconId);
      sb.Append(",Relation: ");
      sb.Append(Relation);
      sb.Append(",NameHeadFashionIds: ");
      sb.Append(NameHeadFashionIds);
      sb.Append(",VipLvl: ");
      sb.Append(VipLvl);
      sb.Append(",TagId: ");
      sb.Append(TagId);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
