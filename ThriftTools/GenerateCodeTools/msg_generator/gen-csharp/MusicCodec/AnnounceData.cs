/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  /// <summary>
  /// 通告数据
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class AnnounceData : TBase
  {
    private int _announceId;
    private int _adviceStarVal;
    private PrizeInfo _prizeInfo;
    private PrizeInfo _extraPrizeInfo;
    private int _coldDown;
    private byte _occupationType;
    private short _occupationLvl;
    private byte _musicLvl;
    private List<PassCond> _passConds;

    public int AnnounceId
    {
      get
      {
        return _announceId;
      }
      set
      {
        __isset.announceId = true;
        this._announceId = value;
      }
    }

    /// <summary>
    /// 建议星光值
    /// </summary>
    public int AdviceStarVal
    {
      get
      {
        return _adviceStarVal;
      }
      set
      {
        __isset.adviceStarVal = true;
        this._adviceStarVal = value;
      }
    }

    /// <summary>
    /// 奖励
    /// </summary>
    public PrizeInfo PrizeInfo
    {
      get
      {
        return _prizeInfo;
      }
      set
      {
        __isset.prizeInfo = true;
        this._prizeInfo = value;
      }
    }

    /// <summary>
    /// 额外奖励
    /// </summary>
    public PrizeInfo ExtraPrizeInfo
    {
      get
      {
        return _extraPrizeInfo;
      }
      set
      {
        __isset.extraPrizeInfo = true;
        this._extraPrizeInfo = value;
      }
    }

    /// <summary>
    /// 通告冷却时间(距离1970.1.1的秒数)
    /// </summary>
    public int ColdDown
    {
      get
      {
        return _coldDown;
      }
      set
      {
        __isset.coldDown = true;
        this._coldDown = value;
      }
    }

    /// <summary>
    /// 0-歌手 1-舞者 2-模特
    /// </summary>
    public byte OccupationType
    {
      get
      {
        return _occupationType;
      }
      set
      {
        __isset.occupationType = true;
        this._occupationType = value;
      }
    }

    /// <summary>
    /// 职业等级
    /// </summary>
    public short OccupationLvl
    {
      get
      {
        return _occupationLvl;
      }
      set
      {
        __isset.occupationLvl = true;
        this._occupationLvl = value;
      }
    }

    /// <summary>
    /// 难度0-简单 1-普通 2-困难 3-疯狂
    /// </summary>
    public byte MusicLvl
    {
      get
      {
        return _musicLvl;
      }
      set
      {
        __isset.musicLvl = true;
        this._musicLvl = value;
      }
    }

    /// <summary>
    /// 通关条件
    /// </summary>
    public List<PassCond> PassConds
    {
      get
      {
        return _passConds;
      }
      set
      {
        __isset.passConds = true;
        this._passConds = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool announceId;
      public bool adviceStarVal;
      public bool prizeInfo;
      public bool extraPrizeInfo;
      public bool coldDown;
      public bool occupationType;
      public bool occupationLvl;
      public bool musicLvl;
      public bool passConds;
    }

    public AnnounceData() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              AnnounceId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              AdviceStarVal = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Struct) {
              PrizeInfo = new PrizeInfo();
              PrizeInfo.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Struct) {
              ExtraPrizeInfo = new PrizeInfo();
              ExtraPrizeInfo.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              ColdDown = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Byte) {
              OccupationType = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I16) {
              OccupationLvl = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Byte) {
              MusicLvl = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.List) {
              {
                PassConds = new List<PassCond>();
                TList _list203 = iprot.ReadListBegin();
                for( int _i204 = 0; _i204 < _list203.Count; ++_i204)
                {
                  PassCond _elem205 = new PassCond();
                  _elem205 = new PassCond();
                  _elem205.Read(iprot);
                  PassConds.Add(_elem205);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("AnnounceData");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.announceId) {
        field.Name = "announceId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(AnnounceId);
        oprot.WriteFieldEnd();
      }
      if (__isset.adviceStarVal) {
        field.Name = "adviceStarVal";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(AdviceStarVal);
        oprot.WriteFieldEnd();
      }
      if (PrizeInfo != null && __isset.prizeInfo) {
        field.Name = "prizeInfo";
        field.Type = TType.Struct;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        PrizeInfo.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (ExtraPrizeInfo != null && __isset.extraPrizeInfo) {
        field.Name = "extraPrizeInfo";
        field.Type = TType.Struct;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        ExtraPrizeInfo.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.coldDown) {
        field.Name = "coldDown";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ColdDown);
        oprot.WriteFieldEnd();
      }
      if (__isset.occupationType) {
        field.Name = "occupationType";
        field.Type = TType.Byte;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(OccupationType);
        oprot.WriteFieldEnd();
      }
      if (__isset.occupationLvl) {
        field.Name = "occupationLvl";
        field.Type = TType.I16;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(OccupationLvl);
        oprot.WriteFieldEnd();
      }
      if (__isset.musicLvl) {
        field.Name = "musicLvl";
        field.Type = TType.Byte;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(MusicLvl);
        oprot.WriteFieldEnd();
      }
      if (PassConds != null && __isset.passConds) {
        field.Name = "passConds";
        field.Type = TType.List;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, PassConds.Count));
          foreach (PassCond _iter206 in PassConds)
          {
            _iter206.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("AnnounceData(");
      sb.Append("AnnounceId: ");
      sb.Append(AnnounceId);
      sb.Append(",AdviceStarVal: ");
      sb.Append(AdviceStarVal);
      sb.Append(",PrizeInfo: ");
      sb.Append(PrizeInfo== null ? "<null>" : PrizeInfo.ToString());
      sb.Append(",ExtraPrizeInfo: ");
      sb.Append(ExtraPrizeInfo== null ? "<null>" : ExtraPrizeInfo.ToString());
      sb.Append(",ColdDown: ");
      sb.Append(ColdDown);
      sb.Append(",OccupationType: ");
      sb.Append(OccupationType);
      sb.Append(",OccupationLvl: ");
      sb.Append(OccupationLvl);
      sb.Append(",MusicLvl: ");
      sb.Append(MusicLvl);
      sb.Append(",PassConds: ");
      sb.Append(PassConds);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
