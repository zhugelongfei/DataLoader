/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  /// <summary>
  /// 活动合成信息
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ActivityComposeInfo : TBase
  {
    private string _activityDesc;
    private int _startTime;
    private int _endTime;
    private ComposeCondInfo _condInfo;

    /// <summary>
    /// 活动说明
    /// </summary>
    public string ActivityDesc
    {
      get
      {
        return _activityDesc;
      }
      set
      {
        __isset.activityDesc = true;
        this._activityDesc = value;
      }
    }

    /// <summary>
    /// 活动开始时间
    /// </summary>
    public int StartTime
    {
      get
      {
        return _startTime;
      }
      set
      {
        __isset.startTime = true;
        this._startTime = value;
      }
    }

    /// <summary>
    /// 活动结束时间
    /// </summary>
    public int EndTime
    {
      get
      {
        return _endTime;
      }
      set
      {
        __isset.endTime = true;
        this._endTime = value;
      }
    }

    /// <summary>
    /// 是否满足条件
    /// </summary>
    public ComposeCondInfo CondInfo
    {
      get
      {
        return _condInfo;
      }
      set
      {
        __isset.condInfo = true;
        this._condInfo = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool activityDesc;
      public bool startTime;
      public bool endTime;
      public bool condInfo;
    }

    public ActivityComposeInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              ActivityDesc = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              StartTime = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              EndTime = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Struct) {
              CondInfo = new ComposeCondInfo();
              CondInfo.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ActivityComposeInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (ActivityDesc != null && __isset.activityDesc) {
        field.Name = "activityDesc";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ActivityDesc);
        oprot.WriteFieldEnd();
      }
      if (__isset.startTime) {
        field.Name = "startTime";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(StartTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.endTime) {
        field.Name = "endTime";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(EndTime);
        oprot.WriteFieldEnd();
      }
      if (CondInfo != null && __isset.condInfo) {
        field.Name = "condInfo";
        field.Type = TType.Struct;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        CondInfo.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ActivityComposeInfo(");
      sb.Append("ActivityDesc: ");
      sb.Append(ActivityDesc);
      sb.Append(",StartTime: ");
      sb.Append(StartTime);
      sb.Append(",EndTime: ");
      sb.Append(EndTime);
      sb.Append(",CondInfo: ");
      sb.Append(CondInfo== null ? "<null>" : CondInfo.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }

}
