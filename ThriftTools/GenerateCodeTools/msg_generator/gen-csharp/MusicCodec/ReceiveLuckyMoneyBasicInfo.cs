/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  /// <summary>
  /// 收到红包的基本信息
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ReceiveLuckyMoneyBasicInfo : TBase
  {
    private long _luckyMoneyId;
    private MusicCodec.PlayerBaseInfo _senderInfo;
    private long _date;
    private MusicCodec.LuckyMoneyType _type;
    private int _receiveAmount;
    private bool _isBestLuck;

    /// <summary>
    /// 红包ID
    /// </summary>
    public long LuckyMoneyId
    {
      get
      {
        return _luckyMoneyId;
      }
      set
      {
        __isset.luckyMoneyId = true;
        this._luckyMoneyId = value;
      }
    }

    /// <summary>
    /// 发送者信息
    /// </summary>
    public MusicCodec.PlayerBaseInfo SenderInfo
    {
      get
      {
        return _senderInfo;
      }
      set
      {
        __isset.senderInfo = true;
        this._senderInfo = value;
      }
    }

    /// <summary>
    /// 日期
    /// </summary>
    public long Date
    {
      get
      {
        return _date;
      }
      set
      {
        __isset.date = true;
        this._date = value;
      }
    }

    /// <summary>
    /// 红包类型
    /// 
    /// <seealso cref="MusicCodec.LuckyMoneyType"/>
    /// </summary>
    public MusicCodec.LuckyMoneyType Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    /// <summary>
    /// 收到金额
    /// </summary>
    public int ReceiveAmount
    {
      get
      {
        return _receiveAmount;
      }
      set
      {
        __isset.receiveAmount = true;
        this._receiveAmount = value;
      }
    }

    /// <summary>
    /// 是否手气最佳
    /// </summary>
    public bool IsBestLuck
    {
      get
      {
        return _isBestLuck;
      }
      set
      {
        __isset.isBestLuck = true;
        this._isBestLuck = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool luckyMoneyId;
      public bool senderInfo;
      public bool date;
      public bool type;
      public bool receiveAmount;
      public bool isBestLuck;
    }

    public ReceiveLuckyMoneyBasicInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              LuckyMoneyId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              SenderInfo = new MusicCodec.PlayerBaseInfo();
              SenderInfo.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              Date = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              Type = (MusicCodec.LuckyMoneyType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              ReceiveAmount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Bool) {
              IsBestLuck = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ReceiveLuckyMoneyBasicInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.luckyMoneyId) {
        field.Name = "luckyMoneyId";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(LuckyMoneyId);
        oprot.WriteFieldEnd();
      }
      if (SenderInfo != null && __isset.senderInfo) {
        field.Name = "senderInfo";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        SenderInfo.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.date) {
        field.Name = "date";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Date);
        oprot.WriteFieldEnd();
      }
      if (__isset.type) {
        field.Name = "type";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)Type);
        oprot.WriteFieldEnd();
      }
      if (__isset.receiveAmount) {
        field.Name = "receiveAmount";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ReceiveAmount);
        oprot.WriteFieldEnd();
      }
      if (__isset.isBestLuck) {
        field.Name = "isBestLuck";
        field.Type = TType.Bool;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsBestLuck);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ReceiveLuckyMoneyBasicInfo(");
      sb.Append("LuckyMoneyId: ");
      sb.Append(LuckyMoneyId);
      sb.Append(",SenderInfo: ");
      sb.Append(SenderInfo== null ? "<null>" : SenderInfo.ToString());
      sb.Append(",Date: ");
      sb.Append(Date);
      sb.Append(",Type: ");
      sb.Append(Type);
      sb.Append(",ReceiveAmount: ");
      sb.Append(ReceiveAmount);
      sb.Append(",IsBestLuck: ");
      sb.Append(IsBestLuck);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
