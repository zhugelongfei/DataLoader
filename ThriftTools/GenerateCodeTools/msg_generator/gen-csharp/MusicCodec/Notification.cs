/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Notification : TBase
  {
    private long _notificationId;
    private int _langId;
    private List<string> _langArgv;
    private NotificationType _type;
    private List<string> _notificationArgv;
    private int _sendTime;
    private string _senderHeadIcon;
    private short _headerFashionId;

    public long NotificationId
    {
      get
      {
        return _notificationId;
      }
      set
      {
        __isset.notificationId = true;
        this._notificationId = value;
      }
    }

    /// <summary>
    /// 多语言提示ID
    /// </summary>
    public int LangId
    {
      get
      {
        return _langId;
      }
      set
      {
        __isset.langId = true;
        this._langId = value;
      }
    }

    /// <summary>
    /// 多语言提示参数
    /// </summary>
    public List<string> LangArgv
    {
      get
      {
        return _langArgv;
      }
      set
      {
        __isset.langArgv = true;
        this._langArgv = value;
      }
    }

    /// <summary>
    /// 通知类型
    /// 
    /// <seealso cref="NotificationType"/>
    /// </summary>
    public NotificationType Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    /// <summary>
    /// 通知类型相关参数，如添加好友通知，会有对方的charId
    /// </summary>
    public List<string> NotificationArgv
    {
      get
      {
        return _notificationArgv;
      }
      set
      {
        __isset.notificationArgv = true;
        this._notificationArgv = value;
      }
    }

    public int SendTime
    {
      get
      {
        return _sendTime;
      }
      set
      {
        __isset.sendTime = true;
        this._sendTime = value;
      }
    }

    public string SenderHeadIcon
    {
      get
      {
        return _senderHeadIcon;
      }
      set
      {
        __isset.senderHeadIcon = true;
        this._senderHeadIcon = value;
      }
    }

    /// <summary>
    /// 头像框时尚id
    /// </summary>
    public short HeaderFashionId
    {
      get
      {
        return _headerFashionId;
      }
      set
      {
        __isset.headerFashionId = true;
        this._headerFashionId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool notificationId;
      public bool langId;
      public bool langArgv;
      public bool type;
      public bool notificationArgv;
      public bool sendTime;
      public bool senderHeadIcon;
      public bool headerFashionId;
    }

    public Notification() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              NotificationId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              LangId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                LangArgv = new List<string>();
                TList _list170 = iprot.ReadListBegin();
                for( int _i171 = 0; _i171 < _list170.Count; ++_i171)
                {
                  string _elem172 = null;
                  _elem172 = iprot.ReadString();
                  LangArgv.Add(_elem172);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              Type = (NotificationType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.List) {
              {
                NotificationArgv = new List<string>();
                TList _list173 = iprot.ReadListBegin();
                for( int _i174 = 0; _i174 < _list173.Count; ++_i174)
                {
                  string _elem175 = null;
                  _elem175 = iprot.ReadString();
                  NotificationArgv.Add(_elem175);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              SendTime = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              SenderHeadIcon = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I16) {
              HeaderFashionId = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Notification");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.notificationId) {
        field.Name = "notificationId";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(NotificationId);
        oprot.WriteFieldEnd();
      }
      if (__isset.langId) {
        field.Name = "langId";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(LangId);
        oprot.WriteFieldEnd();
      }
      if (LangArgv != null && __isset.langArgv) {
        field.Name = "langArgv";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, LangArgv.Count));
          foreach (string _iter176 in LangArgv)
          {
            oprot.WriteString(_iter176);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.type) {
        field.Name = "type";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)Type);
        oprot.WriteFieldEnd();
      }
      if (NotificationArgv != null && __isset.notificationArgv) {
        field.Name = "notificationArgv";
        field.Type = TType.List;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, NotificationArgv.Count));
          foreach (string _iter177 in NotificationArgv)
          {
            oprot.WriteString(_iter177);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.sendTime) {
        field.Name = "sendTime";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SendTime);
        oprot.WriteFieldEnd();
      }
      if (SenderHeadIcon != null && __isset.senderHeadIcon) {
        field.Name = "senderHeadIcon";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(SenderHeadIcon);
        oprot.WriteFieldEnd();
      }
      if (__isset.headerFashionId) {
        field.Name = "headerFashionId";
        field.Type = TType.I16;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(HeaderFashionId);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Notification(");
      sb.Append("NotificationId: ");
      sb.Append(NotificationId);
      sb.Append(",LangId: ");
      sb.Append(LangId);
      sb.Append(",LangArgv: ");
      sb.Append(LangArgv);
      sb.Append(",Type: ");
      sb.Append(Type);
      sb.Append(",NotificationArgv: ");
      sb.Append(NotificationArgv);
      sb.Append(",SendTime: ");
      sb.Append(SendTime);
      sb.Append(",SenderHeadIcon: ");
      sb.Append(SenderHeadIcon);
      sb.Append(",HeaderFashionId: ");
      sb.Append(HeaderFashionId);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
