/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class GuildBaseInfo : TBase
  {
    private long _guildId;
    private string _guildName;
    private GuildMemInfo _leaderInfo;
    private string _guildIcon;
    private string _noticeBoard;
    private short _memberCount;
    private short _averageLevel;
    private long _popularityCount;
    private int _vipExpCount;
    private byte _applyFlag;
    private short _limitCount;
    private int _honor;
    private int _level;
    private int _assistantCount;
    private int _assistantMaxCount;
    private byte[] _flags;
    private List<byte> _byteDayLoopCounterList;
    private List<short> _shortDayLoopCounterList;
    private List<int> _intDayLoopCounterList;
    private List<int> _intCounterList;
    private int _guildExp;
    private int _honorLevel;

    public long GuildId
    {
      get
      {
        return _guildId;
      }
      set
      {
        __isset.guildId = true;
        this._guildId = value;
      }
    }

    public string GuildName
    {
      get
      {
        return _guildName;
      }
      set
      {
        __isset.guildName = true;
        this._guildName = value;
      }
    }

    public GuildMemInfo LeaderInfo
    {
      get
      {
        return _leaderInfo;
      }
      set
      {
        __isset.leaderInfo = true;
        this._leaderInfo = value;
      }
    }

    public string GuildIcon
    {
      get
      {
        return _guildIcon;
      }
      set
      {
        __isset.guildIcon = true;
        this._guildIcon = value;
      }
    }

    public string NoticeBoard
    {
      get
      {
        return _noticeBoard;
      }
      set
      {
        __isset.noticeBoard = true;
        this._noticeBoard = value;
      }
    }

    public short MemberCount
    {
      get
      {
        return _memberCount;
      }
      set
      {
        __isset.memberCount = true;
        this._memberCount = value;
      }
    }

    public short AverageLevel
    {
      get
      {
        return _averageLevel;
      }
      set
      {
        __isset.averageLevel = true;
        this._averageLevel = value;
      }
    }

    public long PopularityCount
    {
      get
      {
        return _popularityCount;
      }
      set
      {
        __isset.popularityCount = true;
        this._popularityCount = value;
      }
    }

    public int VipExpCount
    {
      get
      {
        return _vipExpCount;
      }
      set
      {
        __isset.vipExpCount = true;
        this._vipExpCount = value;
      }
    }

    public byte ApplyFlag
    {
      get
      {
        return _applyFlag;
      }
      set
      {
        __isset.applyFlag = true;
        this._applyFlag = value;
      }
    }

    public short LimitCount
    {
      get
      {
        return _limitCount;
      }
      set
      {
        __isset.limitCount = true;
        this._limitCount = value;
      }
    }

    public int Honor
    {
      get
      {
        return _honor;
      }
      set
      {
        __isset.honor = true;
        this._honor = value;
      }
    }

    public int Level
    {
      get
      {
        return _level;
      }
      set
      {
        __isset.level = true;
        this._level = value;
      }
    }

    public int AssistantCount
    {
      get
      {
        return _assistantCount;
      }
      set
      {
        __isset.assistantCount = true;
        this._assistantCount = value;
      }
    }

    public int AssistantMaxCount
    {
      get
      {
        return _assistantMaxCount;
      }
      set
      {
        __isset.assistantMaxCount = true;
        this._assistantMaxCount = value;
      }
    }

    public byte[] Flags
    {
      get
      {
        return _flags;
      }
      set
      {
        __isset.flags = true;
        this._flags = value;
      }
    }

    public List<byte> ByteDayLoopCounterList
    {
      get
      {
        return _byteDayLoopCounterList;
      }
      set
      {
        __isset.byteDayLoopCounterList = true;
        this._byteDayLoopCounterList = value;
      }
    }

    public List<short> ShortDayLoopCounterList
    {
      get
      {
        return _shortDayLoopCounterList;
      }
      set
      {
        __isset.shortDayLoopCounterList = true;
        this._shortDayLoopCounterList = value;
      }
    }

    public List<int> IntDayLoopCounterList
    {
      get
      {
        return _intDayLoopCounterList;
      }
      set
      {
        __isset.intDayLoopCounterList = true;
        this._intDayLoopCounterList = value;
      }
    }

    public List<int> IntCounterList
    {
      get
      {
        return _intCounterList;
      }
      set
      {
        __isset.intCounterList = true;
        this._intCounterList = value;
      }
    }

    public int GuildExp
    {
      get
      {
        return _guildExp;
      }
      set
      {
        __isset.guildExp = true;
        this._guildExp = value;
      }
    }

    public int HonorLevel
    {
      get
      {
        return _honorLevel;
      }
      set
      {
        __isset.honorLevel = true;
        this._honorLevel = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool guildId;
      public bool guildName;
      public bool leaderInfo;
      public bool guildIcon;
      public bool noticeBoard;
      public bool memberCount;
      public bool averageLevel;
      public bool popularityCount;
      public bool vipExpCount;
      public bool applyFlag;
      public bool limitCount;
      public bool honor;
      public bool level;
      public bool assistantCount;
      public bool assistantMaxCount;
      public bool flags;
      public bool byteDayLoopCounterList;
      public bool shortDayLoopCounterList;
      public bool intDayLoopCounterList;
      public bool intCounterList;
      public bool guildExp;
      public bool honorLevel;
    }

    public GuildBaseInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              GuildId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              GuildName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Struct) {
              LeaderInfo = new GuildMemInfo();
              LeaderInfo.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              GuildIcon = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              NoticeBoard = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I16) {
              MemberCount = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I16) {
              AverageLevel = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I64) {
              PopularityCount = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I32) {
              VipExpCount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.Byte) {
              ApplyFlag = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I16) {
              LimitCount = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.I32) {
              Honor = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.I32) {
              Level = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.I32) {
              AssistantCount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.I32) {
              AssistantMaxCount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 16:
            if (field.Type == TType.String) {
              Flags = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 17:
            if (field.Type == TType.List) {
              {
                ByteDayLoopCounterList = new List<byte>();
                TList _list207 = iprot.ReadListBegin();
                for( int _i208 = 0; _i208 < _list207.Count; ++_i208)
                {
                  byte _elem209 = 0;
                  _elem209 = iprot.ReadByte();
                  ByteDayLoopCounterList.Add(_elem209);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 18:
            if (field.Type == TType.List) {
              {
                ShortDayLoopCounterList = new List<short>();
                TList _list210 = iprot.ReadListBegin();
                for( int _i211 = 0; _i211 < _list210.Count; ++_i211)
                {
                  short _elem212 = 0;
                  _elem212 = iprot.ReadI16();
                  ShortDayLoopCounterList.Add(_elem212);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 19:
            if (field.Type == TType.List) {
              {
                IntDayLoopCounterList = new List<int>();
                TList _list213 = iprot.ReadListBegin();
                for( int _i214 = 0; _i214 < _list213.Count; ++_i214)
                {
                  int _elem215 = 0;
                  _elem215 = iprot.ReadI32();
                  IntDayLoopCounterList.Add(_elem215);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.List) {
              {
                IntCounterList = new List<int>();
                TList _list216 = iprot.ReadListBegin();
                for( int _i217 = 0; _i217 < _list216.Count; ++_i217)
                {
                  int _elem218 = 0;
                  _elem218 = iprot.ReadI32();
                  IntCounterList.Add(_elem218);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 21:
            if (field.Type == TType.I32) {
              GuildExp = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 22:
            if (field.Type == TType.I32) {
              HonorLevel = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("GuildBaseInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.guildId) {
        field.Name = "guildId";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(GuildId);
        oprot.WriteFieldEnd();
      }
      if (GuildName != null && __isset.guildName) {
        field.Name = "guildName";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(GuildName);
        oprot.WriteFieldEnd();
      }
      if (LeaderInfo != null && __isset.leaderInfo) {
        field.Name = "leaderInfo";
        field.Type = TType.Struct;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        LeaderInfo.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (GuildIcon != null && __isset.guildIcon) {
        field.Name = "guildIcon";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(GuildIcon);
        oprot.WriteFieldEnd();
      }
      if (NoticeBoard != null && __isset.noticeBoard) {
        field.Name = "noticeBoard";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(NoticeBoard);
        oprot.WriteFieldEnd();
      }
      if (__isset.memberCount) {
        field.Name = "memberCount";
        field.Type = TType.I16;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(MemberCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.averageLevel) {
        field.Name = "averageLevel";
        field.Type = TType.I16;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(AverageLevel);
        oprot.WriteFieldEnd();
      }
      if (__isset.popularityCount) {
        field.Name = "popularityCount";
        field.Type = TType.I64;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(PopularityCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.vipExpCount) {
        field.Name = "vipExpCount";
        field.Type = TType.I32;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(VipExpCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.applyFlag) {
        field.Name = "applyFlag";
        field.Type = TType.Byte;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(ApplyFlag);
        oprot.WriteFieldEnd();
      }
      if (__isset.limitCount) {
        field.Name = "limitCount";
        field.Type = TType.I16;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(LimitCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.honor) {
        field.Name = "honor";
        field.Type = TType.I32;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Honor);
        oprot.WriteFieldEnd();
      }
      if (__isset.level) {
        field.Name = "level";
        field.Type = TType.I32;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Level);
        oprot.WriteFieldEnd();
      }
      if (__isset.assistantCount) {
        field.Name = "assistantCount";
        field.Type = TType.I32;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(AssistantCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.assistantMaxCount) {
        field.Name = "assistantMaxCount";
        field.Type = TType.I32;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(AssistantMaxCount);
        oprot.WriteFieldEnd();
      }
      if (Flags != null && __isset.flags) {
        field.Name = "flags";
        field.Type = TType.String;
        field.ID = 16;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Flags);
        oprot.WriteFieldEnd();
      }
      if (ByteDayLoopCounterList != null && __isset.byteDayLoopCounterList) {
        field.Name = "byteDayLoopCounterList";
        field.Type = TType.List;
        field.ID = 17;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Byte, ByteDayLoopCounterList.Count));
          foreach (byte _iter219 in ByteDayLoopCounterList)
          {
            oprot.WriteByte(_iter219);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (ShortDayLoopCounterList != null && __isset.shortDayLoopCounterList) {
        field.Name = "shortDayLoopCounterList";
        field.Type = TType.List;
        field.ID = 18;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I16, ShortDayLoopCounterList.Count));
          foreach (short _iter220 in ShortDayLoopCounterList)
          {
            oprot.WriteI16(_iter220);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (IntDayLoopCounterList != null && __isset.intDayLoopCounterList) {
        field.Name = "intDayLoopCounterList";
        field.Type = TType.List;
        field.ID = 19;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, IntDayLoopCounterList.Count));
          foreach (int _iter221 in IntDayLoopCounterList)
          {
            oprot.WriteI32(_iter221);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (IntCounterList != null && __isset.intCounterList) {
        field.Name = "intCounterList";
        field.Type = TType.List;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, IntCounterList.Count));
          foreach (int _iter222 in IntCounterList)
          {
            oprot.WriteI32(_iter222);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.guildExp) {
        field.Name = "guildExp";
        field.Type = TType.I32;
        field.ID = 21;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(GuildExp);
        oprot.WriteFieldEnd();
      }
      if (__isset.honorLevel) {
        field.Name = "honorLevel";
        field.Type = TType.I32;
        field.ID = 22;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(HonorLevel);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("GuildBaseInfo(");
      sb.Append("GuildId: ");
      sb.Append(GuildId);
      sb.Append(",GuildName: ");
      sb.Append(GuildName);
      sb.Append(",LeaderInfo: ");
      sb.Append(LeaderInfo== null ? "<null>" : LeaderInfo.ToString());
      sb.Append(",GuildIcon: ");
      sb.Append(GuildIcon);
      sb.Append(",NoticeBoard: ");
      sb.Append(NoticeBoard);
      sb.Append(",MemberCount: ");
      sb.Append(MemberCount);
      sb.Append(",AverageLevel: ");
      sb.Append(AverageLevel);
      sb.Append(",PopularityCount: ");
      sb.Append(PopularityCount);
      sb.Append(",VipExpCount: ");
      sb.Append(VipExpCount);
      sb.Append(",ApplyFlag: ");
      sb.Append(ApplyFlag);
      sb.Append(",LimitCount: ");
      sb.Append(LimitCount);
      sb.Append(",Honor: ");
      sb.Append(Honor);
      sb.Append(",Level: ");
      sb.Append(Level);
      sb.Append(",AssistantCount: ");
      sb.Append(AssistantCount);
      sb.Append(",AssistantMaxCount: ");
      sb.Append(AssistantMaxCount);
      sb.Append(",Flags: ");
      sb.Append(Flags);
      sb.Append(",ByteDayLoopCounterList: ");
      sb.Append(ByteDayLoopCounterList);
      sb.Append(",ShortDayLoopCounterList: ");
      sb.Append(ShortDayLoopCounterList);
      sb.Append(",IntDayLoopCounterList: ");
      sb.Append(IntDayLoopCounterList);
      sb.Append(",IntCounterList: ");
      sb.Append(IntCounterList);
      sb.Append(",GuildExp: ");
      sb.Append(GuildExp);
      sb.Append(",HonorLevel: ");
      sb.Append(HonorLevel);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
