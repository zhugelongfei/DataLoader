/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class RoomMemberInfo : TBase
  {
    private byte _prepareStatus;
    private short _modelId;
    private byte _bodyAdjVal;
    private List<AvatarInfo> _avatarInfos;
    private byte _relation;
    private byte _stature;
    private short _seatId;
    private PlayerBaseInfo _playerBaseInfo;
    private int _skinColor;
    private long _theOneCharId;
    private List<BadgeInfo> _putOnBadges;
    private double _positionX;
    private double _positionY;
    private double _positionZ;
    private Dictionary<byte, int> _danceFashionIds;
    private byte _targetGroundStatus;
    private byte _actionStatus;
    private int _objId;
    private int _objParam;
    private byte _musicLoadProcess;
    private bool _isReady;

    public byte PrepareStatus
    {
      get
      {
        return _prepareStatus;
      }
      set
      {
        __isset.prepareStatus = true;
        this._prepareStatus = value;
      }
    }

    public short ModelId
    {
      get
      {
        return _modelId;
      }
      set
      {
        __isset.modelId = true;
        this._modelId = value;
      }
    }

    public byte BodyAdjVal
    {
      get
      {
        return _bodyAdjVal;
      }
      set
      {
        __isset.bodyAdjVal = true;
        this._bodyAdjVal = value;
      }
    }

    public List<AvatarInfo> AvatarInfos
    {
      get
      {
        return _avatarInfos;
      }
      set
      {
        __isset.avatarInfos = true;
        this._avatarInfos = value;
      }
    }

    /// <summary>
    /// 0-strange 1-friend
    /// </summary>
    public byte Relation
    {
      get
      {
        return _relation;
      }
      set
      {
        __isset.relation = true;
        this._relation = value;
      }
    }

    public byte Stature
    {
      get
      {
        return _stature;
      }
      set
      {
        __isset.stature = true;
        this._stature = value;
      }
    }

    /// <summary>
    /// -1 watch
    /// </summary>
    public short SeatId
    {
      get
      {
        return _seatId;
      }
      set
      {
        __isset.seatId = true;
        this._seatId = value;
      }
    }

    public PlayerBaseInfo PlayerBaseInfo
    {
      get
      {
        return _playerBaseInfo;
      }
      set
      {
        __isset.playerBaseInfo = true;
        this._playerBaseInfo = value;
      }
    }

    public int SkinColor
    {
      get
      {
        return _skinColor;
      }
      set
      {
        __isset.skinColor = true;
        this._skinColor = value;
      }
    }

    public long TheOneCharId
    {
      get
      {
        return _theOneCharId;
      }
      set
      {
        __isset.theOneCharId = true;
        this._theOneCharId = value;
      }
    }

    /// <summary>
    /// 佩戴的徽章
    /// </summary>
    public List<BadgeInfo> PutOnBadges
    {
      get
      {
        return _putOnBadges;
      }
      set
      {
        __isset.putOnBadges = true;
        this._putOnBadges = value;
      }
    }

    public double PositionX
    {
      get
      {
        return _positionX;
      }
      set
      {
        __isset.positionX = true;
        this._positionX = value;
      }
    }

    public double PositionY
    {
      get
      {
        return _positionY;
      }
      set
      {
        __isset.positionY = true;
        this._positionY = value;
      }
    }

    public double PositionZ
    {
      get
      {
        return _positionZ;
      }
      set
      {
        __isset.positionZ = true;
        this._positionZ = value;
      }
    }

    /// <summary>
    /// 使用中的个人展示时尚id key:style val:id
    /// </summary>
    public Dictionary<byte, int> DanceFashionIds
    {
      get
      {
        return _danceFashionIds;
      }
      set
      {
        __isset.danceFashionIds = true;
        this._danceFashionIds = value;
      }
    }

    /// <summary>
    /// 广场区域GroundPlayerStatus
    /// </summary>
    public byte TargetGroundStatus
    {
      get
      {
        return _targetGroundStatus;
      }
      set
      {
        __isset.targetGroundStatus = true;
        this._targetGroundStatus = value;
      }
    }

    /// <summary>
    /// 行为状态GroundActionStatus
    /// </summary>
    public byte ActionStatus
    {
      get
      {
        return _actionStatus;
      }
      set
      {
        __isset.actionStatus = true;
        this._actionStatus = value;
      }
    }

    /// <summary>
    /// 广场部件id
    /// </summary>
    public int ObjId
    {
      get
      {
        return _objId;
      }
      set
      {
        __isset.objId = true;
        this._objId = value;
      }
    }

    /// <summary>
    /// 广场部件参数
    /// </summary>
    public int ObjParam
    {
      get
      {
        return _objParam;
      }
      set
      {
        __isset.objParam = true;
        this._objParam = value;
      }
    }

    /// <summary>
    /// 音乐加载进度（0-100）
    /// </summary>
    public byte MusicLoadProcess
    {
      get
      {
        return _musicLoadProcess;
      }
      set
      {
        __isset.musicLoadProcess = true;
        this._musicLoadProcess = value;
      }
    }

    /// <summary>
    /// 是否准备好
    /// </summary>
    public bool IsReady
    {
      get
      {
        return _isReady;
      }
      set
      {
        __isset.isReady = true;
        this._isReady = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool prepareStatus;
      public bool modelId;
      public bool bodyAdjVal;
      public bool avatarInfos;
      public bool relation;
      public bool stature;
      public bool seatId;
      public bool playerBaseInfo;
      public bool skinColor;
      public bool theOneCharId;
      public bool putOnBadges;
      public bool positionX;
      public bool positionY;
      public bool positionZ;
      public bool danceFashionIds;
      public bool targetGroundStatus;
      public bool actionStatus;
      public bool objId;
      public bool objParam;
      public bool musicLoadProcess;
      public bool isReady;
    }

    public RoomMemberInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Byte) {
              PrepareStatus = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I16) {
              ModelId = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Byte) {
              BodyAdjVal = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.List) {
              {
                AvatarInfos = new List<AvatarInfo>();
                TList _list128 = iprot.ReadListBegin();
                for( int _i129 = 0; _i129 < _list128.Count; ++_i129)
                {
                  AvatarInfo _elem130 = new AvatarInfo();
                  _elem130 = new AvatarInfo();
                  _elem130.Read(iprot);
                  AvatarInfos.Add(_elem130);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Byte) {
              Relation = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Byte) {
              Stature = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I16) {
              SeatId = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.Struct) {
              PlayerBaseInfo = new PlayerBaseInfo();
              PlayerBaseInfo.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I32) {
              SkinColor = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.I64) {
              TheOneCharId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.List) {
              {
                PutOnBadges = new List<BadgeInfo>();
                TList _list131 = iprot.ReadListBegin();
                for( int _i132 = 0; _i132 < _list131.Count; ++_i132)
                {
                  BadgeInfo _elem133 = new BadgeInfo();
                  _elem133 = new BadgeInfo();
                  _elem133.Read(iprot);
                  PutOnBadges.Add(_elem133);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.Double) {
              PositionX = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.Double) {
              PositionY = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 16:
            if (field.Type == TType.Double) {
              PositionZ = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 17:
            if (field.Type == TType.Map) {
              {
                DanceFashionIds = new Dictionary<byte, int>();
                TMap _map134 = iprot.ReadMapBegin();
                for( int _i135 = 0; _i135 < _map134.Count; ++_i135)
                {
                  byte _key136;
                  int _val137;
                  _key136 = iprot.ReadByte();
                  _val137 = iprot.ReadI32();
                  DanceFashionIds[_key136] = _val137;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 18:
            if (field.Type == TType.Byte) {
              TargetGroundStatus = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 19:
            if (field.Type == TType.Byte) {
              ActionStatus = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.I32) {
              ObjId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 21:
            if (field.Type == TType.I32) {
              ObjParam = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 22:
            if (field.Type == TType.Byte) {
              MusicLoadProcess = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 23:
            if (field.Type == TType.Bool) {
              IsReady = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("RoomMemberInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.prepareStatus) {
        field.Name = "prepareStatus";
        field.Type = TType.Byte;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(PrepareStatus);
        oprot.WriteFieldEnd();
      }
      if (__isset.modelId) {
        field.Name = "modelId";
        field.Type = TType.I16;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(ModelId);
        oprot.WriteFieldEnd();
      }
      if (__isset.bodyAdjVal) {
        field.Name = "bodyAdjVal";
        field.Type = TType.Byte;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(BodyAdjVal);
        oprot.WriteFieldEnd();
      }
      if (AvatarInfos != null && __isset.avatarInfos) {
        field.Name = "avatarInfos";
        field.Type = TType.List;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, AvatarInfos.Count));
          foreach (AvatarInfo _iter138 in AvatarInfos)
          {
            _iter138.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.relation) {
        field.Name = "relation";
        field.Type = TType.Byte;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Relation);
        oprot.WriteFieldEnd();
      }
      if (__isset.stature) {
        field.Name = "stature";
        field.Type = TType.Byte;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Stature);
        oprot.WriteFieldEnd();
      }
      if (__isset.seatId) {
        field.Name = "seatId";
        field.Type = TType.I16;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(SeatId);
        oprot.WriteFieldEnd();
      }
      if (PlayerBaseInfo != null && __isset.playerBaseInfo) {
        field.Name = "playerBaseInfo";
        field.Type = TType.Struct;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        PlayerBaseInfo.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.skinColor) {
        field.Name = "skinColor";
        field.Type = TType.I32;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SkinColor);
        oprot.WriteFieldEnd();
      }
      if (__isset.theOneCharId) {
        field.Name = "theOneCharId";
        field.Type = TType.I64;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(TheOneCharId);
        oprot.WriteFieldEnd();
      }
      if (PutOnBadges != null && __isset.putOnBadges) {
        field.Name = "putOnBadges";
        field.Type = TType.List;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, PutOnBadges.Count));
          foreach (BadgeInfo _iter139 in PutOnBadges)
          {
            _iter139.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.positionX) {
        field.Name = "positionX";
        field.Type = TType.Double;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(PositionX);
        oprot.WriteFieldEnd();
      }
      if (__isset.positionY) {
        field.Name = "positionY";
        field.Type = TType.Double;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(PositionY);
        oprot.WriteFieldEnd();
      }
      if (__isset.positionZ) {
        field.Name = "positionZ";
        field.Type = TType.Double;
        field.ID = 16;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(PositionZ);
        oprot.WriteFieldEnd();
      }
      if (DanceFashionIds != null && __isset.danceFashionIds) {
        field.Name = "danceFashionIds";
        field.Type = TType.Map;
        field.ID = 17;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.Byte, TType.I32, DanceFashionIds.Count));
          foreach (byte _iter140 in DanceFashionIds.Keys)
          {
            oprot.WriteByte(_iter140);
            oprot.WriteI32(DanceFashionIds[_iter140]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.targetGroundStatus) {
        field.Name = "targetGroundStatus";
        field.Type = TType.Byte;
        field.ID = 18;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(TargetGroundStatus);
        oprot.WriteFieldEnd();
      }
      if (__isset.actionStatus) {
        field.Name = "actionStatus";
        field.Type = TType.Byte;
        field.ID = 19;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(ActionStatus);
        oprot.WriteFieldEnd();
      }
      if (__isset.objId) {
        field.Name = "objId";
        field.Type = TType.I32;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ObjId);
        oprot.WriteFieldEnd();
      }
      if (__isset.objParam) {
        field.Name = "objParam";
        field.Type = TType.I32;
        field.ID = 21;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ObjParam);
        oprot.WriteFieldEnd();
      }
      if (__isset.musicLoadProcess) {
        field.Name = "musicLoadProcess";
        field.Type = TType.Byte;
        field.ID = 22;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(MusicLoadProcess);
        oprot.WriteFieldEnd();
      }
      if (__isset.isReady) {
        field.Name = "isReady";
        field.Type = TType.Bool;
        field.ID = 23;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsReady);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("RoomMemberInfo(");
      sb.Append("PrepareStatus: ");
      sb.Append(PrepareStatus);
      sb.Append(",ModelId: ");
      sb.Append(ModelId);
      sb.Append(",BodyAdjVal: ");
      sb.Append(BodyAdjVal);
      sb.Append(",AvatarInfos: ");
      sb.Append(AvatarInfos);
      sb.Append(",Relation: ");
      sb.Append(Relation);
      sb.Append(",Stature: ");
      sb.Append(Stature);
      sb.Append(",SeatId: ");
      sb.Append(SeatId);
      sb.Append(",PlayerBaseInfo: ");
      sb.Append(PlayerBaseInfo== null ? "<null>" : PlayerBaseInfo.ToString());
      sb.Append(",SkinColor: ");
      sb.Append(SkinColor);
      sb.Append(",TheOneCharId: ");
      sb.Append(TheOneCharId);
      sb.Append(",PutOnBadges: ");
      sb.Append(PutOnBadges);
      sb.Append(",PositionX: ");
      sb.Append(PositionX);
      sb.Append(",PositionY: ");
      sb.Append(PositionY);
      sb.Append(",PositionZ: ");
      sb.Append(PositionZ);
      sb.Append(",DanceFashionIds: ");
      sb.Append(DanceFashionIds);
      sb.Append(",TargetGroundStatus: ");
      sb.Append(TargetGroundStatus);
      sb.Append(",ActionStatus: ");
      sb.Append(ActionStatus);
      sb.Append(",ObjId: ");
      sb.Append(ObjId);
      sb.Append(",ObjParam: ");
      sb.Append(ObjParam);
      sb.Append(",MusicLoadProcess: ");
      sb.Append(MusicLoadProcess);
      sb.Append(",IsReady: ");
      sb.Append(IsReady);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
