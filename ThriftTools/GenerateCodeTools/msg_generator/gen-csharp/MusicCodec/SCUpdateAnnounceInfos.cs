/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  /// <summary>
  /// 更新通告信息
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SCUpdateAnnounceInfos : TBase
  {
    private int _announceId;
    private byte _announceIndex;
    private int _leftTimes;
    private int _coldDown;
    private int _announceTipId;

    /// <summary>
    /// 通告id
    /// </summary>
    public int AnnounceId
    {
      get
      {
        return _announceId;
      }
      set
      {
        __isset.announceId = true;
        this._announceId = value;
      }
    }

    /// <summary>
    /// 通告索引
    /// </summary>
    public byte AnnounceIndex
    {
      get
      {
        return _announceIndex;
      }
      set
      {
        __isset.announceIndex = true;
        this._announceIndex = value;
      }
    }

    /// <summary>
    /// 剩余次数
    /// </summary>
    public int LeftTimes
    {
      get
      {
        return _leftTimes;
      }
      set
      {
        __isset.leftTimes = true;
        this._leftTimes = value;
      }
    }

    /// <summary>
    /// 通告冷却时间(距离1970.1.1的秒数)
    /// </summary>
    public int ColdDown
    {
      get
      {
        return _coldDown;
      }
      set
      {
        __isset.coldDown = true;
        this._coldDown = value;
      }
    }

    /// <summary>
    /// 通告提示id
    /// </summary>
    public int AnnounceTipId
    {
      get
      {
        return _announceTipId;
      }
      set
      {
        __isset.announceTipId = true;
        this._announceTipId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool announceId;
      public bool announceIndex;
      public bool leftTimes;
      public bool coldDown;
      public bool announceTipId;
    }

    public SCUpdateAnnounceInfos() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              AnnounceId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Byte) {
              AnnounceIndex = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              LeftTimes = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              ColdDown = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              AnnounceTipId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
ClientLog.Instance.LogError("This function is deleted.");
}

    


  }

}
