/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  /// <summary>
  /// 活动类型信息
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ActivityTypeInfo : TBase
  {
    private int _activityId;
    private string _activityIcon;
    private bool _hasActivityPrize;
    private byte _funcButton;

    public int ActivityId
    {
      get
      {
        return _activityId;
      }
      set
      {
        __isset.activityId = true;
        this._activityId = value;
      }
    }

    /// <summary>
    /// 活动图标
    /// </summary>
    public string ActivityIcon
    {
      get
      {
        return _activityIcon;
      }
      set
      {
        __isset.activityIcon = true;
        this._activityIcon = value;
      }
    }

    /// <summary>
    /// 是否有活动奖励可领取
    /// </summary>
    public bool HasActivityPrize
    {
      get
      {
        return _hasActivityPrize;
      }
      set
      {
        __isset.hasActivityPrize = true;
        this._hasActivityPrize = value;
      }
    }

    /// <summary>
    /// 功能按钮 0：不需要显示额外按钮 1：显示充值按钮
    /// </summary>
    public byte FuncButton
    {
      get
      {
        return _funcButton;
      }
      set
      {
        __isset.funcButton = true;
        this._funcButton = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool activityId;
      public bool activityIcon;
      public bool hasActivityPrize;
      public bool funcButton;
    }

    public ActivityTypeInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              ActivityId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              ActivityIcon = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Bool) {
              HasActivityPrize = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Byte) {
              FuncButton = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ActivityTypeInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.activityId) {
        field.Name = "activityId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ActivityId);
        oprot.WriteFieldEnd();
      }
      if (ActivityIcon != null && __isset.activityIcon) {
        field.Name = "activityIcon";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ActivityIcon);
        oprot.WriteFieldEnd();
      }
      if (__isset.hasActivityPrize) {
        field.Name = "hasActivityPrize";
        field.Type = TType.Bool;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(HasActivityPrize);
        oprot.WriteFieldEnd();
      }
      if (__isset.funcButton) {
        field.Name = "funcButton";
        field.Type = TType.Byte;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(FuncButton);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ActivityTypeInfo(");
      sb.Append("ActivityId: ");
      sb.Append(ActivityId);
      sb.Append(",ActivityIcon: ");
      sb.Append(ActivityIcon);
      sb.Append(",HasActivityPrize: ");
      sb.Append(HasActivityPrize);
      sb.Append(",FuncButton: ");
      sb.Append(FuncButton);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
