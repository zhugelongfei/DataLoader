/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TimingLottery : TBase
  {
    private MusicCodec.LotteryType _type;
    private int _maleItem;
    private int _femaleItem;
    private string _startDate;
    private string _endDate;
    private List<MusicCodec.LimitSaleTime> _timeRange;

    /// <summary>
    /// 
    /// <seealso cref="MusicCodec.LotteryType"/>
    /// </summary>
    public MusicCodec.LotteryType Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public int MaleItem
    {
      get
      {
        return _maleItem;
      }
      set
      {
        __isset.maleItem = true;
        this._maleItem = value;
      }
    }

    public int FemaleItem
    {
      get
      {
        return _femaleItem;
      }
      set
      {
        __isset.femaleItem = true;
        this._femaleItem = value;
      }
    }

    public string StartDate
    {
      get
      {
        return _startDate;
      }
      set
      {
        __isset.startDate = true;
        this._startDate = value;
      }
    }

    public string EndDate
    {
      get
      {
        return _endDate;
      }
      set
      {
        __isset.endDate = true;
        this._endDate = value;
      }
    }

    public List<MusicCodec.LimitSaleTime> TimeRange
    {
      get
      {
        return _timeRange;
      }
      set
      {
        __isset.timeRange = true;
        this._timeRange = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool type;
      public bool maleItem;
      public bool femaleItem;
      public bool startDate;
      public bool endDate;
      public bool timeRange;
    }

    public TimingLottery() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Type = (MusicCodec.LotteryType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              MaleItem = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              FemaleItem = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              StartDate = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              EndDate = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.List) {
              {
                TimeRange = new List<MusicCodec.LimitSaleTime>();
                TList _list36 = iprot.ReadListBegin();
                for( int _i37 = 0; _i37 < _list36.Count; ++_i37)
                {
                  MusicCodec.LimitSaleTime _elem38 = new MusicCodec.LimitSaleTime();
                  _elem38 = new MusicCodec.LimitSaleTime();
                  _elem38.Read(iprot);
                  TimeRange.Add(_elem38);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("TimingLottery");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.type) {
        field.Name = "type";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)Type);
        oprot.WriteFieldEnd();
      }
      if (__isset.maleItem) {
        field.Name = "maleItem";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MaleItem);
        oprot.WriteFieldEnd();
      }
      if (__isset.femaleItem) {
        field.Name = "femaleItem";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(FemaleItem);
        oprot.WriteFieldEnd();
      }
      if (StartDate != null && __isset.startDate) {
        field.Name = "startDate";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(StartDate);
        oprot.WriteFieldEnd();
      }
      if (EndDate != null && __isset.endDate) {
        field.Name = "endDate";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(EndDate);
        oprot.WriteFieldEnd();
      }
      if (TimeRange != null && __isset.timeRange) {
        field.Name = "timeRange";
        field.Type = TType.List;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, TimeRange.Count));
          foreach (MusicCodec.LimitSaleTime _iter39 in TimeRange)
          {
            _iter39.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("TimingLottery(");
      sb.Append("Type: ");
      sb.Append(Type);
      sb.Append(",MaleItem: ");
      sb.Append(MaleItem);
      sb.Append(",FemaleItem: ");
      sb.Append(FemaleItem);
      sb.Append(",StartDate: ");
      sb.Append(StartDate);
      sb.Append(",EndDate: ");
      sb.Append(EndDate);
      sb.Append(",TimeRange: ");
      sb.Append(TimeRange);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
