/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  /// <summary>
  /// 巡演星数奖励状态信息
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SCTourStarPrizeStatus : TBase
  {
    private int _version;
    private List<TourStarPrizeStatus> _prizedStatuss;
    private short _chapterId;
    private int _curStars;

    /// <summary>
    /// 星数奖励信息版本号，有奖励翻倍时更新
    /// </summary>
    public int Version
    {
      get
      {
        return _version;
      }
      set
      {
        __isset.version = true;
        this._version = value;
      }
    }

    /// <summary>
    /// 星数奖励状态信息
    /// </summary>
    public List<TourStarPrizeStatus> PrizedStatuss
    {
      get
      {
        return _prizedStatuss;
      }
      set
      {
        __isset.prizedStatuss = true;
        this._prizedStatuss = value;
      }
    }

    /// <summary>
    /// 章节id
    /// </summary>
    public short ChapterId
    {
      get
      {
        return _chapterId;
      }
      set
      {
        __isset.chapterId = true;
        this._chapterId = value;
      }
    }

    /// <summary>
    /// 获得的星数
    /// </summary>
    public int CurStars
    {
      get
      {
        return _curStars;
      }
      set
      {
        __isset.curStars = true;
        this._curStars = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool version;
      public bool prizedStatuss;
      public bool chapterId;
      public bool curStars;
    }

    public SCTourStarPrizeStatus() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Version = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                PrizedStatuss = new List<TourStarPrizeStatus>();
                TList _list36 = iprot.ReadListBegin();
                for( int _i37 = 0; _i37 < _list36.Count; ++_i37)
                {
                  TourStarPrizeStatus _elem38 = new TourStarPrizeStatus();
                  _elem38 = new TourStarPrizeStatus();
                  _elem38.Read(iprot);
                  PrizedStatuss.Add(_elem38);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I16) {
              ChapterId = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              CurStars = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
ClientLog.Instance.LogError("This function is deleted.");
}

    


  }

}
