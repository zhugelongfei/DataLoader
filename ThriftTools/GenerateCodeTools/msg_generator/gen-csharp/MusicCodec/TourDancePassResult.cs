/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  /// <summary>
  /// 巡演舞蹈通关结果
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TourDancePassResult : TBase
  {
    private bool _canPassTour;
    private bool _canAcceptPrize;
    private short _chapterId;
    private short _raidId;
    private byte _passRank;
    private MusicCodec.PassCheerCondResult _basicPassCondResult;
    private MusicCodec.PassCheerCondResult _extraPassCondResult;
    private MusicCodec.PrizeInfo _prizeInfos;
    private List<MusicCodec.DanceCheerValResult> _cheerValResults;
    private MusicCodec.PrizeInfo _extraPrizeInfos;

    /// <summary>
    /// 是否巡演通关， 为false立即失败
    /// </summary>
    public bool CanPassTour
    {
      get
      {
        return _canPassTour;
      }
      set
      {
        __isset.canPassTour = true;
        this._canPassTour = value;
      }
    }

    /// <summary>
    /// 是否显示领取奖励按钮
    /// </summary>
    public bool CanAcceptPrize
    {
      get
      {
        return _canAcceptPrize;
      }
      set
      {
        __isset.canAcceptPrize = true;
        this._canAcceptPrize = value;
      }
    }

    /// <summary>
    /// 章节id
    /// </summary>
    public short ChapterId
    {
      get
      {
        return _chapterId;
      }
      set
      {
        __isset.chapterId = true;
        this._chapterId = value;
      }
    }

    /// <summary>
    /// 关卡id
    /// </summary>
    public short RaidId
    {
      get
      {
        return _raidId;
      }
      set
      {
        __isset.raidId = true;
        this._raidId = value;
      }
    }

    /// <summary>
    /// 通关等级 0-未通关 1-3 s, ss, sss
    /// </summary>
    public byte PassRank
    {
      get
      {
        return _passRank;
      }
      set
      {
        __isset.passRank = true;
        this._passRank = value;
      }
    }

    /// <summary>
    /// 1s通关条件信息
    /// </summary>
    public MusicCodec.PassCheerCondResult BasicPassCondResult
    {
      get
      {
        return _basicPassCondResult;
      }
      set
      {
        __isset.basicPassCondResult = true;
        this._basicPassCondResult = value;
      }
    }

    /// <summary>
    /// 额外通关条件信息
    /// </summary>
    public MusicCodec.PassCheerCondResult ExtraPassCondResult
    {
      get
      {
        return _extraPassCondResult;
      }
      set
      {
        __isset.extraPassCondResult = true;
        this._extraPassCondResult = value;
      }
    }

    /// <summary>
    /// 通关奖励
    /// </summary>
    public MusicCodec.PrizeInfo PrizeInfos
    {
      get
      {
        return _prizeInfos;
      }
      set
      {
        __isset.prizeInfos = true;
        this._prizeInfos = value;
      }
    }

    public List<MusicCodec.DanceCheerValResult> CheerValResults
    {
      get
      {
        return _cheerValResults;
      }
      set
      {
        __isset.cheerValResults = true;
        this._cheerValResults = value;
      }
    }

    /// <summary>
    /// 额外奖励
    /// </summary>
    public MusicCodec.PrizeInfo ExtraPrizeInfos
    {
      get
      {
        return _extraPrizeInfos;
      }
      set
      {
        __isset.extraPrizeInfos = true;
        this._extraPrizeInfos = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool canPassTour;
      public bool canAcceptPrize;
      public bool chapterId;
      public bool raidId;
      public bool passRank;
      public bool basicPassCondResult;
      public bool extraPassCondResult;
      public bool prizeInfos;
      public bool cheerValResults;
      public bool extraPrizeInfos;
    }

    public TourDancePassResult() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Bool) {
              CanPassTour = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Bool) {
              CanAcceptPrize = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I16) {
              ChapterId = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I16) {
              RaidId = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Byte) {
              PassRank = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Struct) {
              BasicPassCondResult = new MusicCodec.PassCheerCondResult();
              BasicPassCondResult.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Struct) {
              ExtraPassCondResult = new MusicCodec.PassCheerCondResult();
              ExtraPassCondResult.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.Struct) {
              PrizeInfos = new MusicCodec.PrizeInfo();
              PrizeInfos.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.List) {
              {
                CheerValResults = new List<MusicCodec.DanceCheerValResult>();
                TList _list32 = iprot.ReadListBegin();
                for( int _i33 = 0; _i33 < _list32.Count; ++_i33)
                {
                  MusicCodec.DanceCheerValResult _elem34 = new MusicCodec.DanceCheerValResult();
                  _elem34 = new MusicCodec.DanceCheerValResult();
                  _elem34.Read(iprot);
                  CheerValResults.Add(_elem34);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.Struct) {
              ExtraPrizeInfos = new MusicCodec.PrizeInfo();
              ExtraPrizeInfos.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("TourDancePassResult");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.canPassTour) {
        field.Name = "canPassTour";
        field.Type = TType.Bool;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(CanPassTour);
        oprot.WriteFieldEnd();
      }
      if (__isset.canAcceptPrize) {
        field.Name = "canAcceptPrize";
        field.Type = TType.Bool;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(CanAcceptPrize);
        oprot.WriteFieldEnd();
      }
      if (__isset.chapterId) {
        field.Name = "chapterId";
        field.Type = TType.I16;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(ChapterId);
        oprot.WriteFieldEnd();
      }
      if (__isset.raidId) {
        field.Name = "raidId";
        field.Type = TType.I16;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(RaidId);
        oprot.WriteFieldEnd();
      }
      if (__isset.passRank) {
        field.Name = "passRank";
        field.Type = TType.Byte;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(PassRank);
        oprot.WriteFieldEnd();
      }
      if (BasicPassCondResult != null && __isset.basicPassCondResult) {
        field.Name = "basicPassCondResult";
        field.Type = TType.Struct;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        BasicPassCondResult.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (ExtraPassCondResult != null && __isset.extraPassCondResult) {
        field.Name = "extraPassCondResult";
        field.Type = TType.Struct;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        ExtraPassCondResult.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (PrizeInfos != null && __isset.prizeInfos) {
        field.Name = "prizeInfos";
        field.Type = TType.Struct;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        PrizeInfos.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (CheerValResults != null && __isset.cheerValResults) {
        field.Name = "cheerValResults";
        field.Type = TType.List;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, CheerValResults.Count));
          foreach (MusicCodec.DanceCheerValResult _iter35 in CheerValResults)
          {
            _iter35.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (ExtraPrizeInfos != null && __isset.extraPrizeInfos) {
        field.Name = "extraPrizeInfos";
        field.Type = TType.Struct;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        ExtraPrizeInfos.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("TourDancePassResult(");
      sb.Append("CanPassTour: ");
      sb.Append(CanPassTour);
      sb.Append(",CanAcceptPrize: ");
      sb.Append(CanAcceptPrize);
      sb.Append(",ChapterId: ");
      sb.Append(ChapterId);
      sb.Append(",RaidId: ");
      sb.Append(RaidId);
      sb.Append(",PassRank: ");
      sb.Append(PassRank);
      sb.Append(",BasicPassCondResult: ");
      sb.Append(BasicPassCondResult== null ? "<null>" : BasicPassCondResult.ToString());
      sb.Append(",ExtraPassCondResult: ");
      sb.Append(ExtraPassCondResult== null ? "<null>" : ExtraPassCondResult.ToString());
      sb.Append(",PrizeInfos: ");
      sb.Append(PrizeInfos== null ? "<null>" : PrizeInfos.ToString());
      sb.Append(",CheerValResults: ");
      sb.Append(CheerValResults);
      sb.Append(",ExtraPrizeInfos: ");
      sb.Append(ExtraPrizeInfos== null ? "<null>" : ExtraPrizeInfos.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }

}
