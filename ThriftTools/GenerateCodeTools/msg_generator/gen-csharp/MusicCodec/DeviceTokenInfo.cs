/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class DeviceTokenInfo : TBase
  {
    private string _deviceToken;
    private long _updateTime;
    private byte _upPicLimitCount;
    private byte _giftLimitCount;
    private long _lastUpdateTime;

    public string DeviceToken
    {
      get
      {
        return _deviceToken;
      }
      set
      {
        __isset.deviceToken = true;
        this._deviceToken = value;
      }
    }

    public long UpdateTime
    {
      get
      {
        return _updateTime;
      }
      set
      {
        __isset.updateTime = true;
        this._updateTime = value;
      }
    }

    public byte UpPicLimitCount
    {
      get
      {
        return _upPicLimitCount;
      }
      set
      {
        __isset.upPicLimitCount = true;
        this._upPicLimitCount = value;
      }
    }

    public byte GiftLimitCount
    {
      get
      {
        return _giftLimitCount;
      }
      set
      {
        __isset.giftLimitCount = true;
        this._giftLimitCount = value;
      }
    }

    public long LastUpdateTime
    {
      get
      {
        return _lastUpdateTime;
      }
      set
      {
        __isset.lastUpdateTime = true;
        this._lastUpdateTime = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool deviceToken;
      public bool updateTime;
      public bool upPicLimitCount;
      public bool giftLimitCount;
      public bool lastUpdateTime;
    }

    public DeviceTokenInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              DeviceToken = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I64) {
              UpdateTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Byte) {
              UpPicLimitCount = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Byte) {
              GiftLimitCount = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I64) {
              LastUpdateTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("DeviceTokenInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (DeviceToken != null && __isset.deviceToken) {
        field.Name = "deviceToken";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DeviceToken);
        oprot.WriteFieldEnd();
      }
      if (__isset.updateTime) {
        field.Name = "updateTime";
        field.Type = TType.I64;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(UpdateTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.upPicLimitCount) {
        field.Name = "upPicLimitCount";
        field.Type = TType.Byte;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(UpPicLimitCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.giftLimitCount) {
        field.Name = "giftLimitCount";
        field.Type = TType.Byte;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(GiftLimitCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.lastUpdateTime) {
        field.Name = "lastUpdateTime";
        field.Type = TType.I64;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(LastUpdateTime);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("DeviceTokenInfo(");
      sb.Append("DeviceToken: ");
      sb.Append(DeviceToken);
      sb.Append(",UpdateTime: ");
      sb.Append(UpdateTime);
      sb.Append(",UpPicLimitCount: ");
      sb.Append(UpPicLimitCount);
      sb.Append(",GiftLimitCount: ");
      sb.Append(GiftLimitCount);
      sb.Append(",LastUpdateTime: ");
      sb.Append(LastUpdateTime);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
