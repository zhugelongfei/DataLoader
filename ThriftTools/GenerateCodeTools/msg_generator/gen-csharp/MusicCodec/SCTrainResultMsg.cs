/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  /// <summary>
  /// 训练结果
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SCTrainResultMsg : TBase
  {
    private byte _occupation;
    private int _level;
    private int _occuptionAddExp;
    private int _critVal;
    private short _starLvl;

    /// <summary>
    /// 职业ETrainOccupation
    /// </summary>
    public byte Occupation
    {
      get
      {
        return _occupation;
      }
      set
      {
        __isset.occupation = true;
        this._occupation = value;
      }
    }

    /// <summary>
    /// 当前等级
    /// </summary>
    public int Level
    {
      get
      {
        return _level;
      }
      set
      {
        __isset.level = true;
        this._level = value;
      }
    }

    /// <summary>
    /// 增加经验
    /// </summary>
    public int OccuptionAddExp
    {
      get
      {
        return _occuptionAddExp;
      }
      set
      {
        __isset.occuptionAddExp = true;
        this._occuptionAddExp = value;
      }
    }

    /// <summary>
    /// 暴击倍数(需要/100)
    /// </summary>
    public int CritVal
    {
      get
      {
        return _critVal;
      }
      set
      {
        __isset.critVal = true;
        this._critVal = value;
      }
    }

    /// <summary>
    /// 当前星光等级
    /// </summary>
    public short StarLvl
    {
      get
      {
        return _starLvl;
      }
      set
      {
        __isset.starLvl = true;
        this._starLvl = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool occupation;
      public bool level;
      public bool occuptionAddExp;
      public bool critVal;
      public bool starLvl;
    }

    public SCTrainResultMsg() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Byte) {
              Occupation = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Level = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              OccuptionAddExp = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              CritVal = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I16) {
              StarLvl = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
ClientLog.Instance.LogError("This function is deleted.");
}

    


  }

}
