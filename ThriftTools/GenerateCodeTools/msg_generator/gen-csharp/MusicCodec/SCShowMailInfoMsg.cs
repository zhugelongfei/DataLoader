/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SCShowMailInfoMsg : TBase
  {
    private string _title;
    private string _content;
    private int _contentId;
    private List<string> _contentParams;
    private long _mailId;
    private MusicCodec.PrizeInfo _prizeInfos;

    public string Title
    {
      get
      {
        return _title;
      }
      set
      {
        __isset.title = true;
        this._title = value;
      }
    }

    public string Content
    {
      get
      {
        return _content;
      }
      set
      {
        __isset.content = true;
        this._content = value;
      }
    }

    /// <summary>
    /// 邮件内容多语言提示id，大于0时忽略content
    /// </summary>
    public int ContentId
    {
      get
      {
        return _contentId;
      }
      set
      {
        __isset.contentId = true;
        this._contentId = value;
      }
    }

    /// <summary>
    /// 邮件内容多语言提示参数
    /// </summary>
    public List<string> ContentParams
    {
      get
      {
        return _contentParams;
      }
      set
      {
        __isset.contentParams = true;
        this._contentParams = value;
      }
    }

    public long MailId
    {
      get
      {
        return _mailId;
      }
      set
      {
        __isset.mailId = true;
        this._mailId = value;
      }
    }

    public MusicCodec.PrizeInfo PrizeInfos
    {
      get
      {
        return _prizeInfos;
      }
      set
      {
        __isset.prizeInfos = true;
        this._prizeInfos = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool title;
      public bool content;
      public bool contentId;
      public bool contentParams;
      public bool mailId;
      public bool prizeInfos;
    }

    public SCShowMailInfoMsg() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Title = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Content = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              ContentId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.List) {
              {
                ContentParams = new List<string>();
                TList _list16 = iprot.ReadListBegin();
                for( int _i17 = 0; _i17 < _list16.Count; ++_i17)
                {
                  string _elem18 = null;
                  _elem18 = iprot.ReadString();
                  ContentParams.Add(_elem18);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I64) {
              MailId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Struct) {
              PrizeInfos = new MusicCodec.PrizeInfo();
              PrizeInfos.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("SCShowMailInfoMsg");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Title != null && __isset.title) {
        field.Name = "title";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Title);
        oprot.WriteFieldEnd();
      }
      if (Content != null && __isset.content) {
        field.Name = "content";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Content);
        oprot.WriteFieldEnd();
      }
      if (__isset.contentId) {
        field.Name = "contentId";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ContentId);
        oprot.WriteFieldEnd();
      }
      if (ContentParams != null && __isset.contentParams) {
        field.Name = "contentParams";
        field.Type = TType.List;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, ContentParams.Count));
          foreach (string _iter19 in ContentParams)
          {
            oprot.WriteString(_iter19);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.mailId) {
        field.Name = "mailId";
        field.Type = TType.I64;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(MailId);
        oprot.WriteFieldEnd();
      }
      if (PrizeInfos != null && __isset.prizeInfos) {
        field.Name = "prizeInfos";
        field.Type = TType.Struct;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        PrizeInfos.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("SCShowMailInfoMsg(");
      sb.Append("Title: ");
      sb.Append(Title);
      sb.Append(",Content: ");
      sb.Append(Content);
      sb.Append(",ContentId: ");
      sb.Append(ContentId);
      sb.Append(",ContentParams: ");
      sb.Append(ContentParams);
      sb.Append(",MailId: ");
      sb.Append(MailId);
      sb.Append(",PrizeInfos: ");
      sb.Append(PrizeInfos== null ? "<null>" : PrizeInfos.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }

}
