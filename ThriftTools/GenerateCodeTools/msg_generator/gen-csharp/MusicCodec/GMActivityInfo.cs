/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class GMActivityInfo : TBase
  {
    private short _activiyId;
    private string _activityName;
    private string _icon;
    private string _content;
    private byte _state;
    private byte _type;
    private byte _subType;
    private long _beginTime;
    private long _endTime;
    private List<string> _completedParam;
    private List<string> _param;
    private PrizeInfo _prizeInfos;
    private List<string> _paramDesc;

    public short ActiviyId
    {
      get
      {
        return _activiyId;
      }
      set
      {
        __isset.activiyId = true;
        this._activiyId = value;
      }
    }

    public string ActivityName
    {
      get
      {
        return _activityName;
      }
      set
      {
        __isset.activityName = true;
        this._activityName = value;
      }
    }

    public string Icon
    {
      get
      {
        return _icon;
      }
      set
      {
        __isset.icon = true;
        this._icon = value;
      }
    }

    public string Content
    {
      get
      {
        return _content;
      }
      set
      {
        __isset.content = true;
        this._content = value;
      }
    }

    public byte State
    {
      get
      {
        return _state;
      }
      set
      {
        __isset.state = true;
        this._state = value;
      }
    }

    public byte Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public byte SubType
    {
      get
      {
        return _subType;
      }
      set
      {
        __isset.subType = true;
        this._subType = value;
      }
    }

    public long BeginTime
    {
      get
      {
        return _beginTime;
      }
      set
      {
        __isset.beginTime = true;
        this._beginTime = value;
      }
    }

    public long EndTime
    {
      get
      {
        return _endTime;
      }
      set
      {
        __isset.endTime = true;
        this._endTime = value;
      }
    }

    public List<string> CompletedParam
    {
      get
      {
        return _completedParam;
      }
      set
      {
        __isset.completedParam = true;
        this._completedParam = value;
      }
    }

    public List<string> Param
    {
      get
      {
        return _param;
      }
      set
      {
        __isset.param = true;
        this._param = value;
      }
    }

    /// <summary>
    /// ½±Àø
    /// </summary>
    public PrizeInfo PrizeInfos
    {
      get
      {
        return _prizeInfos;
      }
      set
      {
        __isset.prizeInfos = true;
        this._prizeInfos = value;
      }
    }

    public List<string> ParamDesc
    {
      get
      {
        return _paramDesc;
      }
      set
      {
        __isset.paramDesc = true;
        this._paramDesc = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool activiyId;
      public bool activityName;
      public bool icon;
      public bool content;
      public bool state;
      public bool type;
      public bool subType;
      public bool beginTime;
      public bool endTime;
      public bool completedParam;
      public bool param;
      public bool prizeInfos;
      public bool paramDesc;
    }

    public GMActivityInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I16) {
              ActiviyId = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              ActivityName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Icon = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Content = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Byte) {
              State = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Byte) {
              Type = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Byte) {
              SubType = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I64) {
              BeginTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I64) {
              EndTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.List) {
              {
                CompletedParam = new List<string>();
                TList _list146 = iprot.ReadListBegin();
                for( int _i147 = 0; _i147 < _list146.Count; ++_i147)
                {
                  string _elem148 = null;
                  _elem148 = iprot.ReadString();
                  CompletedParam.Add(_elem148);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.List) {
              {
                Param = new List<string>();
                TList _list149 = iprot.ReadListBegin();
                for( int _i150 = 0; _i150 < _list149.Count; ++_i150)
                {
                  string _elem151 = null;
                  _elem151 = iprot.ReadString();
                  Param.Add(_elem151);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.Struct) {
              PrizeInfos = new PrizeInfo();
              PrizeInfos.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.List) {
              {
                ParamDesc = new List<string>();
                TList _list152 = iprot.ReadListBegin();
                for( int _i153 = 0; _i153 < _list152.Count; ++_i153)
                {
                  string _elem154 = null;
                  _elem154 = iprot.ReadString();
                  ParamDesc.Add(_elem154);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("GMActivityInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.activiyId) {
        field.Name = "activiyId";
        field.Type = TType.I16;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(ActiviyId);
        oprot.WriteFieldEnd();
      }
      if (ActivityName != null && __isset.activityName) {
        field.Name = "activityName";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ActivityName);
        oprot.WriteFieldEnd();
      }
      if (Icon != null && __isset.icon) {
        field.Name = "icon";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Icon);
        oprot.WriteFieldEnd();
      }
      if (Content != null && __isset.content) {
        field.Name = "content";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Content);
        oprot.WriteFieldEnd();
      }
      if (__isset.state) {
        field.Name = "state";
        field.Type = TType.Byte;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(State);
        oprot.WriteFieldEnd();
      }
      if (__isset.type) {
        field.Name = "type";
        field.Type = TType.Byte;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Type);
        oprot.WriteFieldEnd();
      }
      if (__isset.subType) {
        field.Name = "subType";
        field.Type = TType.Byte;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(SubType);
        oprot.WriteFieldEnd();
      }
      if (__isset.beginTime) {
        field.Name = "beginTime";
        field.Type = TType.I64;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(BeginTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.endTime) {
        field.Name = "endTime";
        field.Type = TType.I64;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(EndTime);
        oprot.WriteFieldEnd();
      }
      if (CompletedParam != null && __isset.completedParam) {
        field.Name = "completedParam";
        field.Type = TType.List;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, CompletedParam.Count));
          foreach (string _iter155 in CompletedParam)
          {
            oprot.WriteString(_iter155);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Param != null && __isset.param) {
        field.Name = "param";
        field.Type = TType.List;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, Param.Count));
          foreach (string _iter156 in Param)
          {
            oprot.WriteString(_iter156);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (PrizeInfos != null && __isset.prizeInfos) {
        field.Name = "prizeInfos";
        field.Type = TType.Struct;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        PrizeInfos.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (ParamDesc != null && __isset.paramDesc) {
        field.Name = "paramDesc";
        field.Type = TType.List;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, ParamDesc.Count));
          foreach (string _iter157 in ParamDesc)
          {
            oprot.WriteString(_iter157);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("GMActivityInfo(");
      sb.Append("ActiviyId: ");
      sb.Append(ActiviyId);
      sb.Append(",ActivityName: ");
      sb.Append(ActivityName);
      sb.Append(",Icon: ");
      sb.Append(Icon);
      sb.Append(",Content: ");
      sb.Append(Content);
      sb.Append(",State: ");
      sb.Append(State);
      sb.Append(",Type: ");
      sb.Append(Type);
      sb.Append(",SubType: ");
      sb.Append(SubType);
      sb.Append(",BeginTime: ");
      sb.Append(BeginTime);
      sb.Append(",EndTime: ");
      sb.Append(EndTime);
      sb.Append(",CompletedParam: ");
      sb.Append(CompletedParam);
      sb.Append(",Param: ");
      sb.Append(Param);
      sb.Append(",PrizeInfos: ");
      sb.Append(PrizeInfos== null ? "<null>" : PrizeInfos.ToString());
      sb.Append(",ParamDesc: ");
      sb.Append(ParamDesc);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
