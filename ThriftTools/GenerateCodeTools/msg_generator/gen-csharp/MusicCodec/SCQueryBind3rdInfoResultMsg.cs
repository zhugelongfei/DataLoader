/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SCQueryBind3rdInfoResultMsg : TBase
  {
    private Dictionary<long, long> _bindAccountIds;
    private int _index;
    private MusicCodec.BindAccountType _bindType;

    public Dictionary<long, long> BindAccountIds
    {
      get
      {
        return _bindAccountIds;
      }
      set
      {
        __isset.bindAccountIds = true;
        this._bindAccountIds = value;
      }
    }

    public int Index
    {
      get
      {
        return _index;
      }
      set
      {
        __isset.index = true;
        this._index = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="MusicCodec.BindAccountType"/>
    /// </summary>
    public MusicCodec.BindAccountType BindType
    {
      get
      {
        return _bindType;
      }
      set
      {
        __isset.bindType = true;
        this._bindType = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool bindAccountIds;
      public bool index;
      public bool bindType;
    }

    public SCQueryBind3rdInfoResultMsg() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Map) {
              {
                BindAccountIds = new Dictionary<long, long>();
                TMap _map22 = iprot.ReadMapBegin();
                for( int _i23 = 0; _i23 < _map22.Count; ++_i23)
                {
                  long _key24;
                  long _val25;
                  _key24 = iprot.ReadI64();
                  _val25 = iprot.ReadI64();
                  BindAccountIds[_key24] = _val25;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Index = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              BindType = (MusicCodec.BindAccountType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
ClientLog.Instance.LogError("This function is deleted.");
}

    


  }

}
