/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MusicCodec
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class BaseItemInfo : TBase
  {
    private byte _type;
    private int _templateId;
    private long _instanceId;
    private int _count;
    private int _validTime;
    private AvatarDiyArea _diyAreas;
    private byte _bind;
    private string _partnerName;
    private bool _isBagItemUsing;

    public byte Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public int TemplateId
    {
      get
      {
        return _templateId;
      }
      set
      {
        __isset.templateId = true;
        this._templateId = value;
      }
    }

    public long InstanceId
    {
      get
      {
        return _instanceId;
      }
      set
      {
        __isset.instanceId = true;
        this._instanceId = value;
      }
    }

    public int Count
    {
      get
      {
        return _count;
      }
      set
      {
        __isset.count = true;
        this._count = value;
      }
    }

    public int ValidTime
    {
      get
      {
        return _validTime;
      }
      set
      {
        __isset.validTime = true;
        this._validTime = value;
      }
    }

    public AvatarDiyArea DiyAreas
    {
      get
      {
        return _diyAreas;
      }
      set
      {
        __isset.diyAreas = true;
        this._diyAreas = value;
      }
    }

    public byte Bind
    {
      get
      {
        return _bind;
      }
      set
      {
        __isset.bind = true;
        this._bind = value;
      }
    }

    /// <summary>
    /// 婚戒显示伴侣名字
    /// </summary>
    public string PartnerName
    {
      get
      {
        return _partnerName;
      }
      set
      {
        __isset.partnerName = true;
        this._partnerName = value;
      }
    }

    /// <summary>
    /// 背包中道具是否使用
    /// </summary>
    public bool IsBagItemUsing
    {
      get
      {
        return _isBagItemUsing;
      }
      set
      {
        __isset.isBagItemUsing = true;
        this._isBagItemUsing = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool type;
      public bool templateId;
      public bool instanceId;
      public bool count;
      public bool validTime;
      public bool diyAreas;
      public bool bind;
      public bool partnerName;
      public bool isBagItemUsing;
    }

    public BaseItemInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Byte) {
              Type = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              TemplateId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              InstanceId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              Count = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              ValidTime = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Struct) {
              DiyAreas = new AvatarDiyArea();
              DiyAreas.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Byte) {
              Bind = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              PartnerName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.Bool) {
              IsBagItemUsing = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("BaseItemInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.type) {
        field.Name = "type";
        field.Type = TType.Byte;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Type);
        oprot.WriteFieldEnd();
      }
      if (__isset.templateId) {
        field.Name = "templateId";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TemplateId);
        oprot.WriteFieldEnd();
      }
      if (__isset.instanceId) {
        field.Name = "instanceId";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(InstanceId);
        oprot.WriteFieldEnd();
      }
      if (__isset.count) {
        field.Name = "count";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Count);
        oprot.WriteFieldEnd();
      }
      if (__isset.validTime) {
        field.Name = "validTime";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ValidTime);
        oprot.WriteFieldEnd();
      }
      if (DiyAreas != null && __isset.diyAreas) {
        field.Name = "diyAreas";
        field.Type = TType.Struct;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        DiyAreas.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.bind) {
        field.Name = "bind";
        field.Type = TType.Byte;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Bind);
        oprot.WriteFieldEnd();
      }
      if (PartnerName != null && __isset.partnerName) {
        field.Name = "partnerName";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(PartnerName);
        oprot.WriteFieldEnd();
      }
      if (__isset.isBagItemUsing) {
        field.Name = "isBagItemUsing";
        field.Type = TType.Bool;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsBagItemUsing);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("BaseItemInfo(");
      sb.Append("Type: ");
      sb.Append(Type);
      sb.Append(",TemplateId: ");
      sb.Append(TemplateId);
      sb.Append(",InstanceId: ");
      sb.Append(InstanceId);
      sb.Append(",Count: ");
      sb.Append(Count);
      sb.Append(",ValidTime: ");
      sb.Append(ValidTime);
      sb.Append(",DiyAreas: ");
      sb.Append(DiyAreas== null ? "<null>" : DiyAreas.ToString());
      sb.Append(",Bind: ");
      sb.Append(Bind);
      sb.Append(",PartnerName: ");
      sb.Append(PartnerName);
      sb.Append(",IsBagItemUsing: ");
      sb.Append(IsBagItemUsing);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
